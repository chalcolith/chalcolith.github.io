{
    "docs": [
        {
            "location": "/",
            "text": "Packages\n\n\n\n\nkiuatan\n\n\nbuiltin\n\n\ncollections\n\n\ndebug\n\n\nitertools\n\n\nponytest\n\n\ntime",
            "title": "kiuatan"
        },
        {
            "location": "/kiuatan--index/",
            "text": "No package doc string provided for kiuatan.\n\n\nPublic Types\n\n\n\n\nclass RuleNot\n\n\nclass RuleAnd\n\n\ntype ParseRuleCallStack\n\n\ntrait ParseRule\n\n\nclass RuleChoice\n\n\nclass RuleAny\n\n\nclass RuleRepeat\n\n\nclass RuleSequence\n\n\nclass ParseResult\n\n\nclass ParseActionContext\n\n\ntype ParseAction\n\n\nclass RuleClass\n\n\ntype ParseSegment\n\n\nclass ParseLoc\n\n\nclass RuleLiteral\n\n\nclass ParseState\n\n\n\n\nPrivate Types\n\n\n\n\ntype _RuleToExpMemo\n\n\ntype _ExpToLocMemo\n\n\ntype _LocToResultMemo\n\n\ntype _RuleToLocLR\n\n\ntype _LocToLR\n\n\nclass _Expansion\n\n\nclass _LRRecord",
            "title": "Package"
        },
        {
            "location": "/kiuatan--index/#public-types",
            "text": "class RuleNot  class RuleAnd  type ParseRuleCallStack  trait ParseRule  class RuleChoice  class RuleAny  class RuleRepeat  class RuleSequence  class ParseResult  class ParseActionContext  type ParseAction  class RuleClass  type ParseSegment  class ParseLoc  class RuleLiteral  class ParseState",
            "title": "Public Types"
        },
        {
            "location": "/kiuatan--index/#private-types",
            "text": "type _RuleToExpMemo  type _ExpToLocMemo  type _LocToResultMemo  type _RuleToLocLR  type _LocToLR  class _Expansion  class _LRRecord",
            "title": "Private Types"
        },
        {
            "location": "/kiuatan-RuleNot/",
            "text": "RuleNot[TSrc: TSrc, optional TVal: TVal]\n\n\nNegative lookahead; successfully matches if the child rule does \nnot\n\nmatch, without advancing the match position.\n\n\nclass ref RuleNot[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref\n\n\n\n\nImplements\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  child: ParseRule[TSrc, TVal] box,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleNot[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleNot\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic Functions\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class RuleNot"
        },
        {
            "location": "/kiuatan-RuleNot/#rulenot91tsrc-tsrc-optional-tval-tval93",
            "text": "Negative lookahead; successfully matches if the child rule does  not \nmatch, without advancing the match position.  class ref RuleNot[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref  Implements   ParseRule [TSrc, TVal] ref",
            "title": "RuleNot[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleNot/#constructors",
            "text": "create  new ref create(\n  child: ParseRule[TSrc, TVal] box,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleNot[TSrc, TVal] ref^  Parameters   child:  ParseRule [TSrc, TVal] box  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val |  None  val) = reference   Returns   RuleNot [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-RuleNot/#public-functions",
            "text": "can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc, TVal] ref  start:  ParseLoc [TSrc] box   Returns   ( ParseResult [TSrc, TVal] ref |  None  val) ?    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleNot/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-RuleAnd/",
            "text": "RuleAnd[TSrc: TSrc, optional TVal: TVal]\n\n\nLookahead; matches its child rule without advancing the match position.\n\n\nDiscards any results of the child match.\n\n\nclass ref RuleAnd[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref\n\n\n\n\nImplements\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  child: ParseRule[TSrc, TVal] box,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleAnd[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleAnd\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic Functions\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class RuleAnd"
        },
        {
            "location": "/kiuatan-RuleAnd/#ruleand91tsrc-tsrc-optional-tval-tval93",
            "text": "Lookahead; matches its child rule without advancing the match position.  Discards any results of the child match.  class ref RuleAnd[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref  Implements   ParseRule [TSrc, TVal] ref",
            "title": "RuleAnd[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleAnd/#constructors",
            "text": "create  new ref create(\n  child: ParseRule[TSrc, TVal] box,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleAnd[TSrc, TVal] ref^  Parameters   child:  ParseRule [TSrc, TVal] box  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val |  None  val) = reference   Returns   RuleAnd [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-RuleAnd/#public-functions",
            "text": "can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc, TVal] ref  start:  ParseLoc [TSrc] box   Returns   ( ParseResult [TSrc, TVal] ref |  None  val) ?    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleAnd/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-ParseRuleCallStack/",
            "text": "ParseRuleCallStack[TSrc: TSrc, TVal: TVal]\n\n\ntype ParseRuleCallStack[TSrc: TSrc, TVal: TVal] is\n  (ListNode[ParseRule[TSrc, TVal] box] ref | None val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val)",
            "title": "type ParseRuleCallStack"
        },
        {
            "location": "/kiuatan-ParseRuleCallStack/#parserulecallstack91tsrc-tsrc-tval-tval93",
            "text": "type ParseRuleCallStack[TSrc: TSrc, TVal: TVal] is\n  (ListNode[ParseRule[TSrc, TVal] box] ref | None val)  Type Alias For   ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val)",
            "title": "ParseRuleCallStack[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-ParseRule/",
            "text": "ParseRule[TSrc: TSrc, optional TVal: TVal]\n\n\nA rule in a grammar.\n\n\ntrait ref ParseRule[TSrc: TSrc, optional TVal: TVal]\n\n\n\n\nPublic Functions\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "trait ParseRule"
        },
        {
            "location": "/kiuatan-ParseRule/#parserule91tsrc-tsrc-optional-tval-tval93",
            "text": "A rule in a grammar.  trait ref ParseRule[TSrc: TSrc, optional TVal: TVal]",
            "title": "ParseRule[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-ParseRule/#public-functions",
            "text": "can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    string  fun box string()\n: String iso^  Returns   String  iso^    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc, TVal] ref  start:  ParseLoc [TSrc] box   Returns   ( ParseResult [TSrc, TVal] ref |  None  val) ?    add  fun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-ParseRule/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-RuleChoice/",
            "text": "RuleChoice[TSrc: TSrc, optional TVal: TVal]\n\n\nMatches one of a list of rules.  Uses PEG committed choice semantics;\ndoes not backtrack once a choice has matched.\n\n\nclass ref RuleChoice[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref\n\n\n\n\nImplements\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  children: ReadSeq[ParseRule[TSrc, TVal] box] box = qualify,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleChoice[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nchildren: \nReadSeq\n[\nParseRule\n[TSrc, TVal] box] box = qualify\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleChoice\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic Functions\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunshift\n\n\nfun ref unshift(\n  child: ParseRule[TSrc, TVal] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nfun ref push(\n  child: ParseRule[TSrc, TVal] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class RuleChoice"
        },
        {
            "location": "/kiuatan-RuleChoice/#rulechoice91tsrc-tsrc-optional-tval-tval93",
            "text": "Matches one of a list of rules.  Uses PEG committed choice semantics;\ndoes not backtrack once a choice has matched.  class ref RuleChoice[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref  Implements   ParseRule [TSrc, TVal] ref",
            "title": "RuleChoice[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleChoice/#constructors",
            "text": "create  new ref create(\n  children: ReadSeq[ParseRule[TSrc, TVal] box] box = qualify,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleChoice[TSrc, TVal] ref^  Parameters   children:  ReadSeq [ ParseRule [TSrc, TVal] box] box = qualify  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val |  None  val) = reference   Returns   RuleChoice [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-RuleChoice/#public-functions",
            "text": "can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    unshift  fun ref unshift(\n  child: ParseRule[TSrc, TVal] box)\n: None val  Parameters   child:  ParseRule [TSrc, TVal] box   Returns   None  val    push  fun ref push(\n  child: ParseRule[TSrc, TVal] box)\n: None val  Parameters   child:  ParseRule [TSrc, TVal] box   Returns   None  val    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc, TVal] ref  start:  ParseLoc [TSrc] box   Returns   ( ParseResult [TSrc, TVal] ref |  None  val) ?    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleChoice/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-RuleAny/",
            "text": "RuleAny[TSrc: TSrc, optional TVal: TVal]\n\n\nMatches any single input.\n\n\nclass ref RuleAny[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref\n\n\n\n\nImplements\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleAny[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleAny\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class RuleAny"
        },
        {
            "location": "/kiuatan-RuleAny/#ruleany91tsrc-tsrc-optional-tval-tval93",
            "text": "Matches any single input.  class ref RuleAny[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref  Implements   ParseRule [TSrc, TVal] ref",
            "title": "RuleAny[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleAny/#constructors",
            "text": "create  new ref create(\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleAny[TSrc, TVal] ref^  Parameters   action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val |  None  val) = reference   Returns   RuleAny [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-RuleAny/#public-functions",
            "text": "name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc, TVal] ref  start:  ParseLoc [TSrc] box   Returns   ( ParseResult [TSrc, TVal] ref |  None  val) ?    can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleAny/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-RuleRepeat/",
            "text": "RuleRepeat[TSrc: TSrc, optional TVal: TVal]\n\n\nMatches a number of repetitions of a rule.\n\n\nclass ref RuleRepeat[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref\n\n\n\n\nImplements\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  child: ParseRule[TSrc, TVal] box,\n  min: USize val,\n  max: USize val = call,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleRepeat[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\nmin: \nUSize\n val\n\n\nmax: \nUSize\n val = call\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleRepeat\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic Functions\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class RuleRepeat"
        },
        {
            "location": "/kiuatan-RuleRepeat/#rulerepeat91tsrc-tsrc-optional-tval-tval93",
            "text": "Matches a number of repetitions of a rule.  class ref RuleRepeat[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref  Implements   ParseRule [TSrc, TVal] ref",
            "title": "RuleRepeat[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleRepeat/#constructors",
            "text": "create  new ref create(\n  child: ParseRule[TSrc, TVal] box,\n  min: USize val,\n  max: USize val = call,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleRepeat[TSrc, TVal] ref^  Parameters   child:  ParseRule [TSrc, TVal] box  min:  USize  val  max:  USize  val = call  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val |  None  val) = reference   Returns   RuleRepeat [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-RuleRepeat/#public-functions",
            "text": "can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc, TVal] ref  start:  ParseLoc [TSrc] box   Returns   ( ParseResult [TSrc, TVal] ref |  None  val) ?    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleRepeat/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-RuleSequence/",
            "text": "RuleSequence[TSrc: TSrc, optional TVal: TVal]\n\n\nMatches a sequence of child rules.\n\n\nclass ref RuleSequence[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref\n\n\n\n\nImplements\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  children: ReadSeq[ParseRule[TSrc, TVal] box] box = qualify,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleSequence[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nchildren: \nReadSeq\n[\nParseRule\n[TSrc, TVal] box] box = qualify\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleSequence\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic Functions\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunshift\n\n\nfun ref unshift(\n  child: ParseRule[TSrc, TVal] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nfun ref push(\n  child: ParseRule[TSrc, TVal] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class RuleSequence"
        },
        {
            "location": "/kiuatan-RuleSequence/#rulesequence91tsrc-tsrc-optional-tval-tval93",
            "text": "Matches a sequence of child rules.  class ref RuleSequence[TSrc: TSrc, optional TVal: TVal] is\n  ParseRule[TSrc, TVal] ref  Implements   ParseRule [TSrc, TVal] ref",
            "title": "RuleSequence[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleSequence/#constructors",
            "text": "create  new ref create(\n  children: ReadSeq[ParseRule[TSrc, TVal] box] box = qualify,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val) = reference)\n: RuleSequence[TSrc, TVal] ref^  Parameters   children:  ReadSeq [ ParseRule [TSrc, TVal] box] box = qualify  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val |  None  val) = reference   Returns   RuleSequence [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-RuleSequence/#public-functions",
            "text": "can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    unshift  fun ref unshift(\n  child: ParseRule[TSrc, TVal] box)\n: None val  Parameters   child:  ParseRule [TSrc, TVal] box   Returns   None  val    push  fun ref push(\n  child: ParseRule[TSrc, TVal] box)\n: None val  Parameters   child:  ParseRule [TSrc, TVal] box   Returns   None  val    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc, TVal] ref,\n  start: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc, TVal] ref  start:  ParseLoc [TSrc] box   Returns   ( ParseResult [TSrc, TVal] ref |  None  val) ?    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc, TVal] ref)\n: ParseRule[TSrc, TVal] ref  Parameters   other:  ParseRule [TSrc, TVal] ref   Returns   ParseRule [TSrc, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleSequence/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-ParseResult/",
            "text": "ParseResult[TSrc: TSrc, optional TVal: TVal]\n\n\nHolds information about the result of a successful parse.\n\n\nclass ref ParseResult[TSrc: TSrc, optional TVal: TVal]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  state': ParseState[TSrc, TVal] box,\n  start': ParseLoc[TSrc] box,\n  next': ParseLoc[TSrc] box,\n  children': ReadSeq[ParseResult[TSrc, TVal] ref] box,\n  act': ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val))\n: ParseResult[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nstate': \nParseState\n[TSrc, TVal] box\n\n\nstart': \nParseLoc\n[TSrc] box\n\n\nnext': \nParseLoc\n[TSrc] box\n\n\nchildren': \nReadSeq\n[\nParseResult\n[TSrc, TVal] ref] box\n\n\nact': ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nParseResult\n[TSrc, TVal] ref^\n\n\n\n\n\n\nfrom_value\n\n\nnew ref from_value(\n  state': ParseState[TSrc, TVal] box,\n  start': ParseLoc[TSrc] box,\n  next': ParseLoc[TSrc] box,\n  children': ReadSeq[ParseResult[TSrc, TVal] ref] box,\n  res': (TVal | None val))\n: ParseResult[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nstate': \nParseState\n[TSrc, TVal] box\n\n\nstart': \nParseLoc\n[TSrc] box\n\n\nnext': \nParseLoc\n[TSrc] box\n\n\nchildren': \nReadSeq\n[\nParseResult\n[TSrc, TVal] ref] box\n\n\nres': (TVal | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nParseResult\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet state: \nParseState\n[TSrc, TVal] box\n\n\n\n\n\n\n\n\nlet start: \nParseLoc\n[TSrc] box\n\n\n\n\n\n\n\n\nlet next: \nParseLoc\n[TSrc] box\n\n\n\n\n\n\n\n\nlet children: \nReadSeq\n[\nParseResult\n[TSrc, TVal] ref] box\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: (TVal! | None val)\n\n\n\n\nReturns\n\n\n\n\n(TVal! | \nNone\n val)",
            "title": "class ParseResult"
        },
        {
            "location": "/kiuatan-ParseResult/#parseresult91tsrc-tsrc-optional-tval-tval93",
            "text": "Holds information about the result of a successful parse.  class ref ParseResult[TSrc: TSrc, optional TVal: TVal]",
            "title": "ParseResult[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-ParseResult/#constructors",
            "text": "create  new ref create(\n  state': ParseState[TSrc, TVal] box,\n  start': ParseLoc[TSrc] box,\n  next': ParseLoc[TSrc] box,\n  children': ReadSeq[ParseResult[TSrc, TVal] ref] box,\n  act': ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val | None val))\n: ParseResult[TSrc, TVal] ref^  Parameters   state':  ParseState [TSrc, TVal] box  start':  ParseLoc [TSrc] box  next':  ParseLoc [TSrc] box  children':  ReadSeq [ ParseResult [TSrc, TVal] ref] box  act': ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] val |  None  val)   Returns   ParseResult [TSrc, TVal] ref^    from_value  new ref from_value(\n  state': ParseState[TSrc, TVal] box,\n  start': ParseLoc[TSrc] box,\n  next': ParseLoc[TSrc] box,\n  children': ReadSeq[ParseResult[TSrc, TVal] ref] box,\n  res': (TVal | None val))\n: ParseResult[TSrc, TVal] ref^  Parameters   state':  ParseState [TSrc, TVal] box  start':  ParseLoc [TSrc] box  next':  ParseLoc [TSrc] box  children':  ReadSeq [ ParseResult [TSrc, TVal] ref] box  res': (TVal |  None  val)   Returns   ParseResult [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-ParseResult/#public-fields",
            "text": "let state:  ParseState [TSrc, TVal] box     let start:  ParseLoc [TSrc] box     let next:  ParseLoc [TSrc] box     let children:  ReadSeq [ ParseResult [TSrc, TVal] ref] box",
            "title": "Public fields"
        },
        {
            "location": "/kiuatan-ParseResult/#public-functions",
            "text": "value  fun box value()\n: (TVal! | None val)  Returns   (TVal! |  None  val)",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-ParseActionContext/",
            "text": "ParseActionContext[TSrc: TSrc, TVal: TVal]\n\n\nHolds the context for a parse action.\n\n\nclass box ParseActionContext[TSrc: TSrc, TVal: TVal]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  state': ParseState[TSrc, TVal] box,\n  start': ParseLoc[TSrc] box,\n  next': ParseLoc[TSrc] box,\n  results': ReadSeq[ParseResult[TSrc, TVal] box] box)\n: ParseActionContext[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nstate': \nParseState\n[TSrc, TVal] box\n\n\nstart': \nParseLoc\n[TSrc] box\n\n\nnext': \nParseLoc\n[TSrc] box\n\n\nresults': \nReadSeq\n[\nParseResult\n[TSrc, TVal] box] box\n\n\n\n\nReturns\n\n\n\n\nParseActionContext\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet state: \nParseState\n[TSrc, TVal] box\n\n\n\n\n\n\n\n\nlet start: \nParseLoc\n[TSrc] box\n\n\n\n\n\n\n\n\nlet next: \nParseLoc\n[TSrc] box\n\n\n\n\n\n\n\n\nlet results: \nReadSeq\n[\nParseResult\n[TSrc, TVal] box] box",
            "title": "class ParseActionContext"
        },
        {
            "location": "/kiuatan-ParseActionContext/#parseactioncontext91tsrc-tsrc-tval-tval93",
            "text": "Holds the context for a parse action.  class box ParseActionContext[TSrc: TSrc, TVal: TVal]",
            "title": "ParseActionContext[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-ParseActionContext/#constructors",
            "text": "create  new ref create(\n  state': ParseState[TSrc, TVal] box,\n  start': ParseLoc[TSrc] box,\n  next': ParseLoc[TSrc] box,\n  results': ReadSeq[ParseResult[TSrc, TVal] box] box)\n: ParseActionContext[TSrc, TVal] ref^  Parameters   state':  ParseState [TSrc, TVal] box  start':  ParseLoc [TSrc] box  next':  ParseLoc [TSrc] box  results':  ReadSeq [ ParseResult [TSrc, TVal] box] box   Returns   ParseActionContext [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-ParseActionContext/#public-fields",
            "text": "let state:  ParseState [TSrc, TVal] box     let start:  ParseLoc [TSrc] box     let next:  ParseLoc [TSrc] box     let results:  ReadSeq [ ParseResult [TSrc, TVal] box] box",
            "title": "Public fields"
        },
        {
            "location": "/kiuatan-ParseAction/",
            "text": "ParseAction[TSrc: TSrc, TVal: TVal]\n\n\ntype ParseAction[TSrc: TSrc, TVal: TVal] is\n  {(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] ref\n\n\n\n\nType Alias For\n\n\n\n\n{(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] ref",
            "title": "type ParseAction"
        },
        {
            "location": "/kiuatan-ParseAction/#parseaction91tsrc-tsrc-tval-tval93",
            "text": "type ParseAction[TSrc: TSrc, TVal: TVal] is\n  {(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] ref  Type Alias For   {(ParseActionContext[TSrc, TVal]): TVal}[TSrc, TVal] ref",
            "title": "ParseAction[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleClass/",
            "text": "RuleClass[TSrc: (\nHashable\n #read & \nEquatable\n[TSrc #read] #read & \nStringable\n), optional TVal: TVal]\n\n\nMatches any of a set of inputs.\n\n\nclass ref RuleClass[TSrc: (Hashable #read & Equatable[TSrc #read] #read & Stringable), optional TVal: TVal] is\n  ParseRule[TSrc #read, TVal] ref\n\n\n\n\nImplements\n\n\n\n\nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  expected: HashSet[TSrc #read, HashEq[TSrc #read] val] box,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | None val) = reference)\n: RuleClass[TSrc #read, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nexpected: \nHashSet\n[TSrc #read, \nHashEq\n[TSrc #read] val] box\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleClass\n[TSrc #read, TVal] ref^\n\n\n\n\n\n\nfrom_iter\n\n\nnew ref from_iter(\n  expected: Iterator[TSrc #read] ref,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | None val) = reference)\n: RuleClass[TSrc #read, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nexpected: \nIterator\n[TSrc #read] ref\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleClass\n[TSrc #read, TVal] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc #read, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc #read, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc #read, TVal] ref,\n  start: ParseLoc[TSrc #read] box)\n: (ParseResult[TSrc #read, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc #read, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc #read] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc #read, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc #read, TVal] ref)\n: ParseRule[TSrc #read, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc #read, TVal] ref)\n: ParseRule[TSrc #read, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc #read, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc #read, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc #read, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc #read, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class RuleClass"
        },
        {
            "location": "/kiuatan-RuleClass/#ruleclass91tsrc-hashable-read-equatable91tsrc-read93-read-stringable-optional-tval-tval93",
            "text": "Matches any of a set of inputs.  class ref RuleClass[TSrc: (Hashable #read & Equatable[TSrc #read] #read & Stringable), optional TVal: TVal] is\n  ParseRule[TSrc #read, TVal] ref  Implements   ParseRule [TSrc #read, TVal] ref",
            "title": "RuleClass[TSrc: (Hashable #read & Equatable[TSrc #read] #read & Stringable), optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleClass/#constructors",
            "text": "create  new ref create(\n  expected: HashSet[TSrc #read, HashEq[TSrc #read] val] box,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | None val) = reference)\n: RuleClass[TSrc #read, TVal] ref^  Parameters   expected:  HashSet [TSrc #read,  HashEq [TSrc #read] val] box  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val |  None  val) = reference   Returns   RuleClass [TSrc #read, TVal] ref^    from_iter  new ref from_iter(\n  expected: Iterator[TSrc #read] ref,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | None val) = reference)\n: RuleClass[TSrc #read, TVal] ref^  Parameters   expected:  Iterator [TSrc #read] ref  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val |  None  val) = reference   Returns   RuleClass [TSrc #read, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-RuleClass/#public-functions",
            "text": "name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc #read, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc #read, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc #read, TVal] ref,\n  start: ParseLoc[TSrc #read] box)\n: (ParseResult[TSrc #read, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc #read, TVal] ref  start:  ParseLoc [TSrc #read] box   Returns   ( ParseResult [TSrc #read, TVal] ref |  None  val) ?    can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  other: ParseRule[TSrc #read, TVal] ref)\n: ParseRule[TSrc #read, TVal] ref  Parameters   other:  ParseRule [TSrc #read, TVal] ref   Returns   ParseRule [TSrc #read, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc #read, TVal] ref)\n: ParseRule[TSrc #read, TVal] ref  Parameters   other:  ParseRule [TSrc #read, TVal] ref   Returns   ParseRule [TSrc #read, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleClass/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc #read, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc #read, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc #read, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc #read, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-ParseSegment/",
            "text": "ParseSegment[T: T]\n\n\ntype ParseSegment[T: T] is\n  ListNode[ReadSeq[T] box] ref\n\n\n\n\nType Alias For\n\n\n\n\nListNode\n[\nReadSeq\n[T] box] ref",
            "title": "type ParseSegment"
        },
        {
            "location": "/kiuatan-ParseSegment/#parsesegment91t-t93",
            "text": "type ParseSegment[T: T] is\n  ListNode[ReadSeq[T] box] ref  Type Alias For   ListNode [ ReadSeq [T] box] ref",
            "title": "ParseSegment[T: T]"
        },
        {
            "location": "/kiuatan-ParseLoc/",
            "text": "ParseLoc[T: T]\n\n\nA pointer to a particular location in list of source sequences.\n\n\nclass ref ParseLoc[T: T] is\n  Comparable[ParseLoc[T] ref] ref,\n  Hashable ref,\n  Stringable box\n\n\n\n\nImplements\n\n\n\n\nComparable\n[\nParseLoc\n[T] ref] ref\n\n\nHashable\n ref\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  node': ListNode[ReadSeq[T] box] box,\n  index': USize val = 0)\n: ParseLoc[T] ref^\n\n\n\n\nParameters\n\n\n\n\nnode': \nListNode\n[\nReadSeq\n[T] box] box\n\n\nindex': \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nParseLoc\n[T] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nsegment\n\n\nfun box segment()\n: ListNode[ReadSeq[T] box] box\n\n\n\n\nReturns\n\n\n\n\nListNode\n[\nReadSeq\n[T] box] box\n\n\n\n\n\n\nindex\n\n\nfun box index()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: box->T ?\n\n\n\n\nReturns\n\n\n\n\nbox->T ?\n\n\n\n\n\n\nclone\n\n\nfun box clone()\n: ParseLoc[T] ref^\n\n\n\n\nReturns\n\n\n\n\nParseLoc\n[T] ref^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  n: USize val)\n: ParseLoc[T] ref^ ?\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nParseLoc\n[T] ref^ ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: ParseLoc[T] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nParseLoc\n[T] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: ParseLoc[T] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nParseLoc\n[T] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  that: ParseLoc[T] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nParseLoc\n[T] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  that: ParseLoc[T] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nParseLoc\n[T] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  that: ParseLoc[T] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nParseLoc\n[T] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  that: ParseLoc[T] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nParseLoc\n[T] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: ParseLoc[T] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nParseLoc\n[T] box\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "class ParseLoc"
        },
        {
            "location": "/kiuatan-ParseLoc/#parseloc91t-t93",
            "text": "A pointer to a particular location in list of source sequences.  class ref ParseLoc[T: T] is\n  Comparable[ParseLoc[T] ref] ref,\n  Hashable ref,\n  Stringable box  Implements   Comparable [ ParseLoc [T] ref] ref  Hashable  ref  Stringable  box",
            "title": "ParseLoc[T: T]"
        },
        {
            "location": "/kiuatan-ParseLoc/#constructors",
            "text": "create  new ref create(\n  node': ListNode[ReadSeq[T] box] box,\n  index': USize val = 0)\n: ParseLoc[T] ref^  Parameters   node':  ListNode [ ReadSeq [T] box] box  index':  USize  val = 0   Returns   ParseLoc [T] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-ParseLoc/#public-functions",
            "text": "segment  fun box segment()\n: ListNode[ReadSeq[T] box] box  Returns   ListNode [ ReadSeq [T] box] box    index  fun box index()\n: None val  Returns   None  val    has_next  fun box has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: box->T ?  Returns   box->T ?    clone  fun box clone()\n: ParseLoc[T] ref^  Returns   ParseLoc [T] ref^    add  fun box add(\n  n: USize val)\n: ParseLoc[T] ref^ ?  Parameters   n:  USize  val   Returns   ParseLoc [T] ref^ ?    eq  fun box eq(\n  that: ParseLoc[T] box)\n: Bool val  Parameters   that:  ParseLoc [T] box   Returns   Bool  val    ne  fun box ne(\n  that: ParseLoc[T] box)\n: Bool val  Parameters   that:  ParseLoc [T] box   Returns   Bool  val    lt  fun box lt(\n  that: ParseLoc[T] box)\n: Bool val  Parameters   that:  ParseLoc [T] box   Returns   Bool  val    le  fun box le(\n  that: ParseLoc[T] box)\n: Bool val  Parameters   that:  ParseLoc [T] box   Returns   Bool  val    ge  fun box ge(\n  that: ParseLoc[T] box)\n: Bool val  Parameters   that:  ParseLoc [T] box   Returns   Bool  val    gt  fun box gt(\n  that: ParseLoc[T] box)\n: Bool val  Parameters   that:  ParseLoc [T] box   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    string  fun box string()\n: String iso^  Returns   String  iso^    compare  fun box compare(\n  that: ParseLoc[T] box)\n: (Less val | Equal val | Greater val)  Parameters   that:  ParseLoc [T] box   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleLiteral/",
            "text": "RuleLiteral[TSrc: (\nEquatable\n[TSrc #read] #read & \nStringable\n #read), optional TVal: TVal]\n\n\nMatches a literal sequence of inputs.\n\n\nclass ref RuleLiteral[TSrc: (Equatable[TSrc #read] #read & Stringable #read), optional TVal: TVal] is\n  ParseRule[TSrc #read, TVal] ref\n\n\n\n\nImplements\n\n\n\n\nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  expected: ReadSeq[TSrc #read] box,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | None val) = reference)\n: RuleLiteral[TSrc #read, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nexpected: \nReadSeq\n[TSrc #read] box\n\n\naction: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nRuleLiteral\n[TSrc #read, TVal] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nname\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nset_name\n\n\nfun ref set_name(\n  str: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndescription\n\n\nfun box description(\n  call_stack: (ListNode[ParseRule[TSrc #read, TVal] box] ref | None val) = reference)\n: String val\n\n\n\n\nParameters\n\n\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc #read, TVal] box] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nfun box parse(\n  memo: ParseState[TSrc #read, TVal] ref,\n  start: ParseLoc[TSrc #read] box)\n: (ParseResult[TSrc #read, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nmemo: \nParseState\n[TSrc #read, TVal] ref\n\n\nstart: \nParseLoc\n[TSrc #read] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc #read, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\ncan_be_recursive\n\n\nfun box can_be_recursive()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  other: ParseRule[TSrc #read, TVal] ref)\n: ParseRule[TSrc #read, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  other: ParseRule[TSrc #read, TVal] ref)\n: ParseRule[TSrc #read, TVal] ref\n\n\n\n\nParameters\n\n\n\n\nother: \nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nParseRule\n[TSrc #read, TVal] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_child_description\n\n\nfun box _child_description(\n  child: ParseRule[TSrc #read, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc #read, TVal] box] ref | None val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nchild: \nParseRule\n[TSrc #read, TVal] box\n\n\ncall_stack: (\nListNode\n[\nParseRule\n[TSrc #read, TVal] box] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class RuleLiteral"
        },
        {
            "location": "/kiuatan-RuleLiteral/#ruleliteral91tsrc-equatable91tsrc-read93-read-stringable-read-optional-tval-tval93",
            "text": "Matches a literal sequence of inputs.  class ref RuleLiteral[TSrc: (Equatable[TSrc #read] #read & Stringable #read), optional TVal: TVal] is\n  ParseRule[TSrc #read, TVal] ref  Implements   ParseRule [TSrc #read, TVal] ref",
            "title": "RuleLiteral[TSrc: (Equatable[TSrc #read] #read & Stringable #read), optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-RuleLiteral/#constructors",
            "text": "create  new ref create(\n  expected: ReadSeq[TSrc #read] box,\n  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val | None val) = reference)\n: RuleLiteral[TSrc #read, TVal] ref^  Parameters   expected:  ReadSeq [TSrc #read] box  action: ({(ParseActionContext[TSrc, TVal]): TVal}[TSrc #read, TVal] val |  None  val) = reference   Returns   RuleLiteral [TSrc #read, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-RuleLiteral/#public-functions",
            "text": "name  fun box name()\n: String val  Returns   String  val    set_name  fun ref set_name(\n  str: String val)\n: None val  Parameters   str:  String  val   Returns   None  val    description  fun box description(\n  call_stack: (ListNode[ParseRule[TSrc #read, TVal] box] ref | None val) = reference)\n: String val  Parameters   call_stack: ( ListNode [ ParseRule [TSrc #read, TVal] box] ref |  None  val) = reference   Returns   String  val    parse  fun box parse(\n  memo: ParseState[TSrc #read, TVal] ref,\n  start: ParseLoc[TSrc #read] box)\n: (ParseResult[TSrc #read, TVal] ref | None val) ?  Parameters   memo:  ParseState [TSrc #read, TVal] ref  start:  ParseLoc [TSrc #read] box   Returns   ( ParseResult [TSrc #read, TVal] ref |  None  val) ?    can_be_recursive  fun box can_be_recursive()\n: Bool val  Returns   Bool  val    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  other: ParseRule[TSrc #read, TVal] ref)\n: ParseRule[TSrc #read, TVal] ref  Parameters   other:  ParseRule [TSrc #read, TVal] ref   Returns   ParseRule [TSrc #read, TVal] ref    op_or  fun box op_or(\n  other: ParseRule[TSrc #read, TVal] ref)\n: ParseRule[TSrc #read, TVal] ref  Parameters   other:  ParseRule [TSrc #read, TVal] ref   Returns   ParseRule [TSrc #read, TVal] ref",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-RuleLiteral/#private-functions",
            "text": "_child_description  fun box _child_description(\n  child: ParseRule[TSrc #read, TVal] box,\n  call_stack: (ListNode[ParseRule[TSrc #read, TVal] box] ref | None val))\n: String val  Parameters   child:  ParseRule [TSrc #read, TVal] box  call_stack: ( ListNode [ ParseRule [TSrc #read, TVal] box] ref |  None  val)   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-ParseState/",
            "text": "ParseState[TSrc: TSrc, optional TVal: TVal]\n\n\nStores the state of a particular match.\n\n\nclass ref ParseState[TSrc: TSrc, optional TVal: TVal]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  source': List[ReadSeq[TSrc] box] box,\n  start': (ParseLoc[TSrc] ref | None val) = reference)\n: ParseState[TSrc, TVal] ref^ ?\n\n\n\n\nParameters\n\n\n\n\nsource': \nList\n[\nReadSeq\n[TSrc] box] box\n\n\nstart': (\nParseLoc\n[TSrc] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nParseState\n[TSrc, TVal] ref^ ?\n\n\n\n\n\n\nfrom_seq\n\n\nnew ref from_seq(\n  seq: ReadSeq[TSrc] box,\n  start': (ParseLoc[TSrc] ref | None val) = reference)\n: ParseState[TSrc, TVal] ref^ ?\n\n\n\n\nParameters\n\n\n\n\nseq: \nReadSeq\n[TSrc] box\n\n\nstart': (\nParseLoc\n[TSrc] ref | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nParseState\n[TSrc, TVal] ref^ ?\n\n\n\n\n\n\nPublic Functions\n\n\nsource\n\n\nfun box source()\n: List[ReadSeq[TSrc] box] box\n\n\n\n\nReturns\n\n\n\n\nList\n[\nReadSeq\n[TSrc] box] box\n\n\n\n\n\n\nstart\n\n\nfun box start()\n: ParseLoc[TSrc] box\n\n\n\n\nReturns\n\n\n\n\nParseLoc\n[TSrc] box\n\n\n\n\n\n\nparse\n\n\nfun ref parse(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?\n\n\n\n\nParameters\n\n\n\n\nrule: \nParseRule\n[TSrc, TVal] box\n\n\nloc: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\nParseResult\n[TSrc, TVal] ref | \nNone\n val) ?\n\n\n\n\n\n\nPrivate Functions\n\n\n_get_indent\n\n\nfun box _get_indent(\n  n: USize val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_get_result\n\n\nfun box _get_result(\n  exp: _Expansion[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: (this->ParseResult[TSrc, TVal] ref | None val)\n\n\n\n\nParameters\n\n\n\n\nexp: \n_Expansion\n[TSrc, TVal] box\n\n\nloc: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(this->\nParseResult\n[TSrc, TVal] ref | \nNone\n val)\n\n\n\n\n\n\n_memoize\n\n\nfun ref _memoize(\n  exp: _Expansion[TSrc, TVal] ref,\n  loc: ParseLoc[TSrc] box,\n  res: (ParseResult[TSrc, TVal] ref | None val))\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nexp: \n_Expansion\n[TSrc, TVal] ref\n\n\nloc: \nParseLoc\n[TSrc] box\n\n\nres: (\nParseResult\n[TSrc, TVal] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_forget\n\n\nfun ref _forget(\n  exp: _Expansion[TSrc, TVal] ref,\n  loc: ParseLoc[TSrc] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nexp: \n_Expansion\n[TSrc, TVal] ref\n\n\nloc: \nParseLoc\n[TSrc] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_get_lr_record\n\n\nfun ref _get_lr_record(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: (_LRRecord[TSrc, TVal] ref | None val)\n\n\n\n\nParameters\n\n\n\n\nrule: \nParseRule\n[TSrc, TVal] box\n\n\nloc: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n(\n_LRRecord\n[TSrc, TVal] ref | \nNone\n val)\n\n\n\n\n\n\n_start_lr_record\n\n\nfun ref _start_lr_record(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box,\n  rec: _LRRecord[TSrc, TVal] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nrule: \nParseRule\n[TSrc, TVal] box\n\n\nloc: \nParseLoc\n[TSrc] box\n\n\nrec: \n_LRRecord\n[TSrc, TVal] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_forget_lr_record\n\n\nfun ref _forget_lr_record(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nrule: \nParseRule\n[TSrc, TVal] box\n\n\nloc: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "class ParseState"
        },
        {
            "location": "/kiuatan-ParseState/#parsestate91tsrc-tsrc-optional-tval-tval93",
            "text": "Stores the state of a particular match.  class ref ParseState[TSrc: TSrc, optional TVal: TVal]",
            "title": "ParseState[TSrc: TSrc, optional TVal: TVal]"
        },
        {
            "location": "/kiuatan-ParseState/#constructors",
            "text": "create  new ref create(\n  source': List[ReadSeq[TSrc] box] box,\n  start': (ParseLoc[TSrc] ref | None val) = reference)\n: ParseState[TSrc, TVal] ref^ ?  Parameters   source':  List [ ReadSeq [TSrc] box] box  start': ( ParseLoc [TSrc] ref |  None  val) = reference   Returns   ParseState [TSrc, TVal] ref^ ?    from_seq  new ref from_seq(\n  seq: ReadSeq[TSrc] box,\n  start': (ParseLoc[TSrc] ref | None val) = reference)\n: ParseState[TSrc, TVal] ref^ ?  Parameters   seq:  ReadSeq [TSrc] box  start': ( ParseLoc [TSrc] ref |  None  val) = reference   Returns   ParseState [TSrc, TVal] ref^ ?",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-ParseState/#public-functions",
            "text": "source  fun box source()\n: List[ReadSeq[TSrc] box] box  Returns   List [ ReadSeq [TSrc] box] box    start  fun box start()\n: ParseLoc[TSrc] box  Returns   ParseLoc [TSrc] box    parse  fun ref parse(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: (ParseResult[TSrc, TVal] ref | None val) ?  Parameters   rule:  ParseRule [TSrc, TVal] box  loc:  ParseLoc [TSrc] box   Returns   ( ParseResult [TSrc, TVal] ref |  None  val) ?",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-ParseState/#private-functions",
            "text": "_get_indent  fun box _get_indent(\n  n: USize val)\n: String val  Parameters   n:  USize  val   Returns   String  val    _get_result  fun box _get_result(\n  exp: _Expansion[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: (this->ParseResult[TSrc, TVal] ref | None val)  Parameters   exp:  _Expansion [TSrc, TVal] box  loc:  ParseLoc [TSrc] box   Returns   (this-> ParseResult [TSrc, TVal] ref |  None  val)    _memoize  fun ref _memoize(\n  exp: _Expansion[TSrc, TVal] ref,\n  loc: ParseLoc[TSrc] box,\n  res: (ParseResult[TSrc, TVal] ref | None val))\n: None val ?  Parameters   exp:  _Expansion [TSrc, TVal] ref  loc:  ParseLoc [TSrc] box  res: ( ParseResult [TSrc, TVal] ref |  None  val)   Returns   None  val ?    _forget  fun ref _forget(\n  exp: _Expansion[TSrc, TVal] ref,\n  loc: ParseLoc[TSrc] ref)\n: None val  Parameters   exp:  _Expansion [TSrc, TVal] ref  loc:  ParseLoc [TSrc] ref   Returns   None  val    _get_lr_record  fun ref _get_lr_record(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: (_LRRecord[TSrc, TVal] ref | None val)  Parameters   rule:  ParseRule [TSrc, TVal] box  loc:  ParseLoc [TSrc] box   Returns   ( _LRRecord [TSrc, TVal] ref |  None  val)    _start_lr_record  fun ref _start_lr_record(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box,\n  rec: _LRRecord[TSrc, TVal] ref)\n: None val  Parameters   rule:  ParseRule [TSrc, TVal] box  loc:  ParseLoc [TSrc] box  rec:  _LRRecord [TSrc, TVal] ref   Returns   None  val    _forget_lr_record  fun ref _forget_lr_record(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: None val  Parameters   rule:  ParseRule [TSrc, TVal] box  loc:  ParseLoc [TSrc] box   Returns   None  val",
            "title": "Private Functions"
        },
        {
            "location": "/kiuatan-_RuleToExpMemo/",
            "text": "_RuleToExpMemo[TSrc: TSrc, TVal: TVal]\n\n\ntype _RuleToExpMemo[TSrc: TSrc, TVal: TVal] is\n  HashMap[ParseRule[TSrc, TVal] box, HashMap[USize val, HashMap[ParseLoc[TSrc] box, (ParseResult[TSrc, TVal] ref | None val), HashEq[ParseLoc[TSrc] box] val] ref, HashEq[USize val] val] ref, HashIs[ParseRule[TSrc, TVal] box] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[\nParseRule\n[TSrc, TVal] box, \nHashMap\n[\nUSize\n val, \nHashMap\n[\nParseLoc\n[TSrc] box, (\nParseResult\n[TSrc, TVal] ref | \nNone\n val), \nHashEq\n[\nParseLoc\n[TSrc] box] val] ref, \nHashEq\n[\nUSize\n val] val] ref, \nHashIs\n[\nParseRule\n[TSrc, TVal] box] val] ref",
            "title": "type _RuleToExpMemo"
        },
        {
            "location": "/kiuatan-_RuleToExpMemo/#_ruletoexpmemo91tsrc-tsrc-tval-tval93",
            "text": "type _RuleToExpMemo[TSrc: TSrc, TVal: TVal] is\n  HashMap[ParseRule[TSrc, TVal] box, HashMap[USize val, HashMap[ParseLoc[TSrc] box, (ParseResult[TSrc, TVal] ref | None val), HashEq[ParseLoc[TSrc] box] val] ref, HashEq[USize val] val] ref, HashIs[ParseRule[TSrc, TVal] box] val] ref  Type Alias For   HashMap [ ParseRule [TSrc, TVal] box,  HashMap [ USize  val,  HashMap [ ParseLoc [TSrc] box, ( ParseResult [TSrc, TVal] ref |  None  val),  HashEq [ ParseLoc [TSrc] box] val] ref,  HashEq [ USize  val] val] ref,  HashIs [ ParseRule [TSrc, TVal] box] val] ref",
            "title": "_RuleToExpMemo[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-_ExpToLocMemo/",
            "text": "_ExpToLocMemo[TSrc: TSrc, TVal: TVal]\n\n\ntype _ExpToLocMemo[TSrc: TSrc, TVal: TVal] is\n  HashMap[USize val, HashMap[ParseLoc[TSrc] box, (ParseResult[TSrc, TVal] ref | None val), HashEq[ParseLoc[TSrc] box] val] ref, HashEq[USize val] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[\nUSize\n val, \nHashMap\n[\nParseLoc\n[TSrc] box, (\nParseResult\n[TSrc, TVal] ref | \nNone\n val), \nHashEq\n[\nParseLoc\n[TSrc] box] val] ref, \nHashEq\n[\nUSize\n val] val] ref",
            "title": "type _ExpToLocMemo"
        },
        {
            "location": "/kiuatan-_ExpToLocMemo/#_exptolocmemo91tsrc-tsrc-tval-tval93",
            "text": "type _ExpToLocMemo[TSrc: TSrc, TVal: TVal] is\n  HashMap[USize val, HashMap[ParseLoc[TSrc] box, (ParseResult[TSrc, TVal] ref | None val), HashEq[ParseLoc[TSrc] box] val] ref, HashEq[USize val] val] ref  Type Alias For   HashMap [ USize  val,  HashMap [ ParseLoc [TSrc] box, ( ParseResult [TSrc, TVal] ref |  None  val),  HashEq [ ParseLoc [TSrc] box] val] ref,  HashEq [ USize  val] val] ref",
            "title": "_ExpToLocMemo[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-_LocToResultMemo/",
            "text": "_LocToResultMemo[TSrc: TSrc, TVal: TVal]\n\n\ntype _LocToResultMemo[TSrc: TSrc, TVal: TVal] is\n  HashMap[ParseLoc[TSrc] box, (ParseResult[TSrc, TVal] ref | None val), HashEq[ParseLoc[TSrc] box] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[\nParseLoc\n[TSrc] box, (\nParseResult\n[TSrc, TVal] ref | \nNone\n val), \nHashEq\n[\nParseLoc\n[TSrc] box] val] ref",
            "title": "type _LocToResultMemo"
        },
        {
            "location": "/kiuatan-_LocToResultMemo/#_loctoresultmemo91tsrc-tsrc-tval-tval93",
            "text": "type _LocToResultMemo[TSrc: TSrc, TVal: TVal] is\n  HashMap[ParseLoc[TSrc] box, (ParseResult[TSrc, TVal] ref | None val), HashEq[ParseLoc[TSrc] box] val] ref  Type Alias For   HashMap [ ParseLoc [TSrc] box, ( ParseResult [TSrc, TVal] ref |  None  val),  HashEq [ ParseLoc [TSrc] box] val] ref",
            "title": "_LocToResultMemo[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-_RuleToLocLR/",
            "text": "_RuleToLocLR[TSrc: TSrc, TVal: TVal]\n\n\ntype _RuleToLocLR[TSrc: TSrc, TVal: TVal] is\n  HashMap[ParseRule[TSrc, TVal] box, HashMap[ParseLoc[TSrc] box, _LRRecord[TSrc, TVal] ref, HashEq[ParseLoc[TSrc] box] val] ref, HashIs[ParseRule[TSrc, TVal] box] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[\nParseRule\n[TSrc, TVal] box, \nHashMap\n[\nParseLoc\n[TSrc] box, \n_LRRecord\n[TSrc, TVal] ref, \nHashEq\n[\nParseLoc\n[TSrc] box] val] ref, \nHashIs\n[\nParseRule\n[TSrc, TVal] box] val] ref",
            "title": "type _RuleToLocLR"
        },
        {
            "location": "/kiuatan-_RuleToLocLR/#_ruletoloclr91tsrc-tsrc-tval-tval93",
            "text": "type _RuleToLocLR[TSrc: TSrc, TVal: TVal] is\n  HashMap[ParseRule[TSrc, TVal] box, HashMap[ParseLoc[TSrc] box, _LRRecord[TSrc, TVal] ref, HashEq[ParseLoc[TSrc] box] val] ref, HashIs[ParseRule[TSrc, TVal] box] val] ref  Type Alias For   HashMap [ ParseRule [TSrc, TVal] box,  HashMap [ ParseLoc [TSrc] box,  _LRRecord [TSrc, TVal] ref,  HashEq [ ParseLoc [TSrc] box] val] ref,  HashIs [ ParseRule [TSrc, TVal] box] val] ref",
            "title": "_RuleToLocLR[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-_LocToLR/",
            "text": "_LocToLR[TSrc: TSrc, TVal: TVal]\n\n\ntype _LocToLR[TSrc: TSrc, TVal: TVal] is\n  HashMap[ParseLoc[TSrc] box, _LRRecord[TSrc, TVal] ref, HashEq[ParseLoc[TSrc] box] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[\nParseLoc\n[TSrc] box, \n_LRRecord\n[TSrc, TVal] ref, \nHashEq\n[\nParseLoc\n[TSrc] box] val] ref",
            "title": "type _LocToLR"
        },
        {
            "location": "/kiuatan-_LocToLR/#_loctolr91tsrc-tsrc-tval-tval93",
            "text": "type _LocToLR[TSrc: TSrc, TVal: TVal] is\n  HashMap[ParseLoc[TSrc] box, _LRRecord[TSrc, TVal] ref, HashEq[ParseLoc[TSrc] box] val] ref  Type Alias For   HashMap [ ParseLoc [TSrc] box,  _LRRecord [TSrc, TVal] ref,  HashEq [ ParseLoc [TSrc] box] val] ref",
            "title": "_LocToLR[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-_Expansion/",
            "text": "_Expansion[TSrc: TSrc, TVal: TVal]\n\n\nclass ref _Expansion[TSrc: TSrc, TVal: TVal]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  rule': ParseRule[TSrc, TVal] box,\n  num': USize val)\n: _Expansion[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nrule': \nParseRule\n[TSrc, TVal] box\n\n\nnum': \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n_Expansion\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet rule: \nParseRule\n[TSrc, TVal] box\n\n\n\n\n\n\n\n\nlet num: \nUSize\n val",
            "title": "class _Expansion"
        },
        {
            "location": "/kiuatan-_Expansion/#_expansion91tsrc-tsrc-tval-tval93",
            "text": "class ref _Expansion[TSrc: TSrc, TVal: TVal]",
            "title": "_Expansion[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-_Expansion/#constructors",
            "text": "create  new ref create(\n  rule': ParseRule[TSrc, TVal] box,\n  num': USize val)\n: _Expansion[TSrc, TVal] ref^  Parameters   rule':  ParseRule [TSrc, TVal] box  num':  USize  val   Returns   _Expansion [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-_Expansion/#public-fields",
            "text": "let rule:  ParseRule [TSrc, TVal] box     let num:  USize  val",
            "title": "Public fields"
        },
        {
            "location": "/kiuatan-_LRRecord/",
            "text": "_LRRecord[TSrc: TSrc, TVal: TVal]\n\n\nclass ref _LRRecord[TSrc: TSrc, TVal: TVal]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: _LRRecord[TSrc, TVal] ref^\n\n\n\n\nParameters\n\n\n\n\nrule: \nParseRule\n[TSrc, TVal] box\n\n\nloc: \nParseLoc\n[TSrc] box\n\n\n\n\nReturns\n\n\n\n\n_LRRecord\n[TSrc, TVal] ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar lr_detected: \nBool\n val\n\n\n\n\n\n\n\n\nvar num_expansions: \nUSize\n val\n\n\n\n\n\n\n\n\nvar cur_expansion: \n_Expansion\n[TSrc, TVal] ref\n\n\n\n\n\n\n\n\nvar cur_next_loc: \nParseLoc\n[TSrc] box\n\n\n\n\n\n\n\n\nvar cur_result: (\nParseResult\n[TSrc, TVal] ref | \nNone\n val)\n\n\n\n\n\n\n\n\nvar involved_rules: \nHashSet\n[\nParseRule\n[TSrc, TVal] tag, \nHashIs\n[\nParseRule\n[TSrc, TVal] tag] val] ref",
            "title": "class _LRRecord"
        },
        {
            "location": "/kiuatan-_LRRecord/#_lrrecord91tsrc-tsrc-tval-tval93",
            "text": "class ref _LRRecord[TSrc: TSrc, TVal: TVal]",
            "title": "_LRRecord[TSrc: TSrc, TVal: TVal]"
        },
        {
            "location": "/kiuatan-_LRRecord/#constructors",
            "text": "create  new ref create(\n  rule: ParseRule[TSrc, TVal] box,\n  loc: ParseLoc[TSrc] box)\n: _LRRecord[TSrc, TVal] ref^  Parameters   rule:  ParseRule [TSrc, TVal] box  loc:  ParseLoc [TSrc] box   Returns   _LRRecord [TSrc, TVal] ref^",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-_LRRecord/#public-fields",
            "text": "var lr_detected:  Bool  val     var num_expansions:  USize  val     var cur_expansion:  _Expansion [TSrc, TVal] ref     var cur_next_loc:  ParseLoc [TSrc] box     var cur_result: ( ParseResult [TSrc, TVal] ref |  None  val)     var involved_rules:  HashSet [ ParseRule [TSrc, TVal] tag,  HashIs [ ParseRule [TSrc, TVal] tag] val] ref",
            "title": "Public fields"
        },
        {
            "location": "/builtin--index/",
            "text": "Builtin package\n\n\nThe builtin package is home to the following standard library members:\n\n\n\n\nTypes the compiler needs to know exist, such as None.\n\n\nTypes with \"magic\" internal workings that must be supplied directly by the\ncompiler, such as U32.\n\n\nAny types needed by others in builtin.\n\n\n\n\nThe public types that are defined in this package will always be in scope for\nevery Pony source file. For details on specific packages, see their individual\nentity entries.\n\n\nPublic Types\n\n\n\n\nprimitive Platform\n\n\nprimitive F32\n\n\nprimitive F64\n\n\ntype Float\n\n\ninterface Iterator\n\n\ninterface ReadSeq\n\n\ninterface ReadElement\n\n\ntype AsioEventID\n\n\ninterface AsioEventNotify\n\n\nprimitive AsioEvent\n\n\ninterface Seq\n\n\nprimitive Less\n\n\nprimitive Equal\n\n\nprimitive Greater\n\n\ntype Compare\n\n\ninterface HasEq\n\n\ninterface Equatable\n\n\ninterface Comparable\n\n\nstruct MaybePointer\n\n\nprimitive I8\n\n\nprimitive I16\n\n\nprimitive I32\n\n\nprimitive I64\n\n\nprimitive ILong\n\n\nprimitive ISize\n\n\nprimitive I128\n\n\ntype Signed\n\n\ntrait Real\n\n\ntrait Integer\n\n\ntrait FloatingPoint\n\n\ntype Number\n\n\ntype Int\n\n\nclass Array\n\n\nclass ArrayKeys\n\n\nclass ArrayValues\n\n\nclass ArrayPairs\n\n\nclass Env\n\n\nprimitive AmbientAuth\n\n\ntype ByteSeq\n\n\ninterface ByteSeqIter\n\n\ninterface OutStream\n\n\nactor StdStream\n\n\ninterface StdinNotify\n\n\ninterface DisposableActor\n\n\nactor Stdin\n\n\ninterface Any\n\n\nprimitive Bool\n\n\nprimitive U8\n\n\nprimitive U16\n\n\nprimitive U32\n\n\nprimitive U64\n\n\nprimitive ULong\n\n\nprimitive USize\n\n\nprimitive U128\n\n\ntype Unsigned\n\n\nprimitive DoNotOptimise\n\n\ninterface SourceLoc\n\n\ninterface Stringable\n\n\nstruct Pointer\n\n\nclass String\n\n\nclass StringBytes\n\n\nclass StringRunes\n\n\nprimitive None\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _ToString\n\n\ntrait _ArithmeticConvertible\n\n\ntrait _SignedInteger\n\n\ntrait _UnsignedInteger\n\n\nprimitive _UTF32Encoder",
            "title": "Package"
        },
        {
            "location": "/builtin--index/#builtin-package",
            "text": "The builtin package is home to the following standard library members:   Types the compiler needs to know exist, such as None.  Types with \"magic\" internal workings that must be supplied directly by the\ncompiler, such as U32.  Any types needed by others in builtin.   The public types that are defined in this package will always be in scope for\nevery Pony source file. For details on specific packages, see their individual\nentity entries.",
            "title": "Builtin package"
        },
        {
            "location": "/builtin--index/#public-types",
            "text": "primitive Platform  primitive F32  primitive F64  type Float  interface Iterator  interface ReadSeq  interface ReadElement  type AsioEventID  interface AsioEventNotify  primitive AsioEvent  interface Seq  primitive Less  primitive Equal  primitive Greater  type Compare  interface HasEq  interface Equatable  interface Comparable  struct MaybePointer  primitive I8  primitive I16  primitive I32  primitive I64  primitive ILong  primitive ISize  primitive I128  type Signed  trait Real  trait Integer  trait FloatingPoint  type Number  type Int  class Array  class ArrayKeys  class ArrayValues  class ArrayPairs  class Env  primitive AmbientAuth  type ByteSeq  interface ByteSeqIter  interface OutStream  actor StdStream  interface StdinNotify  interface DisposableActor  actor Stdin  interface Any  primitive Bool  primitive U8  primitive U16  primitive U32  primitive U64  primitive ULong  primitive USize  primitive U128  type Unsigned  primitive DoNotOptimise  interface SourceLoc  interface Stringable  struct Pointer  class String  class StringBytes  class StringRunes  primitive None",
            "title": "Public Types"
        },
        {
            "location": "/builtin--index/#private-types",
            "text": "primitive _ToString  trait _ArithmeticConvertible  trait _SignedInteger  trait _UnsignedInteger  primitive _UTF32Encoder",
            "title": "Private Types"
        },
        {
            "location": "/builtin-Platform/",
            "text": "Platform\n\n\nprimitive val Platform\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Platform val^\n\n\n\n\nReturns\n\n\n\n\nPlatform\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nfreebsd\n\n\nfun box freebsd()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlinux\n\n\nfun box linux()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nosx\n\n\nfun box osx()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nposix\n\n\nfun box posix()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwindows\n\n\nfun box windows()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nx86\n\n\nfun box x86()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\narm\n\n\nfun box arm()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlp64\n\n\nfun box lp64()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nllp64\n\n\nfun box llp64()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nilp32\n\n\nfun box ilp32()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnative128\n\n\nfun box native128()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndebug\n\n\nfun box debug()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Platform val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPlatform\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Platform val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPlatform\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive Platform"
        },
        {
            "location": "/builtin-Platform/#platform",
            "text": "primitive val Platform",
            "title": "Platform"
        },
        {
            "location": "/builtin-Platform/#constructors",
            "text": "create  new val create()\n: Platform val^  Returns   Platform  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Platform/#public-functions",
            "text": "freebsd  fun box freebsd()\n: Bool val  Returns   Bool  val    linux  fun box linux()\n: Bool val  Returns   Bool  val    osx  fun box osx()\n: Bool val  Returns   Bool  val    posix  fun box posix()\n: Bool val  Returns   Bool  val    windows  fun box windows()\n: Bool val  Returns   Bool  val    x86  fun box x86()\n: Bool val  Returns   Bool  val    arm  fun box arm()\n: Bool val  Returns   Bool  val    lp64  fun box lp64()\n: Bool val  Returns   Bool  val    llp64  fun box llp64()\n: Bool val  Returns   Bool  val    ilp32  fun box ilp32()\n: Bool val  Returns   Bool  val    native128  fun box native128()\n: Bool val  Returns   Bool  val    debug  fun box debug()\n: Bool val  Returns   Bool  val    eq  fun box eq(\n  that: Platform val)\n: Bool val  Parameters   that:  Platform  val   Returns   Bool  val    ne  fun box ne(\n  that: Platform val)\n: Bool val  Parameters   that:  Platform  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-F32/",
            "text": "F32\n\n\nprimitive val F32 is\n  FloatingPoint[F32 val] val\n\n\n\n\nImplements\n\n\n\n\nFloatingPoint\n[\nF32\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: F32 val = 0)\n: F32 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nF32\n val = 0\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\npi\n\n\nnew val pi()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\ne\n\n\nnew val e()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\n_nan\n\n\nnew val _nan()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\n_inf\n\n\nnew val _inf(\n  negative: Bool val)\n: F32 val^\n\n\n\n\nParameters\n\n\n\n\nnegative: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nfrom_bits\n\n\nnew val from_bits(\n  i: U32 val)\n: F32 val^\n\n\n\n\nParameters\n\n\n\n\ni: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]\n\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: F32 val^\n\n\n\n\nParameters\n\n\n\n\na: B val\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmin_value\n\n\nMinimum negative value representable.\n\n\nnew val min_value()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmax_value\n\n\nMaximum positive value representable.\n\n\nnew val max_value()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmin_normalised\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nnew val min_normalised()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nepsilon\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nnew val epsilon()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nbits\n\n\nfun box bits()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nradix\n\n\nExponent radix.\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\n\nMantissa precision in bits.\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\n\nMantissa precision in decimal digits.\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nceil\n\n\nfun box ceil()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfloor\n\n\nfun box floor()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nround\n\n\nfun box round()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntrunc\n\n\nfun box trunc()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfinite\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\n\nCheck whether this number is +/-infinity\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\n\nCheck whether this number is NaN.\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\n\nfun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\nx: \nF32\n val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfrexp\n\n\nfun box frexp()\n: (F32 val , U32 val)\n\n\n\n\nReturns\n\n\n\n\n(\nF32\n val , \nU32\n val)\n\n\n\n\n\n\nlog\n\n\nfun box log()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlog2\n\n\nfun box log2()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlog10\n\n\nfun box log10()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlogb\n\n\nfun box logb()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\npow\n\n\nfun box pow(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\npowi\n\n\nfun box powi(\n  y: I32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsqrt\n\n\nfun box sqrt()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsqrt_unsafe\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncbrt\n\n\nfun box cbrt()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nexp\n\n\nfun box exp()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nexp2\n\n\nfun box exp2()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncos\n\n\nfun box cos()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsin\n\n\nfun box sin()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntan\n\n\nfun box tan()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncosh\n\n\nfun box cosh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsinh\n\n\nfun box sinh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntanh\n\n\nfun box tanh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nacos\n\n\nfun box acos()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nasin\n\n\nfun box asin()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\natan\n\n\nfun box atan()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\natan2\n\n\nfun box atan2(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nacosh\n\n\nfun box acosh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nasinh\n\n\nfun box asinh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\natanh\n\n\nfun box atanh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncopysign\n\n\nfun box copysign(\n  sign: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\nsign: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF32\n val , \nF32\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\neq_unsafe\n\n\nfun box eq_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\n\nfun box ne_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\n\nfun box lt_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\n\nfun box le_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\n\nfun box ge_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\n\nfun box gt_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: F32 val)\n: (F32 val , F32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF32\n val , \nF32\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val",
            "title": "primitive F32"
        },
        {
            "location": "/builtin-F32/#f32",
            "text": "primitive val F32 is\n  FloatingPoint[F32 val] val  Implements   FloatingPoint [ F32  val] val",
            "title": "F32"
        },
        {
            "location": "/builtin-F32/#constructors",
            "text": "create  new val create(\n  value: F32 val = 0)\n: F32 val^  Parameters   value:  F32  val = 0   Returns   F32  val^    pi  new val pi()\n: F32 val^  Returns   F32  val^    e  new val e()\n: F32 val^  Returns   F32  val^    _nan  new val _nan()\n: F32 val^  Returns   F32  val^    _inf  new val _inf(\n  negative: Bool val)\n: F32 val^  Parameters   negative:  Bool  val   Returns   F32  val^    from_bits  new val from_bits(\n  i: U32 val)\n: F32 val^  Parameters   i:  U32  val   Returns   F32  val^    from[B: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: F32 val^  Parameters   a: B val   Returns   F32  val^    min_value  Minimum negative value representable.  new val min_value()\n: F32 val^  Returns   F32  val^    max_value  Maximum positive value representable.  new val max_value()\n: F32 val^  Returns   F32  val^    min_normalised  Minimum positive value representable at full precision (ie a normalised\nnumber).  new val min_normalised()\n: F32 val^  Returns   F32  val^    epsilon  Minimum positive value such that (1 + epsilon) != 1.  new val epsilon()\n: F32 val^  Returns   F32  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-F32/#public-functions",
            "text": "bits  fun box bits()\n: U32 val  Returns   U32  val    radix  Exponent radix.  fun tag radix()\n: U8 val  Returns   U8  val    precision2  Mantissa precision in bits.  fun tag precision2()\n: U8 val  Returns   U8  val    precision10  Mantissa precision in decimal digits.  fun tag precision10()\n: U8 val  Returns   U8  val    min_exp2  Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp2()\n: I16 val  Returns   I16  val    min_exp10  Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp10()\n: I16 val  Returns   I16  val    max_exp2  Maximum exponent value such that (2^exponent) - 1 is representable.  fun tag max_exp2()\n: I16 val  Returns   I16  val    max_exp10  Maximum exponent value such that (10^exponent) - 1 is representable.  fun tag max_exp10()\n: I16 val  Returns   I16  val    abs  fun box abs()\n: F32 val  Returns   F32  val    ceil  fun box ceil()\n: F32 val  Returns   F32  val    floor  fun box floor()\n: F32 val  Returns   F32  val    round  fun box round()\n: F32 val  Returns   F32  val    trunc  fun box trunc()\n: F32 val  Returns   F32  val    min  fun box min(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    max  fun box max(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    finite  Check whether this number is finite, ie not +/-infinity and not NaN.  fun box finite()\n: Bool val  Returns   Bool  val    infinite  Check whether this number is +/-infinity  fun box infinite()\n: Bool val  Returns   Bool  val    nan  Check whether this number is NaN.  fun box nan()\n: Bool val  Returns   Bool  val    ldexp  fun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val  Parameters   x:  F32  val  exponent:  I32  val   Returns   F32  val    frexp  fun box frexp()\n: (F32 val , U32 val)  Returns   ( F32  val ,  U32  val)    log  fun box log()\n: F32 val  Returns   F32  val    log2  fun box log2()\n: F32 val  Returns   F32  val    log10  fun box log10()\n: F32 val  Returns   F32  val    logb  fun box logb()\n: F32 val  Returns   F32  val    pow  fun box pow(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    powi  fun box powi(\n  y: I32 val)\n: F32 val  Parameters   y:  I32  val   Returns   F32  val    sqrt  fun box sqrt()\n: F32 val  Returns   F32  val    sqrt_unsafe  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: F32 val  Returns   F32  val    cbrt  fun box cbrt()\n: F32 val  Returns   F32  val    exp  fun box exp()\n: F32 val  Returns   F32  val    exp2  fun box exp2()\n: F32 val  Returns   F32  val    cos  fun box cos()\n: F32 val  Returns   F32  val    sin  fun box sin()\n: F32 val  Returns   F32  val    tan  fun box tan()\n: F32 val  Returns   F32  val    cosh  fun box cosh()\n: F32 val  Returns   F32  val    sinh  fun box sinh()\n: F32 val  Returns   F32  val    tanh  fun box tanh()\n: F32 val  Returns   F32  val    acos  fun box acos()\n: F32 val  Returns   F32  val    asin  fun box asin()\n: F32 val  Returns   F32  val    atan  fun box atan()\n: F32 val  Returns   F32  val    atan2  fun box atan2(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    acosh  fun box acosh()\n: F32 val  Returns   F32  val    asinh  fun box asinh()\n: F32 val  Returns   F32  val    atanh  fun box atanh()\n: F32 val  Returns   F32  val    copysign  fun box copysign(\n  sign: F32 val)\n: F32 val  Parameters   sign:  F32  val   Returns   F32  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    u128  fun box u128()\n: U128 val  Returns   U128  val    i128_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val  Returns   I128  val    u128_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val  Returns   U128  val    add_unsafe  fun box add_unsafe(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    sub_unsafe  fun box sub_unsafe(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    mul_unsafe  fun box mul_unsafe(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    div_unsafe  fun box div_unsafe(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    divmod_unsafe  fun box divmod_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)  Parameters   y:  F32  val   Returns   ( F32  val ,  F32  val)    mod_unsafe  fun box mod_unsafe(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    neg_unsafe  fun box neg_unsafe()\n: F32 val  Returns   F32  val    eq_unsafe  fun box eq_unsafe(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    ne_unsafe  fun box ne_unsafe(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    lt_unsafe  fun box lt_unsafe(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    le_unsafe  fun box le_unsafe(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    ge_unsafe  fun box ge_unsafe(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    gt_unsafe  fun box gt_unsafe(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    sub  fun box sub(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    mul  fun box mul(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    div  fun box div(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    divmod  fun box divmod(\n  y: F32 val)\n: (F32 val , F32 val)  Parameters   y:  F32  val   Returns   ( F32  val ,  F32  val)    mod  fun box mod(\n  y: F32 val)\n: F32 val  Parameters   y:  F32  val   Returns   F32  val    neg  fun box neg()\n: F32 val  Returns   F32  val    eq  fun box eq(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    ne  fun box ne(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    lt  fun box lt(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    le  fun box le(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    ge  fun box ge(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    gt  fun box gt(\n  y: F32 val)\n: Bool val  Parameters   y:  F32  val   Returns   Bool  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  F32  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-F32/#private-functions",
            "text": "_value  fun box _value()\n: F32 val  Returns   F32  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-F64/",
            "text": "F64\n\n\nprimitive val F64 is\n  FloatingPoint[F64 val] val\n\n\n\n\nImplements\n\n\n\n\nFloatingPoint\n[\nF64\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: F64 val = 0)\n: F64 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nF64\n val = 0\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\npi\n\n\nnew val pi()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\ne\n\n\nnew val e()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\n_nan\n\n\nnew val _nan()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\n_inf\n\n\nnew val _inf(\n  negative: Bool val)\n: F64 val^\n\n\n\n\nParameters\n\n\n\n\nnegative: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nfrom_bits\n\n\nnew val from_bits(\n  i: U64 val)\n: F64 val^\n\n\n\n\nParameters\n\n\n\n\ni: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]\n\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: F64 val^\n\n\n\n\nParameters\n\n\n\n\na: B val\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmin_value\n\n\nMinimum negative value representable.\n\n\nnew val min_value()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmax_value\n\n\nMaximum positive value representable.\n\n\nnew val max_value()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmin_normalised\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nnew val min_normalised()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nepsilon\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nnew val epsilon()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nbits\n\n\nfun box bits()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nradix\n\n\nExponent radix.\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\n\nMantissa precision in bits.\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\n\nMantissa precision in decimal digits.\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nceil\n\n\nfun box ceil()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfloor\n\n\nfun box floor()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nround\n\n\nfun box round()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntrunc\n\n\nfun box trunc()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfinite\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\n\nCheck whether this number is +/-infinity\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\n\nCheck whether this number is NaN.\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\n\nfun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\nx: \nF64\n val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfrexp\n\n\nfun box frexp()\n: (F64 val , U32 val)\n\n\n\n\nReturns\n\n\n\n\n(\nF64\n val , \nU32\n val)\n\n\n\n\n\n\nlog\n\n\nfun box log()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlog2\n\n\nfun box log2()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlog10\n\n\nfun box log10()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlogb\n\n\nfun box logb()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\npow\n\n\nfun box pow(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\npowi\n\n\nfun box powi(\n  y: I32 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsqrt\n\n\nfun box sqrt()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsqrt_unsafe\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncbrt\n\n\nfun box cbrt()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nexp\n\n\nfun box exp()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nexp2\n\n\nfun box exp2()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncos\n\n\nfun box cos()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsin\n\n\nfun box sin()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntan\n\n\nfun box tan()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncosh\n\n\nfun box cosh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsinh\n\n\nfun box sinh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntanh\n\n\nfun box tanh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nacos\n\n\nfun box acos()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nasin\n\n\nfun box asin()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\natan\n\n\nfun box atan()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\natan2\n\n\nfun box atan2(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nacosh\n\n\nfun box acosh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nasinh\n\n\nfun box asinh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\natanh\n\n\nfun box atanh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncopysign\n\n\nfun box copysign(\n  sign: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\nsign: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF64\n val , \nF64\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\neq_unsafe\n\n\nfun box eq_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\n\nfun box ne_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\n\nfun box lt_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\n\nfun box le_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\n\nfun box ge_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\n\nfun box gt_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: F64 val)\n: (F64 val , F64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF64\n val , \nF64\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val",
            "title": "primitive F64"
        },
        {
            "location": "/builtin-F64/#f64",
            "text": "primitive val F64 is\n  FloatingPoint[F64 val] val  Implements   FloatingPoint [ F64  val] val",
            "title": "F64"
        },
        {
            "location": "/builtin-F64/#constructors",
            "text": "create  new val create(\n  value: F64 val = 0)\n: F64 val^  Parameters   value:  F64  val = 0   Returns   F64  val^    pi  new val pi()\n: F64 val^  Returns   F64  val^    e  new val e()\n: F64 val^  Returns   F64  val^    _nan  new val _nan()\n: F64 val^  Returns   F64  val^    _inf  new val _inf(\n  negative: Bool val)\n: F64 val^  Parameters   negative:  Bool  val   Returns   F64  val^    from_bits  new val from_bits(\n  i: U64 val)\n: F64 val^  Parameters   i:  U64  val   Returns   F64  val^    from[B: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: F64 val^  Parameters   a: B val   Returns   F64  val^    min_value  Minimum negative value representable.  new val min_value()\n: F64 val^  Returns   F64  val^    max_value  Maximum positive value representable.  new val max_value()\n: F64 val^  Returns   F64  val^    min_normalised  Minimum positive value representable at full precision (ie a normalised\nnumber).  new val min_normalised()\n: F64 val^  Returns   F64  val^    epsilon  Minimum positive value such that (1 + epsilon) != 1.  new val epsilon()\n: F64 val^  Returns   F64  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-F64/#public-functions",
            "text": "bits  fun box bits()\n: U64 val  Returns   U64  val    radix  Exponent radix.  fun tag radix()\n: U8 val  Returns   U8  val    precision2  Mantissa precision in bits.  fun tag precision2()\n: U8 val  Returns   U8  val    precision10  Mantissa precision in decimal digits.  fun tag precision10()\n: U8 val  Returns   U8  val    min_exp2  Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp2()\n: I16 val  Returns   I16  val    min_exp10  Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp10()\n: I16 val  Returns   I16  val    max_exp2  Maximum exponent value such that (2^exponent) - 1 is representable.  fun tag max_exp2()\n: I16 val  Returns   I16  val    max_exp10  Maximum exponent value such that (10^exponent) - 1 is representable.  fun tag max_exp10()\n: I16 val  Returns   I16  val    abs  fun box abs()\n: F64 val  Returns   F64  val    ceil  fun box ceil()\n: F64 val  Returns   F64  val    floor  fun box floor()\n: F64 val  Returns   F64  val    round  fun box round()\n: F64 val  Returns   F64  val    trunc  fun box trunc()\n: F64 val  Returns   F64  val    min  fun box min(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    max  fun box max(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    finite  Check whether this number is finite, ie not +/-infinity and not NaN.  fun box finite()\n: Bool val  Returns   Bool  val    infinite  Check whether this number is +/-infinity  fun box infinite()\n: Bool val  Returns   Bool  val    nan  Check whether this number is NaN.  fun box nan()\n: Bool val  Returns   Bool  val    ldexp  fun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val  Parameters   x:  F64  val  exponent:  I32  val   Returns   F64  val    frexp  fun box frexp()\n: (F64 val , U32 val)  Returns   ( F64  val ,  U32  val)    log  fun box log()\n: F64 val  Returns   F64  val    log2  fun box log2()\n: F64 val  Returns   F64  val    log10  fun box log10()\n: F64 val  Returns   F64  val    logb  fun box logb()\n: F64 val  Returns   F64  val    pow  fun box pow(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    powi  fun box powi(\n  y: I32 val)\n: F64 val  Parameters   y:  I32  val   Returns   F64  val    sqrt  fun box sqrt()\n: F64 val  Returns   F64  val    sqrt_unsafe  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: F64 val  Returns   F64  val    cbrt  fun box cbrt()\n: F64 val  Returns   F64  val    exp  fun box exp()\n: F64 val  Returns   F64  val    exp2  fun box exp2()\n: F64 val  Returns   F64  val    cos  fun box cos()\n: F64 val  Returns   F64  val    sin  fun box sin()\n: F64 val  Returns   F64  val    tan  fun box tan()\n: F64 val  Returns   F64  val    cosh  fun box cosh()\n: F64 val  Returns   F64  val    sinh  fun box sinh()\n: F64 val  Returns   F64  val    tanh  fun box tanh()\n: F64 val  Returns   F64  val    acos  fun box acos()\n: F64 val  Returns   F64  val    asin  fun box asin()\n: F64 val  Returns   F64  val    atan  fun box atan()\n: F64 val  Returns   F64  val    atan2  fun box atan2(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    acosh  fun box acosh()\n: F64 val  Returns   F64  val    asinh  fun box asinh()\n: F64 val  Returns   F64  val    atanh  fun box atanh()\n: F64 val  Returns   F64  val    copysign  fun box copysign(\n  sign: F64 val)\n: F64 val  Parameters   sign:  F64  val   Returns   F64  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    u128  fun box u128()\n: U128 val  Returns   U128  val    i128_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val  Returns   I128  val    u128_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val  Returns   U128  val    add_unsafe  fun box add_unsafe(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    sub_unsafe  fun box sub_unsafe(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    mul_unsafe  fun box mul_unsafe(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    div_unsafe  fun box div_unsafe(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    divmod_unsafe  fun box divmod_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)  Parameters   y:  F64  val   Returns   ( F64  val ,  F64  val)    mod_unsafe  fun box mod_unsafe(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    neg_unsafe  fun box neg_unsafe()\n: F64 val  Returns   F64  val    eq_unsafe  fun box eq_unsafe(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    ne_unsafe  fun box ne_unsafe(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    lt_unsafe  fun box lt_unsafe(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    le_unsafe  fun box le_unsafe(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    ge_unsafe  fun box ge_unsafe(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    gt_unsafe  fun box gt_unsafe(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    sub  fun box sub(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    mul  fun box mul(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    div  fun box div(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    divmod  fun box divmod(\n  y: F64 val)\n: (F64 val , F64 val)  Parameters   y:  F64  val   Returns   ( F64  val ,  F64  val)    mod  fun box mod(\n  y: F64 val)\n: F64 val  Parameters   y:  F64  val   Returns   F64  val    neg  fun box neg()\n: F64 val  Returns   F64  val    eq  fun box eq(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    ne  fun box ne(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    lt  fun box lt(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    le  fun box le(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    ge  fun box ge(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    gt  fun box gt(\n  y: F64 val)\n: Bool val  Parameters   y:  F64  val   Returns   Bool  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  F64  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-F64/#private-functions",
            "text": "_value  fun box _value()\n: F64 val  Returns   F64  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-Float/",
            "text": "Float\n\n\ntype Float is\n  (F32 val | F64 val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nF32\n val | \nF64\n val)",
            "title": "type Float"
        },
        {
            "location": "/builtin-Float/#float",
            "text": "type Float is\n  (F32 val | F64 val)  Type Alias For   ( F32  val |  F64  val)",
            "title": "Float"
        },
        {
            "location": "/builtin-Iterator/",
            "text": "Iterator[A: A]\n\n\ninterface ref Iterator[A: A]\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?",
            "title": "interface Iterator"
        },
        {
            "location": "/builtin-Iterator/#iterator91a-a93",
            "text": "interface ref Iterator[A: A]",
            "title": "Iterator[A: A]"
        },
        {
            "location": "/builtin-Iterator/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A ?  Returns   A ?",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ReadSeq/",
            "text": "ReadSeq[A: A]\n\n\nThe readable interface of a sequence.\n\n\ninterface box ReadSeq[A: A]\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nReturns the number of elements in the sequence.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns A^, not this->A.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nvalues\n\n\nReturns an iterator over the elements of the sequence. Note that this\niterates over A^, not this->A.\n\n\nfun box values()\n: Iterator[this->A] ref^\n\n\n\n\nReturns\n\n\n\n\nIterator\n[this->A] ref^",
            "title": "interface ReadSeq"
        },
        {
            "location": "/builtin-ReadSeq/#readseq91a-a93",
            "text": "The readable interface of a sequence.  interface box ReadSeq[A: A]",
            "title": "ReadSeq[A: A]"
        },
        {
            "location": "/builtin-ReadSeq/#public-functions",
            "text": "size  Returns the number of elements in the sequence.  fun box size()\n: USize val  Returns   USize  val    apply  Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns A^, not this->A.  fun box apply(\n  i: USize val)\n: this->A ?  Parameters   i:  USize  val   Returns   this->A ?    values  Returns an iterator over the elements of the sequence. Note that this\niterates over A^, not this->A.  fun box values()\n: Iterator[this->A] ref^  Returns   Iterator [this->A] ref^",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ReadElement/",
            "text": "ReadElement[A: A]\n\n\nUsed to show that a ReadSeq can return an element of a specific unmodified\ntype.\n\n\ninterface box ReadElement[A: A]\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  i: USize val)\n: A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA ?",
            "title": "interface ReadElement"
        },
        {
            "location": "/builtin-ReadElement/#readelement91a-a93",
            "text": "Used to show that a ReadSeq can return an element of a specific unmodified\ntype.  interface box ReadElement[A: A]",
            "title": "ReadElement[A: A]"
        },
        {
            "location": "/builtin-ReadElement/#public-functions",
            "text": "apply  fun box apply(\n  i: USize val)\n: A ?  Parameters   i:  USize  val   Returns   A ?",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-AsioEventID/",
            "text": "AsioEventID\n\n\ntype AsioEventID is\n  Pointer[AsioEvent val] tag\n\n\n\n\nType Alias For\n\n\n\n\nPointer\n[\nAsioEvent\n val] tag",
            "title": "type AsioEventID"
        },
        {
            "location": "/builtin-AsioEventID/#asioeventid",
            "text": "type AsioEventID is\n  Pointer[AsioEvent val] tag  Type Alias For   Pointer [ AsioEvent  val] tag",
            "title": "AsioEventID"
        },
        {
            "location": "/builtin-AsioEventNotify/",
            "text": "AsioEventNotify\n\n\ninterface tag AsioEventNotify\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val",
            "title": "interface AsioEventNotify"
        },
        {
            "location": "/builtin-AsioEventNotify/#asioeventnotify",
            "text": "interface tag AsioEventNotify",
            "title": "AsioEventNotify"
        },
        {
            "location": "/builtin-AsioEventNotify/#private-behaviours",
            "text": "_event_notify  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)  Parameters   event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val",
            "title": "Private Behaviours"
        },
        {
            "location": "/builtin-AsioEvent/",
            "text": "AsioEvent\n\n\nFunctions for asynchronous event notification.\n\n\nprimitive val AsioEvent\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: AsioEvent val^\n\n\n\n\nReturns\n\n\n\n\nAsioEvent\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnone\n\n\nAn empty event.\n\n\nfun box none()\n: Pointer[AsioEvent val] tag\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\nAsioEvent\n val] tag\n\n\n\n\n\n\nreadable\n\n\nReturns true if the flags contain the readable flag.\n\n\nfun box readable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwriteable\n\n\nReturns true if the flags contain the writeable flag.\n\n\nfun box writeable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndisposable\n\n\nReturns true if the event should be disposed of.\n\n\nfun box disposable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\n\nfun box dispose()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread\n\n\nfun box read()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nwrite\n\n\nfun box write()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ntimer\n\n\nfun box timer()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsignal\n\n\nfun box signal()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread_write\n\n\nfun box read_write()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\noneshot\n\n\nfun box oneshot()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread_write_oneshot\n\n\nfun box read_write_oneshot()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: AsioEvent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAsioEvent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: AsioEvent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAsioEvent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive AsioEvent"
        },
        {
            "location": "/builtin-AsioEvent/#asioevent",
            "text": "Functions for asynchronous event notification.  primitive val AsioEvent",
            "title": "AsioEvent"
        },
        {
            "location": "/builtin-AsioEvent/#constructors",
            "text": "create  new val create()\n: AsioEvent val^  Returns   AsioEvent  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AsioEvent/#public-functions",
            "text": "none  An empty event.  fun box none()\n: Pointer[AsioEvent val] tag  Returns   Pointer [ AsioEvent  val] tag    readable  Returns true if the flags contain the readable flag.  fun box readable(\n  flags: U32 val)\n: Bool val  Parameters   flags:  U32  val   Returns   Bool  val    writeable  Returns true if the flags contain the writeable flag.  fun box writeable(\n  flags: U32 val)\n: Bool val  Parameters   flags:  U32  val   Returns   Bool  val    disposable  Returns true if the event should be disposed of.  fun box disposable(\n  flags: U32 val)\n: Bool val  Parameters   flags:  U32  val   Returns   Bool  val    dispose  fun box dispose()\n: U32 val  Returns   U32  val    read  fun box read()\n: U32 val  Returns   U32  val    write  fun box write()\n: U32 val  Returns   U32  val    timer  fun box timer()\n: U32 val  Returns   U32  val    signal  fun box signal()\n: U32 val  Returns   U32  val    read_write  fun box read_write()\n: U32 val  Returns   U32  val    oneshot  fun box oneshot()\n: U32 val  Returns   U32  val    read_write_oneshot  fun box read_write_oneshot()\n: U32 val  Returns   U32  val    eq  fun box eq(\n  that: AsioEvent val)\n: Bool val  Parameters   that:  AsioEvent  val   Returns   Bool  val    ne  fun box ne(\n  that: AsioEvent val)\n: Bool val  Parameters   that:  AsioEvent  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-_ToString/",
            "text": "_ToString\n\n\nWorker type providing simple to string conversions for numbers.\n\n\nprimitive val _ToString\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ToString val^\n\n\n\n\nReturns\n\n\n\n\n_ToString\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ToString val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ToString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ToString val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ToString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_u64\n\n\nfun box _u64(\n  x: U64 val,\n  neg: Bool val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val\n\n\nneg: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\n_u128\n\n\nfun box _u128(\n  x: U128 val,\n  neg: Bool val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU128\n val\n\n\nneg: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\n_f64\n\n\nfun box _f64(\n  x: F64 val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^",
            "title": "primitive _ToString"
        },
        {
            "location": "/builtin-_ToString/#_tostring",
            "text": "Worker type providing simple to string conversions for numbers.  primitive val _ToString",
            "title": "_ToString"
        },
        {
            "location": "/builtin-_ToString/#constructors",
            "text": "create  new val create()\n: _ToString val^  Returns   _ToString  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-_ToString/#public-functions",
            "text": "eq  fun box eq(\n  that: _ToString val)\n: Bool val  Parameters   that:  _ToString  val   Returns   Bool  val    ne  fun box ne(\n  that: _ToString val)\n: Bool val  Parameters   that:  _ToString  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-_ToString/#private-functions",
            "text": "_u64  fun box _u64(\n  x: U64 val,\n  neg: Bool val)\n: String iso^  Parameters   x:  U64  val  neg:  Bool  val   Returns   String  iso^    _u128  fun box _u128(\n  x: U128 val,\n  neg: Bool val)\n: String iso^  Parameters   x:  U128  val  neg:  Bool  val   Returns   String  iso^    _f64  fun box _f64(\n  x: F64 val)\n: String iso^  Parameters   x:  F64  val   Returns   String  iso^",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-Seq/",
            "text": "Seq[A: A]\n\n\nA sequence of elements.\n\n\ninterface ref Seq[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate a sequence, reserving space for len elements.\n\n\nnew ref create(\n  len: USize val = 0)\n: Seq[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nSeq\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nreserve\n\n\nReserve space for len elements.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\n\nReturns the number of elements in the sequence.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\n\nReplaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nclear\n\n\nRemoves all elements from the sequence.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nAdds an element to the end of the sequence.\n\n\nfun ref push(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\n\nRemoves an element from the end of the sequence.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\n\nAdds an element to the beginning of the sequence.\n\n\nfun ref unshift(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\n\nRemoves an element from the beginning of the sequence.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\n\nAdd len elements to the end of the list, starting from the given\noffset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = 0\n\n\nlen: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = 0\n\n\nlen: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\n\nTruncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nvalues\n\n\nReturns an iterator over the elements of the sequence.\n\n\nfun box values()\n: Iterator[this->A] ref^\n\n\n\n\nReturns\n\n\n\n\nIterator\n[this->A] ref^",
            "title": "interface Seq"
        },
        {
            "location": "/builtin-Seq/#seq91a-a93",
            "text": "A sequence of elements.  interface ref Seq[A: A]",
            "title": "Seq[A: A]"
        },
        {
            "location": "/builtin-Seq/#constructors",
            "text": "create  Create a sequence, reserving space for len elements.  new ref create(\n  len: USize val = 0)\n: Seq[A] ref^  Parameters   len:  USize  val = 0   Returns   Seq [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Seq/#public-functions",
            "text": "reserve  Reserve space for len elements.  fun ref reserve(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    size  Returns the number of elements in the sequence.  fun box size()\n: USize val  Returns   USize  val    apply  Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds.  fun box apply(\n  i: USize val)\n: this->A ?  Parameters   i:  USize  val   Returns   this->A ?    update  Replaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?  Parameters   i:  USize  val  value: A   Returns   A^ ?    clear  Removes all elements from the sequence.  fun ref clear()\n: None val  Returns   None  val    push  Adds an element to the end of the sequence.  fun ref push(\n  value: A)\n: None val  Parameters   value: A   Returns   None  val    pop  Removes an element from the end of the sequence.  fun ref pop()\n: A^ ?  Returns   A^ ?    unshift  Adds an element to the beginning of the sequence.  fun ref unshift(\n  value: A)\n: None val  Parameters   value: A   Returns   None  val    shift  Removes an element from the beginning of the sequence.  fun ref shift()\n: A^ ?  Returns   A^ ?    append  Add len elements to the end of the list, starting from the given\noffset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val  Parameters   seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = 0  len:  USize  val = call   Returns   None  val    concat  Add len iterated elements to the end of the list, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val  Parameters   iter:  Iterator [A^] ref  offset:  USize  val = 0  len:  USize  val = call   Returns   None  val    truncate  Truncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    values  Returns an iterator over the elements of the sequence.  fun box values()\n: Iterator[this->A] ref^  Returns   Iterator [this->A] ref^",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Less/",
            "text": "Less\n\n\nprimitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Less val^\n\n\n\n\nReturns\n\n\n\n\nLess\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive Less"
        },
        {
            "location": "/builtin-Less/#less",
            "text": "primitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref  Implements   Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Less"
        },
        {
            "location": "/builtin-Less/#constructors",
            "text": "create  new val create()\n: Less val^  Returns   Less  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Less/#public-functions",
            "text": "string  fun box string()\n: String iso^  Returns   String  iso^    eq  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val  Parameters   that: ( Less  val |  Equal  val |  Greater  val)   Returns   Bool  val    ne  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val  Parameters   that: ( Less  val |  Equal  val |  Greater  val)   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Equal/",
            "text": "Equal\n\n\nprimitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Equal val^\n\n\n\n\nReturns\n\n\n\n\nEqual\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive Equal"
        },
        {
            "location": "/builtin-Equal/#equal",
            "text": "primitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref  Implements   Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Equal"
        },
        {
            "location": "/builtin-Equal/#constructors",
            "text": "create  new val create()\n: Equal val^  Returns   Equal  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Equal/#public-functions",
            "text": "string  fun box string()\n: String iso^  Returns   String  iso^    eq  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val  Parameters   that: ( Less  val |  Equal  val |  Greater  val)   Returns   Bool  val    ne  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val  Parameters   that: ( Less  val |  Equal  val |  Greater  val)   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Greater/",
            "text": "Greater\n\n\nprimitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Greater val^\n\n\n\n\nReturns\n\n\n\n\nGreater\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive Greater"
        },
        {
            "location": "/builtin-Greater/#greater",
            "text": "primitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref  Implements   Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Greater"
        },
        {
            "location": "/builtin-Greater/#constructors",
            "text": "create  new val create()\n: Greater val^  Returns   Greater  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Greater/#public-functions",
            "text": "string  fun box string()\n: String iso^  Returns   String  iso^    eq  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val  Parameters   that: ( Less  val |  Equal  val |  Greater  val)   Returns   Bool  val    ne  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val  Parameters   that: ( Less  val |  Equal  val |  Greater  val)   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Compare/",
            "text": "Compare\n\n\ntype Compare is\n  (Less val | Equal val | Greater val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "type Compare"
        },
        {
            "location": "/builtin-Compare/#compare",
            "text": "type Compare is\n  (Less val | Equal val | Greater val)  Type Alias For   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Compare"
        },
        {
            "location": "/builtin-HasEq/",
            "text": "HasEq[A: A]\n\n\ninterface ref HasEq[A: A]\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "interface HasEq"
        },
        {
            "location": "/builtin-HasEq/#haseq91a-a93",
            "text": "interface ref HasEq[A: A]",
            "title": "HasEq[A: A]"
        },
        {
            "location": "/builtin-HasEq/#public-functions",
            "text": "eq  fun box eq(\n  that: box->A)\n: Bool val  Parameters   that: box->A   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Equatable/",
            "text": "Equatable[A: \nEquatable\n[A #read] #read]\n\n\ninterface ref Equatable[A: Equatable[A #read] #read]\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "interface Equatable"
        },
        {
            "location": "/builtin-Equatable/#equatable91a-equatable91a-read93-read93",
            "text": "interface ref Equatable[A: Equatable[A #read] #read]",
            "title": "Equatable[A: Equatable[A #read] #read]"
        },
        {
            "location": "/builtin-Equatable/#public-functions",
            "text": "eq  fun box eq(\n  that: box->A #read)\n: Bool val  Parameters   that: box->A #read   Returns   Bool  val    ne  fun box ne(\n  that: box->A #read)\n: Bool val  Parameters   that: box->A #read   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Comparable/",
            "text": "Comparable[A: \nComparable\n[A #read] #read]\n\n\ninterface ref Comparable[A: Comparable[A #read] #read] is\n  Equatable[A #read] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[A #read] ref\n\n\n\n\n\n\nPublic Functions\n\n\nlt\n\n\nfun box lt(\n  that: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  that: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  that: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  that: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: box->A #read)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "interface Comparable"
        },
        {
            "location": "/builtin-Comparable/#comparable91a-comparable91a-read93-read93",
            "text": "interface ref Comparable[A: Comparable[A #read] #read] is\n  Equatable[A #read] ref  Implements   Equatable [A #read] ref",
            "title": "Comparable[A: Comparable[A #read] #read]"
        },
        {
            "location": "/builtin-Comparable/#public-functions",
            "text": "lt  fun box lt(\n  that: box->A #read)\n: Bool val  Parameters   that: box->A #read   Returns   Bool  val    le  fun box le(\n  that: box->A #read)\n: Bool val  Parameters   that: box->A #read   Returns   Bool  val    ge  fun box ge(\n  that: box->A #read)\n: Bool val  Parameters   that: box->A #read   Returns   Bool  val    gt  fun box gt(\n  that: box->A #read)\n: Bool val  Parameters   that: box->A #read   Returns   Bool  val    compare  fun box compare(\n  that: box->A #read)\n: (Less val | Equal val | Greater val)  Parameters   that: box->A #read   Returns   ( Less  val |  Equal  val |  Greater  val)    eq  fun box eq(\n  that: box->A #read)\n: Bool val  Parameters   that: box->A #read   Returns   Bool  val    ne  fun box ne(\n  that: box->A #read)\n: Bool val  Parameters   that: box->A #read   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-MaybePointer/",
            "text": "MaybePointer[A: A]\n\n\nA MaybePointer[A] is used to encode a possibly-null type. It should\n  \nonly\n be used for structs that need to be passed to and from the C FFI.\n\n\nAn optional type for anything that isn't a struct should be encoded as a\n  union type, for example (A | None).\n\n\nstruct ref MaybePointer[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nThis re-encodes the type of \nthat\n from A to MaybePointer[A], allowing\n\nthat\n to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for \nthat\n.\n\n\nnew ref create(\n  that: A)\n: MaybePointer[A] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\n\n\n\nMaybePointer\n[A] ref^\n\n\n\n\n\n\nnone\n\n\nThis returns a null pointer typed as a MaybePointer[A].\n\n\nnew ref none()\n: MaybePointer[A] ref^\n\n\n\n\nReturns\n\n\n\n\nMaybePointer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nThis re-encodes the type of \nthis\n from MaybePointer[A] to A, allowing\n\nthis\n to be assigned to a field of variable of type A. If \nthis\n is a null\npointer, an error is raised.\n\n\nfun box apply()\n: this->A ?\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nis_none\n\n\nReturns true if \nthis\n is null (ie apply would raise an error).\n\n\nfun box is_none()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "struct MaybePointer"
        },
        {
            "location": "/builtin-MaybePointer/#maybepointer91a-a93",
            "text": "A MaybePointer[A] is used to encode a possibly-null type. It should\n   only  be used for structs that need to be passed to and from the C FFI.  An optional type for anything that isn't a struct should be encoded as a\n  union type, for example (A | None).  struct ref MaybePointer[A: A]",
            "title": "MaybePointer[A: A]"
        },
        {
            "location": "/builtin-MaybePointer/#constructors",
            "text": "create  This re-encodes the type of  that  from A to MaybePointer[A], allowing that  to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for  that .  new ref create(\n  that: A)\n: MaybePointer[A] ref^  Parameters   that: A   Returns   MaybePointer [A] ref^    none  This returns a null pointer typed as a MaybePointer[A].  new ref none()\n: MaybePointer[A] ref^  Returns   MaybePointer [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-MaybePointer/#public-functions",
            "text": "apply  This re-encodes the type of  this  from MaybePointer[A] to A, allowing this  to be assigned to a field of variable of type A. If  this  is a null\npointer, an error is raised.  fun box apply()\n: this->A ?  Returns   this->A ?    is_none  Returns true if  this  is null (ie apply would raise an error).  fun box is_none()\n: Bool val  Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I8/",
            "text": "I8\n\n\nprimitive val I8 is\n  _SignedInteger[I8 val, U8 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI8\n val, \nU8\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I8 val)\n: I8 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I8 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I8 val^\n\n\n\n\nReturns\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I8 val^\n\n\n\n\nReturns\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nI8\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I8 val)\n: (I8 val , I8 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nI8\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val",
            "title": "primitive I8"
        },
        {
            "location": "/builtin-I8/#i8",
            "text": "primitive val I8 is\n  _SignedInteger[I8 val, U8 val] val  Implements   _SignedInteger [ I8  val,  U8  val] val",
            "title": "I8"
        },
        {
            "location": "/builtin-I8/#constructors",
            "text": "create  new val create(\n  value: I8 val)\n: I8 val^  Parameters   value:  I8  val   Returns   I8  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I8 val^  Parameters   a: A val   Returns   I8  val^    min_value  new val min_value()\n: I8 val^  Returns   I8  val^    max_value  new val max_value()\n: I8 val^  Returns   I8  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I8/#public-functions",
            "text": "abs  fun box abs()\n: U8 val  Returns   U8  val    bswap  fun box bswap()\n: I8 val  Returns   I8  val    popcount  fun box popcount()\n: U8 val  Returns   U8  val    clz  fun box clz()\n: U8 val  Returns   U8  val    ctz  fun box ctz()\n: U8 val  Returns   U8  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U8 val  Returns   U8  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U8 val  Returns   U8  val    bitwidth  fun box bitwidth()\n: U8 val  Returns   U8  val    min  fun box min(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    max  fun box max(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    addc  fun box addc(\n  y: I8 val)\n: (I8 val , Bool val)  Parameters   y:  I8  val   Returns   ( I8  val ,  Bool  val)    subc  fun box subc(\n  y: I8 val)\n: (I8 val , Bool val)  Parameters   y:  I8  val   Returns   ( I8  val ,  Bool  val)    mulc  fun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)  Parameters   y:  I8  val   Returns   ( I8  val ,  Bool  val)    shl  fun box shl(\n  y: U8 val)\n: I8 val  Parameters   y:  U8  val   Returns   I8  val    shr  fun box shr(\n  y: U8 val)\n: I8 val  Parameters   y:  U8  val   Returns   I8  val    shl_unsafe  fun box shl_unsafe(\n  y: U8 val)\n: I8 val  Parameters   y:  U8  val   Returns   I8  val    shr_unsafe  fun box shr_unsafe(\n  y: U8 val)\n: I8 val  Parameters   y:  U8  val   Returns   I8  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    sub_unsafe  fun box sub_unsafe(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    mul_unsafe  fun box mul_unsafe(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    div_unsafe  fun box div_unsafe(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    divmod_unsafe  fun box divmod_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)  Parameters   y:  I8  val   Returns   ( I8  val ,  I8  val)    mod_unsafe  fun box mod_unsafe(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    neg_unsafe  fun box neg_unsafe()\n: I8 val  Returns   I8  val    op_and  fun box op_and(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    op_or  fun box op_or(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    op_xor  fun box op_xor(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    op_not  fun box op_not()\n: I8 val  Returns   I8  val    add  fun box add(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    sub  fun box sub(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    mul  fun box mul(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    div  fun box div(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    divmod  fun box divmod(\n  y: I8 val)\n: (I8 val , I8 val)  Parameters   y:  I8  val   Returns   ( I8  val ,  I8  val)    mod  fun box mod(\n  y: I8 val)\n: I8 val  Parameters   y:  I8  val   Returns   I8  val    neg  fun box neg()\n: I8 val  Returns   I8  val    eq  fun box eq(\n  y: I8 val)\n: Bool val  Parameters   y:  I8  val   Returns   Bool  val    ne  fun box ne(\n  y: I8 val)\n: Bool val  Parameters   y:  I8  val   Returns   Bool  val    lt  fun box lt(\n  y: I8 val)\n: Bool val  Parameters   y:  I8  val   Returns   Bool  val    le  fun box le(\n  y: I8 val)\n: Bool val  Parameters   y:  I8  val   Returns   Bool  val    ge  fun box ge(\n  y: I8 val)\n: Bool val  Parameters   y:  I8  val   Returns   Bool  val    gt  fun box gt(\n  y: I8 val)\n: Bool val  Parameters   y:  I8  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  I8  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I8/#private-functions",
            "text": "_value  fun box _value()\n: I8 val  Returns   I8  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-I16/",
            "text": "I16\n\n\nprimitive val I16 is\n  _SignedInteger[I16 val, U16 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI16\n val, \nU16\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I16 val)\n: I16 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I16 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I16 val^\n\n\n\n\nReturns\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I16 val^\n\n\n\n\nReturns\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nI16\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I16 val)\n: (I16 val , I16 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nI16\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val",
            "title": "primitive I16"
        },
        {
            "location": "/builtin-I16/#i16",
            "text": "primitive val I16 is\n  _SignedInteger[I16 val, U16 val] val  Implements   _SignedInteger [ I16  val,  U16  val] val",
            "title": "I16"
        },
        {
            "location": "/builtin-I16/#constructors",
            "text": "create  new val create(\n  value: I16 val)\n: I16 val^  Parameters   value:  I16  val   Returns   I16  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I16 val^  Parameters   a: A val   Returns   I16  val^    min_value  new val min_value()\n: I16 val^  Returns   I16  val^    max_value  new val max_value()\n: I16 val^  Returns   I16  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I16/#public-functions",
            "text": "abs  fun box abs()\n: U16 val  Returns   U16  val    bswap  fun box bswap()\n: I16 val  Returns   I16  val    popcount  fun box popcount()\n: U16 val  Returns   U16  val    clz  fun box clz()\n: U16 val  Returns   U16  val    ctz  fun box ctz()\n: U16 val  Returns   U16  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U16 val  Returns   U16  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U16 val  Returns   U16  val    bitwidth  fun box bitwidth()\n: U16 val  Returns   U16  val    min  fun box min(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    max  fun box max(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    addc  fun box addc(\n  y: I16 val)\n: (I16 val , Bool val)  Parameters   y:  I16  val   Returns   ( I16  val ,  Bool  val)    subc  fun box subc(\n  y: I16 val)\n: (I16 val , Bool val)  Parameters   y:  I16  val   Returns   ( I16  val ,  Bool  val)    mulc  fun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)  Parameters   y:  I16  val   Returns   ( I16  val ,  Bool  val)    shl  fun box shl(\n  y: U16 val)\n: I16 val  Parameters   y:  U16  val   Returns   I16  val    shr  fun box shr(\n  y: U16 val)\n: I16 val  Parameters   y:  U16  val   Returns   I16  val    shl_unsafe  fun box shl_unsafe(\n  y: U16 val)\n: I16 val  Parameters   y:  U16  val   Returns   I16  val    shr_unsafe  fun box shr_unsafe(\n  y: U16 val)\n: I16 val  Parameters   y:  U16  val   Returns   I16  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    sub_unsafe  fun box sub_unsafe(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    mul_unsafe  fun box mul_unsafe(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    div_unsafe  fun box div_unsafe(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    divmod_unsafe  fun box divmod_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)  Parameters   y:  I16  val   Returns   ( I16  val ,  I16  val)    mod_unsafe  fun box mod_unsafe(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    neg_unsafe  fun box neg_unsafe()\n: I16 val  Returns   I16  val    op_and  fun box op_and(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    op_or  fun box op_or(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    op_xor  fun box op_xor(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    op_not  fun box op_not()\n: I16 val  Returns   I16  val    add  fun box add(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    sub  fun box sub(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    mul  fun box mul(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    div  fun box div(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    divmod  fun box divmod(\n  y: I16 val)\n: (I16 val , I16 val)  Parameters   y:  I16  val   Returns   ( I16  val ,  I16  val)    mod  fun box mod(\n  y: I16 val)\n: I16 val  Parameters   y:  I16  val   Returns   I16  val    neg  fun box neg()\n: I16 val  Returns   I16  val    eq  fun box eq(\n  y: I16 val)\n: Bool val  Parameters   y:  I16  val   Returns   Bool  val    ne  fun box ne(\n  y: I16 val)\n: Bool val  Parameters   y:  I16  val   Returns   Bool  val    lt  fun box lt(\n  y: I16 val)\n: Bool val  Parameters   y:  I16  val   Returns   Bool  val    le  fun box le(\n  y: I16 val)\n: Bool val  Parameters   y:  I16  val   Returns   Bool  val    ge  fun box ge(\n  y: I16 val)\n: Bool val  Parameters   y:  I16  val   Returns   Bool  val    gt  fun box gt(\n  y: I16 val)\n: Bool val  Parameters   y:  I16  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  I16  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I16/#private-functions",
            "text": "_value  fun box _value()\n: I16 val  Returns   I16  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-I32/",
            "text": "I32\n\n\nprimitive val I32 is\n  _SignedInteger[I32 val, U32 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI32\n val, \nU32\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I32 val)\n: I32 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I32 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I32 val^\n\n\n\n\nReturns\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I32 val^\n\n\n\n\nReturns\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nI32\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I32 val)\n: (I32 val , I32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nI32\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val",
            "title": "primitive I32"
        },
        {
            "location": "/builtin-I32/#i32",
            "text": "primitive val I32 is\n  _SignedInteger[I32 val, U32 val] val  Implements   _SignedInteger [ I32  val,  U32  val] val",
            "title": "I32"
        },
        {
            "location": "/builtin-I32/#constructors",
            "text": "create  new val create(\n  value: I32 val)\n: I32 val^  Parameters   value:  I32  val   Returns   I32  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I32 val^  Parameters   a: A val   Returns   I32  val^    min_value  new val min_value()\n: I32 val^  Returns   I32  val^    max_value  new val max_value()\n: I32 val^  Returns   I32  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I32/#public-functions",
            "text": "abs  fun box abs()\n: U32 val  Returns   U32  val    bswap  fun box bswap()\n: I32 val  Returns   I32  val    popcount  fun box popcount()\n: U32 val  Returns   U32  val    clz  fun box clz()\n: U32 val  Returns   U32  val    ctz  fun box ctz()\n: U32 val  Returns   U32  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U32 val  Returns   U32  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U32 val  Returns   U32  val    bitwidth  fun box bitwidth()\n: U32 val  Returns   U32  val    min  fun box min(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    max  fun box max(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    addc  fun box addc(\n  y: I32 val)\n: (I32 val , Bool val)  Parameters   y:  I32  val   Returns   ( I32  val ,  Bool  val)    subc  fun box subc(\n  y: I32 val)\n: (I32 val , Bool val)  Parameters   y:  I32  val   Returns   ( I32  val ,  Bool  val)    mulc  fun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)  Parameters   y:  I32  val   Returns   ( I32  val ,  Bool  val)    shl  fun box shl(\n  y: U32 val)\n: I32 val  Parameters   y:  U32  val   Returns   I32  val    shr  fun box shr(\n  y: U32 val)\n: I32 val  Parameters   y:  U32  val   Returns   I32  val    shl_unsafe  fun box shl_unsafe(\n  y: U32 val)\n: I32 val  Parameters   y:  U32  val   Returns   I32  val    shr_unsafe  fun box shr_unsafe(\n  y: U32 val)\n: I32 val  Parameters   y:  U32  val   Returns   I32  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    sub_unsafe  fun box sub_unsafe(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    mul_unsafe  fun box mul_unsafe(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    div_unsafe  fun box div_unsafe(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    divmod_unsafe  fun box divmod_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)  Parameters   y:  I32  val   Returns   ( I32  val ,  I32  val)    mod_unsafe  fun box mod_unsafe(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    neg_unsafe  fun box neg_unsafe()\n: I32 val  Returns   I32  val    op_and  fun box op_and(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    op_or  fun box op_or(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    op_xor  fun box op_xor(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    op_not  fun box op_not()\n: I32 val  Returns   I32  val    add  fun box add(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    sub  fun box sub(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    mul  fun box mul(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    div  fun box div(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    divmod  fun box divmod(\n  y: I32 val)\n: (I32 val , I32 val)  Parameters   y:  I32  val   Returns   ( I32  val ,  I32  val)    mod  fun box mod(\n  y: I32 val)\n: I32 val  Parameters   y:  I32  val   Returns   I32  val    neg  fun box neg()\n: I32 val  Returns   I32  val    eq  fun box eq(\n  y: I32 val)\n: Bool val  Parameters   y:  I32  val   Returns   Bool  val    ne  fun box ne(\n  y: I32 val)\n: Bool val  Parameters   y:  I32  val   Returns   Bool  val    lt  fun box lt(\n  y: I32 val)\n: Bool val  Parameters   y:  I32  val   Returns   Bool  val    le  fun box le(\n  y: I32 val)\n: Bool val  Parameters   y:  I32  val   Returns   Bool  val    ge  fun box ge(\n  y: I32 val)\n: Bool val  Parameters   y:  I32  val   Returns   Bool  val    gt  fun box gt(\n  y: I32 val)\n: Bool val  Parameters   y:  I32  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  I32  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I32/#private-functions",
            "text": "_value  fun box _value()\n: I32 val  Returns   I32  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-I64/",
            "text": "I64\n\n\nprimitive val I64 is\n  _SignedInteger[I64 val, U64 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI64\n val, \nU64\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I64 val)\n: I64 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I64 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I64 val^\n\n\n\n\nReturns\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I64 val^\n\n\n\n\nReturns\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I64 val)\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val",
            "title": "primitive I64"
        },
        {
            "location": "/builtin-I64/#i64",
            "text": "primitive val I64 is\n  _SignedInteger[I64 val, U64 val] val  Implements   _SignedInteger [ I64  val,  U64  val] val",
            "title": "I64"
        },
        {
            "location": "/builtin-I64/#constructors",
            "text": "create  new val create(\n  value: I64 val)\n: I64 val^  Parameters   value:  I64  val   Returns   I64  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I64 val^  Parameters   a: A val   Returns   I64  val^    min_value  new val min_value()\n: I64 val^  Returns   I64  val^    max_value  new val max_value()\n: I64 val^  Returns   I64  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I64/#public-functions",
            "text": "abs  fun box abs()\n: U64 val  Returns   U64  val    bswap  fun box bswap()\n: I64 val  Returns   I64  val    popcount  fun box popcount()\n: U64 val  Returns   U64  val    clz  fun box clz()\n: U64 val  Returns   U64  val    ctz  fun box ctz()\n: U64 val  Returns   U64  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U64 val  Returns   U64  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U64 val  Returns   U64  val    bitwidth  fun box bitwidth()\n: U64 val  Returns   U64  val    min  fun box min(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    max  fun box max(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    addc  fun box addc(\n  y: I64 val)\n: (I64 val , Bool val)  Parameters   y:  I64  val   Returns   ( I64  val ,  Bool  val)    subc  fun box subc(\n  y: I64 val)\n: (I64 val , Bool val)  Parameters   y:  I64  val   Returns   ( I64  val ,  Bool  val)    mulc  fun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)  Parameters   y:  I64  val   Returns   ( I64  val ,  Bool  val)    shl  fun box shl(\n  y: U64 val)\n: I64 val  Parameters   y:  U64  val   Returns   I64  val    shr  fun box shr(\n  y: U64 val)\n: I64 val  Parameters   y:  U64  val   Returns   I64  val    shl_unsafe  fun box shl_unsafe(\n  y: U64 val)\n: I64 val  Parameters   y:  U64  val   Returns   I64  val    shr_unsafe  fun box shr_unsafe(\n  y: U64 val)\n: I64 val  Parameters   y:  U64  val   Returns   I64  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    sub_unsafe  fun box sub_unsafe(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    mul_unsafe  fun box mul_unsafe(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    div_unsafe  fun box div_unsafe(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    divmod_unsafe  fun box divmod_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)  Parameters   y:  I64  val   Returns   ( I64  val ,  I64  val)    mod_unsafe  fun box mod_unsafe(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    neg_unsafe  fun box neg_unsafe()\n: I64 val  Returns   I64  val    op_and  fun box op_and(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    op_or  fun box op_or(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    op_xor  fun box op_xor(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    op_not  fun box op_not()\n: I64 val  Returns   I64  val    add  fun box add(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    sub  fun box sub(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    mul  fun box mul(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    div  fun box div(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    divmod  fun box divmod(\n  y: I64 val)\n: (I64 val , I64 val)  Parameters   y:  I64  val   Returns   ( I64  val ,  I64  val)    mod  fun box mod(\n  y: I64 val)\n: I64 val  Parameters   y:  I64  val   Returns   I64  val    neg  fun box neg()\n: I64 val  Returns   I64  val    eq  fun box eq(\n  y: I64 val)\n: Bool val  Parameters   y:  I64  val   Returns   Bool  val    ne  fun box ne(\n  y: I64 val)\n: Bool val  Parameters   y:  I64  val   Returns   Bool  val    lt  fun box lt(\n  y: I64 val)\n: Bool val  Parameters   y:  I64  val   Returns   Bool  val    le  fun box le(\n  y: I64 val)\n: Bool val  Parameters   y:  I64  val   Returns   Bool  val    ge  fun box ge(\n  y: I64 val)\n: Bool val  Parameters   y:  I64  val   Returns   Bool  val    gt  fun box gt(\n  y: I64 val)\n: Bool val  Parameters   y:  I64  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  I64  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I64/#private-functions",
            "text": "_value  fun box _value()\n: I64 val  Returns   I64  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-ILong/",
            "text": "ILong\n\n\nprimitive val ILong is\n  _SignedInteger[ILong val, ULong val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nILong\n val, \nULong\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: ILong val)\n: ILong val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: ILong val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: ILong val^\n\n\n\n\nReturns\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: ILong val^\n\n\n\n\nReturns\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nfun box clz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nfun box ctz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nILong\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: ILong val)\n: (ILong val , ILong val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nILong\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val",
            "title": "primitive ILong"
        },
        {
            "location": "/builtin-ILong/#ilong",
            "text": "primitive val ILong is\n  _SignedInteger[ILong val, ULong val] val  Implements   _SignedInteger [ ILong  val,  ULong  val] val",
            "title": "ILong"
        },
        {
            "location": "/builtin-ILong/#constructors",
            "text": "create  new val create(\n  value: ILong val)\n: ILong val^  Parameters   value:  ILong  val   Returns   ILong  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: ILong val^  Parameters   a: A val   Returns   ILong  val^    min_value  new val min_value()\n: ILong val^  Returns   ILong  val^    max_value  new val max_value()\n: ILong val^  Returns   ILong  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ILong/#public-functions",
            "text": "abs  fun box abs()\n: ULong val  Returns   ULong  val    bswap  fun box bswap()\n: ILong val  Returns   ILong  val    popcount  fun box popcount()\n: ULong val  Returns   ULong  val    clz  fun box clz()\n: ULong val  Returns   ULong  val    ctz  fun box ctz()\n: ULong val  Returns   ULong  val    clz_unsafe  fun box clz_unsafe()\n: ULong val  Returns   ULong  val    ctz_unsafe  fun box ctz_unsafe()\n: ULong val  Returns   ULong  val    bitwidth  fun box bitwidth()\n: ULong val  Returns   ULong  val    min  fun box min(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    max  fun box max(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    addc  fun box addc(\n  y: ILong val)\n: (ILong val , Bool val)  Parameters   y:  ILong  val   Returns   ( ILong  val ,  Bool  val)    subc  fun box subc(\n  y: ILong val)\n: (ILong val , Bool val)  Parameters   y:  ILong  val   Returns   ( ILong  val ,  Bool  val)    mulc  fun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)  Parameters   y:  ILong  val   Returns   ( ILong  val ,  Bool  val)    shl  fun box shl(\n  y: ULong val)\n: ILong val  Parameters   y:  ULong  val   Returns   ILong  val    shr  fun box shr(\n  y: ULong val)\n: ILong val  Parameters   y:  ULong  val   Returns   ILong  val    shl_unsafe  fun box shl_unsafe(\n  y: ULong val)\n: ILong val  Parameters   y:  ULong  val   Returns   ILong  val    shr_unsafe  fun box shr_unsafe(\n  y: ULong val)\n: ILong val  Parameters   y:  ULong  val   Returns   ILong  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    sub_unsafe  fun box sub_unsafe(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    mul_unsafe  fun box mul_unsafe(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    div_unsafe  fun box div_unsafe(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    divmod_unsafe  fun box divmod_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)  Parameters   y:  ILong  val   Returns   ( ILong  val ,  ILong  val)    mod_unsafe  fun box mod_unsafe(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    neg_unsafe  fun box neg_unsafe()\n: ILong val  Returns   ILong  val    op_and  fun box op_and(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    op_or  fun box op_or(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    op_xor  fun box op_xor(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    op_not  fun box op_not()\n: ILong val  Returns   ILong  val    add  fun box add(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    sub  fun box sub(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    mul  fun box mul(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    div  fun box div(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    divmod  fun box divmod(\n  y: ILong val)\n: (ILong val , ILong val)  Parameters   y:  ILong  val   Returns   ( ILong  val ,  ILong  val)    mod  fun box mod(\n  y: ILong val)\n: ILong val  Parameters   y:  ILong  val   Returns   ILong  val    neg  fun box neg()\n: ILong val  Returns   ILong  val    eq  fun box eq(\n  y: ILong val)\n: Bool val  Parameters   y:  ILong  val   Returns   Bool  val    ne  fun box ne(\n  y: ILong val)\n: Bool val  Parameters   y:  ILong  val   Returns   Bool  val    lt  fun box lt(\n  y: ILong val)\n: Bool val  Parameters   y:  ILong  val   Returns   Bool  val    le  fun box le(\n  y: ILong val)\n: Bool val  Parameters   y:  ILong  val   Returns   Bool  val    ge  fun box ge(\n  y: ILong val)\n: Bool val  Parameters   y:  ILong  val   Returns   Bool  val    gt  fun box gt(\n  y: ILong val)\n: Bool val  Parameters   y:  ILong  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)  Parameters   that:  ILong  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ILong/#private-functions",
            "text": "_value  fun box _value()\n: ILong val  Returns   ILong  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-ISize/",
            "text": "ISize\n\n\nprimitive val ISize is\n  _SignedInteger[ISize val, USize val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nISize\n val, \nUSize\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: ISize val)\n: ISize val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: ISize val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: ISize val^\n\n\n\n\nReturns\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: ISize val^\n\n\n\n\nReturns\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nfun box clz_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nfun box ctz_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nISize\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: ISize val)\n: (ISize val , ISize val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nISize\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val",
            "title": "primitive ISize"
        },
        {
            "location": "/builtin-ISize/#isize",
            "text": "primitive val ISize is\n  _SignedInteger[ISize val, USize val] val  Implements   _SignedInteger [ ISize  val,  USize  val] val",
            "title": "ISize"
        },
        {
            "location": "/builtin-ISize/#constructors",
            "text": "create  new val create(\n  value: ISize val)\n: ISize val^  Parameters   value:  ISize  val   Returns   ISize  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: ISize val^  Parameters   a: A val   Returns   ISize  val^    min_value  new val min_value()\n: ISize val^  Returns   ISize  val^    max_value  new val max_value()\n: ISize val^  Returns   ISize  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ISize/#public-functions",
            "text": "abs  fun box abs()\n: USize val  Returns   USize  val    bswap  fun box bswap()\n: ISize val  Returns   ISize  val    popcount  fun box popcount()\n: USize val  Returns   USize  val    clz  fun box clz()\n: USize val  Returns   USize  val    ctz  fun box ctz()\n: USize val  Returns   USize  val    clz_unsafe  fun box clz_unsafe()\n: USize val  Returns   USize  val    ctz_unsafe  fun box ctz_unsafe()\n: USize val  Returns   USize  val    bitwidth  fun box bitwidth()\n: USize val  Returns   USize  val    min  fun box min(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    max  fun box max(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    addc  fun box addc(\n  y: ISize val)\n: (ISize val , Bool val)  Parameters   y:  ISize  val   Returns   ( ISize  val ,  Bool  val)    subc  fun box subc(\n  y: ISize val)\n: (ISize val , Bool val)  Parameters   y:  ISize  val   Returns   ( ISize  val ,  Bool  val)    mulc  fun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)  Parameters   y:  ISize  val   Returns   ( ISize  val ,  Bool  val)    shl  fun box shl(\n  y: USize val)\n: ISize val  Parameters   y:  USize  val   Returns   ISize  val    shr  fun box shr(\n  y: USize val)\n: ISize val  Parameters   y:  USize  val   Returns   ISize  val    shl_unsafe  fun box shl_unsafe(\n  y: USize val)\n: ISize val  Parameters   y:  USize  val   Returns   ISize  val    shr_unsafe  fun box shr_unsafe(\n  y: USize val)\n: ISize val  Parameters   y:  USize  val   Returns   ISize  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    sub_unsafe  fun box sub_unsafe(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    mul_unsafe  fun box mul_unsafe(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    div_unsafe  fun box div_unsafe(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    divmod_unsafe  fun box divmod_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)  Parameters   y:  ISize  val   Returns   ( ISize  val ,  ISize  val)    mod_unsafe  fun box mod_unsafe(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    neg_unsafe  fun box neg_unsafe()\n: ISize val  Returns   ISize  val    op_and  fun box op_and(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    op_or  fun box op_or(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    op_xor  fun box op_xor(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    op_not  fun box op_not()\n: ISize val  Returns   ISize  val    add  fun box add(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    sub  fun box sub(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    mul  fun box mul(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    div  fun box div(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    divmod  fun box divmod(\n  y: ISize val)\n: (ISize val , ISize val)  Parameters   y:  ISize  val   Returns   ( ISize  val ,  ISize  val)    mod  fun box mod(\n  y: ISize val)\n: ISize val  Parameters   y:  ISize  val   Returns   ISize  val    neg  fun box neg()\n: ISize val  Returns   ISize  val    eq  fun box eq(\n  y: ISize val)\n: Bool val  Parameters   y:  ISize  val   Returns   Bool  val    ne  fun box ne(\n  y: ISize val)\n: Bool val  Parameters   y:  ISize  val   Returns   Bool  val    lt  fun box lt(\n  y: ISize val)\n: Bool val  Parameters   y:  ISize  val   Returns   Bool  val    le  fun box le(\n  y: ISize val)\n: Bool val  Parameters   y:  ISize  val   Returns   Bool  val    ge  fun box ge(\n  y: ISize val)\n: Bool val  Parameters   y:  ISize  val   Returns   Bool  val    gt  fun box gt(\n  y: ISize val)\n: Bool val  Parameters   y:  ISize  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)  Parameters   that:  ISize  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ISize/#private-functions",
            "text": "_value  fun box _value()\n: ISize val  Returns   ISize  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-I128/",
            "text": "I128\n\n\nprimitive val I128 is\n  _SignedInteger[I128 val, U128 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI128\n val, \nU128\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I128 val)\n: I128 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I128 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I128 val^\n\n\n\n\nReturns\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I128 val^\n\n\n\n\nReturns\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I128 val)\n: (I128 val , I128 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI128\n val , \nI128\n val)\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI128\n val , \nI128\n val)\n\n\n\n\n\n\ndiv_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val",
            "title": "primitive I128"
        },
        {
            "location": "/builtin-I128/#i128",
            "text": "primitive val I128 is\n  _SignedInteger[I128 val, U128 val] val  Implements   _SignedInteger [ I128  val,  U128  val] val",
            "title": "I128"
        },
        {
            "location": "/builtin-I128/#constructors",
            "text": "create  new val create(\n  value: I128 val)\n: I128 val^  Parameters   value:  I128  val   Returns   I128  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: I128 val^  Parameters   a: A val   Returns   I128  val^    min_value  new val min_value()\n: I128 val^  Returns   I128  val^    max_value  new val max_value()\n: I128 val^  Returns   I128  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I128/#public-functions",
            "text": "abs  fun box abs()\n: U128 val  Returns   U128  val    bswap  fun box bswap()\n: I128 val  Returns   I128  val    popcount  fun box popcount()\n: U128 val  Returns   U128  val    clz  fun box clz()\n: U128 val  Returns   U128  val    ctz  fun box ctz()\n: U128 val  Returns   U128  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U128 val  Returns   U128  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U128 val  Returns   U128  val    bitwidth  fun box bitwidth()\n: U128 val  Returns   U128  val    min  fun box min(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    max  fun box max(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    hash  fun box hash()\n: U64 val  Returns   U64  val    string  fun box string()\n: String iso^  Returns   String  iso^    mul  fun box mul(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    divmod  fun box divmod(\n  y: I128 val)\n: (I128 val , I128 val)  Parameters   y:  I128  val   Returns   ( I128  val ,  I128  val)    div  fun box div(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    mod  fun box mod(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    mul_unsafe  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    divmod_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)  Parameters   y:  I128  val   Returns   ( I128  val ,  I128  val)    div_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    mod_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    f32_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val  Returns   F64  val    shl  fun box shl(\n  y: U128 val)\n: I128 val  Parameters   y:  U128  val   Returns   I128  val    shr  fun box shr(\n  y: U128 val)\n: I128 val  Parameters   y:  U128  val   Returns   I128  val    shl_unsafe  fun box shl_unsafe(\n  y: U128 val)\n: I128 val  Parameters   y:  U128  val   Returns   I128  val    shr_unsafe  fun box shr_unsafe(\n  y: U128 val)\n: I128 val  Parameters   y:  U128  val   Returns   I128  val    add_unsafe  fun box add_unsafe(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    sub_unsafe  fun box sub_unsafe(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    neg_unsafe  fun box neg_unsafe()\n: I128 val  Returns   I128  val    op_and  fun box op_and(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    op_or  fun box op_or(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    op_xor  fun box op_xor(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    op_not  fun box op_not()\n: I128 val  Returns   I128  val    add  fun box add(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    sub  fun box sub(\n  y: I128 val)\n: I128 val  Parameters   y:  I128  val   Returns   I128  val    neg  fun box neg()\n: I128 val  Returns   I128  val    eq  fun box eq(\n  y: I128 val)\n: Bool val  Parameters   y:  I128  val   Returns   Bool  val    ne  fun box ne(\n  y: I128 val)\n: Bool val  Parameters   y:  I128  val   Returns   Bool  val    lt  fun box lt(\n  y: I128 val)\n: Bool val  Parameters   y:  I128  val   Returns   Bool  val    le  fun box le(\n  y: I128 val)\n: Bool val  Parameters   y:  I128  val   Returns   Bool  val    ge  fun box ge(\n  y: I128 val)\n: Bool val  Parameters   y:  I128  val   Returns   Bool  val    gt  fun box gt(\n  y: I128 val)\n: Bool val  Parameters   y:  I128  val   Returns   Bool  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    compare  fun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  I128  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I128/#private-functions",
            "text": "_value  fun box _value()\n: I128 val  Returns   I128  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-Signed/",
            "text": "Signed\n\n\ntype Signed is\n  (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \n    \nI64\n val | \nI128\n val | \nILong\n val | \n    \nISize\n val)",
            "title": "type Signed"
        },
        {
            "location": "/builtin-Signed/#signed",
            "text": "type Signed is\n  (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val)  Type Alias For   ( I8  val |  I16  val |  I32  val | \n     I64  val |  I128  val |  ILong  val | \n     ISize  val)",
            "title": "Signed"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/",
            "text": "_ArithmeticConvertible\n\n\ntrait val _ArithmeticConvertible\n\n\n\n\nPublic Functions\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val",
            "title": "trait _ArithmeticConvertible"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#_arithmeticconvertible",
            "text": "trait val _ArithmeticConvertible",
            "title": "_ArithmeticConvertible"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#public-functions",
            "text": "i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val  Returns   F64  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Real/",
            "text": "Real[A: \nReal\n[A val] val]\n\n\ntrait val Real[A: Real[A val] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A val] ref\n\n\n\n\nImplements\n\n\n\n\nStringable\n box\n\n\n_ArithmeticConvertible\n val\n\n\nComparable\n[A val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: A val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]\n\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\na: B val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nPublic Functions\n\n\nadd\n\n\nfun box add(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val",
            "title": "trait Real"
        },
        {
            "location": "/builtin-Real/#real91a-real91a-val93-val93",
            "text": "trait val Real[A: Real[A val] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A val] ref  Implements   Stringable  box  _ArithmeticConvertible  val  Comparable [A val] ref",
            "title": "Real[A: Real[A val] val]"
        },
        {
            "location": "/builtin-Real/#constructors",
            "text": "create  new val create(\n  value: A val)\n: Real[A val] val^  Parameters   value: A val   Returns   Real [A val] val^    from[B: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^  Parameters   a: B val   Returns   Real [A val] val^    min_value  new val min_value()\n: Real[A val] val^  Returns   Real [A val] val^    max_value  new val max_value()\n: Real[A val] val^  Returns   Real [A val] val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Real/#public-functions",
            "text": "add  fun box add(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub  fun box sub(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul  fun box mul(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div  fun box div(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod  fun box divmod(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod  fun box mod(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg  fun box neg()\n: A val  Returns   A val    eq  fun box eq(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ne  fun box ne(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    lt  fun box lt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    le  fun box le(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ge  fun box ge(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    gt  fun box gt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    min  fun box min(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    max  fun box max(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    hash  fun box hash()\n: U64 val  Returns   U64  val    string  fun box string()\n: String iso^  Returns   String  iso^    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)  Parameters   that: A val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Real/#private-functions",
            "text": "_value  fun box _value()\n: A val  Returns   A val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-Integer/",
            "text": "Integer[A: \nInteger\n[A val] val]\n\n\ntrait val Integer[A: Integer[A val] val] is\n  Real[A val] val\n\n\n\n\nImplements\n\n\n\n\nReal\n[A val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: A val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]\n\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\na: B val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nPublic Functions\n\n\nadd_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box add_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box sub_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box neg_unsafe()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val",
            "title": "trait Integer"
        },
        {
            "location": "/builtin-Integer/#integer91a-integer91a-val93-val93",
            "text": "trait val Integer[A: Integer[A val] val] is\n  Real[A val] val  Implements   Real [A val] val",
            "title": "Integer[A: Integer[A val] val]"
        },
        {
            "location": "/builtin-Integer/#constructors",
            "text": "create  new val create(\n  value: A val)\n: Real[A val] val^  Parameters   value: A val   Returns   Real [A val] val^    from[B: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^  Parameters   a: B val   Returns   Real [A val] val^    min_value  new val min_value()\n: Real[A val] val^  Returns   Real [A val] val^    max_value  new val max_value()\n: Real[A val] val^  Returns   Real [A val] val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Integer/#public-functions",
            "text": "add_unsafe  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box add_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub_unsafe  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box sub_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul_unsafe  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg_unsafe  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box neg_unsafe()\n: A val  Returns   A val    op_and  fun box op_and(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_or  fun box op_or(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_xor  fun box op_xor(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_not  fun box op_not()\n: A val  Returns   A val    bswap  fun box bswap()\n: A val  Returns   A val    add  fun box add(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub  fun box sub(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul  fun box mul(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div  fun box div(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod  fun box divmod(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod  fun box mod(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg  fun box neg()\n: A val  Returns   A val    eq  fun box eq(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ne  fun box ne(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    lt  fun box lt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    le  fun box le(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ge  fun box ge(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    gt  fun box gt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    min  fun box min(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    max  fun box max(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    hash  fun box hash()\n: U64 val  Returns   U64  val    string  fun box string()\n: String iso^  Returns   String  iso^    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)  Parameters   that: A val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Integer/#private-functions",
            "text": "_value  fun box _value()\n: A val  Returns   A val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-_SignedInteger/",
            "text": "_SignedInteger[A: \n_SignedInteger\n[A val, B val] val, B: \n_UnsignedInteger\n[B val] val]\n\n\ntrait val _SignedInteger[A: _SignedInteger[A val, B val] val, B: _UnsignedInteger[B val] val] is\n  Integer[A val] val\n\n\n\n\nImplements\n\n\n\n\nInteger\n[A val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: A val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]\n\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\na: B val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: B val\n\n\n\n\nReturns\n\n\n\n\nB val\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: B val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: B val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: B val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: B val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nshl_unsafe\n\n\nUnsafe operation.\nIf bits differing from the final sign bit are shifted-out, the result is\nundefined.\n\n\nfun box shl_unsafe(\n  y: B val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: B val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nshr_unsafe\n\n\nUnsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.\n\n\nfun box shr_unsafe(\n  y: B val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: B val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: B val\n\n\n\n\nReturns\n\n\n\n\nB val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: B val\n\n\n\n\nReturns\n\n\n\n\nB val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: B val\n\n\n\n\nReturns\n\n\n\n\nB val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: B val\n\n\n\n\nReturns\n\n\n\n\nB val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: B val\n\n\n\n\nReturns\n\n\n\n\nB val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: B val\n\n\n\n\nReturns\n\n\n\n\nB val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val",
            "title": "trait _SignedInteger"
        },
        {
            "location": "/builtin-_SignedInteger/#_signedinteger91a-_signedinteger91a-val-b-val93-val-b-_unsignedinteger91b-val93-val93",
            "text": "trait val _SignedInteger[A: _SignedInteger[A val, B val] val, B: _UnsignedInteger[B val] val] is\n  Integer[A val] val  Implements   Integer [A val] val",
            "title": "_SignedInteger[A: _SignedInteger[A val, B val] val, B: _UnsignedInteger[B val] val]"
        },
        {
            "location": "/builtin-_SignedInteger/#constructors",
            "text": "create  new val create(\n  value: A val)\n: Real[A val] val^  Parameters   value: A val   Returns   Real [A val] val^    from[B: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^  Parameters   a: B val   Returns   Real [A val] val^    min_value  new val min_value()\n: Real[A val] val^  Returns   Real [A val] val^    max_value  new val max_value()\n: Real[A val] val^  Returns   Real [A val] val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-_SignedInteger/#public-functions",
            "text": "abs  fun box abs()\n: B val  Returns   B val    shl  fun box shl(\n  y: B val)\n: A val  Parameters   y: B val   Returns   A val    shr  fun box shr(\n  y: B val)\n: A val  Parameters   y: B val   Returns   A val    shl_unsafe  Unsafe operation.\nIf bits differing from the final sign bit are shifted-out, the result is\nundefined.  fun box shl_unsafe(\n  y: B val)\n: A val  Parameters   y: B val   Returns   A val    shr_unsafe  Unsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.  fun box shr_unsafe(\n  y: B val)\n: A val  Parameters   y: B val   Returns   A val    popcount  fun box popcount()\n: B val  Returns   B val    clz  fun box clz()\n: B val  Returns   B val    ctz  fun box ctz()\n: B val  Returns   B val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: B val  Returns   B val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: B val  Returns   B val    bitwidth  fun box bitwidth()\n: B val  Returns   B val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub_unsafe  fun box sub_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul_unsafe  fun box mul_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div_unsafe  fun box div_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod_unsafe  fun box divmod_unsafe(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod_unsafe  fun box mod_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg_unsafe  fun box neg_unsafe()\n: A val  Returns   A val    op_and  fun box op_and(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_or  fun box op_or(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_xor  fun box op_xor(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_not  fun box op_not()\n: A val  Returns   A val    bswap  fun box bswap()\n: A val  Returns   A val    add  fun box add(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub  fun box sub(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul  fun box mul(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div  fun box div(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod  fun box divmod(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod  fun box mod(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg  fun box neg()\n: A val  Returns   A val    eq  fun box eq(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ne  fun box ne(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    lt  fun box lt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    le  fun box le(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ge  fun box ge(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    gt  fun box gt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    min  fun box min(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    max  fun box max(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)  Parameters   that: A val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-_SignedInteger/#private-functions",
            "text": "_value  fun box _value()\n: A val  Returns   A val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-_UnsignedInteger/",
            "text": "_UnsignedInteger[A: \n_UnsignedInteger\n[A val] val]\n\n\ntrait val _UnsignedInteger[A: _UnsignedInteger[A val] val] is\n  Integer[A val] val\n\n\n\n\nImplements\n\n\n\n\nInteger\n[A val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: A val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]\n\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\na: B val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nshl_unsafe\n\n\nUnsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.\n\n\nfun box shl_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nshr_unsafe\n\n\nUnsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.\n\n\nfun box shr_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val",
            "title": "trait _UnsignedInteger"
        },
        {
            "location": "/builtin-_UnsignedInteger/#_unsignedinteger91a-_unsignedinteger91a-val93-val93",
            "text": "trait val _UnsignedInteger[A: _UnsignedInteger[A val] val] is\n  Integer[A val] val  Implements   Integer [A val] val",
            "title": "_UnsignedInteger[A: _UnsignedInteger[A val] val]"
        },
        {
            "location": "/builtin-_UnsignedInteger/#constructors",
            "text": "create  new val create(\n  value: A val)\n: Real[A val] val^  Parameters   value: A val   Returns   Real [A val] val^    from[B: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^  Parameters   a: B val   Returns   Real [A val] val^    min_value  new val min_value()\n: Real[A val] val^  Returns   Real [A val] val^    max_value  new val max_value()\n: Real[A val] val^  Returns   Real [A val] val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-_UnsignedInteger/#public-functions",
            "text": "abs  fun box abs()\n: A val  Returns   A val    shl  fun box shl(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    shr  fun box shr(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    shl_unsafe  Unsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.  fun box shl_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    shr_unsafe  Unsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.  fun box shr_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    rotl  fun box rotl(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    rotr  fun box rotr(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    popcount  fun box popcount()\n: A val  Returns   A val    clz  fun box clz()\n: A val  Returns   A val    ctz  fun box ctz()\n: A val  Returns   A val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: A val  Returns   A val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: A val  Returns   A val    bitwidth  fun box bitwidth()\n: A val  Returns   A val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub_unsafe  fun box sub_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul_unsafe  fun box mul_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div_unsafe  fun box div_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod_unsafe  fun box divmod_unsafe(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod_unsafe  fun box mod_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg_unsafe  fun box neg_unsafe()\n: A val  Returns   A val    op_and  fun box op_and(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_or  fun box op_or(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_xor  fun box op_xor(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    op_not  fun box op_not()\n: A val  Returns   A val    bswap  fun box bswap()\n: A val  Returns   A val    add  fun box add(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub  fun box sub(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul  fun box mul(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div  fun box div(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod  fun box divmod(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod  fun box mod(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg  fun box neg()\n: A val  Returns   A val    eq  fun box eq(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ne  fun box ne(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    lt  fun box lt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    le  fun box le(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ge  fun box ge(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    gt  fun box gt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    min  fun box min(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    max  fun box max(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)  Parameters   that: A val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-_UnsignedInteger/#private-functions",
            "text": "_value  fun box _value()\n: A val  Returns   A val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-FloatingPoint/",
            "text": "FloatingPoint[A: \nFloatingPoint\n[A val] val]\n\n\ntrait val FloatingPoint[A: FloatingPoint[A val] val] is\n  Real[A val] val\n\n\n\n\nImplements\n\n\n\n\nReal\n[A val] val\n\n\n\n\n\n\nConstructors\n\n\nmin_normalised\n\n\nnew val min_normalised()\n: FloatingPoint[A val] val^\n\n\n\n\nReturns\n\n\n\n\nFloatingPoint\n[A val] val^\n\n\n\n\n\n\nepsilon\n\n\nnew val epsilon()\n: FloatingPoint[A val] val^\n\n\n\n\nReturns\n\n\n\n\nFloatingPoint\n[A val] val^\n\n\n\n\n\n\ncreate\n\n\nnew val create(\n  value: A val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]\n\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^\n\n\n\n\nParameters\n\n\n\n\na: B val\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A val] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A val] val^\n\n\n\n\n\n\nPublic Functions\n\n\nradix\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box add_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box sub_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box mul_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box div_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box divmod_unsafe(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box mod_unsafe(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box neg_unsafe()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\neq_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box eq_unsafe(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box ne_unsafe(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box lt_unsafe(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box le_unsafe(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box ge_unsafe(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box gt_unsafe(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nceil\n\n\nfun box ceil()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nfloor\n\n\nfun box floor()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nround\n\n\nfun box round()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ntrunc\n\n\nfun box trunc()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nfinite\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\n\nfun box ldexp(\n  x: A val,\n  exponent: I32 val)\n: A val\n\n\n\n\nParameters\n\n\n\n\nx: A val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nfrexp\n\n\nfun box frexp()\n: (A val , U32 val)\n\n\n\n\nReturns\n\n\n\n\n(A val , \nU32\n val)\n\n\n\n\n\n\nlog\n\n\nfun box log()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nlog2\n\n\nfun box log2()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nlog10\n\n\nfun box log10()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nlogb\n\n\nfun box logb()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\npow\n\n\nfun box pow(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\npowi\n\n\nfun box powi(\n  y: I32 val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsqrt\n\n\nfun box sqrt()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsqrt_unsafe\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ncbrt\n\n\nfun box cbrt()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nexp\n\n\nfun box exp()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nexp2\n\n\nfun box exp2()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ncos\n\n\nfun box cos()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsin\n\n\nfun box sin()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ntan\n\n\nfun box tan()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ncosh\n\n\nfun box cosh()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsinh\n\n\nfun box sinh()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ntanh\n\n\nfun box tanh()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nacos\n\n\nfun box acos()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nasin\n\n\nfun box asin()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\natan\n\n\nfun box atan()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\natan2\n\n\nfun box atan2(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nacosh\n\n\nfun box acosh()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nasinh\n\n\nfun box asinh()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\natanh\n\n\nfun box atanh()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ncopysign\n\n\nfun box copysign(\n  sign: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\nsign: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A val)\n: (A val , A val)\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\n(A val , A val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A val)\n: A val\n\n\n\n\nParameters\n\n\n\n\ny: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val",
            "title": "trait FloatingPoint"
        },
        {
            "location": "/builtin-FloatingPoint/#floatingpoint91a-floatingpoint91a-val93-val93",
            "text": "trait val FloatingPoint[A: FloatingPoint[A val] val] is\n  Real[A val] val  Implements   Real [A val] val",
            "title": "FloatingPoint[A: FloatingPoint[A val] val]"
        },
        {
            "location": "/builtin-FloatingPoint/#constructors",
            "text": "min_normalised  new val min_normalised()\n: FloatingPoint[A val] val^  Returns   FloatingPoint [A val] val^    epsilon  new val epsilon()\n: FloatingPoint[A val] val^  Returns   FloatingPoint [A val] val^    create  new val create(\n  value: A val)\n: Real[A val] val^  Parameters   value: A val   Returns   Real [A val] val^    from[B: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: Real[A val] val^  Parameters   a: B val   Returns   Real [A val] val^    min_value  new val min_value()\n: Real[A val] val^  Returns   Real [A val] val^    max_value  new val max_value()\n: Real[A val] val^  Returns   Real [A val] val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FloatingPoint/#public-functions",
            "text": "radix  fun tag radix()\n: U8 val  Returns   U8  val    precision2  fun tag precision2()\n: U8 val  Returns   U8  val    precision10  fun tag precision10()\n: U8 val  Returns   U8  val    min_exp2  fun tag min_exp2()\n: I16 val  Returns   I16  val    min_exp10  fun tag min_exp10()\n: I16 val  Returns   I16  val    max_exp2  fun tag max_exp2()\n: I16 val  Returns   I16  val    max_exp10  fun tag max_exp10()\n: I16 val  Returns   I16  val    add_unsafe  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box add_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub_unsafe  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box sub_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul_unsafe  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box mul_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div_unsafe  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box div_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod_unsafe  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box divmod_unsafe(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod_unsafe  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box mod_unsafe(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg_unsafe  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box neg_unsafe()\n: A val  Returns   A val    eq_unsafe  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box eq_unsafe(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ne_unsafe  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box ne_unsafe(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    lt_unsafe  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box lt_unsafe(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    le_unsafe  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box le_unsafe(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ge_unsafe  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box ge_unsafe(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    gt_unsafe  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box gt_unsafe(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    abs  fun box abs()\n: A val  Returns   A val    ceil  fun box ceil()\n: A val  Returns   A val    floor  fun box floor()\n: A val  Returns   A val    round  fun box round()\n: A val  Returns   A val    trunc  fun box trunc()\n: A val  Returns   A val    finite  fun box finite()\n: Bool val  Returns   Bool  val    infinite  fun box infinite()\n: Bool val  Returns   Bool  val    nan  fun box nan()\n: Bool val  Returns   Bool  val    ldexp  fun box ldexp(\n  x: A val,\n  exponent: I32 val)\n: A val  Parameters   x: A val  exponent:  I32  val   Returns   A val    frexp  fun box frexp()\n: (A val , U32 val)  Returns   (A val ,  U32  val)    log  fun box log()\n: A val  Returns   A val    log2  fun box log2()\n: A val  Returns   A val    log10  fun box log10()\n: A val  Returns   A val    logb  fun box logb()\n: A val  Returns   A val    pow  fun box pow(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    powi  fun box powi(\n  y: I32 val)\n: A val  Parameters   y:  I32  val   Returns   A val    sqrt  fun box sqrt()\n: A val  Returns   A val    sqrt_unsafe  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: A val  Returns   A val    cbrt  fun box cbrt()\n: A val  Returns   A val    exp  fun box exp()\n: A val  Returns   A val    exp2  fun box exp2()\n: A val  Returns   A val    cos  fun box cos()\n: A val  Returns   A val    sin  fun box sin()\n: A val  Returns   A val    tan  fun box tan()\n: A val  Returns   A val    cosh  fun box cosh()\n: A val  Returns   A val    sinh  fun box sinh()\n: A val  Returns   A val    tanh  fun box tanh()\n: A val  Returns   A val    acos  fun box acos()\n: A val  Returns   A val    asin  fun box asin()\n: A val  Returns   A val    atan  fun box atan()\n: A val  Returns   A val    atan2  fun box atan2(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    acosh  fun box acosh()\n: A val  Returns   A val    asinh  fun box asinh()\n: A val  Returns   A val    atanh  fun box atanh()\n: A val  Returns   A val    copysign  fun box copysign(\n  sign: A val)\n: A val  Parameters   sign: A val   Returns   A val    string  fun box string()\n: String iso^  Returns   String  iso^    add  fun box add(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    sub  fun box sub(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    mul  fun box mul(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    div  fun box div(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    divmod  fun box divmod(\n  y: A val)\n: (A val , A val)  Parameters   y: A val   Returns   (A val , A val)    mod  fun box mod(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    neg  fun box neg()\n: A val  Returns   A val    eq  fun box eq(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ne  fun box ne(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    lt  fun box lt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    le  fun box le(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    ge  fun box ge(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    gt  fun box gt(\n  y: A val)\n: Bool val  Parameters   y: A val   Returns   Bool  val    min  fun box min(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    max  fun box max(\n  y: A val)\n: A val  Parameters   y: A val   Returns   A val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: A val)\n: (Less val | Equal val | Greater val)  Parameters   that: A val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-FloatingPoint/#private-functions",
            "text": "_value  fun box _value()\n: A val  Returns   A val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-Number/",
            "text": "Number\n\n\ntype Number is\n  (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \n    \nI64\n val | \nI128\n val | \nILong\n val | \n    \nISize\n val | \nU8\n val | \nU16\n val | \n    \nU32\n val | \nU64\n val | \nU128\n val | \n    \nULong\n val | \nUSize\n val | \nF32\n val | \n    \nF64\n val)",
            "title": "type Number"
        },
        {
            "location": "/builtin-Number/#number",
            "text": "type Number is\n  (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)  Type Alias For   ( I8  val |  I16  val |  I32  val | \n     I64  val |  I128  val |  ILong  val | \n     ISize  val |  U8  val |  U16  val | \n     U32  val |  U64  val |  U128  val | \n     ULong  val |  USize  val |  F32  val | \n     F64  val)",
            "title": "Number"
        },
        {
            "location": "/builtin-Int/",
            "text": "Int\n\n\ntype Int is\n  (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \n    \nI64\n val | \nI128\n val | \nILong\n val | \n    \nISize\n val | \nU8\n val | \nU16\n val | \n    \nU32\n val | \nU64\n val | \nU128\n val | \n    \nULong\n val | \nUSize\n val)",
            "title": "type Int"
        },
        {
            "location": "/builtin-Int/#int",
            "text": "type Int is\n  (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val)  Type Alias For   ( I8  val |  I16  val |  I32  val | \n     I64  val |  I128  val |  ILong  val | \n     ISize  val |  U8  val |  U16  val | \n     U32  val |  U64  val |  U128  val | \n     ULong  val |  USize  val)",
            "title": "Int"
        },
        {
            "location": "/builtin-Array/",
            "text": "Array[A: A]\n\n\nContiguous, resizable memory to store elements of type A.\n\n\nclass ref Array[A: A] is\n  Seq[A] ref\n\n\n\n\nImplements\n\n\n\n\nSeq\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew ref create(\n  len: USize val = 0)\n: Array[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\ninit\n\n\nCreate an array of len elements, all initialised to the given value.\n\n\nnew ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^\n\n\n\n\nParameters\n\n\n\n\nfrom: A^\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\nfrom_cpointer\n\n\nCreate an array from a C-style pointer and length. The contents are not\ncopied.\n\n\nnew ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = 0)\n: Array[A] ref^\n\n\n\n\nParameters\n\n\n\n\nptr: \nPointer\n[A] ref\n\n\nlen: \nUSize\n val\n\n\nalloc: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\ncpointer\n\n\nReturn the underlying C-style pointer.\n\n\nfun box cpointer(\n  offset: USize val = 0)\n: Pointer[A] tag\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] tag\n\n\n\n\n\n\nsize\n\n\nThe number of elements in the array.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nThe available space in the array.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreserve\n\n\nReserve space for len elements, including whatever elements are already in\nthe array. Array space grows geometrically.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncompact\n\n\nTry to remove unused space, making it available for garbage collection. The\nrequest may be ignored.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nundefined[optional B: (A & \nReal\n[B val] val & (\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val))\\]\n\n\n\nResize to len elements, populating previously empty elements with random\nmemory. This is only allowed for an array of numbers.\n\n\nfun ref undefined[optional B: (A & Real[B val] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\napply\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\n\nChange the i-th element, raising an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\ninsert\n\n\nInsert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.\n\n\nfun ref insert(\n  i: USize val,\n  value: A)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\ndelete\n\n\nDelete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.\n\n\nfun ref delete(\n  i: USize val)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\ntruncate\n\n\nTruncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim_in_place\n\n\nTrim the array to a portion of itself, covering \nfrom\n until \nto\n.\nUnlike slice, the operation does not allocate a new array nor copy elements.\n\n\nfun ref trim_in_place(\n  from: USize val = 0,\n  to: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = 0\n\n\nto: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim\n\n\nReturn a shared portion of this array, covering \nfrom\n until \nto\n.\nBoth the original and the new array are immutable, as they share memory.\nThe operation does not allocate a new array pointer nor copy elements.\n\n\nfun val trim(\n  from: USize val = 0,\n  to: USize val = call)\n: Array[A] val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = 0\n\n\nto: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nArray\n[A] val\n\n\n\n\n\n\ncopy_to\n\n\nCopy len elements from this(src_idx) to dst(dst_idx).\n\n\nfun box copy_to(\n  dst: Array[this->A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndst: \nArray\n[this->A!] ref\n\n\nsrc_idx: \nUSize\n val\n\n\ndst_idx: \nUSize\n val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nRemove n elements from the array, beginning at index i.\n\n\nfun ref remove(\n  i: USize val,\n  n: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\n\nRemove all elements from the array.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nAdd an element to the end of the array.\n\n\nfun ref push(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\n\nRemove an element from the end of the array.\nThe removed element is returned.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\n\nAdd an element to the beginning of the array.\n\n\nfun ref unshift(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\n\nRemove an element from the beginning of the array.\nThe removed element is returned.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = 0\n\n\nlen: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\n\nAdd len iterated elements to the end of the array, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = 0\n\n\nlen: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfind\n\n\nFind the `nth` appearance of `value` from the beginning of the array,\nstarting at `offset` and examining higher indices, and using the supplied\n`predicate` for comparisons. Returns the index of the value, or raise an\nerror if the value isn't present.\n\nBy default, the search starts at the first element of the array, returns\nthe first instance of `value` found, and uses object identity for\ncomparison.\n\n\n\nfun box find(\n  value: A!,\n  offset: USize val = 0,\n  nth: USize val = 0,\n  predicate: {(box->A!, box->A!): Bool}[A] val = lambda)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nvalue: A!\n\n\noffset: \nUSize\n val = 0\n\n\nnth: \nUSize\n val = 0\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = lambda\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\ncontains\n\n\nReturns true if the array contains \nvalue\n, false otherwise.\n\n\nfun box contains(\n  value: A!,\n  predicate: {(box->A!, box->A!): Bool}[A] val = lambda)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: A!\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = lambda\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrfind\n\n\nFind the `nth` appearance of `value` from the end of the array, starting at\n`offset` and examining lower indices, and using the supplied `predicate` for\ncomparisons. Returns the index of the value, or raise an error if the value\nisn't present.\n\nBy default, the search starts at the last element of the array, returns the\nfirst instance of `value` found, and uses object identity for comparison.\n\n\n\nfun box rfind(\n  value: A!,\n  offset: USize val = call,\n  nth: USize val = 0,\n  predicate: {(box->A!, box->A!): Bool}[A] val = lambda)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nvalue: A!\n\n\noffset: \nUSize\n val = call\n\n\nnth: \nUSize\n val = 0\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = lambda\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nclone\n\n\nClone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box clone()\n: Array[this->A!] ref^\n\n\n\n\nReturns\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\nslice\n\n\nCreate a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box slice(\n  from: USize val = 0,\n  to: USize val = call,\n  step: USize val = 1)\n: Array[this->A!] ref^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = 0\n\n\nto: \nUSize\n val = call\n\n\nstep: \nUSize\n val = 1\n\n\n\n\nReturns\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\npermute\n\n\nCreate a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this->A!] ref^ ?\n\n\n\n\nParameters\n\n\n\n\nindices: \nIterator\n[\nUSize\n val] ref\n\n\n\n\nReturns\n\n\n\n\nArray\n[this->A!] ref^ ?\n\n\n\n\n\n\nreverse\n\n\nCreate a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun box reverse()\n: Array[this->A!] ref^\n\n\n\n\nReturns\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\nreverse_in_place\n\n\nReverse the array in place.\n\n\nfun ref reverse_in_place()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nkeys\n\n\nReturn an iterator over the indices in the array.\n\n\nfun box keys()\n: ArrayKeys[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nArrayKeys\n[A, this->\nArray\n[A] ref] ref^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the values in the array.\n\n\nfun box values()\n: ArrayValues[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nArrayValues\n[A, this->\nArray\n[A] ref] ref^\n\n\n\n\n\n\npairs\n\n\nReturn an iterator over the (index, value) pairs in the array.\n\n\nfun box pairs()\n: ArrayPairs[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nArrayPairs\n[A, this->\nArray\n[A] ref] ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_copy_to\n\n\nCopy copy_len elements from this to that at specified offsets.\n\n\nfun box _copy_to(\n  ptr: Pointer[this->A!] ref,\n  copy_len: USize val,\n  from_offset: USize val = 0,\n  to_offset: USize val = 0)\n: None val\n\n\n\n\nParameters\n\n\n\n\nptr: \nPointer\n[this->A!] ref\n\n\ncopy_len: \nUSize\n val\n\n\nfrom_offset: \nUSize\n val = 0\n\n\nto_offset: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "class Array"
        },
        {
            "location": "/builtin-Array/#array91a-a93",
            "text": "Contiguous, resizable memory to store elements of type A.  class ref Array[A: A] is\n  Seq[A] ref  Implements   Seq [A] ref",
            "title": "Array[A: A]"
        },
        {
            "location": "/builtin-Array/#constructors",
            "text": "create  Create an array with zero elements, but space for len elements.  new ref create(\n  len: USize val = 0)\n: Array[A] ref^  Parameters   len:  USize  val = 0   Returns   Array [A] ref^    init  Create an array of len elements, all initialised to the given value.  new ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^  Parameters   from: A^  len:  USize  val   Returns   Array [A] ref^    from_cpointer  Create an array from a C-style pointer and length. The contents are not\ncopied.  new ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = 0)\n: Array[A] ref^  Parameters   ptr:  Pointer [A] ref  len:  USize  val  alloc:  USize  val = 0   Returns   Array [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Array/#public-functions",
            "text": "cpointer  Return the underlying C-style pointer.  fun box cpointer(\n  offset: USize val = 0)\n: Pointer[A] tag  Parameters   offset:  USize  val = 0   Returns   Pointer [A] tag    size  The number of elements in the array.  fun box size()\n: USize val  Returns   USize  val    space  The available space in the array.  fun box space()\n: USize val  Returns   USize  val    reserve  Reserve space for len elements, including whatever elements are already in\nthe array. Array space grows geometrically.  fun ref reserve(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    compact  Try to remove unused space, making it available for garbage collection. The\nrequest may be ignored.  fun ref compact()\n: None val  Returns   None  val    undefined[optional B: (A &  Real [B val] val & ( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val))\\]  Resize to len elements, populating previously empty elements with random\nmemory. This is only allowed for an array of numbers.  fun ref undefined[optional B: (A & Real[B val] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    apply  Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: this->A ?  Parameters   i:  USize  val   Returns   this->A ?    update  Change the i-th element, raising an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?  Parameters   i:  USize  val  value: A   Returns   A^ ?    insert  Insert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.  fun ref insert(\n  i: USize val,\n  value: A)\n: None val ?  Parameters   i:  USize  val  value: A   Returns   None  val ?    delete  Delete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.  fun ref delete(\n  i: USize val)\n: A^ ?  Parameters   i:  USize  val   Returns   A^ ?    truncate  Truncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    trim_in_place  Trim the array to a portion of itself, covering  from  until  to .\nUnlike slice, the operation does not allocate a new array nor copy elements.  fun ref trim_in_place(\n  from: USize val = 0,\n  to: USize val = call)\n: None val  Parameters   from:  USize  val = 0  to:  USize  val = call   Returns   None  val    trim  Return a shared portion of this array, covering  from  until  to .\nBoth the original and the new array are immutable, as they share memory.\nThe operation does not allocate a new array pointer nor copy elements.  fun val trim(\n  from: USize val = 0,\n  to: USize val = call)\n: Array[A] val  Parameters   from:  USize  val = 0  to:  USize  val = call   Returns   Array [A] val    copy_to  Copy len elements from this(src_idx) to dst(dst_idx).  fun box copy_to(\n  dst: Array[this->A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val  Parameters   dst:  Array [this->A!] ref  src_idx:  USize  val  dst_idx:  USize  val  len:  USize  val   Returns   None  val    remove  Remove n elements from the array, beginning at index i.  fun ref remove(\n  i: USize val,\n  n: USize val)\n: None val  Parameters   i:  USize  val  n:  USize  val   Returns   None  val    clear  Remove all elements from the array.  fun ref clear()\n: None val  Returns   None  val    push  Add an element to the end of the array.  fun ref push(\n  value: A)\n: None val  Parameters   value: A   Returns   None  val    pop  Remove an element from the end of the array.\nThe removed element is returned.  fun ref pop()\n: A^ ?  Returns   A^ ?    unshift  Add an element to the beginning of the array.  fun ref unshift(\n  value: A)\n: None val  Parameters   value: A   Returns   None  val    shift  Remove an element from the beginning of the array.\nThe removed element is returned.  fun ref shift()\n: A^ ?  Returns   A^ ?    append  Append the elements from a sequence, starting from the given offset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val  Parameters   seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = 0  len:  USize  val = call   Returns   None  val    concat  Add len iterated elements to the end of the array, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val  Parameters   iter:  Iterator [A^] ref  offset:  USize  val = 0  len:  USize  val = call   Returns   None  val    find  Find the `nth` appearance of `value` from the beginning of the array,\nstarting at `offset` and examining higher indices, and using the supplied\n`predicate` for comparisons. Returns the index of the value, or raise an\nerror if the value isn't present.\n\nBy default, the search starts at the first element of the array, returns\nthe first instance of `value` found, and uses object identity for\ncomparison.  fun box find(\n  value: A!,\n  offset: USize val = 0,\n  nth: USize val = 0,\n  predicate: {(box->A!, box->A!): Bool}[A] val = lambda)\n: USize val ?  Parameters   value: A!  offset:  USize  val = 0  nth:  USize  val = 0  predicate: {(box->A!, box->A!): Bool}[A] val = lambda   Returns   USize  val ?    contains  Returns true if the array contains  value , false otherwise.  fun box contains(\n  value: A!,\n  predicate: {(box->A!, box->A!): Bool}[A] val = lambda)\n: Bool val  Parameters   value: A!  predicate: {(box->A!, box->A!): Bool}[A] val = lambda   Returns   Bool  val    rfind  Find the `nth` appearance of `value` from the end of the array, starting at\n`offset` and examining lower indices, and using the supplied `predicate` for\ncomparisons. Returns the index of the value, or raise an error if the value\nisn't present.\n\nBy default, the search starts at the last element of the array, returns the\nfirst instance of `value` found, and uses object identity for comparison.  fun box rfind(\n  value: A!,\n  offset: USize val = call,\n  nth: USize val = 0,\n  predicate: {(box->A!, box->A!): Bool}[A] val = lambda)\n: USize val ?  Parameters   value: A!  offset:  USize  val = call  nth:  USize  val = 0  predicate: {(box->A!, box->A!): Bool}[A] val = lambda   Returns   USize  val ?    clone  Clone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.  fun box clone()\n: Array[this->A!] ref^  Returns   Array [this->A!] ref^    slice  Create a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.  fun box slice(\n  from: USize val = 0,\n  to: USize val = call,\n  step: USize val = 1)\n: Array[this->A!] ref^  Parameters   from:  USize  val = 0  to:  USize  val = call  step:  USize  val = 1   Returns   Array [this->A!] ref^    permute  Create a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.  fun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this->A!] ref^ ?  Parameters   indices:  Iterator [ USize  val] ref   Returns   Array [this->A!] ref^ ?    reverse  Create a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.  fun box reverse()\n: Array[this->A!] ref^  Returns   Array [this->A!] ref^    reverse_in_place  Reverse the array in place.  fun ref reverse_in_place()\n: None val  Returns   None  val    keys  Return an iterator over the indices in the array.  fun box keys()\n: ArrayKeys[A, this->Array[A] ref] ref^  Returns   ArrayKeys [A, this-> Array [A] ref] ref^    values  Return an iterator over the values in the array.  fun box values()\n: ArrayValues[A, this->Array[A] ref] ref^  Returns   ArrayValues [A, this-> Array [A] ref] ref^    pairs  Return an iterator over the (index, value) pairs in the array.  fun box pairs()\n: ArrayPairs[A, this->Array[A] ref] ref^  Returns   ArrayPairs [A, this-> Array [A] ref] ref^",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Array/#private-functions",
            "text": "_copy_to  Copy copy_len elements from this to that at specified offsets.  fun box _copy_to(\n  ptr: Pointer[this->A!] ref,\n  copy_len: USize val,\n  from_offset: USize val = 0,\n  to_offset: USize val = 0)\n: None val  Parameters   ptr:  Pointer [this->A!] ref  copy_len:  USize  val  from_offset:  USize  val = 0  to_offset:  USize  val = 0   Returns   None  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-ArrayKeys/",
            "text": "ArrayKeys[A: A, B: \nArray\n[A] #read]\n\n\nclass ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[\nUSize\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  array: B #read)\n: ArrayKeys[A, B #read] ref^\n\n\n\n\nParameters\n\n\n\n\narray: B #read\n\n\n\n\nReturns\n\n\n\n\nArrayKeys\n[A, B #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val",
            "title": "class ArrayKeys"
        },
        {
            "location": "/builtin-ArrayKeys/#arraykeys91a-a-b-array91a93-read93",
            "text": "class ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref  Implements   Iterator [ USize  val] ref",
            "title": "ArrayKeys[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayKeys/#constructors",
            "text": "create  new ref create(\n  array: B #read)\n: ArrayKeys[A, B #read] ref^  Parameters   array: B #read   Returns   ArrayKeys [A, B #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayKeys/#public-functions",
            "text": "has_next  fun box has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: USize val  Returns   USize  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ArrayValues/",
            "text": "ArrayValues[A: A, B: \nArray\n[A] #read]\n\n\nclass ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B #read->A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[B #read->A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  array: B #read)\n: ArrayValues[A, B #read] ref^\n\n\n\n\nParameters\n\n\n\n\narray: B #read\n\n\n\n\nReturns\n\n\n\n\nArrayValues\n[A, B #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: B #read->A ?\n\n\n\n\nReturns\n\n\n\n\nB #read->A ?\n\n\n\n\n\n\nrewind\n\n\nfun ref rewind()\n: ArrayValues[A, B #read] ref\n\n\n\n\nReturns\n\n\n\n\nArrayValues\n[A, B #read] ref",
            "title": "class ArrayValues"
        },
        {
            "location": "/builtin-ArrayValues/#arrayvalues91a-a-b-array91a93-read93",
            "text": "class ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B #read->A] ref  Implements   Iterator [B #read->A] ref",
            "title": "ArrayValues[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayValues/#constructors",
            "text": "create  new ref create(\n  array: B #read)\n: ArrayValues[A, B #read] ref^  Parameters   array: B #read   Returns   ArrayValues [A, B #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayValues/#public-functions",
            "text": "has_next  fun box has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: B #read->A ?  Returns   B #read->A ?    rewind  fun ref rewind()\n: ArrayValues[A, B #read] ref  Returns   ArrayValues [A, B #read] ref",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ArrayPairs/",
            "text": "ArrayPairs[A: A, B: \nArray\n[A] #read]\n\n\nclass ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B #read->A)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[(\nUSize\n val , B #read->A)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  array: B #read)\n: ArrayPairs[A, B #read] ref^\n\n\n\n\nParameters\n\n\n\n\narray: B #read\n\n\n\n\nReturns\n\n\n\n\nArrayPairs\n[A, B #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: (USize val , B #read->A) ?\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , B #read->A) ?",
            "title": "class ArrayPairs"
        },
        {
            "location": "/builtin-ArrayPairs/#arraypairs91a-a-b-array91a93-read93",
            "text": "class ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B #read->A)] ref  Implements   Iterator [( USize  val , B #read->A)] ref",
            "title": "ArrayPairs[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayPairs/#constructors",
            "text": "create  new ref create(\n  array: B #read)\n: ArrayPairs[A, B #read] ref^  Parameters   array: B #read   Returns   ArrayPairs [A, B #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayPairs/#public-functions",
            "text": "has_next  fun box has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: (USize val , B #read->A) ?  Returns   ( USize  val , B #read->A) ?",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Env/",
            "text": "Env\n\n\nAn environment holds the command line and other values injected into the\nprogram by default by the runtime.\n\n\nclass val Env\n\n\n\n\nConstructors\n\n\n_create\n\n\nBuilds an environment from the command line. This is done before the Main\nactor is created.\n\n\nnew ref _create(\n  argc: U32 val,\n  argv: Pointer[Pointer[U8 val] ref] val,\n  envp: Pointer[Pointer[U8 val] ref] val)\n: Env ref^\n\n\n\n\nParameters\n\n\n\n\nargc: \nU32\n val\n\n\nargv: \nPointer\n[\nPointer\n[\nU8\n val] ref] val\n\n\nenvp: \nPointer\n[\nPointer\n[\nU8\n val] ref] val\n\n\n\n\nReturns\n\n\n\n\nEnv\n ref^\n\n\n\n\n\n\ncreate\n\n\nBuild an artificial environment. A root capability may be supplied.\n\n\nnew ref create(\n  root': (AmbientAuth val | None val),\n  input': Stdin tag,\n  out': StdStream tag,\n  err': StdStream tag,\n  args': Array[String val] val,\n  vars': (Array[String val] val | None val))\n: Env ref^\n\n\n\n\nParameters\n\n\n\n\nroot': (\nAmbientAuth\n val | \nNone\n val)\n\n\ninput': \nStdin\n tag\n\n\nout': \nStdStream\n tag\n\n\nerr': \nStdStream\n tag\n\n\nargs': \nArray\n[\nString\n val] val\n\n\nvars': (\nArray\n[\nString\n val] val | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nEnv\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet root: (\nAmbientAuth\n val | \nNone\n val)\n\n\n\n\n\n\n\n\nlet input: \nStdin\n tag\n\n\n\n\n\n\n\n\nlet out: \nStdStream\n tag\n\n\n\n\n\n\n\n\nlet err: \nStdStream\n tag\n\n\n\n\n\n\n\n\nlet args: \nArray\n[\nString\n val] val\n\n\n\n\n\n\nPublic Functions\n\n\nvars\n\n\nReturn the environment variables as an array of strings of the form\n\"key=value\".\n\n\nfun box vars()\n: Array[String val] val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] val\n\n\n\n\n\n\nexitcode\n\n\nSets the application exit code. If this is called more than once, the last\nvalue set will be the exit code. The exit code defaults to 0.\n\n\nfun tag exitcode(\n  code: I32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ncode: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_count_strings\n\n\nfun tag _count_strings(\n  data: Pointer[Pointer[U8 val] ref] val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ndata: \nPointer\n[\nPointer\n[\nU8\n val] ref] val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_strings_from_pointers\n\n\nfun tag _strings_from_pointers(\n  data: Pointer[Pointer[U8 val] ref] val,\n  len: USize val)\n: Array[String val] iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nPointer\n[\nPointer\n[\nU8\n val] ref] val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^",
            "title": "class Env"
        },
        {
            "location": "/builtin-Env/#env",
            "text": "An environment holds the command line and other values injected into the\nprogram by default by the runtime.  class val Env",
            "title": "Env"
        },
        {
            "location": "/builtin-Env/#constructors",
            "text": "_create  Builds an environment from the command line. This is done before the Main\nactor is created.  new ref _create(\n  argc: U32 val,\n  argv: Pointer[Pointer[U8 val] ref] val,\n  envp: Pointer[Pointer[U8 val] ref] val)\n: Env ref^  Parameters   argc:  U32  val  argv:  Pointer [ Pointer [ U8  val] ref] val  envp:  Pointer [ Pointer [ U8  val] ref] val   Returns   Env  ref^    create  Build an artificial environment. A root capability may be supplied.  new ref create(\n  root': (AmbientAuth val | None val),\n  input': Stdin tag,\n  out': StdStream tag,\n  err': StdStream tag,\n  args': Array[String val] val,\n  vars': (Array[String val] val | None val))\n: Env ref^  Parameters   root': ( AmbientAuth  val |  None  val)  input':  Stdin  tag  out':  StdStream  tag  err':  StdStream  tag  args':  Array [ String  val] val  vars': ( Array [ String  val] val |  None  val)   Returns   Env  ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Env/#public-fields",
            "text": "let root: ( AmbientAuth  val |  None  val)     let input:  Stdin  tag     let out:  StdStream  tag     let err:  StdStream  tag     let args:  Array [ String  val] val",
            "title": "Public fields"
        },
        {
            "location": "/builtin-Env/#public-functions",
            "text": "vars  Return the environment variables as an array of strings of the form\n\"key=value\".  fun box vars()\n: Array[String val] val  Returns   Array [ String  val] val    exitcode  Sets the application exit code. If this is called more than once, the last\nvalue set will be the exit code. The exit code defaults to 0.  fun tag exitcode(\n  code: I32 val)\n: None val  Parameters   code:  I32  val   Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Env/#private-functions",
            "text": "_count_strings  fun tag _count_strings(\n  data: Pointer[Pointer[U8 val] ref] val)\n: USize val  Parameters   data:  Pointer [ Pointer [ U8  val] ref] val   Returns   USize  val    _strings_from_pointers  fun tag _strings_from_pointers(\n  data: Pointer[Pointer[U8 val] ref] val,\n  len: USize val)\n: Array[String val] iso^  Parameters   data:  Pointer [ Pointer [ U8  val] ref] val  len:  USize  val   Returns   Array [ String  val] iso^",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-AmbientAuth/",
            "text": "AmbientAuth\n\n\nThis type represents the root capability. When a Pony program starts, the\n  Env passed to the Main actor contains an instance of the root capability.\n\n\nAmbient access to the root capability is denied outside of the builtin\n  package. Inside the builtin package, only Env creates a Root.\n\n\nThe root capability can be used by any package that wants to establish a\n  principle of least authority. A typical usage is to have a parameter on a\n  constructor for some resource that expects a limiting capability specific to\n  the package, but will also accept the root capability as representing\n  unlimited access.\n\n\nprimitive val AmbientAuth\n\n\n\n\nConstructors\n\n\n_create\n\n\nnew val _create()\n: AmbientAuth val^\n\n\n\n\nReturns\n\n\n\n\nAmbientAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: AmbientAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: AmbientAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive AmbientAuth"
        },
        {
            "location": "/builtin-AmbientAuth/#ambientauth",
            "text": "This type represents the root capability. When a Pony program starts, the\n  Env passed to the Main actor contains an instance of the root capability.  Ambient access to the root capability is denied outside of the builtin\n  package. Inside the builtin package, only Env creates a Root.  The root capability can be used by any package that wants to establish a\n  principle of least authority. A typical usage is to have a parameter on a\n  constructor for some resource that expects a limiting capability specific to\n  the package, but will also accept the root capability as representing\n  unlimited access.  primitive val AmbientAuth",
            "title": "AmbientAuth"
        },
        {
            "location": "/builtin-AmbientAuth/#constructors",
            "text": "_create  new val _create()\n: AmbientAuth val^  Returns   AmbientAuth  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AmbientAuth/#public-functions",
            "text": "eq  fun box eq(\n  that: AmbientAuth val)\n: Bool val  Parameters   that:  AmbientAuth  val   Returns   Bool  val    ne  fun box ne(\n  that: AmbientAuth val)\n: Bool val  Parameters   that:  AmbientAuth  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ByteSeq/",
            "text": "ByteSeq\n\n\ntype ByteSeq is\n  (String val | Array[U8 val] val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)",
            "title": "type ByteSeq"
        },
        {
            "location": "/builtin-ByteSeq/#byteseq",
            "text": "type ByteSeq is\n  (String val | Array[U8 val] val)  Type Alias For   ( String  val |  Array [ U8  val] val)",
            "title": "ByteSeq"
        },
        {
            "location": "/builtin-ByteSeqIter/",
            "text": "ByteSeqIter\n\n\nAccept an iterable collection of String or Array[U8] val.\n\n\ninterface val ByteSeqIter\n\n\n\n\nPublic Functions\n\n\nvalues\n\n\nfun box values()\n: Iterator[(this->String box | this->Array[U8 val] box)] ref\n\n\n\n\nReturns\n\n\n\n\nIterator\n[(this->\nString\n box | this->\nArray\n[\nU8\n val] box)] ref",
            "title": "interface ByteSeqIter"
        },
        {
            "location": "/builtin-ByteSeqIter/#byteseqiter",
            "text": "Accept an iterable collection of String or Array[U8] val.  interface val ByteSeqIter",
            "title": "ByteSeqIter"
        },
        {
            "location": "/builtin-ByteSeqIter/#public-functions",
            "text": "values  fun box values()\n: Iterator[(this->String box | this->Array[U8 val] box)] ref  Returns   Iterator [(this-> String  box | this-> Array [ U8  val] box)] ref",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-OutStream/",
            "text": "OutStream\n\n\nAsnychronous access to some output stream.\n\n\ninterface tag OutStream\n\n\n\n\nPublic Behaviours\n\n\nprint\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val",
            "title": "interface OutStream"
        },
        {
            "location": "/builtin-OutStream/#outstream",
            "text": "Asnychronous access to some output stream.  interface tag OutStream",
            "title": "OutStream"
        },
        {
            "location": "/builtin-OutStream/#public-behaviours",
            "text": "print  Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))  Parameters   data: ( String  val |  Array [ U8  val] val)    write  Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))  Parameters   data: ( String  val |  Array [ U8  val] val)    printv  Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)  Parameters   data:  ByteSeqIter  val    writev  Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)  Parameters   data:  ByteSeqIter  val",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-StdStream/",
            "text": "StdStream\n\n\nAsynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.\n\n\nactor tag StdStream\n\n\n\n\nConstructors\n\n\n_out\n\n\nCreate an async stream for stdout.\n\n\nnew tag _out()\n: StdStream tag^\n\n\n\n\nReturns\n\n\n\n\nStdStream\n tag^\n\n\n\n\n\n\n_err\n\n\nCreate an async stream for stderr.\n\n\nnew tag _err()\n: StdStream tag^\n\n\n\n\nReturns\n\n\n\n\nStdStream\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nprint\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_write\n\n\nWrite the bytes without explicitly flushing.\n\n\nfun ref _write(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_print\n\n\nWrite the bytes and a newline without explicitly flushing.\n\n\nfun ref _print(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "actor StdStream"
        },
        {
            "location": "/builtin-StdStream/#stdstream",
            "text": "Asynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.  actor tag StdStream",
            "title": "StdStream"
        },
        {
            "location": "/builtin-StdStream/#constructors",
            "text": "_out  Create an async stream for stdout.  new tag _out()\n: StdStream tag^  Returns   StdStream  tag^    _err  Create an async stream for stderr.  new tag _err()\n: StdStream tag^  Returns   StdStream  tag^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StdStream/#public-behaviours",
            "text": "print  Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))  Parameters   data: ( String  val |  Array [ U8  val] val)    write  Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))  Parameters   data: ( String  val |  Array [ U8  val] val)    printv  Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)  Parameters   data:  ByteSeqIter  val    writev  Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)  Parameters   data:  ByteSeqIter  val",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-StdStream/#private-functions",
            "text": "_write  Write the bytes without explicitly flushing.  fun ref _write(\n  data: (String val | Array[U8 val] val))\n: None val  Parameters   data: ( String  val |  Array [ U8  val] val)   Returns   None  val    _print  Write the bytes and a newline without explicitly flushing.  fun ref _print(\n  data: (String val | Array[U8 val] val))\n: None val  Parameters   data: ( String  val |  Array [ U8  val] val)   Returns   None  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-StdinNotify/",
            "text": "StdinNotify\n\n\nNotification for data arriving via stdin.\n\n\ninterface ref StdinNotify\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCalled when data is available on stdin.\n\n\nfun ref apply(\n  data: Array[U8 val] iso)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose\n\n\nCalled when no more data will arrive on stdin.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "interface StdinNotify"
        },
        {
            "location": "/builtin-StdinNotify/#stdinnotify",
            "text": "Notification for data arriving via stdin.  interface ref StdinNotify",
            "title": "StdinNotify"
        },
        {
            "location": "/builtin-StdinNotify/#public-functions",
            "text": "apply  Called when data is available on stdin.  fun ref apply(\n  data: Array[U8 val] iso)\n: None val  Parameters   data:  Array [ U8  val] iso   Returns   None  val    dispose  Called when no more data will arrive on stdin.  fun ref dispose()\n: None val  Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-DisposableActor/",
            "text": "DisposableActor\n\n\nAn interface used to asynchronously dispose of an actor.\n\n\ninterface tag DisposableActor\n\n\n\n\nPublic Behaviours\n\n\ndispose\n\n\nbe dispose()",
            "title": "interface DisposableActor"
        },
        {
            "location": "/builtin-DisposableActor/#disposableactor",
            "text": "An interface used to asynchronously dispose of an actor.  interface tag DisposableActor",
            "title": "DisposableActor"
        },
        {
            "location": "/builtin-DisposableActor/#public-behaviours",
            "text": "dispose  be dispose()",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-Stdin/",
            "text": "Stdin\n\n\nAsynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.\n\n\nactor tag Stdin\n\n\n\n\nConstructors\n\n\n_create\n\n\nnew tag _create(\n  use_event: Bool val)\n: Stdin tag^\n\n\n\n\nParameters\n\n\n\n\nuse_event: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nStdin\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nSet the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.\n\n\nbe apply(\n  notify: (StdinNotify iso | None val),\n  chunk_size: USize val = 32)\n\n\n\n\nParameters\n\n\n\n\nnotify: (\nStdinNotify\n iso | \nNone\n val)\n\n\nchunk_size: \nUSize\n val = 32\n\n\n\n\n\n\ndispose\n\n\nClear the notifier in order to shut down input.\n\n\nbe dispose()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_loop_read\n\n\nIf we are able to read from stdin, schedule another read.\n\n\nbe _loop_read()\n\n\n\n\n\n\n_event_notify\n\n\nWhen the event fires, read from stdin.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\n_read_again\n\n\nResume reading.\n\n\nbe _read_again()\n\n\n\n\n\n\nPrivate Functions\n\n\n_set_notify\n\n\nSet the notifier.\n\n\nfun ref _set_notify(\n  notify: (StdinNotify iso | None val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nnotify: (\nStdinNotify\n iso | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_read\n\n\nRead a chunk of data from stdin. Read a maximum of _chunk_size bytes, send\nourself a resume message and stop reading to avoid starving other actors.\n\n\nfun ref _read()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_close_event\n\n\nClose the event.\n\n\nfun ref _close_event()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "actor Stdin"
        },
        {
            "location": "/builtin-Stdin/#stdin",
            "text": "Asynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.  actor tag Stdin",
            "title": "Stdin"
        },
        {
            "location": "/builtin-Stdin/#constructors",
            "text": "_create  new tag _create(\n  use_event: Bool val)\n: Stdin tag^  Parameters   use_event:  Bool  val   Returns   Stdin  tag^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Stdin/#public-behaviours",
            "text": "apply  Set the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.  be apply(\n  notify: (StdinNotify iso | None val),\n  chunk_size: USize val = 32)  Parameters   notify: ( StdinNotify  iso |  None  val)  chunk_size:  USize  val = 32    dispose  Clear the notifier in order to shut down input.  be dispose()",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-Stdin/#private-behaviours",
            "text": "_loop_read  If we are able to read from stdin, schedule another read.  be _loop_read()   _event_notify  When the event fires, read from stdin.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)  Parameters   event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val    _read_again  Resume reading.  be _read_again()",
            "title": "Private Behaviours"
        },
        {
            "location": "/builtin-Stdin/#private-functions",
            "text": "_set_notify  Set the notifier.  fun ref _set_notify(\n  notify: (StdinNotify iso | None val))\n: None val  Parameters   notify: ( StdinNotify  iso |  None  val)   Returns   None  val    _read  Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send\nourself a resume message and stop reading to avoid starving other actors.  fun ref _read()\n: Bool val  Returns   Bool  val    _close_event  Close the event.  fun ref _close_event()\n: None val  Returns   None  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-Any/",
            "text": "Any\n\n\ninterface tag Any",
            "title": "interface Any"
        },
        {
            "location": "/builtin-Any/#any",
            "text": "interface tag Any",
            "title": "Any"
        },
        {
            "location": "/builtin-Bool/",
            "text": "Bool\n\n\nprimitive val Bool is\n  Stringable box\n\n\n\n\nImplements\n\n\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: Bool val)\n: Bool val^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^",
            "title": "primitive Bool"
        },
        {
            "location": "/builtin-Bool/#bool",
            "text": "primitive val Bool is\n  Stringable box  Implements   Stringable  box",
            "title": "Bool"
        },
        {
            "location": "/builtin-Bool/#constructors",
            "text": "create  new val create(\n  from: Bool val)\n: Bool val^  Parameters   from:  Bool  val   Returns   Bool  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Bool/#public-functions",
            "text": "eq  fun box eq(\n  y: Bool val)\n: Bool val  Parameters   y:  Bool  val   Returns   Bool  val    ne  fun box ne(\n  y: Bool val)\n: Bool val  Parameters   y:  Bool  val   Returns   Bool  val    op_and  fun box op_and(\n  y: Bool val)\n: Bool val  Parameters   y:  Bool  val   Returns   Bool  val    op_or  fun box op_or(\n  y: Bool val)\n: Bool val  Parameters   y:  Bool  val   Returns   Bool  val    op_xor  fun box op_xor(\n  y: Bool val)\n: Bool val  Parameters   y:  Bool  val   Returns   Bool  val    op_not  fun box op_not()\n: Bool val  Returns   Bool  val    string  fun box string()\n: String iso^  Returns   String  iso^",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U8/",
            "text": "U8\n\n\nprimitive val U8 is\n  _UnsignedInteger[U8 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU8\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U8 val)\n: U8 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]\n\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: U8 val^\n\n\n\n\nParameters\n\n\n\n\na: B val\n\n\n\n\nReturns\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U8 val^\n\n\n\n\nReturns\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U8 val^\n\n\n\n\nReturns\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nU8\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U8 val)\n: (U8 val , U8 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nU8\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val",
            "title": "primitive U8"
        },
        {
            "location": "/builtin-U8/#u8",
            "text": "primitive val U8 is\n  _UnsignedInteger[U8 val] val  Implements   _UnsignedInteger [ U8  val] val",
            "title": "U8"
        },
        {
            "location": "/builtin-U8/#constructors",
            "text": "create  new val create(\n  value: U8 val)\n: U8 val^  Parameters   value:  U8  val   Returns   U8  val^    from[B: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[B val\\] val)\\]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B val] val)](\n  a: B val)\n: U8 val^  Parameters   a: B val   Returns   U8  val^    min_value  new val min_value()\n: U8 val^  Returns   U8  val^    max_value  new val max_value()\n: U8 val^  Returns   U8  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U8/#public-functions",
            "text": "next_pow2  fun box next_pow2()\n: U8 val  Returns   U8  val    abs  fun box abs()\n: U8 val  Returns   U8  val    bswap  fun box bswap()\n: U8 val  Returns   U8  val    popcount  fun box popcount()\n: U8 val  Returns   U8  val    clz  fun box clz()\n: U8 val  Returns   U8  val    ctz  fun box ctz()\n: U8 val  Returns   U8  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U8 val  Returns   U8  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U8 val  Returns   U8  val    bitwidth  fun box bitwidth()\n: U8 val  Returns   U8  val    min  fun box min(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    max  fun box max(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    addc  fun box addc(\n  y: U8 val)\n: (U8 val , Bool val)  Parameters   y:  U8  val   Returns   ( U8  val ,  Bool  val)    subc  fun box subc(\n  y: U8 val)\n: (U8 val , Bool val)  Parameters   y:  U8  val   Returns   ( U8  val ,  Bool  val)    mulc  fun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)  Parameters   y:  U8  val   Returns   ( U8  val ,  Bool  val)    shl  fun box shl(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    shr  fun box shr(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    shl_unsafe  fun box shl_unsafe(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    shr_unsafe  fun box shr_unsafe(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    rotl  fun box rotl(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    rotr  fun box rotr(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    sub_unsafe  fun box sub_unsafe(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    mul_unsafe  fun box mul_unsafe(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    div_unsafe  fun box div_unsafe(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    divmod_unsafe  fun box divmod_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)  Parameters   y:  U8  val   Returns   ( U8  val ,  U8  val)    mod_unsafe  fun box mod_unsafe(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    neg_unsafe  fun box neg_unsafe()\n: U8 val  Returns   U8  val    op_and  fun box op_and(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    op_or  fun box op_or(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    op_xor  fun box op_xor(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    op_not  fun box op_not()\n: U8 val  Returns   U8  val    add  fun box add(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    sub  fun box sub(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    mul  fun box mul(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    div  fun box div(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    divmod  fun box divmod(\n  y: U8 val)\n: (U8 val , U8 val)  Parameters   y:  U8  val   Returns   ( U8  val ,  U8  val)    mod  fun box mod(\n  y: U8 val)\n: U8 val  Parameters   y:  U8  val   Returns   U8  val    neg  fun box neg()\n: U8 val  Returns   U8  val    eq  fun box eq(\n  y: U8 val)\n: Bool val  Parameters   y:  U8  val   Returns   Bool  val    ne  fun box ne(\n  y: U8 val)\n: Bool val  Parameters   y:  U8  val   Returns   Bool  val    lt  fun box lt(\n  y: U8 val)\n: Bool val  Parameters   y:  U8  val   Returns   Bool  val    le  fun box le(\n  y: U8 val)\n: Bool val  Parameters   y:  U8  val   Returns   Bool  val    ge  fun box ge(\n  y: U8 val)\n: Bool val  Parameters   y:  U8  val   Returns   Bool  val    gt  fun box gt(\n  y: U8 val)\n: Bool val  Parameters   y:  U8  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  U8  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U8/#private-functions",
            "text": "_value  fun box _value()\n: U8 val  Returns   U8  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-U16/",
            "text": "U16\n\n\nprimitive val U16 is\n  _UnsignedInteger[U16 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU16\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U16 val)\n: U16 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: U16 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U16 val^\n\n\n\n\nReturns\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U16 val^\n\n\n\n\nReturns\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nU16\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U16 val)\n: (U16 val , U16 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nU16\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val",
            "title": "primitive U16"
        },
        {
            "location": "/builtin-U16/#u16",
            "text": "primitive val U16 is\n  _UnsignedInteger[U16 val] val  Implements   _UnsignedInteger [ U16  val] val",
            "title": "U16"
        },
        {
            "location": "/builtin-U16/#constructors",
            "text": "create  new val create(\n  value: U16 val)\n: U16 val^  Parameters   value:  U16  val   Returns   U16  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: U16 val^  Parameters   a: A val   Returns   U16  val^    min_value  new val min_value()\n: U16 val^  Returns   U16  val^    max_value  new val max_value()\n: U16 val^  Returns   U16  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U16/#public-functions",
            "text": "next_pow2  fun box next_pow2()\n: U16 val  Returns   U16  val    abs  fun box abs()\n: U16 val  Returns   U16  val    bswap  fun box bswap()\n: U16 val  Returns   U16  val    popcount  fun box popcount()\n: U16 val  Returns   U16  val    clz  fun box clz()\n: U16 val  Returns   U16  val    ctz  fun box ctz()\n: U16 val  Returns   U16  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U16 val  Returns   U16  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U16 val  Returns   U16  val    bitwidth  fun box bitwidth()\n: U16 val  Returns   U16  val    min  fun box min(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    max  fun box max(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    addc  fun box addc(\n  y: U16 val)\n: (U16 val , Bool val)  Parameters   y:  U16  val   Returns   ( U16  val ,  Bool  val)    subc  fun box subc(\n  y: U16 val)\n: (U16 val , Bool val)  Parameters   y:  U16  val   Returns   ( U16  val ,  Bool  val)    mulc  fun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)  Parameters   y:  U16  val   Returns   ( U16  val ,  Bool  val)    shl  fun box shl(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    shr  fun box shr(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    shl_unsafe  fun box shl_unsafe(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    shr_unsafe  fun box shr_unsafe(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    rotl  fun box rotl(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    rotr  fun box rotr(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    sub_unsafe  fun box sub_unsafe(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    mul_unsafe  fun box mul_unsafe(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    div_unsafe  fun box div_unsafe(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    divmod_unsafe  fun box divmod_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)  Parameters   y:  U16  val   Returns   ( U16  val ,  U16  val)    mod_unsafe  fun box mod_unsafe(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    neg_unsafe  fun box neg_unsafe()\n: U16 val  Returns   U16  val    op_and  fun box op_and(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    op_or  fun box op_or(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    op_xor  fun box op_xor(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    op_not  fun box op_not()\n: U16 val  Returns   U16  val    add  fun box add(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    sub  fun box sub(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    mul  fun box mul(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    div  fun box div(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    divmod  fun box divmod(\n  y: U16 val)\n: (U16 val , U16 val)  Parameters   y:  U16  val   Returns   ( U16  val ,  U16  val)    mod  fun box mod(\n  y: U16 val)\n: U16 val  Parameters   y:  U16  val   Returns   U16  val    neg  fun box neg()\n: U16 val  Returns   U16  val    eq  fun box eq(\n  y: U16 val)\n: Bool val  Parameters   y:  U16  val   Returns   Bool  val    ne  fun box ne(\n  y: U16 val)\n: Bool val  Parameters   y:  U16  val   Returns   Bool  val    lt  fun box lt(\n  y: U16 val)\n: Bool val  Parameters   y:  U16  val   Returns   Bool  val    le  fun box le(\n  y: U16 val)\n: Bool val  Parameters   y:  U16  val   Returns   Bool  val    ge  fun box ge(\n  y: U16 val)\n: Bool val  Parameters   y:  U16  val   Returns   Bool  val    gt  fun box gt(\n  y: U16 val)\n: Bool val  Parameters   y:  U16  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  U16  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U16/#private-functions",
            "text": "_value  fun box _value()\n: U16 val  Returns   U16  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-U32/",
            "text": "U32\n\n\nprimitive val U32 is\n  _UnsignedInteger[U32 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU32\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U32 val)\n: U32 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: U32 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U32 val^\n\n\n\n\nReturns\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U32 val^\n\n\n\n\nReturns\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val",
            "title": "primitive U32"
        },
        {
            "location": "/builtin-U32/#u32",
            "text": "primitive val U32 is\n  _UnsignedInteger[U32 val] val  Implements   _UnsignedInteger [ U32  val] val",
            "title": "U32"
        },
        {
            "location": "/builtin-U32/#constructors",
            "text": "create  new val create(\n  value: U32 val)\n: U32 val^  Parameters   value:  U32  val   Returns   U32  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: U32 val^  Parameters   a: A val   Returns   U32  val^    min_value  new val min_value()\n: U32 val^  Returns   U32  val^    max_value  new val max_value()\n: U32 val^  Returns   U32  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U32/#public-functions",
            "text": "next_pow2  fun box next_pow2()\n: U32 val  Returns   U32  val    abs  fun box abs()\n: U32 val  Returns   U32  val    bswap  fun box bswap()\n: U32 val  Returns   U32  val    popcount  fun box popcount()\n: U32 val  Returns   U32  val    clz  fun box clz()\n: U32 val  Returns   U32  val    ctz  fun box ctz()\n: U32 val  Returns   U32  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U32 val  Returns   U32  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U32 val  Returns   U32  val    bitwidth  fun box bitwidth()\n: U32 val  Returns   U32  val    min  fun box min(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    max  fun box max(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    addc  fun box addc(\n  y: U32 val)\n: (U32 val , Bool val)  Parameters   y:  U32  val   Returns   ( U32  val ,  Bool  val)    subc  fun box subc(\n  y: U32 val)\n: (U32 val , Bool val)  Parameters   y:  U32  val   Returns   ( U32  val ,  Bool  val)    mulc  fun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)  Parameters   y:  U32  val   Returns   ( U32  val ,  Bool  val)    shl  fun box shl(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    shr  fun box shr(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    shl_unsafe  fun box shl_unsafe(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    shr_unsafe  fun box shr_unsafe(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    rotl  fun box rotl(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    rotr  fun box rotr(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    sub_unsafe  fun box sub_unsafe(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    mul_unsafe  fun box mul_unsafe(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    div_unsafe  fun box div_unsafe(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    divmod_unsafe  fun box divmod_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)  Parameters   y:  U32  val   Returns   ( U32  val ,  U32  val)    mod_unsafe  fun box mod_unsafe(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    neg_unsafe  fun box neg_unsafe()\n: U32 val  Returns   U32  val    op_and  fun box op_and(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    op_or  fun box op_or(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    op_xor  fun box op_xor(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    op_not  fun box op_not()\n: U32 val  Returns   U32  val    add  fun box add(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    sub  fun box sub(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    mul  fun box mul(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    div  fun box div(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    divmod  fun box divmod(\n  y: U32 val)\n: (U32 val , U32 val)  Parameters   y:  U32  val   Returns   ( U32  val ,  U32  val)    mod  fun box mod(\n  y: U32 val)\n: U32 val  Parameters   y:  U32  val   Returns   U32  val    neg  fun box neg()\n: U32 val  Returns   U32  val    eq  fun box eq(\n  y: U32 val)\n: Bool val  Parameters   y:  U32  val   Returns   Bool  val    ne  fun box ne(\n  y: U32 val)\n: Bool val  Parameters   y:  U32  val   Returns   Bool  val    lt  fun box lt(\n  y: U32 val)\n: Bool val  Parameters   y:  U32  val   Returns   Bool  val    le  fun box le(\n  y: U32 val)\n: Bool val  Parameters   y:  U32  val   Returns   Bool  val    ge  fun box ge(\n  y: U32 val)\n: Bool val  Parameters   y:  U32  val   Returns   Bool  val    gt  fun box gt(\n  y: U32 val)\n: Bool val  Parameters   y:  U32  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  U32  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U32/#private-functions",
            "text": "_value  fun box _value()\n: U32 val  Returns   U32  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-U64/",
            "text": "U64\n\n\nprimitive val U64 is\n  _UnsignedInteger[U64 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU64\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U64 val)\n: U64 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: U64 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U64 val^\n\n\n\n\nReturns\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U64 val^\n\n\n\n\nReturns\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nU64\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U64 val)\n: (U64 val , U64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nU64\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val",
            "title": "primitive U64"
        },
        {
            "location": "/builtin-U64/#u64",
            "text": "primitive val U64 is\n  _UnsignedInteger[U64 val] val  Implements   _UnsignedInteger [ U64  val] val",
            "title": "U64"
        },
        {
            "location": "/builtin-U64/#constructors",
            "text": "create  new val create(\n  value: U64 val)\n: U64 val^  Parameters   value:  U64  val   Returns   U64  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: U64 val^  Parameters   a: A val   Returns   U64  val^    min_value  new val min_value()\n: U64 val^  Returns   U64  val^    max_value  new val max_value()\n: U64 val^  Returns   U64  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U64/#public-functions",
            "text": "next_pow2  fun box next_pow2()\n: U64 val  Returns   U64  val    abs  fun box abs()\n: U64 val  Returns   U64  val    bswap  fun box bswap()\n: U64 val  Returns   U64  val    popcount  fun box popcount()\n: U64 val  Returns   U64  val    clz  fun box clz()\n: U64 val  Returns   U64  val    ctz  fun box ctz()\n: U64 val  Returns   U64  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U64 val  Returns   U64  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U64 val  Returns   U64  val    bitwidth  fun box bitwidth()\n: U64 val  Returns   U64  val    min  fun box min(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    max  fun box max(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    addc  fun box addc(\n  y: U64 val)\n: (U64 val , Bool val)  Parameters   y:  U64  val   Returns   ( U64  val ,  Bool  val)    subc  fun box subc(\n  y: U64 val)\n: (U64 val , Bool val)  Parameters   y:  U64  val   Returns   ( U64  val ,  Bool  val)    mulc  fun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)  Parameters   y:  U64  val   Returns   ( U64  val ,  Bool  val)    shl  fun box shl(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    shr  fun box shr(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    shl_unsafe  fun box shl_unsafe(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    shr_unsafe  fun box shr_unsafe(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    rotl  fun box rotl(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    rotr  fun box rotr(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    sub_unsafe  fun box sub_unsafe(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    mul_unsafe  fun box mul_unsafe(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    div_unsafe  fun box div_unsafe(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    divmod_unsafe  fun box divmod_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)  Parameters   y:  U64  val   Returns   ( U64  val ,  U64  val)    mod_unsafe  fun box mod_unsafe(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    neg_unsafe  fun box neg_unsafe()\n: U64 val  Returns   U64  val    op_and  fun box op_and(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    op_or  fun box op_or(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    op_xor  fun box op_xor(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    op_not  fun box op_not()\n: U64 val  Returns   U64  val    add  fun box add(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    sub  fun box sub(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    mul  fun box mul(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    div  fun box div(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    divmod  fun box divmod(\n  y: U64 val)\n: (U64 val , U64 val)  Parameters   y:  U64  val   Returns   ( U64  val ,  U64  val)    mod  fun box mod(\n  y: U64 val)\n: U64 val  Parameters   y:  U64  val   Returns   U64  val    neg  fun box neg()\n: U64 val  Returns   U64  val    eq  fun box eq(\n  y: U64 val)\n: Bool val  Parameters   y:  U64  val   Returns   Bool  val    ne  fun box ne(\n  y: U64 val)\n: Bool val  Parameters   y:  U64  val   Returns   Bool  val    lt  fun box lt(\n  y: U64 val)\n: Bool val  Parameters   y:  U64  val   Returns   Bool  val    le  fun box le(\n  y: U64 val)\n: Bool val  Parameters   y:  U64  val   Returns   Bool  val    ge  fun box ge(\n  y: U64 val)\n: Bool val  Parameters   y:  U64  val   Returns   Bool  val    gt  fun box gt(\n  y: U64 val)\n: Bool val  Parameters   y:  U64  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  U64  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U64/#private-functions",
            "text": "_value  fun box _value()\n: U64 val  Returns   U64  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-ULong/",
            "text": "ULong\n\n\nprimitive val ULong is\n  _UnsignedInteger[ULong val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nULong\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: ULong val)\n: ULong val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: ULong val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: ULong val^\n\n\n\n\nReturns\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: ULong val^\n\n\n\n\nReturns\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nULong\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: ULong val)\n: (ULong val , ULong val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nULong\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val",
            "title": "primitive ULong"
        },
        {
            "location": "/builtin-ULong/#ulong",
            "text": "primitive val ULong is\n  _UnsignedInteger[ULong val] val  Implements   _UnsignedInteger [ ULong  val] val",
            "title": "ULong"
        },
        {
            "location": "/builtin-ULong/#constructors",
            "text": "create  new val create(\n  value: ULong val)\n: ULong val^  Parameters   value:  ULong  val   Returns   ULong  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: ULong val^  Parameters   a: A val   Returns   ULong  val^    min_value  new val min_value()\n: ULong val^  Returns   ULong  val^    max_value  new val max_value()\n: ULong val^  Returns   ULong  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ULong/#public-functions",
            "text": "next_pow2  fun box next_pow2()\n: ULong val  Returns   ULong  val    abs  fun box abs()\n: ULong val  Returns   ULong  val    bswap  fun box bswap()\n: ULong val  Returns   ULong  val    popcount  fun box popcount()\n: ULong val  Returns   ULong  val    clz  fun box clz()\n: ULong val  Returns   ULong  val    ctz  fun box ctz()\n: ULong val  Returns   ULong  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: ULong val  Returns   ULong  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: ULong val  Returns   ULong  val    bitwidth  fun box bitwidth()\n: ULong val  Returns   ULong  val    min  fun box min(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    max  fun box max(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    addc  fun box addc(\n  y: ULong val)\n: (ULong val , Bool val)  Parameters   y:  ULong  val   Returns   ( ULong  val ,  Bool  val)    subc  fun box subc(\n  y: ULong val)\n: (ULong val , Bool val)  Parameters   y:  ULong  val   Returns   ( ULong  val ,  Bool  val)    mulc  fun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)  Parameters   y:  ULong  val   Returns   ( ULong  val ,  Bool  val)    shl  fun box shl(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    shr  fun box shr(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    shl_unsafe  fun box shl_unsafe(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    shr_unsafe  fun box shr_unsafe(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    rotl  fun box rotl(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    rotr  fun box rotr(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    sub_unsafe  fun box sub_unsafe(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    mul_unsafe  fun box mul_unsafe(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    div_unsafe  fun box div_unsafe(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    divmod_unsafe  fun box divmod_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)  Parameters   y:  ULong  val   Returns   ( ULong  val ,  ULong  val)    mod_unsafe  fun box mod_unsafe(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    neg_unsafe  fun box neg_unsafe()\n: ULong val  Returns   ULong  val    op_and  fun box op_and(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    op_or  fun box op_or(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    op_xor  fun box op_xor(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    op_not  fun box op_not()\n: ULong val  Returns   ULong  val    add  fun box add(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    sub  fun box sub(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    mul  fun box mul(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    div  fun box div(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    divmod  fun box divmod(\n  y: ULong val)\n: (ULong val , ULong val)  Parameters   y:  ULong  val   Returns   ( ULong  val ,  ULong  val)    mod  fun box mod(\n  y: ULong val)\n: ULong val  Parameters   y:  ULong  val   Returns   ULong  val    neg  fun box neg()\n: ULong val  Returns   ULong  val    eq  fun box eq(\n  y: ULong val)\n: Bool val  Parameters   y:  ULong  val   Returns   Bool  val    ne  fun box ne(\n  y: ULong val)\n: Bool val  Parameters   y:  ULong  val   Returns   Bool  val    lt  fun box lt(\n  y: ULong val)\n: Bool val  Parameters   y:  ULong  val   Returns   Bool  val    le  fun box le(\n  y: ULong val)\n: Bool val  Parameters   y:  ULong  val   Returns   Bool  val    ge  fun box ge(\n  y: ULong val)\n: Bool val  Parameters   y:  ULong  val   Returns   Bool  val    gt  fun box gt(\n  y: ULong val)\n: Bool val  Parameters   y:  ULong  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)  Parameters   that:  ULong  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ULong/#private-functions",
            "text": "_value  fun box _value()\n: ULong val  Returns   ULong  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-USize/",
            "text": "USize\n\n\nprimitive val USize is\n  _UnsignedInteger[USize val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nUSize\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: USize val)\n: USize val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: USize val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: USize val^\n\n\n\n\nReturns\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: USize val^\n\n\n\n\nReturns\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: USize val)\n: (USize val , USize val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nUSize\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: USize val)\n: (USize val , USize val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nUSize\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val",
            "title": "primitive USize"
        },
        {
            "location": "/builtin-USize/#usize",
            "text": "primitive val USize is\n  _UnsignedInteger[USize val] val  Implements   _UnsignedInteger [ USize  val] val",
            "title": "USize"
        },
        {
            "location": "/builtin-USize/#constructors",
            "text": "create  new val create(\n  value: USize val)\n: USize val^  Parameters   value:  USize  val   Returns   USize  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: USize val^  Parameters   a: A val   Returns   USize  val^    min_value  new val min_value()\n: USize val^  Returns   USize  val^    max_value  new val max_value()\n: USize val^  Returns   USize  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-USize/#public-functions",
            "text": "next_pow2  fun box next_pow2()\n: USize val  Returns   USize  val    abs  fun box abs()\n: USize val  Returns   USize  val    bswap  fun box bswap()\n: USize val  Returns   USize  val    popcount  fun box popcount()\n: USize val  Returns   USize  val    clz  fun box clz()\n: USize val  Returns   USize  val    ctz  fun box ctz()\n: USize val  Returns   USize  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: USize val  Returns   USize  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: USize val  Returns   USize  val    bitwidth  fun box bitwidth()\n: USize val  Returns   USize  val    min  fun box min(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    max  fun box max(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    addc  fun box addc(\n  y: USize val)\n: (USize val , Bool val)  Parameters   y:  USize  val   Returns   ( USize  val ,  Bool  val)    subc  fun box subc(\n  y: USize val)\n: (USize val , Bool val)  Parameters   y:  USize  val   Returns   ( USize  val ,  Bool  val)    mulc  fun box mulc(\n  y: USize val)\n: (USize val , Bool val)  Parameters   y:  USize  val   Returns   ( USize  val ,  Bool  val)    shl  fun box shl(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    shr  fun box shr(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    shl_unsafe  fun box shl_unsafe(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    shr_unsafe  fun box shr_unsafe(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    rotl  fun box rotl(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    rotr  fun box rotr(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    string  fun box string()\n: String iso^  Returns   String  iso^    add_unsafe  fun box add_unsafe(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    sub_unsafe  fun box sub_unsafe(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    mul_unsafe  fun box mul_unsafe(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    div_unsafe  fun box div_unsafe(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    divmod_unsafe  fun box divmod_unsafe(\n  y: USize val)\n: (USize val , USize val)  Parameters   y:  USize  val   Returns   ( USize  val ,  USize  val)    mod_unsafe  fun box mod_unsafe(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    neg_unsafe  fun box neg_unsafe()\n: USize val  Returns   USize  val    op_and  fun box op_and(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    op_or  fun box op_or(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    op_xor  fun box op_xor(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    op_not  fun box op_not()\n: USize val  Returns   USize  val    add  fun box add(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    sub  fun box sub(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    mul  fun box mul(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    div  fun box div(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    divmod  fun box divmod(\n  y: USize val)\n: (USize val , USize val)  Parameters   y:  USize  val   Returns   ( USize  val ,  USize  val)    mod  fun box mod(\n  y: USize val)\n: USize val  Parameters   y:  USize  val   Returns   USize  val    neg  fun box neg()\n: USize val  Returns   USize  val    eq  fun box eq(\n  y: USize val)\n: Bool val  Parameters   y:  USize  val   Returns   Bool  val    ne  fun box ne(\n  y: USize val)\n: Bool val  Parameters   y:  USize  val   Returns   Bool  val    lt  fun box lt(\n  y: USize val)\n: Bool val  Parameters   y:  USize  val   Returns   Bool  val    le  fun box le(\n  y: USize val)\n: Bool val  Parameters   y:  USize  val   Returns   Bool  val    ge  fun box ge(\n  y: USize val)\n: Bool val  Parameters   y:  USize  val   Returns   Bool  val    gt  fun box gt(\n  y: USize val)\n: Bool val  Parameters   y:  USize  val   Returns   Bool  val    hash  fun box hash()\n: U64 val  Returns   U64  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    f32_unsafe  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  fun box f64_unsafe()\n: F64 val  Returns   F64  val    compare  fun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)  Parameters   that:  USize  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-USize/#private-functions",
            "text": "_value  fun box _value()\n: USize val  Returns   USize  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-U128/",
            "text": "U128\n\n\nprimitive val U128 is\n  _UnsignedInteger[U128 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU128\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U128 val)\n: U128 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]\n\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: U128 val^\n\n\n\n\nParameters\n\n\n\n\na: A val\n\n\n\n\nReturns\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U128 val^\n\n\n\n\nReturns\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U128 val^\n\n\n\n\nReturns\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U128 val)\n: (U128 val , U128 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU128\n val , \nU128\n val)\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU128\n val , \nU128\n val)\n\n\n\n\n\n\ndiv_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val",
            "title": "primitive U128"
        },
        {
            "location": "/builtin-U128/#u128",
            "text": "primitive val U128 is\n  _UnsignedInteger[U128 val] val  Implements   _UnsignedInteger [ U128  val] val",
            "title": "U128"
        },
        {
            "location": "/builtin-U128/#constructors",
            "text": "create  new val create(\n  value: U128 val)\n: U128 val^  Parameters   value:  U128  val   Returns   U128  val^    from[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val) & [Real](builtin-Real)\\[A val\\] val)\\]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A val] val)](\n  a: A val)\n: U128 val^  Parameters   a: A val   Returns   U128  val^    min_value  new val min_value()\n: U128 val^  Returns   U128  val^    max_value  new val max_value()\n: U128 val^  Returns   U128  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U128/#public-functions",
            "text": "next_pow2  fun box next_pow2()\n: U128 val  Returns   U128  val    abs  fun box abs()\n: U128 val  Returns   U128  val    bswap  fun box bswap()\n: U128 val  Returns   U128  val    popcount  fun box popcount()\n: U128 val  Returns   U128  val    clz  fun box clz()\n: U128 val  Returns   U128  val    ctz  fun box ctz()\n: U128 val  Returns   U128  val    clz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U128 val  Returns   U128  val    ctz_unsafe  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U128 val  Returns   U128  val    bitwidth  fun box bitwidth()\n: U128 val  Returns   U128  val    min  fun box min(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    max  fun box max(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    hash  fun box hash()\n: U64 val  Returns   U64  val    string  fun box string()\n: String iso^  Returns   String  iso^    mul  fun box mul(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    divmod  fun box divmod(\n  y: U128 val)\n: (U128 val , U128 val)  Parameters   y:  U128  val   Returns   ( U128  val ,  U128  val)    div  fun box div(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    mod  fun box mod(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    mul_unsafe  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    divmod_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)  Parameters   y:  U128  val   Returns   ( U128  val ,  U128  val)    div_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    mod_unsafe  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    f32  fun box f32()\n: F32 val  Returns   F32  val    f64  fun box f64()\n: F64 val  Returns   F64  val    f32_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val  Returns   F32  val    f64_unsafe  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val  Returns   F64  val    shl  fun box shl(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    shr  fun box shr(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    shl_unsafe  fun box shl_unsafe(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    shr_unsafe  fun box shr_unsafe(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    rotl  fun box rotl(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    rotr  fun box rotr(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    add_unsafe  fun box add_unsafe(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    sub_unsafe  fun box sub_unsafe(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    neg_unsafe  fun box neg_unsafe()\n: U128 val  Returns   U128  val    op_and  fun box op_and(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    op_or  fun box op_or(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    op_xor  fun box op_xor(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    op_not  fun box op_not()\n: U128 val  Returns   U128  val    add  fun box add(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    sub  fun box sub(\n  y: U128 val)\n: U128 val  Parameters   y:  U128  val   Returns   U128  val    neg  fun box neg()\n: U128 val  Returns   U128  val    eq  fun box eq(\n  y: U128 val)\n: Bool val  Parameters   y:  U128  val   Returns   Bool  val    ne  fun box ne(\n  y: U128 val)\n: Bool val  Parameters   y:  U128  val   Returns   Bool  val    lt  fun box lt(\n  y: U128 val)\n: Bool val  Parameters   y:  U128  val   Returns   Bool  val    le  fun box le(\n  y: U128 val)\n: Bool val  Parameters   y:  U128  val   Returns   Bool  val    ge  fun box ge(\n  y: U128 val)\n: Bool val  Parameters   y:  U128  val   Returns   Bool  val    gt  fun box gt(\n  y: U128 val)\n: Bool val  Parameters   y:  U128  val   Returns   Bool  val    i8  fun box i8()\n: I8 val  Returns   I8  val    i16  fun box i16()\n: I16 val  Returns   I16  val    i32  fun box i32()\n: I32 val  Returns   I32  val    i64  fun box i64()\n: I64 val  Returns   I64  val    i128  fun box i128()\n: I128 val  Returns   I128  val    ilong  fun box ilong()\n: ILong val  Returns   ILong  val    isize  fun box isize()\n: ISize val  Returns   ISize  val    u8  fun box u8()\n: U8 val  Returns   U8  val    u16  fun box u16()\n: U16 val  Returns   U16  val    u32  fun box u32()\n: U32 val  Returns   U32  val    u64  fun box u64()\n: U64 val  Returns   U64  val    u128  fun box u128()\n: U128 val  Returns   U128  val    ulong  fun box ulong()\n: ULong val  Returns   ULong  val    usize  fun box usize()\n: USize val  Returns   USize  val    i8_unsafe  fun box i8_unsafe()\n: I8 val  Returns   I8  val    i16_unsafe  fun box i16_unsafe()\n: I16 val  Returns   I16  val    i32_unsafe  fun box i32_unsafe()\n: I32 val  Returns   I32  val    i64_unsafe  fun box i64_unsafe()\n: I64 val  Returns   I64  val    i128_unsafe  fun box i128_unsafe()\n: I128 val  Returns   I128  val    ilong_unsafe  fun box ilong_unsafe()\n: ILong val  Returns   ILong  val    isize_unsafe  fun box isize_unsafe()\n: ISize val  Returns   ISize  val    u8_unsafe  fun box u8_unsafe()\n: U8 val  Returns   U8  val    u16_unsafe  fun box u16_unsafe()\n: U16 val  Returns   U16  val    u32_unsafe  fun box u32_unsafe()\n: U32 val  Returns   U32  val    u64_unsafe  fun box u64_unsafe()\n: U64 val  Returns   U64  val    u128_unsafe  fun box u128_unsafe()\n: U128 val  Returns   U128  val    ulong_unsafe  fun box ulong_unsafe()\n: ULong val  Returns   ULong  val    usize_unsafe  fun box usize_unsafe()\n: USize val  Returns   USize  val    compare  fun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)  Parameters   that:  U128  val   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U128/#private-functions",
            "text": "_value  fun box _value()\n: U128 val  Returns   U128  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-Unsigned/",
            "text": "Unsigned\n\n\ntype Unsigned is\n  (U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nU8\n val | \nU16\n val | \nU32\n val | \n    \nU64\n val | \nU128\n val | \nULong\n val | \n    \nUSize\n val)",
            "title": "type Unsigned"
        },
        {
            "location": "/builtin-Unsigned/#unsigned",
            "text": "type Unsigned is\n  (U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val)  Type Alias For   ( U8  val |  U16  val |  U32  val | \n     U64  val |  U128  val |  ULong  val | \n     USize  val)",
            "title": "Unsigned"
        },
        {
            "location": "/builtin-DoNotOptimise/",
            "text": "DoNotOptimise\n\n\nContains functions preventing some compiler optimisations, namely dead code\nremoval. This is useful for benchmarking purposes.\n\n\nprimitive val DoNotOptimise\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DoNotOptimise val^\n\n\n\n\nReturns\n\n\n\n\nDoNotOptimise\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply[A: A]\n\n\nPrevent the compiler from optimising out obj and any computation it is\nderived from. This doesn't prevent constant propagation.\n\n\nfun box apply[A: A](\n  obj: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nobj: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nobserve\n\n\nPrevent the compiler from optimising out writes to an object marked by\nthe apply function.\n\n\nfun box observe()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: DoNotOptimise val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDoNotOptimise\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DoNotOptimise val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDoNotOptimise\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive DoNotOptimise"
        },
        {
            "location": "/builtin-DoNotOptimise/#donotoptimise",
            "text": "Contains functions preventing some compiler optimisations, namely dead code\nremoval. This is useful for benchmarking purposes.  primitive val DoNotOptimise",
            "title": "DoNotOptimise"
        },
        {
            "location": "/builtin-DoNotOptimise/#constructors",
            "text": "create  new val create()\n: DoNotOptimise val^  Returns   DoNotOptimise  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-DoNotOptimise/#public-functions",
            "text": "apply[A: A]  Prevent the compiler from optimising out obj and any computation it is\nderived from. This doesn't prevent constant propagation.  fun box apply[A: A](\n  obj: A)\n: None val  Parameters   obj: A   Returns   None  val    observe  Prevent the compiler from optimising out writes to an object marked by\nthe apply function.  fun box observe()\n: None val  Returns   None  val    eq  fun box eq(\n  that: DoNotOptimise val)\n: Bool val  Parameters   that:  DoNotOptimise  val   Returns   Bool  val    ne  fun box ne(\n  that: DoNotOptimise val)\n: Bool val  Parameters   that:  DoNotOptimise  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-SourceLoc/",
            "text": "SourceLoc\n\n\nRepresents a location in a Pony source file, as reported by \n__loc\n.\n\n\ninterface val SourceLoc\n\n\n\n\nPublic Functions\n\n\nfile\n\n\nName and path of source file.\n\n\nfun box file()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nmethod\n\n\nName of containing method.\n\n\nfun box method()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nline\n\n\nLine number within file.\nLine numbers start at 1.\n\n\nfun box line()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\npos\n\n\nCharacter position on line.\nCharacter positions start at 1.\n\n\nfun box pos()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val",
            "title": "interface SourceLoc"
        },
        {
            "location": "/builtin-SourceLoc/#sourceloc",
            "text": "Represents a location in a Pony source file, as reported by  __loc .  interface val SourceLoc",
            "title": "SourceLoc"
        },
        {
            "location": "/builtin-SourceLoc/#public-functions",
            "text": "file  Name and path of source file.  fun box file()\n: String val  Returns   String  val    method  Name of containing method.  fun box method()\n: String val  Returns   String  val    line  Line number within file.\nLine numbers start at 1.  fun box line()\n: USize val  Returns   USize  val    pos  Character position on line.\nCharacter positions start at 1.  fun box pos()\n: USize val  Returns   USize  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Stringable/",
            "text": "Stringable\n\n\nThings that can be turned into a String.\n\n\ninterface box Stringable\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nGenerate a string representation of this object.\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^",
            "title": "interface Stringable"
        },
        {
            "location": "/builtin-Stringable/#stringable",
            "text": "Things that can be turned into a String.  interface box Stringable",
            "title": "Stringable"
        },
        {
            "location": "/builtin-Stringable/#public-functions",
            "text": "string  Generate a string representation of this object.  fun box string()\n: String iso^  Returns   String  iso^",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Pointer/",
            "text": "Pointer[A: A]\n\n\nA Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.\n\n\nstruct ref Pointer[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nA null pointer.\n\n\nnew ref create()\n: Pointer[A] ref^\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref^\n\n\n\n\n\n\n_alloc\n\n\nSpace for len instances of A.\n\n\nnew ref _alloc(\n  len: USize val)\n: Pointer[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nusize\n\n\nConvert the pointer into an integer.\n\n\nfun tag usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nis_null\n\n\nReturn true for a null pointer, false for anything else.\n\n\nfun tag is_null()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nReturn true if this address is that address.\n\n\nfun tag eq(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturn true if this address is less than that address.\n\n\nfun tag lt(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun tag ne(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun tag le(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun tag ge(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun tag gt(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nReturns a hash of the address.\n\n\nfun tag hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_realloc\n\n\nKeep the contents, but reserve space for len instances of A.\n\n\nfun ref _realloc(\n  len: USize val)\n: Pointer[A] ref\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref\n\n\n\n\n\n\n_unsafe\n\n\nUnsafe change in reference capability.\n\n\nfun tag _unsafe()\n: Pointer[A] ref\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref\n\n\n\n\n\n\n_apply\n\n\nRetrieve index i.\n\n\nfun box _apply(\n  i: USize val)\n: this->A\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->A\n\n\n\n\n\n\n_update\n\n\nSet index i and return the previous value.\n\n\nfun ref _update(\n  i: USize val,\n  value: A!)\n: A^\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A!\n\n\n\n\nReturns\n\n\n\n\nA^\n\n\n\n\n\n\n_offset\n\n\nReturn a pointer to the n-th element.\n\n\nfun box _offset(\n  n: USize val)\n: this->Pointer[A] ref\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->\nPointer\n[A] ref\n\n\n\n\n\n\n_element_size\n\n\nReturn the size of a single element in an array of type A.\n\n\nfun tag _element_size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_insert\n\n\nCreates space for n new elements at the head, moving following elements.\nThe array length before this should be len, and the available space should\nbe at least n + len.\n\n\nfun ref _insert(\n  n: USize val,\n  len: USize val)\n: Pointer[A] ref\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref\n\n\n\n\n\n\n_delete\n\n\nDelete n elements from the head of pointer, compact remaining elements of\nthe underlying array. The array length before this should be n + len.\nReturns the first deleted element.\n\n\nfun ref _delete(\n  n: USize val,\n  len: USize val)\n: A^\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA^\n\n\n\n\n\n\n_copy_to\n\n\nCopy n elements from this to that.\n\n\nfun box _copy_to(\n  that: Pointer[this->A!] ref,\n  n: USize val)\n: this->Pointer[A] ref\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[this->A!] ref\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->\nPointer\n[A] ref\n\n\n\n\n\n\n_consume_from\n\n\nCopy n elements from that to this.\n\n\nfun ref _consume_from(\n  that: Pointer[A] ref^,\n  n: USize val)\n: Pointer[A] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] ref^\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref^",
            "title": "struct Pointer"
        },
        {
            "location": "/builtin-Pointer/#pointer91a-a93",
            "text": "A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.  struct ref Pointer[A: A]",
            "title": "Pointer[A: A]"
        },
        {
            "location": "/builtin-Pointer/#constructors",
            "text": "create  A null pointer.  new ref create()\n: Pointer[A] ref^  Returns   Pointer [A] ref^    _alloc  Space for len instances of A.  new ref _alloc(\n  len: USize val)\n: Pointer[A] ref^  Parameters   len:  USize  val   Returns   Pointer [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Pointer/#public-functions",
            "text": "usize  Convert the pointer into an integer.  fun tag usize()\n: USize val  Returns   USize  val    is_null  Return true for a null pointer, false for anything else.  fun tag is_null()\n: Bool val  Returns   Bool  val    eq  Return true if this address is that address.  fun tag eq(\n  that: Pointer[A] tag)\n: Bool val  Parameters   that:  Pointer [A] tag   Returns   Bool  val    lt  Return true if this address is less than that address.  fun tag lt(\n  that: Pointer[A] tag)\n: Bool val  Parameters   that:  Pointer [A] tag   Returns   Bool  val    ne  fun tag ne(\n  that: Pointer[A] tag)\n: Bool val  Parameters   that:  Pointer [A] tag   Returns   Bool  val    le  fun tag le(\n  that: Pointer[A] tag)\n: Bool val  Parameters   that:  Pointer [A] tag   Returns   Bool  val    ge  fun tag ge(\n  that: Pointer[A] tag)\n: Bool val  Parameters   that:  Pointer [A] tag   Returns   Bool  val    gt  fun tag gt(\n  that: Pointer[A] tag)\n: Bool val  Parameters   that:  Pointer [A] tag   Returns   Bool  val    hash  Returns a hash of the address.  fun tag hash()\n: U64 val  Returns   U64  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Pointer/#private-functions",
            "text": "_realloc  Keep the contents, but reserve space for len instances of A.  fun ref _realloc(\n  len: USize val)\n: Pointer[A] ref  Parameters   len:  USize  val   Returns   Pointer [A] ref    _unsafe  Unsafe change in reference capability.  fun tag _unsafe()\n: Pointer[A] ref  Returns   Pointer [A] ref    _apply  Retrieve index i.  fun box _apply(\n  i: USize val)\n: this->A  Parameters   i:  USize  val   Returns   this->A    _update  Set index i and return the previous value.  fun ref _update(\n  i: USize val,\n  value: A!)\n: A^  Parameters   i:  USize  val  value: A!   Returns   A^    _offset  Return a pointer to the n-th element.  fun box _offset(\n  n: USize val)\n: this->Pointer[A] ref  Parameters   n:  USize  val   Returns   this-> Pointer [A] ref    _element_size  Return the size of a single element in an array of type A.  fun tag _element_size()\n: USize val  Returns   USize  val    _insert  Creates space for n new elements at the head, moving following elements.\nThe array length before this should be len, and the available space should\nbe at least n + len.  fun ref _insert(\n  n: USize val,\n  len: USize val)\n: Pointer[A] ref  Parameters   n:  USize  val  len:  USize  val   Returns   Pointer [A] ref    _delete  Delete n elements from the head of pointer, compact remaining elements of\nthe underlying array. The array length before this should be n + len.\nReturns the first deleted element.  fun ref _delete(\n  n: USize val,\n  len: USize val)\n: A^  Parameters   n:  USize  val  len:  USize  val   Returns   A^    _copy_to  Copy n elements from this to that.  fun box _copy_to(\n  that: Pointer[this->A!] ref,\n  n: USize val)\n: this->Pointer[A] ref  Parameters   that:  Pointer [this->A!] ref  n:  USize  val   Returns   this-> Pointer [A] ref    _consume_from  Copy n elements from that to this.  fun ref _consume_from(\n  that: Pointer[A] ref^,\n  n: USize val)\n: Pointer[A] ref^  Parameters   that:  Pointer [A] ref^  n:  USize  val   Returns   Pointer [A] ref^",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-String/",
            "text": "String\n\n\nA String is an ordered collection of characters.\n\n\nStrings don't specify an encoding.\n\n\nExample usage of some common String methods:\n\n\nactor Main\n  new create(env: Env) =>\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\")\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\")\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end\n\n\n\n\nclass val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box\n\n\n\n\nImplements\n\n\n\n\nSeq\n[\nU8\n val] ref\n\n\nComparable\n[\nString\n box] ref\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nAn empty string. Enough space for len bytes is reserved.\n\n\nnew ref create(\n  len: USize val = 0)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_array\n\n\nCreate a string from an array, reusing the underlying data pointer.\n\n\nnew val from_array(\n  data: Array[U8 val] val)\n: String val^\n\n\n\n\nParameters\n\n\n\n\ndata: \nArray\n[\nU8\n val] val\n\n\n\n\nReturns\n\n\n\n\nString\n val^\n\n\n\n\n\n\nfrom_iso_array\n\n\nCreate a string from an array, reusing the underlying data pointer\n\n\nnew iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfrom_cpointer\n\n\nReturn a string from binary pointer data without making a\ncopy. This must be done only with C-FFI functions that return\npony_alloc'd character arrays. If a null pointer is given then an\nempty string is returned.\n\n\nnew ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = 0)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nstr: \nPointer\n[\nU8\n val] ref\n\n\nlen: \nUSize\n val\n\n\nalloc: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_cstring\n\n\nReturn a string from a pointer to a null-terminated cstring\nwithout making a copy. The data is not copied. This must be done\nonly with C-FFI functions that return pony_alloc'd character\narrays. The pointer is scanned for the first null byte, which will\nbe interpreted as the null terminator. Note that the scan is\nunbounded; the pointed to data must be null-terminated within\nthe allocated array to preserve memory safety. If a null pointer\nis given then an empty string is returned.\n\n\nnew ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nstr: \nPointer\n[\nU8\n val] ref\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\ncopy_cpointer\n\n\nCreate a string by copying a fixed number of bytes from a pointer.\n\n\nnew ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nstr: \nPointer\n[\nU8\n val] box\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\ncopy_cstring\n\n\nCreate a string by copying a null-terminated C string. Note that\nthe scan is unbounded; the pointed to data must be null-terminated\nwithin the allocated array to preserve memory safety. If a null\npointer is given then an empty string is returned.\n\n\nnew ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nstr: \nPointer\n[\nU8\n val] box\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_utf32\n\n\nCreate a UTF-8 string from a single UTF-32 code point.\n\n\nnew ref from_utf32(\n  value: U32 val)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\npush_utf32\n\n\nPush a UTF-32 code point.\n\n\nfun ref push_utf32(\n  value: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncpointer\n\n\nReturns a C compatible pointer to the underlying string allocation.\n\n\nfun box cpointer(\n  offset: USize val = 0)\n: Pointer[U8 val] tag\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\nU8\n val] tag\n\n\n\n\n\n\ncstring\n\n\nReturns a C compatible pointer to a null-terminated version of the\nstring, safe to pass to an FFI function that doesn't accept a size\nargument, expecting a null-terminator. If the underlying string\nis already null terminated, this is returned; otherwise the string\nis copied into a new, null-terminated allocation.\n\n\nfun box cstring()\n: Pointer[U8 val] tag\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\nU8\n val] tag\n\n\n\n\n\n\narray\n\n\nReturns an Array[U8] that that reuses the underlying data pointer.\n\n\nfun val array()\n: Array[U8 val] val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\nsize\n\n\nReturns the length of the string data in bytes.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncodepoints\n\n\nReturns the number of unicode code points in the string between the two\noffsets. Index range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box codepoints(\n  from: ISize val = 0,\n  to: ISize val = call)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nISize\n val = 0\n\n\nto: \nISize\n val = call\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nReturns the space available for data, not including the null terminator.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreserve\n\n\nReserve space for len bytes. An additional byte will be reserved for the\nnull terminator.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncompact\n\n\nTry to remove unused space, making it available for garbage collection. The\nrequest may be ignored. The string is returned to allow call chaining.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrecalc\n\n\nRecalculates the string length. This is only needed if the string is\nchanged via an FFI call. If a null terminator byte is not found within the\nallocated length, the size will not be changed.\n\n\nfun ref recalc()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\n\nTruncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.\n\nNote that memory is not freed by this operation.\n\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim_in_place\n\n\nTrim the string to a portion of itself, covering \nfrom\n until \nto\n.\nUnlike slice, the operation does not allocate a new string nor copy\nelements.\n\n\nfun ref trim_in_place(\n  from: USize val = 0,\n  to: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = 0\n\n\nto: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim\n\n\nReturn a shared portion of this string, covering \nfrom\n until \nto\n.\nBoth the original and the new string are immutable, as they share memory.\nThe operation does not allocate a new string pointer nor copy elements.\n\n\nfun val trim(\n  from: USize val = 0,\n  to: USize val = call)\n: String val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = 0\n\n\nto: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nis_null_terminated\n\n\nReturn true if the string is null-terminated and safe to pass to an FFI\nfunction that doesn't accept a size argument, expecting a null-terminator.\nThis method checks that there is a null byte just after the final position\nof populated bytes in the string, but does not check for other null bytes\nwhich may be present earlier in the content of the string.\nIf you need a null-terminated copy of this string, use the clone method.\n\n\nfun box is_null_terminated()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nutf32\n\n\nReturn a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.\n\n\nfun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nU8\n val) ?\n\n\n\n\n\n\napply\n\n\nReturns the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nupdate\n\n\nChange the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nat_offset\n\n\nReturns the byte at the given offset. Raise an error if the offset is out\nof bounds.\n\n\nfun box at_offset(\n  offset: ISize val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nupdate_offset\n\n\nChanges a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.\n\n\nfun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nclone\n\n\nReturns a copy of the string. The resulting string is\nnull-terminated even if the original is not.\n\n\nfun box clone()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfind\n\n\nReturn the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurrence of s or s is empty.\n\n\nfun box find(\n  s: String box,\n  offset: ISize val = 0,\n  nth: USize val = 0)\n: ISize val ?\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = 0\n\n\nnth: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\nrfind\n\n\nReturn the index of n-th instance of \ns\n in the string starting from the\nend. The \noffset\n represents the highest index to included in the search.\nRaise an error if there is no n-th occurrence of \ns\n or \ns\n is empty.\n\n\nfun box rfind(\n  s: String box,\n  offset: ISize val = call,\n  nth: USize val = 0)\n: ISize val ?\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = call\n\n\nnth: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\ncontains\n\n\nReturns true if contains s as a substring, false otherwise.\n\n\nfun box contains(\n  s: String box,\n  offset: ISize val = 0,\n  nth: USize val = 0)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = 0\n\n\nnth: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncount\n\n\nCounts the non-overlapping occurrences of s in the string.\n\n\nfun box count(\n  s: String box,\n  offset: ISize val = 0)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nat\n\n\nReturns true if the substring s is present at the given offset.\n\n\nfun box at(\n  s: String box,\n  offset: ISize val = 0)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndelete\n\n\nDelete len bytes at the supplied offset, compacting the string in place.\n\n\nfun ref delete(\n  offset: ISize val,\n  len: USize val = 1)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nlen: \nUSize\n val = 1\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsubstring\n\n\nReturns a substring. Index range [`from` .. `to`) is half-open.\nReturns an empty string if nothing is in the range.\n\nNote that this operation allocates a new string to be returned. For\nsimilar operations that don't allocate a new string, see `trim` and\n`trim_in_place`.\n\n\n\nfun box substring(\n  from: ISize val,\n  to: ISize val = call)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = call\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nlower\n\n\nReturns a lower case version of the string.\n\n\nfun box lower()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nlower_in_place\n\n\nTransforms the string to lower case. Currently only knows ASCII case.\n\n\nfun ref lower_in_place()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nupper\n\n\nReturns an upper case version of the string. Currently only knows ASCII\ncase.\n\n\nfun box upper()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nupper_in_place\n\n\nTransforms the string to upper case.\n\n\nfun ref upper_in_place()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreverse\n\n\nReturns a reversed version of the string.\n\n\nfun box reverse()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nreverse_in_place\n\n\nReverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.\n\n\nfun ref reverse_in_place()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nAdd a byte to the end of the string.\n\n\nfun ref push(\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\n\nRemove a byte from the end of the string.\n\n\nfun ref pop()\n: U8 val ?\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nunshift\n\n\nAdds a byte to the beginning of the string.\n\n\nfun ref unshift(\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\n\nRemoves a byte from the beginning of the string.\n\n\nfun ref shift()\n: U8 val ?\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nappend\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\nseq: \nReadSeq\n[\nU8\n val] box\n\n\noffset: \nUSize\n val = 0\n\n\nlen: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\n\nAdd len iterated bytes to the end of the string, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[\nU8\n val] ref\n\n\noffset: \nUSize\n val = 0\n\n\nlen: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\n\nTruncate the string to zero length.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert\n\n\nReturns a version of the string with the given string inserted at the given\noffset.\n\n\nfun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nthat: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ninsert_in_place\n\n\nInserts the given string at the given offset. Appends the string if the\noffset is out of bounds.\n\n\nfun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert_byte\n\n\nInserts a byte at the given offset. Appends if the offset is out of bounds.\n\n\nfun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncut\n\n\nReturns a version of the string with the given range deleted.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box cut(\n  from: ISize val,\n  to: ISize val = call)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = call\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncut_in_place\n\n\nCuts the given range out of the string.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nRemove all instances of s from the string. Returns the count of removed\ninstances.\n\n\nfun ref remove(\n  s: String box)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreplace\n\n\nReplace up to n occurrences of \nfrom\n in \nthis\n with \nto\n. If n is 0, all\noccurrences will be replaced. Returns the count of replaced occurrences.\n\n\nfun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = 0)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n box\n\n\nto: \nString\n box\n\n\nn: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsplit_by\n\n\nSplit the string into an array of strings that are delimited by `delim` in\nthe original string. If `n > 0`, then the split count is limited to n.\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`.\n\nAn empty delimiter results in an array that contains a single element equal\nto the whole string.\n\n\n\nfun box split_by(\n  delim: String val,\n  n: USize val = call)\n: Array[String val] iso^\n\n\n\n\nParameters\n\n\n\n\ndelim: \nString\n val\n\n\nn: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nsplit\n\n\nSplit the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If `n > 0`, then the split count is\nlimited to n.\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`.\n\n\n\nfun box split(\n  delim: String val= \"  \u000b\f\n\",\n  n: USize val = 0)\n: Array[String val] iso^\n\n\n\n\nParameters\n\n\n\n\ndelim: \nString\n val= \"  \u000b\f\n\"\n\n\nn: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nstrip\n\n\nRemove all leading and trailing characters from the string that are in s.\n\n\nfun ref strip(\n  s: String box= \"  \u000b\f\n\")\n: None val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box= \"  \u000b\f\n\"\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrstrip\n\n\nRemove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.\n\n\nfun ref rstrip(\n  s: String box= \"  \u000b\f\n\")\n: None val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box= \"  \u000b\f\n\"\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlstrip\n\n\nRemove all leading characters within the string that are in s. By default,\nleading whitespace is removed.\n\n\nfun ref lstrip(\n  s: String box= \"  \u000b\f\n\")\n: None val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box= \"  \u000b\f\n\"\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd\n\n\nReturn a string that is a concatenation of this and that.\n\n\nfun box add(\n  that: String box)\n: String val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\njoin\n\n\nReturn a string that is a concatenation of the strings in data, using this\nas a separator.\n\n\nfun box join(\n  data: ReadSeq[Stringable box] box)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nReadSeq\n[\nStringable\n box] box\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncompare\n\n\nLexically compare two strings.\n\n\nfun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\ncompare_sub\n\n\nLexically compare at most `n` bytes of the substring of `this` starting at\n`offset` with the substring of `that` starting at `that_offset`. The\ncomparison is case sensitive unless `ignore_case` is `true`.\n\nIf the substring of `this` is a proper prefix of the substring of `that`,\nthen `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of\n`this`, then `this` is `Greater` than `that`.\n\nBoth `offset` and `that_offset` can be negative, in which case the offsets\nare computed from the end of the string.\n\nIf `n + offset` is greater than the length of `this`, or `n + that_offset`\nis greater than the length of `that`, then the number of positions compared\nwill be reduced to the length of the longest substring.\n\nNeeds to be made UTF-8 safe.\n\n\n\nfun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = 0,\n  that_offset: ISize val = 0,\n  ignore_case: Bool val = false)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\nn: \nUSize\n val\n\n\noffset: \nISize\n val = 0\n\n\nthat_offset: \nISize\n val = 0\n\n\nignore_case: \nBool\n val = false\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\neq\n\n\nReturns true if the two strings have the same contents.\n\n\nfun box eq(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturns true if this is lexically less than that. Needs to be made UTF-8\nsafe.\n\n\nfun box lt(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nReturns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.\n\n\nfun box le(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\noffset_to_index\n\n\nfun box offset_to_index(\n  i: ISize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ni: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbool\n\n\nfun box bool()\n: Bool val ?\n\n\n\n\nReturns\n\n\n\n\nBool\n val ?\n\n\n\n\n\n\ni8\n\n\nfun box i8(\n  base: U8 val = 0)\n: I8 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nI8\n val ?\n\n\n\n\n\n\ni16\n\n\nfun box i16(\n  base: U8 val = 0)\n: I16 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\ni32\n\n\nfun box i32(\n  base: U8 val = 0)\n: I32 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\ni64\n\n\nfun box i64(\n  base: U8 val = 0)\n: I64 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\ni128\n\n\nfun box i128(\n  base: U8 val = 0)\n: I128 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\nilong\n\n\nfun box ilong(\n  base: U8 val = 0)\n: ILong val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nILong\n val ?\n\n\n\n\n\n\nisize\n\n\nfun box isize(\n  base: U8 val = 0)\n: ISize val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\nu8\n\n\nfun box u8(\n  base: U8 val = 0)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nu16\n\n\nfun box u16(\n  base: U8 val = 0)\n: U16 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\nu32\n\n\nfun box u32(\n  base: U8 val = 0)\n: U32 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\nu64\n\n\nfun box u64(\n  base: U8 val = 0)\n: U64 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\nu128\n\n\nfun box u128(\n  base: U8 val = 0)\n: U128 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\nulong\n\n\nfun box ulong(\n  base: U8 val = 0)\n: ULong val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nULong\n val ?\n\n\n\n\n\n\nusize\n\n\nfun box usize(\n  base: U8 val = 0)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nread_int[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val) & [Integer](builtin-Integer)\\[A val\\] val)\\]\n\n\n\nRead an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.\n\n\nfun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A val] val)](\n  offset: ISize val = 0,\n  base: U8 val = 0)\n: (A val , USize val) ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val = 0\n\n\nbase: \nU8\n val = 0\n\n\n\n\nReturns\n\n\n\n\n(A val , \nUSize\n val) ?\n\n\n\n\n\n\nf32\n\n\nfun box f32(\n  offset: ISize val = 0)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64(\n  offset: ISize val = 0)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the bytes in the string.\n\n\nfun box values()\n: StringBytes ref^\n\n\n\n\nReturns\n\n\n\n\nStringBytes\n ref^\n\n\n\n\n\n\nrunes\n\n\nReturn an iterator over the codepoints in the string.\n\n\nfun box runes()\n: StringRunes ref^\n\n\n\n\nReturns\n\n\n\n\nStringRunes\n ref^\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_copy_to\n\n\nCopy copy_len characters from this to that at specified offsets.\n\n\nfun box _copy_to(\n  ptr: Pointer[U8 val] ref,\n  copy_len: USize val,\n  from_offset: USize val = 0,\n  to_offset: USize val = 0)\n: None val\n\n\n\n\nParameters\n\n\n\n\nptr: \nPointer\n[\nU8\n val] ref\n\n\ncopy_len: \nUSize\n val\n\n\nfrom_offset: \nUSize\n val = 0\n\n\nto_offset: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_append\n\n\nfun iso _append(\n  s: String box)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\n_to_int[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val) & [Integer](builtin-Integer)\\[A val\\] val)\\]\n\n\n\nConvert the \nwhole\n string to the specified type.\nIf there are any other characters in the string, or the integer found is\nout of range for the target type then an error is thrown.\n\n\nfun box _to_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A val] val)](\n  base: U8 val)\n: A val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nA val ?\n\n\n\n\n\n\n_read_int_base[A: ((\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val) & [Integer](builtin-Integer)\\[A val\\] val)\\]\n\n\n\nDetermine the base of an integer starting at the specified index.\nIf a non-0 base is given use that. If given base is 0 read the base\nspecifying prefix, if any, to detect base 2 or 16.\nIf no base is specified and no prefix is found default to decimal.\nNote that a leading 0 does NOT imply octal.\nReport the base found and the number of characters in the prefix.\n\n\nfun box _read_int_base[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A val] val)](\n  base: U8 val,\n  index: USize val)\n: (A val , USize val)\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val\n\n\nindex: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(A val , \nUSize\n val)\n\n\n\n\n\n\n_set\n\n\nUnsafe update, used internally.\n\n\nfun ref _set(\n  i: USize val,\n  value: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val",
            "title": "class String"
        },
        {
            "location": "/builtin-String/#string",
            "text": "A String is an ordered collection of characters.  Strings don't specify an encoding.  Example usage of some common String methods:  actor Main\n  new create(env: Env) =>\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\")\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\")\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end  class val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box  Implements   Seq [ U8  val] ref  Comparable [ String  box] ref  Stringable  box",
            "title": "String"
        },
        {
            "location": "/builtin-String/#constructors",
            "text": "create  An empty string. Enough space for len bytes is reserved.  new ref create(\n  len: USize val = 0)\n: String ref^  Parameters   len:  USize  val = 0   Returns   String  ref^    from_array  Create a string from an array, reusing the underlying data pointer.  new val from_array(\n  data: Array[U8 val] val)\n: String val^  Parameters   data:  Array [ U8  val] val   Returns   String  val^    from_iso_array  Create a string from an array, reusing the underlying data pointer  new iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^  Parameters   data:  Array [ U8  val] iso   Returns   String  iso^    from_cpointer  Return a string from binary pointer data without making a\ncopy. This must be done only with C-FFI functions that return\npony_alloc'd character arrays. If a null pointer is given then an\nempty string is returned.  new ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = 0)\n: String ref^  Parameters   str:  Pointer [ U8  val] ref  len:  USize  val  alloc:  USize  val = 0   Returns   String  ref^    from_cstring  Return a string from a pointer to a null-terminated cstring\nwithout making a copy. The data is not copied. This must be done\nonly with C-FFI functions that return pony_alloc'd character\narrays. The pointer is scanned for the first null byte, which will\nbe interpreted as the null terminator. Note that the scan is\nunbounded; the pointed to data must be null-terminated within\nthe allocated array to preserve memory safety. If a null pointer\nis given then an empty string is returned.  new ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^  Parameters   str:  Pointer [ U8  val] ref   Returns   String  ref^    copy_cpointer  Create a string by copying a fixed number of bytes from a pointer.  new ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^  Parameters   str:  Pointer [ U8  val] box  len:  USize  val   Returns   String  ref^    copy_cstring  Create a string by copying a null-terminated C string. Note that\nthe scan is unbounded; the pointed to data must be null-terminated\nwithin the allocated array to preserve memory safety. If a null\npointer is given then an empty string is returned.  new ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^  Parameters   str:  Pointer [ U8  val] box   Returns   String  ref^    from_utf32  Create a UTF-8 string from a single UTF-32 code point.  new ref from_utf32(\n  value: U32 val)\n: String ref^  Parameters   value:  U32  val   Returns   String  ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-String/#public-functions",
            "text": "push_utf32  Push a UTF-32 code point.  fun ref push_utf32(\n  value: U32 val)\n: None val  Parameters   value:  U32  val   Returns   None  val    cpointer  Returns a C compatible pointer to the underlying string allocation.  fun box cpointer(\n  offset: USize val = 0)\n: Pointer[U8 val] tag  Parameters   offset:  USize  val = 0   Returns   Pointer [ U8  val] tag    cstring  Returns a C compatible pointer to a null-terminated version of the\nstring, safe to pass to an FFI function that doesn't accept a size\nargument, expecting a null-terminator. If the underlying string\nis already null terminated, this is returned; otherwise the string\nis copied into a new, null-terminated allocation.  fun box cstring()\n: Pointer[U8 val] tag  Returns   Pointer [ U8  val] tag    array  Returns an Array[U8] that that reuses the underlying data pointer.  fun val array()\n: Array[U8 val] val  Returns   Array [ U8  val] val    size  Returns the length of the string data in bytes.  fun box size()\n: USize val  Returns   USize  val    codepoints  Returns the number of unicode code points in the string between the two\noffsets. Index range [ from  ..  to ) is half-open.  fun box codepoints(\n  from: ISize val = 0,\n  to: ISize val = call)\n: USize val  Parameters   from:  ISize  val = 0  to:  ISize  val = call   Returns   USize  val    space  Returns the space available for data, not including the null terminator.  fun box space()\n: USize val  Returns   USize  val    reserve  Reserve space for len bytes. An additional byte will be reserved for the\nnull terminator.  fun ref reserve(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    compact  Try to remove unused space, making it available for garbage collection. The\nrequest may be ignored. The string is returned to allow call chaining.  fun ref compact()\n: None val  Returns   None  val    recalc  Recalculates the string length. This is only needed if the string is\nchanged via an FFI call. If a null terminator byte is not found within the\nallocated length, the size will not be changed.  fun ref recalc()\n: None val  Returns   None  val    truncate  Truncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.\n\nNote that memory is not freed by this operation.  fun ref truncate(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    trim_in_place  Trim the string to a portion of itself, covering  from  until  to .\nUnlike slice, the operation does not allocate a new string nor copy\nelements.  fun ref trim_in_place(\n  from: USize val = 0,\n  to: USize val = call)\n: None val  Parameters   from:  USize  val = 0  to:  USize  val = call   Returns   None  val    trim  Return a shared portion of this string, covering  from  until  to .\nBoth the original and the new string are immutable, as they share memory.\nThe operation does not allocate a new string pointer nor copy elements.  fun val trim(\n  from: USize val = 0,\n  to: USize val = call)\n: String val  Parameters   from:  USize  val = 0  to:  USize  val = call   Returns   String  val    is_null_terminated  Return true if the string is null-terminated and safe to pass to an FFI\nfunction that doesn't accept a size argument, expecting a null-terminator.\nThis method checks that there is a null byte just after the final position\nof populated bytes in the string, but does not check for other null bytes\nwhich may be present earlier in the content of the string.\nIf you need a null-terminated copy of this string, use the clone method.  fun box is_null_terminated()\n: Bool val  Returns   Bool  val    utf32  Return a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.  fun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?  Parameters   offset:  ISize  val   Returns   ( U32  val ,  U8  val) ?    apply  Returns the i-th byte. Raise an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: U8 val ?  Parameters   i:  USize  val   Returns   U8  val ?    update  Change the i-th byte. Raise an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?  Parameters   i:  USize  val  value:  U8  val   Returns   U8  val ?    at_offset  Returns the byte at the given offset. Raise an error if the offset is out\nof bounds.  fun box at_offset(\n  offset: ISize val)\n: U8 val ?  Parameters   offset:  ISize  val   Returns   U8  val ?    update_offset  Changes a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.  fun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?  Parameters   offset:  ISize  val  value:  U8  val   Returns   U8  val ?    clone  Returns a copy of the string. The resulting string is\nnull-terminated even if the original is not.  fun box clone()\n: String iso^  Returns   String  iso^    find  Return the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurrence of s or s is empty.  fun box find(\n  s: String box,\n  offset: ISize val = 0,\n  nth: USize val = 0)\n: ISize val ?  Parameters   s:  String  box  offset:  ISize  val = 0  nth:  USize  val = 0   Returns   ISize  val ?    rfind  Return the index of n-th instance of  s  in the string starting from the\nend. The  offset  represents the highest index to included in the search.\nRaise an error if there is no n-th occurrence of  s  or  s  is empty.  fun box rfind(\n  s: String box,\n  offset: ISize val = call,\n  nth: USize val = 0)\n: ISize val ?  Parameters   s:  String  box  offset:  ISize  val = call  nth:  USize  val = 0   Returns   ISize  val ?    contains  Returns true if contains s as a substring, false otherwise.  fun box contains(\n  s: String box,\n  offset: ISize val = 0,\n  nth: USize val = 0)\n: Bool val  Parameters   s:  String  box  offset:  ISize  val = 0  nth:  USize  val = 0   Returns   Bool  val    count  Counts the non-overlapping occurrences of s in the string.  fun box count(\n  s: String box,\n  offset: ISize val = 0)\n: USize val  Parameters   s:  String  box  offset:  ISize  val = 0   Returns   USize  val    at  Returns true if the substring s is present at the given offset.  fun box at(\n  s: String box,\n  offset: ISize val = 0)\n: Bool val  Parameters   s:  String  box  offset:  ISize  val = 0   Returns   Bool  val    delete  Delete len bytes at the supplied offset, compacting the string in place.  fun ref delete(\n  offset: ISize val,\n  len: USize val = 1)\n: None val  Parameters   offset:  ISize  val  len:  USize  val = 1   Returns   None  val    substring  Returns a substring. Index range [`from` .. `to`) is half-open.\nReturns an empty string if nothing is in the range.\n\nNote that this operation allocates a new string to be returned. For\nsimilar operations that don't allocate a new string, see `trim` and\n`trim_in_place`.  fun box substring(\n  from: ISize val,\n  to: ISize val = call)\n: String iso^  Parameters   from:  ISize  val  to:  ISize  val = call   Returns   String  iso^    lower  Returns a lower case version of the string.  fun box lower()\n: String iso^  Returns   String  iso^    lower_in_place  Transforms the string to lower case. Currently only knows ASCII case.  fun ref lower_in_place()\n: None val  Returns   None  val    upper  Returns an upper case version of the string. Currently only knows ASCII\ncase.  fun box upper()\n: String iso^  Returns   String  iso^    upper_in_place  Transforms the string to upper case.  fun ref upper_in_place()\n: None val  Returns   None  val    reverse  Returns a reversed version of the string.  fun box reverse()\n: String iso^  Returns   String  iso^    reverse_in_place  Reverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.  fun ref reverse_in_place()\n: None val  Returns   None  val    push  Add a byte to the end of the string.  fun ref push(\n  value: U8 val)\n: None val  Parameters   value:  U8  val   Returns   None  val    pop  Remove a byte from the end of the string.  fun ref pop()\n: U8 val ?  Returns   U8  val ?    unshift  Adds a byte to the beginning of the string.  fun ref unshift(\n  value: U8 val)\n: None val  Parameters   value:  U8  val   Returns   None  val    shift  Removes a byte from the beginning of the string.  fun ref shift()\n: U8 val ?  Returns   U8  val ?    append  Append the elements from a sequence, starting from the given offset.  fun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val  Parameters   seq:  ReadSeq [ U8  val] box  offset:  USize  val = 0  len:  USize  val = call   Returns   None  val    concat  Add len iterated bytes to the end of the string, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val  Parameters   iter:  Iterator [ U8  val] ref  offset:  USize  val = 0  len:  USize  val = call   Returns   None  val    clear  Truncate the string to zero length.  fun ref clear()\n: None val  Returns   None  val    insert  Returns a version of the string with the given string inserted at the given\noffset.  fun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^  Parameters   offset:  ISize  val  that:  String  val   Returns   String  iso^    insert_in_place  Inserts the given string at the given offset. Appends the string if the\noffset is out of bounds.  fun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val  Parameters   offset:  ISize  val  that:  String  box   Returns   None  val    insert_byte  Inserts a byte at the given offset. Appends if the offset is out of bounds.  fun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val  Parameters   offset:  ISize  val  value:  U8  val   Returns   None  val    cut  Returns a version of the string with the given range deleted.\nIndex range [ from  ..  to ) is half-open.  fun box cut(\n  from: ISize val,\n  to: ISize val = call)\n: String iso^  Parameters   from:  ISize  val  to:  ISize  val = call   Returns   String  iso^    cut_in_place  Cuts the given range out of the string.\nIndex range [ from  ..  to ) is half-open.  fun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = call)\n: None val  Parameters   from:  ISize  val  to:  ISize  val = call   Returns   None  val    remove  Remove all instances of s from the string. Returns the count of removed\ninstances.  fun ref remove(\n  s: String box)\n: USize val  Parameters   s:  String  box   Returns   USize  val    replace  Replace up to n occurrences of  from  in  this  with  to . If n is 0, all\noccurrences will be replaced. Returns the count of replaced occurrences.  fun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = 0)\n: USize val  Parameters   from:  String  box  to:  String  box  n:  USize  val = 0   Returns   USize  val    split_by  Split the string into an array of strings that are delimited by `delim` in\nthe original string. If `n > 0`, then the split count is limited to n.\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`.\n\nAn empty delimiter results in an array that contains a single element equal\nto the whole string.  fun box split_by(\n  delim: String val,\n  n: USize val = call)\n: Array[String val] iso^  Parameters   delim:  String  val  n:  USize  val = call   Returns   Array [ String  val] iso^    split  Split the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If `n > 0`, then the split count is\nlimited to n.\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`.  fun box split(\n  delim: String val= \"  \u000b\f\n\",\n  n: USize val = 0)\n: Array[String val] iso^  Parameters   delim:  String  val= \"  \u000b\f\n\"  n:  USize  val = 0   Returns   Array [ String  val] iso^    strip  Remove all leading and trailing characters from the string that are in s.  fun ref strip(\n  s: String box= \"  \u000b\f\n\")\n: None val  Parameters   s:  String  box= \"  \u000b\f\n\"   Returns   None  val    rstrip  Remove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.  fun ref rstrip(\n  s: String box= \"  \u000b\f\n\")\n: None val  Parameters   s:  String  box= \"  \u000b\f\n\"   Returns   None  val    lstrip  Remove all leading characters within the string that are in s. By default,\nleading whitespace is removed.  fun ref lstrip(\n  s: String box= \"  \u000b\f\n\")\n: None val  Parameters   s:  String  box= \"  \u000b\f\n\"   Returns   None  val    add  Return a string that is a concatenation of this and that.  fun box add(\n  that: String box)\n: String val  Parameters   that:  String  box   Returns   String  val    join  Return a string that is a concatenation of the strings in data, using this\nas a separator.  fun box join(\n  data: ReadSeq[Stringable box] box)\n: String iso^  Parameters   data:  ReadSeq [ Stringable  box] box   Returns   String  iso^    compare  Lexically compare two strings.  fun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)  Parameters   that:  String  box   Returns   ( Less  val |  Equal  val |  Greater  val)    compare_sub  Lexically compare at most `n` bytes of the substring of `this` starting at\n`offset` with the substring of `that` starting at `that_offset`. The\ncomparison is case sensitive unless `ignore_case` is `true`.\n\nIf the substring of `this` is a proper prefix of the substring of `that`,\nthen `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of\n`this`, then `this` is `Greater` than `that`.\n\nBoth `offset` and `that_offset` can be negative, in which case the offsets\nare computed from the end of the string.\n\nIf `n + offset` is greater than the length of `this`, or `n + that_offset`\nis greater than the length of `that`, then the number of positions compared\nwill be reduced to the length of the longest substring.\n\nNeeds to be made UTF-8 safe.  fun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = 0,\n  that_offset: ISize val = 0,\n  ignore_case: Bool val = false)\n: (Less val | Equal val | Greater val)  Parameters   that:  String  box  n:  USize  val  offset:  ISize  val = 0  that_offset:  ISize  val = 0  ignore_case:  Bool  val = false   Returns   ( Less  val |  Equal  val |  Greater  val)    eq  Returns true if the two strings have the same contents.  fun box eq(\n  that: String box)\n: Bool val  Parameters   that:  String  box   Returns   Bool  val    lt  Returns true if this is lexically less than that. Needs to be made UTF-8\nsafe.  fun box lt(\n  that: String box)\n: Bool val  Parameters   that:  String  box   Returns   Bool  val    le  Returns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.  fun box le(\n  that: String box)\n: Bool val  Parameters   that:  String  box   Returns   Bool  val    offset_to_index  fun box offset_to_index(\n  i: ISize val)\n: USize val  Parameters   i:  ISize  val   Returns   USize  val    bool  fun box bool()\n: Bool val ?  Returns   Bool  val ?    i8  fun box i8(\n  base: U8 val = 0)\n: I8 val ?  Parameters   base:  U8  val = 0   Returns   I8  val ?    i16  fun box i16(\n  base: U8 val = 0)\n: I16 val ?  Parameters   base:  U8  val = 0   Returns   I16  val ?    i32  fun box i32(\n  base: U8 val = 0)\n: I32 val ?  Parameters   base:  U8  val = 0   Returns   I32  val ?    i64  fun box i64(\n  base: U8 val = 0)\n: I64 val ?  Parameters   base:  U8  val = 0   Returns   I64  val ?    i128  fun box i128(\n  base: U8 val = 0)\n: I128 val ?  Parameters   base:  U8  val = 0   Returns   I128  val ?    ilong  fun box ilong(\n  base: U8 val = 0)\n: ILong val ?  Parameters   base:  U8  val = 0   Returns   ILong  val ?    isize  fun box isize(\n  base: U8 val = 0)\n: ISize val ?  Parameters   base:  U8  val = 0   Returns   ISize  val ?    u8  fun box u8(\n  base: U8 val = 0)\n: U8 val ?  Parameters   base:  U8  val = 0   Returns   U8  val ?    u16  fun box u16(\n  base: U8 val = 0)\n: U16 val ?  Parameters   base:  U8  val = 0   Returns   U16  val ?    u32  fun box u32(\n  base: U8 val = 0)\n: U32 val ?  Parameters   base:  U8  val = 0   Returns   U32  val ?    u64  fun box u64(\n  base: U8 val = 0)\n: U64 val ?  Parameters   base:  U8  val = 0   Returns   U64  val ?    u128  fun box u128(\n  base: U8 val = 0)\n: U128 val ?  Parameters   base:  U8  val = 0   Returns   U128  val ?    ulong  fun box ulong(\n  base: U8 val = 0)\n: ULong val ?  Parameters   base:  U8  val = 0   Returns   ULong  val ?    usize  fun box usize(\n  base: U8 val = 0)\n: USize val ?  Parameters   base:  U8  val = 0   Returns   USize  val ?    read_int[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val) & [Integer](builtin-Integer)\\[A val\\] val)\\]  Read an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.  fun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A val] val)](\n  offset: ISize val = 0,\n  base: U8 val = 0)\n: (A val , USize val) ?  Parameters   offset:  ISize  val = 0  base:  U8  val = 0   Returns   (A val ,  USize  val) ?    f32  fun box f32(\n  offset: ISize val = 0)\n: F32 val  Parameters   offset:  ISize  val = 0   Returns   F32  val    f64  fun box f64(\n  offset: ISize val = 0)\n: F64 val  Parameters   offset:  ISize  val = 0   Returns   F64  val    hash  fun box hash()\n: U64 val  Returns   U64  val    string  fun box string()\n: String iso^  Returns   String  iso^    values  Return an iterator over the bytes in the string.  fun box values()\n: StringBytes ref^  Returns   StringBytes  ref^    runes  Return an iterator over the codepoints in the string.  fun box runes()\n: StringRunes ref^  Returns   StringRunes  ref^    ge  fun box ge(\n  that: String box)\n: Bool val  Parameters   that:  String  box   Returns   Bool  val    gt  fun box gt(\n  that: String box)\n: Bool val  Parameters   that:  String  box   Returns   Bool  val    ne  fun box ne(\n  that: String box)\n: Bool val  Parameters   that:  String  box   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-String/#private-functions",
            "text": "_copy_to  Copy copy_len characters from this to that at specified offsets.  fun box _copy_to(\n  ptr: Pointer[U8 val] ref,\n  copy_len: USize val,\n  from_offset: USize val = 0,\n  to_offset: USize val = 0)\n: None val  Parameters   ptr:  Pointer [ U8  val] ref  copy_len:  USize  val  from_offset:  USize  val = 0  to_offset:  USize  val = 0   Returns   None  val    _append  fun iso _append(\n  s: String box)\n: String iso^  Parameters   s:  String  box   Returns   String  iso^    _to_int[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val) & [Integer](builtin-Integer)\\[A val\\] val)\\]  Convert the  whole  string to the specified type.\nIf there are any other characters in the string, or the integer found is\nout of range for the target type then an error is thrown.  fun box _to_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A val] val)](\n  base: U8 val)\n: A val ?  Parameters   base:  U8  val   Returns   A val ?    _read_int_base[A: (( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val) & [Integer](builtin-Integer)\\[A val\\] val)\\]  Determine the base of an integer starting at the specified index.\nIf a non-0 base is given use that. If given base is 0 read the base\nspecifying prefix, if any, to detect base 2 or 16.\nIf no base is specified and no prefix is found default to decimal.\nNote that a leading 0 does NOT imply octal.\nReport the base found and the number of characters in the prefix.  fun box _read_int_base[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A val] val)](\n  base: U8 val,\n  index: USize val)\n: (A val , USize val)  Parameters   base:  U8  val  index:  USize  val   Returns   (A val ,  USize  val)    _set  Unsafe update, used internally.  fun ref _set(\n  i: USize val,\n  value: U8 val)\n: U8 val  Parameters   i:  USize  val  value:  U8  val   Returns   U8  val",
            "title": "Private Functions"
        },
        {
            "location": "/builtin-StringBytes/",
            "text": "StringBytes\n\n\nclass ref StringBytes is\n  Iterator[U8 val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[\nU8\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  string: String box)\n: StringBytes ref^\n\n\n\n\nParameters\n\n\n\n\nstring: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nStringBytes\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: U8 val ?\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?",
            "title": "class StringBytes"
        },
        {
            "location": "/builtin-StringBytes/#stringbytes",
            "text": "class ref StringBytes is\n  Iterator[U8 val] ref  Implements   Iterator [ U8  val] ref",
            "title": "StringBytes"
        },
        {
            "location": "/builtin-StringBytes/#constructors",
            "text": "create  new ref create(\n  string: String box)\n: StringBytes ref^  Parameters   string:  String  box   Returns   StringBytes  ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StringBytes/#public-functions",
            "text": "has_next  fun box has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: U8 val ?  Returns   U8  val ?",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-StringRunes/",
            "text": "StringRunes\n\n\nclass ref StringRunes is\n  Iterator[U32 val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[\nU32\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  string: String box)\n: StringRunes ref^\n\n\n\n\nParameters\n\n\n\n\nstring: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nStringRunes\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: U32 val ?\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?",
            "title": "class StringRunes"
        },
        {
            "location": "/builtin-StringRunes/#stringrunes",
            "text": "class ref StringRunes is\n  Iterator[U32 val] ref  Implements   Iterator [ U32  val] ref",
            "title": "StringRunes"
        },
        {
            "location": "/builtin-StringRunes/#constructors",
            "text": "create  new ref create(\n  string: String box)\n: StringRunes ref^  Parameters   string:  String  box   Returns   StringRunes  ref^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StringRunes/#public-functions",
            "text": "has_next  fun box has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: U32 val ?  Returns   U32  val ?",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-_UTF32Encoder/",
            "text": "_UTF32Encoder\n\n\nprimitive val _UTF32Encoder\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _UTF32Encoder val^\n\n\n\n\nReturns\n\n\n\n\n_UTF32Encoder\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nencode\n\n\nEncode the code point into UTF-8. It returns a tuple with the size of the\nencoded data and then the data.\n\n\nfun box encode(\n  value: U32 val)\n: (USize val , U8 val , U8 val , U8 val , U8 val)\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nU8\n val , \nU8\n val , \nU8\n val , \nU8\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _UTF32Encoder val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_UTF32Encoder\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _UTF32Encoder val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_UTF32Encoder\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive _UTF32Encoder"
        },
        {
            "location": "/builtin-_UTF32Encoder/#_utf32encoder",
            "text": "primitive val _UTF32Encoder",
            "title": "_UTF32Encoder"
        },
        {
            "location": "/builtin-_UTF32Encoder/#constructors",
            "text": "create  new val create()\n: _UTF32Encoder val^  Returns   _UTF32Encoder  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-_UTF32Encoder/#public-functions",
            "text": "encode  Encode the code point into UTF-8. It returns a tuple with the size of the\nencoded data and then the data.  fun box encode(\n  value: U32 val)\n: (USize val , U8 val , U8 val , U8 val , U8 val)  Parameters   value:  U32  val   Returns   ( USize  val ,  U8  val ,  U8  val ,  U8  val ,  U8  val)    eq  fun box eq(\n  that: _UTF32Encoder val)\n: Bool val  Parameters   that:  _UTF32Encoder  val   Returns   Bool  val    ne  fun box ne(\n  that: _UTF32Encoder val)\n: Bool val  Parameters   that:  _UTF32Encoder  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-None/",
            "text": "None\n\n\nprimitive val None is\n  Stringable box\n\n\n\n\nImplements\n\n\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: None val^\n\n\n\n\nReturns\n\n\n\n\nNone\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNone\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNone\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive None"
        },
        {
            "location": "/builtin-None/#none",
            "text": "primitive val None is\n  Stringable box  Implements   Stringable  box",
            "title": "None"
        },
        {
            "location": "/builtin-None/#constructors",
            "text": "create  new val create()\n: None val^  Returns   None  val^",
            "title": "Constructors"
        },
        {
            "location": "/builtin-None/#public-functions",
            "text": "string  fun box string()\n: String iso^  Returns   String  iso^    eq  fun box eq(\n  that: None val)\n: Bool val  Parameters   that:  None  val   Returns   Bool  val    ne  fun box ne(\n  that: None val)\n: Bool val  Parameters   that:  None  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections--index/",
            "text": "No package doc string provided for collections.\n\n\nPublic Types\n\n\n\n\nprimitive Sort\n\n\nclass ListNode\n\n\nclass Range\n\n\ntype Map\n\n\ntype MapIs\n\n\nclass HashMap\n\n\nclass MapKeys\n\n\nclass MapValues\n\n\nclass MapPairs\n\n\ninterface Flag\n\n\nclass Flags\n\n\nclass RingBuffer\n\n\ntype Set\n\n\ntype SetIs\n\n\nclass HashSet\n\n\nclass SetValues\n\n\nclass List\n\n\nclass ListNodes\n\n\nclass ListValues\n\n\nclass Reverse\n\n\ninterface Hashable\n\n\ninterface HashFunction\n\n\nprimitive HashEq\n\n\nprimitive HashIs\n\n\nprimitive HashByteSeq\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _MapEmpty\n\n\nprimitive _MapDeleted",
            "title": "Package"
        },
        {
            "location": "/collections--index/#public-types",
            "text": "primitive Sort  class ListNode  class Range  type Map  type MapIs  class HashMap  class MapKeys  class MapValues  class MapPairs  interface Flag  class Flags  class RingBuffer  type Set  type SetIs  class HashSet  class SetValues  class List  class ListNodes  class ListValues  class Reverse  interface Hashable  interface HashFunction  primitive HashEq  primitive HashIs  primitive HashByteSeq",
            "title": "Public Types"
        },
        {
            "location": "/collections--index/#private-types",
            "text": "primitive _MapEmpty  primitive _MapDeleted",
            "title": "Private Types"
        },
        {
            "location": "/collections-Sort/",
            "text": "Sort[A: \nSeq\n[B #read] ref, B: \nComparable\n[B #read] #read]\n\n\nImplementation of dual-pivot quicksort.\n\n\nprimitive val Sort[A: Seq[B #read] ref, B: Comparable[B #read] #read]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Sort[A ref, B #read] val^\n\n\n\n\nReturns\n\n\n\n\nSort\n[A ref, B #read] val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nSort the given seq.\n\n\nfun box apply(\n  a: A ref)\n: A ref^\n\n\n\n\nParameters\n\n\n\n\na: A ref\n\n\n\n\nReturns\n\n\n\n\nA ref^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Sort[A ref, B #read] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSort\n[A ref, B #read] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Sort[A ref, B #read] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSort\n[A ref, B #read] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_sort\n\n\nfun box _sort(\n  a: A ref,\n  lo: ISize val,\n  hi: ISize val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\na: A ref\n\n\nlo: \nISize\n val\n\n\nhi: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_swap\n\n\nfun box _swap(\n  a: A ref,\n  i: ISize val,\n  j: ISize val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\na: A ref\n\n\ni: \nISize\n val\n\n\nj: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?",
            "title": "primitive Sort"
        },
        {
            "location": "/collections-Sort/#sort91a-seq91b-read93-ref-b-comparable91b-read93-read93",
            "text": "Implementation of dual-pivot quicksort.  primitive val Sort[A: Seq[B #read] ref, B: Comparable[B #read] #read]",
            "title": "Sort[A: Seq[B #read] ref, B: Comparable[B #read] #read]"
        },
        {
            "location": "/collections-Sort/#constructors",
            "text": "create  new val create()\n: Sort[A ref, B #read] val^  Returns   Sort [A ref, B #read] val^",
            "title": "Constructors"
        },
        {
            "location": "/collections-Sort/#public-functions",
            "text": "apply  Sort the given seq.  fun box apply(\n  a: A ref)\n: A ref^  Parameters   a: A ref   Returns   A ref^    eq  fun box eq(\n  that: Sort[A ref, B #read] val)\n: Bool val  Parameters   that:  Sort [A ref, B #read] val   Returns   Bool  val    ne  fun box ne(\n  that: Sort[A ref, B #read] val)\n: Bool val  Parameters   that:  Sort [A ref, B #read] val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Sort/#private-functions",
            "text": "_sort  fun box _sort(\n  a: A ref,\n  lo: ISize val,\n  hi: ISize val)\n: None val ?  Parameters   a: A ref  lo:  ISize  val  hi:  ISize  val   Returns   None  val ?    _swap  fun box _swap(\n  a: A ref,\n  i: ISize val,\n  j: ISize val)\n: None val ?  Parameters   a: A ref  i:  ISize  val  j:  ISize  val   Returns   None  val ?",
            "title": "Private Functions"
        },
        {
            "location": "/collections-ListNode/",
            "text": "ListNode[A: A]\n\n\nA node in a list.\n\n\nclass ref ListNode[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  item: (A | None val) = reference)\n: ListNode[A] ref^\n\n\n\n\nParameters\n\n\n\n\nitem: (A | \nNone\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nListNode\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nReturn the item, if we have one, otherwise raise an error.\n\n\nfun box apply()\n: this->A ?\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\n\nReplace the item and return the previous one. Raise an error if we have no\nprevious value.\n\n\nfun ref update(\n  value: (A | None val))\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\nvalue: (A | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\npop\n\n\nRemove the item from the node, if we have one, otherwise raise an error.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nprepend\n\n\nPrepend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is prepended. Returns true if \nthat\n was removed from another\nlist.\n\n\nfun ref prepend(\n  that: ListNode[A] ref)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\n\nAppend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is appended. Returns true if \nthat\n was removed from another\nlist.\n\n\nfun ref append(\n  that: ListNode[A] ref)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nremove\n\n\nRemove a node from a list.\n\n\nfun ref remove()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhas_prev\n\n\nReturn true if there is a previous node.\n\n\nfun box has_prev()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhas_next\n\n\nReturn true if there is a next node.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nprev\n\n\nReturn the previous node.\n\n\nfun box prev()\n: (this->ListNode[A] ref | None val)\n\n\n\n\nReturns\n\n\n\n\n(this->\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\n\n\nnext\n\n\nReturn the next node.\n\n\nfun box next()\n: (this->ListNode[A] ref | None val)\n\n\n\n\nReturns\n\n\n\n\n(this->\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_set_list\n\n\nMake this node the only node on the given list.\n\n\nfun ref _set_list(\n  list: List[A] ref)\n: ListNode[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlist: \nList\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nListNode\n[A] ref^",
            "title": "class ListNode"
        },
        {
            "location": "/collections-ListNode/#listnode91a-a93",
            "text": "A node in a list.  class ref ListNode[A: A]",
            "title": "ListNode[A: A]"
        },
        {
            "location": "/collections-ListNode/#constructors",
            "text": "create  new ref create(\n  item: (A | None val) = reference)\n: ListNode[A] ref^  Parameters   item: (A |  None  val) = reference   Returns   ListNode [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListNode/#public-functions",
            "text": "apply  Return the item, if we have one, otherwise raise an error.  fun box apply()\n: this->A ?  Returns   this->A ?    update  Replace the item and return the previous one. Raise an error if we have no\nprevious value.  fun ref update(\n  value: (A | None val))\n: A^ ?  Parameters   value: (A |  None  val)   Returns   A^ ?    pop  Remove the item from the node, if we have one, otherwise raise an error.  fun ref pop()\n: A^ ?  Returns   A^ ?    prepend  Prepend a node to this one. If  that  is already in a list, it is removed\nbefore it is prepended. Returns true if  that  was removed from another\nlist.  fun ref prepend(\n  that: ListNode[A] ref)\n: Bool val  Parameters   that:  ListNode [A] ref   Returns   Bool  val    append  Append a node to this one. If  that  is already in a list, it is removed\nbefore it is appended. Returns true if  that  was removed from another\nlist.  fun ref append(\n  that: ListNode[A] ref)\n: Bool val  Parameters   that:  ListNode [A] ref   Returns   Bool  val    remove  Remove a node from a list.  fun ref remove()\n: None val  Returns   None  val    has_prev  Return true if there is a previous node.  fun box has_prev()\n: Bool val  Returns   Bool  val    has_next  Return true if there is a next node.  fun box has_next()\n: Bool val  Returns   Bool  val    prev  Return the previous node.  fun box prev()\n: (this->ListNode[A] ref | None val)  Returns   (this-> ListNode [A] ref |  None  val)    next  Return the next node.  fun box next()\n: (this->ListNode[A] ref | None val)  Returns   (this-> ListNode [A] ref |  None  val)",
            "title": "Public Functions"
        },
        {
            "location": "/collections-ListNode/#private-functions",
            "text": "_set_list  Make this node the only node on the given list.  fun ref _set_list(\n  list: List[A] ref)\n: ListNode[A] ref^  Parameters   list:  List [A] ref   Returns   ListNode [A] ref^",
            "title": "Private Functions"
        },
        {
            "location": "/collections-Range/",
            "text": "Range[optional A: (\nReal\n[A val] val & (\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val))\\]\n\n\n\nProduces [min, max).\n\n\nclass ref Range[optional A: (Real[A val] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  min: A val,\n  max: A val,\n  inc: A val = 1)\n: Range[A val] ref^\n\n\n\n\nParameters\n\n\n\n\nmin: A val\n\n\nmax: A val\n\n\ninc: A val = 1\n\n\n\n\nReturns\n\n\n\n\nRange\n[A val] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nrewind\n\n\nfun ref rewind()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "class Range"
        },
        {
            "location": "/collections-Range/#range91optional-a-real91a-val93-val-i8-val-i16-val-i32-val",
            "text": "[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val))\\]  Produces [min, max).  class ref Range[optional A: (Real[A val] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A val] ref  Implements   Iterator [A val] ref",
            "title": "Range[optional A: (Real[A val] val & (I8 val | I16 val | I32 val |"
        },
        {
            "location": "/collections-Range/#constructors",
            "text": "create  new ref create(\n  min: A val,\n  max: A val,\n  inc: A val = 1)\n: Range[A val] ref^  Parameters   min: A val  max: A val  inc: A val = 1   Returns   Range [A val] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-Range/#public-functions",
            "text": "has_next  fun box has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A val  Returns   A val    rewind  fun ref rewind()\n: None val  Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-_MapEmpty/",
            "text": "_MapEmpty\n\n\nprimitive val _MapEmpty\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _MapEmpty val^\n\n\n\n\nReturns\n\n\n\n\n_MapEmpty\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _MapEmpty val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MapEmpty\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _MapEmpty val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MapEmpty\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive _MapEmpty"
        },
        {
            "location": "/collections-_MapEmpty/#_mapempty",
            "text": "primitive val _MapEmpty",
            "title": "_MapEmpty"
        },
        {
            "location": "/collections-_MapEmpty/#constructors",
            "text": "create  new val create()\n: _MapEmpty val^  Returns   _MapEmpty  val^",
            "title": "Constructors"
        },
        {
            "location": "/collections-_MapEmpty/#public-functions",
            "text": "eq  fun box eq(\n  that: _MapEmpty val)\n: Bool val  Parameters   that:  _MapEmpty  val   Returns   Bool  val    ne  fun box ne(\n  that: _MapEmpty val)\n: Bool val  Parameters   that:  _MapEmpty  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-_MapDeleted/",
            "text": "_MapDeleted\n\n\nprimitive val _MapDeleted\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _MapDeleted val^\n\n\n\n\nReturns\n\n\n\n\n_MapDeleted\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _MapDeleted val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MapDeleted\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _MapDeleted val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MapDeleted\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive _MapDeleted"
        },
        {
            "location": "/collections-_MapDeleted/#_mapdeleted",
            "text": "primitive val _MapDeleted",
            "title": "_MapDeleted"
        },
        {
            "location": "/collections-_MapDeleted/#constructors",
            "text": "create  new val create()\n: _MapDeleted val^  Returns   _MapDeleted  val^",
            "title": "Constructors"
        },
        {
            "location": "/collections-_MapDeleted/#public-functions",
            "text": "eq  fun box eq(\n  that: _MapDeleted val)\n: Bool val  Parameters   that:  _MapDeleted  val   Returns   Bool  val    ne  fun box ne(\n  that: _MapDeleted val)\n: Bool val  Parameters   that:  _MapDeleted  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Map/",
            "text": "Map[K: (\nHashable\n #read & \nEquatable\n[K #read] #read), V: V]\n\n\nThis is a map that uses structural equality on the key.\n\n\ntype Map[K: (Hashable #read & Equatable[K #read] #read), V: V] is\n  HashMap[K #read, V, HashEq[K #read] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[K #read, V, \nHashEq\n[K #read] val] ref",
            "title": "type Map"
        },
        {
            "location": "/collections-Map/#map91k-hashable-read-equatable91k-read93-read-v-v93",
            "text": "This is a map that uses structural equality on the key.  type Map[K: (Hashable #read & Equatable[K #read] #read), V: V] is\n  HashMap[K #read, V, HashEq[K #read] val] ref  Type Alias For   HashMap [K #read, V,  HashEq [K #read] val] ref",
            "title": "Map[K: (Hashable #read & Equatable[K #read] #read), V: V]"
        },
        {
            "location": "/collections-MapIs/",
            "text": "MapIs[K: K, V: V]\n\n\nThis is a map that uses identity comparison on the key.\n\n\ntype MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[K, V, \nHashIs\n[K] val] ref",
            "title": "type MapIs"
        },
        {
            "location": "/collections-MapIs/#mapis91k-k-v-v93",
            "text": "This is a map that uses identity comparison on the key.  type MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref  Type Alias For   HashMap [K, V,  HashIs [K] val] ref",
            "title": "MapIs[K: K, V: V]"
        },
        {
            "location": "/collections-HashMap/",
            "text": "HashMap[K: K, V: V, H: \nHashFunction\n[K] val]\n\n\nA quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.\n\n\nclass ref HashMap[K: K, V: V, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  prealloc: USize val = 6)\n: HashMap[K, V, H val] ref^\n\n\n\n\nParameters\n\n\n\n\nprealloc: \nUSize\n val = 6\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[K, V, H val] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nThe number of items in the map.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nThe available space in the map. Resize will happen when\nsize / space >= 0.75.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nGets a value from the map. Raises an error if no such item exists.\n\n\nfun box apply(\n  key: box->K!)\n: this->V ?\n\n\n\n\nParameters\n\n\n\n\nkey: box->K!\n\n\n\n\nReturns\n\n\n\n\nthis->V ?\n\n\n\n\n\n\nupdate\n\n\nSets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.\n\n\nfun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\n\n\n\n(V^ | \nNone\n val)\n\n\n\n\n\n\nupsert\n\n\nCombines a provided value with the current value for the provided key\nusing the provided function. If the provided key has not been added to\nthe map yet, it sets its value to the provided value.\n\nAs a simple example, say we had a map with I64 values and we wanted to\nadd 4 to the current value for key \"test\", which let's say is currently 2.\nWe call\n\nm.upsert(\"test\", 4, {(x: I64, y: I64): I64 => x - y })\n\nThis changes the value associated with \"test\" to -2.\n\nIf we have not yet added the key \"new-key\" to the map and we call\n\nm.upsert(\"new-key\", 4, {(x: I64, y: I64): I64 => x - y })\n\nthen \"new-key\" is added to the map with a value of -4.\n\nReturns the value that we set the key to\n\n\n\nfun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H val] box)\n: V ?\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\nf: {(V, V): V^}[K, V, H val] box\n\n\n\n\nReturns\n\n\n\n\nV ?\n\n\n\n\n\n\ninsert\n\n\nSet a value in the map. Returns the new value, allowing reuse.\n\n\nfun ref insert(\n  key: K,\n  value: V)\n: V ?\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\n\n\n\nV ?\n\n\n\n\n\n\ninsert_if_absent\n\n\nSet a value in the map if the key doesn't already exist in the Map.\nSaves an extra lookup when doing a pattern like:\n\n```pony\nif not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend\n```\n\nReturns the value, the same as `insert`, allowing 'insert_if_absent'\nto be used as a drop-in replacement for `insert`.\n\n\n\nfun ref insert_if_absent(\n  key: K,\n  value: V)\n: V ?\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\n\n\n\nV ?\n\n\n\n\n\n\nremove\n\n\nDelete a value from the map and return it. Raises an error if there was no\nvalue for the given key.\n\n\nfun ref remove(\n  key: box->K!)\n: (K^ , V^) ?\n\n\n\n\nParameters\n\n\n\n\nkey: box->K!\n\n\n\n\nReturns\n\n\n\n\n(K^ , V^) ?\n\n\n\n\n\n\nget_or_else\n\n\nGet the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.\n\n\nfun box get_or_else(\n  key: box->K!,\n  alt: this->V)\n: this->V\n\n\n\n\nParameters\n\n\n\n\nkey: box->K!\n\n\nalt: this->V\n\n\n\n\nReturns\n\n\n\n\nthis->V\n\n\n\n\n\n\ncontains\n\n\nChecks whether the map contains the key k\n\n\nfun box contains(\n  k: box->K!)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nk: box->K!\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nconcat\n\n\nAdd K, V pairs from the iterator to the map.\n\n\nfun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[(K^ , V^)] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd[optional H2: \nHashFunction\n[this->K!] val]\n\n\nThis with the new (key, value) mapping.\n\n\nfun box add[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2 val] ref^\n\n\n\n\nParameters\n\n\n\n\nkey: this->K!\n\n\nvalue: this->V!\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[this->K!, this->V!, H2 val] ref^\n\n\n\n\n\n\nsub[optional H2: \nHashFunction\n[this->K!] val]\n\n\nThis without the given key.\n\n\nfun box sub[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2 val] ref^\n\n\n\n\nParameters\n\n\n\n\nkey: this->K!\n\n\nvalue: this->V!\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[this->K!, this->V!, H2 val] ref^\n\n\n\n\n\n\nnext_index\n\n\nGiven an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.\n\n\nfun box next_index(\n  prev: USize val = call)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nprev: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nindex\n\n\nReturns the key and value at a given index.\nRaise an error if the index is not populated.\n\n\nfun box index(\n  i: USize val)\n: (this->K , this->V) ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(this->K , this->V) ?\n\n\n\n\n\n\ncompact\n\n\nMinimise the memory used for the map.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclone[optional H2: \nHashFunction\n[this->K!] val]\n\n\nCreate a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.\n\n\nfun box clone[optional H2: HashFunction[this->K!] val]()\n: HashMap[this->K!, this->V!, H2 val] ref^\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[this->K!, this->V!, H2 val] ref^\n\n\n\n\n\n\nclear\n\n\nRemove all entries.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nkeys\n\n\nReturn an iterator over the keys.\n\n\nfun box keys()\n: MapKeys[K, V, H val, this->HashMap[K, V, H val] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nMapKeys\n[K, V, H val, this->\nHashMap\n[K, V, H val] ref] ref^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the values.\n\n\nfun box values()\n: MapValues[K, V, H val, this->HashMap[K, V, H val] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nMapValues\n[K, V, H val, this->\nHashMap\n[K, V, H val] ref] ref^\n\n\n\n\n\n\npairs\n\n\nReturn an iterator over the keys and values.\n\n\nfun box pairs()\n: MapPairs[K, V, H val, this->HashMap[K, V, H val] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nMapPairs\n[K, V, H val, this->\nHashMap\n[K, V, H val] ref] ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_search\n\n\nReturn a slot number and whether or not it's currently occupied.\n\n\nfun box _search(\n  key: box->K!)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\nkey: box->K!\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\n_resize\n\n\nChange the available space.\n\n\nfun ref _resize(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "class HashMap"
        },
        {
            "location": "/collections-HashMap/#hashmap91k-k-v-v-h-hashfunction91k93-val93",
            "text": "A quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.  class ref HashMap[K: K, V: V, H: HashFunction[K] val]",
            "title": "HashMap[K: K, V: V, H: HashFunction[K] val]"
        },
        {
            "location": "/collections-HashMap/#constructors",
            "text": "create  new ref create(\n  prealloc: USize val = 6)\n: HashMap[K, V, H val] ref^  Parameters   prealloc:  USize  val = 6   Returns   HashMap [K, V, H val] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashMap/#public-functions",
            "text": "size  The number of items in the map.  fun box size()\n: USize val  Returns   USize  val    space  The available space in the map. Resize will happen when\nsize / space >= 0.75.  fun box space()\n: USize val  Returns   USize  val    apply  Gets a value from the map. Raises an error if no such item exists.  fun box apply(\n  key: box->K!)\n: this->V ?  Parameters   key: box->K!   Returns   this->V ?    update  Sets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.  fun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)  Parameters   key: K  value: V   Returns   (V^ |  None  val)    upsert  Combines a provided value with the current value for the provided key\nusing the provided function. If the provided key has not been added to\nthe map yet, it sets its value to the provided value.\n\nAs a simple example, say we had a map with I64 values and we wanted to\nadd 4 to the current value for key \"test\", which let's say is currently 2.\nWe call\n\nm.upsert(\"test\", 4, {(x: I64, y: I64): I64 => x - y })\n\nThis changes the value associated with \"test\" to -2.\n\nIf we have not yet added the key \"new-key\" to the map and we call\n\nm.upsert(\"new-key\", 4, {(x: I64, y: I64): I64 => x - y })\n\nthen \"new-key\" is added to the map with a value of -4.\n\nReturns the value that we set the key to  fun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H val] box)\n: V ?  Parameters   key: K  value: V  f: {(V, V): V^}[K, V, H val] box   Returns   V ?    insert  Set a value in the map. Returns the new value, allowing reuse.  fun ref insert(\n  key: K,\n  value: V)\n: V ?  Parameters   key: K  value: V   Returns   V ?    insert_if_absent  Set a value in the map if the key doesn't already exist in the Map.\nSaves an extra lookup when doing a pattern like:\n\n```pony\nif not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend\n```\n\nReturns the value, the same as `insert`, allowing 'insert_if_absent'\nto be used as a drop-in replacement for `insert`.  fun ref insert_if_absent(\n  key: K,\n  value: V)\n: V ?  Parameters   key: K  value: V   Returns   V ?    remove  Delete a value from the map and return it. Raises an error if there was no\nvalue for the given key.  fun ref remove(\n  key: box->K!)\n: (K^ , V^) ?  Parameters   key: box->K!   Returns   (K^ , V^) ?    get_or_else  Get the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.  fun box get_or_else(\n  key: box->K!,\n  alt: this->V)\n: this->V  Parameters   key: box->K!  alt: this->V   Returns   this->V    contains  Checks whether the map contains the key k  fun box contains(\n  k: box->K!)\n: Bool val  Parameters   k: box->K!   Returns   Bool  val    concat  Add K, V pairs from the iterator to the map.  fun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val  Parameters   iter:  Iterator [(K^ , V^)] ref   Returns   None  val    add[optional H2:  HashFunction [this->K!] val]  This with the new (key, value) mapping.  fun box add[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2 val] ref^  Parameters   key: this->K!  value: this->V!   Returns   HashMap [this->K!, this->V!, H2 val] ref^    sub[optional H2:  HashFunction [this->K!] val]  This without the given key.  fun box sub[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2 val] ref^  Parameters   key: this->K!  value: this->V!   Returns   HashMap [this->K!, this->V!, H2 val] ref^    next_index  Given an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.  fun box next_index(\n  prev: USize val = call)\n: USize val ?  Parameters   prev:  USize  val = call   Returns   USize  val ?    index  Returns the key and value at a given index.\nRaise an error if the index is not populated.  fun box index(\n  i: USize val)\n: (this->K , this->V) ?  Parameters   i:  USize  val   Returns   (this->K , this->V) ?    compact  Minimise the memory used for the map.  fun ref compact()\n: None val  Returns   None  val    clone[optional H2:  HashFunction [this->K!] val]  Create a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.  fun box clone[optional H2: HashFunction[this->K!] val]()\n: HashMap[this->K!, this->V!, H2 val] ref^  Returns   HashMap [this->K!, this->V!, H2 val] ref^    clear  Remove all entries.  fun ref clear()\n: None val  Returns   None  val    keys  Return an iterator over the keys.  fun box keys()\n: MapKeys[K, V, H val, this->HashMap[K, V, H val] ref] ref^  Returns   MapKeys [K, V, H val, this-> HashMap [K, V, H val] ref] ref^    values  Return an iterator over the values.  fun box values()\n: MapValues[K, V, H val, this->HashMap[K, V, H val] ref] ref^  Returns   MapValues [K, V, H val, this-> HashMap [K, V, H val] ref] ref^    pairs  Return an iterator over the keys and values.  fun box pairs()\n: MapPairs[K, V, H val, this->HashMap[K, V, H val] ref] ref^  Returns   MapPairs [K, V, H val, this-> HashMap [K, V, H val] ref] ref^",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashMap/#private-functions",
            "text": "_search  Return a slot number and whether or not it's currently occupied.  fun box _search(\n  key: box->K!)\n: (USize val , Bool val)  Parameters   key: box->K!   Returns   ( USize  val ,  Bool  val)    _resize  Change the available space.  fun ref _resize(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val",
            "title": "Private Functions"
        },
        {
            "location": "/collections-MapKeys/",
            "text": "MapKeys[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read]\n\n\nAn iterator over the keys in a map.\n\n\nclass ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is\n  Iterator[M #read->K] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[M #read->K] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  map: M #read)\n: MapKeys[K, V, H val, M #read] ref^\n\n\n\n\nParameters\n\n\n\n\nmap: M #read\n\n\n\n\nReturns\n\n\n\n\nMapKeys\n[K, V, H val, M #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nReturns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.\n\n\nfun ref next()\n: M #read->K ?\n\n\n\n\nReturns\n\n\n\n\nM #read->K ?",
            "title": "class MapKeys"
        },
        {
            "location": "/collections-MapKeys/#mapkeys91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h-val93-read93",
            "text": "An iterator over the keys in a map.  class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is\n  Iterator[M #read->K] ref  Implements   Iterator [M #read->K] ref",
            "title": "MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read]"
        },
        {
            "location": "/collections-MapKeys/#constructors",
            "text": "create  new ref create(\n  map: M #read)\n: MapKeys[K, V, H val, M #read] ref^  Parameters   map: M #read   Returns   MapKeys [K, V, H val, M #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapKeys/#public-functions",
            "text": "has_next  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val  Returns   Bool  val    next  Returns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.  fun ref next()\n: M #read->K ?  Returns   M #read->K ?",
            "title": "Public Functions"
        },
        {
            "location": "/collections-MapValues/",
            "text": "MapValues[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read]\n\n\nAn iterator over the values in a map.\n\n\nclass ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is\n  Iterator[M #read->V] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[M #read->V] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  map: M #read)\n: MapValues[K, V, H val, M #read] ref^\n\n\n\n\nParameters\n\n\n\n\nmap: M #read\n\n\n\n\nReturns\n\n\n\n\nMapValues\n[K, V, H val, M #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.\n\n\nfun ref next()\n: M #read->V ?\n\n\n\n\nReturns\n\n\n\n\nM #read->V ?",
            "title": "class MapValues"
        },
        {
            "location": "/collections-MapValues/#mapvalues91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h-val93-read93",
            "text": "An iterator over the values in a map.  class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is\n  Iterator[M #read->V] ref  Implements   Iterator [M #read->V] ref",
            "title": "MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read]"
        },
        {
            "location": "/collections-MapValues/#constructors",
            "text": "create  new ref create(\n  map: M #read)\n: MapValues[K, V, H val, M #read] ref^  Parameters   map: M #read   Returns   MapValues [K, V, H val, M #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapValues/#public-functions",
            "text": "has_next  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val  Returns   Bool  val    next  Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.  fun ref next()\n: M #read->V ?  Returns   M #read->V ?",
            "title": "Public Functions"
        },
        {
            "location": "/collections-MapPairs/",
            "text": "MapPairs[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read]\n\n\nAn iterator over the keys and values in a map.\n\n\nclass ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is\n  Iterator[(M #read->K , M #read->V)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[(M #read->K , M #read->V)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  map: M #read)\n: MapPairs[K, V, H val, M #read] ref^\n\n\n\n\nParameters\n\n\n\n\nmap: M #read\n\n\n\n\nReturns\n\n\n\n\nMapPairs\n[K, V, H val, M #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nReturns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.\n\n\nfun ref next()\n: (M #read->K , M #read->V) ?\n\n\n\n\nReturns\n\n\n\n\n(M #read->K , M #read->V) ?",
            "title": "class MapPairs"
        },
        {
            "location": "/collections-MapPairs/#mappairs91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h-val93-read93",
            "text": "An iterator over the keys and values in a map.  class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read] is\n  Iterator[(M #read->K , M #read->V)] ref  Implements   Iterator [(M #read->K , M #read->V)] ref",
            "title": "MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H val] #read]"
        },
        {
            "location": "/collections-MapPairs/#constructors",
            "text": "create  new ref create(\n  map: M #read)\n: MapPairs[K, V, H val, M #read] ref^  Parameters   map: M #read   Returns   MapPairs [K, V, H val, M #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapPairs/#public-functions",
            "text": "has_next  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val  Returns   Bool  val    next  Returns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.  fun ref next()\n: (M #read->K , M #read->V) ?  Returns   (M #read->K , M #read->V) ?",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Flag/",
            "text": "Flag[A: ((\nU8\n val | \nU16\n val | \nU32\n val |\n\n\n[U64](builtin-U64) val | [U128](builtin-U128) val | [ULong](builtin-ULong) val | \n[USize](builtin-USize) val) & [Integer](builtin-Integer)\\[A val\\] val)\\]\n\n\n\nA flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.\n\n\ninterface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[A val] val)]\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val",
            "title": "interface Flag"
        },
        {
            "location": "/collections-Flag/#flag91a-u8-val-u16-val-u32-val",
            "text": "[U64](builtin-U64) val | [U128](builtin-U128) val | [ULong](builtin-ULong) val | \n[USize](builtin-USize) val) & [Integer](builtin-Integer)\\[A val\\] val)\\]  A flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.  interface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[A val] val)]",
            "title": "Flag[A: ((U8 val | U16 val | U32 val |"
        },
        {
            "location": "/collections-Flag/#public-functions",
            "text": "value  fun box value()\n: A val  Returns   A val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Flags/",
            "text": "Flags[A: \nFlag\n[B val] val, optional B: ((\nU8\n val | \nU16\n val | \nU32\n val |\n\n\n[U64](builtin-U64) val | [U128](builtin-U128) val | [ULong](builtin-ULong) val | \n[USize](builtin-USize) val) & [Integer](builtin-Integer)\\[B val\\] val)\\]\n\n\n\nFlags is a set of flags. The flags that are recognised should be passed as\n  a union type for type parameter A. For example:\n\n\nprimitive SSE\n    fun value(): U64 => 1\n\n\nprimitive AVX\n    fun value(): U64 => 2\n\n\nprimitive RDTSCP\n    fun value(): U64 => 4\n\n\ntype Features is Flags[(SSE | AVX | RDTSCP)]\n\n\nType parameter B is the unlying field used to store the flags.\n\n\nclass ref Flags[A: Flag[B val] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[B val] val)] is\n  Comparable[Flags[A val, B val] box] ref\n\n\n\n\nImplements\n\n\n\n\nComparable\n[\nFlags\n[A val, B val] box] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: Flags[A val, B val] iso^\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A val, B val] iso^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nReturns the bit encoding of the set flags.\n\n\nfun box value()\n: B val\n\n\n\n\nReturns\n\n\n\n\nB val\n\n\n\n\n\n\napply\n\n\nReturns true if the flag is set.\n\n\nfun box apply(\n  flag: A val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nflag: A val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nall\n\n\nSets all bits, including undefined flags.\n\n\nfun ref all()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\n\nUnsets all flags.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset\n\n\nSets the flag.\n\n\nfun ref set(\n  flag: A val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nflag: A val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\n\nUnsets the flag.\n\n\nfun ref unset(\n  flag: A val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nflag: A val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nflip\n\n\nSets the flag if it is unset, unsets the flag if it is set.\n\n\nfun ref flip(\n  flag: A val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nflag: A val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunion\n\n\nThe union of this and that.\n\n\nfun ref union(\n  that: Flags[A val, B val] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nintersect\n\n\nThe intersection of this and that.\n\n\nfun ref intersect(\n  that: Flags[A val, B val] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndifference\n\n\nThe symmetric difference of this and that.\n\n\nfun ref difference(\n  that: Flags[A val, B val] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nUnset flags that are set in that.\n\n\nfun ref remove(\n  that: Flags[A val, B val] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd\n\n\nThis with the flag set.\n\n\nfun box add(\n  flag: A val)\n: Flags[A val, B val] iso^\n\n\n\n\nParameters\n\n\n\n\nflag: A val\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A val, B val] iso^\n\n\n\n\n\n\nsub\n\n\nThis with the flag unset.\n\n\nfun box sub(\n  flag: A val)\n: Flags[A val, B val] iso^\n\n\n\n\nParameters\n\n\n\n\nflag: A val\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A val, B val] iso^\n\n\n\n\n\n\nop_or\n\n\nThe union of this and that.\n\n\nfun box op_or(\n  that: Flags[A val, B val] box)\n: Flags[A val, B val] iso^\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A val, B val] iso^\n\n\n\n\n\n\nop_and\n\n\nThe intersection of this and that.\n\n\nfun box op_and(\n  that: Flags[A val, B val] box)\n: Flags[A val, B val] iso^\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A val, B val] iso^\n\n\n\n\n\n\nop_xor\n\n\nThe symmetric difference of this and that.\n\n\nfun box op_xor(\n  that: Flags[A val, B val] box)\n: Flags[A val, B val] iso^\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A val, B val] iso^\n\n\n\n\n\n\nwithout\n\n\nThe flags in this that are not in that.\n\n\nfun box without(\n  that: Flags[A val, B val] box)\n: Flags[A val, B val] iso^\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A val, B val] iso^\n\n\n\n\n\n\nclone\n\n\nCreate a clone.\n\n\nfun box clone()\n: Flags[A val, B val] iso^\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A val, B val] iso^\n\n\n\n\n\n\neq\n\n\nReturns true if this has the same flags set as that.\n\n\nfun box eq(\n  that: Flags[A val, B val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.\n\n\nfun box lt(\n  that: Flags[A val, B val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nReturns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.\n\n\nfun box le(\n  that: Flags[A val, B val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nReturns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.\n\n\nfun box gt(\n  that: Flags[A val, B val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nReturns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.\n\n\nfun box ge(\n  that: Flags[A val, B val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: Flags[A val, B val] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Flags[A val, B val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A val, B val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "class Flags"
        },
        {
            "location": "/collections-Flags/#flags91a-flag91b-val93-val-optional-b-u8-val-u16-val-u32-val",
            "text": "[U64](builtin-U64) val | [U128](builtin-U128) val | [ULong](builtin-ULong) val | \n[USize](builtin-USize) val) & [Integer](builtin-Integer)\\[B val\\] val)\\]  Flags is a set of flags. The flags that are recognised should be passed as\n  a union type for type parameter A. For example:  primitive SSE\n    fun value(): U64 => 1  primitive AVX\n    fun value(): U64 => 2  primitive RDTSCP\n    fun value(): U64 => 4  type Features is Flags[(SSE | AVX | RDTSCP)]  Type parameter B is the unlying field used to store the flags.  class ref Flags[A: Flag[B val] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[B val] val)] is\n  Comparable[Flags[A val, B val] box] ref  Implements   Comparable [ Flags [A val, B val] box] ref",
            "title": "Flags[A: Flag[B val] val, optional B: ((U8 val | U16 val | U32 val |"
        },
        {
            "location": "/collections-Flags/#constructors",
            "text": "create  new iso create()\n: Flags[A val, B val] iso^  Returns   Flags [A val, B val] iso^",
            "title": "Constructors"
        },
        {
            "location": "/collections-Flags/#public-functions",
            "text": "value  Returns the bit encoding of the set flags.  fun box value()\n: B val  Returns   B val    apply  Returns true if the flag is set.  fun box apply(\n  flag: A val)\n: Bool val  Parameters   flag: A val   Returns   Bool  val    all  Sets all bits, including undefined flags.  fun ref all()\n: None val  Returns   None  val    clear  Unsets all flags.  fun ref clear()\n: None val  Returns   None  val    set  Sets the flag.  fun ref set(\n  flag: A val)\n: None val  Parameters   flag: A val   Returns   None  val    unset  Unsets the flag.  fun ref unset(\n  flag: A val)\n: None val  Parameters   flag: A val   Returns   None  val    flip  Sets the flag if it is unset, unsets the flag if it is set.  fun ref flip(\n  flag: A val)\n: None val  Parameters   flag: A val   Returns   None  val    union  The union of this and that.  fun ref union(\n  that: Flags[A val, B val] box)\n: None val  Parameters   that:  Flags [A val, B val] box   Returns   None  val    intersect  The intersection of this and that.  fun ref intersect(\n  that: Flags[A val, B val] box)\n: None val  Parameters   that:  Flags [A val, B val] box   Returns   None  val    difference  The symmetric difference of this and that.  fun ref difference(\n  that: Flags[A val, B val] box)\n: None val  Parameters   that:  Flags [A val, B val] box   Returns   None  val    remove  Unset flags that are set in that.  fun ref remove(\n  that: Flags[A val, B val] box)\n: None val  Parameters   that:  Flags [A val, B val] box   Returns   None  val    add  This with the flag set.  fun box add(\n  flag: A val)\n: Flags[A val, B val] iso^  Parameters   flag: A val   Returns   Flags [A val, B val] iso^    sub  This with the flag unset.  fun box sub(\n  flag: A val)\n: Flags[A val, B val] iso^  Parameters   flag: A val   Returns   Flags [A val, B val] iso^    op_or  The union of this and that.  fun box op_or(\n  that: Flags[A val, B val] box)\n: Flags[A val, B val] iso^  Parameters   that:  Flags [A val, B val] box   Returns   Flags [A val, B val] iso^    op_and  The intersection of this and that.  fun box op_and(\n  that: Flags[A val, B val] box)\n: Flags[A val, B val] iso^  Parameters   that:  Flags [A val, B val] box   Returns   Flags [A val, B val] iso^    op_xor  The symmetric difference of this and that.  fun box op_xor(\n  that: Flags[A val, B val] box)\n: Flags[A val, B val] iso^  Parameters   that:  Flags [A val, B val] box   Returns   Flags [A val, B val] iso^    without  The flags in this that are not in that.  fun box without(\n  that: Flags[A val, B val] box)\n: Flags[A val, B val] iso^  Parameters   that:  Flags [A val, B val] box   Returns   Flags [A val, B val] iso^    clone  Create a clone.  fun box clone()\n: Flags[A val, B val] iso^  Returns   Flags [A val, B val] iso^    eq  Returns true if this has the same flags set as that.  fun box eq(\n  that: Flags[A val, B val] box)\n: Bool val  Parameters   that:  Flags [A val, B val] box   Returns   Bool  val    lt  Returns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.  fun box lt(\n  that: Flags[A val, B val] box)\n: Bool val  Parameters   that:  Flags [A val, B val] box   Returns   Bool  val    le  Returns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.  fun box le(\n  that: Flags[A val, B val] box)\n: Bool val  Parameters   that:  Flags [A val, B val] box   Returns   Bool  val    gt  Returns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.  fun box gt(\n  that: Flags[A val, B val] box)\n: Bool val  Parameters   that:  Flags [A val, B val] box   Returns   Bool  val    ge  Returns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.  fun box ge(\n  that: Flags[A val, B val] box)\n: Bool val  Parameters   that:  Flags [A val, B val] box   Returns   Bool  val    compare  fun box compare(\n  that: Flags[A val, B val] box)\n: (Less val | Equal val | Greater val)  Parameters   that:  Flags [A val, B val] box   Returns   ( Less  val |  Equal  val |  Greater  val)    ne  fun box ne(\n  that: Flags[A val, B val] box)\n: Bool val  Parameters   that:  Flags [A val, B val] box   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-RingBuffer/",
            "text": "RingBuffer[A: A]\n\n\nA ring buffer.\n\n\nclass ref RingBuffer[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  len: USize val)\n: RingBuffer[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nRingBuffer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhead\n\n\nThe first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.\n\n\nfun box head()\n: USize val ?\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nsize\n\n\nThe number of elements that have been added to the ring.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nThe available space in the ring.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nGet the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\npush\n\n\nAdd an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring. Returns true if an element was dropped.\n\n\nfun ref push(\n  value: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclear\n\n\nClear the queue.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "class RingBuffer"
        },
        {
            "location": "/collections-RingBuffer/#ringbuffer91a-a93",
            "text": "A ring buffer.  class ref RingBuffer[A: A]",
            "title": "RingBuffer[A: A]"
        },
        {
            "location": "/collections-RingBuffer/#constructors",
            "text": "create  new ref create(\n  len: USize val)\n: RingBuffer[A] ref^  Parameters   len:  USize  val   Returns   RingBuffer [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-RingBuffer/#public-functions",
            "text": "head  The first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.  fun box head()\n: USize val ?  Returns   USize  val ?    size  The number of elements that have been added to the ring.  fun box size()\n: USize val  Returns   USize  val    space  The available space in the ring.  fun box space()\n: USize val  Returns   USize  val    apply  Get the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.  fun box apply(\n  i: USize val)\n: this->A ?  Parameters   i:  USize  val   Returns   this->A ?    push  Add an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring. Returns true if an element was dropped.  fun ref push(\n  value: A)\n: Bool val  Parameters   value: A   Returns   Bool  val    clear  Clear the queue.  fun ref clear()\n: None val  Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Set/",
            "text": "Set[A: (\nHashable\n #read & \nEquatable\n[A #read] #read)]\n\n\ntype Set[A: (Hashable #read & Equatable[A #read] #read)] is\n  HashSet[A #read, HashEq[A #read] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashSet\n[A #read, \nHashEq\n[A #read] val] ref",
            "title": "type Set"
        },
        {
            "location": "/collections-Set/#set91a-hashable-read-equatable91a-read93-read93",
            "text": "type Set[A: (Hashable #read & Equatable[A #read] #read)] is\n  HashSet[A #read, HashEq[A #read] val] ref  Type Alias For   HashSet [A #read,  HashEq [A #read] val] ref",
            "title": "Set[A: (Hashable #read & Equatable[A #read] #read)]"
        },
        {
            "location": "/collections-SetIs/",
            "text": "SetIs[A: A]\n\n\ntype SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashSet\n[A, \nHashIs\n[A!] val] ref",
            "title": "type SetIs"
        },
        {
            "location": "/collections-SetIs/#setis91a-a93",
            "text": "type SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref  Type Alias For   HashSet [A,  HashIs [A!] val] ref",
            "title": "SetIs[A: A]"
        },
        {
            "location": "/collections-HashSet/",
            "text": "HashSet[A: A, H: \nHashFunction\n[A!] val]\n\n\nA set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself\n\n\nclass ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H val] box] ref\n\n\n\n\nImplements\n\n\n\n\nComparable\n[\nHashSet\n[A, H val] box] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nDefaults to a prealloc of 8.\n\n\nnew ref create(\n  prealloc: USize val = 8)\n: HashSet[A, H val] ref^\n\n\n\n\nParameters\n\n\n\n\nprealloc: \nUSize\n val = 8\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H val] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nThe number of items in the set.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nThe available space in the set.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturn the value if its in the set, otherwise raise an error.\n\n\nfun box apply(\n  value: box->A!)\n: this->A ?\n\n\n\n\nParameters\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\ncontains\n\n\nChecks whether the set contains the value.\n\n\nfun box contains(\n  value: box->A!)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclear\n\n\nRemove all elements from the set.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset\n\n\nAdd a value to the set.\n\n\nfun ref set(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\n\nRemove a value from the set.\n\n\nfun ref unset(\n  value: box->A!)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nextract\n\n\nRemove a value from the set and return it. Raises an error if the value\nwasn't in the set.\n\n\nfun ref extract(\n  value: box->A!)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunion\n\n\nAdd everything in that to the set.\n\n\nfun ref union(\n  that: Iterator[A^] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nintersect[optional K: \nHashFunction\n[box->A!] val]\n\n\nRemove everything that isn't in that.\n\n\nfun ref intersect[optional K: HashFunction[box->A!] val](\n  that: HashSet[box->A!, K val] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[box->A!, K val] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndifference\n\n\nRemove elements in this which are also in that. Add elements in that which\nare not in this.\n\n\nfun ref difference(\n  that: Iterator[A^] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nRemove everything that is in that.\n\n\nfun ref remove(\n  that: Iterator[box->A!] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIterator\n[box->A!] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd[optional K: \nHashFunction\n[this->A!] val]\n\n\nAdd a value to the set.\n\n\nfun box add[optional K: HashFunction[this->A!] val](\n  value: this->A!)\n: HashSet[this->A!, K val] ref^\n\n\n\n\nParameters\n\n\n\n\nvalue: this->A!\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this->A!, K val] ref^\n\n\n\n\n\n\nsub[optional K: \nHashFunction\n[this->A!] val]\n\n\nRemove a value from the set.\n\n\nfun box sub[optional K: HashFunction[this->A!] val](\n  value: box->this->A!)\n: HashSet[this->A!, K val] ref^\n\n\n\n\nParameters\n\n\n\n\nvalue: box->this->A!\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this->A!, K val] ref^\n\n\n\n\n\n\nop_or[optional K: \nHashFunction\n[this->A!] val]\n\n\nCreate a set with the elements of both this and that.\n\n\nfun box op_or[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H val] ref)\n: HashSet[this->A!, K val] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: this->\nHashSet\n[A, H val] ref\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this->A!, K val] ref^\n\n\n\n\n\n\nop_and[optional K: \nHashFunction\n[this->A!] val]\n\n\nCreate a set with the elements that are in both this and that.\n\n\nfun box op_and[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H val] ref)\n: HashSet[this->A!, K val] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: this->\nHashSet\n[A, H val] ref\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this->A!, K val] ref^\n\n\n\n\n\n\nop_xor[optional K: \nHashFunction\n[this->A!] val]\n\n\nCreate a set with the elements that are in either set but not both.\n\n\nfun box op_xor[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H val] ref)\n: HashSet[this->A!, K val] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: this->\nHashSet\n[A, H val] ref\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this->A!, K val] ref^\n\n\n\n\n\n\nwithout[optional K: \nHashFunction\n[this->A!] val]\n\n\nCreate a set with the elements of this that are not in that.\n\n\nfun box without[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H val] ref)\n: HashSet[this->A!, K val] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: this->\nHashSet\n[A, H val] ref\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this->A!, K val] ref^\n\n\n\n\n\n\nclone[optional K: \nHashFunction\n[this->A!] val]\n\n\nCreate a clone. The element type may be different due to aliasing and\nviewpoint adaptation.\n\n\nfun box clone[optional K: HashFunction[this->A!] val]()\n: HashSet[this->A!, K val] ref^\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this->A!, K val] ref^\n\n\n\n\n\n\neq\n\n\nReturns true if the sets contain the same elements.\n\n\nfun box eq(\n  that: HashSet[A, H val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nReturns false if the sets contain the same elements.\n\n\nfun box ne(\n  that: HashSet[A, H val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturns true if every element in this is also in that, and this has fewer\nelements than that.\n\n\nfun box lt(\n  that: HashSet[A, H val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nReturns true if every element in this is also in that.\n\n\nfun box le(\n  that: HashSet[A, H val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nReturns true if every element in that is also in this, and this has more\nelements than that.\n\n\nfun box gt(\n  that: HashSet[A, H val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nReturns true if every element in that is also in this.\n\n\nfun box ge(\n  that: HashSet[A, H val] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H val] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext_index\n\n\nGiven an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.\n\n\nfun box next_index(\n  prev: USize val = call)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nprev: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nindex\n\n\nReturns the value at a given index. Raise an error if the index is not\npopulated.\n\n\nfun box index(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the values.\n\n\nfun box values()\n: SetValues[A, H val, this->HashSet[A, H val] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nSetValues\n[A, H val, this->\nHashSet\n[A, H val] ref] ref^\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: HashSet[A, H val] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H val] box\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "class HashSet"
        },
        {
            "location": "/collections-HashSet/#hashset91a-a-h-hashfunction91a93-val93",
            "text": "A set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself  class ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H val] box] ref  Implements   Comparable [ HashSet [A, H val] box] ref",
            "title": "HashSet[A: A, H: HashFunction[A!] val]"
        },
        {
            "location": "/collections-HashSet/#constructors",
            "text": "create  Defaults to a prealloc of 8.  new ref create(\n  prealloc: USize val = 8)\n: HashSet[A, H val] ref^  Parameters   prealloc:  USize  val = 8   Returns   HashSet [A, H val] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashSet/#public-functions",
            "text": "size  The number of items in the set.  fun box size()\n: USize val  Returns   USize  val    space  The available space in the set.  fun box space()\n: USize val  Returns   USize  val    apply  Return the value if its in the set, otherwise raise an error.  fun box apply(\n  value: box->A!)\n: this->A ?  Parameters   value: box->A!   Returns   this->A ?    contains  Checks whether the set contains the value.  fun box contains(\n  value: box->A!)\n: Bool val  Parameters   value: box->A!   Returns   Bool  val    clear  Remove all elements from the set.  fun ref clear()\n: None val  Returns   None  val    set  Add a value to the set.  fun ref set(\n  value: A)\n: None val  Parameters   value: A   Returns   None  val    unset  Remove a value from the set.  fun ref unset(\n  value: box->A!)\n: None val  Parameters   value: box->A!   Returns   None  val    extract  Remove a value from the set and return it. Raises an error if the value\nwasn't in the set.  fun ref extract(\n  value: box->A!)\n: A^ ?  Parameters   value: box->A!   Returns   A^ ?    union  Add everything in that to the set.  fun ref union(\n  that: Iterator[A^] ref)\n: None val  Parameters   that:  Iterator [A^] ref   Returns   None  val    intersect[optional K:  HashFunction [box->A!] val]  Remove everything that isn't in that.  fun ref intersect[optional K: HashFunction[box->A!] val](\n  that: HashSet[box->A!, K val] ref)\n: None val  Parameters   that:  HashSet [box->A!, K val] ref   Returns   None  val    difference  Remove elements in this which are also in that. Add elements in that which\nare not in this.  fun ref difference(\n  that: Iterator[A^] ref)\n: None val  Parameters   that:  Iterator [A^] ref   Returns   None  val    remove  Remove everything that is in that.  fun ref remove(\n  that: Iterator[box->A!] ref)\n: None val  Parameters   that:  Iterator [box->A!] ref   Returns   None  val    add[optional K:  HashFunction [this->A!] val]  Add a value to the set.  fun box add[optional K: HashFunction[this->A!] val](\n  value: this->A!)\n: HashSet[this->A!, K val] ref^  Parameters   value: this->A!   Returns   HashSet [this->A!, K val] ref^    sub[optional K:  HashFunction [this->A!] val]  Remove a value from the set.  fun box sub[optional K: HashFunction[this->A!] val](\n  value: box->this->A!)\n: HashSet[this->A!, K val] ref^  Parameters   value: box->this->A!   Returns   HashSet [this->A!, K val] ref^    op_or[optional K:  HashFunction [this->A!] val]  Create a set with the elements of both this and that.  fun box op_or[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H val] ref)\n: HashSet[this->A!, K val] ref^  Parameters   that: this-> HashSet [A, H val] ref   Returns   HashSet [this->A!, K val] ref^    op_and[optional K:  HashFunction [this->A!] val]  Create a set with the elements that are in both this and that.  fun box op_and[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H val] ref)\n: HashSet[this->A!, K val] ref^  Parameters   that: this-> HashSet [A, H val] ref   Returns   HashSet [this->A!, K val] ref^    op_xor[optional K:  HashFunction [this->A!] val]  Create a set with the elements that are in either set but not both.  fun box op_xor[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H val] ref)\n: HashSet[this->A!, K val] ref^  Parameters   that: this-> HashSet [A, H val] ref   Returns   HashSet [this->A!, K val] ref^    without[optional K:  HashFunction [this->A!] val]  Create a set with the elements of this that are not in that.  fun box without[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H val] ref)\n: HashSet[this->A!, K val] ref^  Parameters   that: this-> HashSet [A, H val] ref   Returns   HashSet [this->A!, K val] ref^    clone[optional K:  HashFunction [this->A!] val]  Create a clone. The element type may be different due to aliasing and\nviewpoint adaptation.  fun box clone[optional K: HashFunction[this->A!] val]()\n: HashSet[this->A!, K val] ref^  Returns   HashSet [this->A!, K val] ref^    eq  Returns true if the sets contain the same elements.  fun box eq(\n  that: HashSet[A, H val] box)\n: Bool val  Parameters   that:  HashSet [A, H val] box   Returns   Bool  val    ne  Returns false if the sets contain the same elements.  fun box ne(\n  that: HashSet[A, H val] box)\n: Bool val  Parameters   that:  HashSet [A, H val] box   Returns   Bool  val    lt  Returns true if every element in this is also in that, and this has fewer\nelements than that.  fun box lt(\n  that: HashSet[A, H val] box)\n: Bool val  Parameters   that:  HashSet [A, H val] box   Returns   Bool  val    le  Returns true if every element in this is also in that.  fun box le(\n  that: HashSet[A, H val] box)\n: Bool val  Parameters   that:  HashSet [A, H val] box   Returns   Bool  val    gt  Returns true if every element in that is also in this, and this has more\nelements than that.  fun box gt(\n  that: HashSet[A, H val] box)\n: Bool val  Parameters   that:  HashSet [A, H val] box   Returns   Bool  val    ge  Returns true if every element in that is also in this.  fun box ge(\n  that: HashSet[A, H val] box)\n: Bool val  Parameters   that:  HashSet [A, H val] box   Returns   Bool  val    next_index  Given an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.  fun box next_index(\n  prev: USize val = call)\n: USize val ?  Parameters   prev:  USize  val = call   Returns   USize  val ?    index  Returns the value at a given index. Raise an error if the index is not\npopulated.  fun box index(\n  i: USize val)\n: this->A ?  Parameters   i:  USize  val   Returns   this->A ?    values  Return an iterator over the values.  fun box values()\n: SetValues[A, H val, this->HashSet[A, H val] ref] ref^  Returns   SetValues [A, H val, this-> HashSet [A, H val] ref] ref^    compare  fun box compare(\n  that: HashSet[A, H val] box)\n: (Less val | Equal val | Greater val)  Parameters   that:  HashSet [A, H val] box   Returns   ( Less  val |  Equal  val |  Greater  val)",
            "title": "Public Functions"
        },
        {
            "location": "/collections-SetValues/",
            "text": "SetValues[A: A, H: \nHashFunction\n[A!] val, S: \nHashSet\n[A, H val] #read]\n\n\nAn iterator over the values in a set.\n\n\nclass ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H val] #read] is\n  Iterator[S #read->A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[S #read->A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  set: S #read)\n: SetValues[A, H val, S #read] ref^\n\n\n\n\nParameters\n\n\n\n\nset: S #read\n\n\n\n\nReturns\n\n\n\n\nSetValues\n[A, H val, S #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.\n\n\nfun ref next()\n: S #read->A ?\n\n\n\n\nReturns\n\n\n\n\nS #read->A ?",
            "title": "class SetValues"
        },
        {
            "location": "/collections-SetValues/#setvalues91a-a-h-hashfunction91a93-val-s-hashset91a-h-val93-read93",
            "text": "An iterator over the values in a set.  class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H val] #read] is\n  Iterator[S #read->A] ref  Implements   Iterator [S #read->A] ref",
            "title": "SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H val] #read]"
        },
        {
            "location": "/collections-SetValues/#constructors",
            "text": "create  new ref create(\n  set: S #read)\n: SetValues[A, H val, S #read] ref^  Parameters   set: S #read   Returns   SetValues [A, H val, S #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-SetValues/#public-functions",
            "text": "has_next  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.  fun box has_next()\n: Bool val  Returns   Bool  val    next  Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.  fun ref next()\n: S #read->A ?  Returns   S #read->A ?",
            "title": "Public Functions"
        },
        {
            "location": "/collections-List/",
            "text": "List[A: A]\n\n\nA doubly linked list.\n\n\nclass ref List[A: A] is\n  Seq[A] ref\n\n\n\n\nImplements\n\n\n\n\nSeq\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  len: USize val = 0)\n: List[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nunit\n\n\nnew ref unit(\n  a: A)\n: List[A] ref^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nfrom\n\n\nnew ref from(\n  seq: Array[A^] ref)\n: List[A] ref^\n\n\n\n\nParameters\n\n\n\n\nseq: \nArray\n[A^] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nreserve\n\n\nDo nothing, but be compatible with Seq.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\n\nReturns the number of items in the list.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val = 0)\n: this->A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val = 0\n\n\n\n\nReturns\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\n\nChange the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nindex\n\n\nGets the i-th node, raising an error if the index is out of bounds.\n\n\nfun box index(\n  i: USize val)\n: this->ListNode[A] ref ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\nremove\n\n\nRemove the i-th node, raising an error if the index is out of bounds.\nThe removed node is returned.\n\n\nfun ref remove(\n  i: USize val)\n: ListNode[A] ref ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nListNode\n[A] ref ?\n\n\n\n\n\n\nclear\n\n\nEmpties the list.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhead\n\n\nGet the head of the list.\n\n\nfun box head()\n: this->ListNode[A] ref ?\n\n\n\n\nReturns\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\ntail\n\n\nGet the tail of the list.\n\n\nfun box tail()\n: this->ListNode[A] ref ?\n\n\n\n\nReturns\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\nprepend_node\n\n\nAdds a node to the head of the list.\n\n\nfun ref prepend_node(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend_node\n\n\nAdds a node to the tail of the list.\n\n\nfun ref append_node(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend_list\n\n\nRemove all nodes from that and append them to this.\n\n\nfun ref append_list(\n  that: List[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nList\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprepend_list\n\n\nRemove all nodes from that and prepend them to this.\n\n\nfun ref prepend_list(\n  that: List[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nList\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nAdds a value to the tail of the list.\n\n\nfun ref push(\n  a: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\n\nRemoves a value from the tail of the list.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\n\nAdds a value to the head of the list.\n\n\nfun ref unshift(\n  a: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\n\nRemoves a value from the head of the list.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\n\nAppend len elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = 0\n\n\nlen: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = 0\n\n\nlen: \nUSize\n val = call\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\n\nTruncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclone\n\n\nClone the list.\n\n\nfun box clone()\n: List[this->A!] ref^\n\n\n\n\nReturns\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nmap[B: B]\n\n\nBuilds a new list by applying a function to every member of the list.\n\n\nfun box map[B: B](\n  f: {(this->A!): B^}[A, B] box)\n: List[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(this->A!): B^}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\nflat_map[B: B]\n\n\nBuilds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.\n\n\nfun box flat_map[B: B](\n  f: {(this->A!): List[B]}[A, B] box)\n: List[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(this->A!): List[B]}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\nfilter\n\n\nBuilds a new list with those elements that satisfy a provided predicate.\n\n\nfun box filter(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nfold[B: B]\n\n\nFolds the elements of the list using the supplied function.\n\n\nfun box fold[B: B](\n  f: {(B!, this->A!): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\n\n\n\nf: {(B!, this->A!): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nevery\n\n\nReturns true if every element satisfies the provided predicate, false\notherwise.\n\n\nfun box every(\n  f: {(this->A!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexists\n\n\nReturns true if at least one element satisfies the provided predicate,\nfalse otherwise.\n\n\nfun box exists(\n  f: {(this->A!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\npartition\n\n\nBuilds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.\n\n\nfun box partition(\n  f: {(this->A!): Bool}[A] box)\n: (List[this->A!] ref^ , List[this->A!] ref^)\n\n\n\n\nParameters\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\n(\nList\n[this->A!] ref^ , \nList\n[this->A!] ref^)\n\n\n\n\n\n\ndrop\n\n\nBuilds a list by dropping the first n elements.\n\n\nfun box drop(\n  n: USize val)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\ntake\n\n\nBuilds a list of the first n elements.\n\n\nfun box take(\n  n: USize val)\n: List[this->A!] ref\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nList\n[this->A!] ref\n\n\n\n\n\n\ntake_while\n\n\nBuilds a list of elements satisfying the provided predicate until one does\nnot.\n\n\nfun box take_while(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nreverse\n\n\nBuilds a new list by reversing the elements in the list.\n\n\nfun box reverse()\n: List[this->A!] ref^\n\n\n\n\nReturns\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\ncontains[optional B: (A & \nHasEq\n[A!] #read)]\n\n\nReturns true if the list contains the provided element, false otherwise.\n\n\nfun box contains[optional B: (A & HasEq[A!] #read)](\n  a: box->B #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\na: box->B #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnodes\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box nodes()\n: ListNodes[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nListNodes\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nrnodes\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box rnodes()\n: ListNodes[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nListNodes\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator on the values in the list.\n\n\nfun box values()\n: ListValues[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nListValues\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nrvalues\n\n\nReturn an iterator on the values in the list.\n\n\nfun box rvalues()\n: ListValues[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nListValues\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_map[B: B]\n\n\nPrivate helper for map, recursively working with ListNodes.\n\n\nfun box _map[B: B](\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): B^}[A, B] box,\n  acc: List[B] ref)\n: List[B] ref^\n\n\n\n\nParameters\n\n\n\n\nln: this->\nListNode\n[A] ref\n\n\nf: {(this->A!): B^}[A, B] box\n\n\nacc: \nList\n[B] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\n_flat_map[B: B]\n\n\nPrivate helper for flat_map, recursively working with ListNodes.\n\n\nfun box _flat_map[B: B](\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): List[B]}[A, B] box,\n  acc: List[B] ref)\n: List[B] ref^\n\n\n\n\nParameters\n\n\n\n\nln: this->\nListNode\n[A] ref\n\n\nf: {(this->A!): List[B]}[A, B] box\n\n\nacc: \nList\n[B] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\n_filter\n\n\nPrivate helper for filter, recursively working with ListNodes.\n\n\nfun box _filter(\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): Bool}[A] box,\n  acc: List[this->A!] ref)\n: List[this->A!] ref\n\n\n\n\nParameters\n\n\n\n\nln: this->\nListNode\n[A] ref\n\n\nf: {(this->A!): Bool}[A] box\n\n\nacc: \nList\n[this->A!] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[this->A!] ref\n\n\n\n\n\n\n_fold[B: B]\n\n\nPrivate helper for fold, recursively working with ListNodes.\n\n\nfun box _fold[B: B](\n  ln: this->ListNode[A] ref,\n  f: {(B!, this->A!): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\n\n\n\nln: this->\nListNode\n[A] ref\n\n\nf: {(B!, this->A!): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\n_every\n\n\nPrivate helper for every, recursively working with ListNodes.\n\n\nfun box _every(\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nln: this->\nListNode\n[A] ref\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_exists\n\n\nPrivate helper for exists, recursively working with ListNodes.\n\n\nfun box _exists(\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nln: this->\nListNode\n[A] ref\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_reverse\n\n\nPrivate helper for reverse, recursively working with ListNodes.\n\n\nfun box _reverse(\n  ln: this->ListNode[A] ref,\n  acc: List[this->A!] ref)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\n\n\n\nln: this->\nListNode\n[A] ref\n\n\nacc: \nList\n[this->A!] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\n_contains[optional B: (A & \nHasEq\n[A!] #read)]\n\n\nPrivate helper for contains, recursively working with ListNodes.\n\n\nfun box _contains[optional B: (A & HasEq[A!] #read)](\n  ln: this->ListNode[A] ref,\n  a: box->B #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nln: this->\nListNode\n[A] ref\n\n\na: box->B #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_increment\n\n\nfun ref _increment()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_decrement\n\n\nfun ref _decrement()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_set_head\n\n\nfun ref _set_head(\n  head': (ListNode[A] ref | None val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nhead': (\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_set_tail\n\n\nfun ref _set_tail(\n  tail': (ListNode[A] ref | None val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ntail': (\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_set_both\n\n\nfun ref _set_both(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "class List"
        },
        {
            "location": "/collections-List/#list91a-a93",
            "text": "A doubly linked list.  class ref List[A: A] is\n  Seq[A] ref  Implements   Seq [A] ref",
            "title": "List[A: A]"
        },
        {
            "location": "/collections-List/#constructors",
            "text": "create  new ref create(\n  len: USize val = 0)\n: List[A] ref^  Parameters   len:  USize  val = 0   Returns   List [A] ref^    unit  new ref unit(\n  a: A)\n: List[A] ref^  Parameters   a: A   Returns   List [A] ref^    from  new ref from(\n  seq: Array[A^] ref)\n: List[A] ref^  Parameters   seq:  Array [A^] ref   Returns   List [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-List/#public-functions",
            "text": "reserve  Do nothing, but be compatible with Seq.  fun ref reserve(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    size  Returns the number of items in the list.  fun box size()\n: USize val  Returns   USize  val    apply  Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val = 0)\n: this->A ?  Parameters   i:  USize  val = 0   Returns   this->A ?    update  Change the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?  Parameters   i:  USize  val  value: A   Returns   A^ ?    index  Gets the i-th node, raising an error if the index is out of bounds.  fun box index(\n  i: USize val)\n: this->ListNode[A] ref ?  Parameters   i:  USize  val   Returns   this-> ListNode [A] ref ?    remove  Remove the i-th node, raising an error if the index is out of bounds.\nThe removed node is returned.  fun ref remove(\n  i: USize val)\n: ListNode[A] ref ?  Parameters   i:  USize  val   Returns   ListNode [A] ref ?    clear  Empties the list.  fun ref clear()\n: None val  Returns   None  val    head  Get the head of the list.  fun box head()\n: this->ListNode[A] ref ?  Returns   this-> ListNode [A] ref ?    tail  Get the tail of the list.  fun box tail()\n: this->ListNode[A] ref ?  Returns   this-> ListNode [A] ref ?    prepend_node  Adds a node to the head of the list.  fun ref prepend_node(\n  node: ListNode[A] ref)\n: None val  Parameters   node:  ListNode [A] ref   Returns   None  val    append_node  Adds a node to the tail of the list.  fun ref append_node(\n  node: ListNode[A] ref)\n: None val  Parameters   node:  ListNode [A] ref   Returns   None  val    append_list  Remove all nodes from that and append them to this.  fun ref append_list(\n  that: List[A] ref)\n: None val  Parameters   that:  List [A] ref   Returns   None  val    prepend_list  Remove all nodes from that and prepend them to this.  fun ref prepend_list(\n  that: List[A] ref)\n: None val  Parameters   that:  List [A] ref   Returns   None  val    push  Adds a value to the tail of the list.  fun ref push(\n  a: A)\n: None val  Parameters   a: A   Returns   None  val    pop  Removes a value from the tail of the list.  fun ref pop()\n: A^ ?  Returns   A^ ?    unshift  Adds a value to the head of the list.  fun ref unshift(\n  a: A)\n: None val  Parameters   a: A   Returns   None  val    shift  Removes a value from the head of the list.  fun ref shift()\n: A^ ?  Returns   A^ ?    append  Append len elements from a sequence, starting from the given offset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val  Parameters   seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = 0  len:  USize  val = call   Returns   None  val    concat  Add len iterated elements to the end of the list, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val  Parameters   iter:  Iterator [A^] ref  offset:  USize  val = 0  len:  USize  val = call   Returns   None  val    truncate  Truncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val  Parameters   len:  USize  val   Returns   None  val    clone  Clone the list.  fun box clone()\n: List[this->A!] ref^  Returns   List [this->A!] ref^    map[B: B]  Builds a new list by applying a function to every member of the list.  fun box map[B: B](\n  f: {(this->A!): B^}[A, B] box)\n: List[B] ref^  Parameters   f: {(this->A!): B^}[A, B] box   Returns   List [B] ref^    flat_map[B: B]  Builds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.  fun box flat_map[B: B](\n  f: {(this->A!): List[B]}[A, B] box)\n: List[B] ref^  Parameters   f: {(this->A!): List[B]}[A, B] box   Returns   List [B] ref^    filter  Builds a new list with those elements that satisfy a provided predicate.  fun box filter(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^  Parameters   f: {(this->A!): Bool}[A] box   Returns   List [this->A!] ref^    fold[B: B]  Folds the elements of the list using the supplied function.  fun box fold[B: B](\n  f: {(B!, this->A!): B^}[A, B] box,\n  acc: B)\n: B  Parameters   f: {(B!, this->A!): B^}[A, B] box  acc: B   Returns   B    every  Returns true if every element satisfies the provided predicate, false\notherwise.  fun box every(\n  f: {(this->A!): Bool}[A] box)\n: Bool val  Parameters   f: {(this->A!): Bool}[A] box   Returns   Bool  val    exists  Returns true if at least one element satisfies the provided predicate,\nfalse otherwise.  fun box exists(\n  f: {(this->A!): Bool}[A] box)\n: Bool val  Parameters   f: {(this->A!): Bool}[A] box   Returns   Bool  val    partition  Builds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.  fun box partition(\n  f: {(this->A!): Bool}[A] box)\n: (List[this->A!] ref^ , List[this->A!] ref^)  Parameters   f: {(this->A!): Bool}[A] box   Returns   ( List [this->A!] ref^ ,  List [this->A!] ref^)    drop  Builds a list by dropping the first n elements.  fun box drop(\n  n: USize val)\n: List[this->A!] ref^  Parameters   n:  USize  val   Returns   List [this->A!] ref^    take  Builds a list of the first n elements.  fun box take(\n  n: USize val)\n: List[this->A!] ref  Parameters   n:  USize  val   Returns   List [this->A!] ref    take_while  Builds a list of elements satisfying the provided predicate until one does\nnot.  fun box take_while(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^  Parameters   f: {(this->A!): Bool}[A] box   Returns   List [this->A!] ref^    reverse  Builds a new list by reversing the elements in the list.  fun box reverse()\n: List[this->A!] ref^  Returns   List [this->A!] ref^    contains[optional B: (A &  HasEq [A!] #read)]  Returns true if the list contains the provided element, false otherwise.  fun box contains[optional B: (A & HasEq[A!] #read)](\n  a: box->B #read)\n: Bool val  Parameters   a: box->B #read   Returns   Bool  val    nodes  Return an iterator on the nodes in the list.  fun box nodes()\n: ListNodes[A, this->ListNode[A] ref] ref^  Returns   ListNodes [A, this-> ListNode [A] ref] ref^    rnodes  Return an iterator on the nodes in the list.  fun box rnodes()\n: ListNodes[A, this->ListNode[A] ref] ref^  Returns   ListNodes [A, this-> ListNode [A] ref] ref^    values  Return an iterator on the values in the list.  fun box values()\n: ListValues[A, this->ListNode[A] ref] ref^  Returns   ListValues [A, this-> ListNode [A] ref] ref^    rvalues  Return an iterator on the values in the list.  fun box rvalues()\n: ListValues[A, this->ListNode[A] ref] ref^  Returns   ListValues [A, this-> ListNode [A] ref] ref^",
            "title": "Public Functions"
        },
        {
            "location": "/collections-List/#private-functions",
            "text": "_map[B: B]  Private helper for map, recursively working with ListNodes.  fun box _map[B: B](\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): B^}[A, B] box,\n  acc: List[B] ref)\n: List[B] ref^  Parameters   ln: this-> ListNode [A] ref  f: {(this->A!): B^}[A, B] box  acc:  List [B] ref   Returns   List [B] ref^    _flat_map[B: B]  Private helper for flat_map, recursively working with ListNodes.  fun box _flat_map[B: B](\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): List[B]}[A, B] box,\n  acc: List[B] ref)\n: List[B] ref^  Parameters   ln: this-> ListNode [A] ref  f: {(this->A!): List[B]}[A, B] box  acc:  List [B] ref   Returns   List [B] ref^    _filter  Private helper for filter, recursively working with ListNodes.  fun box _filter(\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): Bool}[A] box,\n  acc: List[this->A!] ref)\n: List[this->A!] ref  Parameters   ln: this-> ListNode [A] ref  f: {(this->A!): Bool}[A] box  acc:  List [this->A!] ref   Returns   List [this->A!] ref    _fold[B: B]  Private helper for fold, recursively working with ListNodes.  fun box _fold[B: B](\n  ln: this->ListNode[A] ref,\n  f: {(B!, this->A!): B^}[A, B] box,\n  acc: B)\n: B  Parameters   ln: this-> ListNode [A] ref  f: {(B!, this->A!): B^}[A, B] box  acc: B   Returns   B    _every  Private helper for every, recursively working with ListNodes.  fun box _every(\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): Bool}[A] box)\n: Bool val  Parameters   ln: this-> ListNode [A] ref  f: {(this->A!): Bool}[A] box   Returns   Bool  val    _exists  Private helper for exists, recursively working with ListNodes.  fun box _exists(\n  ln: this->ListNode[A] ref,\n  f: {(this->A!): Bool}[A] box)\n: Bool val  Parameters   ln: this-> ListNode [A] ref  f: {(this->A!): Bool}[A] box   Returns   Bool  val    _reverse  Private helper for reverse, recursively working with ListNodes.  fun box _reverse(\n  ln: this->ListNode[A] ref,\n  acc: List[this->A!] ref)\n: List[this->A!] ref^  Parameters   ln: this-> ListNode [A] ref  acc:  List [this->A!] ref   Returns   List [this->A!] ref^    _contains[optional B: (A &  HasEq [A!] #read)]  Private helper for contains, recursively working with ListNodes.  fun box _contains[optional B: (A & HasEq[A!] #read)](\n  ln: this->ListNode[A] ref,\n  a: box->B #read)\n: Bool val  Parameters   ln: this-> ListNode [A] ref  a: box->B #read   Returns   Bool  val    _increment  fun ref _increment()\n: None val  Returns   None  val    _decrement  fun ref _decrement()\n: None val  Returns   None  val    _set_head  fun ref _set_head(\n  head': (ListNode[A] ref | None val))\n: None val  Parameters   head': ( ListNode [A] ref |  None  val)   Returns   None  val    _set_tail  fun ref _set_tail(\n  tail': (ListNode[A] ref | None val))\n: None val  Parameters   tail': ( ListNode [A] ref |  None  val)   Returns   None  val    _set_both  fun ref _set_both(\n  node: ListNode[A] ref)\n: None val  Parameters   node:  ListNode [A] ref   Returns   None  val",
            "title": "Private Functions"
        },
        {
            "location": "/collections-ListNodes/",
            "text": "ListNodes[A: A, N: \nListNode\n[A] #read]\n\n\nIterate over the nodes in a list.\n\n\nclass ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N #read] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[N #read] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nKeep the next list node to be examined.\n\n\nnew ref create(\n  head: (N #read | None val),\n  reverse: Bool val = false)\n: ListNodes[A, N #read] ref^\n\n\n\n\nParameters\n\n\n\n\nhead: (N #read | \nNone\n val)\n\n\nreverse: \nBool\n val = false\n\n\n\n\nReturns\n\n\n\n\nListNodes\n[A, N #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nIf we have a list node, we have more values.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nGet the list node and replace it with the next one.\n\n\nfun ref next()\n: N #read ?\n\n\n\n\nReturns\n\n\n\n\nN #read ?",
            "title": "class ListNodes"
        },
        {
            "location": "/collections-ListNodes/#listnodes91a-a-n-listnode91a93-read93",
            "text": "Iterate over the nodes in a list.  class ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N #read] ref  Implements   Iterator [N #read] ref",
            "title": "ListNodes[A: A, N: ListNode[A] #read]"
        },
        {
            "location": "/collections-ListNodes/#constructors",
            "text": "create  Keep the next list node to be examined.  new ref create(\n  head: (N #read | None val),\n  reverse: Bool val = false)\n: ListNodes[A, N #read] ref^  Parameters   head: (N #read |  None  val)  reverse:  Bool  val = false   Returns   ListNodes [A, N #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListNodes/#public-functions",
            "text": "has_next  If we have a list node, we have more values.  fun box has_next()\n: Bool val  Returns   Bool  val    next  Get the list node and replace it with the next one.  fun ref next()\n: N #read ?  Returns   N #read ?",
            "title": "Public Functions"
        },
        {
            "location": "/collections-ListValues/",
            "text": "ListValues[A: A, N: \nListNode\n[A] #read]\n\n\nIterate over the values in a list.\n\n\nclass ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N #read->A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[N #read->A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nKeep the next list node to be examined.\n\n\nnew ref create(\n  head: (N #read | None val),\n  reverse: Bool val = false)\n: ListValues[A, N #read] ref^\n\n\n\n\nParameters\n\n\n\n\nhead: (N #read | \nNone\n val)\n\n\nreverse: \nBool\n val = false\n\n\n\n\nReturns\n\n\n\n\nListValues\n[A, N #read] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nIf we have a list node, we have more values.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nGet the value of the list node and replace it with the next one.\n\n\nfun ref next()\n: N #read->A ?\n\n\n\n\nReturns\n\n\n\n\nN #read->A ?",
            "title": "class ListValues"
        },
        {
            "location": "/collections-ListValues/#listvalues91a-a-n-listnode91a93-read93",
            "text": "Iterate over the values in a list.  class ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N #read->A] ref  Implements   Iterator [N #read->A] ref",
            "title": "ListValues[A: A, N: ListNode[A] #read]"
        },
        {
            "location": "/collections-ListValues/#constructors",
            "text": "create  Keep the next list node to be examined.  new ref create(\n  head: (N #read | None val),\n  reverse: Bool val = false)\n: ListValues[A, N #read] ref^  Parameters   head: (N #read |  None  val)  reverse:  Bool  val = false   Returns   ListValues [A, N #read] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListValues/#public-functions",
            "text": "has_next  If we have a list node, we have more values.  fun box has_next()\n: Bool val  Returns   Bool  val    next  Get the value of the list node and replace it with the next one.  fun ref next()\n: N #read->A ?  Returns   N #read->A ?",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Reverse/",
            "text": "Reverse[optional A: (\nReal\n[A val] val & (\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val))\\]\n\n\n\nProduces [max, min].\n\n\nclass ref Reverse[optional A: (Real[A val] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  max: A val,\n  min: A val,\n  dec: A val = 1)\n: Reverse[A val] ref^\n\n\n\n\nParameters\n\n\n\n\nmax: A val\n\n\nmin: A val\n\n\ndec: A val = 1\n\n\n\n\nReturns\n\n\n\n\nReverse\n[A val] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A val\n\n\n\n\nReturns\n\n\n\n\nA val\n\n\n\n\n\n\nrewind\n\n\nfun ref rewind()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "class Reverse"
        },
        {
            "location": "/collections-Reverse/#reverse91optional-a-real91a-val93-val-i8-val-i16-val-i32-val",
            "text": "[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val))\\]  Produces [max, min].  class ref Reverse[optional A: (Real[A val] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A val] ref  Implements   Iterator [A val] ref",
            "title": "Reverse[optional A: (Real[A val] val & (I8 val | I16 val | I32 val |"
        },
        {
            "location": "/collections-Reverse/#constructors",
            "text": "create  new ref create(\n  max: A val,\n  min: A val,\n  dec: A val = 1)\n: Reverse[A val] ref^  Parameters   max: A val  min: A val  dec: A val = 1   Returns   Reverse [A val] ref^",
            "title": "Constructors"
        },
        {
            "location": "/collections-Reverse/#public-functions",
            "text": "has_next  fun box has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A val  Returns   A val    rewind  fun ref rewind()\n: None val  Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Hashable/",
            "text": "Hashable\n\n\nAnything with a hash method is hashable.\n\n\ninterface ref Hashable\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val",
            "title": "interface Hashable"
        },
        {
            "location": "/collections-Hashable/#hashable",
            "text": "Anything with a hash method is hashable.  interface ref Hashable",
            "title": "Hashable"
        },
        {
            "location": "/collections-Hashable/#public-functions",
            "text": "hash  fun box hash()\n: U64 val  Returns   U64  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashFunction/",
            "text": "HashFunction[A: A]\n\n\nA pluggable hash function.\n\n\ninterface val HashFunction[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nData structures create instances internally. Use a primitive if possible.\n\n\nnew val create()\n: HashFunction[A] val^\n\n\n\n\nReturns\n\n\n\n\nHashFunction\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nCalculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.\n\n\nfun box hash(\n  x: box->A!)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nDetermine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.\n\n\nfun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nx: box->A!\n\n\ny: box->A!\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "interface HashFunction"
        },
        {
            "location": "/collections-HashFunction/#hashfunction91a-a93",
            "text": "A pluggable hash function.  interface val HashFunction[A: A]",
            "title": "HashFunction[A: A]"
        },
        {
            "location": "/collections-HashFunction/#constructors",
            "text": "create  Data structures create instances internally. Use a primitive if possible.  new val create()\n: HashFunction[A] val^  Returns   HashFunction [A] val^",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashFunction/#public-functions",
            "text": "hash  Calculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.  fun box hash(\n  x: box->A!)\n: U64 val  Parameters   x: box->A!   Returns   U64  val    eq  Determine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.  fun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val  Parameters   x: box->A!  y: box->A!   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashEq/",
            "text": "HashEq[A: (\nHashable\n #read & \nEquatable\n[A #read] #read)]\n\n\nprimitive val HashEq[A: (Hashable #read & Equatable[A #read] #read)] is\n  HashFunction[A #read] val\n\n\n\n\nImplements\n\n\n\n\nHashFunction\n[A #read] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: HashEq[A #read] val^\n\n\n\n\nReturns\n\n\n\n\nHashEq\n[A #read] val^\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nUse the hash function from the type parameter.\n\n\nfun box hash(\n  x: box->A #read)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: box->A #read\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nUse the structural equality function from the type parameter.\n\n\nfun box eq(\n  x: box->A #read,\n  y: box->A #read)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nx: box->A #read\n\n\ny: box->A #read\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: HashEq[A #read] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashEq\n[A #read] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive HashEq"
        },
        {
            "location": "/collections-HashEq/#hasheq91a-hashable-read-equatable91a-read93-read93",
            "text": "primitive val HashEq[A: (Hashable #read & Equatable[A #read] #read)] is\n  HashFunction[A #read] val  Implements   HashFunction [A #read] val",
            "title": "HashEq[A: (Hashable #read & Equatable[A #read] #read)]"
        },
        {
            "location": "/collections-HashEq/#constructors",
            "text": "create  new val create()\n: HashEq[A #read] val^  Returns   HashEq [A #read] val^",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashEq/#public-functions",
            "text": "hash  Use the hash function from the type parameter.  fun box hash(\n  x: box->A #read)\n: U64 val  Parameters   x: box->A #read   Returns   U64  val    eq  Use the structural equality function from the type parameter.  fun box eq(\n  x: box->A #read,\n  y: box->A #read)\n: Bool val  Parameters   x: box->A #read  y: box->A #read   Returns   Bool  val    ne  fun box ne(\n  that: HashEq[A #read] val)\n: Bool val  Parameters   that:  HashEq [A #read] val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashIs/",
            "text": "HashIs[A: A]\n\n\nprimitive val HashIs[A: A] is\n  HashFunction[A] val\n\n\n\n\nImplements\n\n\n\n\nHashFunction\n[A] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: HashIs[A] val^\n\n\n\n\nReturns\n\n\n\n\nHashIs\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nHash the identity rather than the contents.\n\n\nfun box hash(\n  x: box->A!)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nDetermine equality by identity rather than structurally.\n\n\nfun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nx: box->A!\n\n\ny: box->A!\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: HashIs[A] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashIs\n[A] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive HashIs"
        },
        {
            "location": "/collections-HashIs/#hashis91a-a93",
            "text": "primitive val HashIs[A: A] is\n  HashFunction[A] val  Implements   HashFunction [A] val",
            "title": "HashIs[A: A]"
        },
        {
            "location": "/collections-HashIs/#constructors",
            "text": "create  new val create()\n: HashIs[A] val^  Returns   HashIs [A] val^",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashIs/#public-functions",
            "text": "hash  Hash the identity rather than the contents.  fun box hash(\n  x: box->A!)\n: U64 val  Parameters   x: box->A!   Returns   U64  val    eq  Determine equality by identity rather than structurally.  fun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val  Parameters   x: box->A!  y: box->A!   Returns   Bool  val    ne  fun box ne(\n  that: HashIs[A] val)\n: Bool val  Parameters   that:  HashIs [A] val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashByteSeq/",
            "text": "HashByteSeq\n\n\nHash and equality functions for arbitrary ByteSeq.\n\n\nprimitive val HashByteSeq\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: HashByteSeq val^\n\n\n\n\nReturns\n\n\n\n\nHashByteSeq\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nfun box hash(\n  x: (String box | Array[U8 val] box))\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\ny: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: HashByteSeq val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashByteSeq\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive HashByteSeq"
        },
        {
            "location": "/collections-HashByteSeq/#hashbyteseq",
            "text": "Hash and equality functions for arbitrary ByteSeq.  primitive val HashByteSeq",
            "title": "HashByteSeq"
        },
        {
            "location": "/collections-HashByteSeq/#constructors",
            "text": "create  new val create()\n: HashByteSeq val^  Returns   HashByteSeq  val^",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashByteSeq/#public-functions",
            "text": "hash  fun box hash(\n  x: (String box | Array[U8 val] box))\n: U64 val  Parameters   x: ( String  box |  Array [ U8  val] box)   Returns   U64  val    eq  fun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val  Parameters   x: ( String  box |  Array [ U8  val] box)  y: ( String  box |  Array [ U8  val] box)   Returns   Bool  val    ne  fun box ne(\n  that: HashByteSeq val)\n: Bool val  Parameters   that:  HashByteSeq  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/debug--index/",
            "text": "Debug package\n\n\nProvides facilities to create output to either \nSTDOUT\n or \nSTDERR\n that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the \n-d\n flag to \nponyc\n when compiling e.g.:\n\n\nponyc -d\n\n\nExample code\n\n\nactor Main\n  new create(env: Env) =>\n    Debug.out(\"This will only bee seen when configured for debug info\")\n    env.out.print(\"This will always be seen\")\n\n\n\n\nPublic Types\n\n\n\n\nprimitive DebugOut\n\n\nprimitive DebugErr\n\n\ntype DebugStream\n\n\nprimitive Debug",
            "title": "Package"
        },
        {
            "location": "/debug--index/#debug-package",
            "text": "Provides facilities to create output to either  STDOUT  or  STDERR  that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the  -d  flag to  ponyc  when compiling e.g.:  ponyc -d",
            "title": "Debug package"
        },
        {
            "location": "/debug--index/#example-code",
            "text": "actor Main\n  new create(env: Env) =>\n    Debug.out(\"This will only bee seen when configured for debug info\")\n    env.out.print(\"This will always be seen\")",
            "title": "Example code"
        },
        {
            "location": "/debug--index/#public-types",
            "text": "primitive DebugOut  primitive DebugErr  type DebugStream  primitive Debug",
            "title": "Public Types"
        },
        {
            "location": "/debug-DebugOut/",
            "text": "DebugOut\n\n\nprimitive val DebugOut\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DebugOut val^\n\n\n\n\nReturns\n\n\n\n\nDebugOut\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: DebugOut val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebugOut\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DebugOut val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebugOut\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive DebugOut"
        },
        {
            "location": "/debug-DebugOut/#debugout",
            "text": "primitive val DebugOut",
            "title": "DebugOut"
        },
        {
            "location": "/debug-DebugOut/#constructors",
            "text": "create  new val create()\n: DebugOut val^  Returns   DebugOut  val^",
            "title": "Constructors"
        },
        {
            "location": "/debug-DebugOut/#public-functions",
            "text": "eq  fun box eq(\n  that: DebugOut val)\n: Bool val  Parameters   that:  DebugOut  val   Returns   Bool  val    ne  fun box ne(\n  that: DebugOut val)\n: Bool val  Parameters   that:  DebugOut  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/debug-DebugErr/",
            "text": "DebugErr\n\n\nprimitive val DebugErr\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DebugErr val^\n\n\n\n\nReturns\n\n\n\n\nDebugErr\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: DebugErr val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebugErr\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DebugErr val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebugErr\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive DebugErr"
        },
        {
            "location": "/debug-DebugErr/#debugerr",
            "text": "primitive val DebugErr",
            "title": "DebugErr"
        },
        {
            "location": "/debug-DebugErr/#constructors",
            "text": "create  new val create()\n: DebugErr val^  Returns   DebugErr  val^",
            "title": "Constructors"
        },
        {
            "location": "/debug-DebugErr/#public-functions",
            "text": "eq  fun box eq(\n  that: DebugErr val)\n: Bool val  Parameters   that:  DebugErr  val   Returns   Bool  val    ne  fun box ne(\n  that: DebugErr val)\n: Bool val  Parameters   that:  DebugErr  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/debug-DebugStream/",
            "text": "DebugStream\n\n\ntype DebugStream is\n  (DebugOut val | DebugErr val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nDebugOut\n val | \nDebugErr\n val)",
            "title": "type DebugStream"
        },
        {
            "location": "/debug-DebugStream/#debugstream",
            "text": "type DebugStream is\n  (DebugOut val | DebugErr val)  Type Alias For   ( DebugOut  val |  DebugErr  val)",
            "title": "DebugStream"
        },
        {
            "location": "/debug-Debug/",
            "text": "Debug\n\n\nThis is a debug only print utility.\n\n\nprimitive val Debug\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Debug val^\n\n\n\n\nReturns\n\n\n\n\nDebug\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nout\n\n\nIf platform is debug configured, print message to standard output\n\n\nfun box out(\n  msg: Stringable box= \"\")\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nStringable\n box= \"\"\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nerr\n\n\nIf platform is debug configured, print message to standard error\n\n\nfun box err(\n  msg: Stringable box= \"\")\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nStringable\n box= \"\"\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\napply\n\n\napply(msg: Stringable, sep: String, stream: DebugStream): None\n: If platform is debug configured, print a stringable. The default output\nstream is stdout.\n\n\napply(msg: ReadSeq[Stringable], sep: String, stream: DebugStream): None\n: If platform is debug configured, print a sequence of stringables. The\ndefault separator is \", \", and the default output stream is stdout.\n\n\nfun box apply(\n  msg: (Stringable box | ReadSeq[Stringable box] box),\n  sep: String val= \", \",\n  stream: (DebugOut val | DebugErr val) = reference)\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: (\nStringable\n box | \nReadSeq\n[\nStringable\n box] box)\n\n\nsep: \nString\n val= \", \"\n\n\nstream: (\nDebugOut\n val | \nDebugErr\n val) = reference\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Debug val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebug\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Debug val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebug\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_print\n\n\nfun box _print(\n  msg: String val,\n  stream: (DebugOut val | DebugErr val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val\n\n\nstream: (\nDebugOut\n val | \nDebugErr\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_stream\n\n\nfun box _stream(\n  stream: (DebugOut val | DebugErr val))\n: Pointer[U8 val] ref\n\n\n\n\nParameters\n\n\n\n\nstream: (\nDebugOut\n val | \nDebugErr\n val)\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\nU8\n val] ref",
            "title": "primitive Debug"
        },
        {
            "location": "/debug-Debug/#debug",
            "text": "This is a debug only print utility.  primitive val Debug",
            "title": "Debug"
        },
        {
            "location": "/debug-Debug/#constructors",
            "text": "create  new val create()\n: Debug val^  Returns   Debug  val^",
            "title": "Constructors"
        },
        {
            "location": "/debug-Debug/#public-functions",
            "text": "out  If platform is debug configured, print message to standard output  fun box out(\n  msg: Stringable box= \"\")\n: None val  Parameters   msg:  Stringable  box= \"\"   Returns   None  val    err  If platform is debug configured, print message to standard error  fun box err(\n  msg: Stringable box= \"\")\n: None val  Parameters   msg:  Stringable  box= \"\"   Returns   None  val    apply  apply(msg: Stringable, sep: String, stream: DebugStream): None : If platform is debug configured, print a stringable. The default output\nstream is stdout.  apply(msg: ReadSeq[Stringable], sep: String, stream: DebugStream): None : If platform is debug configured, print a sequence of stringables. The\ndefault separator is \", \", and the default output stream is stdout.  fun box apply(\n  msg: (Stringable box | ReadSeq[Stringable box] box),\n  sep: String val= \", \",\n  stream: (DebugOut val | DebugErr val) = reference)\n: None val  Parameters   msg: ( Stringable  box |  ReadSeq [ Stringable  box] box)  sep:  String  val= \", \"  stream: ( DebugOut  val |  DebugErr  val) = reference   Returns   None  val    eq  fun box eq(\n  that: Debug val)\n: Bool val  Parameters   that:  Debug  val   Returns   Bool  val    ne  fun box ne(\n  that: Debug val)\n: Bool val  Parameters   that:  Debug  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/debug-Debug/#private-functions",
            "text": "_print  fun box _print(\n  msg: String val,\n  stream: (DebugOut val | DebugErr val))\n: None val  Parameters   msg:  String  val  stream: ( DebugOut  val |  DebugErr  val)   Returns   None  val    _stream  fun box _stream(\n  stream: (DebugOut val | DebugErr val))\n: Pointer[U8 val] ref  Parameters   stream: ( DebugOut  val |  DebugErr  val)   Returns   Pointer [ U8  val] ref",
            "title": "Private Functions"
        },
        {
            "location": "/itertools--index/",
            "text": "Itertools Package\n\n\nThe itertools package provides a set of classes for doing useful things with\niterators. It is Inspired by Python's itertools library, Rust's Iterator, and\nElixir's Enum and Stream.\n\n\nIter\n\n\nThe Iter class wraps iterators so that additional methods may be applied to it.\nSome methods, such as fold and collect, run through the underlying iterator in\norder to return a result. Others, such as map and filter, are lazy. This means\nthat they return another Iter so that the resulting values are computed one by\none as needed. Lazy methods return Iter types.\n\n\nFor example, the following code creates an Iter from the values of an array\ncontaining the numbers 1 through 5, increments each number by one, filters out\nany odd numbers, and prints the rest.\n\n\nlet xs = Iter[I64]([as I64: 1; 2; 3; 4; 5].values())\n  .map[I64]({(x: I64): I64 => x + 1 })\n  .filter({(x: I64): Bool => (x % 2) == 0 })\n  .map[None]({(x: I64) => env.out.print(x.string()) })\n\n\n\n\nThis will result in an iterator that prints the numbers 2, 4, and 6. However,\ndue to the lazy nature of the map and filter, no iteration has actually occurred\nand nothing will be printed. One solution to this would be to loop over the\nresulting Iter as so:\n\n\nfor x in xs do\n  None\nend\n\n\n\n\nThis will trigger the iteration and print out the values 2, 4, and 6. This is\nwhere the \nrun\n method comes in handy by doing the iteration without the need\nfor a loop. So the final code would be as follows:\n\n\nIter[I64]([as I64: 1; 2; 3; 4; 5].values())\n  .map[I64]({(x: I64): I64 => x + 1 })\n  .filter({(x: I64): Bool => (x % 2) == 0 })\n  .map[None]({(x: I64) => env.out.print(x.string()) })\n  .run()\n\n\n\n\nOutput:\n\n\n2\n4\n6\n\n\n\n\nOther Classes\n\n\nChain -- chain together two or more iterators\n\n\nTake -- return only the specified number of items from the given\niterator\n\n\nZip2, Zip3, Zip4, Zip5 -- zip together N iterators\n\n\nRepeat -- create an iterator that reapeatedly returns the given value\n\n\nCycle -- create an iterator that infinitely loops over the items of\nthe given iterator\n\n\nMapFn -- create an iterator that applies a function to the value of\nthe given iterator\n\n\nFilter -- create an iterator that only returns items that match a\npredicate\n\n\nPublic Types\n\n\n\n\nclass Zip2\n\n\nclass Zip3\n\n\nclass Zip4\n\n\nclass Zip5\n\n\nclass Chain\n\n\nclass Filter\n\n\nclass Cycle\n\n\nclass Repeat\n\n\nclass Iter\n\n\nclass Take\n\n\nclass MapFn\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _None",
            "title": "Package"
        },
        {
            "location": "/itertools--index/#itertools-package",
            "text": "The itertools package provides a set of classes for doing useful things with\niterators. It is Inspired by Python's itertools library, Rust's Iterator, and\nElixir's Enum and Stream.",
            "title": "Itertools Package"
        },
        {
            "location": "/itertools--index/#iter",
            "text": "The Iter class wraps iterators so that additional methods may be applied to it.\nSome methods, such as fold and collect, run through the underlying iterator in\norder to return a result. Others, such as map and filter, are lazy. This means\nthat they return another Iter so that the resulting values are computed one by\none as needed. Lazy methods return Iter types.  For example, the following code creates an Iter from the values of an array\ncontaining the numbers 1 through 5, increments each number by one, filters out\nany odd numbers, and prints the rest.  let xs = Iter[I64]([as I64: 1; 2; 3; 4; 5].values())\n  .map[I64]({(x: I64): I64 => x + 1 })\n  .filter({(x: I64): Bool => (x % 2) == 0 })\n  .map[None]({(x: I64) => env.out.print(x.string()) })  This will result in an iterator that prints the numbers 2, 4, and 6. However,\ndue to the lazy nature of the map and filter, no iteration has actually occurred\nand nothing will be printed. One solution to this would be to loop over the\nresulting Iter as so:  for x in xs do\n  None\nend  This will trigger the iteration and print out the values 2, 4, and 6. This is\nwhere the  run  method comes in handy by doing the iteration without the need\nfor a loop. So the final code would be as follows:  Iter[I64]([as I64: 1; 2; 3; 4; 5].values())\n  .map[I64]({(x: I64): I64 => x + 1 })\n  .filter({(x: I64): Bool => (x % 2) == 0 })\n  .map[None]({(x: I64) => env.out.print(x.string()) })\n  .run()  Output:  2\n4\n6",
            "title": "Iter"
        },
        {
            "location": "/itertools--index/#other-classes",
            "text": "Chain -- chain together two or more iterators  Take -- return only the specified number of items from the given\niterator  Zip2, Zip3, Zip4, Zip5 -- zip together N iterators  Repeat -- create an iterator that reapeatedly returns the given value  Cycle -- create an iterator that infinitely loops over the items of\nthe given iterator  MapFn -- create an iterator that applies a function to the value of\nthe given iterator  Filter -- create an iterator that only returns items that match a\npredicate",
            "title": "Other Classes"
        },
        {
            "location": "/itertools--index/#public-types",
            "text": "class Zip2  class Zip3  class Zip4  class Zip5  class Chain  class Filter  class Cycle  class Repeat  class Iter  class Take  class MapFn",
            "title": "Public Types"
        },
        {
            "location": "/itertools--index/#private-types",
            "text": "primitive _None",
            "title": "Private Types"
        },
        {
            "location": "/itertools-Zip2/",
            "text": "Zip2[A: A, B: B]\n\n\nZip two iterators together so that each call to next() results in\n  a tuple with the next value of the first iterator and the next value\n  of the second iterator. The number of items returned is the minimum of\n  the number of items returned by the two iterators.\n\n\n## Example program\n\n\nPrint the following:\n\n\n1 a\n  2 b\n  3 c\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      var i1: Array[I32] ref = [as I32: 1; 2; 3]\n      var i2: Array[String] ref = [\"a\"; \"b\"; \"c\"; \"d\"]\n\n\n  for (x, y) in Zip2[I32, String](i1.values(), i2.values()) do\n    env.out.print(\"\".add(x.string()).add(\" \").add(y))\n  end\n\n\n\n```\n\n\nclass ref Zip2[A: A, B: B] is\n  Iterator[(A , B)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[(A , B)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  i1: Iterator[A] ref,\n  i2: Iterator[B] ref)\n: Zip2[A, B] ref^\n\n\n\n\nParameters\n\n\n\n\ni1: \nIterator\n[A] ref\n\n\ni2: \nIterator\n[B] ref\n\n\n\n\nReturns\n\n\n\n\nZip2\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: (A , B) ?\n\n\n\n\nReturns\n\n\n\n\n(A , B) ?",
            "title": "class Zip2"
        },
        {
            "location": "/itertools-Zip2/#zip291a-a-b-b93",
            "text": "Zip two iterators together so that each call to next() results in\n  a tuple with the next value of the first iterator and the next value\n  of the second iterator. The number of items returned is the minimum of\n  the number of items returned by the two iterators.  ## Example program  Print the following:  1 a\n  2 b\n  3 c  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      var i1: Array[I32] ref = [as I32: 1; 2; 3]\n      var i2: Array[String] ref = [\"a\"; \"b\"; \"c\"; \"d\"]    for (x, y) in Zip2[I32, String](i1.values(), i2.values()) do\n    env.out.print(\"\".add(x.string()).add(\" \").add(y))\n  end  ```  class ref Zip2[A: A, B: B] is\n  Iterator[(A , B)] ref  Implements   Iterator [(A , B)] ref",
            "title": "Zip2[A: A, B: B]"
        },
        {
            "location": "/itertools-Zip2/#constructors",
            "text": "create  new ref create(\n  i1: Iterator[A] ref,\n  i2: Iterator[B] ref)\n: Zip2[A, B] ref^  Parameters   i1:  Iterator [A] ref  i2:  Iterator [B] ref   Returns   Zip2 [A, B] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Zip2/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: (A , B) ?  Returns   (A , B) ?",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Zip3/",
            "text": "Zip3[A: A, B: B, C: C]\n\n\nZip three iterators together so that each call to next() results in\n  a tuple with the next value of the first iterator, the next value\n  of the second iterator, and the value of the third iterator. The\n  number of items returned is the minimum of the number of items\n  returned by the three iterators.\n\n\n## Example Program\n\n\nPrint the following:\n\n\n1 a 0.5\n  2 b 9.8\n  3 c 3.3\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      var i1: Array[I32] ref = [as I32: 1; 2; 3]\n      var i2: Array[String] ref = [\"a\"; \"b\"; \"c\"; \"d\"]\n      var i3: Array[F32] ref = [as F32: 0.5; 9.8; 3.3]\n\n\n  for (x, y, z) in Zip3[I32, String, F32](\n    i1.values(), i2.values(), i3.values())\n  do\n    env.out.print(\"\"\n      .add(x.string()).add(\" \")\n      .add(y).add(\" \")\n      .add(z.string()))\n  end\n\n\n\n```\n\n\nclass ref Zip3[A: A, B: B, C: C] is\n  Iterator[(A , B , C)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[(A , B , C)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  i1: Iterator[A] ref,\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref)\n: Zip3[A, B, C] ref^\n\n\n\n\nParameters\n\n\n\n\ni1: \nIterator\n[A] ref\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\n\n\nReturns\n\n\n\n\nZip3\n[A, B, C] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: (A , B , C) ?\n\n\n\n\nReturns\n\n\n\n\n(A , B , C) ?",
            "title": "class Zip3"
        },
        {
            "location": "/itertools-Zip3/#zip391a-a-b-b-c-c93",
            "text": "Zip three iterators together so that each call to next() results in\n  a tuple with the next value of the first iterator, the next value\n  of the second iterator, and the value of the third iterator. The\n  number of items returned is the minimum of the number of items\n  returned by the three iterators.  ## Example Program  Print the following:  1 a 0.5\n  2 b 9.8\n  3 c 3.3  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      var i1: Array[I32] ref = [as I32: 1; 2; 3]\n      var i2: Array[String] ref = [\"a\"; \"b\"; \"c\"; \"d\"]\n      var i3: Array[F32] ref = [as F32: 0.5; 9.8; 3.3]    for (x, y, z) in Zip3[I32, String, F32](\n    i1.values(), i2.values(), i3.values())\n  do\n    env.out.print(\"\"\n      .add(x.string()).add(\" \")\n      .add(y).add(\" \")\n      .add(z.string()))\n  end  ```  class ref Zip3[A: A, B: B, C: C] is\n  Iterator[(A , B , C)] ref  Implements   Iterator [(A , B , C)] ref",
            "title": "Zip3[A: A, B: B, C: C]"
        },
        {
            "location": "/itertools-Zip3/#constructors",
            "text": "create  new ref create(\n  i1: Iterator[A] ref,\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref)\n: Zip3[A, B, C] ref^  Parameters   i1:  Iterator [A] ref  i2:  Iterator [B] ref  i3:  Iterator [C] ref   Returns   Zip3 [A, B, C] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Zip3/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: (A , B , C) ?  Returns   (A , B , C) ?",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Zip4/",
            "text": "Zip4[A: A, B: B, C: C, D: D]\n\n\nZip four iterators together so that each call to next() results in\n  a tuple with the next value of each of the iterators. The number of\n  items returned is the minimum of the number of items returned by the\n  iterators.\n\n\n## Example Program\n\n\nPrint the following:\n\n\n1 a 0.5 m\n  2 b 9.8 n\n  3 c 3.3 o\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      var i1: Array[I32] ref = [as I32: 1; 2; 3]\n      var i2: Array[String] ref = [\"a\"; \"b\"; \"c\"; \"d\"]\n      var i3: Array[F32] ref = [as F32: 0.5; 9.8; 3.3]\n      var i4: Array[String] ref = [\"m\"; \"n\"; \"o\"; \"p\"; \"q\"; \"r\"]\n\n\n  for (x, y, z, xx) in Zip4[I32, String, F32, String](\n    i1.values(), i2.values(), i3.values(), i4.values())\n  do\n    env.out.print(\"\"\n      .add(x.string()).add(\" \")\n      .add(y).add(\" \")\n      .add(z.string()).add(\" \")\n      .add(xx.string()))\n  end\n\n\n\n```\n\n\nclass ref Zip4[A: A, B: B, C: C, D: D] is\n  Iterator[(A , B , C , D)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[(A , B , C , D)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  i1: Iterator[A] ref,\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref)\n: Zip4[A, B, C, D] ref^\n\n\n\n\nParameters\n\n\n\n\ni1: \nIterator\n[A] ref\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\ni4: \nIterator\n[D] ref\n\n\n\n\nReturns\n\n\n\n\nZip4\n[A, B, C, D] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: (A , B , C , D) ?\n\n\n\n\nReturns\n\n\n\n\n(A , B , C , D) ?",
            "title": "class Zip4"
        },
        {
            "location": "/itertools-Zip4/#zip491a-a-b-b-c-c-d-d93",
            "text": "Zip four iterators together so that each call to next() results in\n  a tuple with the next value of each of the iterators. The number of\n  items returned is the minimum of the number of items returned by the\n  iterators.  ## Example Program  Print the following:  1 a 0.5 m\n  2 b 9.8 n\n  3 c 3.3 o  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      var i1: Array[I32] ref = [as I32: 1; 2; 3]\n      var i2: Array[String] ref = [\"a\"; \"b\"; \"c\"; \"d\"]\n      var i3: Array[F32] ref = [as F32: 0.5; 9.8; 3.3]\n      var i4: Array[String] ref = [\"m\"; \"n\"; \"o\"; \"p\"; \"q\"; \"r\"]    for (x, y, z, xx) in Zip4[I32, String, F32, String](\n    i1.values(), i2.values(), i3.values(), i4.values())\n  do\n    env.out.print(\"\"\n      .add(x.string()).add(\" \")\n      .add(y).add(\" \")\n      .add(z.string()).add(\" \")\n      .add(xx.string()))\n  end  ```  class ref Zip4[A: A, B: B, C: C, D: D] is\n  Iterator[(A , B , C , D)] ref  Implements   Iterator [(A , B , C , D)] ref",
            "title": "Zip4[A: A, B: B, C: C, D: D]"
        },
        {
            "location": "/itertools-Zip4/#constructors",
            "text": "create  new ref create(\n  i1: Iterator[A] ref,\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref)\n: Zip4[A, B, C, D] ref^  Parameters   i1:  Iterator [A] ref  i2:  Iterator [B] ref  i3:  Iterator [C] ref  i4:  Iterator [D] ref   Returns   Zip4 [A, B, C, D] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Zip4/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: (A , B , C , D) ?  Returns   (A , B , C , D) ?",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Zip5/",
            "text": "Zip5[A: A, B: B, C: C, D: D, E: E]\n\n\nZip five iterators together so that each call to next() results in\n  a tuple with the next value of each of the iterators. The number of\n  items returned is the minimum of the number of items returned by the\n  iterators.\n\n\n## Example Program\n\n\nPrint the following:\n\n\n1 a 0.5 m 2\n  2 b 9.8 n 6\n  3 c 3.3 o 5\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      var i1: Array[I32] ref = [as I32: 1; 2; 3]\n      var i2: Array[String] ref = [\"a\"; \"b\"; \"c\"; \"d\"]\n      var i3: Array[F32] ref = [as F32: 0.5; 9.8; 3.3]\n      var i4: Array[String] ref = [\"m\"; \"n\"; \"o\"; \"p\"; \"q\"; \"r\"]\n      var i5: Array[I32] ref = [as I32: 2; 6; 5; 3; 5]\n\n\n  for (x, y, z, xx, yy) in Zip5[I32, String, F32, String, I32](\n    i1.values(), i2.values(), i3.values(), i4.values(), i5.values())\n  do\n    env.out.print(\"\"\n      .add(x.string()).add(\" \")\n      .add(y).add(\" \")\n      .add(z.string()).add(\" \")\n      .add(xx.string()).add(\" \")\n      .add(yy.string()))\n  end\n\n\n\n```\n\n\nclass ref Zip5[A: A, B: B, C: C, D: D, E: E] is\n  Iterator[(A , B , C , D , E)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[(A , B , C , D , E)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  i1: Iterator[A] ref,\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref,\n  i5: Iterator[E] ref)\n: Zip5[A, B, C, D, E] ref^\n\n\n\n\nParameters\n\n\n\n\ni1: \nIterator\n[A] ref\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\ni4: \nIterator\n[D] ref\n\n\ni5: \nIterator\n[E] ref\n\n\n\n\nReturns\n\n\n\n\nZip5\n[A, B, C, D, E] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: (A , B , C , D , E) ?\n\n\n\n\nReturns\n\n\n\n\n(A , B , C , D , E) ?",
            "title": "class Zip5"
        },
        {
            "location": "/itertools-Zip5/#zip591a-a-b-b-c-c-d-d-e-e93",
            "text": "Zip five iterators together so that each call to next() results in\n  a tuple with the next value of each of the iterators. The number of\n  items returned is the minimum of the number of items returned by the\n  iterators.  ## Example Program  Print the following:  1 a 0.5 m 2\n  2 b 9.8 n 6\n  3 c 3.3 o 5  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      var i1: Array[I32] ref = [as I32: 1; 2; 3]\n      var i2: Array[String] ref = [\"a\"; \"b\"; \"c\"; \"d\"]\n      var i3: Array[F32] ref = [as F32: 0.5; 9.8; 3.3]\n      var i4: Array[String] ref = [\"m\"; \"n\"; \"o\"; \"p\"; \"q\"; \"r\"]\n      var i5: Array[I32] ref = [as I32: 2; 6; 5; 3; 5]    for (x, y, z, xx, yy) in Zip5[I32, String, F32, String, I32](\n    i1.values(), i2.values(), i3.values(), i4.values(), i5.values())\n  do\n    env.out.print(\"\"\n      .add(x.string()).add(\" \")\n      .add(y).add(\" \")\n      .add(z.string()).add(\" \")\n      .add(xx.string()).add(\" \")\n      .add(yy.string()))\n  end  ```  class ref Zip5[A: A, B: B, C: C, D: D, E: E] is\n  Iterator[(A , B , C , D , E)] ref  Implements   Iterator [(A , B , C , D , E)] ref",
            "title": "Zip5[A: A, B: B, C: C, D: D, E: E]"
        },
        {
            "location": "/itertools-Zip5/#constructors",
            "text": "create  new ref create(\n  i1: Iterator[A] ref,\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref,\n  i5: Iterator[E] ref)\n: Zip5[A, B, C, D, E] ref^  Parameters   i1:  Iterator [A] ref  i2:  Iterator [B] ref  i3:  Iterator [C] ref  i4:  Iterator [D] ref  i5:  Iterator [E] ref   Returns   Zip5 [A, B, C, D, E] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Zip5/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: (A , B , C , D , E) ?  Returns   (A , B , C , D , E) ?",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Chain/",
            "text": "Chain[A: A]\n\n\nTake an iterator of iterators and work through them, returning the\n  items of the first one, then the second one, and so on.\n\n\n## Example program\n\n\nPrint the numbers 1 through 14\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      let i1 = [as I32: 1; 2; 3; 4]\n      let i2 = [as I32: 5; 6; 7; 8; 9]\n      let i3 = [as I32: 10; 11; 12; 13; 14]\n\n\n  for x in Chain[I32]([i1.values(); i2.values(); i3.values()].values()) do\n    env.out.print(x.string())\n  end\n\n\n\n```\n\n\nclass ref Chain[A: A] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  outer_iterator: Iterator[Iterator[A] ref] ref)\n: Chain[A] ref^\n\n\n\n\nParameters\n\n\n\n\nouter_iterator: \nIterator\n[\nIterator\n[A] ref] ref\n\n\n\n\nReturns\n\n\n\n\nChain\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?",
            "title": "class Chain"
        },
        {
            "location": "/itertools-Chain/#chain91a-a93",
            "text": "Take an iterator of iterators and work through them, returning the\n  items of the first one, then the second one, and so on.  ## Example program  Print the numbers 1 through 14  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      let i1 = [as I32: 1; 2; 3; 4]\n      let i2 = [as I32: 5; 6; 7; 8; 9]\n      let i3 = [as I32: 10; 11; 12; 13; 14]    for x in Chain[I32]([i1.values(); i2.values(); i3.values()].values()) do\n    env.out.print(x.string())\n  end  ```  class ref Chain[A: A] is\n  Iterator[A] ref  Implements   Iterator [A] ref",
            "title": "Chain[A: A]"
        },
        {
            "location": "/itertools-Chain/#constructors",
            "text": "create  new ref create(\n  outer_iterator: Iterator[Iterator[A] ref] ref)\n: Chain[A] ref^  Parameters   outer_iterator:  Iterator [ Iterator [A] ref] ref   Returns   Chain [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Chain/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A ?  Returns   A ?",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-_None/",
            "text": "_None\n\n\nprimitive val _None\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _None val^\n\n\n\n\nReturns\n\n\n\n\n_None\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_None\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_None\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive _None"
        },
        {
            "location": "/itertools-_None/#_none",
            "text": "primitive val _None",
            "title": "_None"
        },
        {
            "location": "/itertools-_None/#constructors",
            "text": "create  new val create()\n: _None val^  Returns   _None  val^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-_None/#public-functions",
            "text": "eq  fun box eq(\n  that: _None val)\n: Bool val  Parameters   that:  _None  val   Returns   Bool  val    ne  fun box ne(\n  that: _None val)\n: Bool val  Parameters   that:  _None  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Filter/",
            "text": "Filter[A: A]\n\n\nTake an iterator and a predicate function and return an iterator\n  that only returns items that match the predicate.\n\n\n## Example program\n\n\nOnly print command line arguments that are more than 3 characters long.\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      let fn = {(s: String): Bool => s.size() > 3 }\n      for x in Filter\nString\n do\n        env.out.print(x)\n      end\n  ```\n\n\nclass ref Filter[A: A] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  iter: Iterator[A^] ref,\n  fn: {(A!): Bool ?}[A] val)\n: Filter[A] ref^\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\nfn: {(A!): Bool ?}[A] val\n\n\n\n\nReturns\n\n\n\n\nFilter\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nPrivate Functions\n\n\n_find_next\n\n\nfun ref _find_next()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "class Filter"
        },
        {
            "location": "/itertools-Filter/#filter91a-a93",
            "text": "Take an iterator and a predicate function and return an iterator\n  that only returns items that match the predicate.  ## Example program  Only print command line arguments that are more than 3 characters long.  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      let fn = {(s: String): Bool => s.size() > 3 }\n      for x in Filter String  do\n        env.out.print(x)\n      end\n  ```  class ref Filter[A: A] is\n  Iterator[A] ref  Implements   Iterator [A] ref",
            "title": "Filter[A: A]"
        },
        {
            "location": "/itertools-Filter/#constructors",
            "text": "create  new ref create(\n  iter: Iterator[A^] ref,\n  fn: {(A!): Bool ?}[A] val)\n: Filter[A] ref^  Parameters   iter:  Iterator [A^] ref  fn: {(A!): Bool ?}[A] val   Returns   Filter [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Filter/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A ?  Returns   A ?",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Filter/#private-functions",
            "text": "_find_next  fun ref _find_next()\n: None val  Returns   None  val",
            "title": "Private Functions"
        },
        {
            "location": "/itertools-Cycle/",
            "text": "Cycle[A: A]\n\n\nCreate an iterator that repeatedly cycles through the values from the\n  original iterator.\n\n\nWARNING: The values returned by the original iterator are cached, so\n  the input iterator should be finite.\n\n\n## Example program\n\n\nPrint the numbers 1 through 4 forever.\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      let i1 = [as I32: 1; 2; 3; 4]\n      for x in Cycle\nI32\n do\n        env.out.print(x.string())\n      end\n  ```\n\n\nclass ref Cycle[A: A] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  iter: Iterator[A^] ref)\n: Cycle[A] ref^\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\n\n\n\nCycle\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?",
            "title": "class Cycle"
        },
        {
            "location": "/itertools-Cycle/#cycle91a-a93",
            "text": "Create an iterator that repeatedly cycles through the values from the\n  original iterator.  WARNING: The values returned by the original iterator are cached, so\n  the input iterator should be finite.  ## Example program  Print the numbers 1 through 4 forever.  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      let i1 = [as I32: 1; 2; 3; 4]\n      for x in Cycle I32  do\n        env.out.print(x.string())\n      end\n  ```  class ref Cycle[A: A] is\n  Iterator[A] ref  Implements   Iterator [A] ref",
            "title": "Cycle[A: A]"
        },
        {
            "location": "/itertools-Cycle/#constructors",
            "text": "create  new ref create(\n  iter: Iterator[A^] ref)\n: Cycle[A] ref^  Parameters   iter:  Iterator [A^] ref   Returns   Cycle [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Cycle/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A ?  Returns   A ?",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Repeat/",
            "text": "Repeat[A: A]\n\n\nCreate an iterator that returns the specified value forever.\n\n\n## Example program\n\n\nPrint the number 7 forever.\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      for x in Repeat\nU32\n do\n        env.out.print(x.string())\n      end\n  ```\n\n\nclass ref Repeat[A: A] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  v: A)\n: Repeat[A] ref^\n\n\n\n\nParameters\n\n\n\n\nv: A\n\n\n\n\nReturns\n\n\n\n\nRepeat\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A\n\n\n\n\nReturns\n\n\n\n\nA",
            "title": "class Repeat"
        },
        {
            "location": "/itertools-Repeat/#repeat91a-a93",
            "text": "Create an iterator that returns the specified value forever.  ## Example program  Print the number 7 forever.  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      for x in Repeat U32  do\n        env.out.print(x.string())\n      end\n  ```  class ref Repeat[A: A] is\n  Iterator[A] ref  Implements   Iterator [A] ref",
            "title": "Repeat[A: A]"
        },
        {
            "location": "/itertools-Repeat/#constructors",
            "text": "create  new ref create(\n  v: A)\n: Repeat[A] ref^  Parameters   v: A   Returns   Repeat [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Repeat/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A  Returns   A",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Iter/",
            "text": "Iter[A: A]\n\n\nWrapper class containing methods to modify iterators.\n\n\nclass ref Iter[A: A] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  iter: Iterator[A] ref)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nchain\n\n\nTake an iterator of iterators and return an Iter containing the\nitems of the first one, then the second one, and so on.\n\n## Example\n```pony\nlet xs = [as I64: 1; 2].values()\nlet ys = [as I64: 3; 4].values()\n\nIter[I64].chain([xs; ys].values())\n```\n`1 2 3 4`\n\n\n\nnew ref chain(\n  outer_iterator: Iterator[Iterator[A] ref] ref)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nouter_iterator: \nIterator\n[\nIterator\n[A] ref] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nall\n\n\nReturn false if at least one value of the iterator fails to match the\npredicate `f`. This method short-circuits at the first value where the\npredicate returns false, otherwise true is returned.\n\n## Examples\n\n```pony\nIter[I64]([as I64: 2; 4; 6].values())\n  .all({(x: I64): Bool => (x % 2) == 0 })\n```\n`true`\n\n```pony\nIter[I64]([as I64: 2; 3; 4].values())\n  .all({(x: I64): Bool => (x % 2) == 0 })\n```\n`false`\n\n\n\nfun ref all(\n  f: {(A!): Bool ?}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nany\n\n\nReturn true if at least one value of the iterator matches the predicate\n`f`. This method short-circuits at the first value where the predicate\nreturns true, otherwise false is returned.\n\n## Examples\n\n```pony\nIter[I64]([as I64: 2; 4; 6].values())\n  .any({(x: I64): Bool => (x % 2) == 1 })\n```\n`false`\n\n```pony\nIter[I64]([as I64: 2; 3; 4].values())\n  .any({(x: I64): Bool => (x % 2) == 1 })\n```\n`true`\n\n\n\nfun ref any(\n  f: {(A!): Bool ?}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncollect[optional B: \nSeq\n[A!] ref]\n\n\nPush each value from the iterator into the collection `coll`.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .collect(Array[I64](3))\n```\n`[1, 2, 3]`\n\n\n\nfun ref collect[optional B: Seq[A!] ref](\n  coll: B ref)\n: B ref^\n\n\n\n\nParameters\n\n\n\n\ncoll: B ref\n\n\n\n\nReturns\n\n\n\n\nB ref^\n\n\n\n\n\n\ncount\n\n\nReturn the number of values in the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .count()\n```\n`3`\n\n\n\nfun ref count()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncycle\n\n\nRepeatedly cycle through the values from the iterator.\n\nWARNING: The values returned by the original iterator are cached, so\nthe input iterator should be finite.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .cycle()\n```\n`1 2 3 1 2 3 1 2 3 ...`\n\n\n\nfun ref cycle()\n: Iter[A!] ref^\n\n\n\n\nReturns\n\n\n\n\nIter\n[A!] ref^\n\n\n\n\n\n\nenum[optional B: (\nReal\n[B val] val & (\nI8\n val | \nI16\n val | \nI32\n val |\n\n\n[I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val))\\]\n\nAn iterator which yields the current iteration count as well as the next\nvalue from the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .enum()\n```\n`(0, 1) (1, 2) (2, 3)`\n\n\n\nfun ref enum[optional B: (Real[B val] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))]()\n: Iter[(B val , A)] ref^\n\n\n\n\nReturns\n\n\n\n\nIter\n[(B val , A)] ref^\n\n\n\n\n\n\nfilter\n\n\nReturn an iterator that only returns items that match the predicate `f`.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .filter({(x: I64): Bool => (x % 2) == 0 })\n```\n`2 4 6`\n\n\n\nfun ref filter(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nfind\n\n\nReturn the nth value in the iterator that satisfies the predicate `f`.\n\n## Examples\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .find({(x: I64): Bool => (x % 2) == 0 })\n```\n`2`\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4].values())\n  .find({(x: I64): Bool => (x % 2) == 0 }, 2)\n```\n`4`\n\n\n\nfun ref find(\n  f: {(A!): Bool ?}[A] box,\n  n: USize val = 1)\n: A ?\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\nn: \nUSize\n val = 1\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nfold[B: B]\n\n\nApply a function to every element, producing an accumulated value.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .fold[I64]({(sum: I64, x: I64): I64 => sum + x }, 0)\n```\n`6`\n\n\n\nfun ref fold[B: B](\n  f: {(B, A!): B^ ?}[A, B] box,\n  acc: B)\n: B^ ?\n\n\n\n\nParameters\n\n\n\n\nf: {(B, A!): B^ ?}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\n\n\n\nB^ ?\n\n\n\n\n\n\nlast\n\n\nReturn the last value of the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .last()\n```\n`3`\n\n\n\nfun ref last()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nmap[B: B]\n\n\nReturn an iterator where each item's value is the application of the given\nfunction to the value in the original iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .map[I64]({(x: I64): I64 => x * x })\n```\n`1 4 9`\n\n\n\nfun ref map[B: B](\n  f: {(A!): B ?}[A, B] box)\n: Iter[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): B ?}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[B] ref^\n\n\n\n\n\n\nnth\n\n\nReturn the nth value of the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .nth(2)\n```\n`2`\n\n\n\nfun ref nth(\n  n: USize val)\n: A ?\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nrun\n\n\nIterate through the values of the iterator without a for loop. The\nfunction `on_error` will be called if the iterator's `has_next` method\nreturns true but its `next` method throws an error.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .map[None]({(x: I64) => env.out.print(x.string()) })\n  .run()\n```\n```\n1\n2\n3\n```\n\n\n\nfun ref run(\n  on_error: {()}[A] box = lambda)\n: None val\n\n\n\n\nParameters\n\n\n\n\non_error: {()}[A] box = lambda\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nskip\n\n\nSkip the first n values of the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .skip(3)\n```\n`4 5 6`\n\n\n\nfun ref skip(\n  n: USize val)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nskip_while\n\n\nSkip values of the iterator while the predicate `f` returns true.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .skip_while({(x: I64): Bool => x < 4 })\n```\n`4 5 6`\n\n\n\nfun ref skip_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\ntake\n\n\nReturn an iterator for the first n elements.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .take(3)\n```\n`1 2 3`\n\n\n\nfun ref take(\n  n: USize val)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\ntake_while\n\n\nReturn an iterator that returns values while the predicate `f` returns\ntrue.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .take_while({(x: I64): Bool => x < 4 })\n```\n`1 2 3`\n\n\n\nfun ref take_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nzip[B: B]\n\n\nZip two iterators together so that each call to next() results in\na tuple with the next value of the first iterator and the next value\nof the second iterator. The number of items returned is the minimum of\nthe number of items returned by the two iterators.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2].values())\n  .zip[I64]([as I64: 3; 4].values())\n```\n`(1, 3) (2, 4)`\n\n\n\nfun ref zip[B: B](\n  i2: Iterator[B] ref)\n: Iter[(A , B)] ref^\n\n\n\n\nParameters\n\n\n\n\ni2: \nIterator\n[B] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[(A , B)] ref^\n\n\n\n\n\n\nzip2[B: B, C: C]\n\n\nZip three iterators together so that each call to next() results in\na tuple with the next value of the first iterator, the next value\nof the second iterator, and the value of the third iterator. The\nnumber of items returned is the minimum of the number of items\nreturned by the three iterators.\n\n\nfun ref zip2[B: B, C: C](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref)\n: Iter[(A , B , C)] ref^\n\n\n\n\nParameters\n\n\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[(A , B , C)] ref^\n\n\n\n\n\n\nzip3[B: B, C: C, D: D]\n\n\nZip four iterators together so that each call to next() results in\na tuple with the next value of each of the iterators. The number of\nitems returned is the minimum of the number of items returned by the\niterators.\n\n\nfun ref zip3[B: B, C: C, D: D](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref)\n: Iter[(A , B , C , D)] ref^\n\n\n\n\nParameters\n\n\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\ni4: \nIterator\n[D] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[(A , B , C , D)] ref^\n\n\n\n\n\n\nzip4[B: B, C: C, D: D, E: E]\n\n\nZip five iterators together so that each call to next() results in\na tuple with the next value of each of the iterators. The number of\nitems returned is the minimum of the number of items returned by the\niterators.\n\n\nfun ref zip4[B: B, C: C, D: D, E: E](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref,\n  i5: Iterator[E] ref)\n: Iter[(A , B , C , D , E)] ref^\n\n\n\n\nParameters\n\n\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\ni4: \nIterator\n[D] ref\n\n\ni5: \nIterator\n[E] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[(A , B , C , D , E)] ref^",
            "title": "class Iter"
        },
        {
            "location": "/itertools-Iter/#iter91a-a93",
            "text": "Wrapper class containing methods to modify iterators.  class ref Iter[A: A] is\n  Iterator[A] ref  Implements   Iterator [A] ref",
            "title": "Iter[A: A]"
        },
        {
            "location": "/itertools-Iter/#constructors",
            "text": "create  new ref create(\n  iter: Iterator[A] ref)\n: Iter[A] ref^  Parameters   iter:  Iterator [A] ref   Returns   Iter [A] ref^    chain  Take an iterator of iterators and return an Iter containing the\nitems of the first one, then the second one, and so on.\n\n## Example\n```pony\nlet xs = [as I64: 1; 2].values()\nlet ys = [as I64: 3; 4].values()\n\nIter[I64].chain([xs; ys].values())\n```\n`1 2 3 4`  new ref chain(\n  outer_iterator: Iterator[Iterator[A] ref] ref)\n: Iter[A] ref^  Parameters   outer_iterator:  Iterator [ Iterator [A] ref] ref   Returns   Iter [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Iter/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A ?  Returns   A ?    all  Return false if at least one value of the iterator fails to match the\npredicate `f`. This method short-circuits at the first value where the\npredicate returns false, otherwise true is returned.\n\n## Examples\n\n```pony\nIter[I64]([as I64: 2; 4; 6].values())\n  .all({(x: I64): Bool => (x % 2) == 0 })\n```\n`true`\n\n```pony\nIter[I64]([as I64: 2; 3; 4].values())\n  .all({(x: I64): Bool => (x % 2) == 0 })\n```\n`false`  fun ref all(\n  f: {(A!): Bool ?}[A] box)\n: Bool val  Parameters   f: {(A!): Bool ?}[A] box   Returns   Bool  val    any  Return true if at least one value of the iterator matches the predicate\n`f`. This method short-circuits at the first value where the predicate\nreturns true, otherwise false is returned.\n\n## Examples\n\n```pony\nIter[I64]([as I64: 2; 4; 6].values())\n  .any({(x: I64): Bool => (x % 2) == 1 })\n```\n`false`\n\n```pony\nIter[I64]([as I64: 2; 3; 4].values())\n  .any({(x: I64): Bool => (x % 2) == 1 })\n```\n`true`  fun ref any(\n  f: {(A!): Bool ?}[A] box)\n: Bool val  Parameters   f: {(A!): Bool ?}[A] box   Returns   Bool  val    collect[optional B:  Seq [A!] ref]  Push each value from the iterator into the collection `coll`.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .collect(Array[I64](3))\n```\n`[1, 2, 3]`  fun ref collect[optional B: Seq[A!] ref](\n  coll: B ref)\n: B ref^  Parameters   coll: B ref   Returns   B ref^    count  Return the number of values in the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .count()\n```\n`3`  fun ref count()\n: USize val  Returns   USize  val    cycle  Repeatedly cycle through the values from the iterator.\n\nWARNING: The values returned by the original iterator are cached, so\nthe input iterator should be finite.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .cycle()\n```\n`1 2 3 1 2 3 1 2 3 ...`  fun ref cycle()\n: Iter[A!] ref^  Returns   Iter [A!] ref^    enum[optional B: ( Real [B val] val & ( I8  val |  I16  val |  I32  val |  [I64](builtin-I64) val | [I128](builtin-I128) val | [ILong](builtin-ILong) val | \n[ISize](builtin-ISize) val | [U8](builtin-U8) val | [U16](builtin-U16) val | \n[U32](builtin-U32) val | [U64](builtin-U64) val | [U128](builtin-U128) val | \n[ULong](builtin-ULong) val | [USize](builtin-USize) val | [F32](builtin-F32) val | \n[F64](builtin-F64) val))\\]\n\nAn iterator which yields the current iteration count as well as the next\nvalue from the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .enum()\n```\n`(0, 1) (1, 2) (2, 3)`  fun ref enum[optional B: (Real[B val] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))]()\n: Iter[(B val , A)] ref^  Returns   Iter [(B val , A)] ref^    filter  Return an iterator that only returns items that match the predicate `f`.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .filter({(x: I64): Bool => (x % 2) == 0 })\n```\n`2 4 6`  fun ref filter(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^  Parameters   f: {(A!): Bool ?}[A] box   Returns   Iter [A] ref^    find  Return the nth value in the iterator that satisfies the predicate `f`.\n\n## Examples\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .find({(x: I64): Bool => (x % 2) == 0 })\n```\n`2`\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4].values())\n  .find({(x: I64): Bool => (x % 2) == 0 }, 2)\n```\n`4`  fun ref find(\n  f: {(A!): Bool ?}[A] box,\n  n: USize val = 1)\n: A ?  Parameters   f: {(A!): Bool ?}[A] box  n:  USize  val = 1   Returns   A ?    fold[B: B]  Apply a function to every element, producing an accumulated value.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .fold[I64]({(sum: I64, x: I64): I64 => sum + x }, 0)\n```\n`6`  fun ref fold[B: B](\n  f: {(B, A!): B^ ?}[A, B] box,\n  acc: B)\n: B^ ?  Parameters   f: {(B, A!): B^ ?}[A, B] box  acc: B   Returns   B^ ?    last  Return the last value of the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .last()\n```\n`3`  fun ref last()\n: A ?  Returns   A ?    map[B: B]  Return an iterator where each item's value is the application of the given\nfunction to the value in the original iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .map[I64]({(x: I64): I64 => x * x })\n```\n`1 4 9`  fun ref map[B: B](\n  f: {(A!): B ?}[A, B] box)\n: Iter[B] ref^  Parameters   f: {(A!): B ?}[A, B] box   Returns   Iter [B] ref^    nth  Return the nth value of the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .nth(2)\n```\n`2`  fun ref nth(\n  n: USize val)\n: A ?  Parameters   n:  USize  val   Returns   A ?    run  Iterate through the values of the iterator without a for loop. The\nfunction `on_error` will be called if the iterator's `has_next` method\nreturns true but its `next` method throws an error.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3].values())\n  .map[None]({(x: I64) => env.out.print(x.string()) })\n  .run()\n```\n```\n1\n2\n3\n```  fun ref run(\n  on_error: {()}[A] box = lambda)\n: None val  Parameters   on_error: {()}[A] box = lambda   Returns   None  val    skip  Skip the first n values of the iterator.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .skip(3)\n```\n`4 5 6`  fun ref skip(\n  n: USize val)\n: Iter[A] ref^  Parameters   n:  USize  val   Returns   Iter [A] ref^    skip_while  Skip values of the iterator while the predicate `f` returns true.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .skip_while({(x: I64): Bool => x < 4 })\n```\n`4 5 6`  fun ref skip_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^  Parameters   f: {(A!): Bool ?}[A] box   Returns   Iter [A] ref^    take  Return an iterator for the first n elements.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .take(3)\n```\n`1 2 3`  fun ref take(\n  n: USize val)\n: Iter[A] ref^  Parameters   n:  USize  val   Returns   Iter [A] ref^    take_while  Return an iterator that returns values while the predicate `f` returns\ntrue.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2; 3; 4; 5; 6].values())\n  .take_while({(x: I64): Bool => x < 4 })\n```\n`1 2 3`  fun ref take_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^  Parameters   f: {(A!): Bool ?}[A] box   Returns   Iter [A] ref^    zip[B: B]  Zip two iterators together so that each call to next() results in\na tuple with the next value of the first iterator and the next value\nof the second iterator. The number of items returned is the minimum of\nthe number of items returned by the two iterators.\n\n## Example\n\n```pony\nIter[I64]([as I64: 1; 2].values())\n  .zip[I64]([as I64: 3; 4].values())\n```\n`(1, 3) (2, 4)`  fun ref zip[B: B](\n  i2: Iterator[B] ref)\n: Iter[(A , B)] ref^  Parameters   i2:  Iterator [B] ref   Returns   Iter [(A , B)] ref^    zip2[B: B, C: C]  Zip three iterators together so that each call to next() results in\na tuple with the next value of the first iterator, the next value\nof the second iterator, and the value of the third iterator. The\nnumber of items returned is the minimum of the number of items\nreturned by the three iterators.  fun ref zip2[B: B, C: C](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref)\n: Iter[(A , B , C)] ref^  Parameters   i2:  Iterator [B] ref  i3:  Iterator [C] ref   Returns   Iter [(A , B , C)] ref^    zip3[B: B, C: C, D: D]  Zip four iterators together so that each call to next() results in\na tuple with the next value of each of the iterators. The number of\nitems returned is the minimum of the number of items returned by the\niterators.  fun ref zip3[B: B, C: C, D: D](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref)\n: Iter[(A , B , C , D)] ref^  Parameters   i2:  Iterator [B] ref  i3:  Iterator [C] ref  i4:  Iterator [D] ref   Returns   Iter [(A , B , C , D)] ref^    zip4[B: B, C: C, D: D, E: E]  Zip five iterators together so that each call to next() results in\na tuple with the next value of each of the iterators. The number of\nitems returned is the minimum of the number of items returned by the\niterators.  fun ref zip4[B: B, C: C, D: D, E: E](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref,\n  i5: Iterator[E] ref)\n: Iter[(A , B , C , D , E)] ref^  Parameters   i2:  Iterator [B] ref  i3:  Iterator [C] ref  i4:  Iterator [D] ref  i5:  Iterator [E] ref   Returns   Iter [(A , B , C , D , E)] ref^",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-Take/",
            "text": "Take[A: A]\n\n\nCreate an iterator from the original iterator that only returns a\n  specified number of items.\n\n\n## Example program\n\n\nPrints the numbers 10 through 12.\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      let i1 = [as I32: 10; 11; 12; 13; 14]\n\n\n  for x in Take[I32](i1.values(), 3) do\n    env.out.print(x.string())\n  end\n\n\n\n```\n\n\nclass ref Take[A: A] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  i: Iterator[A] ref,\n  l: USize val)\n: Take[A] ref^\n\n\n\n\nParameters\n\n\n\n\ni: \nIterator\n[A] ref\n\n\nl: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nTake\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?",
            "title": "class Take"
        },
        {
            "location": "/itertools-Take/#take91a-a93",
            "text": "Create an iterator from the original iterator that only returns a\n  specified number of items.  ## Example program  Prints the numbers 10 through 12.  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      let i1 = [as I32: 10; 11; 12; 13; 14]    for x in Take[I32](i1.values(), 3) do\n    env.out.print(x.string())\n  end  ```  class ref Take[A: A] is\n  Iterator[A] ref  Implements   Iterator [A] ref",
            "title": "Take[A: A]"
        },
        {
            "location": "/itertools-Take/#constructors",
            "text": "create  new ref create(\n  i: Iterator[A] ref,\n  l: USize val)\n: Take[A] ref^  Parameters   i:  Iterator [A] ref  l:  USize  val   Returns   Take [A] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-Take/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: A ?  Returns   A ?",
            "title": "Public Functions"
        },
        {
            "location": "/itertools-MapFn/",
            "text": "MapFn[A: A, B: B]\n\n\nTake an iterator and a function and return an iterator where each\n  item's value is the application of the given function to the value\n  in the original iterator.\n\n\n## Example program\n\n\nDouble all of the numbers given as command line arguments.\n\n\n```pony\n  use \"itertools\"\n\n\nactor Main\n    new create(env: Env) =>\n      let fn = {(s: String): I32 => try s.i32() * 2 else 0 end }\n      for x in MapFn\nString, I32\n do\n        env.out.print(x.string())\n      end\n  ```\n\n\nclass ref MapFn[A: A, B: B] is\n  Iterator[B] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[B] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  iter: Iterator[A] ref,\n  f: {(A!): B ?}[A, B] box)\n: MapFn[A, B] ref^\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A] ref\n\n\nf: {(A!): B ?}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nMapFn\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: B ?\n\n\n\n\nReturns\n\n\n\n\nB ?",
            "title": "class MapFn"
        },
        {
            "location": "/itertools-MapFn/#mapfn91a-a-b-b93",
            "text": "Take an iterator and a function and return an iterator where each\n  item's value is the application of the given function to the value\n  in the original iterator.  ## Example program  Double all of the numbers given as command line arguments.  ```pony\n  use \"itertools\"  actor Main\n    new create(env: Env) =>\n      let fn = {(s: String): I32 => try s.i32() * 2 else 0 end }\n      for x in MapFn String, I32  do\n        env.out.print(x.string())\n      end\n  ```  class ref MapFn[A: A, B: B] is\n  Iterator[B] ref  Implements   Iterator [B] ref",
            "title": "MapFn[A: A, B: B]"
        },
        {
            "location": "/itertools-MapFn/#constructors",
            "text": "create  new ref create(\n  iter: Iterator[A] ref,\n  f: {(A!): B ?}[A, B] box)\n: MapFn[A, B] ref^  Parameters   iter:  Iterator [A] ref  f: {(A!): B ?}[A, B] box   Returns   MapFn [A, B] ref^",
            "title": "Constructors"
        },
        {
            "location": "/itertools-MapFn/#public-functions",
            "text": "has_next  fun ref has_next()\n: Bool val  Returns   Bool  val    next  fun ref next()\n: B ?  Returns   B ?",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest--index/",
            "text": "PonyTest package\n\n\nThe PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.\n\n\nTo help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n\n\n\n\nbuiltin\n\n\ntime\n\n\ncollections\n\n\n\n\nEach unit test is a class, with a single test function. By default all tests\nrun concurrently.\n\n\nEach test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.\n\n\nWhen any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.\n\n\nExample program\n\n\nTo use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.\n\n\nThe following is a complete program with 2 trivial tests.\n\n\nuse \"ponytest\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String => \"addition\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String => \"subtraction\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](2, 4 - 2)\n\n\n\n\nThe make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.\n\n\nMain.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.\n\n\nTest names\n\n\nTests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.\n\n\nArbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.\n\n\nYou can skip any tests whose names start with a given string by using the\n\n--exclude=[prefix]\n command line option.\n\n\nYou can run only tests whose names start with a given string by using the\n\n--only=[prefix]\n command line option.\n\n\nAggregation\n\n\nOften it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.\n\n\nThis can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages \nfoo\n and \nbar\n.\n\n\nuse \"ponytest\"\nuse foo = \"foo\"\nuse bar = \"bar\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)\n\n\n\n\nAggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.\n\n\nLong tests\n\n\nSimple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.\n\n\nLong tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.\n\n\nThe complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.\n\n\nSince failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.\n\n\nOn a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.\n\n\nNote that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.\n\n\nTimeouts should not be used as the standard method of detecting if a test has\nfailed.\n\n\nExclusion groups\n\n\nBy default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.\n\n\nNo tests that are in the same exclusion group will be run concurrently.\n\n\nExclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.\n\n\nThe command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.\n\n\nLabels\n\n\nTest can have label. Labels are used to filter which tests are run, by setting\ncommand line argument \n--label=[some custom label]\n. It can be used to separate\nunit tests from integration tests.\n\n\nBy default label is empty. You can set it up by overriding \nlabel(): String\n\nmethod in unit test.\n\n\nuse \"ponytest\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String => \"_I8AddTest\"\n  fun label(): String => \"simple\"\n  fun apply(h: TestHelper) =>\n    h.assert_eq[I8](1, 1)\n\n\n\n\n\nTear down\n\n\nEach unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.\n\n\nThe tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.\n\n\nWhen a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.\n\n\nThe test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.\n\n\nPublic Types\n\n\n\n\ntrait TestList\n\n\ntrait UnitTest\n\n\nactor PonyTest\n\n\ninterface ITest\n\n\nclass TestHelper\n\n\n\n\nPrivate Types\n\n\n\n\ntrait _Group\n\n\nactor _ExclusiveGroup\n\n\nactor _SimultaneousGroup\n\n\nprimitive _Color",
            "title": "Package"
        },
        {
            "location": "/ponytest--index/#ponytest-package",
            "text": "The PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.  To help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:   builtin  time  collections   Each unit test is a class, with a single test function. By default all tests\nrun concurrently.  Each test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.  When any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.",
            "title": "PonyTest package"
        },
        {
            "location": "/ponytest--index/#example-program",
            "text": "To use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.  The following is a complete program with 2 trivial tests.  use \"ponytest\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String => \"addition\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String => \"subtraction\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](2, 4 - 2)  The make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.  Main.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.",
            "title": "Example program"
        },
        {
            "location": "/ponytest--index/#test-names",
            "text": "Tests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.  Arbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.  You can skip any tests whose names start with a given string by using the --exclude=[prefix]  command line option.  You can run only tests whose names start with a given string by using the --only=[prefix]  command line option.",
            "title": "Test names"
        },
        {
            "location": "/ponytest--index/#aggregation",
            "text": "Often it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.  This can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages  foo  and  bar .  use \"ponytest\"\nuse foo = \"foo\"\nuse bar = \"bar\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)  Aggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.",
            "title": "Aggregation"
        },
        {
            "location": "/ponytest--index/#long-tests",
            "text": "Simple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.  Long tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.  The complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.  Since failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.  On a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.  Note that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.  Timeouts should not be used as the standard method of detecting if a test has\nfailed.",
            "title": "Long tests"
        },
        {
            "location": "/ponytest--index/#exclusion-groups",
            "text": "By default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.  No tests that are in the same exclusion group will be run concurrently.  Exclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.  The command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.",
            "title": "Exclusion groups"
        },
        {
            "location": "/ponytest--index/#labels",
            "text": "Test can have label. Labels are used to filter which tests are run, by setting\ncommand line argument  --label=[some custom label] . It can be used to separate\nunit tests from integration tests.  By default label is empty. You can set it up by overriding  label(): String \nmethod in unit test.  use \"ponytest\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String => \"_I8AddTest\"\n  fun label(): String => \"simple\"\n  fun apply(h: TestHelper) =>\n    h.assert_eq[I8](1, 1)",
            "title": "Labels"
        },
        {
            "location": "/ponytest--index/#tear-down",
            "text": "Each unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.  The tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.  When a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.  The test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.",
            "title": "Tear down"
        },
        {
            "location": "/ponytest--index/#public-types",
            "text": "trait TestList  trait UnitTest  actor PonyTest  interface ITest  class TestHelper",
            "title": "Public Types"
        },
        {
            "location": "/ponytest--index/#private-types",
            "text": "trait _Group  actor _ExclusiveGroup  actor _SimultaneousGroup  primitive _Color",
            "title": "Private Types"
        },
        {
            "location": "/ponytest-_Group/",
            "text": "_Group\n\n\nTest exclusion is achieved by organising tests into groups. Each group can be\nexclusive, ie only one test is run at a time, or simultaneous, ie all tests\nare run concurrently.\n\n\ntrait tag _Group\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nRun the given test, or queue it and run later, as appropriate.\n\n\nbe apply(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_test_complete\n\n\nThe specified test has completed.\n\n\nbe _test_complete(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag",
            "title": "trait _Group"
        },
        {
            "location": "/ponytest-_Group/#_group",
            "text": "Test exclusion is achieved by organising tests into groups. Each group can be\nexclusive, ie only one test is run at a time, or simultaneous, ie all tests\nare run concurrently.  trait tag _Group",
            "title": "_Group"
        },
        {
            "location": "/ponytest-_Group/#public-behaviours",
            "text": "apply  Run the given test, or queue it and run later, as appropriate.  be apply(\n  runner: _TestRunner tag)  Parameters   runner:  _TestRunner  tag",
            "title": "Public Behaviours"
        },
        {
            "location": "/ponytest-_Group/#private-behaviours",
            "text": "_test_complete  The specified test has completed.  be _test_complete(\n  runner: _TestRunner tag)  Parameters   runner:  _TestRunner  tag",
            "title": "Private Behaviours"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/",
            "text": "_ExclusiveGroup\n\n\nTest group in which we only ever have one test running at a time.\n\n\nactor tag _ExclusiveGroup is\n  _Group tag\n\n\n\n\nImplements\n\n\n\n\n_Group\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create()\n: _ExclusiveGroup tag^\n\n\n\n\nReturns\n\n\n\n\n_ExclusiveGroup\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nbe apply(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_test_complete\n\n\nbe _test_complete(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag",
            "title": "actor _ExclusiveGroup"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#_exclusivegroup",
            "text": "Test group in which we only ever have one test running at a time.  actor tag _ExclusiveGroup is\n  _Group tag  Implements   _Group  tag",
            "title": "_ExclusiveGroup"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#constructors",
            "text": "create  new tag create()\n: _ExclusiveGroup tag^  Returns   _ExclusiveGroup  tag^",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#public-behaviours",
            "text": "apply  be apply(\n  runner: _TestRunner tag)  Parameters   runner:  _TestRunner  tag",
            "title": "Public Behaviours"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#private-behaviours",
            "text": "_test_complete  be _test_complete(\n  runner: _TestRunner tag)  Parameters   runner:  _TestRunner  tag",
            "title": "Private Behaviours"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/",
            "text": "_SimultaneousGroup\n\n\nTest group in which all tests can run concurrently.\n\n\nactor tag _SimultaneousGroup is\n  _Group tag\n\n\n\n\nImplements\n\n\n\n\n_Group\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create()\n: _SimultaneousGroup tag^\n\n\n\n\nReturns\n\n\n\n\n_SimultaneousGroup\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nbe apply(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_test_complete\n\n\nbe _test_complete(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag",
            "title": "actor _SimultaneousGroup"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#_simultaneousgroup",
            "text": "Test group in which all tests can run concurrently.  actor tag _SimultaneousGroup is\n  _Group tag  Implements   _Group  tag",
            "title": "_SimultaneousGroup"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#constructors",
            "text": "create  new tag create()\n: _SimultaneousGroup tag^  Returns   _SimultaneousGroup  tag^",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#public-behaviours",
            "text": "apply  be apply(\n  runner: _TestRunner tag)  Parameters   runner:  _TestRunner  tag",
            "title": "Public Behaviours"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#private-behaviours",
            "text": "_test_complete  be _test_complete(\n  runner: _TestRunner tag)  Parameters   runner:  _TestRunner  tag",
            "title": "Private Behaviours"
        },
        {
            "location": "/ponytest-_Color/",
            "text": "_Color\n\n\nStrings to embedded in text to specify colours. These are copies of the\nstrings defined in packages/term. They are duplicated here to avoid a\ndependency.\n\n\nprimitive val _Color\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Color val^\n\n\n\n\nReturns\n\n\n\n\n_Color\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nreset\n\n\nResets all colours and text styles to the default.\n\n\nfun box reset()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nred\n\n\nBright red text.\n\n\nfun box red()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ngreen\n\n\nBright green text.\n\n\nfun box green()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _Color val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Color\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Color val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Color\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive _Color"
        },
        {
            "location": "/ponytest-_Color/#_color",
            "text": "Strings to embedded in text to specify colours. These are copies of the\nstrings defined in packages/term. They are duplicated here to avoid a\ndependency.  primitive val _Color",
            "title": "_Color"
        },
        {
            "location": "/ponytest-_Color/#constructors",
            "text": "create  new val create()\n: _Color val^  Returns   _Color  val^",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-_Color/#public-functions",
            "text": "reset  Resets all colours and text styles to the default.  fun box reset()\n: String val  Returns   String  val    red  Bright red text.  fun box red()\n: String val  Returns   String  val    green  Bright green text.  fun box green()\n: String val  Returns   String  val    eq  fun box eq(\n  that: _Color val)\n: Bool val  Parameters   that:  _Color  val   Returns   Bool  val    ne  fun box ne(\n  that: _Color val)\n: Bool val  Parameters   that:  _Color  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-TestList/",
            "text": "TestList\n\n\nSource of unit tests for a PonyTest object.\nSee package doc string for further information and example use.\n\n\ntrait ref TestList\n\n\n\n\nPublic Functions\n\n\ntests\n\n\nAdd all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:\n\n\nfun tests(test: PonyTest) =>\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)\n\n\n\n\nfun tag tests(\n  test: PonyTest tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntest: \nPonyTest\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "trait TestList"
        },
        {
            "location": "/ponytest-TestList/#testlist",
            "text": "Source of unit tests for a PonyTest object.\nSee package doc string for further information and example use.  trait ref TestList",
            "title": "TestList"
        },
        {
            "location": "/ponytest-TestList/#public-functions",
            "text": "tests  Add all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:  fun tests(test: PonyTest) =>\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)  fun tag tests(\n  test: PonyTest tag)\n: None val  Parameters   test:  PonyTest  tag   Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-UnitTest/",
            "text": "UnitTest\n\n\nEach unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.\n\n\ntrait ref UnitTest\n\n\n\n\nPublic Functions\n\n\nname\n\n\nReport the test name, which is used when printing test results and on the\ncommand line to select tests to run.\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nexclusion_group\n\n\nReport the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.\n\n\nfun box exclusion_group()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\napply\n\n\nRun the test.\nRaising an error is interpreted as a test failure.\n\n\nfun ref apply(\n  h: TestHelper val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\ntimed_out\n\n\nTear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.\n\n\nfun ref timed_out(\n  h: TestHelper val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntear_down\n\n\nTidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.\n\n\nfun ref tear_down(\n  h: TestHelper val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlabel\n\n\nReport the test label, returning an empty string for none.\nIt can be later use to filter tests which we want to run, by labels.\n\n\nfun box label()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "trait UnitTest"
        },
        {
            "location": "/ponytest-UnitTest/#unittest",
            "text": "Each unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.  trait ref UnitTest",
            "title": "UnitTest"
        },
        {
            "location": "/ponytest-UnitTest/#public-functions",
            "text": "name  Report the test name, which is used when printing test results and on the\ncommand line to select tests to run.  fun box name()\n: String val  Returns   String  val    exclusion_group  Report the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.  fun box exclusion_group()\n: String val  Returns   String  val    apply  Run the test.\nRaising an error is interpreted as a test failure.  fun ref apply(\n  h: TestHelper val)\n: None val ?  Parameters   h:  TestHelper  val   Returns   None  val ?    timed_out  Tear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.  fun ref timed_out(\n  h: TestHelper val)\n: None val  Parameters   h:  TestHelper  val   Returns   None  val    tear_down  Tidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.  fun ref tear_down(\n  h: TestHelper val)\n: None val  Parameters   h:  TestHelper  val   Returns   None  val    label  Report the test label, returning an empty string for none.\nIt can be later use to filter tests which we want to run, by labels.  fun box label()\n: String val  Returns   String  val",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-PonyTest/",
            "text": "PonyTest\n\n\nMain test framework actor that organises tests, collates information and\nprints results.\n\n\nactor tag PonyTest\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^\n\n\n\n\nParameters\n\n\n\n\nenv: \nEnv\n val\n\n\nlist: \nTestList\n tag\n\n\n\n\nReturns\n\n\n\n\nPonyTest\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nRun the given test, subject to our filters and options.\n\n\nbe apply(\n  test: UnitTest iso)\n\n\n\n\nParameters\n\n\n\n\ntest: \nUnitTest\n iso\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_test_started\n\n\nA test has started running, update status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.\n\n\nbe _test_started(\n  id: USize val)\n\n\n\n\nParameters\n\n\n\n\nid: \nUSize\n val\n\n\n\n\n\n\n_test_complete\n\n\nA test has completed, restore its result and update our status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.\n\n\nbe _test_complete(\n  id: USize val,\n  pass: Bool val,\n  log: Array[String val] val)\n\n\n\n\nParameters\n\n\n\n\nid: \nUSize\n val\n\n\npass: \nBool\n val\n\n\nlog: \nArray\n[\nString\n val] val\n\n\n\n\n\n\n_all_tests_applied\n\n\nAll our tests have been handed to apply(), setup for finishing\n\n\nbe _all_tests_applied()\n\n\n\n\n\n\nPrivate Functions\n\n\n_find_group\n\n\nFind the group to use for the given group name, subject to the\n--sequential flag.\n\n\nfun ref _find_group(\n  group_name: String val)\n: _Group tag\n\n\n\n\nParameters\n\n\n\n\ngroup_name: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n_Group\n tag\n\n\n\n\n\n\n_process_opts\n\n\nProcess our command line options.\nAll command line arguments given must be recognised and make sense.\nState for specified options is stored in object fields.\nWe don't use the options package because we aren't already dependencies.\n\n\nfun ref _process_opts()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_print_report\n\n\nThe tests are all complete, print out the results.\n\n\nfun box _print_report()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_plural\n\n\nReturn a \"s\" or an empty string depending on whether the given number is 1.\nFor use when printing possibly plural words, eg \"test\" or \"tests\".\n\n\nfun box _plural(\n  n: USize val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "actor PonyTest"
        },
        {
            "location": "/ponytest-PonyTest/#ponytest",
            "text": "Main test framework actor that organises tests, collates information and\nprints results.  actor tag PonyTest",
            "title": "PonyTest"
        },
        {
            "location": "/ponytest-PonyTest/#constructors",
            "text": "create  new tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^  Parameters   env:  Env  val  list:  TestList  tag   Returns   PonyTest  tag^",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-PonyTest/#public-behaviours",
            "text": "apply  Run the given test, subject to our filters and options.  be apply(\n  test: UnitTest iso)  Parameters   test:  UnitTest  iso",
            "title": "Public Behaviours"
        },
        {
            "location": "/ponytest-PonyTest/#private-behaviours",
            "text": "_test_started  A test has started running, update status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.  be _test_started(\n  id: USize val)  Parameters   id:  USize  val    _test_complete  A test has completed, restore its result and update our status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.  be _test_complete(\n  id: USize val,\n  pass: Bool val,\n  log: Array[String val] val)  Parameters   id:  USize  val  pass:  Bool  val  log:  Array [ String  val] val    _all_tests_applied  All our tests have been handed to apply(), setup for finishing  be _all_tests_applied()",
            "title": "Private Behaviours"
        },
        {
            "location": "/ponytest-PonyTest/#private-functions",
            "text": "_find_group  Find the group to use for the given group name, subject to the\n--sequential flag.  fun ref _find_group(\n  group_name: String val)\n: _Group tag  Parameters   group_name:  String  val   Returns   _Group  tag    _process_opts  Process our command line options.\nAll command line arguments given must be recognised and make sense.\nState for specified options is stored in object fields.\nWe don't use the options package because we aren't already dependencies.  fun ref _process_opts()\n: None val  Returns   None  val    _print_report  The tests are all complete, print out the results.  fun box _print_report()\n: None val  Returns   None  val    _plural  Return a \"s\" or an empty string depending on whether the given number is 1.\nFor use when printing possibly plural words, eg \"test\" or \"tests\".  fun box _plural(\n  n: USize val)\n: String val  Parameters   n:  USize  val   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/ponytest-ITest/",
            "text": "ITest\n\n\ninterface ref ITest\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: None val ?\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?",
            "title": "interface ITest"
        },
        {
            "location": "/ponytest-ITest/#itest",
            "text": "interface ref ITest",
            "title": "ITest"
        },
        {
            "location": "/ponytest-ITest/#public-functions",
            "text": "apply  fun box apply()\n: None val ?  Returns   None  val ?",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-TestHelper/",
            "text": "TestHelper\n\n\nPer unit test class that provides control, logging and assertion functions.\n\n\nEach unit test is given a TestHelper when it is run. This is val and so can\n  be passed between methods and actors within the test without restriction.\n\n\nThe assertion functions check the relevant condition and mark the test as a\n  failure if appropriate. The success or failure of the condition is reported\n  back as a Bool which can be checked if a different code path is needed when\n  that condition fails.\n\n\nAll assert functions take an optional message argument. This is simply a\n  string that is printed as part of the error message when the condition fails.\n  It is intended to aid identifying what failed.\n\n\nclass val TestHelper\n\n\n\n\nConstructors\n\n\n_create\n\n\nCreate a new TestHelper.\n\n\nnew val _create(\n  runner: _TestRunner tag,\n  env': Env val)\n: TestHelper val^\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag\n\n\nenv': \nEnv\n val\n\n\n\n\nReturns\n\n\n\n\nTestHelper\n val^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet env: \nEnv\n val\n\n\n\n\n\n\nPublic Functions\n\n\nlog\n\n\nLog the given message.\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.\n\n\n\nfun box log(\n  msg: String val,\n  verbose: Bool val = false)\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val\n\n\nverbose: \nBool\n val = false\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfail\n\n\nFlag the test as having failed.\n\n\nfun box fail(\n  msg: String val= \"Test failed\")\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val= \"Test failed\"\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nassert_true\n\n\nAssert that the given expression is true.\n\n\nfun box assert_true(\n  actual: Bool val,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nactual: \nBool\n val\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_false\n\n\nAssert that the given expression is false.\n\n\nfun box assert_false(\n  actual: Bool val,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nactual: \nBool\n val\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_error\n\n\nAssert that the given test function throws an error when run.\n\n\nfun box assert_error(\n  test: ITest box,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntest: \nITest\n box\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_no_error\n\n\nAssert that the gived test function does not throw an error when run.\n\n\nfun box assert_no_error(\n  test: ITest box,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntest: \nITest\n box\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_is[A: A]\n\n\nAssert that the 2 given expressions resolve to the same instance\n\n\nfun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_eq[A: (\nEquatable\n[A #read] #read & \nStringable\n #read)]\n\n\nAssert that the 2 given expressions are equal.\n\n\nfun box assert_eq[A: (Equatable[A #read] #read & Stringable #read)](\n  expect: A #read,\n  actual: A #read,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nexpect: A #read\n\n\nactual: A #read\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_isnt[A: A]\n\n\nAssert that the 2 given expressions resolve to different instances.\n\n\nfun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_ne[A: (\nEquatable\n[A #read] #read & \nStringable\n #read)]\n\n\nAssert that the 2 given expressions are not equal.\n\n\nfun box assert_ne[A: (Equatable[A #read] #read & Stringable #read)](\n  not_expect: A #read,\n  actual: A #read,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nnot_expect: A #read\n\n\nactual: A #read\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_array_eq[A: (\nEquatable\n[A #read] #read & \nStringable\n #read)]\n\n\nAssert that the contents of the 2 given ReadSeqs are equal.\n\n\nfun box assert_array_eq[A: (Equatable[A #read] #read & Stringable #read)](\n  expect: ReadSeq[A #read] box,\n  actual: ReadSeq[A #read] box,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nexpect: \nReadSeq\n[A #read] box\n\n\nactual: \nReadSeq\n[A #read] box\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_array_eq_unordered[A: (\nEquatable\n[A #read] #read & \nStringable\n #read)]\n\n\nAssert that the contents of the 2 given ReadSeqs are equal ignoring order.\n\n\nfun box assert_array_eq_unordered[A: (Equatable[A #read] #read & Stringable #read)](\n  expect: ReadSeq[A #read] box,\n  actual: ReadSeq[A #read] box,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nexpect: \nReadSeq\n[A #read] box\n\n\nactual: \nReadSeq\n[A #read] box\n\n\nmsg: \nString\n val= \"\"\n\n\nloc: \nSourceLoc\n val = __loc\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlong_test\n\n\nIndicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.\n\n\nfun box long_test(\n  timeout: U64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntimeout: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncomplete\n\n\nMUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.\n\nOnce this is called tear_down() may be called at any time.\n\n\n\nfun box complete(\n  success: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsuccess: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nexpect_action\n\n\nCan be called in a long test to set up expectations for one or more actions\nthat, when all completed, will complete the test.\n\nThis pattern is useful for cases where you have multiple things that need\nto happen to complete your test, but don't want to have to collect them\nall yourself into a single actor that calls the complete method.\n\nThe order of calls to expect_action don't matter - the actions may be\ncompleted in any other order to complete the test.\n\n\n\nfun box expect_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncomplete_action\n\n\nMUST be called for each action expectation that was set up in a long test\nto fulfill the expectations. Any expectations that are still outstanding\nwhen the long test timeout runs out will be printed by name when it fails.\n\nCompleting all outstanding actions is enough to finish the test. There's no\nneed to also call the complete method when the actions are finished.\n\nCalling the complete method will finish the test immediately, without\nwaiting for any outstanding actions to be completed.\n\n\n\nfun box complete_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfail_action\n\n\nCall to fail an action, which will also cause the entire test to fail\nimmediately, without waiting the rest of the outstanding actions.\n\nThe name of the failed action will be included in the failure output.\n\nUsually the action name should be an expected action set up by a call to\nexpect_action, but failing unexpected actions will also fail the test.\n\n\n\nfun box fail_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose_when_done\n\n\nPass a disposable actor to be disposed of when the test is complete.\nThe actor will be disposed no matter whether the test succeeds or fails.\n\nIf the test is already tearing down, the actor will be disposed immediately.\n\n\n\nfun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndisposable: \nDisposableActor\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_check_is[A: A]\n\n\nCheck that the 2 given expressions resolve to the same instance\n\n\nfun box _check_is[A: A](\n  check: String val,\n  expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncheck: \nString\n val\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_check_eq[A: (\nEquatable\n[A #read] #read & \nStringable\n)]\n\n\nCheck that the 2 given expressions are equal.\n\n\nfun box _check_eq[A: (Equatable[A #read] #read & Stringable)](\n  check: String val,\n  expect: A #read,\n  actual: A #read,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncheck: \nString\n val\n\n\nexpect: A #read\n\n\nactual: A #read\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_check_isnt[A: A]\n\n\nCheck that the 2 given expressions resolve to different instances.\n\n\nfun box _check_isnt[A: A](\n  check: String val,\n  not_expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncheck: \nString\n val\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_check_ne[A: (\nEquatable\n[A #read] #read & \nStringable\n)]\n\n\nCheck that the 2 given expressions are not equal.\n\n\nfun box _check_ne[A: (Equatable[A #read] #read & Stringable)](\n  check: String val,\n  not_expect: A #read,\n  actual: A #read,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncheck: \nString\n val\n\n\nnot_expect: A #read\n\n\nactual: A #read\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_format_loc\n\n\nfun box _format_loc(\n  loc: SourceLoc val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_print_array[A: \nStringable\n #read]\n\n\nGenerate a printable string of the contents of the given readseq to use in\nerror messages.\n\n\nfun box _print_array[A: Stringable #read](\n  array: ReadSeq[A #read] box)\n: String val\n\n\n\n\nParameters\n\n\n\n\narray: \nReadSeq\n[A #read] box\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class TestHelper"
        },
        {
            "location": "/ponytest-TestHelper/#testhelper",
            "text": "Per unit test class that provides control, logging and assertion functions.  Each unit test is given a TestHelper when it is run. This is val and so can\n  be passed between methods and actors within the test without restriction.  The assertion functions check the relevant condition and mark the test as a\n  failure if appropriate. The success or failure of the condition is reported\n  back as a Bool which can be checked if a different code path is needed when\n  that condition fails.  All assert functions take an optional message argument. This is simply a\n  string that is printed as part of the error message when the condition fails.\n  It is intended to aid identifying what failed.  class val TestHelper",
            "title": "TestHelper"
        },
        {
            "location": "/ponytest-TestHelper/#constructors",
            "text": "_create  Create a new TestHelper.  new val _create(\n  runner: _TestRunner tag,\n  env': Env val)\n: TestHelper val^  Parameters   runner:  _TestRunner  tag  env':  Env  val   Returns   TestHelper  val^",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-TestHelper/#public-fields",
            "text": "let env:  Env  val",
            "title": "Public fields"
        },
        {
            "location": "/ponytest-TestHelper/#public-functions",
            "text": "log  Log the given message.\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.  fun box log(\n  msg: String val,\n  verbose: Bool val = false)\n: None val  Parameters   msg:  String  val  verbose:  Bool  val = false   Returns   None  val    fail  Flag the test as having failed.  fun box fail(\n  msg: String val= \"Test failed\")\n: None val  Parameters   msg:  String  val= \"Test failed\"   Returns   None  val    assert_true  Assert that the given expression is true.  fun box assert_true(\n  actual: Bool val,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   actual:  Bool  val  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_false  Assert that the given expression is false.  fun box assert_false(\n  actual: Bool val,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   actual:  Bool  val  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_error  Assert that the given test function throws an error when run.  fun box assert_error(\n  test: ITest box,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   test:  ITest  box  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_no_error  Assert that the gived test function does not throw an error when run.  fun box assert_no_error(\n  test: ITest box,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   test:  ITest  box  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_is[A: A]  Assert that the 2 given expressions resolve to the same instance  fun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   expect: A  actual: A  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_eq[A: ( Equatable [A #read] #read &  Stringable  #read)]  Assert that the 2 given expressions are equal.  fun box assert_eq[A: (Equatable[A #read] #read & Stringable #read)](\n  expect: A #read,\n  actual: A #read,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   expect: A #read  actual: A #read  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_isnt[A: A]  Assert that the 2 given expressions resolve to different instances.  fun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   not_expect: A  actual: A  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_ne[A: ( Equatable [A #read] #read &  Stringable  #read)]  Assert that the 2 given expressions are not equal.  fun box assert_ne[A: (Equatable[A #read] #read & Stringable #read)](\n  not_expect: A #read,\n  actual: A #read,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   not_expect: A #read  actual: A #read  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_array_eq[A: ( Equatable [A #read] #read &  Stringable  #read)]  Assert that the contents of the 2 given ReadSeqs are equal.  fun box assert_array_eq[A: (Equatable[A #read] #read & Stringable #read)](\n  expect: ReadSeq[A #read] box,\n  actual: ReadSeq[A #read] box,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   expect:  ReadSeq [A #read] box  actual:  ReadSeq [A #read] box  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    assert_array_eq_unordered[A: ( Equatable [A #read] #read &  Stringable  #read)]  Assert that the contents of the 2 given ReadSeqs are equal ignoring order.  fun box assert_array_eq_unordered[A: (Equatable[A #read] #read & Stringable #read)](\n  expect: ReadSeq[A #read] box,\n  actual: ReadSeq[A #read] box,\n  msg: String val= \"\",\n  loc: SourceLoc val = __loc)\n: Bool val  Parameters   expect:  ReadSeq [A #read] box  actual:  ReadSeq [A #read] box  msg:  String  val= \"\"  loc:  SourceLoc  val = __loc   Returns   Bool  val    long_test  Indicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.  fun box long_test(\n  timeout: U64 val)\n: None val  Parameters   timeout:  U64  val   Returns   None  val    complete  MUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.\n\nOnce this is called tear_down() may be called at any time.  fun box complete(\n  success: Bool val)\n: None val  Parameters   success:  Bool  val   Returns   None  val    expect_action  Can be called in a long test to set up expectations for one or more actions\nthat, when all completed, will complete the test.\n\nThis pattern is useful for cases where you have multiple things that need\nto happen to complete your test, but don't want to have to collect them\nall yourself into a single actor that calls the complete method.\n\nThe order of calls to expect_action don't matter - the actions may be\ncompleted in any other order to complete the test.  fun box expect_action(\n  name: String val)\n: None val  Parameters   name:  String  val   Returns   None  val    complete_action  MUST be called for each action expectation that was set up in a long test\nto fulfill the expectations. Any expectations that are still outstanding\nwhen the long test timeout runs out will be printed by name when it fails.\n\nCompleting all outstanding actions is enough to finish the test. There's no\nneed to also call the complete method when the actions are finished.\n\nCalling the complete method will finish the test immediately, without\nwaiting for any outstanding actions to be completed.  fun box complete_action(\n  name: String val)\n: None val  Parameters   name:  String  val   Returns   None  val    fail_action  Call to fail an action, which will also cause the entire test to fail\nimmediately, without waiting the rest of the outstanding actions.\n\nThe name of the failed action will be included in the failure output.\n\nUsually the action name should be an expected action set up by a call to\nexpect_action, but failing unexpected actions will also fail the test.  fun box fail_action(\n  name: String val)\n: None val  Parameters   name:  String  val   Returns   None  val    dispose_when_done  Pass a disposable actor to be disposed of when the test is complete.\nThe actor will be disposed no matter whether the test succeeds or fails.\n\nIf the test is already tearing down, the actor will be disposed immediately.  fun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val  Parameters   disposable:  DisposableActor  tag   Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-TestHelper/#private-functions",
            "text": "_check_is[A: A]  Check that the 2 given expressions resolve to the same instance  fun box _check_is[A: A](\n  check: String val,\n  expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val  Parameters   check:  String  val  expect: A  actual: A  msg:  String  val  loc:  SourceLoc  val   Returns   Bool  val    _check_eq[A: ( Equatable [A #read] #read &  Stringable )]  Check that the 2 given expressions are equal.  fun box _check_eq[A: (Equatable[A #read] #read & Stringable)](\n  check: String val,\n  expect: A #read,\n  actual: A #read,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val  Parameters   check:  String  val  expect: A #read  actual: A #read  msg:  String  val  loc:  SourceLoc  val   Returns   Bool  val    _check_isnt[A: A]  Check that the 2 given expressions resolve to different instances.  fun box _check_isnt[A: A](\n  check: String val,\n  not_expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val  Parameters   check:  String  val  not_expect: A  actual: A  msg:  String  val  loc:  SourceLoc  val   Returns   Bool  val    _check_ne[A: ( Equatable [A #read] #read &  Stringable )]  Check that the 2 given expressions are not equal.  fun box _check_ne[A: (Equatable[A #read] #read & Stringable)](\n  check: String val,\n  not_expect: A #read,\n  actual: A #read,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val  Parameters   check:  String  val  not_expect: A #read  actual: A #read  msg:  String  val  loc:  SourceLoc  val   Returns   Bool  val    _format_loc  fun box _format_loc(\n  loc: SourceLoc val)\n: String val  Parameters   loc:  SourceLoc  val   Returns   String  val    _print_array[A:  Stringable  #read]  Generate a printable string of the contents of the given readseq to use in\nerror messages.  fun box _print_array[A: Stringable #read](\n  array: ReadSeq[A #read] box)\n: String val  Parameters   array:  ReadSeq [A #read] box   Returns   String  val",
            "title": "Private Functions"
        },
        {
            "location": "/time--index/",
            "text": "Time Package\n\n\nThe Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.\n\n\nPublic Types\n\n\n\n\nclass Date\n\n\nprimitive Time\n\n\nprimitive Nanos\n\n\ninterface TimerNotify\n\n\nactor Timers\n\n\nclass Timer\n\n\n\n\nPrivate Types\n\n\n\n\nclass _TimingWheel\n\n\ntype _Clock\n\n\nprimitive _ClockRealtime\n\n\nprimitive _ClockMonotonic",
            "title": "Package"
        },
        {
            "location": "/time--index/#time-package",
            "text": "The Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.",
            "title": "Time Package"
        },
        {
            "location": "/time--index/#public-types",
            "text": "class Date  primitive Time  primitive Nanos  interface TimerNotify  actor Timers  class Timer",
            "title": "Public Types"
        },
        {
            "location": "/time--index/#private-types",
            "text": "class _TimingWheel  type _Clock  primitive _ClockRealtime  primitive _ClockMonotonic",
            "title": "Private Types"
        },
        {
            "location": "/time-Date/",
            "text": "Date\n\n\nRepresents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.\n\n\nclass ref Date\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  seconds: I64 val = 0,\n  nanoseconds: I64 val = 0)\n: Date ref^\n\n\n\n\nParameters\n\n\n\n\nseconds: \nI64\n val = 0\n\n\nnanoseconds: \nI64\n val = 0\n\n\n\n\nReturns\n\n\n\n\nDate\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar nsec: \nI32\n val\n\n\n\n\n\n\n\n\nvar sec: \nI32\n val\n\n\n\n\n\n\n\n\nvar min: \nI32\n val\n\n\n\n\n\n\n\n\nvar hour: \nI32\n val\n\n\n\n\n\n\n\n\nvar day_of_month: \nI32\n val\n\n\n\n\n\n\n\n\nvar month: \nI32\n val\n\n\n\n\n\n\n\n\nvar year: \nI32\n val\n\n\n\n\n\n\n\n\nvar day_of_week: \nI32\n val\n\n\n\n\n\n\n\n\nvar day_of_year: \nI32\n val\n\n\n\n\n\n\nPublic Functions\n\n\ntime\n\n\nReturn a POSIX time. Treats the date as UTC.\n\n\nfun box time()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nnormal\n\n\nNormalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.\n\n\nfun ref normal()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nformat\n\n\nFormat the time as for strftime.\n\n\nfun box format(\n  fmt: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nfmt: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val",
            "title": "class Date"
        },
        {
            "location": "/time-Date/#date",
            "text": "Represents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.  class ref Date",
            "title": "Date"
        },
        {
            "location": "/time-Date/#constructors",
            "text": "create  new ref create(\n  seconds: I64 val = 0,\n  nanoseconds: I64 val = 0)\n: Date ref^  Parameters   seconds:  I64  val = 0  nanoseconds:  I64  val = 0   Returns   Date  ref^",
            "title": "Constructors"
        },
        {
            "location": "/time-Date/#public-fields",
            "text": "var nsec:  I32  val     var sec:  I32  val     var min:  I32  val     var hour:  I32  val     var day_of_month:  I32  val     var month:  I32  val     var year:  I32  val     var day_of_week:  I32  val     var day_of_year:  I32  val",
            "title": "Public fields"
        },
        {
            "location": "/time-Date/#public-functions",
            "text": "time  Return a POSIX time. Treats the date as UTC.  fun box time()\n: I64 val  Returns   I64  val    normal  Normalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.  fun ref normal()\n: None val  Returns   None  val    format  Format the time as for strftime.  fun box format(\n  fmt: String val)\n: String val  Parameters   fmt:  String  val   Returns   String  val",
            "title": "Public Functions"
        },
        {
            "location": "/time-_TimingWheel/",
            "text": "_TimingWheel\n\n\nA timing wheel in a hierarchical set of timing wheels. Each wheel covers 6\nbits of precision.\n\n\nclass ref _TimingWheel\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  index: USize val)\n: _TimingWheel ref^\n\n\n\n\nParameters\n\n\n\n\nindex: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n_TimingWheel\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nschedule\n\n\nSchedule a timer on this wheel. Mark the bit indicating that the given slot\nhas timers in its list.\n\n\nfun ref schedule(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadvance\n\n\nRemove pending timers from this timing wheel and put them on the pending\nlist supplied. Needs the current time and the elapsed time since the\nprevious advance. Returns true if the next timing wheel in the hierarchy\nshould be advanced.\n\n\nfun ref advance(\n  list: List[Timer ref] ref,\n  current: U64 val,\n  elapsed: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nlist: \nList\n[\nTimer\n ref] ref\n\n\ncurrent: \nU64\n val\n\n\nelapsed: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nGiven a current time, return the next time at which this timing wheel\nshould be advanced. Returns -1 if no timers are on this timing wheel.\n\n\nfun box next(\n  current: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ncurrent: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclear\n\n\nCancels all pending timers.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_slot\n\n\nReturn the slot for a given time.\n\n\nfun box _slot(\n  time: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ntime: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_bits\n\n\nfun tag _bits()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_max\n\n\nfun tag _max()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_mask\n\n\nfun tag _mask()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val",
            "title": "class _TimingWheel"
        },
        {
            "location": "/time-_TimingWheel/#_timingwheel",
            "text": "A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6\nbits of precision.  class ref _TimingWheel",
            "title": "_TimingWheel"
        },
        {
            "location": "/time-_TimingWheel/#constructors",
            "text": "create  new ref create(\n  index: USize val)\n: _TimingWheel ref^  Parameters   index:  USize  val   Returns   _TimingWheel  ref^",
            "title": "Constructors"
        },
        {
            "location": "/time-_TimingWheel/#public-functions",
            "text": "schedule  Schedule a timer on this wheel. Mark the bit indicating that the given slot\nhas timers in its list.  fun ref schedule(\n  timer: Timer ref)\n: None val  Parameters   timer:  Timer  ref   Returns   None  val    advance  Remove pending timers from this timing wheel and put them on the pending\nlist supplied. Needs the current time and the elapsed time since the\nprevious advance. Returns true if the next timing wheel in the hierarchy\nshould be advanced.  fun ref advance(\n  list: List[Timer ref] ref,\n  current: U64 val,\n  elapsed: U64 val)\n: Bool val  Parameters   list:  List [ Timer  ref] ref  current:  U64  val  elapsed:  U64  val   Returns   Bool  val    next  Given a current time, return the next time at which this timing wheel\nshould be advanced. Returns -1 if no timers are on this timing wheel.  fun box next(\n  current: U64 val)\n: U64 val  Parameters   current:  U64  val   Returns   U64  val    clear  Cancels all pending timers.  fun ref clear()\n: None val  Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/time-_TimingWheel/#private-functions",
            "text": "_slot  Return the slot for a given time.  fun box _slot(\n  time: U64 val)\n: U64 val  Parameters   time:  U64  val   Returns   U64  val    _bits  fun tag _bits()\n: USize val  Returns   USize  val    _max  fun tag _max()\n: USize val  Returns   USize  val    _mask  fun tag _mask()\n: U64 val  Returns   U64  val",
            "title": "Private Functions"
        },
        {
            "location": "/time-_Clock/",
            "text": "_Clock\n\n\ntype _Clock is\n  (_ClockRealtime val | _ClockMonotonic val)\n\n\n\n\nType Alias For\n\n\n\n\n(\n_ClockRealtime\n val | \n_ClockMonotonic\n val)",
            "title": "type _Clock"
        },
        {
            "location": "/time-_Clock/#_clock",
            "text": "type _Clock is\n  (_ClockRealtime val | _ClockMonotonic val)  Type Alias For   ( _ClockRealtime  val |  _ClockMonotonic  val)",
            "title": "_Clock"
        },
        {
            "location": "/time-_ClockRealtime/",
            "text": "_ClockRealtime\n\n\nprimitive val _ClockRealtime\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ClockRealtime val^\n\n\n\n\nReturns\n\n\n\n\n_ClockRealtime\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _ClockRealtime val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ClockRealtime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ClockRealtime val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ClockRealtime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive _ClockRealtime"
        },
        {
            "location": "/time-_ClockRealtime/#_clockrealtime",
            "text": "primitive val _ClockRealtime",
            "title": "_ClockRealtime"
        },
        {
            "location": "/time-_ClockRealtime/#constructors",
            "text": "create  new val create()\n: _ClockRealtime val^  Returns   _ClockRealtime  val^",
            "title": "Constructors"
        },
        {
            "location": "/time-_ClockRealtime/#public-functions",
            "text": "apply  fun box apply()\n: U32 val  Returns   U32  val    eq  fun box eq(\n  that: _ClockRealtime val)\n: Bool val  Parameters   that:  _ClockRealtime  val   Returns   Bool  val    ne  fun box ne(\n  that: _ClockRealtime val)\n: Bool val  Parameters   that:  _ClockRealtime  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/time-_ClockMonotonic/",
            "text": "_ClockMonotonic\n\n\nprimitive val _ClockMonotonic\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ClockMonotonic val^\n\n\n\n\nReturns\n\n\n\n\n_ClockMonotonic\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _ClockMonotonic val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ClockMonotonic\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ClockMonotonic val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ClockMonotonic\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive _ClockMonotonic"
        },
        {
            "location": "/time-_ClockMonotonic/#_clockmonotonic",
            "text": "primitive val _ClockMonotonic",
            "title": "_ClockMonotonic"
        },
        {
            "location": "/time-_ClockMonotonic/#constructors",
            "text": "create  new val create()\n: _ClockMonotonic val^  Returns   _ClockMonotonic  val^",
            "title": "Constructors"
        },
        {
            "location": "/time-_ClockMonotonic/#public-functions",
            "text": "apply  fun box apply()\n: U32 val  Returns   U32  val    eq  fun box eq(\n  that: _ClockMonotonic val)\n: Bool val  Parameters   that:  _ClockMonotonic  val   Returns   Bool  val    ne  fun box ne(\n  that: _ClockMonotonic val)\n: Bool val  Parameters   that:  _ClockMonotonic  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/time-Time/",
            "text": "Time\n\n\nA collection of ways to fetch the current time.\n\n\nprimitive val Time\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Time val^\n\n\n\n\nReturns\n\n\n\n\nTime\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnow\n\n\nThe wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)\n\n\nfun box now()\n: (I64 val , I64 val)\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nseconds\n\n\nThe wall-clock adjusted system time.\n\n\nfun box seconds()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmillis\n\n\nMonotonic unadjusted milliseconds.\n\n\nfun box millis()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmicros\n\n\nMonotonic unadjusted microseconds.\n\n\nfun box micros()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nnanos\n\n\nMonotonic unadjusted nanoseconds.\n\n\nfun box nanos()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ncycles\n\n\nProcessor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.\n\n\nfun box cycles()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nperf_begin\n\n\nGet a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.\n\n\nfun box perf_begin()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nperf_end\n\n\nGet a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.\n\n\nfun box perf_end()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Time val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Time val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_clock_gettime\n\n\nReturn a clock time on linux and freebsd.\n\n\nfun box _clock_gettime(\n  clock: (_ClockRealtime val | _ClockMonotonic val))\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\n\n\n\nclock: (\n_ClockRealtime\n val | \n_ClockMonotonic\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\n_query_performance_counter\n\n\nReturn QPC and QPF.\n\n\nfun box _query_performance_counter()\n: (U64 val , U64 val)\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nU64\n val)",
            "title": "primitive Time"
        },
        {
            "location": "/time-Time/#time",
            "text": "A collection of ways to fetch the current time.  primitive val Time",
            "title": "Time"
        },
        {
            "location": "/time-Time/#constructors",
            "text": "create  new val create()\n: Time val^  Returns   Time  val^",
            "title": "Constructors"
        },
        {
            "location": "/time-Time/#public-functions",
            "text": "now  The wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)  fun box now()\n: (I64 val , I64 val)  Returns   ( I64  val ,  I64  val)    seconds  The wall-clock adjusted system time.  fun box seconds()\n: I64 val  Returns   I64  val    millis  Monotonic unadjusted milliseconds.  fun box millis()\n: U64 val  Returns   U64  val    micros  Monotonic unadjusted microseconds.  fun box micros()\n: U64 val  Returns   U64  val    nanos  Monotonic unadjusted nanoseconds.  fun box nanos()\n: U64 val  Returns   U64  val    cycles  Processor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.  fun box cycles()\n: U64 val  Returns   U64  val    perf_begin  Get a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.  fun box perf_begin()\n: U64 val  Returns   U64  val    perf_end  Get a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.  fun box perf_end()\n: U64 val  Returns   U64  val    eq  fun box eq(\n  that: Time val)\n: Bool val  Parameters   that:  Time  val   Returns   Bool  val    ne  fun box ne(\n  that: Time val)\n: Bool val  Parameters   that:  Time  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/time-Time/#private-functions",
            "text": "_clock_gettime  Return a clock time on linux and freebsd.  fun box _clock_gettime(\n  clock: (_ClockRealtime val | _ClockMonotonic val))\n: (I64 val , I64 val)  Parameters   clock: ( _ClockRealtime  val |  _ClockMonotonic  val)   Returns   ( I64  val ,  I64  val)    _query_performance_counter  Return QPC and QPF.  fun box _query_performance_counter()\n: (U64 val , U64 val)  Returns   ( U64  val ,  U64  val)",
            "title": "Private Functions"
        },
        {
            "location": "/time-Nanos/",
            "text": "Nanos\n\n\nCollection of utility functions for converting various durations of time\nto nanoseconds, for passing to other functions in the time package.\n\n\nprimitive val Nanos\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Nanos val^\n\n\n\n\nReturns\n\n\n\n\nNanos\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nfrom_seconds\n\n\nfun box from_seconds(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_millis\n\n\nfun box from_millis(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_micros\n\n\nfun box from_micros(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_seconds_f\n\n\nfun box from_seconds_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_millis_f\n\n\nfun box from_millis_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_micros_f\n\n\nfun box from_micros_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_wall_clock\n\n\nfun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nwall: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Nanos val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNanos\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Nanos val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNanos\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val",
            "title": "primitive Nanos"
        },
        {
            "location": "/time-Nanos/#nanos",
            "text": "Collection of utility functions for converting various durations of time\nto nanoseconds, for passing to other functions in the time package.  primitive val Nanos",
            "title": "Nanos"
        },
        {
            "location": "/time-Nanos/#constructors",
            "text": "create  new val create()\n: Nanos val^  Returns   Nanos  val^",
            "title": "Constructors"
        },
        {
            "location": "/time-Nanos/#public-functions",
            "text": "from_seconds  fun box from_seconds(\n  t: U64 val)\n: U64 val  Parameters   t:  U64  val   Returns   U64  val    from_millis  fun box from_millis(\n  t: U64 val)\n: U64 val  Parameters   t:  U64  val   Returns   U64  val    from_micros  fun box from_micros(\n  t: U64 val)\n: U64 val  Parameters   t:  U64  val   Returns   U64  val    from_seconds_f  fun box from_seconds_f(\n  t: F64 val)\n: U64 val  Parameters   t:  F64  val   Returns   U64  val    from_millis_f  fun box from_millis_f(\n  t: F64 val)\n: U64 val  Parameters   t:  F64  val   Returns   U64  val    from_micros_f  fun box from_micros_f(\n  t: F64 val)\n: U64 val  Parameters   t:  F64  val   Returns   U64  val    from_wall_clock  fun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val  Parameters   wall: ( I64  val ,  I64  val)   Returns   U64  val    eq  fun box eq(\n  that: Nanos val)\n: Bool val  Parameters   that:  Nanos  val   Returns   Bool  val    ne  fun box ne(\n  that: Nanos val)\n: Bool val  Parameters   that:  Nanos  val   Returns   Bool  val",
            "title": "Public Functions"
        },
        {
            "location": "/time-TimerNotify/",
            "text": "TimerNotify\n\n\nNotifications for timer.\n\n\ninterface ref TimerNotify\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCalled with the the number of times the timer has fired since this was last\ncalled. Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).\n\n\nfun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n ref\n\n\ncount: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncancel\n\n\nCalled if the timer is cancelled. This is also called if the notifier\nreturns false.\n\n\nfun ref cancel(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val",
            "title": "interface TimerNotify"
        },
        {
            "location": "/time-TimerNotify/#timernotify",
            "text": "Notifications for timer.  interface ref TimerNotify",
            "title": "TimerNotify"
        },
        {
            "location": "/time-TimerNotify/#public-functions",
            "text": "apply  Called with the the number of times the timer has fired since this was last\ncalled. Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).  fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val  Parameters   timer:  Timer  ref  count:  U64  val   Returns   Bool  val    cancel  Called if the timer is cancelled. This is also called if the notifier\nreturns false.  fun ref cancel(\n  timer: Timer ref)\n: None val  Parameters   timer:  Timer  ref   Returns   None  val",
            "title": "Public Functions"
        },
        {
            "location": "/time-Timers/",
            "text": "Timers\n\n\nA hierarchical set of timing wheels.\n\n\nactor tag Timers\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  slop: USize val = 20)\n: Timers tag^\n\n\n\n\nParameters\n\n\n\n\nslop: \nUSize\n val = 20\n\n\n\n\nReturns\n\n\n\n\nTimers\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nSets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.\n\n\nbe apply(\n  timer: Timer iso)\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n iso\n\n\n\n\n\n\ncancel\n\n\nCancels a timer.\n\n\nbe cancel(\n  timer: Timer tag)\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n tag\n\n\n\n\n\n\ndispose\n\n\nDipose of this set of timing wheels.\n\n\nbe dispose()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nWhen the event fires, advance the timing wheels.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_advance\n\n\nUpdate the current time, process all the timing wheels, and set the event\nfor the next time we need to advance.\n\n\nfun ref _advance()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_fire\n\n\nFire a timer if necessary, then schedule it on the correct timing wheel\nbased on how long it is until it expires.\n\n\nfun ref _fire(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_next\n\n\nReturn the next time at which the timing wheels should be advanced. This is\nadjusted for slop, so it yields nanoseconds. If no events are pending, this\nreturns -1.\n\n\nfun box _next()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_set_time\n\n\nSet the current time with precision reduced by the slop bits. Return the\nelapsed time.\n\n\nfun ref _set_time()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_get_wheel\n\n\nGet the hierarchical timing wheel for the given time until expiration.\n\n\nfun ref _get_wheel(\n  rem: U64 val)\n: _TimingWheel ref ?\n\n\n\n\nParameters\n\n\n\n\nrem: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n_TimingWheel\n ref ?\n\n\n\n\n\n\n_expiration_max\n\n\nGet the maximum time the timing wheels cover. Anything beyond this is\nscheduled on the last timing wheel.\n\n\nfun tag _expiration_max()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_wheels\n\n\nfun tag _wheels()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_bits\n\n\nfun tag _bits()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val",
            "title": "actor Timers"
        },
        {
            "location": "/time-Timers/#timers",
            "text": "A hierarchical set of timing wheels.  actor tag Timers",
            "title": "Timers"
        },
        {
            "location": "/time-Timers/#constructors",
            "text": "create  new tag create(\n  slop: USize val = 20)\n: Timers tag^  Parameters   slop:  USize  val = 20   Returns   Timers  tag^",
            "title": "Constructors"
        },
        {
            "location": "/time-Timers/#public-behaviours",
            "text": "apply  Sets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.  be apply(\n  timer: Timer iso)  Parameters   timer:  Timer  iso    cancel  Cancels a timer.  be cancel(\n  timer: Timer tag)  Parameters   timer:  Timer  tag    dispose  Dipose of this set of timing wheels.  be dispose()",
            "title": "Public Behaviours"
        },
        {
            "location": "/time-Timers/#private-behaviours",
            "text": "_event_notify  When the event fires, advance the timing wheels.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)  Parameters   event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val",
            "title": "Private Behaviours"
        },
        {
            "location": "/time-Timers/#private-functions",
            "text": "_advance  Update the current time, process all the timing wheels, and set the event\nfor the next time we need to advance.  fun ref _advance()\n: None val  Returns   None  val    _fire  Fire a timer if necessary, then schedule it on the correct timing wheel\nbased on how long it is until it expires.  fun ref _fire(\n  timer: Timer ref)\n: None val  Parameters   timer:  Timer  ref   Returns   None  val    _next  Return the next time at which the timing wheels should be advanced. This is\nadjusted for slop, so it yields nanoseconds. If no events are pending, this\nreturns -1.  fun box _next()\n: U64 val  Returns   U64  val    _set_time  Set the current time with precision reduced by the slop bits. Return the\nelapsed time.  fun ref _set_time()\n: U64 val  Returns   U64  val    _get_wheel  Get the hierarchical timing wheel for the given time until expiration.  fun ref _get_wheel(\n  rem: U64 val)\n: _TimingWheel ref ?  Parameters   rem:  U64  val   Returns   _TimingWheel  ref ?    _expiration_max  Get the maximum time the timing wheels cover. Anything beyond this is\nscheduled on the last timing wheel.  fun tag _expiration_max()\n: U64 val  Returns   U64  val    _wheels  fun tag _wheels()\n: USize val  Returns   USize  val    _bits  fun tag _bits()\n: USize val  Returns   USize  val",
            "title": "Private Functions"
        },
        {
            "location": "/time-Timer/",
            "text": "Timer\n\n\nThe \nTimer\n class represents a timer that fires after an expiration\n  time, and then fires at an interval. When a \nTimer\n fires, it calls\n  the \napply\n method of the \nTimerNotify\n object that was passed to it\n  when it was created.\n\n\nThe following example waits 5 seconds and then fires every 2\n  seconds, and when it fires the \nTimerNotify\n object prints how many\n  times it has been called:\n\n\n```pony\n  use \"time\"\n\n\nactor Main\n    new create(env: Env) =>\n      let timers = Timers\n      let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n      timers(consume timer)\n\n\nclass Notify is TimerNotify\n    let _env: Env\n    var _counter: U32 = 0\n    new iso create(env: Env) =>\n      _env = env\n    fun ref apply(timer: Timer, count: U64): Bool =>\n      _env.out.print(_counter.string())\n      _counter = _counter + 1\n      true\n  ```\n\n\nclass ref Timer\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.\n\n\nnew iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = 0)\n: Timer iso^\n\n\n\n\nParameters\n\n\n\n\nnotify: \nTimerNotify\n iso\n\n\nexpiration: \nU64\n val\n\n\ninterval: \nU64\n val = 0\n\n\n\n\nReturns\n\n\n\n\nTimer\n iso^\n\n\n\n\n\n\nabs\n\n\nCreates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.\n\n\nnew ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = 0)\n: Timer ref^\n\n\n\n\nParameters\n\n\n\n\nnotify: \nTimerNotify\n ref\n\n\nexpiration: (\nI64\n val , \nI64\n val)\n\n\ninterval: \nU64\n val = 0\n\n\n\n\nReturns\n\n\n\n\nTimer\n ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_cancel\n\n\nRemove the timer from any list.\n\n\nfun ref _cancel()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_get_node\n\n\nReturns the list node pointing to the timer. Used to schedule the timer in\na queue.\n\n\nfun ref _get_node()\n: ListNode[Timer ref] ref\n\n\n\n\nReturns\n\n\n\n\nListNode\n[\nTimer\n ref] ref\n\n\n\n\n\n\n_slop\n\n\nApply slop bits to the expiration time and interval. This reduces the\nprecision by the given number of bits, effectively quantizing time.\n\n\nfun ref _slop(\n  bits: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nbits: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_fire\n\n\nA timer is fired if its expiration time is in the past. The notifier is\ncalled with a count based on the elapsed time since expiration and the\ntimer interval. The expiration time is set to the next expiration. Returns\ntrue if the timer should be rescheduled, false otherwise.\n\n\nfun ref _fire(\n  current: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncurrent: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_next\n\n\nReturns the next expiration time.\n\n\nfun box _next()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_abs_expiration_time\n\n\nConverts a wall-clock adjusted system time to absolute expiration time\n\n\nfun tag _abs_expiration_time(\n  wall: (I64 val , I64 val))\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nwall: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nU64\n val",
            "title": "class Timer"
        },
        {
            "location": "/time-Timer/#timer",
            "text": "The  Timer  class represents a timer that fires after an expiration\n  time, and then fires at an interval. When a  Timer  fires, it calls\n  the  apply  method of the  TimerNotify  object that was passed to it\n  when it was created.  The following example waits 5 seconds and then fires every 2\n  seconds, and when it fires the  TimerNotify  object prints how many\n  times it has been called:  ```pony\n  use \"time\"  actor Main\n    new create(env: Env) =>\n      let timers = Timers\n      let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n      timers(consume timer)  class Notify is TimerNotify\n    let _env: Env\n    var _counter: U32 = 0\n    new iso create(env: Env) =>\n      _env = env\n    fun ref apply(timer: Timer, count: U64): Bool =>\n      _env.out.print(_counter.string())\n      _counter = _counter + 1\n      true\n  ```  class ref Timer",
            "title": "Timer"
        },
        {
            "location": "/time-Timer/#constructors",
            "text": "create  Create a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.  new iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = 0)\n: Timer iso^  Parameters   notify:  TimerNotify  iso  expiration:  U64  val  interval:  U64  val = 0   Returns   Timer  iso^    abs  Creates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.  new ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = 0)\n: Timer ref^  Parameters   notify:  TimerNotify  ref  expiration: ( I64  val ,  I64  val)  interval:  U64  val = 0   Returns   Timer  ref^",
            "title": "Constructors"
        },
        {
            "location": "/time-Timer/#private-functions",
            "text": "_cancel  Remove the timer from any list.  fun ref _cancel()\n: None val  Returns   None  val    _get_node  Returns the list node pointing to the timer. Used to schedule the timer in\na queue.  fun ref _get_node()\n: ListNode[Timer ref] ref  Returns   ListNode [ Timer  ref] ref    _slop  Apply slop bits to the expiration time and interval. This reduces the\nprecision by the given number of bits, effectively quantizing time.  fun ref _slop(\n  bits: USize val)\n: None val  Parameters   bits:  USize  val   Returns   None  val    _fire  A timer is fired if its expiration time is in the past. The notifier is\ncalled with a count based on the elapsed time since expiration and the\ntimer interval. The expiration time is set to the next expiration. Returns\ntrue if the timer should be rescheduled, false otherwise.  fun ref _fire(\n  current: U64 val)\n: Bool val  Parameters   current:  U64  val   Returns   Bool  val    _next  Returns the next expiration time.  fun box _next()\n: U64 val  Returns   U64  val    _abs_expiration_time  Converts a wall-clock adjusted system time to absolute expiration time  fun tag _abs_expiration_time(\n  wall: (I64 val , I64 val))\n: U64 val  Parameters   wall: ( I64  val ,  I64  val)   Returns   U64  val",
            "title": "Private Functions"
        }
    ]
}