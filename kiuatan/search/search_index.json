{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"builtin--index/","title":"Builtin package","text":"<p>The builtin package is home to the following standard library members:</p> <ol> <li>Types the compiler needs to know exist, such as None.</li> <li>Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32.</li> <li>Any types needed by others in builtin.</li> </ol> <p>The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries.</p>"},{"location":"builtin--index/#public-types","title":"Public Types","text":"<ul> <li>primitive AmbientAuth</li> <li>interface Any</li> <li>class Array</li> <li>class ArrayKeys</li> <li>class ArrayPairs</li> <li>class ArrayValues</li> <li>primitive AsioEvent</li> <li>type AsioEventID</li> <li>trait AsioEventNotify</li> <li>primitive Bool</li> <li>type ByteSeq</li> <li>interface ByteSeqIter</li> <li>interface Comparable</li> <li>type Compare</li> <li>interface DisposableActor</li> <li>primitive DoNotOptimise</li> <li>class Env</li> <li>primitive Equal</li> <li>interface Equatable</li> <li>primitive F32</li> <li>primitive F64</li> <li>type Float</li> <li>trait FloatingPoint</li> <li>primitive Greater</li> <li>interface HasEq</li> <li>primitive I128</li> <li>primitive I16</li> <li>primitive I32</li> <li>primitive I64</li> <li>primitive I8</li> <li>primitive ILong</li> <li>primitive ISize</li> <li>interface InputNotify</li> <li>interface InputStream</li> <li>type Int</li> <li>trait Integer</li> <li>interface Iterator</li> <li>primitive Less</li> <li>primitive None</li> <li>struct NullablePointer</li> <li>type Number</li> <li>interface OutStream</li> <li>primitive Platform</li> <li>struct Pointer</li> <li>interface ReadElement</li> <li>interface ReadSeq</li> <li>trait Real</li> <li>struct RuntimeOptions</li> <li>interface Seq</li> <li>type Signed</li> <li>trait SignedInteger</li> <li>interface SourceLoc</li> <li>actor StdStream</li> <li>actor Stdin</li> <li>class String</li> <li>class StringBytes</li> <li>class StringRunes</li> <li>interface Stringable</li> <li>primitive U128</li> <li>primitive U16</li> <li>primitive U32</li> <li>primitive U64</li> <li>primitive U8</li> <li>primitive ULong</li> <li>primitive USize</li> <li>type Unsigned</li> <li>trait UnsignedInteger</li> </ul>"},{"location":"builtin-AmbientAuth/","title":"AmbientAuth","text":"<p>[Source]</p> <p>This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability.</p> <p>Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root.</p> <p>The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access.</p> <pre><code>primitive val AmbientAuth\n</code></pre>"},{"location":"builtin-AmbientAuth/#public-functions","title":"Public Functions","text":""},{"location":"builtin-AmbientAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AmbientAuth val)\n: Bool val\n</code></pre>"},{"location":"builtin-AmbientAuth/#parameters","title":"Parameters","text":"<ul> <li>that: AmbientAuth val</li> </ul>"},{"location":"builtin-AmbientAuth/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AmbientAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AmbientAuth val)\n: Bool val\n</code></pre>"},{"location":"builtin-AmbientAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: AmbientAuth val</li> </ul>"},{"location":"builtin-AmbientAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Any/","title":"Any","text":"<p>[Source] <pre><code>interface tag Any\n</code></pre></p>"},{"location":"builtin-Array/","title":"Array[A: A]","text":"<p>[Source]</p> <p>Contiguous, resizable memory to store elements of type A.</p>"},{"location":"builtin-Array/#usage","title":"Usage","text":"<p>Creating an Array of String: <pre><code>  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  // array.size() == 3\n  // array.space() &gt;= 3\n</code></pre></p> <p>Creating an empty Array of String, which may hold at least 10 elements before requesting more space: <pre><code>  let array = Array[String](10)\n  // array.size() == 0\n  // array.space() &gt;= 10\n</code></pre></p> <p>Accessing elements can be done via the <code>apply(i: USize): this-&gt;A ?</code> method. The provided index might be out of bounds so <code>apply</code> is partial and has to be called within a try-catch block or inside another partial method: <pre><code>  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  let is_second_element_wobat = try\n    // indexes start from 0, so 1 is the second element\n    array(1)? == \"wombat\"\n  else\n    false\n  end\n</code></pre></p> <p>Adding and removing elements to and from the end of the Array can be done via <code>push</code> and <code>pop</code> methods. You could treat the array as a LIFO stack using those methods: <pre><code>  while (array.size() &gt; 0) do\n    let elem = array.pop()?\n    // do something with element\n  end\n</code></pre></p> <p>Modifying the Array can be done via <code>update</code>, <code>insert</code> and <code>delete</code> methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary.</p> <p>Iterating over the elements of an Array can be done using the <code>values</code> method: <pre><code>  for element in array.values() do\n      // do something with element\n  end\n</code></pre></p>"},{"location":"builtin-Array/#memory-allocation","title":"Memory allocation","text":"<p>Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The <code>space()</code> method returns the number of elements an Array can hold. The <code>size()</code> method returns the number of elements the Array holds.</p> <p>Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size.</p> <p>When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements.</p> <p>Here's a few examples of the space allocated when initialising an Array with various number of elements:</p> size space 0 0 1 8 8 8 9 16 16 16 17 32 <p>Call the <code>compact()</code> method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space.</p> <pre><code>class ref Array[A: A] is\n  Seq[A] ref\n</code></pre>"},{"location":"builtin-Array/#implements","title":"Implements","text":"<ul> <li>Seq[A] ref</li> </ul>"},{"location":"builtin-Array/#constructors","title":"Constructors","text":""},{"location":"builtin-Array/#create","title":"create","text":"<p>[Source]</p> <p>Create an array with zero elements, but space for len elements.</p> <pre><code>new ref create(\n  len: USize val = 0)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#init","title":"init","text":"<p>[Source]</p> <p>Create an array of len elements, all initialised to the given value.</p> <pre><code>new ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_1","title":"Parameters","text":"<ul> <li>from: A^</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_1","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#from_cpointer","title":"from_cpointer","text":"<p>[Source]</p> <p>Create an array from a C-style pointer and length. The contents are not copied. This must be done only with C-FFI functions that return pony_alloc'd memory. If a null pointer is given then an empty array is returned.</p> <pre><code>new ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = 0)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_2","title":"Parameters","text":"<ul> <li>ptr: Pointer[A] ref</li> <li>len: USize val</li> <li>alloc: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns_2","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Array/#cpointer","title":"cpointer","text":"<p>[Source]</p> <p>Return the underlying C-style pointer.</p> <pre><code>fun box cpointer(\n  offset: USize val = 0)\n: Pointer[A] tag\n</code></pre>"},{"location":"builtin-Array/#parameters_3","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns_3","title":"Returns","text":"<ul> <li>Pointer[A] tag</li> </ul>"},{"location":"builtin-Array/#size","title":"size","text":"<p>[Source]</p> <p>The number of elements in the array.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-Array/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Array/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the array.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"builtin-Array/#returns_5","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Array/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically.</p> <pre><code>fun ref reserve(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_4","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#compact","title":"compact","text":"<p>[Source]</p> <p>Try to remove unused space, making it available for garbage collection. The request may be ignored.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#undefinedoptional-b-a-realb-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val","title":"undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers.</p> <pre><code>fun ref undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_5","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#read_u8optional-b-a-realb-val-u8-val","title":"read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U8 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_6","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_9","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-Array/#read_u16optional-b-a-realb-val-u8-val","title":"read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U16 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_7","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_10","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-Array/#read_u32optional-b-a-realb-val-u8-val","title":"read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U32 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_8","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_11","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Array/#read_u64optional-b-a-realb-val-u8-val","title":"read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U64 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_9","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_12","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-Array/#read_u128optional-b-a-realb-val-u8-val","title":"read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U128 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_10","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_13","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-Array/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element, raising an error if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-Array/#parameters_11","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Array/#returns_14","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-Array/#update_u8optional-b-a-realb-val-u8-val","title":"update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U8 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_12","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-Array/#returns_15","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-Array/#update_u16optional-b-a-realb-val-u8-val","title":"update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U16 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_13","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U16 val</li> </ul>"},{"location":"builtin-Array/#returns_16","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-Array/#update_u32optional-b-a-realb-val-u8-val","title":"update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U32 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_14","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U32 val</li> </ul>"},{"location":"builtin-Array/#returns_17","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Array/#update_u64optional-b-a-realb-val-u8-val","title":"update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U64 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_15","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U64 val</li> </ul>"},{"location":"builtin-Array/#returns_18","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-Array/#update_u128optional-b-a-realb-val-u8-val","title":"update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U128 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_16","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U128 val</li> </ul>"},{"location":"builtin-Array/#returns_19","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-Array/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th element, raising an error if the index is out of bounds.</p> <pre><code>fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_17","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_20","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#insert","title":"insert","text":"<p>[Source]</p> <p>Insert an element into the array. Elements after this are moved up by one index, extending the array.</p> <p>When inserting right beyond the last element, at index <code>this.size()</code>, the element will be appended, similar to <code>push()</code>, an insert at index <code>0</code> prepends the value to the array. An insert into an index beyond <code>this.size()</code> raises an error.</p> <pre><code>let array = Array[U8](4)              // []\narray.insert(0, 0xDE)?                // prepend: [0xDE]\narray.insert(array.size(), 0xBE)?     // append:  [0xDE; 0xBE]\narray.insert(1, 0xAD)?                // insert:  [0xDE; 0xAD; 0xBE]\narray.insert(array.size() + 1, 0xEF)? // error\n</code></pre> <pre><code>fun ref insert(\n  i: USize val,\n  value: A)\n: None val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_18","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_21","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"builtin-Array/#delete","title":"delete","text":"<p>[Source]</p> <p>Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned.</p> <pre><code>fun ref delete(\n  i: USize val)\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_19","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Array/#returns_22","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing.</p> <pre><code>fun ref truncate(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_20","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_23","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#trim_in_place","title":"trim_in_place","text":"<p>[Source]</p> <p>Trim the array to a portion of itself, covering <code>from</code> until <code>to</code>. Unlike slice, the operation does not allocate a new array nor copy elements.</p> <pre><code>fun ref trim_in_place(\n  from: USize val = 0,\n  to: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_21","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_24","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#trim","title":"trim","text":"<p>[Source]</p> <p>Return a shared portion of this array, covering <code>from</code> until <code>to</code>. Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements.</p> <pre><code>fun val trim(\n  from: USize val = 0,\n  to: USize val = call)\n: Array[A] val\n</code></pre>"},{"location":"builtin-Array/#parameters_22","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_25","title":"Returns","text":"<ul> <li>Array[A] val</li> </ul>"},{"location":"builtin-Array/#chopoptional-b-a-any-send","title":"chop[optional B: (A &amp; Any #send)]","text":"<p>[Source]</p> <p>Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements.</p> <p>The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below:</p> <pre><code>  class Example\n     var other: (Example | None) = None\n\n  let arr: Array[Example] iso = recover\n     let obj1 = Example\n     let obj2 = Example\n     obj1.other = obj2\n     obj2.other = obj1\n     [obj1; obj2]\n  end\n</code></pre> <pre><code>fun iso chop[optional B: (A &amp; Any #send)](\n  split_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)\n</code></pre>"},{"location":"builtin-Array/#parameters_23","title":"Parameters","text":"<ul> <li>split_point: USize val</li> </ul>"},{"location":"builtin-Array/#returns_26","title":"Returns","text":"<ul> <li>(Array[A] iso^ , Array[A] iso^)</li> </ul>"},{"location":"builtin-Array/#unchop","title":"unchop","text":"<p>[Source]</p> <p>Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements.</p> <pre><code>fun iso unchop(\n  b: Array[A] iso)\n: ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)\n</code></pre>"},{"location":"builtin-Array/#parameters_24","title":"Parameters","text":"<ul> <li>b: Array[A] iso</li> </ul>"},{"location":"builtin-Array/#returns_27","title":"Returns","text":"<ul> <li>((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)</li> </ul>"},{"location":"builtin-Array/#copy_fromoptional-b-a-realb-val-u8-val","title":"copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8].</p> <pre><code>fun ref copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  src: Array[U8 val] box,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_25","title":"Parameters","text":"<ul> <li>src: Array[U8 val] box</li> <li>src_idx: USize val</li> <li>dst_idx: USize val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_28","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#copy_to","title":"copy_to","text":"<p>[Source]</p> <p>Copy len elements from this(src_idx) to dst(dst_idx).</p> <pre><code>fun box copy_to(\n  dst: Array[this-&gt;A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_26","title":"Parameters","text":"<ul> <li>dst: Array[this-&gt;A!] ref</li> <li>src_idx: USize val</li> <li>dst_idx: USize val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_29","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove n elements from the array, beginning at index i.</p> <pre><code>fun ref remove(\n  i: USize val,\n  n: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_27","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>n: USize val</li> </ul>"},{"location":"builtin-Array/#returns_30","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the array.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_31","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u8optional-b-a-realb-val-u8-val","title":"push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U8 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_28","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-Array/#returns_32","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u16optional-b-a-realb-val-u8-val","title":"push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U16 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U16 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_29","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"builtin-Array/#returns_33","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u32optional-b-a-realb-val-u8-val","title":"push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U32 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U32 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_30","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-Array/#returns_34","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u64optional-b-a-realb-val-u8-val","title":"push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U64 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U64 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_31","title":"Parameters","text":"<ul> <li>value: U64 val</li> </ul>"},{"location":"builtin-Array/#returns_35","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u128optional-b-a-realb-val-u8-val","title":"push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U128 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U128 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_32","title":"Parameters","text":"<ul> <li>value: U128 val</li> </ul>"},{"location":"builtin-Array/#returns_36","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push","title":"push","text":"<p>[Source]</p> <p>Add an element to the end of the array.</p> <pre><code>fun ref push(\n  value: A)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_33","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_37","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove an element from the end of the array. The removed element is returned.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#returns_38","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Add an element to the beginning of the array.</p> <pre><code>fun ref unshift(\n  value: A)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_34","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_39","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#shift","title":"shift","text":"<p>[Source]</p> <p>Remove an element from the beginning of the array. The removed element is returned.</p> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#returns_40","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#append","title":"append","text":"<p>[Source]</p> <p>Append the elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\n  seq: (ReadSeq[A] box &amp; ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_35","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_41","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the end of the array, starting from the given offset.</p> <pre><code>fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_36","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_42","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#find","title":"find","text":"<p>[Source]</p> <p>Find the <code>nth</code> appearance of <code>value</code> from the beginning of the array, starting at <code>offset</code> and examining higher indices, and using the supplied <code>predicate</code> for comparisons. Returns the index of the value, or raise an error if the value isn't present.</p> <p>By default, the search starts at the first element of the array, returns the first instance of <code>value</code> found, and uses object identity for comparison.</p> <pre><code>fun box find(\n  value: A!,\n  offset: USize val = 0,\n  nth: USize val = 0,\n  predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: USize val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_37","title":"Parameters","text":"<ul> <li>value: A!</li> <li>offset: USize val = 0</li> <li>nth: USize val = 0</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_43","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-Array/#contains","title":"contains","text":"<p>[Source]</p> <p>Returns true if the array contains <code>value</code>, false otherwise.</p> <p>The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as <code>{(l, r) =&gt; l == r}</code>.</p> <pre><code>fun box contains(\n  value: A!,\n  predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: Bool val\n</code></pre>"},{"location":"builtin-Array/#parameters_38","title":"Parameters","text":"<ul> <li>value: A!</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_44","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Array/#rfind","title":"rfind","text":"<p>[Source]</p> <p>Find the <code>nth</code> appearance of <code>value</code> from the end of the array, starting at <code>offset</code> and examining lower indices, and using the supplied <code>predicate</code> for comparisons. Returns the index of the value, or raise an error if the value isn't present.</p> <p>By default, the search starts at the last element of the array, returns the first instance of <code>value</code> found, and uses object identity for comparison.</p> <pre><code>fun box rfind(\n  value: A!,\n  offset: USize val = call,\n  nth: USize val = 0,\n  predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: USize val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_39","title":"Parameters","text":"<ul> <li>value: A!</li> <li>offset: USize val = call</li> <li>nth: USize val = 0</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_45","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-Array/#clone","title":"clone","text":"<p>[Source]</p> <p>Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned.</p> <pre><code>fun box clone()\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_46","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#slice","title":"slice","text":"<p>[Source]</p> <p>Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned.</p> <pre><code>fun box slice(\n  from: USize val = 0,\n  to: USize val = call,\n  step: USize val = 1)\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_40","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> <li>step: USize val = 1</li> </ul>"},{"location":"builtin-Array/#returns_47","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#permute","title":"permute","text":"<p>[Source]</p> <p>Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied.</p> <pre><code>fun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this-&gt;A!] ref^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_41","title":"Parameters","text":"<ul> <li>indices: Iterator[USize val] ref</li> </ul>"},{"location":"builtin-Array/#returns_48","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^ ?</li> </ul>"},{"location":"builtin-Array/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied.</p> <pre><code>fun box reverse()\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_49","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#reverse_in_place","title":"reverse_in_place","text":"<p>[Source]</p> <p>Reverse the array in place.</p> <pre><code>fun ref reverse_in_place()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_50","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#swap_elements","title":"swap_elements","text":"<p>[Source]</p> <p>Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised.</p> <pre><code>fun ref swap_elements(\n  i: USize val,\n  j: USize val)\n: None val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_42","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>j: USize val</li> </ul>"},{"location":"builtin-Array/#returns_51","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"builtin-Array/#keys","title":"keys","text":"<p>[Source]</p> <p>Return an iterator over the indices in the array.</p> <pre><code>fun box keys()\n: ArrayKeys[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_52","title":"Returns","text":"<ul> <li>ArrayKeys[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-Array/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values in the array.</p> <pre><code>fun box values()\n: ArrayValues[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_53","title":"Returns","text":"<ul> <li>ArrayValues[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-Array/#pairs","title":"pairs","text":"<p>[Source]</p> <p>Return an iterator over the (index, value) pairs in the array.</p> <pre><code>fun box pairs()\n: ArrayPairs[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_54","title":"Returns","text":"<ul> <li>ArrayPairs[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-ArrayKeys/","title":"ArrayKeys[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref\n</code></pre></p>"},{"location":"builtin-ArrayKeys/#implements","title":"Implements","text":"<ul> <li>Iterator[USize val] ref</li> </ul>"},{"location":"builtin-ArrayKeys/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayKeys/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  array: B)\n: ArrayKeys[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayKeys/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayKeys/#returns","title":"Returns","text":"<ul> <li>ArrayKeys[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayKeys/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayKeys/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: USize val\n</code></pre>"},{"location":"builtin-ArrayKeys/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ArrayPairs/","title":"ArrayPairs[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B-&gt;A)] ref\n</code></pre></p>"},{"location":"builtin-ArrayPairs/#implements","title":"Implements","text":"<ul> <li>Iterator[(USize val , B-&gt;A)] ref</li> </ul>"},{"location":"builtin-ArrayPairs/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayPairs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  array: B)\n: ArrayPairs[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayPairs/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayPairs/#returns","title":"Returns","text":"<ul> <li>ArrayPairs[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayPairs/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayPairs/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: (USize val , B-&gt;A) ?\n</code></pre>"},{"location":"builtin-ArrayPairs/#returns_2","title":"Returns","text":"<ul> <li>(USize val , B-&gt;A) ?</li> </ul>"},{"location":"builtin-ArrayValues/","title":"ArrayValues[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B-&gt;A] ref\n</code></pre></p>"},{"location":"builtin-ArrayValues/#implements","title":"Implements","text":"<ul> <li>Iterator[B-&gt;A] ref</li> </ul>"},{"location":"builtin-ArrayValues/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayValues/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  array: B)\n: ArrayValues[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayValues/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayValues/#returns","title":"Returns","text":"<ul> <li>ArrayValues[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayValues/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayValues/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayValues/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: B-&gt;A ?\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_2","title":"Returns","text":"<ul> <li>B-&gt;A ?</li> </ul>"},{"location":"builtin-ArrayValues/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: ArrayValues[A, B] ref\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_3","title":"Returns","text":"<ul> <li>ArrayValues[A, B] ref</li> </ul>"},{"location":"builtin-AsioEvent/","title":"AsioEvent","text":"<p>[Source]</p> <p>Functions for asynchronous event notification.</p> <pre><code>primitive val AsioEvent\n</code></pre>"},{"location":"builtin-AsioEvent/#constructors","title":"Constructors","text":""},{"location":"builtin-AsioEvent/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AsioEvent val^\n</code></pre>"},{"location":"builtin-AsioEvent/#returns","title":"Returns","text":"<ul> <li>AsioEvent val^</li> </ul>"},{"location":"builtin-AsioEvent/#public-functions","title":"Public Functions","text":""},{"location":"builtin-AsioEvent/#none","title":"none","text":"<p>[Source]</p> <p>An empty event.</p> <pre><code>fun box none()\n: Pointer[AsioEvent val] tag\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_1","title":"Returns","text":"<ul> <li>Pointer[AsioEvent val] tag</li> </ul>"},{"location":"builtin-AsioEvent/#readable","title":"readable","text":"<p>[Source]</p> <p>Returns true if the flags contain the readable flag.</p> <pre><code>fun box readable(\n  flags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#writeable","title":"writeable","text":"<p>[Source]</p> <p>Returns true if the flags contain the writeable flag.</p> <pre><code>fun box writeable(\n  flags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_1","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#disposable","title":"disposable","text":"<p>[Source]</p> <p>Returns true if the event should be disposed of.</p> <pre><code>fun box disposable(\n  flags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_2","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#oneshotable","title":"oneshotable","text":"<p>[Source]</p> <p>Returns true if the flags contain the oneshot flag.</p> <pre><code>fun box oneshotable(\n  flags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_3","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>fun box dispose()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read","title":"read","text":"<p>[Source]</p> <pre><code>fun box read()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#write","title":"write","text":"<p>[Source]</p> <pre><code>fun box write()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#timer","title":"timer","text":"<p>[Source]</p> <pre><code>fun box timer()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#signal","title":"signal","text":"<p>[Source]</p> <pre><code>fun box signal()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read_write","title":"read_write","text":"<p>[Source]</p> <pre><code>fun box read_write()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#oneshot","title":"oneshot","text":"<p>[Source]</p> <pre><code>fun box oneshot()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read_write_oneshot","title":"read_write_oneshot","text":"<p>[Source]</p> <pre><code>fun box read_write_oneshot()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AsioEvent val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_4","title":"Parameters","text":"<ul> <li>that: AsioEvent val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AsioEvent val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_5","title":"Parameters","text":"<ul> <li>that: AsioEvent val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEventID/","title":"AsioEventID","text":"<p>[Source] <pre><code>type AsioEventID is\n  Pointer[AsioEvent val] tag\n</code></pre></p>"},{"location":"builtin-AsioEventID/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Pointer[AsioEvent val] tag</li> </ul>"},{"location":"builtin-AsioEventNotify/","title":"AsioEventNotify","text":"<p>[Source] <pre><code>trait tag AsioEventNotify\n</code></pre></p>"},{"location":"builtin-Bool/","title":"Bool","text":"<p>[Source] <pre><code>primitive val Bool is\n  Stringable box\n</code></pre></p>"},{"location":"builtin-Bool/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> </ul>"},{"location":"builtin-Bool/#constructors","title":"Constructors","text":""},{"location":"builtin-Bool/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: Bool val)\n: Bool val^\n</code></pre>"},{"location":"builtin-Bool/#parameters","title":"Parameters","text":"<ul> <li>from: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns","title":"Returns","text":"<ul> <li>Bool val^</li> </ul>"},{"location":"builtin-Bool/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Bool/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_1","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_2","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_3","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_4","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_5","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Bool/#returns_7","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ByteSeq/","title":"ByteSeq","text":"<p>[Source] <pre><code>type ByteSeq is\n  (String val | Array[U8 val] val)\n</code></pre></p>"},{"location":"builtin-ByteSeq/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-ByteSeqIter/","title":"ByteSeqIter","text":"<p>[Source]</p> <p>Accept an iterable collection of String or Array[U8] val.</p> <pre><code>interface val ByteSeqIter\n</code></pre>"},{"location":"builtin-ByteSeqIter/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ByteSeqIter/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun box values()\n: Iterator[(this-&gt;String box | this-&gt;Array[U8 val] box)] ref\n</code></pre>"},{"location":"builtin-ByteSeqIter/#returns","title":"Returns","text":"<ul> <li>Iterator[(this-&gt;String box | this-&gt;Array[U8 val] box)] ref</li> </ul>"},{"location":"builtin-Comparable/","title":"Comparable[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>interface ref Comparable[A: Comparable[A] #read] is\n  Equatable[A] ref\n</code></pre></p>"},{"location":"builtin-Comparable/#implements","title":"Implements","text":"<ul> <li>Equatable[A] ref</li> </ul>"},{"location":"builtin-Comparable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Comparable/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_1","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_2","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_3","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Comparable/#parameters_4","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_4","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Comparable/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_5","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_6","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Compare/","title":"Compare","text":"<p>[Source] <pre><code>type Compare is\n  (Less val | Equal val | Greater val)\n</code></pre></p>"},{"location":"builtin-Compare/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-DisposableActor/","title":"DisposableActor","text":"<p>[Source]</p> <p>An interface used to asynchronously dispose of an actor.</p> <pre><code>interface tag DisposableActor\n</code></pre>"},{"location":"builtin-DisposableActor/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-DisposableActor/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-DoNotOptimise/","title":"DoNotOptimise","text":"<p>[Source]</p> <p>Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes.</p> <pre><code>primitive val DoNotOptimise\n</code></pre>"},{"location":"builtin-DoNotOptimise/#constructors","title":"Constructors","text":""},{"location":"builtin-DoNotOptimise/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DoNotOptimise val^\n</code></pre>"},{"location":"builtin-DoNotOptimise/#returns","title":"Returns","text":"<ul> <li>DoNotOptimise val^</li> </ul>"},{"location":"builtin-DoNotOptimise/#public-functions","title":"Public Functions","text":""},{"location":"builtin-DoNotOptimise/#applya-a","title":"apply[A: A]","text":"<p>[Source]</p> <p>Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation.</p> <pre><code>fun box apply[A: A](\n  obj: A)\n: None val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters","title":"Parameters","text":"<ul> <li>obj: A</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-DoNotOptimise/#observe","title":"observe","text":"<p>[Source]</p> <p>Prevent the compiler from optimising out writes to an object marked by the apply function.</p> <pre><code>fun box observe()\n: None val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-DoNotOptimise/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DoNotOptimise val)\n: Bool val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters_1","title":"Parameters","text":"<ul> <li>that: DoNotOptimise val</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-DoNotOptimise/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DoNotOptimise val)\n: Bool val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters_2","title":"Parameters","text":"<ul> <li>that: DoNotOptimise val</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Env/","title":"Env","text":"<p>[Source]</p> <p>An environment holds the command line and other values injected into the program by default by the runtime.</p> <pre><code>class val Env\n</code></pre>"},{"location":"builtin-Env/#constructors","title":"Constructors","text":""},{"location":"builtin-Env/#create","title":"create","text":"<p>[Source]</p> <p>Build an artificial environment. A root capability must be supplied.</p> <pre><code>new val create(\n  root': AmbientAuth val,\n  input': InputStream tag,\n  out': OutStream tag,\n  err': OutStream tag,\n  args': Array[String val] val,\n  vars': Array[String val] val,\n  exitcode': {(I32)} val)\n: Env val^\n</code></pre>"},{"location":"builtin-Env/#parameters","title":"Parameters","text":"<ul> <li>root': AmbientAuth val</li> <li>input': InputStream tag</li> <li>out': OutStream tag</li> <li>err': OutStream tag</li> <li>args': Array[String val] val</li> <li>vars': Array[String val] val</li> <li>exitcode': {(I32)} val</li> </ul>"},{"location":"builtin-Env/#returns","title":"Returns","text":"<ul> <li>Env val^</li> </ul>"},{"location":"builtin-Env/#public-fields","title":"Public fields","text":""},{"location":"builtin-Env/#let-root-ambientauth-val","title":"let root: AmbientAuth val","text":"<p>[Source]</p> <p>The root capability.</p>"},{"location":"builtin-Env/#let-input-inputstream-tag","title":"let input: InputStream tag","text":"<p>[Source]</p> <p>Stdin represented as an actor.</p>"},{"location":"builtin-Env/#let-out-outstream-tag","title":"let out: OutStream tag","text":"<p>[Source]</p> <p>Stdout</p>"},{"location":"builtin-Env/#let-err-outstream-tag","title":"let err: OutStream tag","text":"<p>[Source]</p> <p>Stderr</p>"},{"location":"builtin-Env/#let-args-arraystring-val-val","title":"let args: Array[String val] val","text":"<p>[Source]</p> <p>The command line used to start the program.</p>"},{"location":"builtin-Env/#let-vars-arraystring-val-val","title":"let vars: Array[String val] val","text":"<p>[Source]</p> <p>The program's environment variables.</p>"},{"location":"builtin-Env/#let-exitcode-i32-val","title":"let exitcode: {(I32)} val","text":"<p>[Source]</p> <p>Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.</p>"},{"location":"builtin-Equal/","title":"Equal","text":"<p>[Source] <pre><code>primitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Equal/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Equal/#constructors","title":"Constructors","text":""},{"location":"builtin-Equal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Equal val^\n</code></pre>"},{"location":"builtin-Equal/#returns","title":"Returns","text":"<ul> <li>Equal val^</li> </ul>"},{"location":"builtin-Equal/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Equal/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Equal/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Equal/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Equal/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Equal/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equal/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Equal/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Equal/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equatable/","title":"Equatable[A: Equatable[A] #read]","text":"<p>[Source] <pre><code>interface ref Equatable[A: Equatable[A] #read]\n</code></pre></p>"},{"location":"builtin-Equatable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Equatable/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Equatable/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Equatable/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equatable/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Equatable/#parameters_1","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Equatable/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/","title":"F32","text":"<p>[Source] <pre><code>primitive val F32 is\n  FloatingPoint[F32 val] val\n</code></pre></p>"},{"location":"builtin-F32/#implements","title":"Implements","text":"<ul> <li>FloatingPoint[F32 val] val</li> </ul>"},{"location":"builtin-F32/#constructors","title":"Constructors","text":""},{"location":"builtin-F32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: F32 val = 0)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters","title":"Parameters","text":"<ul> <li>value: F32 val = 0</li> </ul>"},{"location":"builtin-F32/#returns","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#pi","title":"pi","text":"<p>[Source]</p> <pre><code>new val pi()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_1","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#e","title":"e","text":"<p>[Source]</p> <pre><code>new val e()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_2","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#from_bits","title":"from_bits","text":"<p>[Source]</p> <pre><code>new val from_bits(\n  i: U32 val)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters_1","title":"Parameters","text":"<ul> <li>i: U32 val</li> </ul>"},{"location":"builtin-F32/#returns_3","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters_2","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-F32/#returns_4","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#min_value","title":"min_value","text":"<p>[Source]</p> <p>Minimum negative value representable.</p> <pre><code>new val min_value()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_5","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#max_value","title":"max_value","text":"<p>[Source]</p> <p>Maximum positive value representable.</p> <pre><code>new val max_value()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_6","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <p>Minimum positive value representable at full precision (ie a normalised number).</p> <pre><code>new val min_normalised()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_7","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#epsilon","title":"epsilon","text":"<p>[Source]</p> <p>Minimum positive value such that (1 + epsilon) != 1.</p> <pre><code>new val epsilon()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_8","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-F32/#bits","title":"bits","text":"<p>[Source]</p> <pre><code>fun box bits()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#radix","title":"radix","text":"<p>[Source]</p> <p>Exponent radix.</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#precision2","title":"precision2","text":"<p>[Source]</p> <p>Mantissa precision in bits.</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#precision10","title":"precision10","text":"<p>[Source]</p> <p>Mantissa precision in decimal digits.</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <p>Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_13","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <p>Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_14","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <p>Maximum exponent value such that (2^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <p>Maximum exponent value such that (10^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_17","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_18","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_19","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_20","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_21","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_3","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_22","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_4","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_23","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_5","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_24","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_6","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_25","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_7","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_26","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_8","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_27","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#finite","title":"finite","text":"<p>[Source]</p> <p>Check whether this number is finite, ie not +/-infinity and not NaN.</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_28","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#infinite","title":"infinite","text":"<p>[Source]</p> <p>Check whether this number is +/-infinity</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_29","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#nan","title":"nan","text":"<p>[Source]</p> <p>Check whether this number is NaN.</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_30","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_9","title":"Parameters","text":"<ul> <li>x: F32 val</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-F32/#returns_31","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (F32 val , U32 val)\n</code></pre>"},{"location":"builtin-F32/#returns_32","title":"Returns","text":"<ul> <li>(F32 val , U32 val)</li> </ul>"},{"location":"builtin-F32/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_33","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_34","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_35","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_36","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_10","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_37","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\n  y: I32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_11","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-F32/#returns_38","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_39","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_40","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_41","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_42","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_43","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_44","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_45","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_46","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_47","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_48","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_49","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_50","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_51","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_52","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_12","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_53","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_54","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_55","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_56","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\n  sign: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_13","title":"Parameters","text":"<ul> <li>sign: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_57","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_58","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_59","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-F32/#returns_60","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-F32/#returns_61","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-F32/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-F32/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F32/#add_unsafe","title":"add_unsafe","text":"<pre><code>fun box add_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_14","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_64","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sub_unsafe","title":"sub_unsafe","text":"<pre><code>fun box sub_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_15","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_65","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mul_unsafe","title":"mul_unsafe","text":"<pre><code>fun box mul_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_16","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_66","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#div_unsafe","title":"div_unsafe","text":"<pre><code>fun box div_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_17","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_67","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#divrem_unsafe","title":"divrem_unsafe","text":"<pre><code>fun box divrem_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)\n</code></pre>"},{"location":"builtin-F32/#parameters_18","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_68","title":"Returns","text":"<ul> <li>(F32 val , F32 val)</li> </ul>"},{"location":"builtin-F32/#rem_unsafe","title":"rem_unsafe","text":"<pre><code>fun box rem_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_19","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_69","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#neg_unsafe","title":"neg_unsafe","text":"<pre><code>fun box neg_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_70","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#eq_unsafe","title":"eq_unsafe","text":"<pre><code>fun box eq_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_20","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ne_unsafe","title":"ne_unsafe","text":"<pre><code>fun box ne_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_21","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_72","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#lt_unsafe","title":"lt_unsafe","text":"<pre><code>fun box lt_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_22","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#le_unsafe","title":"le_unsafe","text":"<pre><code>fun box le_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_23","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ge_unsafe","title":"ge_unsafe","text":"<pre><code>fun box ge_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_24","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#gt_unsafe","title":"gt_unsafe","text":"<pre><code>fun box gt_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_25","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-F32/#returns_77","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-F32/#add","title":"add","text":"<pre><code>fun box add(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_26","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_78","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sub","title":"sub","text":"<pre><code>fun box sub(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_27","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_79","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mul","title":"mul","text":"<pre><code>fun box mul(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_28","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#div","title":"div","text":"<pre><code>fun box div(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_29","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_81","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#divrem","title":"divrem","text":"<pre><code>fun box divrem(\n  y: F32 val)\n: (F32 val , F32 val)\n</code></pre>"},{"location":"builtin-F32/#parameters_30","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_82","title":"Returns","text":"<ul> <li>(F32 val , F32 val)</li> </ul>"},{"location":"builtin-F32/#rem","title":"rem","text":"<pre><code>fun box rem(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_31","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#neg","title":"neg","text":"<pre><code>fun box neg()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_84","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#eq","title":"eq","text":"<pre><code>fun box eq(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_32","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_85","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ne","title":"ne","text":"<pre><code>fun box ne(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_33","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_86","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#lt","title":"lt","text":"<pre><code>fun box lt(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_34","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_87","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#le","title":"le","text":"<pre><code>fun box le(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_35","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_88","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ge","title":"ge","text":"<pre><code>fun box ge(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_36","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_89","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#gt","title":"gt","text":"<pre><code>fun box gt(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_37","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_90","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#i8","title":"i8","text":"<pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-F32/#returns_91","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F32/#i16","title":"i16","text":"<pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_92","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#i32","title":"i32","text":"<pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-F32/#returns_93","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F32/#i64","title":"i64","text":"<pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-F32/#returns_94","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F32/#ilong","title":"ilong","text":"<pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-F32/#returns_95","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F32/#isize","title":"isize","text":"<pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-F32/#returns_96","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F32/#u8","title":"u8","text":"<pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_97","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#u16","title":"u16","text":"<pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-F32/#returns_98","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F32/#u32","title":"u32","text":"<pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_99","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#u64","title":"u64","text":"<pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_100","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#ulong","title":"ulong","text":"<pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-F32/#returns_101","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F32/#usize","title":"usize","text":"<pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_102","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#f32_1","title":"f32","text":"<pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_103","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#f64","title":"f64","text":"<pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-F32/#returns_104","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F32/#i8_unsafe","title":"i8_unsafe","text":"<pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-F32/#returns_105","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F32/#i16_unsafe","title":"i16_unsafe","text":"<pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_106","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#i32_unsafe","title":"i32_unsafe","text":"<pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-F32/#returns_107","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F32/#i64_unsafe","title":"i64_unsafe","text":"<pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-F32/#returns_108","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F32/#ilong_unsafe","title":"ilong_unsafe","text":"<pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-F32/#returns_109","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F32/#isize_unsafe","title":"isize_unsafe","text":"<pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-F32/#returns_110","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F32/#u8_unsafe","title":"u8_unsafe","text":"<pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_111","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#u16_unsafe","title":"u16_unsafe","text":"<pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-F32/#returns_112","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F32/#u32_unsafe","title":"u32_unsafe","text":"<pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_113","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#u64_unsafe","title":"u64_unsafe","text":"<pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_114","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#ulong_unsafe","title":"ulong_unsafe","text":"<pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-F32/#returns_115","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F32/#usize_unsafe","title":"usize_unsafe","text":"<pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_116","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#f32_unsafe","title":"f32_unsafe","text":"<pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_117","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#f64_unsafe","title":"f64_unsafe","text":"<pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F32/#returns_118","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-F32/#parameters_38","title":"Parameters","text":"<ul> <li>that: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_119","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-F64/","title":"F64","text":"<p>[Source] <pre><code>primitive val F64 is\n  FloatingPoint[F64 val] val\n</code></pre></p>"},{"location":"builtin-F64/#implements","title":"Implements","text":"<ul> <li>FloatingPoint[F64 val] val</li> </ul>"},{"location":"builtin-F64/#constructors","title":"Constructors","text":""},{"location":"builtin-F64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: F64 val = 0)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters","title":"Parameters","text":"<ul> <li>value: F64 val = 0</li> </ul>"},{"location":"builtin-F64/#returns","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#pi","title":"pi","text":"<p>[Source]</p> <pre><code>new val pi()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_1","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#e","title":"e","text":"<p>[Source]</p> <pre><code>new val e()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_2","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#from_bits","title":"from_bits","text":"<p>[Source]</p> <pre><code>new val from_bits(\n  i: U64 val)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters_1","title":"Parameters","text":"<ul> <li>i: U64 val</li> </ul>"},{"location":"builtin-F64/#returns_3","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters_2","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-F64/#returns_4","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#min_value","title":"min_value","text":"<p>[Source]</p> <p>Minimum negative value representable.</p> <pre><code>new val min_value()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_5","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#max_value","title":"max_value","text":"<p>[Source]</p> <p>Maximum positive value representable.</p> <pre><code>new val max_value()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_6","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <p>Minimum positive value representable at full precision (ie a normalised number).</p> <pre><code>new val min_normalised()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_7","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#epsilon","title":"epsilon","text":"<p>[Source]</p> <p>Minimum positive value such that (1 + epsilon) != 1.</p> <pre><code>new val epsilon()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_8","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-F64/#bits","title":"bits","text":"<p>[Source]</p> <pre><code>fun box bits()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#radix","title":"radix","text":"<p>[Source]</p> <p>Exponent radix.</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#precision2","title":"precision2","text":"<p>[Source]</p> <p>Mantissa precision in bits.</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#precision10","title":"precision10","text":"<p>[Source]</p> <p>Mantissa precision in decimal digits.</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <p>Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_13","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <p>Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_14","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <p>Maximum exponent value such that (2^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <p>Maximum exponent value such that (10^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_17","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_18","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_19","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_3","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_22","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_4","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_23","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_5","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_24","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_6","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_25","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_7","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_26","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_8","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_27","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#finite","title":"finite","text":"<p>[Source]</p> <p>Check whether this number is finite, ie not +/-infinity and not NaN.</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_28","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#infinite","title":"infinite","text":"<p>[Source]</p> <p>Check whether this number is +/-infinity</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_29","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#nan","title":"nan","text":"<p>[Source]</p> <p>Check whether this number is NaN.</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_30","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_9","title":"Parameters","text":"<ul> <li>x: F64 val</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-F64/#returns_31","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (F64 val , U32 val)\n</code></pre>"},{"location":"builtin-F64/#returns_32","title":"Returns","text":"<ul> <li>(F64 val , U32 val)</li> </ul>"},{"location":"builtin-F64/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_33","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_34","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_35","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_36","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_10","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_37","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\n  y: I32 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_11","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-F64/#returns_38","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_39","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_40","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_41","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_42","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_43","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_44","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_45","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_46","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_47","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_48","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_49","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_50","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_51","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_52","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_12","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_53","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_54","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_55","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_56","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\n  sign: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_13","title":"Parameters","text":"<ul> <li>sign: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_57","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_58","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_59","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-F64/#returns_60","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-F64/#returns_61","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-F64/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-F64/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F64/#add_unsafe","title":"add_unsafe","text":"<pre><code>fun box add_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_14","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_64","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sub_unsafe","title":"sub_unsafe","text":"<pre><code>fun box sub_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_15","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_65","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mul_unsafe","title":"mul_unsafe","text":"<pre><code>fun box mul_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_16","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_66","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#div_unsafe","title":"div_unsafe","text":"<pre><code>fun box div_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_17","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_67","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#divrem_unsafe","title":"divrem_unsafe","text":"<pre><code>fun box divrem_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)\n</code></pre>"},{"location":"builtin-F64/#parameters_18","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_68","title":"Returns","text":"<ul> <li>(F64 val , F64 val)</li> </ul>"},{"location":"builtin-F64/#rem_unsafe","title":"rem_unsafe","text":"<pre><code>fun box rem_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_19","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_69","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#neg_unsafe","title":"neg_unsafe","text":"<pre><code>fun box neg_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_70","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#eq_unsafe","title":"eq_unsafe","text":"<pre><code>fun box eq_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_20","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ne_unsafe","title":"ne_unsafe","text":"<pre><code>fun box ne_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_21","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_72","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#lt_unsafe","title":"lt_unsafe","text":"<pre><code>fun box lt_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_22","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#le_unsafe","title":"le_unsafe","text":"<pre><code>fun box le_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_23","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ge_unsafe","title":"ge_unsafe","text":"<pre><code>fun box ge_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_24","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#gt_unsafe","title":"gt_unsafe","text":"<pre><code>fun box gt_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_25","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-F64/#returns_77","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-F64/#add","title":"add","text":"<pre><code>fun box add(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_26","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_78","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sub","title":"sub","text":"<pre><code>fun box sub(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_27","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_79","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mul","title":"mul","text":"<pre><code>fun box mul(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_28","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_80","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#div","title":"div","text":"<pre><code>fun box div(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_29","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#divrem","title":"divrem","text":"<pre><code>fun box divrem(\n  y: F64 val)\n: (F64 val , F64 val)\n</code></pre>"},{"location":"builtin-F64/#parameters_30","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_82","title":"Returns","text":"<ul> <li>(F64 val , F64 val)</li> </ul>"},{"location":"builtin-F64/#rem","title":"rem","text":"<pre><code>fun box rem(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_31","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_83","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#neg","title":"neg","text":"<pre><code>fun box neg()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#eq","title":"eq","text":"<pre><code>fun box eq(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_32","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_85","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ne","title":"ne","text":"<pre><code>fun box ne(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_33","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_86","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#lt","title":"lt","text":"<pre><code>fun box lt(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_34","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_87","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#le","title":"le","text":"<pre><code>fun box le(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_35","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_88","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ge","title":"ge","text":"<pre><code>fun box ge(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_36","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_89","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#gt","title":"gt","text":"<pre><code>fun box gt(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_37","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_90","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#i8","title":"i8","text":"<pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-F64/#returns_91","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F64/#i16","title":"i16","text":"<pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_92","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#i32","title":"i32","text":"<pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-F64/#returns_93","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F64/#i64","title":"i64","text":"<pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-F64/#returns_94","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F64/#ilong","title":"ilong","text":"<pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-F64/#returns_95","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F64/#isize","title":"isize","text":"<pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-F64/#returns_96","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F64/#u8","title":"u8","text":"<pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_97","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#u16","title":"u16","text":"<pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-F64/#returns_98","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F64/#u32","title":"u32","text":"<pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-F64/#returns_99","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F64/#u64","title":"u64","text":"<pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_100","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#ulong","title":"ulong","text":"<pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-F64/#returns_101","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F64/#usize","title":"usize","text":"<pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_102","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#f32","title":"f32","text":"<pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-F64/#returns_103","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F64/#f64_1","title":"f64","text":"<pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_104","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#i8_unsafe","title":"i8_unsafe","text":"<pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-F64/#returns_105","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F64/#i16_unsafe","title":"i16_unsafe","text":"<pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_106","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#i32_unsafe","title":"i32_unsafe","text":"<pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-F64/#returns_107","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F64/#i64_unsafe","title":"i64_unsafe","text":"<pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-F64/#returns_108","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F64/#ilong_unsafe","title":"ilong_unsafe","text":"<pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-F64/#returns_109","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F64/#isize_unsafe","title":"isize_unsafe","text":"<pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-F64/#returns_110","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F64/#u8_unsafe","title":"u8_unsafe","text":"<pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_111","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#u16_unsafe","title":"u16_unsafe","text":"<pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-F64/#returns_112","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F64/#u32_unsafe","title":"u32_unsafe","text":"<pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-F64/#returns_113","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F64/#u64_unsafe","title":"u64_unsafe","text":"<pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_114","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#ulong_unsafe","title":"ulong_unsafe","text":"<pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-F64/#returns_115","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F64/#usize_unsafe","title":"usize_unsafe","text":"<pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_116","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#f32_unsafe","title":"f32_unsafe","text":"<pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F64/#returns_117","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F64/#f64_unsafe","title":"f64_unsafe","text":"<pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_118","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-F64/#parameters_38","title":"Parameters","text":"<ul> <li>that: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_119","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Float/","title":"Float","text":"<p>[Source] <pre><code>type Float is\n  (F32 val | F64 val)\n</code></pre></p>"},{"location":"builtin-Float/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(F32 val | F64 val)</li> </ul>"},{"location":"builtin-FloatingPoint/","title":"FloatingPoint[A: FloatingPoint[A] val]","text":"<p>[Source] <pre><code>trait val FloatingPoint[A: FloatingPoint[A] val] is\n  Real[A] val\n</code></pre></p>"},{"location":"builtin-FloatingPoint/#implements","title":"Implements","text":"<ul> <li>Real[A] val</li> </ul>"},{"location":"builtin-FloatingPoint/#constructors","title":"Constructors","text":""},{"location":"builtin-FloatingPoint/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <pre><code>new val min_normalised()\n: FloatingPoint[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns","title":"Returns","text":"<ul> <li>FloatingPoint[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#epsilon","title":"epsilon","text":"<p>[Source]</p> <pre><code>new val epsilon()\n: FloatingPoint[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_1","title":"Returns","text":"<ul> <li>FloatingPoint[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_4","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_5","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#public-functions","title":"Public Functions","text":""},{"location":"builtin-FloatingPoint/#radix","title":"radix","text":"<p>[Source]</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#precision2","title":"precision2","text":"<p>[Source]</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#precision10","title":"precision10","text":"<p>[Source]</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_9","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_10","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box add_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_13","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box sub_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_14","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box mul_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_15","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box div_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_16","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box fld_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box divrem_unsafe(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_18","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-FloatingPoint/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box rem_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box mod_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_21","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#eq_unsafe","title":"eq_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box eq_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_10","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ne_unsafe","title":"ne_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box ne_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_11","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#lt_unsafe","title":"lt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box lt_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_12","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#le_unsafe","title":"le_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box le_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_13","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ge_unsafe","title":"ge_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box ge_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_14","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_26","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#gt_unsafe","title":"gt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box gt_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_15","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_27","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_31","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#finite","title":"finite","text":"<p>[Source]</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_33","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#infinite","title":"infinite","text":"<p>[Source]</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_34","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#nan","title":"nan","text":"<p>[Source]</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\n  x: A,\n  exponent: I32 val)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_16","title":"Parameters","text":"<ul> <li>x: A</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_36","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (A , U32 val)\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_37","title":"Returns","text":"<ul> <li>(A , U32 val)</li> </ul>"},{"location":"builtin-FloatingPoint/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_38","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_40","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\n  y: I32 val)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_18","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_43","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_44","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_51","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_55","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_56","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_57","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_58","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_59","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_60","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_61","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\n  sign: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_20","title":"Parameters","text":"<ul> <li>sign: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_62","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_63","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-FloatingPoint/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_64","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_65","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_66","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_67","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_68","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-FloatingPoint/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_69","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_70","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_71","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_72","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_29","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_30","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_31","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_32","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_33","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_77","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_34","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_78","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_79","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_80","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_81","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_82","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_83","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_84","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_85","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_86","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_87","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_88","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-FloatingPoint/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_89","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-FloatingPoint/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_90","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_91","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_92","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_93","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_94","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_95","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-FloatingPoint/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_96","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_97","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_98","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_99","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_100","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_101","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_102","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_103","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_104","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-FloatingPoint/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_105","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-FloatingPoint/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_106","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_107","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_108","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_109","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_110","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_111","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-FloatingPoint/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_112","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_113","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_114","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_37","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_115","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Greater/","title":"Greater","text":"<p>[Source] <pre><code>primitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Greater/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Greater/#constructors","title":"Constructors","text":""},{"location":"builtin-Greater/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Greater val^\n</code></pre>"},{"location":"builtin-Greater/#returns","title":"Returns","text":"<ul> <li>Greater val^</li> </ul>"},{"location":"builtin-Greater/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Greater/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Greater/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Greater/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Greater/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Greater/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Greater/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Greater/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Greater/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-HasEq/","title":"HasEq[A: A]","text":"<p>[Source] <pre><code>interface ref HasEq[A: A]\n</code></pre></p>"},{"location":"builtin-HasEq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-HasEq/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-HasEq/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-HasEq/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/","title":"I128","text":"<p>[Source] <pre><code>primitive val I128 is\n  SignedInteger[I128 val, U128 val] val\n</code></pre></p>"},{"location":"builtin-I128/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I128 val, U128 val] val</li> </ul>"},{"location":"builtin-I128/#constructors","title":"Constructors","text":""},{"location":"builtin-I128/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I128 val)\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#parameters","title":"Parameters","text":"<ul> <li>value: I128 val</li> </ul>"},{"location":"builtin-I128/#returns","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I128/#returns_1","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#returns_2","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#returns_3","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I128/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_4","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_5","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_6","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_9","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_10","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_11","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_12","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_2","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_3","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_4","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_16","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_5","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_17","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_6","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_18","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_7","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_19","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_21","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I128/#returns_22","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I128/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_8","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_23","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I128 val)\n: (I128 val , I128 val)\n</code></pre>"},{"location":"builtin-I128/#parameters_9","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_24","title":"Returns","text":"<ul> <li>(I128 val , I128 val)</li> </ul>"},{"location":"builtin-I128/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_10","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_25","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_11","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_26","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_12","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_27","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)\n</code></pre>"},{"location":"builtin-I128/#parameters_13","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_28","title":"Returns","text":"<ul> <li>(I128 val , I128 val)</li> </ul>"},{"location":"builtin-I128/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_14","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_29","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_15","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_30","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I128/#returns_31","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I128/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I128/#returns_32","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I128/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I128/#returns_33","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I128/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I128/#returns_34","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I128/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_16","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_35","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_17","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_36","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_18","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_37","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_19","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_38","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_20","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_39","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_21","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_40","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_22","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_41","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_23","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_42","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_24","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_43","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_25","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_44","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_26","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_45","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_27","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_46","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I128 val)\n: (I128 val , I128 val) ?\n</code></pre>"},{"location":"builtin-I128/#parameters_28","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_47","title":"Returns","text":"<ul> <li>(I128 val , I128 val) ?</li> </ul>"},{"location":"builtin-I128/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_29","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_48","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_30","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_49","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_31","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_50","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_32","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_51","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_33","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_52","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_34","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_53","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_35","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_54","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_36","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_55","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_56","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_37","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_57","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_38","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_58","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_39","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_59","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_60","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_40","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_61","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_41","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_63","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_42","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_43","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_44","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_45","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_46","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_68","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_47","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I128/#returns_70","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I128/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I128/#returns_71","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I128/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I128/#returns_72","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I128/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I128/#returns_73","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I128/#i128_1","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_74","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I128/#returns_75","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I128/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I128/#returns_76","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I128/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I128/#returns_77","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I128/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I128/#returns_78","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I128/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I128/#returns_79","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I128/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_80","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_81","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I128/#returns_82","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I128/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_83","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I128/#returns_84","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I128/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I128/#returns_85","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I128/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I128/#returns_86","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I128/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I128/#returns_87","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I128/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_88","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I128/#returns_89","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I128/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I128/#returns_90","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I128/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I128/#returns_91","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I128/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I128/#returns_92","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I128/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I128/#returns_93","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I128/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_94","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_95","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I128/#returns_96","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I128/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_97","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I128/#parameters_48","title":"Parameters","text":"<ul> <li>that: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I16/","title":"I16","text":"<p>[Source] <pre><code>primitive val I16 is\n  SignedInteger[I16 val, U16 val] val\n</code></pre></p>"},{"location":"builtin-I16/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I16 val, U16 val] val</li> </ul>"},{"location":"builtin-I16/#constructors","title":"Constructors","text":""},{"location":"builtin-I16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I16 val)\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#parameters","title":"Parameters","text":"<ul> <li>value: I16 val</li> </ul>"},{"location":"builtin-I16/#returns","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I16/#returns_1","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#returns_2","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#returns_3","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I16/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_5","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_6","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_7","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_9","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_10","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_11","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_12","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_2","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_14","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_3","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_4","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_5","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_17","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_6","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_18","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_7","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_19","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_8","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_20","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_9","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_21","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_10","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_22","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_11","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_23","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_12","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_24","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_13","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_25","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_14","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_26","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_15","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_27","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_16","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_28","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_17","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_29","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_18","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_30","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_19","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_31","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I16 val)\n: (I16 val , I16 val) ?\n</code></pre>"},{"location":"builtin-I16/#parameters_20","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_32","title":"Returns","text":"<ul> <li>(I16 val , I16 val) ?</li> </ul>"},{"location":"builtin-I16/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_21","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_33","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_22","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_34","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_23","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_35","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_24","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_36","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_25","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_37","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_26","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_38","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I16/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I16/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_27","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_40","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_28","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_41","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_29","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_42","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_30","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_43","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)\n</code></pre>"},{"location":"builtin-I16/#parameters_31","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_44","title":"Returns","text":"<ul> <li>(I16 val , I16 val)</li> </ul>"},{"location":"builtin-I16/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_32","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_45","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_46","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_33","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_47","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_34","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_48","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_35","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_49","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_50","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_36","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_51","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_37","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_52","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_38","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_53","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_39","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_54","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I16 val)\n: (I16 val , I16 val)\n</code></pre>"},{"location":"builtin-I16/#parameters_40","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_55","title":"Returns","text":"<ul> <li>(I16 val , I16 val)</li> </ul>"},{"location":"builtin-I16/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_41","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_56","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_57","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_42","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_43","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_44","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_45","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_46","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_47","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I16/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I16/#i16_1","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I16/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I16/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I16/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I16/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I16/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I16/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I16/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I16/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I16/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I16/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I16/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I16/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I16/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I16/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I16/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I16/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I16/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I16/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I16/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I16/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I16/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I16/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I16/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I16/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I16/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I16/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I16/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I16/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I16/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I16/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I16/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I16/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I16/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I16/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I16/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I16/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I16/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I16/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I16/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I16/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I16/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I16/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I16/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I16/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I16/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I16/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I16/#parameters_48","title":"Parameters","text":"<ul> <li>that: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I32/","title":"I32","text":"<p>[Source] <pre><code>primitive val I32 is\n  SignedInteger[I32 val, U32 val] val\n</code></pre></p>"},{"location":"builtin-I32/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I32 val, U32 val] val</li> </ul>"},{"location":"builtin-I32/#constructors","title":"Constructors","text":""},{"location":"builtin-I32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I32 val)\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#parameters","title":"Parameters","text":"<ul> <li>value: I32 val</li> </ul>"},{"location":"builtin-I32/#returns","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I32/#returns_1","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#returns_2","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#returns_3","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_5","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_6","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_2","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_14","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_3","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_15","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_4","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_16","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_5","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_17","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_6","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_18","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_7","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_19","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_8","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_20","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_9","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_21","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_10","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_22","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_11","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_23","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_12","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_24","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_13","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_25","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_14","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_26","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_15","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_27","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_16","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_28","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_17","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_29","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_18","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_30","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_19","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_31","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I32 val)\n: (I32 val , I32 val) ?\n</code></pre>"},{"location":"builtin-I32/#parameters_20","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_32","title":"Returns","text":"<ul> <li>(I32 val , I32 val) ?</li> </ul>"},{"location":"builtin-I32/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_21","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_33","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_22","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_34","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_23","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_35","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_24","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_36","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_25","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_37","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_26","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_38","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I32/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I32/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_27","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_40","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_28","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_41","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_29","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_42","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_30","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_43","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)\n</code></pre>"},{"location":"builtin-I32/#parameters_31","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_44","title":"Returns","text":"<ul> <li>(I32 val , I32 val)</li> </ul>"},{"location":"builtin-I32/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_32","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_45","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_46","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_33","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_47","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_34","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_48","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_35","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_49","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_50","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_36","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_51","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_37","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_52","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_38","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_53","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_39","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_54","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I32 val)\n: (I32 val , I32 val)\n</code></pre>"},{"location":"builtin-I32/#parameters_40","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_55","title":"Returns","text":"<ul> <li>(I32 val , I32 val)</li> </ul>"},{"location":"builtin-I32/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_41","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_56","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_57","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_42","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_43","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_44","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_45","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_46","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_47","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I32/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I32/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I32/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I32/#i32_1","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I32/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I32/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I32/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I32/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I32/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I32/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I32/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I32/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I32/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I32/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I32/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I32/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I32/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I32/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I32/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I32/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I32/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I32/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I32/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I32/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I32/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I32/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I32/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I32/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I32/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I32/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I32/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I32/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I32/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I32/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I32/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I32/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I32/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I32/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I32/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I32/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I32/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I32/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I32/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I32/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I32/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I32/#parameters_48","title":"Parameters","text":"<ul> <li>that: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I64/","title":"I64","text":"<p>[Source] <pre><code>primitive val I64 is\n  SignedInteger[I64 val, U64 val] val\n</code></pre></p>"},{"location":"builtin-I64/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I64 val, U64 val] val</li> </ul>"},{"location":"builtin-I64/#constructors","title":"Constructors","text":""},{"location":"builtin-I64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I64 val)\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#parameters","title":"Parameters","text":"<ul> <li>value: I64 val</li> </ul>"},{"location":"builtin-I64/#returns","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I64/#returns_1","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#returns_2","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#returns_3","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_5","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_6","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_2","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_3","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_15","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_4","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_16","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_5","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_17","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_6","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_18","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_7","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_19","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_8","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_21","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_9","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_22","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_10","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_23","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_11","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_24","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_12","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_25","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_13","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_26","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_14","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_27","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_15","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_28","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_16","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_29","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_17","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_30","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_18","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_31","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_19","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_32","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I64 val)\n: (I64 val , I64 val) ?\n</code></pre>"},{"location":"builtin-I64/#parameters_20","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_33","title":"Returns","text":"<ul> <li>(I64 val , I64 val) ?</li> </ul>"},{"location":"builtin-I64/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_21","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_34","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_22","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_35","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_23","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_36","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_24","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_37","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_25","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_38","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_26","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_39","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I64/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I64/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_27","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_41","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_28","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_42","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_29","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_43","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_30","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_44","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)\n</code></pre>"},{"location":"builtin-I64/#parameters_31","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_45","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"builtin-I64/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_32","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_46","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_47","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_33","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_48","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_34","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_49","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_35","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_50","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_51","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_36","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_52","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_37","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_53","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_38","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_54","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_39","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_55","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I64 val)\n: (I64 val , I64 val)\n</code></pre>"},{"location":"builtin-I64/#parameters_40","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_56","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"builtin-I64/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_41","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_57","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_58","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_42","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_43","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_44","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_45","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_46","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_47","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I64/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I64/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I64/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I64/#i64_1","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I64/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I64/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I64/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I64/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I64/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I64/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I64/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I64/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I64/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I64/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I64/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I64/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I64/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I64/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I64/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I64/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I64/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I64/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I64/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I64/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I64/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I64/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I64/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I64/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I64/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I64/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I64/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I64/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I64/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I64/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I64/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I64/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I64/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I64/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I64/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I64/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I64/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I64/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I64/#parameters_48","title":"Parameters","text":"<ul> <li>that: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I8/","title":"I8","text":"<p>[Source] <pre><code>primitive val I8 is\n  SignedInteger[I8 val, U8 val] val\n</code></pre></p>"},{"location":"builtin-I8/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I8 val, U8 val] val</li> </ul>"},{"location":"builtin-I8/#constructors","title":"Constructors","text":""},{"location":"builtin-I8/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I8 val)\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#parameters","title":"Parameters","text":"<ul> <li>value: I8 val</li> </ul>"},{"location":"builtin-I8/#returns","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I8/#returns_1","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#returns_2","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#returns_3","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I8/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_5","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_6","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_9","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_2","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_14","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_3","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_15","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_4","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_16","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_5","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_17","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_6","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_18","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_7","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_19","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_8","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_20","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_9","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_21","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_10","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_22","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_11","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_23","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_12","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_24","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_13","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_25","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_14","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_26","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_15","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_27","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_16","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_28","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_17","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_29","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_18","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_30","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_19","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_31","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I8 val)\n: (I8 val , I8 val) ?\n</code></pre>"},{"location":"builtin-I8/#parameters_20","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_32","title":"Returns","text":"<ul> <li>(I8 val , I8 val) ?</li> </ul>"},{"location":"builtin-I8/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_21","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_33","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_22","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_34","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_23","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_35","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_24","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_36","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_25","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_37","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_26","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_38","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I8/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I8/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_27","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_40","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_28","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_41","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_29","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_42","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_30","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_43","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)\n</code></pre>"},{"location":"builtin-I8/#parameters_31","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_44","title":"Returns","text":"<ul> <li>(I8 val , I8 val)</li> </ul>"},{"location":"builtin-I8/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_32","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_45","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_46","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_33","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_47","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_34","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_48","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_35","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_49","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_50","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_36","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_51","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_37","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_52","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_38","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_53","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_39","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_54","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I8 val)\n: (I8 val , I8 val)\n</code></pre>"},{"location":"builtin-I8/#parameters_40","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_55","title":"Returns","text":"<ul> <li>(I8 val , I8 val)</li> </ul>"},{"location":"builtin-I8/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_41","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_56","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_57","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_42","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_43","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_44","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_45","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_46","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_47","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#i8_1","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I8/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I8/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I8/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I8/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I8/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I8/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I8/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I8/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I8/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I8/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I8/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I8/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I8/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I8/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I8/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I8/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I8/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I8/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I8/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I8/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I8/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I8/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I8/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I8/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I8/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I8/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I8/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I8/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I8/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I8/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I8/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I8/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I8/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I8/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I8/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I8/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I8/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I8/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I8/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I8/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I8/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I8/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I8/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I8/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I8/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I8/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I8/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I8/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I8/#parameters_48","title":"Parameters","text":"<ul> <li>that: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ILong/","title":"ILong","text":"<p>[Source] <pre><code>primitive val ILong is\n  SignedInteger[ILong val, ULong val] val\n</code></pre></p>"},{"location":"builtin-ILong/#implements","title":"Implements","text":"<ul> <li>SignedInteger[ILong val, ULong val] val</li> </ul>"},{"location":"builtin-ILong/#constructors","title":"Constructors","text":""},{"location":"builtin-ILong/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: ILong val)\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#parameters","title":"Parameters","text":"<ul> <li>value: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ILong/#returns_1","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#returns_2","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#returns_3","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ILong/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_4","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_5","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_6","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_7","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <pre><code>fun box clz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_10","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <pre><code>fun box ctz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_11","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_12","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_2","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_14","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_3","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_4","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_5","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_17","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_6","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_18","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_7","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_19","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_8","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_21","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_9","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_22","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_10","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_23","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_11","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_24","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_12","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_25","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_13","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_26","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_14","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_27","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_15","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_28","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_16","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_29","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_17","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_30","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_18","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_31","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_19","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_32","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: ILong val)\n: (ILong val , ILong val) ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_20","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_33","title":"Returns","text":"<ul> <li>(ILong val , ILong val) ?</li> </ul>"},{"location":"builtin-ILong/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_21","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_34","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_22","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_35","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_23","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_36","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_24","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_37","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_25","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_38","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_26","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_39","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ILong/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ILong/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_27","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_41","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_28","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_42","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_29","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_43","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_30","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_44","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_31","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_45","title":"Returns","text":"<ul> <li>(ILong val , ILong val)</li> </ul>"},{"location":"builtin-ILong/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_32","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_46","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_47","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_33","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_48","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_34","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_49","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_35","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_50","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_51","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_36","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_52","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_37","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_53","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_38","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_54","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_39","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_55","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: ILong val)\n: (ILong val , ILong val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_40","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_56","title":"Returns","text":"<ul> <li>(ILong val , ILong val)</li> </ul>"},{"location":"builtin-ILong/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_41","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_57","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_58","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_42","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_43","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_44","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_45","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_46","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_47","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ILong/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ILong/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ILong/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ILong/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ILong/#ilong_1","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ILong/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ILong/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ILong/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ILong/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ILong/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ILong/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ILong/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ILong/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ILong/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ILong/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ILong/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ILong/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ILong/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ILong/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ILong/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ILong/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ILong/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ILong/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ILong/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ILong/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ILong/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_48","title":"Parameters","text":"<ul> <li>that: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ISize/","title":"ISize","text":"<p>[Source] <pre><code>primitive val ISize is\n  SignedInteger[ISize val, USize val] val\n</code></pre></p>"},{"location":"builtin-ISize/#implements","title":"Implements","text":"<ul> <li>SignedInteger[ISize val, USize val] val</li> </ul>"},{"location":"builtin-ISize/#constructors","title":"Constructors","text":""},{"location":"builtin-ISize/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: ISize val)\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#parameters","title":"Parameters","text":"<ul> <li>value: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ISize/#returns_1","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#returns_2","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#returns_3","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ISize/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_5","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_6","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <pre><code>fun box clz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <pre><code>fun box ctz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_12","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_2","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_14","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_3","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_15","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_4","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_5","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_6","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_18","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_7","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_19","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_8","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_20","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_9","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_21","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_10","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_22","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_11","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_23","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_12","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_24","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_13","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_25","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_14","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_26","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_15","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_27","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_16","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_28","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_17","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_29","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_18","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_30","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_19","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_31","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: ISize val)\n: (ISize val , ISize val) ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_20","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_32","title":"Returns","text":"<ul> <li>(ISize val , ISize val) ?</li> </ul>"},{"location":"builtin-ISize/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_21","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_33","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_22","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_34","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_23","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_35","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_24","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_36","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_25","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_37","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_26","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_38","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ISize/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ISize/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_27","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_40","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_28","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_41","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_29","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_42","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_30","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_43","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_31","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_44","title":"Returns","text":"<ul> <li>(ISize val , ISize val)</li> </ul>"},{"location":"builtin-ISize/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_32","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_45","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_46","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_33","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_47","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_34","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_48","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_35","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_49","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_50","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_36","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_51","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_37","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_52","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_38","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_53","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_39","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_54","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: ISize val)\n: (ISize val , ISize val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_40","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_55","title":"Returns","text":"<ul> <li>(ISize val , ISize val)</li> </ul>"},{"location":"builtin-ISize/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_41","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_56","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_57","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_42","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_43","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_44","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_45","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_46","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_47","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ISize/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ISize/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ISize/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ISize/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ISize/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ISize/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ISize/#isize_1","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ISize/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ISize/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ISize/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ISize/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ISize/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ISize/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ISize/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ISize/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ISize/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ISize/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ISize/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ISize/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ISize/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ISize/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ISize/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ISize/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ISize/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ISize/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ISize/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ISize/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ISize/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ISize/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ISize/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_48","title":"Parameters","text":"<ul> <li>that: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-InputNotify/","title":"InputNotify","text":"<p>[Source]</p> <p>Notification for data arriving via an input stream.</p> <pre><code>interface ref InputNotify\n</code></pre>"},{"location":"builtin-InputNotify/#public-functions","title":"Public Functions","text":""},{"location":"builtin-InputNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Called when data is available on the stream.</p> <pre><code>fun ref apply(\n  data: Array[U8 val] iso)\n: None val\n</code></pre>"},{"location":"builtin-InputNotify/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"builtin-InputNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-InputNotify/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Called when no more data will arrive on the stream.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"builtin-InputNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-InputStream/","title":"InputStream","text":"<p>[Source]</p> <p>Asynchronous access to some input stream.</p> <pre><code>interface tag InputStream\n</code></pre>"},{"location":"builtin-InputStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-InputStream/#apply","title":"apply","text":"<p>[Source]</p> <p>Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier.</p> <pre><code>be apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = 32)\n</code></pre>"},{"location":"builtin-InputStream/#parameters","title":"Parameters","text":"<ul> <li>notify: (InputNotify iso | None val)</li> <li>chunk_size: USize val = 32</li> </ul>"},{"location":"builtin-InputStream/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Clear the notifier in order to shut down input.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-Int/","title":"Int","text":"<p>[Source] <pre><code>type Int is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n</code></pre></p>"},{"location":"builtin-Int/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)</li> </ul>"},{"location":"builtin-Integer/","title":"Integer[A: Integer[A] val]","text":"<p>[Source] <pre><code>trait val Integer[A: Integer[A] val] is\n  Real[A] val\n</code></pre></p>"},{"location":"builtin-Integer/#implements","title":"Implements","text":"<ul> <li>Real[A] val</li> </ul>"},{"location":"builtin-Integer/#constructors","title":"Constructors","text":""},{"location":"builtin-Integer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Integer/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-Integer/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Integer/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box add_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box sub_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Integer division, rounded towards zero.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Calculates the quotient of this number and <code>y</code> and the remainder.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Integer/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_8","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Integer/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Calculates the remainder of this number divided by <code>y</code>.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_9","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <p>Floored division, rounded towards negative infinity, as opposed to <code>div</code> which rounds towards zero.</p> <p>Unsafe Operation</p> <p>If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box fld_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <p>Calculates the modulo of this number after floored division by <code>y</code>.</p> <p>Unsafe Operation.</p> <p>If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box mod_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#add_partial","title":"add_partial","text":"<p>[Source]</p> <p>Add y to this number.</p> <p>If the operation overflows this function errors.</p> <pre><code>fun box add_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_12","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <p>Subtract y from this number.</p> <p>If the operation overflows/underflows this function errors.</p> <pre><code>fun box sub_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_13","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <p>Multiply y with this number.</p> <p>If the operation overflows this function errors.</p> <pre><code>fun box mul_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_14","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#div_partial","title":"div_partial","text":"<p>[Source]</p> <p>Divides this number by <code>y</code>, rounds the result towards zero.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box div_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_15","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <p>Calculates the remainder of this number divided by y. The result has the sign of the dividend.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box rem_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_16","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <p>Divides this number by y and calculates the remainder of the operation.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box divrem_partial(\n  y: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_17","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-Integer/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <p>Floored integer division, rounded towards negative infinity.</p> <p>If y is <code>0</code> or the operation overflows, this function errors</p> <pre><code>fun box fld_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_18","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <p>Calculates the modulo of this number and <code>y</code> after floored division (<code>fld</code>). The result has the sign of the divisor.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box mod_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_19","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#addc","title":"addc","text":"<p>[Source]</p> <p>Add <code>y</code> to this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box addc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_21","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#subc","title":"subc","text":"<p>[Source]</p> <p>Subtract <code>y</code> from this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box subc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_22","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#mulc","title":"mulc","text":"<p>[Source]</p> <p>Multiply <code>y</code> with this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box mulc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_23","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#divc","title":"divc","text":"<p>[Source]</p> <p>Divide this integer by <code>y</code> and return the result and a flag indicating overflow or division by zero.</p> <pre><code>fun box divc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_24","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#remc","title":"remc","text":"<p>[Source]</p> <p>Calculate the remainder of this number divided by <code>y</code> and return the result and a flag indicating division by zero or overflow.</p> <p>The result will have the sign of the dividend.</p> <pre><code>fun box remc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_25","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#fldc","title":"fldc","text":"<p>[Source]</p> <p>Divide this integer by <code>y</code> and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero.</p> <pre><code>fun box fldc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_26","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#modc","title":"modc","text":"<p>[Source]</p> <p>Calculate the modulo of this number after floored division by <code>y</code> and return the result and a flag indicating division by zero or overflow.</p> <p>The result will have the sign of the divisor.</p> <pre><code>fun box modc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_27","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_31","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <p>Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183).</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_33","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_34","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_35","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_36","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_37","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Integer/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_38","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Integer/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_40","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_36","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_43","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_37","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_44","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_38","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_45","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_39","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_46","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_40","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_47","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_41","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_48","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_42","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_43","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_51","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_52","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Integer/#returns_53","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Integer/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_54","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Integer/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_55","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Integer/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_56","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Integer/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_57","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Integer/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_58","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Integer/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-Integer/#returns_59","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Integer/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-Integer/#returns_60","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Integer/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_61","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Integer/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_62","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Integer/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_63","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Integer/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_64","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_65","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Integer/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-Integer/#returns_66","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Integer/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_68","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Integer/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_69","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Integer/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_70","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Integer/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_71","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Integer/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_72","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Integer/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_73","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Integer/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_74","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Integer/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-Integer/#returns_75","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Integer/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-Integer/#returns_76","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Integer/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_77","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Integer/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_78","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Integer/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_79","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Integer/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_80","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_81","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Integer/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-Integer/#returns_82","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Integer/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_83","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_84","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Integer/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_85","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Integer/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_44","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_86","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Iterator/","title":"Iterator[A: A]","text":"<p>[Source]</p> <p>Iterators generate a series of values, one value at a time on each call to <code>next()</code>.</p> <p>An Iterator is considered exhausted, once its <code>has_next()</code> method returns <code>false</code>. Thus every call to <code>next()</code> should be preceeded with a call to <code>has_next()</code> to check for exhaustiveness.</p>"},{"location":"builtin-Iterator/#usage","title":"Usage","text":"<p>Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this:</p> <pre><code>while iterator.has_next() do\n  let elem = iterator.next()?\n  // do something with elem\nend\n</code></pre> <p>The <code>For</code>-loop provides a more concise way of iteration:</p> <pre><code>for elem in iterator do\n  // do something with elem\nend\n</code></pre> <p>Iteration using <code>While</code> is more flexible as it allows to continue iterating if a call to <code>next()</code> errors. The <code>For</code>-loop does not allow this.</p>"},{"location":"builtin-Iterator/#implementing-iterators","title":"Implementing Iterators","text":"<p>Iterator implementations need to adhere to the following rules to be considered well-behaved:</p> <ul> <li>If the Iterator is exhausted, <code>has_next()</code> needs to return <code>false</code>.</li> <li>Once <code>has_next()</code> returned <code>false</code> it is not allowed to switch back to <code>true</code>   (Unless the Iterator supports rewinding)</li> <li><code>has_next()</code> does not change its returned value if <code>next()</code> has not been called.   That means, that between two calls to <code>next()</code> any number of calls to <code>has_next()</code>   need to return the same value. (Unless the Iterator supports rewinding)</li> <li>A call to <code>next()</code> erroring does not necessarily denote exhaustiveness.</li> </ul>"},{"location":"builtin-Iterator/#example","title":"Example","text":"<pre><code>// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\n  var _cur: USize\n  var _has_next: Bool = true\n\n  new ref create(from: USize) =&gt;\n    _cur = from\n\n  fun ref has_next(): Bool =&gt;\n    _has_next\n\n  fun ref next(): USize =&gt;\n    let elem = _cur = _cur - 1\n    if elem == 0 then\n      _has_next = false\n    end\n    elem\n</code></pre> <pre><code>interface ref Iterator[A: A]\n</code></pre>"},{"location":"builtin-Iterator/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Iterator/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Returns <code>true</code> if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to <code>next()</code> is a valid part of this iterator.</p> <p>Returns <code>false</code> if this Iterator is exhausted.</p> <p>The behavior of <code>next()</code> after this function returned <code>false</code> is undefined, it might throw an error or return values which are not part of this Iterator.</p> <pre><code>fun ref has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-Iterator/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Iterator/#next","title":"next","text":"<p>[Source]</p> <p>Generate the next value.</p> <p>This might error, which does not necessarily mean that the Iterator is exhausted.</p> <pre><code>fun ref next()\n: A ?\n</code></pre>"},{"location":"builtin-Iterator/#returns_1","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Less/","title":"Less","text":"<p>[Source] <pre><code>primitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Less/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Less/#constructors","title":"Constructors","text":""},{"location":"builtin-Less/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Less val^\n</code></pre>"},{"location":"builtin-Less/#returns","title":"Returns","text":"<ul> <li>Less val^</li> </ul>"},{"location":"builtin-Less/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Less/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Less/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Less/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Less/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Less/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Less/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Less/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Less/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-None/","title":"None","text":"<p>[Source] <pre><code>primitive val None is\n  Stringable box\n</code></pre></p>"},{"location":"builtin-None/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> </ul>"},{"location":"builtin-None/#constructors","title":"Constructors","text":""},{"location":"builtin-None/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: None val^\n</code></pre>"},{"location":"builtin-None/#returns","title":"Returns","text":"<ul> <li>None val^</li> </ul>"},{"location":"builtin-None/#public-functions","title":"Public Functions","text":""},{"location":"builtin-None/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-None/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-None/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: None val)\n: Bool val\n</code></pre>"},{"location":"builtin-None/#parameters","title":"Parameters","text":"<ul> <li>that: None val</li> </ul>"},{"location":"builtin-None/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-None/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: None val)\n: Bool val\n</code></pre>"},{"location":"builtin-None/#parameters_1","title":"Parameters","text":"<ul> <li>that: None val</li> </ul>"},{"location":"builtin-None/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-NullablePointer/","title":"NullablePointer[A: A]","text":"<p>[Source]</p> <p>A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI.</p> <p>An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None).</p> <pre><code>struct ref NullablePointer[A: A]\n</code></pre>"},{"location":"builtin-NullablePointer/#constructors","title":"Constructors","text":""},{"location":"builtin-NullablePointer/#create","title":"create","text":"<p>[Source]</p> <p>This re-encodes the type of <code>that</code> from A to NullablePointer[A], allowing <code>that</code> to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for <code>that</code>.</p> <pre><code>new ref create(\n  that: A)\n: NullablePointer[A] ref^\n</code></pre>"},{"location":"builtin-NullablePointer/#parameters","title":"Parameters","text":"<ul> <li>that: A</li> </ul>"},{"location":"builtin-NullablePointer/#returns","title":"Returns","text":"<ul> <li>NullablePointer[A] ref^</li> </ul>"},{"location":"builtin-NullablePointer/#none","title":"none","text":"<p>[Source]</p> <p>This returns a null pointer typed as a NullablePointer[A].</p> <pre><code>new ref none()\n: NullablePointer[A] ref^\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_1","title":"Returns","text":"<ul> <li>NullablePointer[A] ref^</li> </ul>"},{"location":"builtin-NullablePointer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-NullablePointer/#apply","title":"apply","text":"<p>[Source]</p> <p>This re-encodes the type of <code>this</code> from NullablePointer[A] to A, allowing <code>this</code> to be assigned to a field of variable of type A. If <code>this</code> is a null pointer, an error is raised.</p> <pre><code>fun box apply()\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_2","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-NullablePointer/#is_none","title":"is_none","text":"<p>[Source]</p> <p>Returns true if <code>this</code> is null (ie apply would raise an error).</p> <pre><code>fun box is_none()\n: Bool val\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Number/","title":"Number","text":"<p>[Source] <pre><code>type Number is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)\n</code></pre></p>"},{"location":"builtin-Number/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)</li> </ul>"},{"location":"builtin-OutStream/","title":"OutStream","text":"<p>[Source]</p> <p>Asnychronous access to some output stream.</p> <pre><code>interface tag OutStream\n</code></pre>"},{"location":"builtin-OutStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-OutStream/#print","title":"print","text":"<p>[Source]</p> <p>Print some bytes and insert a newline afterwards.</p> <pre><code>be print(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-OutStream/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-OutStream/#write","title":"write","text":"<p>[Source]</p> <p>Print some bytes without inserting a newline afterwards.</p> <pre><code>be write(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-OutStream/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-OutStream/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>be printv(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-OutStream/#parameters_2","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-OutStream/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>be writev(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-OutStream/#parameters_3","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-OutStream/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush the stream.</p> <pre><code>be flush()\n</code></pre>"},{"location":"builtin-Platform/","title":"Platform","text":"<p>[Source] <pre><code>primitive val Platform\n</code></pre></p>"},{"location":"builtin-Platform/#constructors","title":"Constructors","text":""},{"location":"builtin-Platform/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Platform val^\n</code></pre>"},{"location":"builtin-Platform/#returns","title":"Returns","text":"<ul> <li>Platform val^</li> </ul>"},{"location":"builtin-Platform/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Platform/#bsd","title":"bsd","text":"<p>[Source]</p> <pre><code>fun box bsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#freebsd","title":"freebsd","text":"<p>[Source]</p> <pre><code>fun box freebsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#dragonfly","title":"dragonfly","text":"<p>[Source]</p> <pre><code>fun box dragonfly()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#openbsd","title":"openbsd","text":"<p>[Source]</p> <pre><code>fun box openbsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#linux","title":"linux","text":"<p>[Source]</p> <pre><code>fun box linux()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#osx","title":"osx","text":"<p>[Source]</p> <pre><code>fun box osx()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#posix","title":"posix","text":"<p>[Source]</p> <pre><code>fun box posix()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#windows","title":"windows","text":"<p>[Source]</p> <pre><code>fun box windows()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#x86","title":"x86","text":"<p>[Source]</p> <pre><code>fun box x86()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#arm","title":"arm","text":"<p>[Source]</p> <pre><code>fun box arm()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#riscv","title":"riscv","text":"<p>[Source]</p> <pre><code>fun box riscv()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#lp64","title":"lp64","text":"<p>[Source]</p> <pre><code>fun box lp64()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#llp64","title":"llp64","text":"<p>[Source]</p> <pre><code>fun box llp64()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#ilp32","title":"ilp32","text":"<p>[Source]</p> <pre><code>fun box ilp32()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#bigendian","title":"bigendian","text":"<p>[Source]</p> <pre><code>fun box bigendian()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#littleendian","title":"littleendian","text":"<p>[Source]</p> <pre><code>fun box littleendian()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#native128","title":"native128","text":"<p>[Source]</p> <pre><code>fun box native128()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#debug","title":"debug","text":"<p>[Source]</p> <pre><code>fun box debug()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#runtimestats","title":"runtimestats","text":"<p>[Source]</p> <pre><code>fun box runtimestats()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#runtimestatsmessages","title":"runtimestatsmessages","text":"<p>[Source]</p> <pre><code>fun box runtimestatsmessages()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Platform val)\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#parameters","title":"Parameters","text":"<ul> <li>that: Platform val</li> </ul>"},{"location":"builtin-Platform/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Platform val)\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#parameters_1","title":"Parameters","text":"<ul> <li>that: Platform val</li> </ul>"},{"location":"builtin-Platform/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/","title":"Pointer[A: A]","text":"<p>[Source]</p> <p>A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety.</p> <pre><code>struct ref Pointer[A: A]\n</code></pre>"},{"location":"builtin-Pointer/#constructors","title":"Constructors","text":""},{"location":"builtin-Pointer/#create","title":"create","text":"<p>[Source]</p> <p>A null pointer.</p> <pre><code>new ref create()\n: Pointer[A] ref^\n</code></pre>"},{"location":"builtin-Pointer/#returns","title":"Returns","text":"<ul> <li>Pointer[A] ref^</li> </ul>"},{"location":"builtin-Pointer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Pointer/#offset","title":"offset","text":"<p>[Source]</p> <p>Return a tag pointer to the n-th element.</p> <pre><code>fun tag offset(\n  n: USize val)\n: Pointer[A] tag\n</code></pre>"},{"location":"builtin-Pointer/#parameters","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_1","title":"Returns","text":"<ul> <li>Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#usize","title":"usize","text":"<p>[Source]</p> <p>Convert the pointer into an integer.</p> <pre><code>fun tag usize()\n: USize val\n</code></pre>"},{"location":"builtin-Pointer/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Pointer/#is_null","title":"is_null","text":"<p>[Source]</p> <p>Return true for a null pointer, false for anything else.</p> <pre><code>fun tag is_null()\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#eq","title":"eq","text":"<p>[Source]</p> <p>Return true if this address is that address.</p> <pre><code>fun tag eq(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_1","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#lt","title":"lt","text":"<p>[Source]</p> <p>Return true if this address is less than that address.</p> <pre><code>fun tag lt(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_2","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun tag ne(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_3","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun tag le(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_4","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun tag ge(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_5","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun tag gt(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_6","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#hash","title":"hash","text":"<p>[Source]</p> <p>Returns a hash of the address.</p> <pre><code>fun tag hash()\n: USize val\n</code></pre>"},{"location":"builtin-Pointer/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Pointer/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Returns a 64-bit hash of the address.</p> <pre><code>fun tag hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Pointer/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ReadElement/","title":"ReadElement[A: A]","text":"<p>[Source]</p> <p>Used to show that a ReadSeq can return an element of a specific unmodified type.</p> <pre><code>interface box ReadElement[A: A]\n</code></pre>"},{"location":"builtin-ReadElement/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ReadElement/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  i: USize val)\n: A ?\n</code></pre>"},{"location":"builtin-ReadElement/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-ReadElement/#returns","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-ReadSeq/","title":"ReadSeq[A: A]","text":"<p>[Source]</p> <p>The readable interface of a sequence.</p> <pre><code>interface box ReadSeq[A: A]\n</code></pre>"},{"location":"builtin-ReadSeq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ReadSeq/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of elements in the sequence.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-ReadSeq/#returns","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ReadSeq/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this-&gt;A, not A.</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-ReadSeq/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-ReadSeq/#returns_1","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-ReadSeq/#values","title":"values","text":"<p>[Source]</p> <p>Returns an iterator over the elements of the sequence. Note that this iterates over this-&gt;A, not A.</p> <pre><code>fun box values()\n: Iterator[this-&gt;A] ref^\n</code></pre>"},{"location":"builtin-ReadSeq/#returns_2","title":"Returns","text":"<ul> <li>Iterator[this-&gt;A] ref^</li> </ul>"},{"location":"builtin-Real/","title":"Real[A: Real[A] val]","text":"<p>[Source] <pre><code>trait val Real[A: Real[A] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A] ref\n</code></pre></p>"},{"location":"builtin-Real/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> <li>_ArithmeticConvertible val</li> <li>Comparable[A] ref</li> </ul>"},{"location":"builtin-Real/#constructors","title":"Constructors","text":""},{"location":"builtin-Real/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Real/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-Real/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Real/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#div","title":"div","text":"<p>[Source]</p> <p>Integer division, rounded towards zero.</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Real/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_8","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Real/#rem","title":"rem","text":"<p>[Source]</p> <p>Calculate the remainder after integer division, rounded towards zero (<code>div</code>).</p> <p>The result has the sign of the dividend.</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_9","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-Real/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#fld","title":"fld","text":"<p>[Source]</p> <p>Floored integer division, rounded towards negative infinity.</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#mod","title":"mod","text":"<p>[Source]</p> <p>Calculate the modulo after floored integer division, rounded towards negative infinity (<code>fld</code>).</p> <p>The result has the sign of the divisor.</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_12","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_10","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_11","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_12","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_13","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_14","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_15","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_21","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_22","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Real/#returns_23","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Real/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-Real/#returns_24","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Real/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-Real/#returns_25","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Real/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-Real/#returns_26","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Real/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-Real/#returns_27","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Real/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-Real/#returns_28","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Real/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-Real/#returns_29","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Real/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-Real/#returns_30","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Real/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-Real/#returns_31","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Real/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-Real/#returns_32","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Real/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-Real/#returns_33","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Real/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_34","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-Real/#returns_35","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Real/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-Real/#returns_36","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Real/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_37","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-Real/#returns_38","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Real/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-Real/#returns_39","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Real/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-Real/#returns_40","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Real/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-Real/#returns_41","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Real/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-Real/#returns_42","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Real/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-Real/#returns_43","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Real/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-Real/#returns_44","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Real/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-Real/#returns_45","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Real/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-Real/#returns_46","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Real/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-Real/#returns_47","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Real/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-Real/#returns_48","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Real/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-Real/#returns_49","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Real/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_50","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-Real/#returns_51","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Real/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-Real/#returns_52","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Real/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_53","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-Real/#returns_54","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Real/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-Real/#returns_55","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Real/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Real/#parameters_18","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_56","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-RuntimeOptions/","title":"RuntimeOptions","text":"<p>[Source]</p> <p>Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program.</p> <p>The way this is done is by adding the following function to your <code>Main</code> actor:</p> <pre><code>  fun @runtime_override_defaults(rto: RuntimeOptions) =&gt;\n</code></pre> <p>and then overriding the fields of <code>rto</code> (the <code>RuntimeOptions</code> instance) as needed.</p> <p>NOTE: Command line arguments still any values set via       <code>@runtime_override_defaults</code>.</p> <p>The following example overrides the <code>--ponyhelp</code> argument to default it to <code>true</code> instead of <code>false</code> causing the compiled program to always display the Pony runtime help:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    env.out.print(\"Hello, world.\")\n\n  fun @runtime_override_defaults(rto: RuntimeOptions) =&gt;\n    rto.ponyhelp = true\n</code></pre> <pre><code>struct ref RuntimeOptions\n</code></pre>"},{"location":"builtin-RuntimeOptions/#constructors","title":"Constructors","text":""},{"location":"builtin-RuntimeOptions/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: RuntimeOptions iso^\n</code></pre>"},{"location":"builtin-RuntimeOptions/#returns","title":"Returns","text":"<ul> <li>RuntimeOptions iso^</li> </ul>"},{"location":"builtin-RuntimeOptions/#public-fields","title":"Public fields","text":""},{"location":"builtin-RuntimeOptions/#var-ponymaxthreads-u32-val","title":"var ponymaxthreads: U32 val","text":"<p>[Source]</p> <p>Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyminthreads-u32-val","title":"var ponyminthreads: U32 val","text":"<p>[Source]</p> <p>Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoscale-bool-val","title":"var ponynoscale: Bool val","text":"<p>[Source]</p> <p>Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads.</p>"},{"location":"builtin-RuntimeOptions/#var-ponysuspendthreshold-u32-val","title":"var ponysuspendthreshold: U32 val","text":"<p>[Source]</p> <p>Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms.</p>"},{"location":"builtin-RuntimeOptions/#var-ponycdinterval-u32-val","title":"var ponycdinterval: U32 val","text":"<p>[Source]</p> <p>Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms.</p>"},{"location":"builtin-RuntimeOptions/#var-ponygcinitial-usize-val","title":"var ponygcinitial: USize val","text":"<p>[Source]</p> <p>Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14.</p>"},{"location":"builtin-RuntimeOptions/#var-ponygcfactor-f64-val","title":"var ponygcfactor: F64 val","text":"<p>[Source]</p> <p>After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoyield-bool-val","title":"var ponynoyield: Bool val","text":"<p>[Source]</p> <p>Do not yield the CPU when no work is available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoblock-bool-val","title":"var ponynoblock: Bool val","text":"<p>[Source]</p> <p>Do not send block messages to the cycle detector.</p>"},{"location":"builtin-RuntimeOptions/#var-ponypin-bool-val","title":"var ponypin: Bool val","text":"<p>[Source]</p> <p>Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if <code>--ponypinasio</code> is set.</p>"},{"location":"builtin-RuntimeOptions/#var-ponypinasio-bool-val","title":"var ponypinasio: Bool val","text":"<p>[Source]</p> <p>Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires <code>--ponypin</code> to be set to have any effect.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyprintstatsinterval-u32-val","title":"var ponyprintstatsinterval: U32 val","text":"<p>[Source]</p> <p>Print actor stats before an actor is destroyed and print scheduler stats every X seconds. Defaults to -1 (never).</p>"},{"location":"builtin-RuntimeOptions/#var-ponyversion-bool-val","title":"var ponyversion: Bool val","text":"<p>[Source]</p> <p>Print the version of the compiler and exit.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyhelp-bool-val","title":"var ponyhelp: Bool val","text":"<p>[Source]</p> <p>Print the runtime usage options and exit.</p>"},{"location":"builtin-Seq/","title":"Seq[A: A]","text":"<p>[Source]</p> <p>A sequence of elements.</p> <pre><code>interface ref Seq[A: A]\n</code></pre>"},{"location":"builtin-Seq/#constructors","title":"Constructors","text":""},{"location":"builtin-Seq/#create","title":"create","text":"<p>[Source]</p> <p>Create a sequence, reserving space for len elements.</p> <pre><code>new ref create(\n  len: USize val = 0)\n: Seq[A] ref^\n</code></pre>"},{"location":"builtin-Seq/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-Seq/#returns","title":"Returns","text":"<ul> <li>Seq[A] ref^</li> </ul>"},{"location":"builtin-Seq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Seq/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len elements.</p> <pre><code>fun ref reserve(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_1","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of elements in the sequence.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-Seq/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Seq/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the sequence. Raises an error if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-Seq/#parameters_2","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-Seq/#update","title":"update","text":"<p>[Source]</p> <p>Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds.</p> <pre><code>fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#parameters_3","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_4","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#clear","title":"clear","text":"<p>[Source]</p> <p>Removes all elements from the sequence.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-Seq/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#push","title":"push","text":"<p>[Source]</p> <p>Adds an element to the end of the sequence.</p> <pre><code>fun ref push(\n  value: A)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_4","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#pop","title":"pop","text":"<p>[Source]</p> <p>Removes an element from the end of the sequence.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#returns_7","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds an element to the beginning of the sequence.</p> <pre><code>fun ref unshift(\n  value: A)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_5","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes an element from the beginning of the sequence.</p> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#returns_9","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#append","title":"append","text":"<p>[Source]</p> <p>Add len elements to the end of the list, starting from the given offset.</p> <pre><code>fun ref append(\n  seq: (ReadSeq[A] box &amp; ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_6","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Seq/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the end of the list, starting from the given offset.</p> <pre><code>fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_7","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Seq/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing.</p> <pre><code>fun ref truncate(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_8","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#values","title":"values","text":"<p>[Source]</p> <p>Returns an iterator over the elements of the sequence.</p> <pre><code>fun box values()\n: Iterator[this-&gt;A] ref^\n</code></pre>"},{"location":"builtin-Seq/#returns_13","title":"Returns","text":"<ul> <li>Iterator[this-&gt;A] ref^</li> </ul>"},{"location":"builtin-Signed/","title":"Signed","text":"<p>[Source] <pre><code>type Signed is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)\n</code></pre></p>"},{"location":"builtin-Signed/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)</li> </ul>"},{"location":"builtin-SignedInteger/","title":"SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val]","text":"<p>[Source] <pre><code>trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is\n  Integer[A] val\n</code></pre></p>"},{"location":"builtin-SignedInteger/#implements","title":"Implements","text":"<ul> <li>Integer[A] val</li> </ul>"},{"location":"builtin-SignedInteger/#constructors","title":"Constructors","text":""},{"location":"builtin-SignedInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#public-functions","title":"Public Functions","text":""},{"location":"builtin-SignedInteger/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_4","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_2","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_3","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined.</p> <pre><code>fun box shl_unsafe(\n  y: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_4","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shr_unsafe(\n  y: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_5","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_8","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_9","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_10","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_11","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_12","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_13","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_14","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_16","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-SignedInteger/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_18","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_21","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-SignedInteger/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_22","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_23","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_24","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_25","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_26","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_27","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_28","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_29","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_30","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-SignedInteger/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_31","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_32","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_33","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_34","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_35","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_36","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_37","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_38","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_39","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_40","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_43","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_44","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_51","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-SignedInteger/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_37","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_38","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_39","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_55","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_40","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_56","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_41","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_57","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_42","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_43","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_44","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_45","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_46","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_62","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_47","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_63","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-SignedInteger/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-SignedInteger/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-SignedInteger/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-SignedInteger/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-SignedInteger/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-SignedInteger/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-SignedInteger/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-SignedInteger/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-SignedInteger/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-SignedInteger/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-SignedInteger/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-SignedInteger/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-SignedInteger/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-SignedInteger/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-SignedInteger/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-SignedInteger/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-SignedInteger/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-SignedInteger/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-SignedInteger/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-SignedInteger/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-SignedInteger/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_48","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-SourceLoc/","title":"SourceLoc","text":"<p>[Source]</p> <p>Represents a location in a Pony source file, as reported by <code>__loc</code>.</p> <pre><code>interface val SourceLoc\n</code></pre>"},{"location":"builtin-SourceLoc/#public-functions","title":"Public Functions","text":""},{"location":"builtin-SourceLoc/#file","title":"file","text":"<p>[Source]</p> <p>Name and path of source file.</p> <pre><code>fun box file()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#type_name","title":"type_name","text":"<p>[Source]</p> <p>Name of nearest class, actor, primitive, struct, interface, or trait.</p> <pre><code>fun box type_name()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#method_name","title":"method_name","text":"<p>[Source]</p> <p>Name of containing method.</p> <pre><code>fun box method_name()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#line","title":"line","text":"<p>[Source]</p> <p>Line number within file. Line numbers start at 1.</p> <pre><code>fun box line()\n: USize val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SourceLoc/#pos","title":"pos","text":"<p>[Source]</p> <p>Character position on line. Character positions start at 1.</p> <pre><code>fun box pos()\n: USize val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-StdStream/","title":"StdStream","text":"<p>[Source]</p> <p>Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment.</p> <pre><code>actor tag StdStream\n</code></pre>"},{"location":"builtin-StdStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-StdStream/#print","title":"print","text":"<p>[Source]</p> <p>Print some bytes and insert a newline afterwards.</p> <pre><code>be print(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-StdStream/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-StdStream/#write","title":"write","text":"<p>[Source]</p> <p>Print some bytes without inserting a newline afterwards.</p> <pre><code>be write(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-StdStream/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-StdStream/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>be printv(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-StdStream/#parameters_2","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-StdStream/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>be writev(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-StdStream/#parameters_3","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-StdStream/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush any data out to the os (ignoring failures).</p> <pre><code>be flush()\n</code></pre>"},{"location":"builtin-Stdin/","title":"Stdin","text":"<p>[Source]</p> <p>Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment.</p> <p>Reading from stdin is done by registering an <code>InputNotify</code>:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    // do not forget to call `env.input.dispose` at some point\n    env.input(\n      object iso is InputNotify\n        fun ref apply(data: Array[U8] iso) =&gt;\n          env.out.write(String.from_iso_array(consume data))\n\n        fun ref dispose() =&gt;\n          env.out.print(\"Done.\")\n      end,\n      512)\n</code></pre> <p>Note: For reading user input from a terminal, use the term package.</p> <pre><code>actor tag Stdin is\n  AsioEventNotify tag\n</code></pre>"},{"location":"builtin-Stdin/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"builtin-Stdin/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-Stdin/#apply","title":"apply","text":"<p>[Source]</p> <p>Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier.</p> <pre><code>be apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = 32)\n</code></pre>"},{"location":"builtin-Stdin/#parameters","title":"Parameters","text":"<ul> <li>notify: (InputNotify iso | None val)</li> <li>chunk_size: USize val = 32</li> </ul>"},{"location":"builtin-Stdin/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Clear the notifier in order to shut down input.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-String/","title":"String","text":"<p>[Source]</p> <p>A String is an ordered collection of bytes.</p> <p>Strings don't specify an encoding.</p> <p>Example usage of some common String methods:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\") ?\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\") ?\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end\n</code></pre> <pre><code>class val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box\n</code></pre>"},{"location":"builtin-String/#implements","title":"Implements","text":"<ul> <li>Seq[U8 val] ref</li> <li>Comparable[String box] ref</li> <li>Stringable box</li> </ul>"},{"location":"builtin-String/#constructors","title":"Constructors","text":""},{"location":"builtin-String/#create","title":"create","text":"<p>[Source]</p> <p>An empty string. Enough space for len bytes is reserved.</p> <pre><code>new ref create(\n  len: USize val = 0)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_array","title":"from_array","text":"<p>[Source]</p> <p>Create a string from an array, reusing the underlying data pointer.</p> <pre><code>new val from_array(\n  data: Array[U8 val] val)\n: String val^\n</code></pre>"},{"location":"builtin-String/#parameters_1","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"builtin-String/#returns_1","title":"Returns","text":"<ul> <li>String val^</li> </ul>"},{"location":"builtin-String/#from_iso_array","title":"from_iso_array","text":"<p>[Source]</p> <p>Create a string from an array, reusing the underlying data pointer</p> <pre><code>new iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_2","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"builtin-String/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#from_cpointer","title":"from_cpointer","text":"<p>[Source]</p> <p>Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = 0)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_3","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] ref</li> <li>len: USize val</li> <li>alloc: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_3","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_cstring","title":"from_cstring","text":"<p>[Source]</p> <p>Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_4","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] ref</li> </ul>"},{"location":"builtin-String/#returns_4","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#copy_cpointer","title":"copy_cpointer","text":"<p>[Source]</p> <p>Create a string by copying a fixed number of bytes from a pointer.</p> <pre><code>new ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_5","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] box</li> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_5","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#copy_cstring","title":"copy_cstring","text":"<p>[Source]</p> <p>Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_6","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] box</li> </ul>"},{"location":"builtin-String/#returns_6","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_utf32","title":"from_utf32","text":"<p>[Source]</p> <p>Create a UTF-8 string from a single UTF-32 code point.</p> <pre><code>new ref from_utf32(\n  value: U32 val)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_7","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-String/#returns_7","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#public-functions","title":"Public Functions","text":""},{"location":"builtin-String/#push_utf32","title":"push_utf32","text":"<p>[Source]</p> <p>Push a UTF-32 code point.</p> <pre><code>fun ref push_utf32(\n  value: U32 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_8","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-String/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#cpointer","title":"cpointer","text":"<p>[Source]</p> <p>Returns a C compatible pointer to the underlying string allocation.</p> <pre><code>fun box cpointer(\n  offset: USize val = 0)\n: Pointer[U8 val] tag\n</code></pre>"},{"location":"builtin-String/#parameters_9","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_9","title":"Returns","text":"<ul> <li>Pointer[U8 val] tag</li> </ul>"},{"location":"builtin-String/#cstring","title":"cstring","text":"<p>[Source]</p> <p>Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation.</p> <pre><code>fun box cstring()\n: Pointer[U8 val] tag\n</code></pre>"},{"location":"builtin-String/#returns_10","title":"Returns","text":"<ul> <li>Pointer[U8 val] tag</li> </ul>"},{"location":"builtin-String/#array","title":"array","text":"<p>[Source]</p> <p>Returns an Array[U8] that reuses the underlying data pointer.</p> <pre><code>fun val array()\n: Array[U8 val] val\n</code></pre>"},{"location":"builtin-String/#returns_11","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"builtin-String/#iso_array","title":"iso_array","text":"<p>[Source]</p> <p>Returns an Array[U8] iso that reuses the underlying data pointer.</p> <pre><code>fun iso iso_array()\n: Array[U8 val] iso^\n</code></pre>"},{"location":"builtin-String/#returns_12","title":"Returns","text":"<ul> <li>Array[U8 val] iso^</li> </ul>"},{"location":"builtin-String/#size","title":"size","text":"<p>[Source]</p> <p>Returns the length of the string data in bytes.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#codepoints","title":"codepoints","text":"<p>[Source]</p> <p>Returns the number of unicode code points in the string between the two offsets. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun box codepoints(\n  from: ISize val = 0,\n  to: ISize val = call)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_10","title":"Parameters","text":"<ul> <li>from: ISize val = 0</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#space","title":"space","text":"<p>[Source]</p> <p>Returns the space available for data, not including the null terminator.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len bytes. An additional byte will be reserved for the null terminator.</p> <pre><code>fun ref reserve(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_11","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#compact","title":"compact","text":"<p>[Source]</p> <p>Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#recalc","title":"recalc","text":"<p>[Source]</p> <p>Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed.</p> <pre><code>fun ref recalc()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string.</p> <p>Note that memory is not freed by this operation.</p> <pre><code>fun ref truncate(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_12","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#trim_in_place","title":"trim_in_place","text":"<p>[Source]</p> <p>Trim the string to a portion of itself, covering <code>from</code> until <code>to</code>. Unlike slice, the operation does not allocate a new string nor copy elements.</p> <pre><code>fun ref trim_in_place(\n  from: USize val = 0,\n  to: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_13","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#trim","title":"trim","text":"<p>[Source]</p> <p>Return a shared portion of this string, covering <code>from</code> until <code>to</code>. Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun val trim(\n  from: USize val = 0,\n  to: USize val = call)\n: String val\n</code></pre>"},{"location":"builtin-String/#parameters_14","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-String/#chop","title":"chop","text":"<p>[Source]</p> <p>Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun iso chop(\n  split_point: USize val)\n: (String iso^ , String iso^)\n</code></pre>"},{"location":"builtin-String/#parameters_15","title":"Parameters","text":"<ul> <li>split_point: USize val</li> </ul>"},{"location":"builtin-String/#returns_22","title":"Returns","text":"<ul> <li>(String iso^ , String iso^)</li> </ul>"},{"location":"builtin-String/#unchop","title":"unchop","text":"<p>[Source]</p> <p>Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun iso unchop(\n  b: String iso)\n: ((String iso^ , String iso^) | String iso^)\n</code></pre>"},{"location":"builtin-String/#parameters_16","title":"Parameters","text":"<ul> <li>b: String iso</li> </ul>"},{"location":"builtin-String/#returns_23","title":"Returns","text":"<ul> <li>((String iso^ , String iso^) | String iso^)</li> </ul>"},{"location":"builtin-String/#is_null_terminated","title":"is_null_terminated","text":"<p>[Source]</p> <p>Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method.</p> <pre><code>fun box is_null_terminated()\n: Bool val\n</code></pre>"},{"location":"builtin-String/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#utf32","title":"utf32","text":"<p>[Source]</p> <p>Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds.</p> <pre><code>fun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?\n</code></pre>"},{"location":"builtin-String/#parameters_17","title":"Parameters","text":"<ul> <li>offset: ISize val</li> </ul>"},{"location":"builtin-String/#returns_25","title":"Returns","text":"<ul> <li>(U32 val , U8 val) ?</li> </ul>"},{"location":"builtin-String/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th byte. Raise an error if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_18","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-String/#returns_26","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th byte. Raise an error if the index is out of bounds.</p> <pre><code>fun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_19","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_27","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#at_offset","title":"at_offset","text":"<p>[Source]</p> <p>Returns the byte at the given offset. Raise an error if the offset is out of bounds.</p> <pre><code>fun box at_offset(\n  offset: ISize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_20","title":"Parameters","text":"<ul> <li>offset: ISize val</li> </ul>"},{"location":"builtin-String/#returns_28","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#update_offset","title":"update_offset","text":"<p>[Source]</p> <p>Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds.</p> <pre><code>fun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_21","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_29","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#clone","title":"clone","text":"<p>[Source]</p> <p>Returns a copy of the string. The resulting string is null-terminated even if the original is not.</p> <pre><code>fun box clone()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_30","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#repeat_str","title":"repeat_str","text":"<p>[Source]</p> <p>Returns a copy of the string repeated <code>num</code> times with an optional separator added inbetween repeats.</p> <pre><code>fun box repeat_str(\n  num: USize val = 1,\n  sep: String val = \"\")\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_22","title":"Parameters","text":"<ul> <li>num: USize val = 1</li> <li>sep: String val = \"\"</li> </ul>"},{"location":"builtin-String/#returns_31","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#mul","title":"mul","text":"<p>[Source]</p> <p>Returns a copy of the string repeated <code>num</code> times.</p> <pre><code>fun box mul(\n  num: USize val)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_23","title":"Parameters","text":"<ul> <li>num: USize val</li> </ul>"},{"location":"builtin-String/#returns_32","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#find","title":"find","text":"<p>[Source]</p> <p>Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty.</p> <pre><code>fun box find(\n  s: String box,\n  offset: ISize val = 0,\n  nth: USize val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_24","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_33","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#rfind","title":"rfind","text":"<p>[Source]</p> <p>Return the index of n-th instance of <code>s</code> in the string starting from the end. The <code>offset</code> represents the highest index to included in the search. Raise an error if there is no n-th occurrence of <code>s</code> or <code>s</code> is empty.</p> <pre><code>fun box rfind(\n  s: String box,\n  offset: ISize val = call,\n  nth: USize val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_25","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = call</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_34","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#contains","title":"contains","text":"<p>[Source]</p> <p>Returns true if contains s as a substring, false otherwise.</p> <pre><code>fun box contains(\n  s: String box,\n  offset: ISize val = 0,\n  nth: USize val = 0)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_26","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#count","title":"count","text":"<p>[Source]</p> <p>Counts the non-overlapping occurrences of s in the string.</p> <pre><code>fun box count(\n  s: String box,\n  offset: ISize val = 0)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_27","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_36","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#at","title":"at","text":"<p>[Source]</p> <p>Returns true if the substring s is present at the given offset.</p> <pre><code>fun box at(\n  s: String box,\n  offset: ISize val = 0)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_28","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_37","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#delete","title":"delete","text":"<p>[Source]</p> <p>Delete len bytes at the supplied offset, compacting the string in place.</p> <pre><code>fun ref delete(\n  offset: ISize val,\n  len: USize val = 1)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_29","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>len: USize val = 1</li> </ul>"},{"location":"builtin-String/#returns_38","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#substring","title":"substring","text":"<p>[Source]</p> <p>Returns a substring. Index range [<code>from</code> .. <code>to</code>) is half-open. Returns an empty string if nothing is in the range.</p> <p>Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see <code>trim</code> and <code>trim_in_place</code>.</p> <pre><code>fun box substring(\n  from: ISize val,\n  to: ISize val = call)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_30","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#lower","title":"lower","text":"<p>[Source]</p> <p>Returns a lower case version of the string.</p> <pre><code>fun box lower()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#lower_in_place","title":"lower_in_place","text":"<p>[Source]</p> <p>Transforms the string to lower case. Currently only knows ASCII case.</p> <pre><code>fun ref lower_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_41","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#upper","title":"upper","text":"<p>[Source]</p> <p>Returns an upper case version of the string. Currently only knows ASCII case.</p> <pre><code>fun box upper()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#upper_in_place","title":"upper_in_place","text":"<p>[Source]</p> <p>Transforms the string to upper case.</p> <pre><code>fun ref upper_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_43","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Returns a reversed version of the string.</p> <pre><code>fun box reverse()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_44","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#reverse_in_place","title":"reverse_in_place","text":"<p>[Source]</p> <p>Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly.</p> <pre><code>fun ref reverse_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_45","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#push","title":"push","text":"<p>[Source]</p> <p>Add a byte to the end of the string.</p> <pre><code>fun ref push(\n  value: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_31","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_46","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove a byte from the end of the string.</p> <pre><code>fun ref pop()\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#returns_47","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds a byte to the beginning of the string.</p> <pre><code>fun ref unshift(\n  value: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_32","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_48","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes a byte from the beginning of the string.</p> <pre><code>fun ref shift()\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#returns_49","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#append","title":"append","text":"<p>[Source]</p> <p>Append the elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_33","title":"Parameters","text":"<ul> <li>seq: ReadSeq[U8 val] box</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_50","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated bytes to the end of the string, starting from the given offset.</p> <pre><code>fun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_34","title":"Parameters","text":"<ul> <li>iter: Iterator[U8 val] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_51","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#clear","title":"clear","text":"<p>[Source]</p> <p>Truncate the string to zero length.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_52","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#insert","title":"insert","text":"<p>[Source]</p> <p>Returns a version of the string with the given string inserted at the given offset.</p> <pre><code>fun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_35","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>that: String val</li> </ul>"},{"location":"builtin-String/#returns_53","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#insert_in_place","title":"insert_in_place","text":"<p>[Source]</p> <p>Inserts the given string at the given offset. Appends the string if the offset is out of bounds.</p> <pre><code>fun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_36","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_54","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#insert_byte","title":"insert_byte","text":"<p>[Source]</p> <p>Inserts a byte at the given offset. Appends if the offset is out of bounds.</p> <pre><code>fun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_37","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_55","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#cut","title":"cut","text":"<p>[Source]</p> <p>Returns a version of the string with the given range deleted. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun box cut(\n  from: ISize val,\n  to: ISize val = call)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_38","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_56","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#cut_in_place","title":"cut_in_place","text":"<p>[Source]</p> <p>Cuts the given range out of the string. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_39","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_57","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove all instances of s from the string. Returns the count of removed instances.</p> <pre><code>fun ref remove(\n  s: String box)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_40","title":"Parameters","text":"<ul> <li>s: String box</li> </ul>"},{"location":"builtin-String/#returns_58","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#replace","title":"replace","text":"<p>[Source]</p> <p>Replace up to n occurrences of <code>from</code> in <code>this</code> with <code>to</code>. If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences.</p> <pre><code>fun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = 0)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_41","title":"Parameters","text":"<ul> <li>from: String box</li> <li>to: String box</li> <li>n: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_59","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#split_by","title":"split_by","text":"<p>[Source]</p> <p>Split the string into an array of strings that are delimited by <code>delim</code> in the original string. If <code>n &gt; 0</code>, then the split count is limited to n.</p> <p>Example:</p> <pre><code>let original: String = \"&lt;b&gt;&lt;span&gt;Hello!&lt;/span&gt;&lt;/b&gt;\"\nlet delimiter: String = \"&gt;&lt;\"\nlet split_array: Array[String] = original.split_by(delimiter)\nenv.out.print(\"OUTPUT:\")\nfor value in split_array.values() do\n  env.out.print(value)\nend\n\n// OUTPUT:\n// &lt;b\n// span&gt;Hello!&lt;/span\n// b&gt;\n</code></pre> <p>Adjacent delimiters result in a zero length entry in the array. For example, <code>\"1CutCut2\".split_by(\"Cut\") =&gt; [\"1\", \"\", \"2\"]</code>.</p> <p>An empty delimiter results in an array that contains a single element equal to the whole string.</p> <p>If you want to split the string with each individual character of <code>delim</code>, use <code>split</code>.</p> <pre><code>fun box split_by(\n  delim: String val,\n  n: USize val = call)\n: Array[String val] iso^\n</code></pre>"},{"location":"builtin-String/#parameters_42","title":"Parameters","text":"<ul> <li>delim: String val</li> <li>n: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_60","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"builtin-String/#split","title":"split","text":"<p>[Source]</p> <p>Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If <code>n &gt; 0</code>, then the split count is limited to n.</p> <p>Example:</p> <pre><code>let original: String = \"name,job;department\"\nlet delimiter: String = \".,;\"\nlet split_array: Array[String] = original.split(delimiter)\nenv.out.print(\"OUTPUT:\")\nfor value in split_array.values() do\n  env.out.print(value)\nend\n\n// OUTPUT:\n// name\n// job\n// department\n</code></pre> <p>Adjacent delimiters result in a zero length entry in the array. For example, <code>\"1,,2\".split(\",\") =&gt; [\"1\", \"\", \"2\"]</code>.</p> <p>If you want to split the string with the entire delimiter string <code>delim</code>, use <code>split_by</code>.</p> <pre><code>fun box split(\n  delim: String val = \"     \u000b\f\n\",\n  n: USize val = 0)\n: Array[String val] iso^\n</code></pre>"},{"location":"builtin-String/#parameters_43","title":"Parameters","text":"<ul> <li>delim: String val = \"  \u000b\f \"</li> <li>n: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_61","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"builtin-String/#strip","title":"strip","text":"<p>[Source]</p> <p>Remove all leading and trailing characters from the string that are in s.</p> <pre><code>fun ref strip(\n  s: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_44","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_62","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#rstrip","title":"rstrip","text":"<p>[Source]</p> <p>Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed.</p> <pre><code>fun ref rstrip(\n  s: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_45","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_63","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#lstrip","title":"lstrip","text":"<p>[Source]</p> <p>Remove all leading characters within the string that are in s. By default, leading whitespace is removed.</p> <pre><code>fun ref lstrip(\n  s: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_46","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_64","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#add","title":"add","text":"<p>[Source]</p> <p>Return a string that is a concatenation of this and that.</p> <pre><code>fun box add(\n  that: String box)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_47","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_65","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#join","title":"join","text":"<p>[Source]</p> <p>Return a string that is a concatenation of the strings in data, using this as a separator.</p> <pre><code>fun box join(\n  data: Iterator[Stringable box] ref)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_48","title":"Parameters","text":"<ul> <li>data: Iterator[Stringable box] ref</li> </ul>"},{"location":"builtin-String/#returns_66","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#compare","title":"compare","text":"<p>[Source]</p> <p>Lexically compare two strings.</p> <pre><code>fun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-String/#parameters_49","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_67","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-String/#compare_sub","title":"compare_sub","text":"<p>[Source]</p> <p>Lexically compare at most <code>n</code> bytes of the substring of <code>this</code> starting at <code>offset</code> with the substring of <code>that</code> starting at <code>that_offset</code>. The comparison is case sensitive unless <code>ignore_case</code> is <code>true</code>.</p> <p>If the substring of <code>this</code> is a proper prefix of the substring of <code>that</code>, then <code>this</code> is <code>Less</code> than <code>that</code>. Likewise, if <code>that</code> is a proper prefix of <code>this</code>, then <code>this</code> is <code>Greater</code> than <code>that</code>.</p> <p>Both <code>offset</code> and <code>that_offset</code> can be negative, in which case the offsets are computed from the end of the string.</p> <p>If <code>n + offset</code> is greater than the length of <code>this</code>, or <code>n + that_offset</code> is greater than the length of <code>that</code>, then the number of positions compared will be reduced to the length of the longest substring.</p> <p>Needs to be made UTF-8 safe.</p> <pre><code>fun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = 0,\n  that_offset: ISize val = 0,\n  ignore_case: Bool val = false)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-String/#parameters_50","title":"Parameters","text":"<ul> <li>that: String box</li> <li>n: USize val</li> <li>offset: ISize val = 0</li> <li>that_offset: ISize val = 0</li> <li>ignore_case: Bool val = false</li> </ul>"},{"location":"builtin-String/#returns_68","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-String/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if the two strings have the same contents.</p> <pre><code>fun box eq(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_51","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if this is lexically less than that. Needs to be made UTF-8 safe.</p> <pre><code>fun box lt(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_52","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_70","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe.</p> <pre><code>fun box le(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_53","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#offset_to_index","title":"offset_to_index","text":"<p>[Source]</p> <pre><code>fun box offset_to_index(\n  i: ISize val)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_54","title":"Parameters","text":"<ul> <li>i: ISize val</li> </ul>"},{"location":"builtin-String/#returns_72","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#bool","title":"bool","text":"<p>[Source]</p> <pre><code>fun box bool()\n: Bool val ?\n</code></pre>"},{"location":"builtin-String/#returns_73","title":"Returns","text":"<ul> <li>Bool val ?</li> </ul>"},{"location":"builtin-String/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8(\n  base: U8 val = 0)\n: I8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_55","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_74","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-String/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16(\n  base: U8 val = 0)\n: I16 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_56","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_75","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-String/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32(\n  base: U8 val = 0)\n: I32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_57","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_76","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-String/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64(\n  base: U8 val = 0)\n: I64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_58","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_77","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-String/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128(\n  base: U8 val = 0)\n: I128 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_59","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_78","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-String/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong(\n  base: U8 val = 0)\n: ILong val ?\n</code></pre>"},{"location":"builtin-String/#parameters_60","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_79","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-String/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize(\n  base: U8 val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_61","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_80","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8(\n  base: U8 val = 0)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_62","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_81","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16(\n  base: U8 val = 0)\n: U16 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_63","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_82","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-String/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32(\n  base: U8 val = 0)\n: U32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_64","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_83","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-String/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64(\n  base: U8 val = 0)\n: U64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_65","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_84","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-String/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128(\n  base: U8 val = 0)\n: U128 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_66","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_85","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-String/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong(\n  base: U8 val = 0)\n: ULong val ?\n</code></pre>"},{"location":"builtin-String/#parameters_67","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_86","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-String/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize(\n  base: U8 val = 0)\n: USize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_68","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_87","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-String/#read_inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","title":"read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]","text":"<p>[Source]</p> <p>Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored.</p> <pre><code>fun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) &amp; Integer[A] val)](\n  offset: ISize val = 0,\n  base: U8 val = 0)\n: (A , USize val) ?\n</code></pre>"},{"location":"builtin-String/#parameters_69","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_88","title":"Returns","text":"<ul> <li>(A , USize val) ?</li> </ul>"},{"location":"builtin-String/#f32","title":"f32","text":"<p>[Source]</p> <p>Convert this string starting at the given offset to a 32-bit floating point number (F32).</p> <p>This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion.</p> <p>Examples:</p> <pre><code>\"1.5\".f32()? == F32(1.5)\n\"1.19208e-07\".f32()? == F32(1.19208e-07)\n\"NaN\".f32()?.nan() == true\n</code></pre> <pre><code>fun box f32(\n  offset: ISize val = 0)\n: F32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_70","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_89","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"builtin-String/#f64","title":"f64","text":"<p>[Source]</p> <p>Convert this string starting at the given offset to a 64-bit floating point number (F64).</p> <p>This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion.</p> <p>Examples:</p> <pre><code>\"1.5\".f64()? == F64(1.5)\n\"1.19208e-07\".f64()? == F64(1.19208e-07)\n\"Inf\".f64()?.infinite() == true\n</code></pre> <pre><code>fun box f64(\n  offset: ISize val = 0)\n: F64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_71","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_90","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"builtin-String/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_91","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-String/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-String/#string_1","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_93","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the bytes in the string.</p> <pre><code>fun box values()\n: StringBytes ref^\n</code></pre>"},{"location":"builtin-String/#returns_94","title":"Returns","text":"<ul> <li>StringBytes ref^</li> </ul>"},{"location":"builtin-String/#runes","title":"runes","text":"<p>[Source]</p> <p>Return an iterator over the codepoints in the string.</p> <pre><code>fun box runes()\n: StringRunes ref^\n</code></pre>"},{"location":"builtin-String/#returns_95","title":"Returns","text":"<ul> <li>StringRunes ref^</li> </ul>"},{"location":"builtin-String/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_72","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_96","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_73","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_97","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_74","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_98","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-StringBytes/","title":"StringBytes","text":"<p>[Source] <pre><code>class ref StringBytes is\n  Iterator[U8 val] ref\n</code></pre></p>"},{"location":"builtin-StringBytes/#implements","title":"Implements","text":"<ul> <li>Iterator[U8 val] ref</li> </ul>"},{"location":"builtin-StringBytes/#constructors","title":"Constructors","text":""},{"location":"builtin-StringBytes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  string: String box)\n: StringBytes ref^\n</code></pre>"},{"location":"builtin-StringBytes/#parameters","title":"Parameters","text":"<ul> <li>string: String box</li> </ul>"},{"location":"builtin-StringBytes/#returns","title":"Returns","text":"<ul> <li>StringBytes ref^</li> </ul>"},{"location":"builtin-StringBytes/#public-functions","title":"Public Functions","text":""},{"location":"builtin-StringBytes/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-StringBytes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-StringBytes/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U8 val ?\n</code></pre>"},{"location":"builtin-StringBytes/#returns_2","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-StringRunes/","title":"StringRunes","text":"<p>[Source] <pre><code>class ref StringRunes is\n  Iterator[U32 val] ref\n</code></pre></p>"},{"location":"builtin-StringRunes/#implements","title":"Implements","text":"<ul> <li>Iterator[U32 val] ref</li> </ul>"},{"location":"builtin-StringRunes/#constructors","title":"Constructors","text":""},{"location":"builtin-StringRunes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  string: String box)\n: StringRunes ref^\n</code></pre>"},{"location":"builtin-StringRunes/#parameters","title":"Parameters","text":"<ul> <li>string: String box</li> </ul>"},{"location":"builtin-StringRunes/#returns","title":"Returns","text":"<ul> <li>StringRunes ref^</li> </ul>"},{"location":"builtin-StringRunes/#public-functions","title":"Public Functions","text":""},{"location":"builtin-StringRunes/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-StringRunes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-StringRunes/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U32 val ?\n</code></pre>"},{"location":"builtin-StringRunes/#returns_2","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Stringable/","title":"Stringable","text":"<p>[Source]</p> <p>Things that can be turned into a String.</p> <pre><code>interface box Stringable\n</code></pre>"},{"location":"builtin-Stringable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Stringable/#string","title":"string","text":"<p>[Source]</p> <p>Generate a string representation of this object.</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Stringable/#returns","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U128/","title":"U128","text":"<p>[Source] <pre><code>primitive val U128 is\n  UnsignedInteger[U128 val] val\n</code></pre></p>"},{"location":"builtin-U128/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U128 val] val</li> </ul>"},{"location":"builtin-U128/#constructors","title":"Constructors","text":""},{"location":"builtin-U128/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U128 val)\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#parameters","title":"Parameters","text":"<ul> <li>value: U128 val</li> </ul>"},{"location":"builtin-U128/#returns","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U128/#returns_1","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#returns_2","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#returns_3","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U128/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_4","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_5","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_6","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_9","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_10","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_11","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_12","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_13","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_2","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_15","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_3","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_16","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_18","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U128/#returns_19","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U128/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_4","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_20","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U128 val)\n: (U128 val , U128 val)\n</code></pre>"},{"location":"builtin-U128/#parameters_5","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_21","title":"Returns","text":"<ul> <li>(U128 val , U128 val)</li> </ul>"},{"location":"builtin-U128/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_6","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_22","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_7","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_23","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_8","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_24","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)\n</code></pre>"},{"location":"builtin-U128/#parameters_9","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_25","title":"Returns","text":"<ul> <li>(U128 val , U128 val)</li> </ul>"},{"location":"builtin-U128/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_10","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_26","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_11","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_27","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U128/#returns_28","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U128/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U128/#returns_29","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U128/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U128/#returns_30","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U128/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U128/#returns_31","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U128/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_12","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_32","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_13","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_33","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_14","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_34","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_15","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_35","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_16","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_36","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_17","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_37","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_18","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_38","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_19","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_39","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_20","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_40","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_21","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_41","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U128 val)\n: (U128 val , U128 val) ?\n</code></pre>"},{"location":"builtin-U128/#parameters_22","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_42","title":"Returns","text":"<ul> <li>(U128 val , U128 val) ?</li> </ul>"},{"location":"builtin-U128/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_23","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_43","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_24","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_44","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_25","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_45","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_26","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_46","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_27","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_47","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_28","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_48","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_29","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_49","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_30","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_50","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_31","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_51","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_32","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_52","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_33","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_53","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_34","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_54","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_35","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_55","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_36","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_56","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_37","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_57","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_38","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_58","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_59","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_39","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_60","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_40","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_61","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_41","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_62","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_42","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_64","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_43","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_65","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_66","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_44","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_45","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_68","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_46","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_47","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_70","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_48","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_49","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_72","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U128/#returns_73","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U128/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U128/#returns_74","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U128/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U128/#returns_75","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U128/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U128/#returns_76","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U128/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U128/#returns_77","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U128/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U128/#returns_78","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U128/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U128/#returns_79","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U128/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U128/#returns_80","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U128/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U128/#returns_81","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U128/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U128/#returns_82","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U128/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_83","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#u128_1","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_84","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U128/#returns_85","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U128/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_86","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U128/#returns_87","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U128/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U128/#returns_88","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U128/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U128/#returns_89","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U128/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U128/#returns_90","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U128/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U128/#returns_91","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U128/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U128/#returns_92","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U128/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U128/#returns_93","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U128/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U128/#returns_94","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U128/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U128/#returns_95","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U128/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U128/#returns_96","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U128/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_97","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_98","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U128/#returns_99","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U128/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_100","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U128/#parameters_50","title":"Parameters","text":"<ul> <li>that: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U16/","title":"U16","text":"<p>[Source] <pre><code>primitive val U16 is\n  UnsignedInteger[U16 val] val\n</code></pre></p>"},{"location":"builtin-U16/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U16 val] val</li> </ul>"},{"location":"builtin-U16/#constructors","title":"Constructors","text":""},{"location":"builtin-U16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U16 val)\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#parameters","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"builtin-U16/#returns","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U16/#returns_1","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#returns_2","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#returns_3","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U16/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_6","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_7","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_9","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_10","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_11","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_12","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_13","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_2","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_15","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_3","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_16","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_4","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_17","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_5","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_18","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_6","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_19","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_7","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_20","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_8","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_21","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_9","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_22","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_10","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_23","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_11","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_24","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_12","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_25","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_13","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_26","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U16 val)\n: (U16 val , U16 val) ?\n</code></pre>"},{"location":"builtin-U16/#parameters_14","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_27","title":"Returns","text":"<ul> <li>(U16 val , U16 val) ?</li> </ul>"},{"location":"builtin-U16/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_15","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_28","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_16","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_29","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_17","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_30","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_18","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_31","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_19","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_32","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_20","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_33","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_21","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_34","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_22","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_35","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_23","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_36","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_24","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_37","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_25","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_38","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_26","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_39","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_27","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_40","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_28","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_41","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U16/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U16/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_29","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_43","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_30","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_44","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_31","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_45","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_32","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_46","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)\n</code></pre>"},{"location":"builtin-U16/#parameters_33","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_47","title":"Returns","text":"<ul> <li>(U16 val , U16 val)</li> </ul>"},{"location":"builtin-U16/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_34","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_48","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_49","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_35","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_50","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_36","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_51","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_37","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_52","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_53","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_38","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_54","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_39","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_55","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_40","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_56","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_41","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_57","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U16 val)\n: (U16 val , U16 val)\n</code></pre>"},{"location":"builtin-U16/#parameters_42","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_58","title":"Returns","text":"<ul> <li>(U16 val , U16 val)</li> </ul>"},{"location":"builtin-U16/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_43","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_59","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_60","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_44","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_45","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_46","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_47","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_48","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_49","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U16/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U16/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U16/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U16/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U16/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U16/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U16/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U16/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U16/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U16/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U16/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U16/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U16/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U16/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U16/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U16/#u16_1","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U16/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U16/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U16/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U16/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U16/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U16/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U16/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U16/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U16/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U16/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U16/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U16/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U16/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U16/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U16/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U16/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U16/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U16/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U16/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U16/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U16/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U16/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U16/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U16/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U16/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U16/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U16/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U16/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U16/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U16/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U16/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U16/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U16/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U16/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U16/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U16/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U16/#parameters_50","title":"Parameters","text":"<ul> <li>that: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U32/","title":"U32","text":"<p>[Source] <pre><code>primitive val U32 is\n  UnsignedInteger[U32 val] val\n</code></pre></p>"},{"location":"builtin-U32/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U32 val] val</li> </ul>"},{"location":"builtin-U32/#constructors","title":"Constructors","text":""},{"location":"builtin-U32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U32 val)\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#parameters","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-U32/#returns","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U32/#returns_1","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#returns_2","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#returns_3","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U32/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_2","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_15","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_3","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_16","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_4","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_17","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_5","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_18","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_6","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_19","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_7","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_20","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_8","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_21","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_9","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_22","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_10","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_23","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_11","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_24","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_12","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_25","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_13","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_26","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U32 val)\n: (U32 val , U32 val) ?\n</code></pre>"},{"location":"builtin-U32/#parameters_14","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_27","title":"Returns","text":"<ul> <li>(U32 val , U32 val) ?</li> </ul>"},{"location":"builtin-U32/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_15","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_28","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_16","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_29","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_17","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_30","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_18","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_31","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_19","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_32","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_20","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_33","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_21","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_34","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_22","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_35","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_23","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_36","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_24","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_37","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_25","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_38","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_26","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_39","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_27","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_40","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_28","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_41","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U32/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U32/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_29","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_43","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_30","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_44","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_31","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_45","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_32","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_46","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"builtin-U32/#parameters_33","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_47","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"builtin-U32/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_34","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_48","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_49","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_35","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_50","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_36","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_51","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_37","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_52","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_53","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_38","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_54","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_39","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_55","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_40","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_56","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_41","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_57","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"builtin-U32/#parameters_42","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_58","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"builtin-U32/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_43","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_59","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_60","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_44","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_45","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_46","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_47","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_48","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_49","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U32/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U32/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U32/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U32/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U32/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U32/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U32/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U32/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U32/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U32/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U32/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U32/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U32/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U32/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U32/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U32/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U32/#u32_1","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U32/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U32/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U32/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U32/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U32/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U32/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U32/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U32/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U32/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U32/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U32/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U32/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U32/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U32/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U32/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U32/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U32/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U32/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U32/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U32/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U32/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U32/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U32/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U32/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U32/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U32/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U32/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U32/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U32/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U32/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U32/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U32/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U32/#parameters_50","title":"Parameters","text":"<ul> <li>that: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U64/","title":"U64","text":"<p>[Source] <pre><code>primitive val U64 is\n  UnsignedInteger[U64 val] val\n</code></pre></p>"},{"location":"builtin-U64/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U64 val] val</li> </ul>"},{"location":"builtin-U64/#constructors","title":"Constructors","text":""},{"location":"builtin-U64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U64 val)\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#parameters","title":"Parameters","text":"<ul> <li>value: U64 val</li> </ul>"},{"location":"builtin-U64/#returns","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U64/#returns_1","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#returns_2","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#returns_3","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U64/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_13","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_2","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_15","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_3","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_16","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_4","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_18","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_5","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_19","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_6","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_20","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_7","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_21","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_8","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_22","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_9","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_23","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_10","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_24","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_11","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_25","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_12","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_26","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_13","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_27","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U64 val)\n: (U64 val , U64 val) ?\n</code></pre>"},{"location":"builtin-U64/#parameters_14","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_28","title":"Returns","text":"<ul> <li>(U64 val , U64 val) ?</li> </ul>"},{"location":"builtin-U64/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_15","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_29","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_16","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_30","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_17","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_31","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_18","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_32","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_19","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_33","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_20","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_34","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_21","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_35","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_22","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_36","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_23","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_37","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_24","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_38","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_25","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_39","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_26","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_40","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_27","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_41","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_28","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_42","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U64/#returns_43","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U64/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_29","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_44","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_30","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_45","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_31","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_46","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_32","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_47","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)\n</code></pre>"},{"location":"builtin-U64/#parameters_33","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_48","title":"Returns","text":"<ul> <li>(U64 val , U64 val)</li> </ul>"},{"location":"builtin-U64/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_34","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_49","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_50","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_35","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_51","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_36","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_52","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_37","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_53","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_54","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_38","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_55","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_39","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_56","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_40","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_57","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_41","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_58","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U64 val)\n: (U64 val , U64 val)\n</code></pre>"},{"location":"builtin-U64/#parameters_42","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_59","title":"Returns","text":"<ul> <li>(U64 val , U64 val)</li> </ul>"},{"location":"builtin-U64/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_43","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_60","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_61","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_44","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_45","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_46","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_47","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_48","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_49","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U64/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U64/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U64/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U64/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U64/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U64/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U64/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U64/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U64/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U64/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U64/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U64/#u64_1","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U64/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U64/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U64/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U64/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U64/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U64/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U64/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U64/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U64/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U64/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U64/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U64/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U64/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U64/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U64/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U64/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U64/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U64/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U64/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U64/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U64/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U64/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U64/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U64/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U64/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U64/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U64/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U64/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U64/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U64/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U64/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U64/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U64/#parameters_50","title":"Parameters","text":"<ul> <li>that: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U8/","title":"U8","text":"<p>[Source] <pre><code>primitive val U8 is\n  UnsignedInteger[U8 val] val\n</code></pre></p>"},{"location":"builtin-U8/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U8 val] val</li> </ul>"},{"location":"builtin-U8/#constructors","title":"Constructors","text":""},{"location":"builtin-U8/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U8 val)\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-U8/#returns","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-U8/#returns_1","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#returns_2","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#returns_3","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U8/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_5","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_9","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_13","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_2","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_15","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_3","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_16","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_4","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_17","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_5","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_18","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_6","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_19","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_7","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_20","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_8","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_21","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_9","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_22","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_10","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_23","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_11","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_24","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_12","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_25","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_13","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_26","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U8 val)\n: (U8 val , U8 val) ?\n</code></pre>"},{"location":"builtin-U8/#parameters_14","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_27","title":"Returns","text":"<ul> <li>(U8 val , U8 val) ?</li> </ul>"},{"location":"builtin-U8/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_15","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_28","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_16","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_29","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_17","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_30","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_18","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_31","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_19","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_32","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_20","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_33","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_21","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_34","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_22","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_35","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_23","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_36","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_24","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_37","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_25","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_38","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_26","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_39","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_27","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_40","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_28","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_41","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U8/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U8/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_29","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_43","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_30","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_44","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_31","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_45","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_32","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_46","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"builtin-U8/#parameters_33","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_47","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"builtin-U8/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_34","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_48","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_49","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_35","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_50","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_36","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_51","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_37","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_52","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_53","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_38","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_54","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_39","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_55","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_40","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_56","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_41","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_57","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U8 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"builtin-U8/#parameters_42","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_58","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"builtin-U8/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_43","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_59","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_60","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_44","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_45","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_46","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_47","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_48","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_49","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U8/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U8/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U8/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U8/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U8/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U8/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U8/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U8/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U8/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U8/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U8/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U8/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U8/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U8/#u8_1","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U8/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U8/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U8/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U8/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U8/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U8/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U8/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U8/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U8/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U8/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U8/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U8/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U8/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U8/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U8/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U8/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U8/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U8/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U8/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U8/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U8/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U8/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U8/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U8/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U8/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U8/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U8/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U8/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U8/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U8/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U8/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U8/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U8/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U8/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U8/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U8/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U8/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U8/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U8/#parameters_50","title":"Parameters","text":"<ul> <li>that: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ULong/","title":"ULong","text":"<p>[Source] <pre><code>primitive val ULong is\n  UnsignedInteger[ULong val] val\n</code></pre></p>"},{"location":"builtin-ULong/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[ULong val] val</li> </ul>"},{"location":"builtin-ULong/#constructors","title":"Constructors","text":""},{"location":"builtin-ULong/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: ULong val)\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#parameters","title":"Parameters","text":"<ul> <li>value: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ULong/#returns_1","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#returns_2","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#returns_3","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ULong/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_4","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_5","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_6","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_7","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_10","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_11","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_12","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_13","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_2","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_15","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_3","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_16","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_4","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_18","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_5","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_19","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_6","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_20","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_7","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_21","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_8","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_22","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_9","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_23","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_10","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_24","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_11","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_25","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_12","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_26","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_13","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_27","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: ULong val)\n: (ULong val , ULong val) ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_14","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_28","title":"Returns","text":"<ul> <li>(ULong val , ULong val) ?</li> </ul>"},{"location":"builtin-ULong/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_15","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_29","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_16","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_30","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_17","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_31","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_18","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_32","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_19","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_33","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_20","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_34","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_21","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_35","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_22","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_36","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_23","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_37","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_24","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_38","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_25","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_39","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_26","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_40","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_27","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_41","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_28","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_42","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ULong/#returns_43","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ULong/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_29","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_44","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_30","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_45","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_31","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_46","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_32","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_47","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_33","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_48","title":"Returns","text":"<ul> <li>(ULong val , ULong val)</li> </ul>"},{"location":"builtin-ULong/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_34","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_49","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_50","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_35","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_51","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_36","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_52","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_37","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_53","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_54","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_38","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_55","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_39","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_56","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_40","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_57","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_41","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_58","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: ULong val)\n: (ULong val , ULong val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_42","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_59","title":"Returns","text":"<ul> <li>(ULong val , ULong val)</li> </ul>"},{"location":"builtin-ULong/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_43","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_60","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_61","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_44","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_45","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_46","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_47","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_48","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_49","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ULong/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ULong/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ULong/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ULong/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ULong/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ULong/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ULong/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ULong/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ULong/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ULong/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ULong/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ULong/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ULong/#ulong_1","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ULong/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ULong/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ULong/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ULong/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ULong/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ULong/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ULong/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ULong/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ULong/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ULong/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ULong/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ULong/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ULong/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ULong/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ULong/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ULong/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ULong/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_50","title":"Parameters","text":"<ul> <li>that: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-USize/","title":"USize","text":"<p>[Source] <pre><code>primitive val USize is\n  UnsignedInteger[USize val] val\n</code></pre></p>"},{"location":"builtin-USize/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[USize val] val</li> </ul>"},{"location":"builtin-USize/#constructors","title":"Constructors","text":""},{"location":"builtin-USize/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: USize val)\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#parameters","title":"Parameters","text":"<ul> <li>value: USize val</li> </ul>"},{"location":"builtin-USize/#returns","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-USize/#returns_1","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#returns_2","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#returns_3","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#public-functions","title":"Public Functions","text":""},{"location":"builtin-USize/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_5","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_6","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_12","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_2","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_3","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_16","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_4","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_17","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_5","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_18","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_6","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_19","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_7","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_20","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_8","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_21","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_9","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_22","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_10","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_23","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_11","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_24","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_12","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_25","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_13","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_26","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: USize val)\n: (USize val , USize val) ?\n</code></pre>"},{"location":"builtin-USize/#parameters_14","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_27","title":"Returns","text":"<ul> <li>(USize val , USize val) ?</li> </ul>"},{"location":"builtin-USize/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_15","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_28","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_16","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_29","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_17","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_30","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_18","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_31","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_19","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_32","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_20","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_33","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_21","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_34","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_22","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_35","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_23","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_36","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_24","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_37","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_25","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_38","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_26","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_39","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_27","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_40","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_28","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_41","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-USize/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-USize/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_29","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_43","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_30","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_44","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_31","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_45","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_32","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_46","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: USize val)\n: (USize val , USize val)\n</code></pre>"},{"location":"builtin-USize/#parameters_33","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_47","title":"Returns","text":"<ul> <li>(USize val , USize val)</li> </ul>"},{"location":"builtin-USize/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_34","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_48","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_49","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_35","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_50","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_36","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_51","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_37","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_52","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_53","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_38","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_54","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_39","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_55","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_40","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_56","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_41","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_57","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: USize val)\n: (USize val , USize val)\n</code></pre>"},{"location":"builtin-USize/#parameters_42","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_58","title":"Returns","text":"<ul> <li>(USize val , USize val)</li> </ul>"},{"location":"builtin-USize/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_43","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_59","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_60","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_44","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_45","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_46","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_47","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_48","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_49","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-USize/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-USize/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-USize/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-USize/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-USize/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-USize/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-USize/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-USize/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-USize/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-USize/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-USize/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-USize/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-USize/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-USize/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-USize/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-USize/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-USize/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-USize/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-USize/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-USize/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-USize/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-USize/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-USize/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-USize/#usize_1","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-USize/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-USize/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-USize/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-USize/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-USize/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-USize/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-USize/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-USize/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-USize/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-USize/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-USize/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-USize/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-USize/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-USize/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-USize/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-USize/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-USize/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-USize/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-USize/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-USize/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-USize/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-USize/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-USize/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-USize/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-USize/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-USize/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-USize/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-USize/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-USize/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-USize/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-USize/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-USize/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-USize/#parameters_50","title":"Parameters","text":"<ul> <li>that: USize val</li> </ul>"},{"location":"builtin-USize/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Unsigned/","title":"Unsigned","text":"<p>[Source] <pre><code>type Unsigned is\n  (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n</code></pre></p>"},{"location":"builtin-Unsigned/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)</li> </ul>"},{"location":"builtin-UnsignedInteger/","title":"UnsignedInteger[A: UnsignedInteger[A] val]","text":"<p>[Source] <pre><code>trait val UnsignedInteger[A: UnsignedInteger[A] val] is\n  Integer[A] val\n</code></pre></p>"},{"location":"builtin-UnsignedInteger/#implements","title":"Implements","text":"<ul> <li>Integer[A] val</li> </ul>"},{"location":"builtin-UnsignedInteger/#constructors","title":"Constructors","text":""},{"location":"builtin-UnsignedInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#public-functions","title":"Public Functions","text":""},{"location":"builtin-UnsignedInteger/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_8","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_9","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_12","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_13","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_14","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shl_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_15","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shr_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_16","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_18","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_21","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Count leading zeroes.</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_22","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Count trailing zeroes.</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_23","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_24","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_25","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_26","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-UnsignedInteger/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_27","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_31","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_33","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_34","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_35","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_36","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_37","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_38","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_40","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_41","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_42","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_43","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_44","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_51","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_37","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_38","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_39","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_40","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_55","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_41","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_56","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_57","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_42","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_43","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_44","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_45","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_46","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_47","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_48","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_64","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_49","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_65","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_66","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_67","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_68","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_69","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_70","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_71","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_72","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_73","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_74","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_75","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_76","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_77","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_78","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_79","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_80","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_81","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_82","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_83","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_84","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_85","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_86","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_87","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_88","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_89","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_90","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_91","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_92","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_93","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_94","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_95","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_96","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_97","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_98","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_99","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_50","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_100","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections--index/","title":"Collections package","text":"<p>The Collections package provides a variety of collection classes,  including map, set, range, heap, ring buffer, list, and flags.</p> <p><code>Map</code> - Hashmap by strutural equality (use <code>MapIs</code> for identity equality).</p> <p><code>Set</code> - A set built on top of <code>Map</code> using structural equility (use <code>SetIs</code> for identity equality).</p> <p><code>Range</code> - Iterate over a range of numbers with optional step size.</p> <p><code>BinaryHeap</code> - A priority queue implemented as a binary heap -- use a <code>BinaryHeapPriority</code> parameter to determine priority.</p> <p><code>RingBuffer</code> - A ring buffer with fixed size.</p> <p><code>List</code> - A doubly linked list.</p> <p><code>Flags</code> - A set of single bit flags (size determined upon creation).</p>"},{"location":"collections--index/#public-types","title":"Public Types","text":"<ul> <li>class BinaryHeap</li> <li>type BinaryHeapPriority</li> <li>interface Flag</li> <li>class Flags</li> <li>primitive HashByteSeq</li> <li>primitive HashEq</li> <li>primitive HashEq64</li> <li>interface HashFunction</li> <li>interface HashFunction64</li> <li>primitive HashIs</li> <li>class HashMap</li> <li>class HashSet</li> <li>interface Hashable</li> <li>interface Hashable64</li> <li>class List</li> <li>class ListNode</li> <li>class ListNodes</li> <li>class ListValues</li> <li>type Map</li> <li>type MapIs</li> <li>class MapKeys</li> <li>class MapPairs</li> <li>class MapValues</li> <li>type MaxHeap</li> <li>primitive MaxHeapPriority</li> <li>type MinHeap</li> <li>primitive MinHeapPriority</li> <li>class Range</li> <li>class Reverse</li> <li>class RingBuffer</li> <li>type Set</li> <li>type SetIs</li> <li>class SetValues</li> <li>primitive Sort</li> </ul>"},{"location":"collections-BinaryHeap/","title":"BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))]","text":"<p>[Source]</p> <p>A priority queue implemented as a binary heap. The <code>BinaryHeapPriority</code> type parameter determines whether this is max-heap or a min-heap.</p> <pre><code>class ref BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))]\n</code></pre>"},{"location":"collections-BinaryHeap/#constructors","title":"Constructors","text":""},{"location":"collections-BinaryHeap/#create","title":"create","text":"<p>[Source]</p> <p>Create an empty heap with space for <code>len</code> elements.</p> <pre><code>new ref create(\n  len: USize val)\n: BinaryHeap[A, P] ref^\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-BinaryHeap/#returns","title":"Returns","text":"<ul> <li>BinaryHeap[A, P] ref^</li> </ul>"},{"location":"collections-BinaryHeap/#public-functions","title":"Public Functions","text":""},{"location":"collections-BinaryHeap/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the heap.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#size","title":"size","text":"<p>[Source]</p> <p>Return the number of elements in the heap.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-BinaryHeap/#peek","title":"peek","text":"<p>[Source]</p> <p>Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned.</p> <pre><code>fun box peek()\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-BinaryHeap/#push","title":"push","text":"<p>[Source]</p> <p>Push an item into the heap.</p> <p>The time complexity of this operation is O(log(n)) with respect to the size of the heap.</p> <pre><code>fun ref push(\n  value: A)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_1","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-BinaryHeap/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned.</p> <p>The time complexity of this operation is O(log(n)) with respect to the size of the heap.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_5","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-BinaryHeap/#append","title":"append","text":"<p>[Source]</p> <p>Append len elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\n  seq: (ReadSeq[A] box &amp; ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_2","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-BinaryHeap/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements, starting from the given offset.</p> <pre><code>fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_3","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-BinaryHeap/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator for the elements in the heap. The order of elements is arbitrary.</p> <pre><code>fun box values()\n: ArrayValues[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_8","title":"Returns","text":"<ul> <li>ArrayValues[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"collections-BinaryHeapPriority/","title":"BinaryHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type BinaryHeapPriority[A: Comparable[A] #read] is\n  (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))\n</code></pre></p>"},{"location":"collections-BinaryHeapPriority/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))</li> </ul>"},{"location":"collections-Flag/","title":"Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]","text":"<p>[Source]</p> <p>A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits.</p> <pre><code>interface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Integer[A] val)]\n</code></pre>"},{"location":"collections-Flag/#public-functions","title":"Public Functions","text":""},{"location":"collections-Flag/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: A\n</code></pre>"},{"location":"collections-Flag/#returns","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"collections-Flags/","title":"Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]","text":"<p>[Source]</p> <p>Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example:</p> <p>primitive SSE   fun value(): U64 =&gt; 1</p> <p>primitive AVX   fun value(): U64 =&gt; 2</p> <p>primitive RDTSCP   fun value(): U64 =&gt; 4</p> <p>type Features is Flags[(SSE | AVX | RDTSCP)]</p> <p>Type parameter B is the underlying field used to store the flags.</p> <pre><code>class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Integer[B] val)] is\n  Comparable[Flags[A, B] box] ref\n</code></pre>"},{"location":"collections-Flags/#implements","title":"Implements","text":"<ul> <li>Comparable[Flags[A, B] box] ref</li> </ul>"},{"location":"collections-Flags/#constructors","title":"Constructors","text":""},{"location":"collections-Flags/#create","title":"create","text":"<p>[Source]</p> <p>Create a Flags instance with an optional initial value. Default is 0 (no flags set).</p> <pre><code>new iso create(\n  value': B = 0)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters","title":"Parameters","text":"<ul> <li>value': B = 0</li> </ul>"},{"location":"collections-Flags/#returns","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#public-functions","title":"Public Functions","text":""},{"location":"collections-Flags/#value","title":"value","text":"<p>[Source]</p> <p>Returns the bit encoding of the set flags.</p> <pre><code>fun box value()\n: B\n</code></pre>"},{"location":"collections-Flags/#returns_1","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-Flags/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns true if the flag is set.</p> <pre><code>fun box apply(\n  flag: A)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_1","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#all","title":"all","text":"<p>[Source]</p> <p>Sets all bits, including undefined flags.</p> <pre><code>fun ref all()\n: None val\n</code></pre>"},{"location":"collections-Flags/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#clear","title":"clear","text":"<p>[Source]</p> <p>Unsets all flags.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-Flags/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#set","title":"set","text":"<p>[Source]</p> <p>Sets the flag.</p> <pre><code>fun ref set(\n  flag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_2","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#unset","title":"unset","text":"<p>[Source]</p> <p>Unsets the flag.</p> <pre><code>fun ref unset(\n  flag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_3","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#flip","title":"flip","text":"<p>[Source]</p> <p>Sets the flag if it is unset, unsets the flag if it is set.</p> <pre><code>fun ref flip(\n  flag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_4","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#union","title":"union","text":"<p>[Source]</p> <p>The union of this and that.</p> <pre><code>fun ref union(\n  that: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_5","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#intersect","title":"intersect","text":"<p>[Source]</p> <p>The intersection of this and that.</p> <pre><code>fun ref intersect(\n  that: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_6","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#difference","title":"difference","text":"<p>[Source]</p> <p>The symmetric difference of this and that.</p> <pre><code>fun ref difference(\n  that: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_7","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#remove","title":"remove","text":"<p>[Source]</p> <p>Unset flags that are set in that.</p> <pre><code>fun ref remove(\n  that: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_8","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#add","title":"add","text":"<p>[Source]</p> <p>This with the flag set.</p> <pre><code>fun box add(\n  flag: A)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_9","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_12","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#sub","title":"sub","text":"<p>[Source]</p> <p>This with the flag unset.</p> <pre><code>fun box sub(\n  flag: A)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_10","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_13","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_or","title":"op_or","text":"<p>[Source]</p> <p>The union of this and that.</p> <pre><code>fun box op_or(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_11","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_14","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_and","title":"op_and","text":"<p>[Source]</p> <p>The intersection of this and that.</p> <pre><code>fun box op_and(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_12","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_15","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_xor","title":"op_xor","text":"<p>[Source]</p> <p>The symmetric difference of this and that.</p> <pre><code>fun box op_xor(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_13","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_16","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#without","title":"without","text":"<p>[Source]</p> <p>The flags in this that are not in that.</p> <pre><code>fun box without(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_14","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_17","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#clone","title":"clone","text":"<p>[Source]</p> <p>Create a clone.</p> <pre><code>fun box clone()\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#returns_18","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if this has the same flags set as that.</p> <pre><code>fun box eq(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_15","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge.</p> <pre><code>fun box lt(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_16","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te.</p> <pre><code>fun box le(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_17","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#gt","title":"gt","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le.</p> <pre><code>fun box gt(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_18","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#ge","title":"ge","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt.</p> <pre><code>fun box ge(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_19","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: Flags[A, B] box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"collections-Flags/#parameters_20","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_24","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections-Flags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_21","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashByteSeq/","title":"HashByteSeq","text":"<p>[Source]</p> <p>Hash and equality functions for arbitrary ByteSeq.</p> <pre><code>primitive val HashByteSeq is\n  HashFunction[(String box | Array[U8 val] box)] val,\n  HashFunction64[(String box | Array[U8 val] box)] val\n</code></pre>"},{"location":"collections-HashByteSeq/#implements","title":"Implements","text":"<ul> <li>HashFunction[(String box | Array[U8 val] box)] val</li> <li>HashFunction64[(String box | Array[U8 val] box)] val</li> </ul>"},{"location":"collections-HashByteSeq/#constructors","title":"Constructors","text":""},{"location":"collections-HashByteSeq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashByteSeq val^\n</code></pre>"},{"location":"collections-HashByteSeq/#returns","title":"Returns","text":"<ul> <li>HashByteSeq val^</li> </ul>"},{"location":"collections-HashByteSeq/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashByteSeq/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash(\n  x: (String box | Array[U8 val] box))\n: USize val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashByteSeq/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64(\n  x: (String box | Array[U8 val] box))\n: U64 val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_1","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashByteSeq/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_2","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> <li>y: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashByteSeq/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashByteSeq val)\n: Bool val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_3","title":"Parameters","text":"<ul> <li>that: HashByteSeq val</li> </ul>"},{"location":"collections-HashByteSeq/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq/","title":"HashEq[A: (Hashable #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>primitive val HashEq[A: (Hashable #read &amp; Equatable[A] #read)] is\n  HashFunction[A] val\n</code></pre></p>"},{"location":"collections-HashEq/#implements","title":"Implements","text":"<ul> <li>HashFunction[A] val</li> </ul>"},{"location":"collections-HashEq/#constructors","title":"Constructors","text":""},{"location":"collections-HashEq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashEq[A] val^\n</code></pre>"},{"location":"collections-HashEq/#returns","title":"Returns","text":"<ul> <li>HashEq[A] val^</li> </ul>"},{"location":"collections-HashEq/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashEq/#hash","title":"hash","text":"<p>[Source]</p> <p>Use the hash function from the type parameter.</p> <pre><code>fun box hash(\n  x: box-&gt;A)\n: USize val\n</code></pre>"},{"location":"collections-HashEq/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> </ul>"},{"location":"collections-HashEq/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashEq/#eq","title":"eq","text":"<p>[Source]</p> <p>Use the structural equality function from the type parameter.</p> <pre><code>fun box eq(\n  x: box-&gt;A,\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> <li>y: box-&gt;A</li> </ul>"},{"location":"collections-HashEq/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashEq[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq/#parameters_2","title":"Parameters","text":"<ul> <li>that: HashEq[A] val</li> </ul>"},{"location":"collections-HashEq/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq64/","title":"HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>primitive val HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)] is\n  HashFunction64[A] val\n</code></pre></p>"},{"location":"collections-HashEq64/#implements","title":"Implements","text":"<ul> <li>HashFunction64[A] val</li> </ul>"},{"location":"collections-HashEq64/#constructors","title":"Constructors","text":""},{"location":"collections-HashEq64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashEq64[A] val^\n</code></pre>"},{"location":"collections-HashEq64/#returns","title":"Returns","text":"<ul> <li>HashEq64[A] val^</li> </ul>"},{"location":"collections-HashEq64/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashEq64/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Use the hash function from the type parameter.</p> <pre><code>fun box hash64(\n  x: box-&gt;A)\n: U64 val\n</code></pre>"},{"location":"collections-HashEq64/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> </ul>"},{"location":"collections-HashEq64/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashEq64/#eq","title":"eq","text":"<p>[Source]</p> <p>Use the structural equality function from the type parameter.</p> <pre><code>fun box eq(\n  x: box-&gt;A,\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq64/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> <li>y: box-&gt;A</li> </ul>"},{"location":"collections-HashEq64/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashEq64[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq64/#parameters_2","title":"Parameters","text":"<ul> <li>that: HashEq64[A] val</li> </ul>"},{"location":"collections-HashEq64/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashFunction/","title":"HashFunction[A: A]","text":"<p>[Source]</p> <p>A pluggable hash function.</p> <pre><code>interface val HashFunction[A: A]\n</code></pre>"},{"location":"collections-HashFunction/#constructors","title":"Constructors","text":""},{"location":"collections-HashFunction/#create","title":"create","text":"<p>[Source]</p> <p>Data structures create instances internally. Use a primitive if possible.</p> <pre><code>new val create()\n: HashFunction[A] val^\n</code></pre>"},{"location":"collections-HashFunction/#returns","title":"Returns","text":"<ul> <li>HashFunction[A] val^</li> </ul>"},{"location":"collections-HashFunction/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashFunction/#hash","title":"hash","text":"<p>[Source]</p> <p>Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them.</p> <pre><code>fun box hash(\n  x: box-&gt;A!)\n: USize val\n</code></pre>"},{"location":"collections-HashFunction/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashFunction/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys.</p> <pre><code>fun box eq(\n  x: box-&gt;A!,\n  y: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashFunction/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashFunction64/","title":"HashFunction64[A: A]","text":"<p>[Source]</p> <p>A pluggable hash function with 64-bit hashes.</p> <pre><code>interface val HashFunction64[A: A]\n</code></pre>"},{"location":"collections-HashFunction64/#constructors","title":"Constructors","text":""},{"location":"collections-HashFunction64/#create","title":"create","text":"<p>[Source]</p> <p>Data structures create instances internally. Use a primitive if possible.</p> <pre><code>new val create()\n: HashFunction64[A] val^\n</code></pre>"},{"location":"collections-HashFunction64/#returns","title":"Returns","text":"<ul> <li>HashFunction64[A] val^</li> </ul>"},{"location":"collections-HashFunction64/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashFunction64/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them.</p> <pre><code>fun box hash64(\n  x: box-&gt;A!)\n: U64 val\n</code></pre>"},{"location":"collections-HashFunction64/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction64/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashFunction64/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys.</p> <pre><code>fun box eq(\n  x: box-&gt;A!,\n  y: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashFunction64/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction64/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashIs/","title":"HashIs[A: A]","text":"<p>[Source] <pre><code>primitive val HashIs[A: A] is\n  HashFunction[A] val,\n  HashFunction64[A] val\n</code></pre></p>"},{"location":"collections-HashIs/#implements","title":"Implements","text":"<ul> <li>HashFunction[A] val</li> <li>HashFunction64[A] val</li> </ul>"},{"location":"collections-HashIs/#constructors","title":"Constructors","text":""},{"location":"collections-HashIs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashIs[A] val^\n</code></pre>"},{"location":"collections-HashIs/#returns","title":"Returns","text":"<ul> <li>HashIs[A] val^</li> </ul>"},{"location":"collections-HashIs/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashIs/#hash","title":"hash","text":"<p>[Source]</p> <p>Hash the identity rather than the contents.</p> <pre><code>fun box hash(\n  x: box-&gt;A!)\n: USize val\n</code></pre>"},{"location":"collections-HashIs/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashIs/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Hash the identity rather than the contents.</p> <pre><code>fun box hash64(\n  x: box-&gt;A!)\n: U64 val\n</code></pre>"},{"location":"collections-HashIs/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashIs/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality by identity rather than structurally.</p> <pre><code>fun box eq(\n  x: box-&gt;A!,\n  y: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashIs/#parameters_2","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashIs/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashIs[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashIs/#parameters_3","title":"Parameters","text":"<ul> <li>that: HashIs[A] val</li> </ul>"},{"location":"collections-HashIs/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashMap/","title":"HashMap[K: K, V: V, H: HashFunction[K] val]","text":"<p>[Source]</p> <p>A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps.</p> <pre><code>class ref HashMap[K: K, V: V, H: HashFunction[K] val]\n</code></pre>"},{"location":"collections-HashMap/#constructors","title":"Constructors","text":""},{"location":"collections-HashMap/#create","title":"create","text":"<p>[Source]</p> <p>Create an array with space for prealloc elements without triggering a resize. Defaults to 6.</p> <pre><code>new ref create(\n  prealloc: USize val = 6)\n: HashMap[K, V, H] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters","title":"Parameters","text":"<ul> <li>prealloc: USize val = 6</li> </ul>"},{"location":"collections-HashMap/#returns","title":"Returns","text":"<ul> <li>HashMap[K, V, H] ref^</li> </ul>"},{"location":"collections-HashMap/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashMap/#size","title":"size","text":"<p>[Source]</p> <p>The number of items in the map.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-HashMap/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashMap/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the map. Resize will happen when size / space &gt;= 0.75.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-HashMap/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashMap/#apply","title":"apply","text":"<p>[Source]</p> <p>Gets a value from the map. Raises an error if no such item exists.</p> <pre><code>fun box apply(\n  key: box-&gt;K!)\n: this-&gt;V ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_1","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;V ?</li> </ul>"},{"location":"collections-HashMap/#update","title":"update","text":"<p>[Source]</p> <p>Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize.</p> <pre><code>fun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)\n</code></pre>"},{"location":"collections-HashMap/#parameters_2","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_4","title":"Returns","text":"<ul> <li>(V^ | None val)</li> </ul>"},{"location":"collections-HashMap/#upsert","title":"upsert","text":"<p>[Source]</p> <p>Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function.</p> <p>As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call</p> <p>m.upsert(\"test\", 4, {(current, provided) =&gt; current + provided })</p> <p>This changes the value associated with \"test\" to 6.</p> <p>If we have not yet added the key \"new-key\" to the map and we call</p> <p>m.upsert(\"new-key\", 4, {(current, provided) =&gt; current + provided })</p> <p>then \"new-key\" is added to the map with a value of 4.</p> <p>Returns the value that we set the key to</p> <pre><code>fun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H] box)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_3","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> <li>f: {(V, V): V^}[K, V, H] box</li> </ul>"},{"location":"collections-HashMap/#returns_5","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#insert","title":"insert","text":"<p>[Source]</p> <p>Set a value in the map. Returns the new value, allowing reuse.</p> <pre><code>fun ref insert(\n  key: K,\n  value: V)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_4","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_6","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#insert_if_absent","title":"insert_if_absent","text":"<p>[Source]</p> <p>Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like:</p> <pre><code>if not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend\n</code></pre> <p>Returns the value, the same as <code>insert</code>, allowing 'insert_if_absent' to be used as a drop-in replacement for <code>insert</code>.</p> <pre><code>fun ref insert_if_absent(\n  key: K,\n  value: V)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_5","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_7","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#remove","title":"remove","text":"<p>[Source]</p> <p>Delete a value from the map and return it. Raises an error if there was no value for the given key.</p> <pre><code>fun ref remove(\n  key: box-&gt;K!)\n: (K^ , V^) ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_6","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_8","title":"Returns","text":"<ul> <li>(K^ , V^) ?</li> </ul>"},{"location":"collections-HashMap/#get_or_else","title":"get_or_else","text":"<p>[Source]</p> <p>Get the value associated with provided key if present. Otherwise, return the provided alternate value.</p> <pre><code>fun box get_or_else(\n  key: box-&gt;K!,\n  alt: this-&gt;V)\n: this-&gt;V\n</code></pre>"},{"location":"collections-HashMap/#parameters_7","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> <li>alt: this-&gt;V</li> </ul>"},{"location":"collections-HashMap/#returns_9","title":"Returns","text":"<ul> <li>this-&gt;V</li> </ul>"},{"location":"collections-HashMap/#contains","title":"contains","text":"<p>[Source]</p> <p>Checks whether the map contains the key k</p> <pre><code>fun box contains(\n  k: box-&gt;K!)\n: Bool val\n</code></pre>"},{"location":"collections-HashMap/#parameters_8","title":"Parameters","text":"<ul> <li>k: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashMap/#concat","title":"concat","text":"<p>[Source]</p> <p>Add K, V pairs from the iterator to the map.</p> <pre><code>fun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val\n</code></pre>"},{"location":"collections-HashMap/#parameters_9","title":"Parameters","text":"<ul> <li>iter: Iterator[(K^ , V^)] ref</li> </ul>"},{"location":"collections-HashMap/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#addoptional-h2-hashfunctionthis-k-val","title":"add[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>This with the new (key, value) mapping.</p> <pre><code>fun box add[optional H2: HashFunction[this-&gt;K!] val](\n  key: this-&gt;K!,\n  value: this-&gt;V!)\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters_10","title":"Parameters","text":"<ul> <li>key: this-&gt;K!</li> <li>value: this-&gt;V!</li> </ul>"},{"location":"collections-HashMap/#returns_12","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#suboptional-h2-hashfunctionthis-k-val","title":"sub[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>This without the given key.</p> <pre><code>fun box sub[optional H2: HashFunction[this-&gt;K!] val](\n  key: this-&gt;K!)\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters_11","title":"Parameters","text":"<ul> <li>key: this-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_13","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#next_index","title":"next_index","text":"<p>[Source]</p> <p>Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index.</p> <pre><code>fun box next_index(\n  prev: USize val = call)\n: USize val ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_12","title":"Parameters","text":"<ul> <li>prev: USize val = call</li> </ul>"},{"location":"collections-HashMap/#returns_14","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-HashMap/#index","title":"index","text":"<p>[Source]</p> <p>Returns the key and value at a given index. Raise an error if the index is not populated.</p> <pre><code>fun box index(\n  i: USize val)\n: (this-&gt;K , this-&gt;V) ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_13","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-HashMap/#returns_15","title":"Returns","text":"<ul> <li>(this-&gt;K , this-&gt;V) ?</li> </ul>"},{"location":"collections-HashMap/#compact","title":"compact","text":"<p>[Source]</p> <p>Minimise the memory used for the map.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"collections-HashMap/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#cloneoptional-h2-hashfunctionthis-k-val","title":"clone[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation.</p> <pre><code>fun box clone[optional H2: HashFunction[this-&gt;K!] val]()\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_17","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all entries.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-HashMap/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#keys","title":"keys","text":"<p>[Source]</p> <p>Return an iterator over the keys.</p> <pre><code>fun box keys()\n: MapKeys[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_19","title":"Returns","text":"<ul> <li>MapKeys[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashMap/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values.</p> <pre><code>fun box values()\n: MapValues[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_20","title":"Returns","text":"<ul> <li>MapValues[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashMap/#pairs","title":"pairs","text":"<p>[Source]</p> <p>Return an iterator over the keys and values.</p> <pre><code>fun box pairs()\n: MapPairs[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_21","title":"Returns","text":"<ul> <li>MapPairs[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashSet/","title":"HashSet[A: A, H: HashFunction[A!] val]","text":"<p>[Source]</p> <p>A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself</p> <pre><code>class ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H] box] ref\n</code></pre>"},{"location":"collections-HashSet/#implements","title":"Implements","text":"<ul> <li>Comparable[HashSet[A, H] box] ref</li> </ul>"},{"location":"collections-HashSet/#constructors","title":"Constructors","text":""},{"location":"collections-HashSet/#create","title":"create","text":"<p>[Source]</p> <p>Defaults to a prealloc of 8.</p> <pre><code>new ref create(\n  prealloc: USize val = 8)\n: HashSet[A, H] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters","title":"Parameters","text":"<ul> <li>prealloc: USize val = 8</li> </ul>"},{"location":"collections-HashSet/#returns","title":"Returns","text":"<ul> <li>HashSet[A, H] ref^</li> </ul>"},{"location":"collections-HashSet/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashSet/#size","title":"size","text":"<p>[Source]</p> <p>The number of items in the set.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-HashSet/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashSet/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the set.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-HashSet/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashSet/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the value if its in the set, otherwise raise an error.</p> <pre><code>fun box apply(\n  value: box-&gt;A!)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_1","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-HashSet/#contains","title":"contains","text":"<p>[Source]</p> <p>Checks whether the set contains the value.</p> <pre><code>fun box contains(\n  value: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_2","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the set.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-HashSet/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#set","title":"set","text":"<p>[Source]</p> <p>Add a value to the set.</p> <pre><code>fun ref set(\n  value: A)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_3","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-HashSet/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#unset","title":"unset","text":"<p>[Source]</p> <p>Remove a value from the set.</p> <pre><code>fun ref unset(\n  value: box-&gt;A!)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_4","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#extract","title":"extract","text":"<p>[Source]</p> <p>Remove a value from the set and return it. Raises an error if the value wasn't in the set.</p> <pre><code>fun ref extract(\n  value: box-&gt;A!)\n: A^ ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_5","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_8","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-HashSet/#union","title":"union","text":"<p>[Source]</p> <p>Add everything in that to the set.</p> <pre><code>fun ref union(\n  that: Iterator[A^] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_6","title":"Parameters","text":"<ul> <li>that: Iterator[A^] ref</li> </ul>"},{"location":"collections-HashSet/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#intersectoptional-k-hashfunctionbox-a-val","title":"intersect[optional K: HashFunction[box-&gt;A!] val]","text":"<p>[Source]</p> <p>Remove everything that isn't in that.</p> <pre><code>fun ref intersect[optional K: HashFunction[box-&gt;A!] val](\n  that: HashSet[box-&gt;A!, K] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_7","title":"Parameters","text":"<ul> <li>that: HashSet[box-&gt;A!, K] ref</li> </ul>"},{"location":"collections-HashSet/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#difference","title":"difference","text":"<p>[Source]</p> <p>Remove elements in this which are also in that. Add elements in that which are not in this.</p> <pre><code>fun ref difference(\n  that: Iterator[A^] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_8","title":"Parameters","text":"<ul> <li>that: Iterator[A^] ref</li> </ul>"},{"location":"collections-HashSet/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove everything that is in that.</p> <pre><code>fun ref remove(\n  that: Iterator[box-&gt;A!] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_9","title":"Parameters","text":"<ul> <li>that: Iterator[box-&gt;A!] ref</li> </ul>"},{"location":"collections-HashSet/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#addoptional-k-hashfunctionthis-a-val","title":"add[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Add a value to the set.</p> <pre><code>fun box add[optional K: HashFunction[this-&gt;A!] val](\n  value: this-&gt;A!)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_10","title":"Parameters","text":"<ul> <li>value: this-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_13","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#suboptional-k-hashfunctionthis-a-val","title":"sub[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Remove a value from the set.</p> <pre><code>fun box sub[optional K: HashFunction[this-&gt;A!] val](\n  value: box-&gt;this-&gt;A!)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_11","title":"Parameters","text":"<ul> <li>value: box-&gt;this-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_14","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_oroptional-k-hashfunctionthis-a-val","title":"op_or[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements of both this and that.</p> <pre><code>fun box op_or[optional K: HashFunction[this-&gt;A!] val](\n  that: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_12","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_15","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_andoptional-k-hashfunctionthis-a-val","title":"op_and[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements that are in both this and that.</p> <pre><code>fun box op_and[optional K: HashFunction[this-&gt;A!] val](\n  that: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_13","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_16","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_xoroptional-k-hashfunctionthis-a-val","title":"op_xor[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements that are in either set but not both.</p> <pre><code>fun box op_xor[optional K: HashFunction[this-&gt;A!] val](\n  that: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_14","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_17","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#withoutoptional-k-hashfunctionthis-a-val","title":"without[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements of this that are not in that.</p> <pre><code>fun box without[optional K: HashFunction[this-&gt;A!] val](\n  that: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_15","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_18","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#cloneoptional-k-hashfunctionthis-a-val","title":"clone[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a clone. The element type may be different due to aliasing and viewpoint adaptation.</p> <pre><code>fun box clone[optional K: HashFunction[this-&gt;A!] val]()\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#returns_19","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if the sets contain the same elements.</p> <pre><code>fun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_16","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#ne","title":"ne","text":"<p>[Source]</p> <p>Returns false if the sets contain the same elements.</p> <pre><code>fun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_17","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if every element in this is also in that, and this has fewer elements than that.</p> <pre><code>fun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_18","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if every element in this is also in that.</p> <pre><code>fun box le(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_19","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#gt","title":"gt","text":"<p>[Source]</p> <p>Returns true if every element in that is also in this, and this has more elements than that.</p> <pre><code>fun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_20","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#ge","title":"ge","text":"<p>[Source]</p> <p>Returns true if every element in that is also in this.</p> <pre><code>fun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_21","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#next_index","title":"next_index","text":"<p>[Source]</p> <p>Given an index, return the next index that has a populated value. Raise an error if there is no next populated index.</p> <pre><code>fun box next_index(\n  prev: USize val = call)\n: USize val ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_22","title":"Parameters","text":"<ul> <li>prev: USize val = call</li> </ul>"},{"location":"collections-HashSet/#returns_26","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-HashSet/#index","title":"index","text":"<p>[Source]</p> <p>Returns the value at a given index. Raise an error if the index is not populated.</p> <pre><code>fun box index(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_23","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-HashSet/#returns_27","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-HashSet/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values.</p> <pre><code>fun box values()\n: SetValues[A, H, this-&gt;HashSet[A, H] ref] ref^\n</code></pre>"},{"location":"collections-HashSet/#returns_28","title":"Returns","text":"<ul> <li>SetValues[A, H, this-&gt;HashSet[A, H] ref] ref^</li> </ul>"},{"location":"collections-HashSet/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"collections-HashSet/#parameters_24","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_29","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections-Hashable/","title":"Hashable","text":"<p>[Source]</p> <p>Anything with a hash method is hashable.</p> <pre><code>interface ref Hashable\n</code></pre>"},{"location":"collections-Hashable/#public-functions","title":"Public Functions","text":""},{"location":"collections-Hashable/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"collections-Hashable/#returns","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-Hashable64/","title":"Hashable64","text":"<p>[Source]</p> <p>A version of Hashable that returns 64-bit hashes on every platform.</p> <pre><code>interface ref Hashable64\n</code></pre>"},{"location":"collections-Hashable64/#public-functions","title":"Public Functions","text":""},{"location":"collections-Hashable64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"collections-Hashable64/#returns","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-List/","title":"List[A: A]","text":"<p>[Source]</p> <p>A doubly linked list.</p> <p>The following is paraphrased from Wikipedia.</p> <p>A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes (implemented in Pony via the collections.ListNode class). Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the List in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders.</p> <p>As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc.</p>"},{"location":"collections-List/#example-program","title":"Example program","text":"<p>There are a lot of functions in List. The following code picks out a few common examples.</p> <p>It outputs:</p> <pre><code>A new empty list has 0 nodes.\nAdding one node to our empty list means it now has a size of 1.\nThe first (index 0) node has the value: A single String\nA list created by appending our second single-node list onto our first has size: 2\nThe List nodes of our first list are now:\n  A single String\n  Another String\nAppend *moves* the nodes from the second list so that now has 0 nodes.\nA list created from an array of three strings has size: 3\n  First\n  Second\n  Third\nMapping over our three-node list produces a new list of size: 3\nEach node-value in the resulting list is now far more exciting:\n  First BOOM!\n  Second BOOM!\n  Third BOOM!\nFiltering our three-node list produces a new list of size: 2\n  Second BOOM!\n  Third BOOM!\nThe size of our first partitioned list (matches predicate): 1\nThe size of our second partitioned list (doesn't match predicate): 1\nOur matching partition elements are:\n  Second BOOM!\n</code></pre> <pre><code>  use \"collections\"\n\n  actor Main\n    new create(env:Env) =&gt;\n\n      // Create a new empty List of type String\n      let my_list = List[String]()\n\n      env.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0\n\n      // Push a String literal onto our empty List\n      my_list.push(\"A single String\")\n      env.out.print(\"Adding one node to our empty list means it now has a size of \"\n                    + my_list.size().string() + \".\") // 1\n\n      // Get the first element of our List\n      try env.out.print(\"The first (index 0) node has the value: \"\n                        + my_list.index(0)?()?.string()) end // A single String\n\n      // Create a second List from a single String literal\n      let my_second_list = List[String].unit(\"Another String\")\n\n      // Append the second List to the first\n      my_list.append_list(my_second_list)\n      env.out.print(\"A list created by appending our second single-node list onto our first has size: \"\n                    + my_list.size().string()) // 2\n      env.out.print(\"The List nodes of our first list are now:\")\n      for n in my_list.values() do\n        env.out.print(\"\\t\" + n.string())\n      end\n      // NOTE: this _moves_ the elements so second_list consequently ends up empty\n      env.out.print(\"Append *moves* the nodes from the second list so that now has \"\n                    + my_second_list.size().string() + \" nodes.\") // 0\n\n      // Create a third List from a Seq(ence)\n      // (In this case a literal array of Strings)\n      let my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"])\n      env.out.print(\"A list created from an array of three strings has size: \"\n                    + my_third_list.size().string()) // 3\n      for n in my_third_list.values() do\n        env.out.print(\"\\t\" + n.string())\n      end\n\n      // Map over the third List, concatenating some \"BOOM!'s\" into a new List\n      let new_list = my_third_list.map[String]({ (n) =&gt; n + \" BOOM!\" })\n      env.out.print(\"Mapping over our three-node list produces a new list of size: \"\n                    + new_list.size().string()) // 3\n      env.out.print(\"Each node-value in the resulting list is now far more exciting:\")\n      for n in new_list.values() do\n        env.out.print(\"\\t\" + n.string())\n      end\n\n      // Filter the new list to extract 2 elements\n      let filtered_list = new_list.filter({ (n) =&gt; n.string().contains(\"d BOOM!\") })\n      env.out.print(\"Filtering our three-node list produces a new list of size: \"\n                        + filtered_list.size().string()) // 2\n      for n in filtered_list.values() do\n        env.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM!\n      end\n\n      // Partition the filtered list\n      let partitioned_lists = filtered_list.partition({ (n) =&gt; n.string().contains(\"Second\") })\n      env.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string())        // 1\n      env.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string())  // 1\n      env.out.print(\"Our matching partition elements are:\")\n      for n in partitioned_lists._1.values() do\n        env.out.print(\"\\t\" + n.string()) // Second BOOM!\n      end\n</code></pre> <pre><code>class ref List[A: A] is\n  Seq[A] ref\n</code></pre>"},{"location":"collections-List/#implements","title":"Implements","text":"<ul> <li>Seq[A] ref</li> </ul>"},{"location":"collections-List/#constructors","title":"Constructors","text":""},{"location":"collections-List/#create","title":"create","text":"<p>[Source]</p> <p>Always creates an empty list with 0 nodes, <code>len</code> is ignored.</p> <p>Required method for <code>List</code> to satisfy the <code>Seq</code> interface. <pre><code>let my_list = List[String]\n</code></pre></p> <pre><code>new ref create(\n  len: USize val = 0)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"collections-List/#returns","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#unit","title":"unit","text":"<p>[Source]</p> <p>Creates a list with 1 node of element.</p> <pre><code>let my_list = List[String].unit(\"element\")\n</code></pre> <pre><code>new ref unit(\n  a: A)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_1","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#from","title":"from","text":"<p>[Source]</p> <p>Creates a list equivalent to the provided Array (both node number and order are preserved).</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\n</code></pre> <pre><code>new ref from(\n  seq: Array[A^] ref)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters_2","title":"Parameters","text":"<ul> <li>seq: Array[A^] ref</li> </ul>"},{"location":"collections-List/#returns_2","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#public-functions","title":"Public Functions","text":""},{"location":"collections-List/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Do nothing</p> <p>Required method for <code>List</code> to satisfy the <code>Seq</code> interface.</p> <pre><code>fun ref reserve(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_3","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-List/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of items in the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.size() // 3\n</code></pre> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-List/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-List/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element, raising an error if the index is out of bounds.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.apply(1)? end // \"b\"\n</code></pre> <pre><code>fun box apply(\n  i: USize val = 0)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-List/#parameters_4","title":"Parameters","text":"<ul> <li>i: USize val = 0</li> </ul>"},{"location":"collections-List/#returns_5","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-List/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th element, raising an error if the index is out of bounds, and returning the previous value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.update(1, \"z\")? end // Returns \"b\" and List now contains [\"a\"; \"z\"; \"c\"]\n</code></pre> <pre><code>fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n</code></pre>"},{"location":"collections-List/#parameters_5","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"collections-List/#returns_6","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#index","title":"index","text":"<p>[Source]</p> <p>Gets the i-th node, raising an error if the index is out of bounds.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.index(0)? end // Returns a ListNode[String] containing \"a\"\n</code></pre> <pre><code>fun box index(\n  i: USize val)\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#parameters_6","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-List/#returns_7","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the i-th node, raising an error if the index is out of bounds, and returning the removed node.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.remove(0)? end // Returns a ListNode[String] containing \"a\" and List now contains [\"b\"; \"c\"]\n</code></pre> <pre><code>fun ref remove(\n  i: USize val)\n: ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#parameters_7","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-List/#returns_8","title":"Returns","text":"<ul> <li>ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#clear","title":"clear","text":"<p>[Source]</p> <p>Empties the list.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-List/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#head","title":"head","text":"<p>[Source]</p> <p>Show the head of the list, raising an error if the head is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.head()? end // Returns a ListNode[String] containing \"a\"\n</code></pre> <pre><code>fun box head()\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#returns_10","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#tail","title":"tail","text":"<p>[Source]</p> <p>Show the tail of the list, raising an error if the tail is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.tail()? end // Returns a ListNode[String] containing \"c\"\n</code></pre> <pre><code>fun box tail()\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#returns_11","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#prepend_node","title":"prepend_node","text":"<p>[Source]</p> <p>Adds a node to the head of the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet new_head = ListNode[String](\"0\")\nmy_list.prepend_node(new_head) // [\"0\", \"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun ref prepend_node(\n  node: ListNode[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_8","title":"Parameters","text":"<ul> <li>node: ListNode[A] ref</li> </ul>"},{"location":"collections-List/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#append_node","title":"append_node","text":"<p>[Source]</p> <p>Adds a node to the tail of the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet new_tail = ListNode[String](\"0\")\nmy_list.append_node(new_head) // [\"a\"; \"b\"; \"c\", \"0\"]\n</code></pre> <pre><code>fun ref append_node(\n  node: ListNode[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_9","title":"Parameters","text":"<ul> <li>node: ListNode[A] ref</li> </ul>"},{"location":"collections-List/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#append_list","title":"append_list","text":"<p>[Source]</p> <p>Empties the provided List by appending all elements onto the receiving List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.append_list(other_list)  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is empty\n</code></pre> <pre><code>fun ref append_list(\n  that: List[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_10","title":"Parameters","text":"<ul> <li>that: List[A] ref</li> </ul>"},{"location":"collections-List/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#prepend_list","title":"prepend_list","text":"<p>[Source]</p> <p>Empties the provided List by prepending all elements onto the receiving List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.prepend_list(other_list)  // my_list is [\"d\"; \"e\"; \"f\"; \"a\"; \"b\"; \"c\"], other_list is empty\n</code></pre> <pre><code>fun ref prepend_list(\n  that: List[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_11","title":"Parameters","text":"<ul> <li>that: List[A] ref</li> </ul>"},{"location":"collections-List/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#push","title":"push","text":"<p>[Source]</p> <p>Adds a new tail value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.push(\"d\")  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"]\n</code></pre> <pre><code>fun ref push(\n  a: A)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_12","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#pop","title":"pop","text":"<p>[Source]</p> <p>Removes the tail value, raising an error if the tail is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.pop() end  // Returns \"c\" and my_list is [\"a\"; \"b\"]\n</code></pre> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-List/#returns_17","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds a new head value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.unshift(\"d\")  // my_list is [\"d\"; \"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun ref unshift(\n  a: A)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_13","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes the head value, raising an error if the head is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.shift() end  // Returns \"a\" and my_list is [\"b\"; \"c\"]\n</code></pre> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"collections-List/#returns_19","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#append","title":"append","text":"<p>[Source]</p> <p>Append len elements from a sequence, starting from the given offset.</p> <p>When len is -1, all elements of sequence are pushed.</p> <p>Does not remove elements from sequence.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.append(other_list)  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is unchanged\n</code></pre> <pre><code>fun ref append(\n  seq: (ReadSeq[A] box &amp; ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_14","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-List/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the tail of the list, starting from the given offset.</p> <p>When len is -1, all elements of iterator are pushed.</p> <p>Does not remove elements from iterator.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.concat(other_list.values())  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is unchanged\n</code></pre> <pre><code>fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_15","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-List/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Pop tail elements until the list is len size. If the list is already smaller than len, do nothing.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.truncate(1)  // my_list is [\"a\"]\n</code></pre> <pre><code>fun ref truncate(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_16","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-List/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#clone","title":"clone","text":"<p>[Source]</p> <p>Clone all elements into a new List.</p> <p>Note: elements are not copied, an additional reference to each element is created in the new List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.clone()  // my_list is [\"a\"; \"b\"; \"c\"], other_list is [\"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun box clone()\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#returns_23","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#mapb-b","title":"map[B: B]","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by applying a function to every element of the <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.map[String]( {(s: String): String =&gt; \"m: \" + s } )  // other_list is [\"m: a\"; \"m: b\"; \"m: c\"]\n</code></pre> <pre><code>fun box map[B: B](\n  f: {(this-&gt;A!): B^}[A, B] box)\n: List[B] ref^\n</code></pre>"},{"location":"collections-List/#parameters_17","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): B^}[A, B] box</li> </ul>"},{"location":"collections-List/#returns_24","title":"Returns","text":"<ul> <li>List[B] ref^</li> </ul>"},{"location":"collections-List/#flat_mapb-b","title":"flat_map[B: B]","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by applying a function to every element of the <code>List</code>,  producing a new <code>List</code> for each element, then flattened into a single <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.flat_map[String]( {(s: String): List[String] =&gt; List[String].from( [\"m\"; s] )} )  // other_list is [\"m\"; \"a\"; \"m\"; \"b\"; \"m\"; c\"]\n</code></pre> <pre><code>fun box flat_map[B: B](\n  f: {(this-&gt;A!): List[B]}[A, B] box)\n: List[B] ref^\n</code></pre>"},{"location":"collections-List/#parameters_18","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): List[B]}[A, B] box</li> </ul>"},{"location":"collections-List/#returns_25","title":"Returns","text":"<ul> <li>List[B] ref^</li> </ul>"},{"location":"collections-List/#filter","title":"filter","text":"<p>[Source]</p> <p>Builds a new <code>List</code> with those elements that satisfy the predicate.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.filter( {(s: String): Bool =&gt; s == \"b\" } )  // other_list is [\"b\"]\n</code></pre> <pre><code>fun box filter(\n  f: {(this-&gt;A!): Bool}[A] box)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_19","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_26","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#foldb-b","title":"fold[B: B]","text":"<p>[Source]</p> <p>Folds the elements of the <code>List</code> using the supplied function.</p> <p>On the first iteration, the <code>B</code> argument in <code>f</code> is the value <code>acc</code>,  on the second iteration <code>B</code> is the result of the first iteration, on the third iteration <code>B</code> is the result of the second iteration, and so on.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet folded = my_list.fold[String]( {(str: String, s: String): String =&gt; str + s }, \"z\")  // \"zabc\"\n</code></pre> <pre><code>fun box fold[B: B](\n  f: {(B!, this-&gt;A!): B^}[A, B] box,\n  acc: B)\n: B\n</code></pre>"},{"location":"collections-List/#parameters_20","title":"Parameters","text":"<ul> <li>f: {(B!, this-&gt;A!): B^}[A, B] box</li> <li>acc: B</li> </ul>"},{"location":"collections-List/#returns_27","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-List/#every","title":"every","text":"<p>[Source]</p> <p>Returns <code>true</code> if every element satisfies the predicate, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet all_z = my_list.every( {(s: String): Bool =&gt; s == \"z\"} ) // false\n</code></pre> <pre><code>fun box every(\n  f: {(this-&gt;A!): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_21","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_28","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#exists","title":"exists","text":"<p>[Source]</p> <p>Returns <code>true</code> if at least one element satisfies the predicate, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet b_exists = my_list.exists( {(s: String): Bool =&gt; s == \"b\"} ) // true\n</code></pre> <pre><code>fun box exists(\n  f: {(this-&gt;A!): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_22","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_29","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#partition","title":"partition","text":"<p>[Source]</p> <p>Builds a pair of <code>List</code>s, the first of which is made up of the elements satisfying the predicate and the second of which is made up of those that do not.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\n(let lt_b, let gt_b) = my_list.partition( {(s: String): Bool =&gt; s &lt; \"b\"} )  // lt_b is [\"a\"], while gt_b is [\"b\"; \"c\"]\n</code></pre> <pre><code>fun box partition(\n  f: {(this-&gt;A!): Bool}[A] box)\n: (List[this-&gt;A!] ref^ , List[this-&gt;A!] ref^)\n</code></pre>"},{"location":"collections-List/#parameters_23","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_30","title":"Returns","text":"<ul> <li>(List[this-&gt;A!] ref^ , List[this-&gt;A!] ref^)</li> </ul>"},{"location":"collections-List/#drop","title":"drop","text":"<p>[Source]</p> <p>Builds a <code>List</code> by dropping the first <code>n</code> elements.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.drop(1)  // [\"b\"; \"c\"]\n</code></pre> <pre><code>fun box drop(\n  n: USize val)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_24","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-List/#returns_31","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#take","title":"take","text":"<p>[Source]</p> <p>Builds a <code>List</code> by keeping the first <code>n</code> elements.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.drop(1)  // [\"a\"]\n</code></pre> <pre><code>fun box take(\n  n: USize val)\n: List[this-&gt;A!] ref\n</code></pre>"},{"location":"collections-List/#parameters_25","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-List/#returns_32","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref</li> </ul>"},{"location":"collections-List/#take_while","title":"take_while","text":"<p>[Source]</p> <p>Builds a <code>List</code> of elements satisfying the predicate, stopping at the first <code>false</code> return.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.take_while( {(s: String): Bool =&gt; s &lt; \"b\"} )  // [\"a\"]\n</code></pre> <pre><code>fun box take_while(\n  f: {(this-&gt;A!): Bool}[A] box)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_26","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_33","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by reversing the elements in the <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.reverse() // [\"c\"; \"b\"; \"a\"]\n</code></pre> <pre><code>fun box reverse()\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#returns_34","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#containsoptional-b-a-haseqa-read","title":"contains[optional B: (A &amp; HasEq[A!] #read)]","text":"<p>[Source]</p> <p>Returns <code>true</code> if the <code>List</code> contains the provided element, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet contains_b = my_list.contains[String](\"b\") // true\n</code></pre> <pre><code>fun box contains[optional B: (A &amp; HasEq[A!] #read)](\n  a: box-&gt;B)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_27","title":"Parameters","text":"<ul> <li>a: box-&gt;B</li> </ul>"},{"location":"collections-List/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#nodes","title":"nodes","text":"<p>[Source]</p> <p>Return an iterator on the nodes in the <code>List</code> in forward order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet nodes = my_list.nodes()  // node with \"a\" is before node with \"c\"\n</code></pre> <pre><code>fun box nodes()\n: ListNodes[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_36","title":"Returns","text":"<ul> <li>ListNodes[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#rnodes","title":"rnodes","text":"<p>[Source]</p> <p>Return an iterator on the nodes in the <code>List</code> in reverse order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet rnodes = my_list.rnodes()  // node with \"c\" is before node with \"a\"\n</code></pre> <pre><code>fun box rnodes()\n: ListNodes[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_37","title":"Returns","text":"<ul> <li>ListNodes[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator on the values in the <code>List</code> in forward order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet values = my_list.values()  // value \"a\" is before value \"c\"\n</code></pre> <pre><code>fun box values()\n: ListValues[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_38","title":"Returns","text":"<ul> <li>ListValues[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#rvalues","title":"rvalues","text":"<p>[Source]</p> <p>Return an iterator on the values in the <code>List</code> in reverse order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet rvalues = my_list.rvalues()  // value \"c\" is before value \"a\"\n</code></pre> <pre><code>fun box rvalues()\n: ListValues[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_39","title":"Returns","text":"<ul> <li>ListValues[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-ListNode/","title":"ListNode[A: A]","text":"<p>[Source]</p> <p>A node in a doubly linked list.</p> <p>See Pony collections.List class for usage examples.</p> <p>Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the List in which it resides.</p> <p>As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode.</p> <p>Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions.  The Ponylang collections.List class is the correct way to create these. Do not attempt to create a Linked List using only ListNodes.</p>"},{"location":"collections-ListNode/#example-program","title":"Example program","text":"<p>The functions which are illustrated below are only those which operate on an individual ListNode.</p> <p>It outputs:</p> <p>My node has the item value: My Node item   My node has the updated item value: My updated Node item   Popped the item from the ListNode   The ListNode has no (None) item.</p> <pre><code>  use \"collections\"\n  actor Main\n    new create(env:Env) =&gt;\n\n      // Create a new ListNode of type String\n      let my_list_node = ListNode[String](\"My Node item\")\n      try \n        env.out.print(\"My node has the item value: \"\n                      + my_list_node.apply()?) // My Node item\n      end\n\n      // Update the item contained in the ListNode\n      try\n        my_list_node.update(\"My updated Node item\")?\n        env.out.print(\"My node has the updated item value: \"\n                      + my_list_node.apply()?) // My updated Node item\n      end\n      // Pop the item from the ListNode\n      try\n        my_list_node.pop()?\n        env.out.print(\"Popped the item from the ListNode\")\n        my_list_node.apply()? // This will error as the item is now None\n      else\n        env.out.print(\"The ListNode has no (None) item.\")\n      end\n</code></pre> <pre><code>class ref ListNode[A: A]\n</code></pre>"},{"location":"collections-ListNode/#constructors","title":"Constructors","text":""},{"location":"collections-ListNode/#create","title":"create","text":"<p>[Source]</p> <p>Create a node. Initially, it is not in any list.</p> <pre><code>new ref create(\n  item: (A | None val) = reference)\n: ListNode[A] ref^\n</code></pre>"},{"location":"collections-ListNode/#parameters","title":"Parameters","text":"<ul> <li>item: (A | None val) = reference</li> </ul>"},{"location":"collections-ListNode/#returns","title":"Returns","text":"<ul> <li>ListNode[A] ref^</li> </ul>"},{"location":"collections-ListNode/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListNode/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the item, if we have one, otherwise raise an error.</p> <pre><code>fun box apply()\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-ListNode/#returns_1","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-ListNode/#update","title":"update","text":"<p>[Source]</p> <p>Replace the item and return the previous one. Raise an error if we have no previous value.</p> <pre><code>fun ref update(\n  value: (A | None val))\n: A^ ?\n</code></pre>"},{"location":"collections-ListNode/#parameters_1","title":"Parameters","text":"<ul> <li>value: (A | None val)</li> </ul>"},{"location":"collections-ListNode/#returns_2","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-ListNode/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove the item from the node, if we have one, otherwise raise an error.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-ListNode/#returns_3","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-ListNode/#prepend","title":"prepend","text":"<p>[Source]</p> <p>Prepend a node to this one. If <code>that</code> is already in a list, it is removed before it is prepended. Returns true if <code>that</code> was removed from another list. If the ListNode is not contained within a List the prepend will fail.</p> <pre><code>fun ref prepend(\n  that: ListNode[A] ref)\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#parameters_2","title":"Parameters","text":"<ul> <li>that: ListNode[A] ref</li> </ul>"},{"location":"collections-ListNode/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#append","title":"append","text":"<p>[Source]</p> <p>Append a node to this one. If <code>that</code> is already in a list, it is removed before it is appended. Returns true if <code>that</code> was removed from another list.</p> <p>If the ListNode is not contained within a List the append will fail.</p> <pre><code>fun ref append(\n  that: ListNode[A] ref)\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#parameters_3","title":"Parameters","text":"<ul> <li>that: ListNode[A] ref</li> </ul>"},{"location":"collections-ListNode/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove a node from a list.</p> <p>The ListNode must be contained within a List for this to succeed.</p> <pre><code>fun ref remove()\n: None val\n</code></pre>"},{"location":"collections-ListNode/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-ListNode/#has_prev","title":"has_prev","text":"<p>[Source]</p> <p>Return true if there is a previous node.</p> <pre><code>fun box has_prev()\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Return true if there is a next node.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#prev","title":"prev","text":"<p>[Source]</p> <p>Return the previous node.</p> <pre><code>fun box prev()\n: (this-&gt;ListNode[A] ref | None val)\n</code></pre>"},{"location":"collections-ListNode/#returns_9","title":"Returns","text":"<ul> <li>(this-&gt;ListNode[A] ref | None val)</li> </ul>"},{"location":"collections-ListNode/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node.</p> <pre><code>fun box next()\n: (this-&gt;ListNode[A] ref | None val)\n</code></pre>"},{"location":"collections-ListNode/#returns_10","title":"Returns","text":"<ul> <li>(this-&gt;ListNode[A] ref | None val)</li> </ul>"},{"location":"collections-ListNodes/","title":"ListNodes[A: A, N: ListNode[A] #read]","text":"<p>[Source]</p> <p>Iterate over the nodes in a <code>List</code>.</p> <pre><code>class ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N] ref\n</code></pre>"},{"location":"collections-ListNodes/#implements","title":"Implements","text":"<ul> <li>Iterator[N] ref</li> </ul>"},{"location":"collections-ListNodes/#constructors","title":"Constructors","text":""},{"location":"collections-ListNodes/#create","title":"create","text":"<p>[Source]</p> <p>Build the iterator over nodes.</p> <p><code>reverse</code> of <code>false</code> iterates forward, while <code>reverse</code> of <code>true</code> iterates in reverse.</p> <pre><code>new ref create(\n  head: (N | None val),\n  reverse: Bool val = false)\n: ListNodes[A, N] ref^\n</code></pre>"},{"location":"collections-ListNodes/#parameters","title":"Parameters","text":"<ul> <li>head: (N | None val)</li> <li>reverse: Bool val = false</li> </ul>"},{"location":"collections-ListNodes/#returns","title":"Returns","text":"<ul> <li>ListNodes[A, N] ref^</li> </ul>"},{"location":"collections-ListNodes/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListNodes/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Indicates whether there are any nodes remaining in the iterator.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListNodes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNodes/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node in the iterator, advancing the iterator by one element.</p> <p>Order of return is determined by <code>reverse</code> argument during creation.</p> <pre><code>fun ref next()\n: N ?\n</code></pre>"},{"location":"collections-ListNodes/#returns_2","title":"Returns","text":"<ul> <li>N ?</li> </ul>"},{"location":"collections-ListValues/","title":"ListValues[A: A, N: ListNode[A] #read]","text":"<p>[Source]</p> <p>Iterate over the values in a <code>List</code>.</p> <pre><code>class ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N-&gt;A] ref\n</code></pre>"},{"location":"collections-ListValues/#implements","title":"Implements","text":"<ul> <li>Iterator[N-&gt;A] ref</li> </ul>"},{"location":"collections-ListValues/#constructors","title":"Constructors","text":""},{"location":"collections-ListValues/#create","title":"create","text":"<p>[Source]</p> <p>Build the iterator over values.</p> <p><code>reverse</code> of <code>false</code> iterates forward, while <code>reverse</code> of <code>true</code> iterates in reverse.</p> <pre><code>new ref create(\n  head: (N | None val),\n  reverse: Bool val = false)\n: ListValues[A, N] ref^\n</code></pre>"},{"location":"collections-ListValues/#parameters","title":"Parameters","text":"<ul> <li>head: (N | None val)</li> <li>reverse: Bool val = false</li> </ul>"},{"location":"collections-ListValues/#returns","title":"Returns","text":"<ul> <li>ListValues[A, N] ref^</li> </ul>"},{"location":"collections-ListValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Indicates whether there are any values remaining in the iterator.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListValues/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node in the iterator, advancing the iterator by one element.</p> <p>Order of return is determined by <code>reverse</code> argument during creation.</p> <pre><code>fun ref next()\n: N-&gt;A ?\n</code></pre>"},{"location":"collections-ListValues/#returns_2","title":"Returns","text":"<ul> <li>N-&gt;A ?</li> </ul>"},{"location":"collections-Map/","title":"Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]","text":"<p>[Source]</p> <p>This is a map that uses structural equality on the key.</p> <pre><code>type Map[K: (Hashable #read &amp; Equatable[K] #read), V: V] is\n  HashMap[K, V, HashEq[K] val] ref\n</code></pre>"},{"location":"collections-Map/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashEq[K] val] ref</li> </ul>"},{"location":"collections-MapIs/","title":"MapIs[K: K, V: V]","text":"<p>[Source]</p> <p>This is a map that uses identity comparison on the key.</p> <pre><code>type MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref\n</code></pre>"},{"location":"collections-MapIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashIs[K] val] ref</li> </ul>"},{"location":"collections-MapKeys/","title":"MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the keys in a map.</p> <pre><code>class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M-&gt;K] ref\n</code></pre>"},{"location":"collections-MapKeys/#implements","title":"Implements","text":"<ul> <li>Iterator[M-&gt;K] ref</li> </ul>"},{"location":"collections-MapKeys/#constructors","title":"Constructors","text":""},{"location":"collections-MapKeys/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\n  map: M)\n: MapKeys[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapKeys/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapKeys/#returns","title":"Returns","text":"<ul> <li>MapKeys[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapKeys/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapKeys/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys.</p> <pre><code>fun ref next()\n: M-&gt;K ?\n</code></pre>"},{"location":"collections-MapKeys/#returns_2","title":"Returns","text":"<ul> <li>M-&gt;K ?</li> </ul>"},{"location":"collections-MapPairs/","title":"MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the keys and values in a map.</p> <pre><code>class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M-&gt;K , M-&gt;V)] ref\n</code></pre>"},{"location":"collections-MapPairs/#implements","title":"Implements","text":"<ul> <li>Iterator[(M-&gt;K , M-&gt;V)] ref</li> </ul>"},{"location":"collections-MapPairs/#constructors","title":"Constructors","text":""},{"location":"collections-MapPairs/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\n  map: M)\n: MapPairs[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapPairs/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapPairs/#returns","title":"Returns","text":"<ul> <li>MapPairs[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapPairs/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapPairs/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries.</p> <pre><code>fun ref next()\n: (M-&gt;K , M-&gt;V) ?\n</code></pre>"},{"location":"collections-MapPairs/#returns_2","title":"Returns","text":"<ul> <li>(M-&gt;K , M-&gt;V) ?</li> </ul>"},{"location":"collections-MapValues/","title":"MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the values in a map.</p> <pre><code>class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M-&gt;V] ref\n</code></pre>"},{"location":"collections-MapValues/#implements","title":"Implements","text":"<ul> <li>Iterator[M-&gt;V] ref</li> </ul>"},{"location":"collections-MapValues/#constructors","title":"Constructors","text":""},{"location":"collections-MapValues/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\n  map: M)\n: MapValues[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapValues/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapValues/#returns","title":"Returns","text":"<ul> <li>MapValues[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapValues/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values.</p> <pre><code>fun ref next()\n: M-&gt;V ?\n</code></pre>"},{"location":"collections-MapValues/#returns_2","title":"Returns","text":"<ul> <li>M-&gt;V ?</li> </ul>"},{"location":"collections-MaxHeap/","title":"MaxHeap[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type MaxHeap[A: Comparable[A] #read] is\n  BinaryHeap[A, MaxHeapPriority[A] val] ref\n</code></pre></p>"},{"location":"collections-MaxHeap/#type-alias-for","title":"Type Alias For","text":"<ul> <li>BinaryHeap[A, MaxHeapPriority[A] val] ref</li> </ul>"},{"location":"collections-MaxHeapPriority/","title":"MaxHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>primitive val MaxHeapPriority[A: Comparable[A] #read] is\n  _BinaryHeapPriority[A] val\n</code></pre></p>"},{"location":"collections-MaxHeapPriority/#implements","title":"Implements","text":"<ul> <li>_BinaryHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#constructors","title":"Constructors","text":""},{"location":"collections-MaxHeapPriority/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MaxHeapPriority[A] val^\n</code></pre>"},{"location":"collections-MaxHeapPriority/#returns","title":"Returns","text":"<ul> <li>MaxHeapPriority[A] val^</li> </ul>"},{"location":"collections-MaxHeapPriority/#public-functions","title":"Public Functions","text":""},{"location":"collections-MaxHeapPriority/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  x: A,\n  y: A)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters","title":"Parameters","text":"<ul> <li>x: A</li> <li>y: A</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MaxHeapPriority/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: MaxHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters_1","title":"Parameters","text":"<ul> <li>that: MaxHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MaxHeapPriority/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: MaxHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters_2","title":"Parameters","text":"<ul> <li>that: MaxHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeap/","title":"MinHeap[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type MinHeap[A: Comparable[A] #read] is\n  BinaryHeap[A, MinHeapPriority[A] val] ref\n</code></pre></p>"},{"location":"collections-MinHeap/#type-alias-for","title":"Type Alias For","text":"<ul> <li>BinaryHeap[A, MinHeapPriority[A] val] ref</li> </ul>"},{"location":"collections-MinHeapPriority/","title":"MinHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>primitive val MinHeapPriority[A: Comparable[A] #read] is\n  _BinaryHeapPriority[A] val\n</code></pre></p>"},{"location":"collections-MinHeapPriority/#implements","title":"Implements","text":"<ul> <li>_BinaryHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#constructors","title":"Constructors","text":""},{"location":"collections-MinHeapPriority/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MinHeapPriority[A] val^\n</code></pre>"},{"location":"collections-MinHeapPriority/#returns","title":"Returns","text":"<ul> <li>MinHeapPriority[A] val^</li> </ul>"},{"location":"collections-MinHeapPriority/#public-functions","title":"Public Functions","text":""},{"location":"collections-MinHeapPriority/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  x: A,\n  y: A)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters","title":"Parameters","text":"<ul> <li>x: A</li> <li>y: A</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeapPriority/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: MinHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters_1","title":"Parameters","text":"<ul> <li>that: MinHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeapPriority/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: MinHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters_2","title":"Parameters","text":"<ul> <li>that: MinHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/","title":"Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Produces <code>[min, max)</code> with a step of <code>inc</code> for any <code>Number</code> type.</p> <pre><code>// iterating with for-loop\nfor i in Range(0, 10) do\n  env.out.print(i.string())\nend\n\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\n  try\n    handle_u8(range.next()?)\n  end\nend\n</code></pre> <p>Supports <code>min</code> being smaller than <code>max</code> with negative <code>inc</code> but only for signed integer types and floats:</p> <pre><code>var previous = 11\nfor left in Range[I64](10, -5, -1) do\n  if not (left &lt; previous) then\n    error\n  end\n  previous = left\nend\n</code></pre> <p>If <code>inc</code> is nonzero, but cannot produce progress towards <code>max</code> because of its sign, the <code>Range</code> is considered empty and will not produce any iterations. The <code>Range</code> is also empty if either <code>min</code> equals <code>max</code>, independent of the value of <code>inc</code>, or if <code>inc</code> is zero.</p> <pre><code>let empty_range1 = Range(0, 10, -1)\nlet empty_range2 = Range(0, 10, 0)\nlet empty_range3 = Range(10, 10)\nempty_range1.is_empty() == true\nempty_range2.is_empty() == true\nempty_range3.is_empty() == true\n</code></pre> <p>Note that when using unsigned integers, a negative literal wraps around so while <code>Range[ISize](0, 10, -1)</code> is empty as above, <code>Range[USize](0, 10, -1)</code> produces a single value of <code>min</code> or <code>[0]</code> here.</p> <p>When using <code>Range</code> with floating point types (<code>F32</code> and <code>F64</code>) <code>inc</code> steps &lt; 1.0 are possible. If any arguments contains NaN, the <code>Range</code> is considered empty. It is also empty if the lower bound <code>min</code> or the step <code>inc</code> are +Inf or -Inf. However, if only the upper bound <code>max</code> is +Inf or -Inf and the step parameter <code>inc</code> has the same sign, then the <code>Range</code> is considered infinite and will iterate indefinitely.</p> <pre><code>let p_inf: F64 = F64.max_value() + F64.max_value()\nlet n_inf: F64 = -p_inf\nlet nan: F64 = F64(0) / F64(0)\n\nlet infinite_range1 = Range[F64](0, p_inf, 1)\nlet infinite_range2 = Range[F64](0, n_inf, -1_000_000)\ninfinite_range1.is_infinite() == true\ninfinite_range2.is_infinite() == true\n\nfor i in Range[F64](0.5, 100, nan) do\n  // will not be executed as `inc` is nan\nend\nfor i in Range[F64](0.5, 100, p_inf) do\n  // will not be executed as `inc` is +Inf\nend\n</code></pre> <pre><code>class ref Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n</code></pre>"},{"location":"collections-Range/#implements","title":"Implements","text":"<ul> <li>Iterator[A] ref</li> </ul>"},{"location":"collections-Range/#constructors","title":"Constructors","text":""},{"location":"collections-Range/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  min: A,\n  max: A,\n  inc: A = 1)\n: Range[A] ref^\n</code></pre>"},{"location":"collections-Range/#parameters","title":"Parameters","text":"<ul> <li>min: A</li> <li>max: A</li> <li>inc: A = 1</li> </ul>"},{"location":"collections-Range/#returns","title":"Returns","text":"<ul> <li>Range[A] ref^</li> </ul>"},{"location":"collections-Range/#public-functions","title":"Public Functions","text":""},{"location":"collections-Range/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: A ?\n</code></pre>"},{"location":"collections-Range/#returns_2","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"collections-Range/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: None val\n</code></pre>"},{"location":"collections-Range/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Range/#is_infinite","title":"is_infinite","text":"<p>[Source]</p> <pre><code>fun box is_infinite()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/#is_empty","title":"is_empty","text":"<p>[Source]</p> <pre><code>fun box is_empty()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Reverse/","title":"Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Produces a decreasing range [max, min] with step <code>dec</code>, for any <code>Number</code> type. (i.e. the reverse of <code>Range</code>)</p> <p>Example program: </p> <p><pre><code>use \"collections\"\nactor Main\n  new create(env: Env) =&gt;\n    for e in Reverse(10, 2, 2) do\n      env.out.print(e.string())\n    end \n</code></pre> Which outputs:  <pre><code>10\n8\n6\n4\n2\n</code></pre></p> <p>If <code>dec</code> is 0, produces an infinite series of <code>max</code>.</p> <p>If <code>dec</code> is negative, produces a range with <code>max</code> as the only value.</p> <pre><code>class ref Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n</code></pre>"},{"location":"collections-Reverse/#implements","title":"Implements","text":"<ul> <li>Iterator[A] ref</li> </ul>"},{"location":"collections-Reverse/#constructors","title":"Constructors","text":""},{"location":"collections-Reverse/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  max: A,\n  min: A,\n  dec: A = 1)\n: Reverse[A] ref^\n</code></pre>"},{"location":"collections-Reverse/#parameters","title":"Parameters","text":"<ul> <li>max: A</li> <li>min: A</li> <li>dec: A = 1</li> </ul>"},{"location":"collections-Reverse/#returns","title":"Returns","text":"<ul> <li>Reverse[A] ref^</li> </ul>"},{"location":"collections-Reverse/#public-functions","title":"Public Functions","text":""},{"location":"collections-Reverse/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-Reverse/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Reverse/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: A\n</code></pre>"},{"location":"collections-Reverse/#returns_2","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"collections-Reverse/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: None val\n</code></pre>"},{"location":"collections-Reverse/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-RingBuffer/","title":"RingBuffer[A: A]","text":"<p>[Source]</p> <p>A ring buffer.</p> <pre><code>class ref RingBuffer[A: A]\n</code></pre>"},{"location":"collections-RingBuffer/#constructors","title":"Constructors","text":""},{"location":"collections-RingBuffer/#create","title":"create","text":"<p>[Source]</p> <p>Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2.</p> <pre><code>new ref create(\n  len: USize val)\n: RingBuffer[A] ref^\n</code></pre>"},{"location":"collections-RingBuffer/#parameters","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-RingBuffer/#returns","title":"Returns","text":"<ul> <li>RingBuffer[A] ref^</li> </ul>"},{"location":"collections-RingBuffer/#public-functions","title":"Public Functions","text":""},{"location":"collections-RingBuffer/#head","title":"head","text":"<p>[Source]</p> <p>The first read that will succeed. If nothing has been written to the ring, this will raise an error.</p> <pre><code>fun box head()\n: USize val ?\n</code></pre>"},{"location":"collections-RingBuffer/#returns_1","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-RingBuffer/#size","title":"size","text":"<p>[Source]</p> <p>The number of elements that have been added to the ring.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-RingBuffer/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the ring.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-RingBuffer/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error.</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-RingBuffer/#parameters_1","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-RingBuffer/#returns_4","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-RingBuffer/#push","title":"push","text":"<p>[Source]</p> <p>Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped.</p> <pre><code>fun ref push(\n  value: A)\n: Bool val\n</code></pre>"},{"location":"collections-RingBuffer/#parameters_2","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-RingBuffer/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-RingBuffer/#clear","title":"clear","text":"<p>[Source]</p> <p>Clear the queue.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Set/","title":"Set[A: (Hashable #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>type Set[A: (Hashable #read &amp; Equatable[A] #read)] is\n  HashSet[A, HashEq[A] val] ref\n</code></pre></p>"},{"location":"collections-Set/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashEq[A] val] ref</li> </ul>"},{"location":"collections-SetIs/","title":"SetIs[A: A]","text":"<p>[Source] <pre><code>type SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref\n</code></pre></p>"},{"location":"collections-SetIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashIs[A!] val] ref</li> </ul>"},{"location":"collections-SetValues/","title":"SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]","text":"<p>[Source]</p> <p>An iterator over the values in a set.</p> <pre><code>class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S-&gt;A] ref\n</code></pre>"},{"location":"collections-SetValues/#implements","title":"Implements","text":"<ul> <li>Iterator[S-&gt;A] ref</li> </ul>"},{"location":"collections-SetValues/#constructors","title":"Constructors","text":""},{"location":"collections-SetValues/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given set.</p> <pre><code>new ref create(\n  set: S)\n: SetValues[A, H, S] ref^\n</code></pre>"},{"location":"collections-SetValues/#parameters","title":"Parameters","text":"<ul> <li>set: S</li> </ul>"},{"location":"collections-SetValues/#returns","title":"Returns","text":"<ul> <li>SetValues[A, H, S] ref^</li> </ul>"},{"location":"collections-SetValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-SetValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the set.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-SetValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-SetValues/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values.</p> <pre><code>fun ref next()\n: S-&gt;A ?\n</code></pre>"},{"location":"collections-SetValues/#returns_2","title":"Returns","text":"<ul> <li>S-&gt;A ?</li> </ul>"},{"location":"collections-Sort/","title":"Sort[A: Seq[B] ref, B: Comparable[B] #read]","text":"<p>[Source]</p> <p>Implementation of dual-pivot quicksort.  It operates in-place on the provided Seq, using  a small amount of additional memory. The nature of the element-realation is expressed via  the supplied comparator.</p> <p>(The following is paraphrased from Wikipedia.)</p> <p>Quicksort is a common implementation of a sort algorithm which can sort items of any type  for which a \"less-than\" relation (formally, a total order) is defined. </p> <p>On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case,  it makes O(n2) comparisons, though this behavior is rare.  Multi-pivot implementations  (of which dual-pivot is one) make efficient use of modern processor caches.</p>"},{"location":"collections-Sort/#example-program","title":"Example program","text":"<p>The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"),  and sorts it in place alphabetically using the default String Comparator.</p> <p>It outputs:</p> <p>first second third</p> <pre><code>use \"collections\"\n\nactor Main \n  new create(env:Env) =&gt; \n    let array = [ \"third\"; \"second\"; \"first\" ]\n    let sorted_array = Sort[Array[String], String](array)\n    for e in sorted_array.values() do\n      env.out.print(e) // prints \"first \\n second \\n third\"\n    end\n</code></pre> <pre><code>primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]\n</code></pre>"},{"location":"collections-Sort/#constructors","title":"Constructors","text":""},{"location":"collections-Sort/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Sort[A, B] val^\n</code></pre>"},{"location":"collections-Sort/#returns","title":"Returns","text":"<ul> <li>Sort[A, B] val^</li> </ul>"},{"location":"collections-Sort/#public-functions","title":"Public Functions","text":""},{"location":"collections-Sort/#apply","title":"apply","text":"<p>[Source]</p> <p>Sort the given seq.</p> <pre><code>fun box apply(\n  a: A)\n: A^\n</code></pre>"},{"location":"collections-Sort/#parameters","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-Sort/#returns_1","title":"Returns","text":"<ul> <li>A^</li> </ul>"},{"location":"collections-Sort/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Sort[A, B] val)\n: Bool val\n</code></pre>"},{"location":"collections-Sort/#parameters_1","title":"Parameters","text":"<ul> <li>that: Sort[A, B] val</li> </ul>"},{"location":"collections-Sort/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Sort/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Sort[A, B] val)\n: Bool val\n</code></pre>"},{"location":"collections-Sort/#parameters_2","title":"Parameters","text":"<ul> <li>that: Sort[A, B] val</li> </ul>"},{"location":"collections-Sort/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent--index/","title":"Persistent Collections Package","text":"<p><code>List</code> - A persistent list with functional transformations.</p> <p><code>Map</code> - A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju.</p> <p><code>Set</code> - A persistent set implemented as a persistent map of an alias of a type to itself.</p> <p><code>Vec</code> - A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell.</p>"},{"location":"collections-persistent--index/#public-types","title":"Public Types","text":"<ul> <li>class Cons</li> <li>class HashMap</li> <li>class HashSet</li> <li>type List</li> <li>primitive Lists</li> <li>type Map</li> <li>type MapIs</li> <li>class MapKeys</li> <li>class MapPairs</li> <li>class MapValues</li> <li>primitive Nil</li> <li>type Set</li> <li>type SetIs</li> <li>class Vec</li> <li>class VecKeys</li> <li>class VecPairs</li> <li>class VecValues</li> </ul>"},{"location":"collections-persistent-Cons/","title":"Cons[A: A]","text":"<p>[Source]</p> <p>A list with a head and a tail, where the tail can be empty.</p> <pre><code>class val Cons[A: A] is\n  ReadSeq[val-&gt;A] box\n</code></pre>"},{"location":"collections-persistent-Cons/#implements","title":"Implements","text":"<ul> <li>ReadSeq[val-&gt;A] box</li> </ul>"},{"location":"collections-persistent-Cons/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-Cons/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  a: val-&gt;A,\n  t: (Cons[A] val | Nil[A] val))\n: Cons[A] val^\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters","title":"Parameters","text":"<ul> <li>a: val-&gt;A</li> <li>t: (Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#returns","title":"Returns","text":"<ul> <li>Cons[A] val^</li> </ul>"},{"location":"collections-persistent-Cons/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-Cons/#size","title":"size","text":"<p>[Source]</p> <p>Returns the size of the list.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-Cons/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the list. Errors if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_1","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-persistent-Cons/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-Cons/#values","title":"values","text":"<p>[Source]</p> <p>Returns an iterator over the elements of the list.</p> <pre><code>fun box values()\n: Iterator[val-&gt;A] ref^\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_3","title":"Returns","text":"<ul> <li>Iterator[val-&gt;A] ref^</li> </ul>"},{"location":"collections-persistent-Cons/#is_empty","title":"is_empty","text":"<p>[Source]</p> <p>Returns a Bool indicating if the list is empty.</p> <pre><code>fun box is_empty()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Cons/#is_non_empty","title":"is_non_empty","text":"<p>[Source]</p> <p>Returns a Bool indicating if the list is non-empty.</p> <pre><code>fun box is_non_empty()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Cons/#head","title":"head","text":"<p>[Source]</p> <p>Returns the head of the list.</p> <pre><code>fun box head()\n: val-&gt;A\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_6","title":"Returns","text":"<ul> <li>val-&gt;A</li> </ul>"},{"location":"collections-persistent-Cons/#tail","title":"tail","text":"<p>[Source]</p> <p>Returns the tail of the list.</p> <pre><code>fun box tail()\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_7","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Builds a new list by reversing the elements in the list.</p> <pre><code>fun val reverse()\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_8","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#prepend","title":"prepend","text":"<p>[Source]</p> <p>Builds a new list with an element added to the front of this list.</p> <pre><code>fun val prepend(\n  a: val-&gt;A!)\n: Cons[A] val\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_2","title":"Parameters","text":"<ul> <li>a: val-&gt;A!</li> </ul>"},{"location":"collections-persistent-Cons/#returns_9","title":"Returns","text":"<ul> <li>Cons[A] val</li> </ul>"},{"location":"collections-persistent-Cons/#concat","title":"concat","text":"<p>[Source]</p> <p>Builds a new list that is the concatenation of this list and the provided list.</p> <pre><code>fun val concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_3","title":"Parameters","text":"<ul> <li>l: (Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#returns_10","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#mapb-b","title":"map[B: B]","text":"<p>[Source]</p> <p>Builds a new list by applying a function to every member of the list.</p> <pre><code>fun val map[B: B](\n  f: {(val-&gt;A): val-&gt;B}[A, B] box)\n: (Cons[B] val | Nil[B] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_4","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): val-&gt;B}[A, B] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_11","title":"Returns","text":"<ul> <li>(Cons[B] val | Nil[B] val)</li> </ul>"},{"location":"collections-persistent-Cons/#flat_mapb-b","title":"flat_map[B: B]","text":"<p>[Source]</p> <p>Builds a new list by applying a function to every member of the list and using the elements of the resulting lists.</p> <pre><code>fun val flat_map[B: B](\n  f: {(val-&gt;A): List[B]}[A, B] box)\n: (Cons[B] val | Nil[B] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_5","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): List[B]}[A, B] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_12","title":"Returns","text":"<ul> <li>(Cons[B] val | Nil[B] val)</li> </ul>"},{"location":"collections-persistent-Cons/#for_each","title":"for_each","text":"<p>[Source]</p> <p>Applies the supplied function to every element of the list in order.</p> <pre><code>fun val for_each(\n  f: {(val-&gt;A)}[A] box)\n: None val\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_6","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A)}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-persistent-Cons/#filter","title":"filter","text":"<p>[Source]</p> <p>Builds a new list with those elements that satisfy a provided predicate.</p> <pre><code>fun val filter(\n  f: {(val-&gt;A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_7","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_14","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#foldb-b","title":"fold[B: B]","text":"<p>[Source]</p> <p>Folds the elements of the list using the supplied function.</p> <pre><code>fun val fold[B: B](\n  f: {(B, val-&gt;A): B^}[A, B] box,\n  acc: B)\n: B\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_8","title":"Parameters","text":"<ul> <li>f: {(B, val-&gt;A): B^}[A, B] box</li> <li>acc: B</li> </ul>"},{"location":"collections-persistent-Cons/#returns_15","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-persistent-Cons/#every","title":"every","text":"<p>[Source]</p> <p>Returns true if every element satisfies the provided predicate, false otherwise.</p> <pre><code>fun val every(\n  f: {(val-&gt;A): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_9","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Cons/#exists","title":"exists","text":"<p>[Source]</p> <p>Returns true if at least one element satisfies the provided predicate, false otherwise.</p> <pre><code>fun val exists(\n  f: {(val-&gt;A): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_10","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Cons/#partition","title":"partition","text":"<p>[Source]</p> <p>Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not.</p> <pre><code>fun val partition(\n  f: {(val-&gt;A): Bool}[A] box)\n: ((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_11","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_18","title":"Returns","text":"<ul> <li>((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))</li> </ul>"},{"location":"collections-persistent-Cons/#drop","title":"drop","text":"<p>[Source]</p> <p>Builds a list by dropping the first n elements.</p> <pre><code>fun val drop(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_12","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Cons/#returns_19","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#drop_while","title":"drop_while","text":"<p>[Source]</p> <p>Builds a list by dropping elements from the front of the list until one fails to satisfy the provided predicate.</p> <pre><code>fun val drop_while(\n  f: {(val-&gt;A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_13","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_20","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#take","title":"take","text":"<p>[Source]</p> <p>Builds a list of the first n elements.</p> <pre><code>fun val take(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_14","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Cons/#returns_21","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#take_while","title":"take_while","text":"<p>[Source]</p> <p>Builds a list of elements satisfying the provided predicate until one does not.</p> <pre><code>fun val take_while(\n  f: {(val-&gt;A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_15","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_22","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-HashMap/","title":"HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]","text":"<p>[Source]</p> <p>A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju</p>"},{"location":"collections-persistent-HashMap/#usage","title":"Usage","text":"<pre><code>use \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =&gt;\n    try\n      let m1 = Map[String, U32] // {}\n      // Update returns a new map with the provided key set\n      // to the provided value. The old map is unchanged.\n      let m2 = m1(\"a\") = 5 // {a: 5}\n      let m3 = m2(\"b\") = 10 // {a: 5, b: 10}\n      let m4 = m3.remove(\"a\")? // {b: 10}\n      // You can create a new map from key value pairs.\n      let m5 = Map[String, U32].concat([(\"a\", 2); (\"b\", 3)].values()) // {a: 2, b: 3}\n    end\n</code></pre> <pre><code>class val HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]\n</code></pre>"},{"location":"collections-persistent-HashMap/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-HashMap/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashMap[K, V, H] val^\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val^</li> </ul>"},{"location":"collections-persistent-HashMap/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-HashMap/#apply","title":"apply","text":"<p>[Source]</p> <p>Attempt to get the value corresponding to k.</p> <pre><code>fun val apply(\n  k: K)\n: val-&gt;V ?\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters","title":"Parameters","text":"<ul> <li>k: K</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_1","title":"Returns","text":"<ul> <li>val-&gt;V ?</li> </ul>"},{"location":"collections-persistent-HashMap/#size","title":"size","text":"<p>[Source]</p> <p>Return the amount of key-value pairs in the Map.</p> <pre><code>fun val size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-HashMap/#update","title":"update","text":"<p>[Source]</p> <p>Update the value associated with the provided key.</p> <pre><code>fun val update(\n  key: K,\n  value: val-&gt;V)\n: HashMap[K, V, H] val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_1","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: val-&gt;V</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_3","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-HashMap/#remove","title":"remove","text":"<p>[Source]</p> <p>Try to remove the provided key from the Map.</p> <pre><code>fun val remove(\n  k: K)\n: HashMap[K, V, H] val ?\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_2","title":"Parameters","text":"<ul> <li>k: K</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_4","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val ?</li> </ul>"},{"location":"collections-persistent-HashMap/#get_or_else","title":"get_or_else","text":"<p>[Source]</p> <p>Get the value associated with provided key if present. Otherwise, return the provided alternate value.</p> <pre><code>fun val get_or_else(\n  k: K,\n  alt: val-&gt;V)\n: val-&gt;V\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_3","title":"Parameters","text":"<ul> <li>k: K</li> <li>alt: val-&gt;V</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_5","title":"Returns","text":"<ul> <li>val-&gt;V</li> </ul>"},{"location":"collections-persistent-HashMap/#contains","title":"contains","text":"<p>[Source]</p> <p>Check whether the node contains the provided key.</p> <pre><code>fun val contains(\n  k: K)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_4","title":"Parameters","text":"<ul> <li>k: K</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashMap/#concat","title":"concat","text":"<p>[Source]</p> <p>Add the K, V pairs from the given iterator to the map.</p> <pre><code>fun val concat(\n  iter: Iterator[(val-&gt;K , val-&gt;V)] ref)\n: HashMap[K, V, H] val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_5","title":"Parameters","text":"<ul> <li>iter: Iterator[(val-&gt;K , val-&gt;V)] ref</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_7","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-HashMap/#add","title":"add","text":"<p>[Source]</p> <p>Return this Map with the given (key, value) mapping.</p> <pre><code>fun val add(\n  key: K,\n  value: val-&gt;V)\n: HashMap[K, V, H] val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_6","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: val-&gt;V</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_8","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-HashMap/#sub","title":"sub","text":"<p>[Source]</p> <p>Return this Map without the given key.</p> <pre><code>fun val sub(\n  key: K)\n: HashMap[K, V, H] val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_7","title":"Parameters","text":"<ul> <li>key: K</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_9","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-HashMap/#keys","title":"keys","text":"<p>[Source]</p> <pre><code>fun val keys()\n: MapKeys[K, V, H] ref\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns_10","title":"Returns","text":"<ul> <li>MapKeys[K, V, H] ref</li> </ul>"},{"location":"collections-persistent-HashMap/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun val values()\n: MapValues[K, V, H] ref\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns_11","title":"Returns","text":"<ul> <li>MapValues[K, V, H] ref</li> </ul>"},{"location":"collections-persistent-HashMap/#pairs","title":"pairs","text":"<p>[Source]</p> <pre><code>fun val pairs()\n: MapPairs[K, V, H] ref\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns_12","title":"Returns","text":"<ul> <li>MapPairs[K, V, H] ref</li> </ul>"},{"location":"collections-persistent-HashSet/","title":"HashSet[A: Any #share, H: HashFunction[A] val]","text":"<p>[Source]</p> <p>A set, built on top of persistent Map. This is implemented as map of an alias of a type to itself.</p> <pre><code>class val HashSet[A: Any #share, H: HashFunction[A] val] is\n  Comparable[HashSet[A, H] box] ref\n</code></pre>"},{"location":"collections-persistent-HashSet/#implements","title":"Implements","text":"<ul> <li>Comparable[HashSet[A, H] box] ref</li> </ul>"},{"location":"collections-persistent-HashSet/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-HashSet/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashSet[A, H] val^\n</code></pre>"},{"location":"collections-persistent-HashSet/#returns","title":"Returns","text":"<ul> <li>HashSet[A, H] val^</li> </ul>"},{"location":"collections-persistent-HashSet/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-HashSet/#size","title":"size","text":"<p>[Source]</p> <p>Return the number of elements in the set.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-HashSet/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-HashSet/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the value if it is in the set, otherwise raise an error.</p> <pre><code>fun box apply(\n  value: val-&gt;A)\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-HashSet/#contains","title":"contains","text":"<p>[Source]</p> <p>Check whether the set contains the value.</p> <pre><code>fun box contains(\n  value: val-&gt;A)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_1","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#add","title":"add","text":"<p>[Source]</p> <p>Return a set with the value added.</p> <pre><code>fun val add(\n  value: val-&gt;A)\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_2","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_4","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#sub","title":"sub","text":"<p>[Source]</p> <p>Return a set with the value removed.</p> <pre><code>fun val sub(\n  value: val-&gt;A)\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_3","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_5","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#op_or","title":"op_or","text":"<p>[Source]</p> <p>Return a set with the elements of both this and that.</p> <pre><code>fun val op_or(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_4","title":"Parameters","text":"<ul> <li>that: (HashSet[A, H] val | Iterator[A] ref)</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_6","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#op_and","title":"op_and","text":"<p>[Source]</p> <p>Return a set with the elements that are in both this and that.</p> <pre><code>fun val op_and(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_5","title":"Parameters","text":"<ul> <li>that: (HashSet[A, H] val | Iterator[A] ref)</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_7","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#op_xor","title":"op_xor","text":"<p>[Source]</p> <p>Return a set with elements that are in either this or that, but not both.</p> <pre><code>fun val op_xor(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_6","title":"Parameters","text":"<ul> <li>that: (HashSet[A, H] val | Iterator[A] ref)</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_8","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#without","title":"without","text":"<p>[Source]</p> <p>Return a set with the elements of this that are not in that.</p> <pre><code>fun val without(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_7","title":"Parameters","text":"<ul> <li>that: (HashSet[A, H] val | Iterator[A] ref)</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_9","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#eq","title":"eq","text":"<p>[Source]</p> <p>Return true if this and that contain the same elements.</p> <pre><code>fun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_8","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#lt","title":"lt","text":"<p>[Source]</p> <p>Return true if every element in this is also in that, and this has fewer elements than that.</p> <pre><code>fun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_9","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#le","title":"le","text":"<p>[Source]</p> <p>Return true if every element in this is also in that.</p> <pre><code>fun box le(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_10","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#gt","title":"gt","text":"<p>[Source]</p> <p>Return true if every element in that is also in this, and this has more elements than that.</p> <pre><code>fun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_11","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#ge","title":"ge","text":"<p>[Source]</p> <p>Return true if every element in that is also in this.</p> <pre><code>fun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_12","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values in the set.</p> <pre><code>fun box values()\n: Iterator[A] ref^\n</code></pre>"},{"location":"collections-persistent-HashSet/#returns_15","title":"Returns","text":"<ul> <li>Iterator[A] ref^</li> </ul>"},{"location":"collections-persistent-HashSet/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_13","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_16","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections-persistent-HashSet/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_14","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-List/","title":"List[A: A]","text":"<p>[Source]</p> <p>A persistent list with functional transformations.</p>"},{"location":"collections-persistent-List/#usage","title":"Usage","text":"<pre><code>use \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =&gt;\n    try\n      let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8)\n\n      let empty = Lists[U32].empty() // List()\n\n      // prepend() returns a new List, leaving the\n      // old list unchanged\n      let l2 = empty.prepend(3) // List(3)\n      let l3 = l2.prepend(2) // List(2, 3)\n      let l4 = l3.prepend(1) // List(1, 2, 3)\n      let l4_head = l4.head() // 1\n      let l4_tail = l4.tail() // List(2, 3)\n\n      l4_head == 1\n      Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))?\n      Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))?\n\n      let doubled = l4.map[U32]({(x) =&gt; x * 2 })\n\n      Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))?\n    end\n</code></pre> <pre><code>type List[A: A] is\n  (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-List/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/","title":"Lists[A: A]","text":"<p>[Source]</p> <p>A primitive containing helper functions for constructing and testing Lists.</p> <pre><code>primitive val Lists[A: A]\n</code></pre>"},{"location":"collections-persistent-Lists/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-Lists/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Lists[A] val^\n</code></pre>"},{"location":"collections-persistent-Lists/#returns","title":"Returns","text":"<ul> <li>Lists[A] val^</li> </ul>"},{"location":"collections-persistent-Lists/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-Lists/#empty","title":"empty","text":"<p>[Source]</p> <p>Returns an empty list.</p> <pre><code>fun box empty()\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Lists/#returns_1","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#cons","title":"cons","text":"<p>[Source]</p> <p>Returns a list that has h as a head and t as a tail.</p> <pre><code>fun box cons(\n  h: val-&gt;A,\n  t: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters","title":"Parameters","text":"<ul> <li>h: val-&gt;A</li> <li>t: (Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#returns_2","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#apply","title":"apply","text":"<p>[Source]</p> <p>Builds a new list from an Array</p> <pre><code>fun box apply(\n  arr: Array[val-&gt;A] ref)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters_1","title":"Parameters","text":"<ul> <li>arr: Array[val-&gt;A] ref</li> </ul>"},{"location":"collections-persistent-Lists/#returns_3","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#from","title":"from","text":"<p>[Source]</p> <p>Builds a new list from an iterator</p> <pre><code>fun box from(\n  iter: Iterator[val-&gt;A] ref)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters_2","title":"Parameters","text":"<ul> <li>iter: Iterator[val-&gt;A] ref</li> </ul>"},{"location":"collections-persistent-Lists/#returns_4","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#eqoptional-t-equatablet-val","title":"eq[optional T: Equatable[T] val]","text":"<p>[Source]</p> <p>Checks whether two lists are equal.</p> <pre><code>fun box eq[optional T: Equatable[T] val](\n  l1: (Cons[T] val | Nil[T] val),\n  l2: (Cons[T] val | Nil[T] val))\n: Bool val ?\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters_3","title":"Parameters","text":"<ul> <li>l1: (Cons[T] val | Nil[T] val)</li> <li>l2: (Cons[T] val | Nil[T] val)</li> </ul>"},{"location":"collections-persistent-Lists/#returns_5","title":"Returns","text":"<ul> <li>Bool val ?</li> </ul>"},{"location":"collections-persistent-Lists/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Lists[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters_4","title":"Parameters","text":"<ul> <li>that: Lists[A] val</li> </ul>"},{"location":"collections-persistent-Lists/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Map/","title":"Map[K: (Hashable val &amp; Equatable[K]), V: Any #share]","text":"<p>[Source]</p> <p>A map that uses structural equality on the key.</p> <pre><code>type Map[K: (Hashable val &amp; Equatable[K]), V: Any #share] is\n  HashMap[K, V, HashEq[K] val] val\n</code></pre>"},{"location":"collections-persistent-Map/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashEq[K] val] val</li> </ul>"},{"location":"collections-persistent-MapIs/","title":"MapIs[K: Any #share, V: Any #share]","text":"<p>[Source]</p> <p>A map that uses identity comparison on the key.</p> <pre><code>type MapIs[K: Any #share, V: Any #share] is\n  HashMap[K, V, HashIs[K] val] val\n</code></pre>"},{"location":"collections-persistent-MapIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashIs[K] val] val</li> </ul>"},{"location":"collections-persistent-MapKeys/","title":"MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]","text":"<p>[Source] <pre><code>class ref MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]\n</code></pre></p>"},{"location":"collections-persistent-MapKeys/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-MapKeys/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  m: HashMap[K, V, H] val)\n: MapKeys[K, V, H] ref^\n</code></pre>"},{"location":"collections-persistent-MapKeys/#parameters","title":"Parameters","text":"<ul> <li>m: HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-MapKeys/#returns","title":"Returns","text":"<ul> <li>MapKeys[K, V, H] ref^</li> </ul>"},{"location":"collections-persistent-MapKeys/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-MapKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-MapKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-MapKeys/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: K ?\n</code></pre>"},{"location":"collections-persistent-MapKeys/#returns_2","title":"Returns","text":"<ul> <li>K ?</li> </ul>"},{"location":"collections-persistent-MapPairs/","title":"MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]","text":"<p>[Source] <pre><code>class ref MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]\n</code></pre></p>"},{"location":"collections-persistent-MapPairs/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-MapPairs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  m: HashMap[K, V, H] val)\n: MapPairs[K, V, H] ref^\n</code></pre>"},{"location":"collections-persistent-MapPairs/#parameters","title":"Parameters","text":"<ul> <li>m: HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-MapPairs/#returns","title":"Returns","text":"<ul> <li>MapPairs[K, V, H] ref^</li> </ul>"},{"location":"collections-persistent-MapPairs/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-MapPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-MapPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-MapPairs/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: (K , V) ?\n</code></pre>"},{"location":"collections-persistent-MapPairs/#returns_2","title":"Returns","text":"<ul> <li>(K , V) ?</li> </ul>"},{"location":"collections-persistent-MapValues/","title":"MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]","text":"<p>[Source] <pre><code>class ref MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]\n</code></pre></p>"},{"location":"collections-persistent-MapValues/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-MapValues/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  m: HashMap[K, V, H] val)\n: MapValues[K, V, H] ref^\n</code></pre>"},{"location":"collections-persistent-MapValues/#parameters","title":"Parameters","text":"<ul> <li>m: HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-MapValues/#returns","title":"Returns","text":"<ul> <li>MapValues[K, V, H] ref^</li> </ul>"},{"location":"collections-persistent-MapValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-MapValues/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-MapValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-MapValues/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: val-&gt;V ?\n</code></pre>"},{"location":"collections-persistent-MapValues/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;V ?</li> </ul>"},{"location":"collections-persistent-Nil/","title":"Nil[A: A]","text":"<p>[Source]</p> <p>The empty list of As.</p> <pre><code>primitive val Nil[A: A] is\n  ReadSeq[val-&gt;A] box\n</code></pre>"},{"location":"collections-persistent-Nil/#implements","title":"Implements","text":"<ul> <li>ReadSeq[val-&gt;A] box</li> </ul>"},{"location":"collections-persistent-Nil/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-Nil/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Nil[A] val^\n</code></pre>"},{"location":"collections-persistent-Nil/#returns","title":"Returns","text":"<ul> <li>Nil[A] val^</li> </ul>"},{"location":"collections-persistent-Nil/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-Nil/#size","title":"size","text":"<p>[Source]</p> <p>Returns the size of the list.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-Nil/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the sequence. For the empty list this call will always error because any index will be out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-Nil/#values","title":"values","text":"<p>[Source]</p> <p>Returns an empty iterator over the elements of the empty list.</p> <pre><code>fun box values()\n: Iterator[val-&gt;A] ref^\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_3","title":"Returns","text":"<ul> <li>Iterator[val-&gt;A] ref^</li> </ul>"},{"location":"collections-persistent-Nil/#is_empty","title":"is_empty","text":"<p>[Source]</p> <p>Returns a Bool indicating if the list is empty.</p> <pre><code>fun box is_empty()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#is_non_empty","title":"is_non_empty","text":"<p>[Source]</p> <p>Returns a Bool indicating if the list is non-empty.</p> <pre><code>fun box is_non_empty()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#head","title":"head","text":"<p>[Source]</p> <p>Returns an error, since Nil has no head.</p> <pre><code>fun box head()\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_6","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-Nil/#tail","title":"tail","text":"<p>[Source]</p> <p>Returns an error, since Nil has no tail.</p> <pre><code>fun box tail()\n: (Cons[A] val | Nil[A] val) ?\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_7","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val) ?</li> </ul>"},{"location":"collections-persistent-Nil/#reverse","title":"reverse","text":"<p>[Source]</p> <p>The reverse of the empty list is the empty list.</p> <pre><code>fun box reverse()\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_8","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#prepend","title":"prepend","text":"<p>[Source]</p> <p>Builds a new list with an element added to the front of this list.</p> <pre><code>fun box prepend(\n  a: val-&gt;A!)\n: Cons[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_1","title":"Parameters","text":"<ul> <li>a: val-&gt;A!</li> </ul>"},{"location":"collections-persistent-Nil/#returns_9","title":"Returns","text":"<ul> <li>Cons[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#concat","title":"concat","text":"<p>[Source]</p> <p>The concatenation of any list l with the empty list is l.</p> <pre><code>fun box concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_2","title":"Parameters","text":"<ul> <li>l: (Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Nil/#returns_10","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Nil/#mapb-b","title":"map[B: B]","text":"<p>[Source]</p> <p>Mapping a function from A to B over the empty list yields the empty list of Bs.</p> <pre><code>fun box map[B: B](\n  f: {(val-&gt;A): val-&gt;B}[A, B] box)\n: Nil[B] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_3","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): val-&gt;B}[A, B] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_11","title":"Returns","text":"<ul> <li>Nil[B] val</li> </ul>"},{"location":"collections-persistent-Nil/#flat_mapb-b","title":"flat_map[B: B]","text":"<p>[Source]</p> <p>Flatmapping a function from A to B over the empty list yields the empty list of Bs.</p> <pre><code>fun box flat_map[B: B](\n  f: {(val-&gt;A): List[B]}[A, B] box)\n: Nil[B] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_4","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): List[B]}[A, B] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_12","title":"Returns","text":"<ul> <li>Nil[B] val</li> </ul>"},{"location":"collections-persistent-Nil/#for_each","title":"for_each","text":"<p>[Source]</p> <p>Applying a function to every member of the empty list is a no-op.</p> <pre><code>fun box for_each(\n  f: {(val-&gt;A)}[A] box)\n: None val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_5","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A)}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-persistent-Nil/#filter","title":"filter","text":"<p>[Source]</p> <p>Filtering the empty list yields the empty list.</p> <pre><code>fun box filter(\n  f: {(val-&gt;A): Bool}[A] box)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_6","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_14","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#foldb-b","title":"fold[B: B]","text":"<p>[Source]</p> <p>Folding over the empty list yields the initial accumulator.</p> <pre><code>fun box fold[B: B](\n  f: {(B, val-&gt;A): B^}[A, B] box,\n  acc: B)\n: B\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_7","title":"Parameters","text":"<ul> <li>f: {(B, val-&gt;A): B^}[A, B] box</li> <li>acc: B</li> </ul>"},{"location":"collections-persistent-Nil/#returns_15","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-persistent-Nil/#every","title":"every","text":"<p>[Source]</p> <p>Any predicate is true of every member of the empty list.</p> <pre><code>fun box every(\n  f: {(val-&gt;A): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_8","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#exists","title":"exists","text":"<p>[Source]</p> <p>For any predicate, there is no element that satisfies it in the empty list.</p> <pre><code>fun box exists(\n  f: {(val-&gt;A): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_9","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#partition","title":"partition","text":"<p>[Source]</p> <p>The only partition of the empty list is two empty lists.</p> <pre><code>fun box partition(\n  f: {(val-&gt;A): Bool}[A] box)\n: (Nil[A] val , Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_10","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_18","title":"Returns","text":"<ul> <li>(Nil[A] val , Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Nil/#drop","title":"drop","text":"<p>[Source]</p> <p>There are no elements to drop from the empty list.</p> <pre><code>fun box drop(\n  n: USize val)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_11","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_19","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#drop_while","title":"drop_while","text":"<p>[Source]</p> <p>There are no elements to drop from the empty list.</p> <pre><code>fun box drop_while(\n  f: {(val-&gt;A): Bool}[A] box)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_12","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_20","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#take","title":"take","text":"<p>[Source]</p> <p>There are no elements to take from the empty list.</p> <pre><code>fun box take(\n  n: USize val)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_13","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_21","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#take_while","title":"take_while","text":"<p>[Source]</p> <p>There are no elements to take from the empty list.</p> <pre><code>fun box take_while(\n  f: {(val-&gt;A): Bool}[A] box)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_14","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_22","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#containsoptional-t-a-haseqa-read","title":"contains[optional T: (A &amp; HasEq[A!] #read)]","text":"<p>[Source]</p> <pre><code>fun val contains[optional T: (A &amp; HasEq[A!] #read)](\n  a: val-&gt;T)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_15","title":"Parameters","text":"<ul> <li>a: val-&gt;T</li> </ul>"},{"location":"collections-persistent-Nil/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Nil[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_16","title":"Parameters","text":"<ul> <li>that: Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Nil[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_17","title":"Parameters","text":"<ul> <li>that: Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Set/","title":"Set[A: (Hashable val &amp; Equatable[A])]","text":"<p>[Source] <pre><code>type Set[A: (Hashable val &amp; Equatable[A])] is\n  HashSet[A, HashEq[A] val] val\n</code></pre></p>"},{"location":"collections-persistent-Set/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashEq[A] val] val</li> </ul>"},{"location":"collections-persistent-SetIs/","title":"SetIs[A: Any #share]","text":"<p>[Source] <pre><code>type SetIs[A: Any #share] is\n  HashSet[A, HashIs[A] val] val\n</code></pre></p>"},{"location":"collections-persistent-SetIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashIs[A] val] val</li> </ul>"},{"location":"collections-persistent-Vec/","title":"Vec[A: Any #share]","text":"<p>[Source]</p> <p>A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell.</p> <pre><code>class val Vec[A: Any #share]\n</code></pre>"},{"location":"collections-persistent-Vec/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-Vec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Vec[A] val^\n</code></pre>"},{"location":"collections-persistent-Vec/#returns","title":"Returns","text":"<ul> <li>Vec[A] val^</li> </ul>"},{"location":"collections-persistent-Vec/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-Vec/#size","title":"size","text":"<p>[Source]</p> <p>Return the amount of values in the vector.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-Vec/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element, raising an error if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-persistent-Vec/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-Vec/#update","title":"update","text":"<p>[Source]</p> <p>Return a vector with the i-th element changed, raising an error if the index is out of bounds.</p> <pre><code>fun val update(\n  i: USize val,\n  value: val-&gt;A)\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_1","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-Vec/#returns_3","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#insert","title":"insert","text":"<p>[Source]</p> <p>Return a vector with an element inserted. Elements after this are moved up by one index, extending the vector. An out of bounds index raises an error.</p> <pre><code>fun val insert(\n  i: USize val,\n  value: val-&gt;A)\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_2","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-Vec/#returns_4","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#delete","title":"delete","text":"<p>[Source]</p> <p>Return a vector with an element deleted. Elements after this are moved down by one index, compacting the vector. An out of bounds index raises an error.</p> <pre><code>fun val delete(\n  i: USize val)\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_3","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-persistent-Vec/#returns_5","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#remove","title":"remove","text":"<p>[Source]</p> <p>Return a vector with n elements removed, beginning at index i.</p> <pre><code>fun val remove(\n  i: USize val,\n  n: USize val)\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_4","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Vec/#returns_6","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#push","title":"push","text":"<p>[Source]</p> <p>Return a vector with the value added to the end.</p> <pre><code>fun val push(\n  value: val-&gt;A)\n: Vec[A] val\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_5","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-Vec/#returns_7","title":"Returns","text":"<ul> <li>Vec[A] val</li> </ul>"},{"location":"collections-persistent-Vec/#pop","title":"pop","text":"<p>[Source]</p> <p>Return a vector with the value at the end removed.</p> <pre><code>fun val pop()\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_8","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#concat","title":"concat","text":"<p>[Source]</p> <p>Return a vector with the values of the given iterator added to the end.</p> <pre><code>fun val concat(\n  iter: Iterator[val-&gt;A] ref)\n: Vec[A] val\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_6","title":"Parameters","text":"<ul> <li>iter: Iterator[val-&gt;A] ref</li> </ul>"},{"location":"collections-persistent-Vec/#returns_9","title":"Returns","text":"<ul> <li>Vec[A] val</li> </ul>"},{"location":"collections-persistent-Vec/#find","title":"find","text":"<p>[Source]</p> <p>Find the <code>nth</code> appearance of <code>value</code> from the beginning of the vector, starting at <code>offset</code> and examining higher indices, and using the supplied <code>predicate</code> for comparisons. Returns the index of the value, or raise an error if the value isn't present.</p> <p>By default, the search starts at the first element of the vector, returns the first instance of <code>value</code> found, and uses object identity for comparison.</p> <pre><code>fun val find(\n  value: val-&gt;A,\n  offset: USize val = 0,\n  nth: USize val = 0,\n  predicate: {(A, A): Bool}[A] val = lambda)\n: USize val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_7","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> <li>offset: USize val = 0</li> <li>nth: USize val = 0</li> <li>predicate: {(A, A): Bool}[A] val = lambda</li> </ul>"},{"location":"collections-persistent-Vec/#returns_10","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-persistent-Vec/#contains","title":"contains","text":"<p>[Source]</p> <p>Returns true if the vector contains <code>value</code>, false otherwise.</p> <pre><code>fun val contains(\n  value: val-&gt;A,\n  predicate: {(A, A): Bool}[A] val = lambda)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_8","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> <li>predicate: {(A, A): Bool}[A] val = lambda</li> </ul>"},{"location":"collections-persistent-Vec/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Vec/#slice","title":"slice","text":"<p>[Source]</p> <p>Return a vector that is a clone of a portion of this vector. The range is exclusive and saturated.</p> <pre><code>fun val slice(\n  from: USize val = 0,\n  to: USize val = call,\n  step: USize val = 1)\n: Vec[A] val\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_9","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> <li>step: USize val = 1</li> </ul>"},{"location":"collections-persistent-Vec/#returns_12","title":"Returns","text":"<ul> <li>Vec[A] val</li> </ul>"},{"location":"collections-persistent-Vec/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Return a vector with the elements in reverse order.</p> <pre><code>fun val reverse()\n: Vec[A] val\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_13","title":"Returns","text":"<ul> <li>Vec[A] val</li> </ul>"},{"location":"collections-persistent-Vec/#keys","title":"keys","text":"<p>[Source]</p> <p>Return an iterator over the indices in the vector.</p> <pre><code>fun val keys()\n: VecKeys[A] ref^\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_14","title":"Returns","text":"<ul> <li>VecKeys[A] ref^</li> </ul>"},{"location":"collections-persistent-Vec/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values in the vector.</p> <pre><code>fun val values()\n: VecValues[A] ref^\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_15","title":"Returns","text":"<ul> <li>VecValues[A] ref^</li> </ul>"},{"location":"collections-persistent-Vec/#pairs","title":"pairs","text":"<p>[Source]</p> <p>Return an iterator over the (index, value) pairs in the vector.</p> <pre><code>fun val pairs()\n: VecPairs[A] ref^\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_16","title":"Returns","text":"<ul> <li>VecPairs[A] ref^</li> </ul>"},{"location":"collections-persistent-VecKeys/","title":"VecKeys[A: Any #share]","text":"<p>[Source] <pre><code>class ref VecKeys[A: Any #share]\n</code></pre></p>"},{"location":"collections-persistent-VecKeys/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-VecKeys/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  v: Vec[A] val)\n: VecKeys[A] ref^\n</code></pre>"},{"location":"collections-persistent-VecKeys/#parameters","title":"Parameters","text":"<ul> <li>v: Vec[A] val</li> </ul>"},{"location":"collections-persistent-VecKeys/#returns","title":"Returns","text":"<ul> <li>VecKeys[A] ref^</li> </ul>"},{"location":"collections-persistent-VecKeys/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-VecKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-VecKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-VecKeys/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: USize val ?\n</code></pre>"},{"location":"collections-persistent-VecKeys/#returns_2","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-persistent-VecPairs/","title":"VecPairs[A: Any #share]","text":"<p>[Source] <pre><code>class ref VecPairs[A: Any #share]\n</code></pre></p>"},{"location":"collections-persistent-VecPairs/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-VecPairs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  v: Vec[A] val)\n: VecPairs[A] ref^\n</code></pre>"},{"location":"collections-persistent-VecPairs/#parameters","title":"Parameters","text":"<ul> <li>v: Vec[A] val</li> </ul>"},{"location":"collections-persistent-VecPairs/#returns","title":"Returns","text":"<ul> <li>VecPairs[A] ref^</li> </ul>"},{"location":"collections-persistent-VecPairs/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-VecPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-VecPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-VecPairs/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: (USize val , A) ?\n</code></pre>"},{"location":"collections-persistent-VecPairs/#returns_2","title":"Returns","text":"<ul> <li>(USize val , A) ?</li> </ul>"},{"location":"collections-persistent-VecValues/","title":"VecValues[A: Any #share]","text":"<p>[Source] <pre><code>class ref VecValues[A: Any #share]\n</code></pre></p>"},{"location":"collections-persistent-VecValues/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-VecValues/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  v: Vec[A] val)\n: VecValues[A] ref^\n</code></pre>"},{"location":"collections-persistent-VecValues/#parameters","title":"Parameters","text":"<ul> <li>v: Vec[A] val</li> </ul>"},{"location":"collections-persistent-VecValues/#returns","title":"Returns","text":"<ul> <li>VecValues[A] ref^</li> </ul>"},{"location":"collections-persistent-VecValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-VecValues/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-VecValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-VecValues/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-VecValues/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"debug--index/","title":"Debug package","text":"<p>Provides facilities to create output to either <code>STDOUT</code> or <code>STDERR</code> that will only appear when the platform is debug configured. To create a binary with debug configured, pass the <code>-d</code> flag to <code>ponyc</code> when compiling e.g.:</p> <p><code>ponyc -d</code></p>"},{"location":"debug--index/#example-code","title":"Example code","text":"<pre><code>use \"debug\"\n\nactor Main\n  new create(env: Env) =&gt;\n    Debug.out(\"This will only be seen when configured for debug info\")\n    env.out.print(\"This will always be seen\")\n</code></pre>"},{"location":"debug--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Debug</li> <li>primitive DebugErr</li> <li>primitive DebugOut</li> <li>type DebugStream</li> </ul>"},{"location":"debug-Debug/","title":"Debug","text":"<p>[Source]</p> <p>This is a debug only print utility.</p> <pre><code>primitive val Debug\n</code></pre>"},{"location":"debug-Debug/#constructors","title":"Constructors","text":""},{"location":"debug-Debug/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Debug val^\n</code></pre>"},{"location":"debug-Debug/#returns","title":"Returns","text":"<ul> <li>Debug val^</li> </ul>"},{"location":"debug-Debug/#public-functions","title":"Public Functions","text":""},{"location":"debug-Debug/#apply","title":"apply","text":"<p>[Source]</p> <p>If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout.</p> <pre><code>fun box apply(\n  msg: (Stringable box | ReadSeq[Stringable box] box),\n  sep: String val = \", \",\n  stream: (DebugOut val | DebugErr val) = reference)\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters","title":"Parameters","text":"<ul> <li>msg: (Stringable box | ReadSeq[Stringable box] box)</li> <li>sep: String val = \", \"</li> <li>stream: (DebugOut val | DebugErr val) = reference</li> </ul>"},{"location":"debug-Debug/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#out","title":"out","text":"<p>[Source]</p> <p>If platform is debug configured, print message to standard output</p> <pre><code>fun box out(\n  msg: Stringable box = \"\")\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters_1","title":"Parameters","text":"<ul> <li>msg: Stringable box = \"\"</li> </ul>"},{"location":"debug-Debug/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#err","title":"err","text":"<p>[Source]</p> <p>If platform is debug configured, print message to standard error</p> <pre><code>fun box err(\n  msg: Stringable box = \"\")\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters_2","title":"Parameters","text":"<ul> <li>msg: Stringable box = \"\"</li> </ul>"},{"location":"debug-Debug/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Debug val)\n: Bool val\n</code></pre>"},{"location":"debug-Debug/#parameters_3","title":"Parameters","text":"<ul> <li>that: Debug val</li> </ul>"},{"location":"debug-Debug/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-Debug/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Debug val)\n: Bool val\n</code></pre>"},{"location":"debug-Debug/#parameters_4","title":"Parameters","text":"<ul> <li>that: Debug val</li> </ul>"},{"location":"debug-Debug/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugErr/","title":"DebugErr","text":"<p>[Source] <pre><code>primitive val DebugErr\n</code></pre></p>"},{"location":"debug-DebugErr/#constructors","title":"Constructors","text":""},{"location":"debug-DebugErr/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DebugErr val^\n</code></pre>"},{"location":"debug-DebugErr/#returns","title":"Returns","text":"<ul> <li>DebugErr val^</li> </ul>"},{"location":"debug-DebugErr/#public-functions","title":"Public Functions","text":""},{"location":"debug-DebugErr/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DebugErr val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugErr/#parameters","title":"Parameters","text":"<ul> <li>that: DebugErr val</li> </ul>"},{"location":"debug-DebugErr/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugErr/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DebugErr val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugErr/#parameters_1","title":"Parameters","text":"<ul> <li>that: DebugErr val</li> </ul>"},{"location":"debug-DebugErr/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugOut/","title":"DebugOut","text":"<p>[Source] <pre><code>primitive val DebugOut\n</code></pre></p>"},{"location":"debug-DebugOut/#constructors","title":"Constructors","text":""},{"location":"debug-DebugOut/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DebugOut val^\n</code></pre>"},{"location":"debug-DebugOut/#returns","title":"Returns","text":"<ul> <li>DebugOut val^</li> </ul>"},{"location":"debug-DebugOut/#public-functions","title":"Public Functions","text":""},{"location":"debug-DebugOut/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DebugOut val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugOut/#parameters","title":"Parameters","text":"<ul> <li>that: DebugOut val</li> </ul>"},{"location":"debug-DebugOut/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugOut/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DebugOut val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugOut/#parameters_1","title":"Parameters","text":"<ul> <li>that: DebugOut val</li> </ul>"},{"location":"debug-DebugOut/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugStream/","title":"DebugStream","text":"<p>[Source] <pre><code>type DebugStream is\n  (DebugOut val | DebugErr val)\n</code></pre></p>"},{"location":"debug-DebugStream/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(DebugOut val | DebugErr val)</li> </ul>"},{"location":"kiuatan--index/","title":"Kiuatan","text":"<p>Kiuatan (\"horse\" or \"pony\" in Chinook Jargon) is a library for building and running parsers in the Pony programming language.</p> <ul> <li>Kiuatan uses Parsing Expression Grammar semantics, which means:<ul> <li>Choices are ordered, i.e. the parser will always try to parse alternatives in the order they are declared.</li> <li>Sequences are greedy, i.e. the parser will not backtrack from the end of a sequence.</li> <li>You can use positive and negative lookahead that does not advance the match position to constrain greedy sequences.</li> <li>Parsers do not backtrack from successful choices.</li> </ul> </li> <li>Kiuatan parsers are \"packrat\" parsers; they memoize intermediate results, resulting in linear-time parsing.</li> <li>Parsers use Mederios et al's algorithm to handle unlimited left-recursion.</li> </ul>"},{"location":"kiuatan--index/#obtaining-kiuatan","title":"Obtaining Kiuatan","text":""},{"location":"kiuatan--index/#corral","title":"Corral","text":"<p>The easiest way to incorporate Kiuatan into your Pony project is to use Pony Corral.  Once you have it installed, <code>cd</code> to your project's directory and type:</p> <pre><code>corral add github chalcolith/kiuatan\n</code></pre> <p>This will add the library to your project.  You can then build your project with something like:</p> <pre><code>corral fetch\ncorral run -- ponyc .\n</code></pre>"},{"location":"kiuatan--index/#git","title":"Git","text":"<p>You can clone and build Kiuatan directly from GitHub (you must have Corral in your <code>PATH</code>):</p> <pre><code>git clone https://github.com/chalcolith/kiuatan.git\ncd kiuatan\nmake &amp;&amp; make test\n</code></pre> <p>To use Kiuatan in a project without Corral you will need to add <code>kiuatan/kiuatan</code> to your <code>PONYPATH</code> environment variable.</p>"},{"location":"kiuatan--index/#examples","title":"Examples","text":"<p>The Kiuatan repo contains a canonical calulator example of how to use Kiuatan: calc.</p>"},{"location":"kiuatan--index/#concepts","title":"Concepts","text":"<p>Kiuatan grammars can match over source sequences of any type that is</p> <pre><code>S: (Any #read &amp; Equatable[S])\n</code></pre> <p>The most common source type will be <code>U8</code> for parsing UTF-8 text (note that you will need to handle converting UTF-8 into normalized Unicode yourself if necessary).</p>"},{"location":"kiuatan--index/#named-rules","title":"Named Rules","text":"<p>A <code>NamedRule</code> encapsulates and names a grammatical rule that encodes a PEG rule.  To create a rule, you provide a name, a body, and an optional action.  For example, the following rule will match either <code>one two three</code> or <code>one deux three</code>.</p> <pre><code>let rule =\n  recover val\n    let ws = NamedRule[U8](\"WhiteSpace\", Star[U8](Single[U8](\" \\t\"), 1))\n    NamedRule[U8](\"OneTwoThree\",\n      Conj[U8](\n        [ Literal[U8](\"one\")\n          ws\n          Disj[U8]([ Literal[U8](\"two\"); Literal[U8](\"deux\") ])\n          ws\n          Literal[U8](\"three\")\n        ]))\n  end\n</code></pre> <p>You can build the body of a rule from the following combinator classes:</p> <ul> <li><code>Single</code>: matches a single source item.  The constructor takes a set of possibilities to match.  If you provide an empty list, this rule will match any single item.</li> <li><code>Literal</code>: matches a string of items.</li> <li><code>Conj</code>: matches a sequence of child rules.</li> <li><code>Disj</code>: matches one of a number of alternative child rules, in order.  If one of the alternatives matches, but an outer rule fails later, the parser will not backtrack to another alternative.</li> <li><code>Error</code>: will trigger an error with the given message.</li> <li><code>Look</code>: will attempt to match its child rule, but will not advance the match position.</li> <li><code>Neg</code>: will succeed if its child rule does not match, and will not advance the match position.</li> <li><code>Star</code>: will match a number of repetitions of its child rule.  You can specify a minimum or maximum number of times to match.</li> <li><code>Bind</code>: will bind the result of its child rule to an existing variable.  See the calc example for an example of how to use <code>Bind</code>.</li> <li><code>Condition</code>: will succeed only if its child matches and the given condition returns <code>true</code>.</li> </ul>"},{"location":"kiuatan--index/#recursion","title":"Recursion","text":"<p>In order to allow recursive rules, you can create a rule with no body and set its body later using the <code>set_body()</code> method:</p> <pre><code>// Add &lt;- Add Op Num | Num\n// Op &lt;- [+-]\n// Num &lt;- [0-9]+\nlet rule: NamedRule[U8] val =\n  recover val\n    let add = NamedRule[U8](\"Add\", None)\n    let num = NamedRule[U8](\"Num\", Star[U8](Single[U8](\"0123456789\"), 1))\n    let op = NamedRule[U8](\"Op\", Single[U8](\"+-\"))\n    let body = Disj[U8]([Conj[U8]([add; op; num]); num])\n    add.set_body(body)\n    add\n  end\n</code></pre> <p>Note that Kiuatan can handle both direct and indirect left-recursion.</p>"},{"location":"kiuatan--index/#source","title":"Source","text":"<p>A <code>Source</code> is a sequence of sequences of your source type.  Internally this is represented as a linked list of sequences, called \"segments\".  The idea behind this is that you can swap out individual segments of text that your <code>Parser</code> actor knows about, while maintaining the parse memo for the other segments.  This allows a text editor, for example, to handle localized changes without re-parsing the whole source file.</p>"},{"location":"kiuatan--index/#parser","title":"Parser","text":"<p>A <code>Parser</code> actor knows about the source you are parsing, and holds a memo of parsing results across parse attempts.</p> <p>In order to attempt to parse a particular sequence (or sequence of segments) of items, create a Parser actor, giving it an initial source, and then call its <code>parse</code> behaviour, passing a rule to use and a callback for when the parse either succeeds or fails:</p> <pre><code>  let segment = \"one two three\"\n  let parser = Parser[U8]([segment])\n  parser.parse(rule, {(result: Result[U8]) =&gt;\n    match result\n    | let success: Success[U8] =&gt;\n      Debug.out(\"succeeded!\")\n    | let failure: Failure[U8] =&gt;\n      Debug.out(\"failed\")\n    end\n  })\n</code></pre> <p>The generic parameters for the <code>Parser</code> actor type (and other types in Kiuatan) are as follows:</p> <ul> <li><code>S</code>: this is the \"source type\"; i.e. your <code>Source</code>s will be sequences of values of this type.</li> <li><code>D</code>: this is a \"data\" type. You can pass a value of this type to the <code>Parser.parse()</code> behaviour, and this value will be passed to your semantic <code>Action</code>s.</li> <li><code>V</code>: this is the \"result value\" type. For each successful parse result, zero or more result values (from child results) will be passed to your semantic <code>Action</code>, if present.  If a rule has no action, child result values will be combined and passed to the next highest action.</li> </ul>"},{"location":"kiuatan--index/#updating-source","title":"Updating Source","text":"<p>You can update a parser's source by calling its <code>remove_segment</code> and <code>insert_segment</code> behaviours.  The next time you initiate a parse, the parser's source will have been updated.</p>"},{"location":"kiuatan--index/#results","title":"Results","text":"<p>If a parse succeeds, the result will be of type <code>Success</code>, which represents the concrete parse tree.  You can get details about the location of the match and results from child rules.</p> <p>If a parse fails, the result will be of type <code>Failure</code>, which contains some information about the location in the source where the failure occurred, and possibly an error message.</p>"},{"location":"kiuatan--index/#actions-and-result-values","title":"Actions and Result Values","text":"<p>If you wish, you can build a more abstract parse tree using semantic <code>Action</code>s that you pass to rules.  These actions should return a \"result value\" of your desired type.  The result values from child rule successes are passed to the action.</p> <p>Actions also receive a <code>Bindings</code> map; you can access bound result values from child parses using this; you must return the map with the result of the action.</p>"},{"location":"kiuatan--index/#public-types","title":"Public Types","text":"<ul> <li>interface Action</li> <li>class Bind</li> <li>type Binding</li> <li>class Bindings</li> <li>class Cond</li> <li>class Conj</li> <li>class Disj</li> <li>class Error</li> <li>primitive ErrorMsg</li> <li>class Failure</li> <li>class Literal</li> <li>class Loc</li> <li>class Look</li> <li>class NamedRule</li> <li>class Neg</li> <li>interface ParseCallback</li> <li>actor Parser</li> <li>type Result</li> <li>trait RuleNode</li> <li>trait RuleNodeWithBody</li> <li>trait RuleNodeWithChildren</li> <li>type Segment</li> <li>class Single</li> <li>type Source</li> <li>class Star</li> <li>class Success</li> <li>class Variable</li> </ul>"},{"location":"kiuatan-Action/","title":"Action[S: S, D: Any #share, V: Any #share]","text":"<p>[Source]</p> <p>Used to assemble a custom result value.</p> <pre><code>interface val Action[S: S, D: Any #share, V: Any #share]\n</code></pre>"},{"location":"kiuatan-Action/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Action/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  data: D,\n  result: Success[S, D, V] val,\n  child_values: ReadSeq[V] val,\n  bindings: Bindings[S, D, V] val)\n: ((V | None val) , Bindings[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Action/#parameters","title":"Parameters","text":"<ul> <li>data: D</li> <li>result: Success[S, D, V] val</li> <li>child_values: ReadSeq[V] val</li> <li>bindings: Bindings[S, D, V] val</li> </ul>"},{"location":"kiuatan-Action/#returns","title":"Returns","text":"<ul> <li>((V | None val) , Bindings[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Bind/","title":"Bind[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source] <pre><code>class ref Bind[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre></p>"},{"location":"kiuatan-Bind/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Bind/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Bind/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  variable': Variable val,\n  body': RuleNode[S, D, V] box)\n: Bind[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Bind/#parameters","title":"Parameters","text":"<ul> <li>variable': Variable val</li> <li>body': RuleNode[S, D, V] box</li> </ul>"},{"location":"kiuatan-Bind/#returns","title":"Returns","text":"<ul> <li>Bind[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Bind/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-Bind/#let-variable-variable-val","title":"let variable: Variable val","text":"<p>[Source]</p>"},{"location":"kiuatan-Bind/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Bind/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Bind/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Bind/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Bind/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Bind/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Bind/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Bind/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Binding/","title":"Binding[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>type Binding[S: S, D: Any #share, V: Any #share] is\n  (Success[S, D, V] val , ReadSeq[V] val)\n</code></pre></p>"},{"location":"kiuatan-Binding/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Success[S, D, V] val , ReadSeq[V] val)</li> </ul>"},{"location":"kiuatan-Bindings/","title":"Bindings[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>class val Bindings[S: S, D: Any #share, V: Any #share]\n</code></pre></p>"},{"location":"kiuatan-Bindings/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Bindings/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Bindings[S, D, V] val^\n</code></pre>"},{"location":"kiuatan-Bindings/#returns","title":"Returns","text":"<ul> <li>Bindings[S, D, V] val^</li> </ul>"},{"location":"kiuatan-Bindings/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Bindings/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun val add(\n  variable: Variable val,\n  binding: (Success[S, D, V] val , ReadSeq[V] val))\n: Bindings[S, D, V] val\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters","title":"Parameters","text":"<ul> <li>variable: Variable val</li> <li>binding: (Success[S, D, V] val , ReadSeq[V] val)</li> </ul>"},{"location":"kiuatan-Bindings/#returns_1","title":"Returns","text":"<ul> <li>Bindings[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#result","title":"result","text":"<p>[Source]</p> <pre><code>fun val result(\n  variable: Variable val,\n  enclosing_success: Success[S, D, V] val)\n: Success[S, D, V] val ?\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters_1","title":"Parameters","text":"<ul> <li>variable: Variable val</li> <li>enclosing_success: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#returns_2","title":"Returns","text":"<ul> <li>Success[S, D, V] val ?</li> </ul>"},{"location":"kiuatan-Bindings/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun val values(\n  variable: Variable val,\n  enclosing_success: Success[S, D, V] val)\n: ReadSeq[V] val ?\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters_2","title":"Parameters","text":"<ul> <li>variable: Variable val</li> <li>enclosing_success: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#returns_3","title":"Returns","text":"<ul> <li>ReadSeq[V] val ?</li> </ul>"},{"location":"kiuatan-Bindings/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun val apply(\n  variable: Variable val,\n  enclosing_success: Success[S, D, V] val)\n: (Success[S, D, V] val , ReadSeq[V] val) ?\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters_3","title":"Parameters","text":"<ul> <li>variable: Variable val</li> <li>enclosing_success: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#returns_4","title":"Returns","text":"<ul> <li>(Success[S, D, V] val , ReadSeq[V] val) ?</li> </ul>"},{"location":"kiuatan-Bindings/#contains","title":"contains","text":"<p>[Source]</p> <pre><code>fun val contains(\n  variable: (Variable val | None val),\n  enclosing_success: Success[S, D, V] val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters_4","title":"Parameters","text":"<ul> <li>variable: (Variable val | None val)</li> <li>enclosing_success: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Cond/","title":"Cond[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source] <pre><code>class ref Cond[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre></p>"},{"location":"kiuatan-Cond/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Cond/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Cond/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  body': RuleNode[S, D, V] box,\n  cond': {(Success[S, D, V]): (Bool, (String | None))}[S, D, V] val)\n: Cond[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Cond/#parameters","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>cond': {(Success[S, D, V]): (Bool, (String | None))}[S, D, V] val</li> </ul>"},{"location":"kiuatan-Cond/#returns","title":"Returns","text":"<ul> <li>Cond[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Cond/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Cond/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Cond/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Cond/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Cond/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Cond/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Cond/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Cond/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Conj/","title":"Conj[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Matches a sequence of child rules.</p> <pre><code>class ref Conj[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithChildren[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Conj/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithChildren[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Conj/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Conj/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  children': ReadSeq[RuleNode[S, D, V] box] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: Conj[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Conj/#parameters","title":"Parameters","text":"<ul> <li>children': ReadSeq[RuleNode[S, D, V] box] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Conj/#returns","title":"Returns","text":"<ul> <li>Conj[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Conj/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Conj/#children","title":"children","text":"<p>[Source]</p> <pre><code>fun box children()\n: ReadSeq[this-&gt;RuleNode[S, D, V] box] box\n</code></pre>"},{"location":"kiuatan-Conj/#returns_1","title":"Returns","text":"<ul> <li>ReadSeq[this-&gt;RuleNode[S, D, V] box] box</li> </ul>"},{"location":"kiuatan-Conj/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Conj/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Conj/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Conj/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Conj/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Disj/","title":"Disj[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Matches one out of a list of possible alternatives.  Tries each alternative in order.  If one alternative fails, but an outer rule later fails, will not backtrack to another alternative.</p> <pre><code>class ref Disj[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithChildren[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Disj/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithChildren[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Disj/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Disj/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  children': ReadSeq[RuleNode[S, D, V] box] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: Disj[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Disj/#parameters","title":"Parameters","text":"<ul> <li>children': ReadSeq[RuleNode[S, D, V] box] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Disj/#returns","title":"Returns","text":"<ul> <li>Disj[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Disj/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Disj/#children","title":"children","text":"<p>[Source]</p> <pre><code>fun box children()\n: ReadSeq[this-&gt;RuleNode[S, D, V] box] box\n</code></pre>"},{"location":"kiuatan-Disj/#returns_1","title":"Returns","text":"<ul> <li>ReadSeq[this-&gt;RuleNode[S, D, V] box] box</li> </ul>"},{"location":"kiuatan-Disj/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Disj/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Disj/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Disj/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Disj/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Error/","title":"Error[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Will result in an error with the given message.</p> <pre><code>class ref Error[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Error/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Error/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Error/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  message': String val,\n  action': (Action[S, D, V] val | None val) = reference)\n: Error[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Error/#parameters","title":"Parameters","text":"<ul> <li>message': String val</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Error/#returns","title":"Returns","text":"<ul> <li>Error[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Error/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Error/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Error/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Error/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Error/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Error/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-ErrorMsg/","title":"ErrorMsg","text":"<p>[Source] <pre><code>primitive val ErrorMsg\n</code></pre></p>"},{"location":"kiuatan-ErrorMsg/#constructors","title":"Constructors","text":""},{"location":"kiuatan-ErrorMsg/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ErrorMsg val^\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns","title":"Returns","text":"<ul> <li>ErrorMsg val^</li> </ul>"},{"location":"kiuatan-ErrorMsg/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-ErrorMsg/#empty_source","title":"empty_source","text":"<p>[Source]</p> <pre><code>fun tag empty_source()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#literal_unexpected","title":"literal_unexpected","text":"<p>[Source]</p> <pre><code>fun tag literal_unexpected()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#literal_failed","title":"literal_failed","text":"<p>[Source]</p> <pre><code>fun tag literal_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#condition_failed","title":"condition_failed","text":"<p>[Source]</p> <pre><code>fun tag condition_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#conjunction_empty","title":"conjunction_empty","text":"<p>[Source]</p> <pre><code>fun tag conjunction_empty()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#conjunction_failed","title":"conjunction_failed","text":"<p>[Source]</p> <pre><code>fun tag conjunction_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#disjunction_empty","title":"disjunction_empty","text":"<p>[Source]</p> <pre><code>fun tag disjunction_empty()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#disjunction_failed","title":"disjunction_failed","text":"<p>[Source]</p> <pre><code>fun tag disjunction_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#disjunction_none","title":"disjunction_none","text":"<p>[Source]</p> <pre><code>fun tag disjunction_none()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#single_failed","title":"single_failed","text":"<p>[Source]</p> <pre><code>fun tag single_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#star_too_long","title":"star_too_long","text":"<p>[Source]</p> <pre><code>fun tag star_too_long()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#star_too_short","title":"star_too_short","text":"<p>[Source]</p> <pre><code>fun tag star_too_short()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#rule_expected","title":"rule_expected","text":"<p>[Source]</p> <pre><code>fun tag rule_expected(\n  name: String val,\n  loc: String val)\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#parameters","title":"Parameters","text":"<ul> <li>name: String val</li> <li>loc: String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#rule_empty","title":"rule_empty","text":"<p>[Source]</p> <pre><code>fun tag rule_empty(\n  name: String val)\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#parameters_1","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ErrorMsg val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#parameters_2","title":"Parameters","text":"<ul> <li>that: ErrorMsg val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ErrorMsg val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#parameters_3","title":"Parameters","text":"<ul> <li>that: ErrorMsg val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Failure/","title":"Failure[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>The result of a failed match.</p> <pre><code>class val Failure[S: S, optional D: Any #share, optional V: Any #share]\n</code></pre>"},{"location":"kiuatan-Failure/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Failure/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  node': RuleNode[S, D, V] val,\n  start': Loc[S] val,\n  message': (String val | None val) = reference,\n  inner': (Failure[S, D, V] val | None val) = reference)\n: Failure[S, D, V] val^\n</code></pre>"},{"location":"kiuatan-Failure/#parameters","title":"Parameters","text":"<ul> <li>node': RuleNode[S, D, V] val</li> <li>start': Loc[S] val</li> <li>message': (String val | None val) = reference</li> <li>inner': (Failure[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Failure/#returns","title":"Returns","text":"<ul> <li>Failure[S, D, V] val^</li> </ul>"},{"location":"kiuatan-Failure/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-Failure/#let-node-rulenodes-d-v-val","title":"let node: RuleNode[S, D, V] val","text":"<p>[Source]</p>"},{"location":"kiuatan-Failure/#let-start-locs-val","title":"let start: Loc[S] val","text":"<p>[Source]</p>"},{"location":"kiuatan-Failure/#let-message-string-val-none-val","title":"let message: (String val | None val)","text":"<p>[Source]</p>"},{"location":"kiuatan-Failure/#let-inner-failures-d-v-val-none-val","title":"let inner: (Failure[S, D, V] val | None val)","text":"<p>[Source]</p>"},{"location":"kiuatan-Failure/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Failure/#get_message","title":"get_message","text":"<p>[Source]</p> <pre><code>fun box get_message()\n: String val\n</code></pre>"},{"location":"kiuatan-Failure/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-Failure/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"kiuatan-Failure/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"kiuatan-Literal/","title":"Literal[S: (Any #read &amp; Equatable[S]), optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Matches a string of items.</p> <pre><code>class ref Literal[S: (Any #read &amp; Equatable[S]), optional D: Any #share, optional V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Literal/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Literal/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Literal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  expected': ReadSeq[S] val,\n  action': (Action[S, D, V] val | None val) = reference)\n: Literal[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Literal/#parameters","title":"Parameters","text":"<ul> <li>expected': ReadSeq[S] val</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Literal/#returns","title":"Returns","text":"<ul> <li>Literal[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Literal/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Literal/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Literal/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Literal/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Literal/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Literal/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Loc/","title":"Loc[S: S]","text":"<p>[Source]</p> <p>Represents a location in a <code>Source</code> at which to parse, or at which a parse has matched.</p> <pre><code>class val Loc[S: S] is\n  Hashable ref,\n  Equatable[Loc[S] val] ref,\n  Comparable[Loc[S] val] ref,\n  Stringable box\n</code></pre>"},{"location":"kiuatan-Loc/#implements","title":"Implements","text":"<ul> <li>Hashable ref</li> <li>Equatable[Loc[S] val] ref</li> <li>Comparable[Loc[S] val] ref</li> <li>Stringable box</li> </ul>"},{"location":"kiuatan-Loc/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Loc/#create","title":"create","text":"<p>[Source]</p> <p>Create a new location in the given segment.</p> <pre><code>new val create(\n  segment': (Cons[ReadSeq[S] val] val | Nil[ReadSeq[S] val] val),\n  index': USize val = 0)\n: Loc[S] val^\n</code></pre>"},{"location":"kiuatan-Loc/#parameters","title":"Parameters","text":"<ul> <li>segment': (Cons[ReadSeq[S] val] val | Nil[ReadSeq[S] val] val)</li> <li>index': USize val = 0</li> </ul>"},{"location":"kiuatan-Loc/#returns","title":"Returns","text":"<ul> <li>Loc[S] val^</li> </ul>"},{"location":"kiuatan-Loc/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Loc/#segment","title":"segment","text":"<p>[Source]</p> <pre><code>fun box segment()\n: ReadSeq[S] val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_1","title":"Returns","text":"<ul> <li>ReadSeq[S] val</li> </ul>"},{"location":"kiuatan-Loc/#index","title":"index","text":"<p>[Source]</p> <pre><code>fun box index()\n: USize val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"kiuatan-Loc/#is_in","title":"is_in","text":"<p>[Source]</p> <pre><code>fun box is_in(\n  seg: ReadSeq[S] val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_1","title":"Parameters","text":"<ul> <li>seg: ReadSeq[S] val</li> </ul>"},{"location":"kiuatan-Loc/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#has_value","title":"has_value","text":"<p>[Source]</p> <p>Returns <code>true</code> if there is actually an item at the location, i.e. if the location points to a valid place in the segment.</p> <pre><code>fun box has_value()\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the item at the location.</p> <pre><code>fun box apply()\n: val-&gt;S ?\n</code></pre>"},{"location":"kiuatan-Loc/#returns_5","title":"Returns","text":"<ul> <li>val-&gt;S ?</li> </ul>"},{"location":"kiuatan-Loc/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next location in the source.  May not be valid.</p> <pre><code>fun box next()\n: Loc[S] val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_6","title":"Returns","text":"<ul> <li>Loc[S] val</li> </ul>"},{"location":"kiuatan-Loc/#add","title":"add","text":"<p>[Source]</p> <p>Returns a location <code>n</code> places further in the source.  May not be valid.</p> <pre><code>fun box add(\n  n: USize val)\n: Loc[S] val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_2","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"kiuatan-Loc/#returns_7","title":"Returns","text":"<ul> <li>Loc[S] val</li> </ul>"},{"location":"kiuatan-Loc/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun box values(\n  nxt: (Loc[S] val | None val) = reference)\n: Iterator[val-&gt;S] ref\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_3","title":"Parameters","text":"<ul> <li>nxt: (Loc[S] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Loc/#returns_8","title":"Returns","text":"<ul> <li>Iterator[val-&gt;S] ref</li> </ul>"},{"location":"kiuatan-Loc/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns <code>true</code> if the two locations point to the same spot in the same segment.</p> <pre><code>fun box eq(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_4","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#ne","title":"ne","text":"<p>[Source]</p> <p>Returns <code>true</code> if the two locations do not point to the same spot in the same segment.</p> <pre><code>fun box ne(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_5","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#gt","title":"gt","text":"<p>[Source]</p> <p>Returns <code>true</code> if <code>this</code> is further along in the source than <code>that</code>.  Should be used sparingly, as it has to count up from <code>this</code>, possibly to the end of the source.</p> <pre><code>fun box gt(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_6","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_7","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns <code>true</code> if <code>that</code> is further along in the source than <code>this</code>.  Should be used sparingly, as it has to count up from <code>that</code>, possibly to the end of the source.</p> <pre><code>fun box lt(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_8","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_9","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"kiuatan-Loc/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"kiuatan-Loc/#returns_16","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"kiuatan-Loc/#compare","title":"compare","text":"<pre><code>fun box compare(\n  that: Loc[S] val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_10","title":"Parameters","text":"<ul> <li>that: Loc[S] val</li> </ul>"},{"location":"kiuatan-Loc/#returns_17","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"kiuatan-Look/","title":"Look[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Positive lookahead: will succeed if its child rule matches, but will not advance the match position.</p> <pre><code>class ref Look[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Look/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Look/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Look/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  body': RuleNode[S, D, V] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: Look[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Look/#parameters","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Look/#returns","title":"Returns","text":"<ul> <li>Look[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Look/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Look/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Look/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Look/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Look/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Look/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Look/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Look/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-NamedRule/","title":"NamedRule[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Represents a named grammar rule.  Memoization and left-recursion handling happens per named <code>Rule</code>.</p> <pre><code>class ref NamedRule[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-NamedRule/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-NamedRule/#constructors","title":"Constructors","text":""},{"location":"kiuatan-NamedRule/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  name': String val,\n  body': (RuleNode[S, D, V] box | None val) = reference,\n  action': (Action[S, D, V] val | None val) = reference,\n  memoize': Bool val = false)\n: NamedRule[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-NamedRule/#parameters","title":"Parameters","text":"<ul> <li>name': String val</li> <li>body': (RuleNode[S, D, V] box | None val) = reference</li> <li>action': (Action[S, D, V] val | None val) = reference</li> <li>memoize': Bool val = false</li> </ul>"},{"location":"kiuatan-NamedRule/#returns","title":"Returns","text":"<ul> <li>NamedRule[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-NamedRule/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-NamedRule/#let-name-string-val","title":"let name: String val","text":"<p>[Source]</p>"},{"location":"kiuatan-NamedRule/#let-memoize-bool-val","title":"let memoize: Bool val","text":"<p>[Source]</p>"},{"location":"kiuatan-NamedRule/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-NamedRule/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-NamedRule/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-NamedRule/#has_body","title":"has_body","text":"<p>[Source]</p> <pre><code>fun box has_body()\n: Bool val\n</code></pre>"},{"location":"kiuatan-NamedRule/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-NamedRule/#set_body","title":"set_body","text":"<p>[Source]</p> <pre><code>fun ref set_body(\n  body': RuleNode[S, D, V] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: None val\n</code></pre>"},{"location":"kiuatan-NamedRule/#parameters_1","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-NamedRule/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"kiuatan-NamedRule/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-NamedRule/#parameters_2","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-NamedRule/#returns_4","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-NamedRule/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-NamedRule/#returns_5","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Neg/","title":"Neg[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Negative lookahead: will succeed if its child rule does not match, and will not advance the match position.</p> <pre><code>class ref Neg[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Neg/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Neg/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Neg/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  body': RuleNode[S, D, V] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: Neg[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Neg/#parameters","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Neg/#returns","title":"Returns","text":"<ul> <li>Neg[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Neg/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Neg/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Neg/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Neg/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Neg/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Neg/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Neg/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Neg/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-ParseCallback/","title":"ParseCallback[S: S, D: Any #share, V: Any #share]","text":"<p>[Source]</p> <p>Used to report the results of a parse attempt.</p> <pre><code>interface val ParseCallback[S: S, D: Any #share, V: Any #share]\n</code></pre>"},{"location":"kiuatan-ParseCallback/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-ParseCallback/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  result: (Success[S, D, V] val | Failure[S, D, V] val),\n  values: ReadSeq[V] val)\n: None val\n</code></pre>"},{"location":"kiuatan-ParseCallback/#parameters","title":"Parameters","text":"<ul> <li>result: (Success[S, D, V] val | Failure[S, D, V] val)</li> <li>values: ReadSeq[V] val</li> </ul>"},{"location":"kiuatan-ParseCallback/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"kiuatan-Parser/","title":"Parser[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Stores a source of inputs to a parse, and a memo of parse results from prior parses. Used to initiate a parse attempt.</p> <pre><code>actor tag Parser[S: S, optional D: Any #share, optional V: Any #share]\n</code></pre>"},{"location":"kiuatan-Parser/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Parser/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  source: ReadSeq[ReadSeq[S] val] val)\n: Parser[S, D, V] tag^\n</code></pre>"},{"location":"kiuatan-Parser/#parameters","title":"Parameters","text":"<ul> <li>source: ReadSeq[ReadSeq[S] val] val</li> </ul>"},{"location":"kiuatan-Parser/#returns","title":"Returns","text":"<ul> <li>Parser[S, D, V] tag^</li> </ul>"},{"location":"kiuatan-Parser/#public-behaviours","title":"Public Behaviours","text":""},{"location":"kiuatan-Parser/#insert_segment","title":"insert_segment","text":"<p>[Source]</p> <p>Insert a source segment at the given index.  The insertion will happen upon the next call to <code>parse()</code>.</p> <pre><code>be insert_segment(\n  index: USize val,\n  segment: ReadSeq[S] val)\n</code></pre>"},{"location":"kiuatan-Parser/#parameters_1","title":"Parameters","text":"<ul> <li>index: USize val</li> <li>segment: ReadSeq[S] val</li> </ul>"},{"location":"kiuatan-Parser/#remove_segment","title":"remove_segment","text":"<p>[Source]</p> <p>Removes the source segment at the given index.  The removal will happen upon the next call to <code>parse()</code>.</p> <pre><code>be remove_segment(\n  index: USize val)\n</code></pre>"},{"location":"kiuatan-Parser/#parameters_2","title":"Parameters","text":"<ul> <li>index: USize val</li> </ul>"},{"location":"kiuatan-Parser/#parse","title":"parse","text":"<p>[Source]</p> <p>Initiates a parse attempt with the given rule.</p> <pre><code>be parse(\n  rule: RuleNode[S, D, V] val,\n  data: D,\n  callback: ParseCallback[S, D, V] val,\n  start: (Loc[S] val | None val) = reference,\n  clear_memo: Bool val = false)\n</code></pre>"},{"location":"kiuatan-Parser/#parameters_3","title":"Parameters","text":"<ul> <li>rule: RuleNode[S, D, V] val</li> <li>data: D</li> <li>callback: ParseCallback[S, D, V] val</li> <li>start: (Loc[S] val | None val) = reference</li> <li>clear_memo: Bool val = false</li> </ul>"},{"location":"kiuatan-Parser/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Parser/#num_segments","title":"num_segments","text":"<p>[Source]</p> <p>Returns the number of segments currently in the source.</p> <pre><code>fun box num_segments()\n: USize val\n</code></pre>"},{"location":"kiuatan-Parser/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"kiuatan-Result/","title":"Result[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>The result of a parse attempt, either successful or failed.</p> <pre><code>type Result[S: S, optional D: Any #share, optional V: Any #share] is\n  (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Result/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-RuleNode/","title":"RuleNode[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>trait ref RuleNode[S: S, D: Any #share, V: Any #share]\n</code></pre></p>"},{"location":"kiuatan-RuleNode/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-RuleNode/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-RuleNode/#parameters","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-RuleNode/#returns","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-RuleNode/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-RuleNode/#returns_1","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/","title":"RuleNodeWithBody[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>trait ref RuleNodeWithBody[S: S, D: Any #share, V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre></p>"},{"location":"kiuatan-RuleNodeWithBody/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-RuleNodeWithBody/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithBody/#returns","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithBody/#parameters","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithBody/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/","title":"RuleNodeWithChildren[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>trait ref RuleNodeWithChildren[S: S, D: Any #share, V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre></p>"},{"location":"kiuatan-RuleNodeWithChildren/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-RuleNodeWithChildren/#children","title":"children","text":"<p>[Source]</p> <pre><code>fun box children()\n: ReadSeq[this-&gt;RuleNode[S, D, V] box] box\n</code></pre>"},{"location":"kiuatan-RuleNodeWithChildren/#returns","title":"Returns","text":"<ul> <li>ReadSeq[this-&gt;RuleNode[S, D, V] box] box</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithChildren/#parameters","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithChildren/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Segment/","title":"Segment[S: S]","text":"<p>[Source] <pre><code>type Segment[S: S] is\n  ReadSeq[S] val\n</code></pre></p>"},{"location":"kiuatan-Segment/#type-alias-for","title":"Type Alias For","text":"<ul> <li>ReadSeq[S] val</li> </ul>"},{"location":"kiuatan-Single/","title":"Single[S: (Any #read &amp; Equatable[S]), optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Matches a single item.  If given a list of possibilities, will only succeed if it matches one of them.  Otherwise, it succeeds for any single item.</p> <pre><code>class ref Single[S: (Any #read &amp; Equatable[S]), optional D: Any #share, optional V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Single/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Single/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Single/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  expected': ReadSeq[S] val = array,\n  action': (Action[S, D, V] val | None val) = reference)\n: Single[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Single/#parameters","title":"Parameters","text":"<ul> <li>expected': ReadSeq[S] val = array</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Single/#returns","title":"Returns","text":"<ul> <li>Single[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Single/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Single/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Single/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Single/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Single/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Single/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Source/","title":"Source[S: S]","text":"<p>[Source] <pre><code>type Source[S: S] is\n  (Cons[ReadSeq[S] val] val | Nil[ReadSeq[S] val] val)\n</code></pre></p>"},{"location":"kiuatan-Source/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Cons[ReadSeq[S] val] val | Nil[ReadSeq[S] val] val)</li> </ul>"},{"location":"kiuatan-Star/","title":"Star[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>A generalization of Kleene star: will match from <code>min</code> to <code>max</code> repetitions of its child rule.</p> <pre><code>class ref Star[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Star/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Star/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Star/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  body': RuleNode[S, D, V] box,\n  min': USize val = 0,\n  action': (Action[S, D, V] val | None val) = reference,\n  max': USize val = call)\n: Star[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Star/#parameters","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>min': USize val = 0</li> <li>action': (Action[S, D, V] val | None val) = reference</li> <li>max': USize val = call</li> </ul>"},{"location":"kiuatan-Star/#returns","title":"Returns","text":"<ul> <li>Star[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Star/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Star/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Star/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Star/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Star/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Star/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Star/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Star/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Success/","title":"Success[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>The result of a successful parse.</p> <pre><code>class val Success[S: S, optional D: Any #share, optional V: Any #share]\n</code></pre>"},{"location":"kiuatan-Success/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Success/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  node': RuleNode[S, D, V] val,\n  start': Loc[S] val,\n  next': Loc[S] val,\n  children': ReadSeq[Success[S, D, V] val] val = recover)\n: Success[S, D, V] val^\n</code></pre>"},{"location":"kiuatan-Success/#parameters","title":"Parameters","text":"<ul> <li>node': RuleNode[S, D, V] val</li> <li>start': Loc[S] val</li> <li>next': Loc[S] val</li> <li>children': ReadSeq[Success[S, D, V] val] val = recover</li> </ul>"},{"location":"kiuatan-Success/#returns","title":"Returns","text":"<ul> <li>Success[S, D, V] val^</li> </ul>"},{"location":"kiuatan-Success/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-Success/#let-node-rulenodes-d-v-val","title":"let node: RuleNode[S, D, V] val","text":"<p>[Source]</p> <p>The rule that matched successfully.</p>"},{"location":"kiuatan-Success/#let-start-locs-val","title":"let start: Loc[S] val","text":"<p>[Source]</p> <p>The location at which the rule matched.</p>"},{"location":"kiuatan-Success/#let-next-locs-val","title":"let next: Loc[S] val","text":"<p>[Source]</p> <p>The location one past the end of the match.</p>"},{"location":"kiuatan-Success/#let-children-readseqsuccesss-d-v-val-val","title":"let children: ReadSeq[Success[S, D, V] val] val","text":"<p>[Source]</p> <p>Results from child rules' matches.</p>"},{"location":"kiuatan-Success/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Success/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Success[S, D, V] val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Success/#parameters_1","title":"Parameters","text":"<ul> <li>that: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Success/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Success/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"kiuatan-Success/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"kiuatan-Variable/","title":"Variable","text":"<p>[Source] <pre><code>class val Variable\n</code></pre></p>"},{"location":"kiuatan-Variable/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Variable/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  name': String val)\n: Variable val^\n</code></pre>"},{"location":"kiuatan-Variable/#parameters","title":"Parameters","text":"<ul> <li>name': String val</li> </ul>"},{"location":"kiuatan-Variable/#returns","title":"Returns","text":"<ul> <li>Variable val^</li> </ul>"},{"location":"kiuatan-Variable/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-Variable/#let-name-string-val","title":"let name: String val","text":"<p>[Source]</p>"},{"location":"pony_test--index/","title":"PonyTest package","text":"<p>The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests.</p> <p>To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are:</p> <ul> <li>builtin</li> <li>time</li> <li>collections</li> </ul> <p>Each unit test is a class, with a single test function. By default all tests run concurrently.</p> <p>Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail.</p> <p>When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function.</p>"},{"location":"pony_test--index/#example-program","title":"Example program","text":"<p>To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package.</p> <p>The following is a complete program with 2 trivial tests.</p> <pre><code>use \"pony_test\"\n\nactor Main is TestList\n  new create(env: Env) =&gt;\n    PonyTest(env, this)\n\n  new make() =&gt;\n    None\n\n  fun tag tests(test: PonyTest) =&gt;\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String =&gt; \"addition\"\n\n  fun apply(h: TestHelper) =&gt;\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String =&gt; \"subtraction\"\n\n  fun apply(h: TestHelper) =&gt;\n    h.assert_eq[U32](2, 4 - 2)\n</code></pre> <p>The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it.</p> <p>Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks.</p>"},{"location":"pony_test--index/#test-names","title":"Test names","text":"<p>Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code.</p> <p>Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests.</p> <p>You can skip any tests whose names start with a given string by using the <code>--exclude=[prefix]</code> command line option.</p> <p>You can run only tests whose names start with a given string by using the <code>--only=[prefix]</code> command line option.</p>"},{"location":"pony_test--index/#aggregation","title":"Aggregation","text":"<p>Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together.</p> <p>This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages <code>foo</code> and <code>bar</code>.</p> <pre><code>use \"pony_test\"\nuse bar = \"bar\"\nuse foo = \"foo\"\n\nactor Main is TestList\n  new create(env: Env) =&gt;\n    PonyTest(env, this)\n\n  new make() =&gt;\n    None\n\n  fun tag tests(test: PonyTest) =&gt;\n    bar.Main.make().tests(test)\n    foo.Main.make().tests(test)\n</code></pre> <p>Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists.</p>"},{"location":"pony_test--index/#long-tests","title":"Long tests","text":"<p>Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors.</p> <p>Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper.</p> <p>The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called.</p> <p>Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported.</p> <p>On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so.</p> <p>Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful.</p> <p>Timeouts should not be used as the standard method of detecting if a test has failed.</p>"},{"location":"pony_test--index/#exclusion-groups","title":"Exclusion groups","text":"<p>By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group.</p> <p>No tests that are in the same exclusion group will be run concurrently.</p> <p>Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests.</p> <p>The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use.</p>"},{"location":"pony_test--index/#labels","title":"Labels","text":"<p>Test can have label. Labels are used to filter which tests are run, by setting command line argument <code>--label=[some custom label]</code>. It can be used to separate unit tests from integration tests.</p> <p>By default label is empty. You can set it up by overriding <code>label(): String</code> method in unit test.</p> <pre><code>use \"pony_test\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String =&gt; \"_I8AddTest\"\n  fun label(): String =&gt; \"simple\"\n  fun apply(h: TestHelper) =&gt;\n    h.assert_eq[I8](1, 1)\n</code></pre>"},{"location":"pony_test--index/#setting-up-and-tearing-down-a-test-environment","title":"Setting up and tearing down a test environment","text":""},{"location":"pony_test--index/#set-up","title":"Set Up","text":"<p>Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up().</p> <p>set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env.</p>"},{"location":"pony_test--index/#tear-down","title":"Tear Down","text":"<p>Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test.</p> <p>The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns.</p> <p>When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test.</p> <p>The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down.</p>"},{"location":"pony_test--index/#example","title":"Example","text":"<p>The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself:</p> <pre><code>use \"pony_test\"\nuse \"files\"\n\nclass iso TempDirTest\n  var tmp_dir: (FilePath | None) = None\n\n  fun name(): String =&gt; \"temp-dir\"\n\n  fun ref set_up(h: TestHelper)? =&gt;\n    tmp_dir = FilePath.mkdtemp(FileAuth(h.env.root), \"temp-dir\")?\n\n  fun ref tear_down(h: TestHelper) =&gt;\n    try\n      (tmp_dir as FilePath).remove()\n    end\n\n  fun apply(h: TestHelper)? =&gt;\n    let dir = tmp_dir as FilePath\n    // do something inside the temporary directory\n</code></pre>"},{"location":"pony_test--index/#public-types","title":"Public Types","text":"<ul> <li>interface ITest</li> <li>actor PonyTest</li> <li>class TestHelper</li> <li>trait TestList</li> <li>trait UnitTest</li> </ul>"},{"location":"pony_test-ITest/","title":"ITest","text":"<p>[Source] <pre><code>interface ref ITest\n</code></pre></p>"},{"location":"pony_test-ITest/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-ITest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: None val ?\n</code></pre>"},{"location":"pony_test-ITest/#returns","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-PonyTest/","title":"PonyTest","text":"<p>[Source]</p> <p>Main test framework actor that organises tests, collates information and prints results.</p> <pre><code>actor tag PonyTest\n</code></pre>"},{"location":"pony_test-PonyTest/#constructors","title":"Constructors","text":""},{"location":"pony_test-PonyTest/#create","title":"create","text":"<p>[Source]</p> <p>Create a PonyTest object and use it to run the tests from the given TestList</p> <pre><code>new tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>list: TestList tag</li> </ul>"},{"location":"pony_test-PonyTest/#returns","title":"Returns","text":"<ul> <li>PonyTest tag^</li> </ul>"},{"location":"pony_test-PonyTest/#public-behaviours","title":"Public Behaviours","text":""},{"location":"pony_test-PonyTest/#apply","title":"apply","text":"<p>[Source]</p> <p>Run the given test, subject to our filters and options.</p> <pre><code>be apply(\n  test: UnitTest iso)\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters_1","title":"Parameters","text":"<ul> <li>test: UnitTest iso</li> </ul>"},{"location":"pony_test-TestHelper/","title":"TestHelper","text":"<p>[Source]</p> <p>Per unit test class that provides control, logging and assertion functions.</p> <p>Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction.</p> <p>The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails.</p> <p>All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed.</p> <pre><code>class val TestHelper\n</code></pre>"},{"location":"pony_test-TestHelper/#public-fields","title":"Public fields","text":""},{"location":"pony_test-TestHelper/#let-env-env-val","title":"let env: Env val","text":"<p>[Source]</p> <p>The process environment.</p> <p>This is useful for getting the root authority in order to access the filesystem (See files) or the network (See net) in your tests.</p>"},{"location":"pony_test-TestHelper/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-TestHelper/#log","title":"log","text":"<p>[Source]</p> <p>Log the given message.</p> <p>The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported.</p> <p>Logs are printed one test at a time to avoid interleaving log lines from concurrent tests.</p> <pre><code>fun box log(\n  msg: String val,\n  verbose: Bool val = false)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters","title":"Parameters","text":"<ul> <li>msg: String val</li> <li>verbose: Bool val = false</li> </ul>"},{"location":"pony_test-TestHelper/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#fail","title":"fail","text":"<p>[Source]</p> <p>Flag the test as having failed.</p> <pre><code>fun box fail(\n  msg: String val = \"Test failed\")\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_1","title":"Parameters","text":"<ul> <li>msg: String val = \"Test failed\"</li> </ul>"},{"location":"pony_test-TestHelper/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_true","title":"assert_true","text":"<p>[Source]</p> <p>Assert that the given expression is true.</p> <pre><code>fun box assert_true(\n  actual: Bool val,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_2","title":"Parameters","text":"<ul> <li>actual: Bool val</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_false","title":"assert_false","text":"<p>[Source]</p> <p>Assert that the given expression is false.</p> <pre><code>fun box assert_false(\n  actual: Bool val,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_3","title":"Parameters","text":"<ul> <li>actual: Bool val</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_error","title":"assert_error","text":"<p>[Source]</p> <p>Assert that the given test function throws an error when run.</p> <pre><code>fun box assert_error(\n  test: ITest box,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_4","title":"Parameters","text":"<ul> <li>test: ITest box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_no_error","title":"assert_no_error","text":"<p>[Source]</p> <p>Assert that the gived test function does not throw an error when run.</p> <pre><code>fun box assert_no_error(\n  test: ITest box,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_5","title":"Parameters","text":"<ul> <li>test: ITest box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_isa-a","title":"assert_is[A: A]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions resolve to the same instance</p> <pre><code>fun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_6","title":"Parameters","text":"<ul> <li>expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_eqa-equatablea-read-stringable-read","title":"assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions are equal.</p> <pre><code>fun box assert_eq[A: (Equatable[A] #read &amp; Stringable #read)](\n  expect: A,\n  actual: A,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_7","title":"Parameters","text":"<ul> <li>expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_isnta-a","title":"assert_isnt[A: A]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions resolve to different instances.</p> <pre><code>fun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_8","title":"Parameters","text":"<ul> <li>not_expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_nea-equatablea-read-stringable-read","title":"assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions are not equal.</p> <pre><code>fun box assert_ne[A: (Equatable[A] #read &amp; Stringable #read)](\n  not_expect: A,\n  actual: A,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_9","title":"Parameters","text":"<ul> <li>not_expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_array_eqa-equatablea-read-stringable-read","title":"assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the contents of the 2 given ReadSeqs are equal.</p> <p>The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two <code>Array[U8]</code>, you should call this method as follows:</p> <pre><code>fun apply(h: TestHelper) =&gt;\n  let a: Array[U8] = [1; 2; 3]\n  let b: Array[U8] = [1; 2; 3]\n  h.assert_array_eq[U8](a, b)\n</code></pre> <pre><code>fun box assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_10","title":"Parameters","text":"<ul> <li>expect: ReadSeq[A] box</li> <li>actual: ReadSeq[A] box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_array_eq_unordereda-equatablea-read-stringable-read","title":"assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the contents of the 2 given ReadSeqs are equal ignoring order.</p> <p>The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two <code>Array[U8]</code>, you should call this method as follows:</p> <pre><code>fun apply(h: TestHelper) =&gt;\n  let a: Array[U8] = [1; 2; 3]\n  let b: Array[U8] = [1; 3; 2]\n  h.assert_array_eq_unordered[U8](a, b)\n</code></pre> <pre><code>fun box assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_11","title":"Parameters","text":"<ul> <li>expect: ReadSeq[A] box</li> <li>actual: ReadSeq[A] box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#long_test","title":"long_test","text":"<p>[Source]</p> <p>Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds.</p> <pre><code>fun box long_test(\n  timeout: U64 val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_12","title":"Parameters","text":"<ul> <li>timeout: U64 val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#complete","title":"complete","text":"<p>[Source]</p> <p>MUST be called by each long test to indicate the test has finished, unless a timeout occurs. If you are using expect_action() then complete(true) will be called once the last expected action has been completed via complete_action().</p> <p>The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter.</p> <p>Once this is called tear_down() may be called at any time.</p> <pre><code>fun box complete(\n  success: Bool val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_13","title":"Parameters","text":"<ul> <li>success: Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#expect_action","title":"expect_action","text":"<p>[Source]</p> <p>Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test.</p> <p>This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method.</p> <p>The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test.</p> <pre><code>fun box expect_action(\n  name: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_14","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#complete_action","title":"complete_action","text":"<p>[Source]</p> <p>MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails.</p> <p>Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished.</p> <p>Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed.</p> <pre><code>fun box complete_action(\n  name: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_15","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#fail_action","title":"fail_action","text":"<p>[Source]</p> <p>Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions.</p> <p>The name of the failed action will be included in the failure output.</p> <p>Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test.</p> <pre><code>fun box fail_action(\n  name: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_16","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#dispose_when_done","title":"dispose_when_done","text":"<p>[Source]</p> <p>Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails.</p> <p>If the test is already tearing down, the actor will be disposed immediately.</p> <pre><code>fun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_17","title":"Parameters","text":"<ul> <li>disposable: DisposableActor tag</li> </ul>"},{"location":"pony_test-TestHelper/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestList/","title":"TestList","text":"<p>[Source]</p> <p>Source of unit tests for a PonyTest object. See package doc string for further information and example use.</p> <pre><code>trait ref TestList\n</code></pre>"},{"location":"pony_test-TestList/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-TestList/#tests","title":"tests","text":"<p>[Source]</p> <p>Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: <pre><code>fun tests(test: PonyTest) =&gt;\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)\n</code></pre></p> <pre><code>fun tag tests(\n  test: PonyTest tag)\n: None val\n</code></pre>"},{"location":"pony_test-TestList/#parameters","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"pony_test-TestList/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/","title":"UnitTest","text":"<p>[Source]</p> <p>Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options.</p> <pre><code>trait ref UnitTest\n</code></pre>"},{"location":"pony_test-UnitTest/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-UnitTest/#name","title":"name","text":"<p>[Source]</p> <p>Report the test name, which is used when printing test results and on the command line to select tests to run.</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-UnitTest/#exclusion_group","title":"exclusion_group","text":"<p>[Source]</p> <p>Report the test exclusion group, returning an empty string for none. The default body returns an empty string.</p> <pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-UnitTest/#apply","title":"apply","text":"<p>[Source]</p> <p>Run the test. Raising an error is interpreted as a test failure.</p> <pre><code>fun ref apply(\n  h: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_2","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-UnitTest/#timed_out","title":"timed_out","text":"<p>[Source]</p> <p>Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing.</p> <pre><code>fun ref timed_out(\n  h: TestHelper val)\n: None val\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/#set_up","title":"set_up","text":"<p>[Source]</p> <p>Set up the testing environment before a test method is called. Default is to do nothing.</p> <pre><code>fun ref set_up(\n  h: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_4","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-UnitTest/#tear_down","title":"tear_down","text":"<p>[Source]</p> <p>Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing.</p> <pre><code>fun ref tear_down(\n  h: TestHelper val)\n: None val\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/#label","title":"label","text":"<p>[Source]</p> <p>Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels.</p> <pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"random--index/","title":"Random package","text":"<p>The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator.</p> <p>If your application does not require a specific generator, use Rand.</p> <p>Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with <code>Time.now</code>.</p> <pre><code>let rand = Rand\nlet n = rand.next()\n</code></pre>"},{"location":"random--index/#public-types","title":"Public Types","text":"<ul> <li>class Dice</li> <li>class MT</li> <li>type Rand</li> <li>trait Random</li> <li>class SplitMix64</li> <li>class XorOshiro128Plus</li> <li>class XorOshiro128StarStar</li> <li>class XorShift128Plus</li> </ul>"},{"location":"random-Dice/","title":"Dice","text":"<p>[Source]</p> <p>A simple dice roller.</p> <pre><code>class ref Dice\n</code></pre>"},{"location":"random-Dice/#constructors","title":"Constructors","text":""},{"location":"random-Dice/#create","title":"create","text":"<p>[Source]</p> <p>Initialise with a random number generator.</p> <pre><code>new ref create(\n  from: Random ref)\n: Dice ref^\n</code></pre>"},{"location":"random-Dice/#parameters","title":"Parameters","text":"<ul> <li>from: Random ref</li> </ul>"},{"location":"random-Dice/#returns","title":"Returns","text":"<ul> <li>Dice ref^</li> </ul>"},{"location":"random-Dice/#public-fields","title":"Public fields","text":""},{"location":"random-Dice/#var-r-random-ref","title":"var r: Random ref","text":"<p>[Source]</p>"},{"location":"random-Dice/#public-functions","title":"Public Functions","text":""},{"location":"random-Dice/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the sum of <code>count</code> rolls of a die with the given number of <code>sides</code>. The die is numbered from 1 to <code>sides</code>. For example, count = 2 and sides = 6 will return a value between 2 and 12.</p> <pre><code>fun ref apply(\n  count: U64 val,\n  sides: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-Dice/#parameters_1","title":"Parameters","text":"<ul> <li>count: U64 val</li> <li>sides: U64 val</li> </ul>"},{"location":"random-Dice/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/","title":"MT","text":"<p>[Source]</p> <p>A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand.</p> <pre><code>class ref MT is\n  Random ref\n</code></pre>"},{"location":"random-MT/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-MT/#constructors","title":"Constructors","text":""},{"location":"random-MT/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: MT ref^\n</code></pre>"},{"location":"random-MT/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-MT/#returns","title":"Returns","text":"<ul> <li>MT ref^</li> </ul>"},{"location":"random-MT/#public-functions","title":"Public Functions","text":""},{"location":"random-MT/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-MT/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#has_next","title":"has_next","text":"<pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-MT/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-MT/#u8","title":"u8","text":"<pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-MT/#returns_3","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-MT/#u16","title":"u16","text":"<pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-MT/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-MT/#u32","title":"u32","text":"<pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-MT/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-MT/#u64","title":"u64","text":"<pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-MT/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#u128","title":"u128","text":"<pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-MT/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-MT/#ulong","title":"ulong","text":"<pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-MT/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-MT/#usize","title":"usize","text":"<pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-MT/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-MT/#i8","title":"i8","text":"<pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-MT/#returns_10","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-MT/#i16","title":"i16","text":"<pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-MT/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-MT/#i32","title":"i32","text":"<pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-MT/#returns_12","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-MT/#i64","title":"i64","text":"<pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-MT/#returns_13","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-MT/#i128","title":"i128","text":"<pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-MT/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-MT/#ilong","title":"ilong","text":"<pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-MT/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-MT/#isize","title":"isize","text":"<pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-MT/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-MT/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_1","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_17","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#real","title":"real","text":"<pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-MT/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-MT/#shufflea-a","title":"shuffle[A: A]","text":"<pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-MT/#parameters_4","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-MT/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-Rand/","title":"Rand","text":"<p>[Source] <pre><code>type Rand is\n  XorOshiro128Plus ref\n</code></pre></p>"},{"location":"random-Rand/#type-alias-for","title":"Type Alias For","text":"<ul> <li>XorOshiro128Plus ref</li> </ul>"},{"location":"random-Random/","title":"Random","text":"<p>[Source]</p> <p>The <code>Random</code> trait should be implemented by all random number generators. The only method you need to implement is <code>fun ref next(): U64</code>. Once that method has been implemented, the <code>Random</code> trait provides default implementations of conversions to other number types.</p> <pre><code>trait ref Random\n</code></pre>"},{"location":"random-Random/#constructors","title":"Constructors","text":""},{"location":"random-Random/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: Random ref^\n</code></pre>"},{"location":"random-Random/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-Random/#returns","title":"Returns","text":"<ul> <li>Random ref^</li> </ul>"},{"location":"random-Random/#public-functions","title":"Public Functions","text":""},{"location":"random-Random/#has_next","title":"has_next","text":"<p>[Source]</p> <p>If used as an iterator, this always has another value.</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-Random/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-Random/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-Random/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-Random/#u8","title":"u8","text":"<p>[Source]</p> <p>A random integer in [0, 2^8)</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-Random/#returns_3","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-Random/#u16","title":"u16","text":"<p>[Source]</p> <p>A random integer in [0, 2^16)</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-Random/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-Random/#u32","title":"u32","text":"<p>[Source]</p> <p>A random integer in [0, 2^32)</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-Random/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-Random/#u64","title":"u64","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-Random/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-Random/#u128","title":"u128","text":"<p>[Source]</p> <p>A random integer in [0, 2^128)</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-Random/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-Random/#ulong","title":"ulong","text":"<p>[Source]</p> <p>A random integer in [0, ULong.max_value()]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-Random/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-Random/#usize","title":"usize","text":"<p>[Source]</p> <p>A random integer in [0, USize.max_value()]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-Random/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-Random/#i8","title":"i8","text":"<p>[Source]</p> <p>A random integer in [-2^7, 2^7)</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-Random/#returns_10","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-Random/#i16","title":"i16","text":"<p>[Source]</p> <p>A random integer in [-2^15, 2^15)</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-Random/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-Random/#i32","title":"i32","text":"<p>[Source]</p> <p>A random integer in [-2^31, 2^31)</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-Random/#returns_12","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-Random/#i64","title":"i64","text":"<p>[Source]</p> <p>A random integer in [-2^63, 2^63)</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-Random/#returns_13","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-Random/#i128","title":"i128","text":"<p>[Source]</p> <p>A random integer in [-2^127, 2^127)</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-Random/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-Random/#ilong","title":"ilong","text":"<p>[Source]</p> <p>A random integer in [ILong.min_value(), ILong.max_value()]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-Random/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-Random/#isize","title":"isize","text":"<p>[Source]</p> <p>A random integer in [ISize.min_value(), ISize.max_value()]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-Random/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-Random/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_1","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_17","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <p>Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication.</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <p>Not biased with small values of <code>n</code> like <code>int</code>.</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#real","title":"real","text":"<p>[Source]</p> <p>A random number in [0, 1)</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-Random/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-Random/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <p>Shuffle the elements of the array into a random order, mutating the array.</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-Random/#parameters_4","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-Random/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-SplitMix64/","title":"SplitMix64","text":"<p>[Source]</p> <p>Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at:</p> <p>http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf</p> <p>Using XorOshiro128StarStar or XorOshiro128Plus should be prefered unless using only 64 bit of state is a requirement.</p> <pre><code>class ref SplitMix64 is\n  Random ref\n</code></pre>"},{"location":"random-SplitMix64/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-SplitMix64/#constructors","title":"Constructors","text":""},{"location":"random-SplitMix64/#from_u64","title":"from_u64","text":"<p>[Source]</p> <pre><code>new ref from_u64(\n  x: U64 val = 5489)\n: SplitMix64 ref^\n</code></pre>"},{"location":"random-SplitMix64/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-SplitMix64/#returns","title":"Returns","text":"<ul> <li>SplitMix64 ref^</li> </ul>"},{"location":"random-SplitMix64/#create","title":"create","text":"<p>[Source]</p> <p>Only x is used, y is discarded.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: SplitMix64 ref^\n</code></pre>"},{"location":"random-SplitMix64/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-SplitMix64/#returns_1","title":"Returns","text":"<ul> <li>SplitMix64 ref^</li> </ul>"},{"location":"random-SplitMix64/#public-functions","title":"Public Functions","text":""},{"location":"random-SplitMix64/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-SplitMix64/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-SplitMix64/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-SplitMix64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-SplitMix64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-SplitMix64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-SplitMix64/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-SplitMix64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-SplitMix64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-SplitMix64/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-SplitMix64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-SplitMix64/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-SplitMix64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-SplitMix64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-SplitMix64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-SplitMix64/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-SplitMix64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-SplitMix64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-SplitMix64/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-SplitMix64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-SplitMix64/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-SplitMix64/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-SplitMix64/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-SplitMix64/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-SplitMix64/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorOshiro128Plus/","title":"XorOshiro128Plus","text":"<p>[Source]</p> <p>This is an implementation of xoroshiro128+, as detailed at:</p> <p>http://xoroshiro.di.unimi.it</p> <p>This is currently the default Rand implementation.</p> <pre><code>class ref XorOshiro128Plus is\n  Random ref\n</code></pre>"},{"location":"random-XorOshiro128Plus/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorOshiro128Plus/#constructors","title":"Constructors","text":""},{"location":"random-XorOshiro128Plus/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\n  x: U64 val = 5489)\n: XorOshiro128Plus ref^\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns","title":"Returns","text":"<ul> <li>XorOshiro128Plus ref^</li> </ul>"},{"location":"random-XorOshiro128Plus/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: XorOshiro128Plus ref^\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_1","title":"Returns","text":"<ul> <li>XorOshiro128Plus ref^</li> </ul>"},{"location":"random-XorOshiro128Plus/#public-functions","title":"Public Functions","text":""},{"location":"random-XorOshiro128Plus/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorOshiro128Plus/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorOshiro128Plus/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorOshiro128Plus/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorOshiro128StarStar/","title":"XorOshiro128StarStar","text":"<p>[Source]</p> <p>This is an implementation of xoroshiro128**, as detailed at:</p> <p>http://xoshiro.di.unimi.it/</p> <p>This Rand implementation is slightly slower than XorOshiro128Plus but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests).</p> <pre><code>class ref XorOshiro128StarStar is\n  Random ref\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorOshiro128StarStar/#constructors","title":"Constructors","text":""},{"location":"random-XorOshiro128StarStar/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\n  x: U64 val = 5489)\n: XorOshiro128StarStar ref^\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns","title":"Returns","text":"<ul> <li>XorOshiro128StarStar ref^</li> </ul>"},{"location":"random-XorOshiro128StarStar/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: XorOshiro128StarStar ref^\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_1","title":"Returns","text":"<ul> <li>XorOshiro128StarStar ref^</li> </ul>"},{"location":"random-XorOshiro128StarStar/#public-functions","title":"Public Functions","text":""},{"location":"random-XorOshiro128StarStar/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorShift128Plus/","title":"XorShift128Plus","text":"<p>[Source]</p> <p>This is an implementation of xorshift+, as detailed at:</p> <p>http://xoroshiro.di.unimi.it</p> <p>This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand.</p> <pre><code>class ref XorShift128Plus is\n  Random ref\n</code></pre>"},{"location":"random-XorShift128Plus/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorShift128Plus/#constructors","title":"Constructors","text":""},{"location":"random-XorShift128Plus/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\n  x: U64 val = 5489)\n: XorShift128Plus ref^\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorShift128Plus/#returns","title":"Returns","text":"<ul> <li>XorShift128Plus ref^</li> </ul>"},{"location":"random-XorShift128Plus/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: XorShift128Plus ref^\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorShift128Plus/#returns_1","title":"Returns","text":"<ul> <li>XorShift128Plus ref^</li> </ul>"},{"location":"random-XorShift128Plus/#public-functions","title":"Public Functions","text":""},{"location":"random-XorShift128Plus/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorShift128Plus/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorShift128Plus/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorShift128Plus/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorShift128Plus/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorShift128Plus/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorShift128Plus/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorShift128Plus/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorShift128Plus/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorShift128Plus/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorShift128Plus/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorShift128Plus/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorShift128Plus/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorShift128Plus/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorShift128Plus/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorShift128Plus/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorShift128Plus/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorShift128Plus/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorShift128Plus/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time--index/","title":"Time Package","text":"<p>The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks.</p>"},{"location":"time--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Nanos</li> <li>class PosixDate</li> <li>primitive Time</li> <li>class Timer</li> <li>interface TimerNotify</li> <li>actor Timers</li> </ul>"},{"location":"time-Nanos/","title":"Nanos","text":"<p>[Source]</p> <p>Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package.</p> <pre><code>primitive val Nanos\n</code></pre>"},{"location":"time-Nanos/#constructors","title":"Constructors","text":""},{"location":"time-Nanos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Nanos val^\n</code></pre>"},{"location":"time-Nanos/#returns","title":"Returns","text":"<ul> <li>Nanos val^</li> </ul>"},{"location":"time-Nanos/#public-functions","title":"Public Functions","text":""},{"location":"time-Nanos/#from_seconds","title":"from_seconds","text":"<p>[Source]</p> <pre><code>fun box from_seconds(\n  t: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_millis","title":"from_millis","text":"<p>[Source]</p> <pre><code>fun box from_millis(\n  t: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_1","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_micros","title":"from_micros","text":"<p>[Source]</p> <pre><code>fun box from_micros(\n  t: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_2","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_seconds_f","title":"from_seconds_f","text":"<p>[Source]</p> <pre><code>fun box from_seconds_f(\n  t: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_3","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_millis_f","title":"from_millis_f","text":"<p>[Source]</p> <pre><code>fun box from_millis_f(\n  t: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_4","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_micros_f","title":"from_micros_f","text":"<p>[Source]</p> <pre><code>fun box from_micros_f(\n  t: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_5","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_wall_clock","title":"from_wall_clock","text":"<p>[Source]</p> <pre><code>fun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_6","title":"Parameters","text":"<ul> <li>wall: (I64 val , I64 val)</li> </ul>"},{"location":"time-Nanos/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Nanos val)\n: Bool val\n</code></pre>"},{"location":"time-Nanos/#parameters_7","title":"Parameters","text":"<ul> <li>that: Nanos val</li> </ul>"},{"location":"time-Nanos/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Nanos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Nanos val)\n: Bool val\n</code></pre>"},{"location":"time-Nanos/#parameters_8","title":"Parameters","text":"<ul> <li>that: Nanos val</li> </ul>"},{"location":"time-Nanos/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-PosixDate/","title":"PosixDate","text":"<p>[Source]</p> <p>Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1.</p> <pre><code>class ref PosixDate\n</code></pre>"},{"location":"time-PosixDate/#constructors","title":"Constructors","text":""},{"location":"time-PosixDate/#create","title":"create","text":"<p>[Source]</p> <p>Create a date from a POSIX time. Negative arguments will be changed to zero.</p> <pre><code>new ref create(\n  seconds: I64 val = 0,\n  nanoseconds: I64 val = 0)\n: PosixDate ref^\n</code></pre>"},{"location":"time-PosixDate/#parameters","title":"Parameters","text":"<ul> <li>seconds: I64 val = 0</li> <li>nanoseconds: I64 val = 0</li> </ul>"},{"location":"time-PosixDate/#returns","title":"Returns","text":"<ul> <li>PosixDate ref^</li> </ul>"},{"location":"time-PosixDate/#public-fields","title":"Public fields","text":""},{"location":"time-PosixDate/#var-nsec-i32-val","title":"var nsec: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-sec-i32-val","title":"var sec: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-min-i32-val","title":"var min: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-hour-i32-val","title":"var hour: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_month-i32-val","title":"var day_of_month: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-month-i32-val","title":"var month: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-year-i32-val","title":"var year: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_week-i32-val","title":"var day_of_week: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_year-i32-val","title":"var day_of_year: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#public-functions","title":"Public Functions","text":""},{"location":"time-PosixDate/#time","title":"time","text":"<p>[Source]</p> <p>Return a POSIX time. Treats the date as UTC.</p> <pre><code>fun box time()\n: I64 val\n</code></pre>"},{"location":"time-PosixDate/#returns_1","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"time-PosixDate/#normal","title":"normal","text":"<p>[Source]</p> <p>Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date.</p> <pre><code>fun ref normal()\n: None val\n</code></pre>"},{"location":"time-PosixDate/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-PosixDate/#format","title":"format","text":"<p>[Source]</p> <p>Format the time as for strftime.</p> <p>Will return an empty string if the format string is \"%p\" or \"%P\".</p> <pre><code>fun box format(\n  fmt: String val)\n: String val ?\n</code></pre>"},{"location":"time-PosixDate/#parameters_1","title":"Parameters","text":"<ul> <li>fmt: String val</li> </ul>"},{"location":"time-PosixDate/#returns_3","title":"Returns","text":"<ul> <li>String val ?</li> </ul>"},{"location":"time-Time/","title":"Time","text":"<p>[Source]</p> <p>A collection of ways to fetch the current time.</p> <pre><code>primitive val Time\n</code></pre>"},{"location":"time-Time/#constructors","title":"Constructors","text":""},{"location":"time-Time/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Time val^\n</code></pre>"},{"location":"time-Time/#returns","title":"Returns","text":"<ul> <li>Time val^</li> </ul>"},{"location":"time-Time/#public-functions","title":"Public Functions","text":""},{"location":"time-Time/#now","title":"now","text":"<p>[Source]</p> <p>The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds)</p> <pre><code>fun box now()\n: (I64 val , I64 val)\n</code></pre>"},{"location":"time-Time/#returns_1","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"time-Time/#seconds","title":"seconds","text":"<p>[Source]</p> <p>The wall-clock adjusted system time.</p> <pre><code>fun box seconds()\n: I64 val\n</code></pre>"},{"location":"time-Time/#returns_2","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"time-Time/#millis","title":"millis","text":"<p>[Source]</p> <p>Monotonic unadjusted milliseconds.</p> <pre><code>fun box millis()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#micros","title":"micros","text":"<p>[Source]</p> <p>Monotonic unadjusted microseconds.</p> <pre><code>fun box micros()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#nanos","title":"nanos","text":"<p>[Source]</p> <p>Monotonic unadjusted nanoseconds.</p> <pre><code>fun box nanos()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#cycles","title":"cycles","text":"<p>[Source]</p> <p>Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution.</p> <pre><code>fun box cycles()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#perf_begin","title":"perf_begin","text":"<p>[Source]</p> <p>Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier.</p> <pre><code>fun box perf_begin()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#perf_end","title":"perf_end","text":"<p>[Source]</p> <p>Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later.</p> <pre><code>fun box perf_end()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Time val)\n: Bool val\n</code></pre>"},{"location":"time-Time/#parameters","title":"Parameters","text":"<ul> <li>that: Time val</li> </ul>"},{"location":"time-Time/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Time/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Time val)\n: Bool val\n</code></pre>"},{"location":"time-Time/#parameters_1","title":"Parameters","text":"<ul> <li>that: Time val</li> </ul>"},{"location":"time-Time/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Timer/","title":"Timer","text":"<p>[Source]</p> <p>The <code>Timer</code> class represents a timer that fires after an expiration time, and then fires at an interval. When a <code>Timer</code> fires, it calls the <code>apply</code> method of the <code>TimerNotify</code> object that was passed to it when it was created.</p> <p>The following example waits 5 seconds and then fires every 2 seconds, and when it fires the <code>TimerNotify</code> object prints how many times it has been called:</p> <pre><code>use \"time\"\n\nactor Main\n  new create(env: Env) =&gt;\n    let timers = Timers\n    let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n    timers(consume timer)\n\nclass Notify is TimerNotify\n  let _env: Env\n  var _counter: U32 = 0\n\n  new iso create(env: Env) =&gt;\n    _env = env\n\n  fun ref apply(timer: Timer, count: U64): Bool =&gt;\n    _env.out.print(_counter.string())\n    _counter = _counter + 1\n    true\n</code></pre> <pre><code>class ref Timer\n</code></pre>"},{"location":"time-Timer/#constructors","title":"Constructors","text":""},{"location":"time-Timer/#create","title":"create","text":"<p>[Source]</p> <p>Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds.</p> <pre><code>new iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = 0)\n: Timer iso^\n</code></pre>"},{"location":"time-Timer/#parameters","title":"Parameters","text":"<ul> <li>notify: TimerNotify iso</li> <li>expiration: U64 val</li> <li>interval: U64 val = 0</li> </ul>"},{"location":"time-Timer/#returns","title":"Returns","text":"<ul> <li>Timer iso^</li> </ul>"},{"location":"time-Timer/#abs","title":"abs","text":"<p>[Source]</p> <p>Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time.</p> <pre><code>new ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = 0)\n: Timer ref^\n</code></pre>"},{"location":"time-Timer/#parameters_1","title":"Parameters","text":"<ul> <li>notify: TimerNotify ref</li> <li>expiration: (I64 val , I64 val)</li> <li>interval: U64 val = 0</li> </ul>"},{"location":"time-Timer/#returns_1","title":"Returns","text":"<ul> <li>Timer ref^</li> </ul>"},{"location":"time-TimerNotify/","title":"TimerNotify","text":"<p>[Source]</p> <p>Notifications for timer.</p> <pre><code>interface ref TimerNotify\n</code></pre>"},{"location":"time-TimerNotify/#public-functions","title":"Public Functions","text":""},{"location":"time-TimerNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Called with the the number of times the timer has fired since this was last called. Usually, the value of <code>count</code> will be 1. If it is not 1, it means that the timer isn't firing on schedule.</p> <p>For example, if your timer is set to fire every 10 milliseconds, and <code>count</code> is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load.</p> <p>Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval).</p> <pre><code>fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n</code></pre>"},{"location":"time-TimerNotify/#parameters","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"time-TimerNotify/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-TimerNotify/#cancel","title":"cancel","text":"<p>[Source]</p> <p>Called if the timer is cancelled. This is also called if the notifier returns false from its <code>apply</code> method.</p> <pre><code>fun ref cancel(\n  timer: Timer ref)\n: None val\n</code></pre>"},{"location":"time-TimerNotify/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"time-TimerNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-Timers/","title":"Timers","text":"<p>[Source]</p> <p>A hierarchical set of timing wheels.</p> <pre><code>actor tag Timers is\n  AsioEventNotify tag\n</code></pre>"},{"location":"time-Timers/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"time-Timers/#constructors","title":"Constructors","text":""},{"location":"time-Timers/#create","title":"create","text":"<p>[Source]</p> <p>Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution.</p> <pre><code>new tag create(\n  slop: USize val = 20)\n: Timers tag^\n</code></pre>"},{"location":"time-Timers/#parameters","title":"Parameters","text":"<ul> <li>slop: USize val = 20</li> </ul>"},{"location":"time-Timers/#returns","title":"Returns","text":"<ul> <li>Timers tag^</li> </ul>"},{"location":"time-Timers/#public-behaviours","title":"Public Behaviours","text":""},{"location":"time-Timers/#apply","title":"apply","text":"<p>[Source]</p> <p>Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer.</p> <pre><code>be apply(\n  timer: Timer iso)\n</code></pre>"},{"location":"time-Timers/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer iso</li> </ul>"},{"location":"time-Timers/#cancel","title":"cancel","text":"<p>[Source]</p> <p>Cancels a timer.</p> <pre><code>be cancel(\n  timer: Timer tag)\n</code></pre>"},{"location":"time-Timers/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer tag</li> </ul>"},{"location":"time-Timers/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Dispose of this set of timing wheels.</p> <pre><code>be dispose()\n</code></pre>"}]}