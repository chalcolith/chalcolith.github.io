{
    "docs": [
        {
            "location": "/",
            "text": "Packages\n\n\n\n\nkiuatan\n\n\nbuiltin\n\n\ncollections\n\n\ncollections/persistent\n\n\ndebug\n\n\nponytest\n\n\nrandom\n\n\ntime",
            "title": "kiuatan"
        },
        {
            "location": "/kiuatan--index/",
            "text": "Kiuatan\n\u00b6\n\n\nKiuatan (\"horse\" or \"pony\" in \nChinook Jargon\n) is a library for building and running parsers in the \nPony\n programming language.\n\n\n\n\n\n\nKiuatan uses \nParsing Expression Grammar\n semantics, which means:\n\n\n\n\n\n\nChoices are ordered, i.e. the parser will always try to parse alternatives in the order they are declared.\n\n\n\n\n\n\nSequences are greedy, i.e. the parser will not backtrack from the end of a sequence.\n\n\n\n\n\n\nYou can use positive and negative lookahead that does not advance the match position to constrain greedy sequences.\n\n\n\n\n\n\nParsers do not backtrack from successful choices.\n\n\n\n\n\n\n\n\n\n\nKiuatan parsers are \"packrat\" parsers; they memoize intermediate results, resulting in linear-time parsing.\n\n\n\n\n\n\nParsers use Mederios et al's \nalgorithm\n to handle unlimited left-recursion.\n\n\n\n\n\n\nObtaining Kiuatan\n\u00b6\n\n\nPony-Stable\n\u00b6\n\n\nThe easiest way to incorporate Kiuatan into your Pony project is to use \nPony-Stable\n.  Once you have it installed, \ncd\n to your project's directory and type:\n\n\n\nstable add github kulibali/kiuatan --tag=0.2.0\n\n\n\n\n\nThis will clone the \nkiuatan\n repository and add it under the \n.deps\n directory in your project.  To build your project, Pony-Stable will take care of setting the correct \nPONYPATH\n environment variable for you, e.g.:\n\n\n\nstable env ponyc .\n\n\n\n\n\nGit\n\u00b6\n\n\nYou can clone and build Kiuatan directly from GitHub (you must have \nPony-Stable\n in your \nPATH\n):\n\n\n\ngit clone https://github.com/kulibali/kiuatan.git\n\ncd kiuatan\n\nmake && make test\n\n\n\n\n\nTo use Kiuatan in a project without \nPony-Stable\n you will need to add \nkiuatan/kiuatan\n to your \nPONYPATH\n environment variable.\n\n\nConcepts\n\u00b6\n\n\nKiuatan grammars can match over source sequences of any type that is\n\n\n\nS: (Any #read & Equatable[S])\n\n\n\n\n\nThe most common source type will be \nU8\n for parsing UTF-8 text (note that you will need to handle converting UTF-8 into normalized Unicode yourself if necessary).\n\n\nRule\n\u00b6\n\n\nA \nRule\n encapsulates and names a grammatical rule that encodes a PEG rule.  To create a rule, you provide a name, a body, and an optional \naction\n.  For example, the following rule will match either \none two three\n or \none deux three\n.\n\n\n\nlet rule =\n\n  recover val\n\n    let ws = Rule[U8](\"WhiteSpace\", Star[U8](Single[U8](\" \\t\"), 1))\n\n    Rule[U8](\"OneTwoThree\",\n\n      Conj[U8](\n\n        [ Literal[U8](\"one\")\n\n          ws\n\n          Disj[U8]([ Literal[U8](\"two\"); Literal[U8](\"deux\") ])\n\n          ws\n\n          Literal[U8](\"three\")\n\n        ]))\n\n  end\n\n\n\n\n\nYou can build the body of a rule from the following classes:\n\n\n\n\n\n\nSingle\n: matches a single source item.  The constructor takes a set of possibilities to match.  If you provide an empty list, this rule will match any single item.\n\n\n\n\n\n\nLiteral\n: matches a string of items.\n\n\n\n\n\n\nConj\n: matches a sequence of child rules.\n\n\n\n\n\n\nDisj\n: matches one of a number of alternative child rules, in order.  If one of the alternatives matches, but an outer rule fails later, the parser will \nnot\n backtrack to another alternative.\n\n\n\n\n\n\nError\n: will trigger an error with the given message.\n\n\n\n\n\n\nLook\n: will attempt to match its child rule, but will \nnot\n advance the match position.\n\n\n\n\n\n\nNeg\n: will succeed if its child rule does \nnot\n match, and will not advance the match position.\n\n\n\n\n\n\nStar\n: will match a number of repetitions of its child rule.  You can specify a minimum or maximum number of times to match.\n\n\n\n\n\n\nRecursion\n\u00b6\n\n\nIn order to allow recursive rules, you can create a rule with no body and set its body later using the \nset_body()\n method:\n\n\n\n// Add <- Add Op Num | Num\n\n// Op <- [+-]\n\n// Num <- [0-9]+\n\nlet rule: Rule[U8] val =\n\n  recover val\n\n    let add = Rule[U8](\"Add\", None)\n\n    let num = Rule[U8](\"Num\", Star[U8](Single[U8](\"0123456789\"), 1))\n\n    let op = Rule[U8](\"Op\", Single[U8](\"+-\"))\n\n    let body = Disj[U8]([Conj[U8]([add; op; num]); num])\n\n    add.set_body(body)\n\n    add\n\n  end\n\n\n\n\n\nNote that Kiuatan can handle both direct and indirect left-recursion.\n\n\nSource\n\u00b6\n\n\nA \nSource\n is a sequence of sequences of your source type.  Internally this is represented as a linked list of sequences, called \"segments\".  The idea behind this is that you can swap out individual segments of text that your \nParser\n actor knows about, while maintaining the parse memo for the other segments.  This allows a text editor, for example, to handle localized changes without re-parsing the whole source file.\n\n\nParser\n\u00b6\n\n\nA \nParser\n actor knows about the source you are parsing, and holds a memo of parsing results across parse attempts.\n\n\nIn order to attempt to parse a particular sequence (or sequence of segments) of items, create a Parser actor, giving it an initial source, and then call its \nparse\n behaviour, passing a rule to use and a callback for when the parse either succeeds or fails:\n\n\n\n  let segment = \"one two three\"\n\n  let parser = Parser[U8]([segment])\n\n  parser.parse(rule, {(result: Result[U8]) =>\n\n    match result\n\n    | let success: Success[U8] =>\n\n      Debug.out(\"succeeded!\")\n\n    | let failure: Failure[U8] =>\n\n      Debug.out(\"failed\")\n\n    end\n\n  })\n\n\n\n\n\nUpdating Source\n\u00b6\n\n\nYou can update a parser's source by calling its \nremove_segment\n and \ninsert_segment\n behaviours.  The next time you initiate a parse, the parser's source will have been updated.\n\n\nResult\n\u00b6\n\n\nIf a parse succeeds, the result will be of type \nSuccess\n, which represents the concrete parse tree.  You can get details about the location of the match and results from child rules.\n\n\nValue\n\u00b6\n\n\nIf you wish, you can build a more abstract parse tree using semantic \nAction\ns that you pass to rules.  These actions should return a \"value\" of your desired type.\n\n\nPublic Types\n\u00b6\n\n\n\n\nclass Single\n\n\nclass Literal\n\n\nclass Conj\n\n\nclass Disj\n\n\nclass Error\n\n\nclass Look\n\n\nclass Neg\n\n\nclass Star\n\n\nprimitive Rules\n\n\ninterface RuleNode\n\n\nclass Rule\n\n\ntype Result\n\n\nclass Success\n\n\nclass Failure\n\n\ninterface Action\n\n\nclass ActionContext\n\n\nactor Parser\n\n\ninterface ParseCallback\n\n\nprimitive Dbg\n\n\ntype Segment\n\n\ntype Source\n\n\nclass Loc",
            "title": "Package"
        },
        {
            "location": "/kiuatan--index/#kiuatan",
            "text": "Kiuatan (\"horse\" or \"pony\" in  Chinook Jargon ) is a library for building and running parsers in the  Pony  programming language.    Kiuatan uses  Parsing Expression Grammar  semantics, which means:    Choices are ordered, i.e. the parser will always try to parse alternatives in the order they are declared.    Sequences are greedy, i.e. the parser will not backtrack from the end of a sequence.    You can use positive and negative lookahead that does not advance the match position to constrain greedy sequences.    Parsers do not backtrack from successful choices.      Kiuatan parsers are \"packrat\" parsers; they memoize intermediate results, resulting in linear-time parsing.    Parsers use Mederios et al's  algorithm  to handle unlimited left-recursion.",
            "title": "Kiuatan"
        },
        {
            "location": "/kiuatan--index/#obtaining-kiuatan",
            "text": "",
            "title": "Obtaining Kiuatan"
        },
        {
            "location": "/kiuatan--index/#pony-stable",
            "text": "The easiest way to incorporate Kiuatan into your Pony project is to use  Pony-Stable .  Once you have it installed,  cd  to your project's directory and type:  \nstable add github kulibali/kiuatan --tag=0.2.0  This will clone the  kiuatan  repository and add it under the  .deps  directory in your project.  To build your project, Pony-Stable will take care of setting the correct  PONYPATH  environment variable for you, e.g.:  \nstable env ponyc .",
            "title": "Pony-Stable"
        },
        {
            "location": "/kiuatan--index/#git",
            "text": "You can clone and build Kiuatan directly from GitHub (you must have  Pony-Stable  in your  PATH ):  \ngit clone https://github.com/kulibali/kiuatan.git\n\ncd kiuatan\n\nmake && make test  To use Kiuatan in a project without  Pony-Stable  you will need to add  kiuatan/kiuatan  to your  PONYPATH  environment variable.",
            "title": "Git"
        },
        {
            "location": "/kiuatan--index/#concepts",
            "text": "Kiuatan grammars can match over source sequences of any type that is  \nS: (Any #read & Equatable[S])  The most common source type will be  U8  for parsing UTF-8 text (note that you will need to handle converting UTF-8 into normalized Unicode yourself if necessary).",
            "title": "Concepts"
        },
        {
            "location": "/kiuatan--index/#rule",
            "text": "A  Rule  encapsulates and names a grammatical rule that encodes a PEG rule.  To create a rule, you provide a name, a body, and an optional  action .  For example, the following rule will match either  one two three  or  one deux three .  \nlet rule =\n\n  recover val\n\n    let ws = Rule[U8](\"WhiteSpace\", Star[U8](Single[U8](\" \\t\"), 1))\n\n    Rule[U8](\"OneTwoThree\",\n\n      Conj[U8](\n\n        [ Literal[U8](\"one\")\n\n          ws\n\n          Disj[U8]([ Literal[U8](\"two\"); Literal[U8](\"deux\") ])\n\n          ws\n\n          Literal[U8](\"three\")\n\n        ]))\n\n  end  You can build the body of a rule from the following classes:    Single : matches a single source item.  The constructor takes a set of possibilities to match.  If you provide an empty list, this rule will match any single item.    Literal : matches a string of items.    Conj : matches a sequence of child rules.    Disj : matches one of a number of alternative child rules, in order.  If one of the alternatives matches, but an outer rule fails later, the parser will  not  backtrack to another alternative.    Error : will trigger an error with the given message.    Look : will attempt to match its child rule, but will  not  advance the match position.    Neg : will succeed if its child rule does  not  match, and will not advance the match position.    Star : will match a number of repetitions of its child rule.  You can specify a minimum or maximum number of times to match.",
            "title": "Rule"
        },
        {
            "location": "/kiuatan--index/#recursion",
            "text": "In order to allow recursive rules, you can create a rule with no body and set its body later using the  set_body()  method:  \n// Add <- Add Op Num | Num\n\n// Op <- [+-]\n\n// Num <- [0-9]+\n\nlet rule: Rule[U8] val =\n\n  recover val\n\n    let add = Rule[U8](\"Add\", None)\n\n    let num = Rule[U8](\"Num\", Star[U8](Single[U8](\"0123456789\"), 1))\n\n    let op = Rule[U8](\"Op\", Single[U8](\"+-\"))\n\n    let body = Disj[U8]([Conj[U8]([add; op; num]); num])\n\n    add.set_body(body)\n\n    add\n\n  end  Note that Kiuatan can handle both direct and indirect left-recursion.",
            "title": "Recursion"
        },
        {
            "location": "/kiuatan--index/#source",
            "text": "A  Source  is a sequence of sequences of your source type.  Internally this is represented as a linked list of sequences, called \"segments\".  The idea behind this is that you can swap out individual segments of text that your  Parser  actor knows about, while maintaining the parse memo for the other segments.  This allows a text editor, for example, to handle localized changes without re-parsing the whole source file.",
            "title": "Source"
        },
        {
            "location": "/kiuatan--index/#parser",
            "text": "A  Parser  actor knows about the source you are parsing, and holds a memo of parsing results across parse attempts.  In order to attempt to parse a particular sequence (or sequence of segments) of items, create a Parser actor, giving it an initial source, and then call its  parse  behaviour, passing a rule to use and a callback for when the parse either succeeds or fails:  \n  let segment = \"one two three\"\n\n  let parser = Parser[U8]([segment])\n\n  parser.parse(rule, {(result: Result[U8]) =>\n\n    match result\n\n    | let success: Success[U8] =>\n\n      Debug.out(\"succeeded!\")\n\n    | let failure: Failure[U8] =>\n\n      Debug.out(\"failed\")\n\n    end\n\n  })",
            "title": "Parser"
        },
        {
            "location": "/kiuatan--index/#updating-source",
            "text": "You can update a parser's source by calling its  remove_segment  and  insert_segment  behaviours.  The next time you initiate a parse, the parser's source will have been updated.",
            "title": "Updating Source"
        },
        {
            "location": "/kiuatan--index/#result",
            "text": "If a parse succeeds, the result will be of type  Success , which represents the concrete parse tree.  You can get details about the location of the match and results from child rules.",
            "title": "Result"
        },
        {
            "location": "/kiuatan--index/#value",
            "text": "If you wish, you can build a more abstract parse tree using semantic  Action s that you pass to rules.  These actions should return a \"value\" of your desired type.",
            "title": "Value"
        },
        {
            "location": "/kiuatan--index/#public-types",
            "text": "class Single  class Literal  class Conj  class Disj  class Error  class Look  class Neg  class Star  primitive Rules  interface RuleNode  class Rule  type Result  class Success  class Failure  interface Action  class ActionContext  actor Parser  interface ParseCallback  primitive Dbg  type Segment  type Source  class Loc",
            "title": "Public Types"
        },
        {
            "location": "/kiuatan-Single/",
            "text": "Single[S: (\nAny\n #read & \nEquatable\n[S]), optional V: V]\n\u00b6\n\n\n[Source]\n\n\nMatches a single item.  If given a list of possibilities, will only succeed if it matches one of them.  Otherwise, it succeeds for any single item.\n\n\nclass val Single[S: (Any #read & Equatable[S]), optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  expected: ReadSeq[S] val = seq,\n  action: (Action[S, V] val | None val) = seq)\n: Single[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpected: \nReadSeq\n[S] val = seq\n\n\naction: (\nAction\n[S, V] val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSingle\n[S, V] ref^",
            "title": "class Single"
        },
        {
            "location": "/kiuatan-Single/#single91s-any-read-equatable91s93-optional-v-v93",
            "text": "[Source]  Matches a single item.  If given a list of possibilities, will only succeed if it matches one of them.  Otherwise, it succeeds for any single item.  class val Single[S: (Any #read & Equatable[S]), optional V: V]",
            "title": "Single[S: (Any #read &amp; Equatable[S]), optional V: V]"
        },
        {
            "location": "/kiuatan-Single/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Single/#create",
            "text": "[Source]  new ref create(\n  expected: ReadSeq[S] val = seq,\n  action: (Action[S, V] val | None val) = seq)\n: Single[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Single/#parameters",
            "text": "expected:  ReadSeq [S] val = seq  action: ( Action [S, V] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Single/#returns",
            "text": "Single [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Literal/",
            "text": "Literal[S: (\nAny\n #read & \nEquatable\n[S]), optional V: V]\n\u00b6\n\n\n[Source]\n\n\nMatches a string of items.\n\n\nclass val Literal[S: (Any #read & Equatable[S]), optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  expected: ReadSeq[S] val,\n  action: (Action[S, V] val | None val) = seq)\n: Literal[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpected: \nReadSeq\n[S] val\n\n\naction: (\nAction\n[S, V] val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nLiteral\n[S, V] ref^",
            "title": "class Literal"
        },
        {
            "location": "/kiuatan-Literal/#literal91s-any-read-equatable91s93-optional-v-v93",
            "text": "[Source]  Matches a string of items.  class val Literal[S: (Any #read & Equatable[S]), optional V: V]",
            "title": "Literal[S: (Any #read &amp; Equatable[S]), optional V: V]"
        },
        {
            "location": "/kiuatan-Literal/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Literal/#create",
            "text": "[Source]  new ref create(\n  expected: ReadSeq[S] val,\n  action: (Action[S, V] val | None val) = seq)\n: Literal[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Literal/#parameters",
            "text": "expected:  ReadSeq [S] val  action: ( Action [S, V] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Literal/#returns",
            "text": "Literal [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Conj/",
            "text": "Conj[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nMatches a sequence of child rules.\n\n\nclass val Conj[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  children: ReadSeq[RuleNode[S, V] box] box,\n  action: (Action[S, V] val | None val) = seq)\n: Conj[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nchildren: \nReadSeq\n[\nRuleNode\n[S, V] box] box\n\n\naction: (\nAction\n[S, V] val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nConj\n[S, V] ref^",
            "title": "class Conj"
        },
        {
            "location": "/kiuatan-Conj/#conj91s-s-optional-v-v93",
            "text": "[Source]  Matches a sequence of child rules.  class val Conj[S: S, optional V: V]",
            "title": "Conj[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Conj/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Conj/#create",
            "text": "[Source]  new ref create(\n  children: ReadSeq[RuleNode[S, V] box] box,\n  action: (Action[S, V] val | None val) = seq)\n: Conj[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Conj/#parameters",
            "text": "children:  ReadSeq [ RuleNode [S, V] box] box  action: ( Action [S, V] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Conj/#returns",
            "text": "Conj [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Disj/",
            "text": "Disj[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nMatches one out of a list of possible alternatives.  Tries each alternative in order.  If one alternative fails, but an outer rule later fails, will \nnot\n backtrack to another alternative.\n\n\nclass val Disj[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  children: ReadSeq[RuleNode[S, V] box] box,\n  action: (Action[S, V] val | None val) = seq)\n: Disj[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nchildren: \nReadSeq\n[\nRuleNode\n[S, V] box] box\n\n\naction: (\nAction\n[S, V] val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDisj\n[S, V] ref^",
            "title": "class Disj"
        },
        {
            "location": "/kiuatan-Disj/#disj91s-s-optional-v-v93",
            "text": "[Source]  Matches one out of a list of possible alternatives.  Tries each alternative in order.  If one alternative fails, but an outer rule later fails, will  not  backtrack to another alternative.  class val Disj[S: S, optional V: V]",
            "title": "Disj[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Disj/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Disj/#create",
            "text": "[Source]  new ref create(\n  children: ReadSeq[RuleNode[S, V] box] box,\n  action: (Action[S, V] val | None val) = seq)\n: Disj[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Disj/#parameters",
            "text": "children:  ReadSeq [ RuleNode [S, V] box] box  action: ( Action [S, V] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Disj/#returns",
            "text": "Disj [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Error/",
            "text": "Error[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nWill result in an error with the given message.\n\n\nclass val Error[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  message: String val,\n  action: (Action[S, V] val | None val) = seq)\n: Error[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmessage: \nString\n val\n\n\naction: (\nAction\n[S, V] val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nError\n[S, V] ref^",
            "title": "class Error"
        },
        {
            "location": "/kiuatan-Error/#error91s-s-optional-v-v93",
            "text": "[Source]  Will result in an error with the given message.  class val Error[S: S, optional V: V]",
            "title": "Error[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Error/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Error/#create",
            "text": "[Source]  new ref create(\n  message: String val,\n  action: (Action[S, V] val | None val) = seq)\n: Error[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Error/#parameters",
            "text": "message:  String  val  action: ( Action [S, V] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Error/#returns",
            "text": "Error [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Look/",
            "text": "Look[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nPositive lookahead: will succeed if its child rule matches, but will not advance the match position.\n\n\nclass val Look[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  body: RuleNode[S, V] box,\n  action: (Action[S, V] val | None val) = seq)\n: Look[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbody: \nRuleNode\n[S, V] box\n\n\naction: (\nAction\n[S, V] val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nLook\n[S, V] ref^",
            "title": "class Look"
        },
        {
            "location": "/kiuatan-Look/#look91s-s-optional-v-v93",
            "text": "[Source]  Positive lookahead: will succeed if its child rule matches, but will not advance the match position.  class val Look[S: S, optional V: V]",
            "title": "Look[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Look/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Look/#create",
            "text": "[Source]  new ref create(\n  body: RuleNode[S, V] box,\n  action: (Action[S, V] val | None val) = seq)\n: Look[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Look/#parameters",
            "text": "body:  RuleNode [S, V] box  action: ( Action [S, V] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Look/#returns",
            "text": "Look [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Neg/",
            "text": "Neg[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nNegative lookahead: will succeed if its child rule does not match, and will not advance the match position.\n\n\nclass val Neg[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  body: RuleNode[S, V] box,\n  action: (Action[S, V] val | None val) = seq)\n: Neg[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbody: \nRuleNode\n[S, V] box\n\n\naction: (\nAction\n[S, V] val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNeg\n[S, V] ref^",
            "title": "class Neg"
        },
        {
            "location": "/kiuatan-Neg/#neg91s-s-optional-v-v93",
            "text": "[Source]  Negative lookahead: will succeed if its child rule does not match, and will not advance the match position.  class val Neg[S: S, optional V: V]",
            "title": "Neg[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Neg/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Neg/#create",
            "text": "[Source]  new ref create(\n  body: RuleNode[S, V] box,\n  action: (Action[S, V] val | None val) = seq)\n: Neg[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Neg/#parameters",
            "text": "body:  RuleNode [S, V] box  action: ( Action [S, V] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Neg/#returns",
            "text": "Neg [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Star/",
            "text": "Star[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nA generalization of Kleene star: will match from \nmin\n to \nmax\n repetitions of its child rule.\n\n\nclass val Star[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  body: RuleNode[S, V] box,\n  min: USize val = seq,\n  action: (Action[S, V] val | None val) = seq,\n  max: USize val = seq)\n: Star[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbody: \nRuleNode\n[S, V] box\n\n\nmin: \nUSize\n val = seq\n\n\naction: (\nAction\n[S, V] val | \nNone\n val) = seq\n\n\nmax: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStar\n[S, V] ref^",
            "title": "class Star"
        },
        {
            "location": "/kiuatan-Star/#star91s-s-optional-v-v93",
            "text": "[Source]  A generalization of Kleene star: will match from  min  to  max  repetitions of its child rule.  class val Star[S: S, optional V: V]",
            "title": "Star[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Star/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Star/#create",
            "text": "[Source]  new ref create(\n  body: RuleNode[S, V] box,\n  min: USize val = seq,\n  action: (Action[S, V] val | None val) = seq,\n  max: USize val = seq)\n: Star[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Star/#parameters",
            "text": "body:  RuleNode [S, V] box  min:  USize  val = seq  action: ( Action [S, V] val |  None  val) = seq  max:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Star/#returns",
            "text": "Star [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Rules/",
            "text": "Rules[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nprimitive val Rules[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Rules[S, V] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nRules\n[S, V] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\ndefaultAction\n\u00b6\n\n\n[Source]\n\n\nfun box defaultAction()\n: Action[S, V] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAction\n[S, V] val\n\n\n\n\n\n\nemptyAction\n\u00b6\n\n\n[Source]\n\n\nfun box emptyAction()\n: Action[S, V] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAction\n[S, V] val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Rules[S, V] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nRules\n[S, V] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Rules[S, V] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nRules\n[S, V] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Rules"
        },
        {
            "location": "/kiuatan-Rules/#rules91s-s-optional-v-v93",
            "text": "[Source]  primitive val Rules[S: S, optional V: V]",
            "title": "Rules[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Rules/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Rules/#create",
            "text": "[Source]  new val create()\n: Rules[S, V] val^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Rules/#returns",
            "text": "Rules [S, V] val^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Rules/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-Rules/#defaultaction",
            "text": "[Source]  fun box defaultAction()\n: Action[S, V] val",
            "title": "defaultAction"
        },
        {
            "location": "/kiuatan-Rules/#returns_1",
            "text": "Action [S, V] val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Rules/#emptyaction",
            "text": "[Source]  fun box emptyAction()\n: Action[S, V] val",
            "title": "emptyAction"
        },
        {
            "location": "/kiuatan-Rules/#returns_2",
            "text": "Action [S, V] val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Rules/#eq",
            "text": "[Source]  fun box eq(\n  that: Rules[S, V] val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/kiuatan-Rules/#parameters",
            "text": "that:  Rules [S, V] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Rules/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Rules/#ne",
            "text": "[Source]  fun box ne(\n  that: Rules[S, V] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/kiuatan-Rules/#parameters_1",
            "text": "that:  Rules [S, V] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Rules/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-RuleNode/",
            "text": "RuleNode[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\ninterface val RuleNode[S: S, optional V: V]",
            "title": "interface RuleNode"
        },
        {
            "location": "/kiuatan-RuleNode/#rulenode91s-s-optional-v-v93",
            "text": "[Source]  interface val RuleNode[S: S, optional V: V]",
            "title": "RuleNode[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Rule/",
            "text": "Rule[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nRepresents a named grammar rule.  Memoization and left-recursion handling happens per named \nRule\n.\n\n\nclass val Rule[S: S, optional V: V] is\n  RuleNode[S, V] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nRuleNode\n[S, V] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  name': String val,\n  body: (RuleNode[S, V] box | None val),\n  action: Action[S, V] val = seq)\n: Rule[S, V] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nname': \nString\n val\n\n\nbody: (\nRuleNode\n[S, V] box | \nNone\n val)\n\n\naction: \nAction\n[S, V] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nRule\n[S, V] ref^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet name: \nString\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nPublic Functions\n\u00b6\n\n\nset_body\n\u00b6\n\n\n[Source]\n\n\nfun ref set_body(\n  body: RuleNode[S, V] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbody: \nRuleNode\n[S, V] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class Rule"
        },
        {
            "location": "/kiuatan-Rule/#rule91s-s-optional-v-v93",
            "text": "[Source]  Represents a named grammar rule.  Memoization and left-recursion handling happens per named  Rule .  class val Rule[S: S, optional V: V] is\n  RuleNode[S, V] val",
            "title": "Rule[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Rule/#implements",
            "text": "RuleNode [S, V] val",
            "title": "Implements"
        },
        {
            "location": "/kiuatan-Rule/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Rule/#create",
            "text": "[Source]  new ref create(\n  name': String val,\n  body: (RuleNode[S, V] box | None val),\n  action: Action[S, V] val = seq)\n: Rule[S, V] ref^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Rule/#parameters",
            "text": "name':  String  val  body: ( RuleNode [S, V] box |  None  val)  action:  Action [S, V] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Rule/#returns",
            "text": "Rule [S, V] ref^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Rule/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/kiuatan-Rule/#let-name-string-val",
            "text": "[Source]",
            "title": "let name: String val"
        },
        {
            "location": "/kiuatan-Rule/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-Rule/#set_body",
            "text": "[Source]  fun ref set_body(\n  body: RuleNode[S, V] box)\n: None val",
            "title": "set_body"
        },
        {
            "location": "/kiuatan-Rule/#parameters_1",
            "text": "body:  RuleNode [S, V] box",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Rule/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Result/",
            "text": "Result[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nThe result of a parse attempt, either successful or failed.\n\n\ntype Result[S: S, optional V: V] is\n  (Success[S, V] val | Failure[S, V] val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nSuccess\n[S, V] val | \nFailure\n[S, V] val)",
            "title": "type Result"
        },
        {
            "location": "/kiuatan-Result/#result91s-s-optional-v-v93",
            "text": "[Source]  The result of a parse attempt, either successful or failed.  type Result[S: S, optional V: V] is\n  (Success[S, V] val | Failure[S, V] val)",
            "title": "Result[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Result/#type-alias-for",
            "text": "( Success [S, V] val |  Failure [S, V] val)",
            "title": "Type Alias For"
        },
        {
            "location": "/kiuatan-Success/",
            "text": "Success[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nThe result of a successful parse.\n\n\nclass val Success[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  node': RuleNode[S, V] val,\n  start': Loc[S] val,\n  next': Loc[S] val,\n  children': ReadSeq[Success[S, V] val] val = seq)\n: Success[S, V] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnode': \nRuleNode\n[S, V] val\n\n\nstart': \nLoc\n[S] val\n\n\nnext': \nLoc\n[S] val\n\n\nchildren': \nReadSeq\n[\nSuccess\n[S, V] val] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSuccess\n[S, V] val^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet node: \nRuleNode\n[S, V] val\n\u00b6\n\n\n[Source]\n\n\nThe rule that matched successfully.\n\n\n\n\nlet start: \nLoc\n[S] val\n\u00b6\n\n\n[Source]\n\n\nThe location at which the rule matched.\n\n\n\n\nlet next: \nLoc\n[S] val\n\u00b6\n\n\n[Source]\n\n\nThe location one past the end of the match.\n\n\n\n\nlet children: \nReadSeq\n[\nSuccess\n[S, V] val] val\n\u00b6\n\n\n[Source]\n\n\nResults from child rules' matches.\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nCall the matched rules' actions to assemble a custom result value.\n\n\nfun val value()\n: (V^ | None val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(V^ | \nNone\n val)\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^",
            "title": "class Success"
        },
        {
            "location": "/kiuatan-Success/#success91s-s-optional-v-v93",
            "text": "[Source]  The result of a successful parse.  class val Success[S: S, optional V: V]",
            "title": "Success[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Success/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Success/#create",
            "text": "[Source]  new val create(\n  node': RuleNode[S, V] val,\n  start': Loc[S] val,\n  next': Loc[S] val,\n  children': ReadSeq[Success[S, V] val] val = seq)\n: Success[S, V] val^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Success/#parameters",
            "text": "node':  RuleNode [S, V] val  start':  Loc [S] val  next':  Loc [S] val  children':  ReadSeq [ Success [S, V] val] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Success/#returns",
            "text": "Success [S, V] val^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Success/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/kiuatan-Success/#let-node-rulenode91s-v93-val",
            "text": "[Source]  The rule that matched successfully.",
            "title": "let node: RuleNode[S, V] val"
        },
        {
            "location": "/kiuatan-Success/#let-start-loc91s93-val",
            "text": "[Source]  The location at which the rule matched.",
            "title": "let start: Loc[S] val"
        },
        {
            "location": "/kiuatan-Success/#let-next-loc91s93-val",
            "text": "[Source]  The location one past the end of the match.",
            "title": "let next: Loc[S] val"
        },
        {
            "location": "/kiuatan-Success/#let-children-readseq91success91s-v93-val93-val",
            "text": "[Source]  Results from child rules' matches.",
            "title": "let children: ReadSeq[Success[S, V] val] val"
        },
        {
            "location": "/kiuatan-Success/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-Success/#value",
            "text": "[Source]  Call the matched rules' actions to assemble a custom result value.  fun val value()\n: (V^ | None val)",
            "title": "value"
        },
        {
            "location": "/kiuatan-Success/#returns_1",
            "text": "(V^ |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Success/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/kiuatan-Success/#returns_2",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Failure/",
            "text": "Failure[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nThe result of a failed match.\n\n\nclass val Failure[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  node': RuleNode[S, V] val,\n  start': Loc[S] val,\n  message': String val = seq,\n  inner': (Failure[S, V] val | None val) = seq)\n: Failure[S, V] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnode': \nRuleNode\n[S, V] val\n\n\nstart': \nLoc\n[S] val\n\n\nmessage': \nString\n val = seq\n\n\ninner': (\nFailure\n[S, V] val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFailure\n[S, V] val^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet node: \nRuleNode\n[S, V] val\n\u00b6\n\n\n[Source]\n\n\n\n\nlet start: \nLoc\n[S] val\n\u00b6\n\n\n[Source]\n\n\n\n\nlet message: \nString\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nlet inner: (\nFailure\n[S, V] val | \nNone\n val)\n\u00b6\n\n\n[Source]\n\n\n\n\nPublic Functions\n\u00b6\n\n\nget_message\n\u00b6\n\n\n[Source]\n\n\nfun box get_message()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^",
            "title": "class Failure"
        },
        {
            "location": "/kiuatan-Failure/#failure91s-s-optional-v-v93",
            "text": "[Source]  The result of a failed match.  class val Failure[S: S, optional V: V]",
            "title": "Failure[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Failure/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Failure/#create",
            "text": "[Source]  new val create(\n  node': RuleNode[S, V] val,\n  start': Loc[S] val,\n  message': String val = seq,\n  inner': (Failure[S, V] val | None val) = seq)\n: Failure[S, V] val^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Failure/#parameters",
            "text": "node':  RuleNode [S, V] val  start':  Loc [S] val  message':  String  val = seq  inner': ( Failure [S, V] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Failure/#returns",
            "text": "Failure [S, V] val^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Failure/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/kiuatan-Failure/#let-node-rulenode91s-v93-val",
            "text": "[Source]",
            "title": "let node: RuleNode[S, V] val"
        },
        {
            "location": "/kiuatan-Failure/#let-start-loc91s93-val",
            "text": "[Source]",
            "title": "let start: Loc[S] val"
        },
        {
            "location": "/kiuatan-Failure/#let-message-string-val",
            "text": "[Source]",
            "title": "let message: String val"
        },
        {
            "location": "/kiuatan-Failure/#let-inner-failure91s-v93-val-none-val",
            "text": "[Source]",
            "title": "let inner: (Failure[S, V] val | None val)"
        },
        {
            "location": "/kiuatan-Failure/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-Failure/#get_message",
            "text": "[Source]  fun box get_message()\n: String val",
            "title": "get_message"
        },
        {
            "location": "/kiuatan-Failure/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Failure/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/kiuatan-Failure/#returns_2",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Action/",
            "text": "Action[S: S, V: V]\n\u00b6\n\n\n[Source]\n\n\nUsed to assemble a custom result value.\n\n\ninterface val Action[S: S, V: V]\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  ctx: ActionContext[S, V] iso)\n: (V^ | None val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctx: \nActionContext\n[S, V] iso\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(V^ | \nNone\n val)",
            "title": "interface Action"
        },
        {
            "location": "/kiuatan-Action/#action91s-s-v-v93",
            "text": "[Source]  Used to assemble a custom result value.  interface val Action[S: S, V: V]",
            "title": "Action[S: S, V: V]"
        },
        {
            "location": "/kiuatan-Action/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-Action/#apply",
            "text": "[Source]  fun box apply(\n  ctx: ActionContext[S, V] iso)\n: (V^ | None val)",
            "title": "apply"
        },
        {
            "location": "/kiuatan-Action/#parameters",
            "text": "ctx:  ActionContext [S, V] iso",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Action/#returns",
            "text": "(V^ |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-ActionContext/",
            "text": "ActionContext[S: S, V: V]\n\u00b6\n\n\n[Source]\n\n\nclass iso ActionContext[S: S, V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create(\n  result': Success[S, V] val,\n  child_values': Array[(V | None val)] val)\n: ActionContext[S, V] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nresult': \nSuccess\n[S, V] val\n\n\nchild_values': \nArray\n[(V | \nNone\n val)] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nActionContext\n[S, V] iso^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet result: \nSuccess\n[S, V] val\n\u00b6\n\n\n[Source]\n\n\n\n\nlet child_values: \nArray\n[(V | \nNone\n val)] val\n\u00b6\n\n\n[Source]",
            "title": "class ActionContext"
        },
        {
            "location": "/kiuatan-ActionContext/#actioncontext91s-s-v-v93",
            "text": "[Source]  class iso ActionContext[S: S, V: V]",
            "title": "ActionContext[S: S, V: V]"
        },
        {
            "location": "/kiuatan-ActionContext/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-ActionContext/#create",
            "text": "[Source]  new iso create(\n  result': Success[S, V] val,\n  child_values': Array[(V | None val)] val)\n: ActionContext[S, V] iso^",
            "title": "create"
        },
        {
            "location": "/kiuatan-ActionContext/#parameters",
            "text": "result':  Success [S, V] val  child_values':  Array [(V |  None  val)] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-ActionContext/#returns",
            "text": "ActionContext [S, V] iso^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-ActionContext/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/kiuatan-ActionContext/#let-result-success91s-v93-val",
            "text": "[Source]",
            "title": "let result: Success[S, V] val"
        },
        {
            "location": "/kiuatan-ActionContext/#let-child_values-array91v-none-val93-val",
            "text": "[Source]",
            "title": "let child_values: Array[(V | None val)] val"
        },
        {
            "location": "/kiuatan-Parser/",
            "text": "Parser[S: S, optional V: V]\n\u00b6\n\n\n[Source]\n\n\nStores a source of inputs to a parse, and a memo of parse results from prior parses.\n\n\nAlso used to initiate a parse attempt.\n\n\nactor tag Parser[S: S, optional V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew tag create(\n  source: ReadSeq[ReadSeq[S] val] val)\n: Parser[S, V] tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsource: \nReadSeq\n[\nReadSeq\n[S] val] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nParser\n[S, V] tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\ninsert_segment\n\u00b6\n\n\n[Source]\n\n\nInsert a source segment at the given index.  The insertion will happen upon the next call to \nparse()\n.\n\n\nbe insert_segment(\n  index: USize val,\n  segment: ReadSeq[S] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nindex: \nUSize\n val\n\n\nsegment: \nReadSeq\n[S] val\n\n\n\n\n\n\nremove_segment\n\u00b6\n\n\n[Source]\n\n\nRemoves the source segment at the given index.  The removal will happen upon the next call to \nparse()\n.\n\n\nbe remove_segment(\n  index: USize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nindex: \nUSize\n val\n\n\n\n\n\n\nparse\n\u00b6\n\n\n[Source]\n\n\nInitiates a parse attempt with the given rule.\n\n\nbe parse(\n  rule: RuleNode[S, V] val,\n  callback: ParseCallback[S, V] val,\n  start: (Loc[S] val | None val) = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nrule: \nRuleNode\n[S, V] val\n\n\ncallback: \nParseCallback\n[S, V] val\n\n\nstart: (\nLoc\n[S] val | \nNone\n val) = seq\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnum_segments\n\u00b6\n\n\n[Source]\n\n\nReturns the number of segments currently in the source.\n\n\nfun box num_segments()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val",
            "title": "actor Parser"
        },
        {
            "location": "/kiuatan-Parser/#parser91s-s-optional-v-v93",
            "text": "[Source]  Stores a source of inputs to a parse, and a memo of parse results from prior parses.  Also used to initiate a parse attempt.  actor tag Parser[S: S, optional V: V]",
            "title": "Parser[S: S, optional V: V]"
        },
        {
            "location": "/kiuatan-Parser/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Parser/#create",
            "text": "[Source]  new tag create(\n  source: ReadSeq[ReadSeq[S] val] val)\n: Parser[S, V] tag^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Parser/#parameters",
            "text": "source:  ReadSeq [ ReadSeq [S] val] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Parser/#returns",
            "text": "Parser [S, V] tag^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Parser/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/kiuatan-Parser/#insert_segment",
            "text": "[Source]  Insert a source segment at the given index.  The insertion will happen upon the next call to  parse() .  be insert_segment(\n  index: USize val,\n  segment: ReadSeq[S] val)",
            "title": "insert_segment"
        },
        {
            "location": "/kiuatan-Parser/#parameters_1",
            "text": "index:  USize  val  segment:  ReadSeq [S] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Parser/#remove_segment",
            "text": "[Source]  Removes the source segment at the given index.  The removal will happen upon the next call to  parse() .  be remove_segment(\n  index: USize val)",
            "title": "remove_segment"
        },
        {
            "location": "/kiuatan-Parser/#parameters_2",
            "text": "index:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Parser/#parse",
            "text": "[Source]  Initiates a parse attempt with the given rule.  be parse(\n  rule: RuleNode[S, V] val,\n  callback: ParseCallback[S, V] val,\n  start: (Loc[S] val | None val) = seq)",
            "title": "parse"
        },
        {
            "location": "/kiuatan-Parser/#parameters_3",
            "text": "rule:  RuleNode [S, V] val  callback:  ParseCallback [S, V] val  start: ( Loc [S] val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Parser/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-Parser/#num_segments",
            "text": "[Source]  Returns the number of segments currently in the source.  fun box num_segments()\n: USize val",
            "title": "num_segments"
        },
        {
            "location": "/kiuatan-Parser/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-ParseCallback/",
            "text": "ParseCallback[S: S, V: V]\n\u00b6\n\n\n[Source]\n\n\nUsed to report the results of a parse attempt.\n\n\ninterface val ParseCallback[S: S, V: V]\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  result: (Success[S, V] val | Failure[S, V] val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nresult: (\nSuccess\n[S, V] val | \nFailure\n[S, V] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface ParseCallback"
        },
        {
            "location": "/kiuatan-ParseCallback/#parsecallback91s-s-v-v93",
            "text": "[Source]  Used to report the results of a parse attempt.  interface val ParseCallback[S: S, V: V]",
            "title": "ParseCallback[S: S, V: V]"
        },
        {
            "location": "/kiuatan-ParseCallback/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-ParseCallback/#apply",
            "text": "[Source]  fun box apply(\n  result: (Success[S, V] val | Failure[S, V] val))\n: None val",
            "title": "apply"
        },
        {
            "location": "/kiuatan-ParseCallback/#parameters",
            "text": "result: ( Success [S, V] val |  Failure [S, V] val)",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-ParseCallback/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Dbg/",
            "text": "Dbg[S: S, V: V]\n\u00b6\n\n\n[Source]\n\n\nprimitive val Dbg[S: S, V: V]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Dbg[S, V] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDbg\n[S, V] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Dbg[S, V] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDbg\n[S, V] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Dbg[S, V] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDbg\n[S, V] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Dbg"
        },
        {
            "location": "/kiuatan-Dbg/#dbg91s-s-v-v93",
            "text": "[Source]  primitive val Dbg[S: S, V: V]",
            "title": "Dbg[S: S, V: V]"
        },
        {
            "location": "/kiuatan-Dbg/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Dbg/#create",
            "text": "[Source]  new val create()\n: Dbg[S, V] val^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Dbg/#returns",
            "text": "Dbg [S, V] val^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Dbg/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-Dbg/#eq",
            "text": "[Source]  fun box eq(\n  that: Dbg[S, V] val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/kiuatan-Dbg/#parameters",
            "text": "that:  Dbg [S, V] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Dbg/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Dbg/#ne",
            "text": "[Source]  fun box ne(\n  that: Dbg[S, V] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/kiuatan-Dbg/#parameters_1",
            "text": "that:  Dbg [S, V] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Dbg/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Segment/",
            "text": "Segment[T: T]\n\u00b6\n\n\n[Source]\n\n\ntype Segment[T: T] is\n  ReadSeq[T] val\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nReadSeq\n[T] val",
            "title": "type Segment"
        },
        {
            "location": "/kiuatan-Segment/#segment91t-t93",
            "text": "[Source]  type Segment[T: T] is\n  ReadSeq[T] val",
            "title": "Segment[T: T]"
        },
        {
            "location": "/kiuatan-Segment/#type-alias-for",
            "text": "ReadSeq [T] val",
            "title": "Type Alias For"
        },
        {
            "location": "/kiuatan-Source/",
            "text": "Source[T: T]\n\u00b6\n\n\n[Source]\n\n\ntype Source[T: T] is\n  (Cons[ReadSeq[T] val] val | Nil[ReadSeq[T] val] val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nCons\n[\nReadSeq\n[T] val] val | \nNil\n[\nReadSeq\n[T] val] val)",
            "title": "type Source"
        },
        {
            "location": "/kiuatan-Source/#source91t-t93",
            "text": "[Source]  type Source[T: T] is\n  (Cons[ReadSeq[T] val] val | Nil[ReadSeq[T] val] val)",
            "title": "Source[T: T]"
        },
        {
            "location": "/kiuatan-Source/#type-alias-for",
            "text": "( Cons [ ReadSeq [T] val] val |  Nil [ ReadSeq [T] val] val)",
            "title": "Type Alias For"
        },
        {
            "location": "/kiuatan-Loc/",
            "text": "Loc[T: T]\n\u00b6\n\n\n[Source]\n\n\nRepresents a location in a \nSource\n at which to parse, or at which a parse has matched.\n\n\nclass val Loc[T: T] is\n  Hashable ref,\n  Equatable[Loc[T] val] ref,\n  Stringable box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashable\n ref\n\n\nEquatable\n[\nLoc\n[T] val] ref\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a new location in the given segment.\n\n\nnew val create(\n  segment: (Cons[ReadSeq[T] val] val | Nil[ReadSeq[T] val] val),\n  index: USize val = seq)\n: Loc[T] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsegment: (\nCons\n[\nReadSeq\n[T] val] val | \nNil\n[\nReadSeq\n[T] val] val)\n\n\nindex: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nLoc\n[T] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_value\n\u00b6\n\n\n[Source]\n\n\nReturns \ntrue\n if there is actually an item at the location, i.e. if the location points to a valid place in the segment.\n\n\nfun box has_value()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the item at the location.\n\n\nfun box apply()\n: val->T ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->T ?\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next location in the source.  May not be valid.\n\n\nfun box next()\n: Loc[T] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nLoc\n[T] val\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nReturns a location \nn\n places further in the source.  May not be valid.\n\n\nfun val add(\n  n: USize val)\n: Loc[T] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nLoc\n[T] val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturns \ntrue\n if the two locations point to the same spot in the same segment.\n\n\nfun box eq(\n  that: Loc[T] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nLoc\n[T] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nReturns \ntrue\n if the two locations do not point to the same spot in the same segment.\n\n\nfun box ne(\n  that: Loc[T] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nLoc\n[T] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nReturns \ntrue\n if \nthat\n is further along in the source than \nthis\n.  Should be used sparingly, as it has to count up from \nthis\n, possibly to the end of the source.\n\n\nfun box gt(\n  that: Loc[T] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nLoc\n[T] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^",
            "title": "class Loc"
        },
        {
            "location": "/kiuatan-Loc/#loc91t-t93",
            "text": "[Source]  Represents a location in a  Source  at which to parse, or at which a parse has matched.  class val Loc[T: T] is\n  Hashable ref,\n  Equatable[Loc[T] val] ref,\n  Stringable box",
            "title": "Loc[T: T]"
        },
        {
            "location": "/kiuatan-Loc/#implements",
            "text": "Hashable  ref  Equatable [ Loc [T] val] ref  Stringable  box",
            "title": "Implements"
        },
        {
            "location": "/kiuatan-Loc/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/kiuatan-Loc/#create",
            "text": "[Source]  Create a new location in the given segment.  new val create(\n  segment: (Cons[ReadSeq[T] val] val | Nil[ReadSeq[T] val] val),\n  index: USize val = seq)\n: Loc[T] val^",
            "title": "create"
        },
        {
            "location": "/kiuatan-Loc/#parameters",
            "text": "segment: ( Cons [ ReadSeq [T] val] val |  Nil [ ReadSeq [T] val] val)  index:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Loc/#returns",
            "text": "Loc [T] val^",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/kiuatan-Loc/#has_value",
            "text": "[Source]  Returns  true  if there is actually an item at the location, i.e. if the location points to a valid place in the segment.  fun box has_value()\n: Bool val",
            "title": "has_value"
        },
        {
            "location": "/kiuatan-Loc/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#apply",
            "text": "[Source]  Returns the item at the location.  fun box apply()\n: val->T ?",
            "title": "apply"
        },
        {
            "location": "/kiuatan-Loc/#returns_2",
            "text": "val->T ?",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#next",
            "text": "[Source]  Returns the next location in the source.  May not be valid.  fun box next()\n: Loc[T] val",
            "title": "next"
        },
        {
            "location": "/kiuatan-Loc/#returns_3",
            "text": "Loc [T] val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#add",
            "text": "[Source]  Returns a location  n  places further in the source.  May not be valid.  fun val add(\n  n: USize val)\n: Loc[T] val",
            "title": "add"
        },
        {
            "location": "/kiuatan-Loc/#parameters_1",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Loc/#returns_4",
            "text": "Loc [T] val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#eq",
            "text": "[Source]  Returns  true  if the two locations point to the same spot in the same segment.  fun box eq(\n  that: Loc[T] val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/kiuatan-Loc/#parameters_2",
            "text": "that:  Loc [T] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Loc/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#ne",
            "text": "[Source]  Returns  true  if the two locations do not point to the same spot in the same segment.  fun box ne(\n  that: Loc[T] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/kiuatan-Loc/#parameters_3",
            "text": "that:  Loc [T] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Loc/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#gt",
            "text": "[Source]  Returns  true  if  that  is further along in the source than  this .  Should be used sparingly, as it has to count up from  this , possibly to the end of the source.  fun box gt(\n  that: Loc[T] val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/kiuatan-Loc/#parameters_4",
            "text": "that:  Loc [T] val",
            "title": "Parameters"
        },
        {
            "location": "/kiuatan-Loc/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/kiuatan-Loc/#returns_8",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/kiuatan-Loc/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/kiuatan-Loc/#returns_9",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin--index/",
            "text": "Builtin package\n\u00b6\n\n\nThe builtin package is home to the following standard library members:\n\n\n\n\nTypes the compiler needs to know exist, such as None.\n\n\nTypes with \"magic\" internal workings that must be supplied directly by the\ncompiler, such as U32.\n\n\nAny types needed by others in builtin.\n\n\n\n\nThe public types that are defined in this package will always be in scope for\nevery Pony source file. For details on specific packages, see their individual\nentity entries.\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive U8\n\n\nprimitive U16\n\n\nprimitive U32\n\n\nprimitive U64\n\n\nprimitive ULong\n\n\nprimitive USize\n\n\nprimitive U128\n\n\ntype Unsigned\n\n\ninterface Stringable\n\n\nclass String\n\n\nclass StringBytes\n\n\nclass StringRunes\n\n\ninterface InputNotify\n\n\ninterface DisposableActor\n\n\ninterface InputStream\n\n\nactor Stdin\n\n\ntype ByteSeq\n\n\ninterface ByteSeqIter\n\n\ninterface OutStream\n\n\nactor StdStream\n\n\ninterface SourceLoc\n\n\nprimitive I8\n\n\nprimitive I16\n\n\nprimitive I32\n\n\nprimitive I64\n\n\nprimitive ILong\n\n\nprimitive ISize\n\n\nprimitive I128\n\n\ntype Signed\n\n\ninterface Seq\n\n\ntrait Real\n\n\ntrait Integer\n\n\ntrait FloatingPoint\n\n\ntype Number\n\n\ntype Int\n\n\ninterface ReadSeq\n\n\ninterface ReadElement\n\n\nstruct Pointer\n\n\nprimitive Platform\n\n\nprimitive None\n\n\nstruct MaybePointer\n\n\ninterface Iterator\n\n\nprimitive F32\n\n\nprimitive F64\n\n\ntype Float\n\n\nclass Env\n\n\nprimitive DoNotOptimise\n\n\nprimitive Less\n\n\nprimitive Equal\n\n\nprimitive Greater\n\n\ntype Compare\n\n\ninterface HasEq\n\n\ninterface Equatable\n\n\ninterface Comparable\n\n\nprimitive Bool\n\n\ntype AsioEventID\n\n\ninterface AsioEventNotify\n\n\nprimitive AsioEvent\n\n\nclass Array\n\n\nclass ArrayKeys\n\n\nclass ArrayValues\n\n\nclass ArrayPairs\n\n\ninterface Any\n\n\nprimitive AmbientAuth",
            "title": "Package"
        },
        {
            "location": "/builtin--index/#builtin-package",
            "text": "The builtin package is home to the following standard library members:   Types the compiler needs to know exist, such as None.  Types with \"magic\" internal workings that must be supplied directly by the\ncompiler, such as U32.  Any types needed by others in builtin.   The public types that are defined in this package will always be in scope for\nevery Pony source file. For details on specific packages, see their individual\nentity entries.",
            "title": "Builtin package"
        },
        {
            "location": "/builtin--index/#public-types",
            "text": "primitive U8  primitive U16  primitive U32  primitive U64  primitive ULong  primitive USize  primitive U128  type Unsigned  interface Stringable  class String  class StringBytes  class StringRunes  interface InputNotify  interface DisposableActor  interface InputStream  actor Stdin  type ByteSeq  interface ByteSeqIter  interface OutStream  actor StdStream  interface SourceLoc  primitive I8  primitive I16  primitive I32  primitive I64  primitive ILong  primitive ISize  primitive I128  type Signed  interface Seq  trait Real  trait Integer  trait FloatingPoint  type Number  type Int  interface ReadSeq  interface ReadElement  struct Pointer  primitive Platform  primitive None  struct MaybePointer  interface Iterator  primitive F32  primitive F64  type Float  class Env  primitive DoNotOptimise  primitive Less  primitive Equal  primitive Greater  type Compare  interface HasEq  interface Equatable  interface Comparable  primitive Bool  type AsioEventID  interface AsioEventNotify  primitive AsioEvent  class Array  class ArrayKeys  class ArrayValues  class ArrayPairs  interface Any  primitive AmbientAuth",
            "title": "Public Types"
        },
        {
            "location": "/builtin-U8/",
            "text": "U8\n\u00b6\n\n\n[Source]\n\n\nprimitive val U8 is\n  _UnsignedInteger[U8 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U8 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U8 val)\n: U8 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: U8 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U8 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U8 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nU8\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: U8 val)\n: (U8 val , U8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nU8\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U8"
        },
        {
            "location": "/builtin-U8/#u8",
            "text": "[Source]  primitive val U8 is\n  _UnsignedInteger[U8 val] val",
            "title": "U8"
        },
        {
            "location": "/builtin-U8/#implements",
            "text": "_UnsignedInteger[U8 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U8/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U8/#create",
            "text": "[Source]  new val create(\n  value: U8 val)\n: U8 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U8/#parameters",
            "text": "value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns",
            "text": "U8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: U8 val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-U8/#parameters_1",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_1",
            "text": "U8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#min_value",
            "text": "[Source]  new val min_value()\n: U8 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U8/#returns_2",
            "text": "U8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#max_value",
            "text": "[Source]  new val max_value()\n: U8 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U8/#returns_3",
            "text": "U8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U8/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U8 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U8/#returns_4",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#abs",
            "text": "[Source]  fun box abs()\n: U8 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U8/#returns_5",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U8 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U8/#returns_6",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#bswap",
            "text": "[Source]  fun box bswap()\n: U8 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U8/#returns_7",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#popcount",
            "text": "[Source]  fun box popcount()\n: U8 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U8/#returns_8",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#clz",
            "text": "[Source]  fun box clz()\n: U8 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U8/#returns_9",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ctz",
            "text": "[Source]  fun box ctz()\n: U8 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U8/#returns_10",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U8 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_11",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U8 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_12",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U8 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U8/#returns_13",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#min",
            "text": "[Source]  fun box min(\n  y: U8 val)\n: U8 val",
            "title": "min"
        },
        {
            "location": "/builtin-U8/#parameters_2",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_14",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#max",
            "text": "[Source]  fun box max(\n  y: U8 val)\n: U8 val",
            "title": "max"
        },
        {
            "location": "/builtin-U8/#parameters_3",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_15",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#addc",
            "text": "[Source]  fun box addc(\n  y: U8 val)\n: (U8 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U8/#parameters_4",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_16",
            "text": "( U8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#subc",
            "text": "[Source]  fun box subc(\n  y: U8 val)\n: (U8 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U8/#parameters_5",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_17",
            "text": "( U8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U8/#parameters_6",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_18",
            "text": "( U8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#shl",
            "text": "fun box shl(\n  y: U8 val)\n: U8 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U8/#parameters_7",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_19",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#shr",
            "text": "fun box shr(\n  y: U8 val)\n: U8 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U8/#parameters_8",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_20",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_9",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_21",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_10",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_22",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#rotl",
            "text": "fun box rotl(\n  y: U8 val)\n: U8 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U8/#parameters_11",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_23",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#rotr",
            "text": "fun box rotr(\n  y: U8 val)\n: U8 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U8/#parameters_12",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_24",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U8/#returns_25",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_13",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_26",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_14",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_27",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_15",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_28",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_16",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_29",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_17",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_30",
            "text": "( U8  val ,  U8  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_18",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_31",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U8 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_32",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#op_and",
            "text": "fun box op_and(\n  y: U8 val)\n: U8 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U8/#parameters_19",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_33",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#op_or",
            "text": "fun box op_or(\n  y: U8 val)\n: U8 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U8/#parameters_20",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_34",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#op_xor",
            "text": "fun box op_xor(\n  y: U8 val)\n: U8 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U8/#parameters_21",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_35",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#op_not",
            "text": "fun box op_not()\n: U8 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U8/#returns_36",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#add",
            "text": "fun box add(\n  y: U8 val)\n: U8 val",
            "title": "add"
        },
        {
            "location": "/builtin-U8/#parameters_22",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_37",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#sub",
            "text": "fun box sub(\n  y: U8 val)\n: U8 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U8/#parameters_23",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_38",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mul",
            "text": "fun box mul(\n  y: U8 val)\n: U8 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U8/#parameters_24",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_39",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#div",
            "text": "fun box div(\n  y: U8 val)\n: U8 val",
            "title": "div"
        },
        {
            "location": "/builtin-U8/#parameters_25",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_40",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#divmod",
            "text": "fun box divmod(\n  y: U8 val)\n: (U8 val , U8 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U8/#parameters_26",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_41",
            "text": "( U8  val ,  U8  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mod",
            "text": "fun box mod(\n  y: U8 val)\n: U8 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U8/#parameters_27",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_42",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#neg",
            "text": "fun box neg()\n: U8 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U8/#returns_43",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#eq",
            "text": "fun box eq(\n  y: U8 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U8/#parameters_28",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ne",
            "text": "fun box ne(\n  y: U8 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U8/#parameters_29",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#lt",
            "text": "fun box lt(\n  y: U8 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U8/#parameters_30",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#le",
            "text": "fun box le(\n  y: U8 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U8/#parameters_31",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ge",
            "text": "fun box ge(\n  y: U8 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U8/#parameters_32",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#gt",
            "text": "fun box gt(\n  y: U8 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U8/#parameters_33",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U8/#returns_50",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U8/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U8/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U8/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U8/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U8/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U8/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U8/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U8/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u8_1",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U8/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U8/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U8/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U8/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U8/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U8/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U8/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U8/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U8/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#compare",
            "text": "fun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U8/#parameters_34",
            "text": "that:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/",
            "text": "U16\n\u00b6\n\n\n[Source]\n\n\nprimitive val U16 is\n  _UnsignedInteger[U16 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U16 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U16 val)\n: U16 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U16 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U16 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U16 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nU16\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: U16 val)\n: (U16 val , U16 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nU16\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U16"
        },
        {
            "location": "/builtin-U16/#u16",
            "text": "[Source]  primitive val U16 is\n  _UnsignedInteger[U16 val] val",
            "title": "U16"
        },
        {
            "location": "/builtin-U16/#implements",
            "text": "_UnsignedInteger[U16 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U16/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U16/#create",
            "text": "[Source]  new val create(\n  value: U16 val)\n: U16 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U16/#parameters",
            "text": "value:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns",
            "text": "U16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U16 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-U16/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_1",
            "text": "U16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#min_value",
            "text": "[Source]  new val min_value()\n: U16 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U16/#returns_2",
            "text": "U16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#max_value",
            "text": "[Source]  new val max_value()\n: U16 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U16/#returns_3",
            "text": "U16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U16/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U16 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U16/#returns_4",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#abs",
            "text": "[Source]  fun box abs()\n: U16 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U16/#returns_5",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U16 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U16/#returns_6",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#bswap",
            "text": "[Source]  fun box bswap()\n: U16 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U16/#returns_7",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#popcount",
            "text": "[Source]  fun box popcount()\n: U16 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U16/#returns_8",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#clz",
            "text": "[Source]  fun box clz()\n: U16 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U16/#returns_9",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ctz",
            "text": "[Source]  fun box ctz()\n: U16 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U16/#returns_10",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U16 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_11",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U16 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_12",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U16 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U16/#returns_13",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#min",
            "text": "[Source]  fun box min(\n  y: U16 val)\n: U16 val",
            "title": "min"
        },
        {
            "location": "/builtin-U16/#parameters_2",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_14",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#max",
            "text": "[Source]  fun box max(\n  y: U16 val)\n: U16 val",
            "title": "max"
        },
        {
            "location": "/builtin-U16/#parameters_3",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_15",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#addc",
            "text": "[Source]  fun box addc(\n  y: U16 val)\n: (U16 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U16/#parameters_4",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_16",
            "text": "( U16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#subc",
            "text": "[Source]  fun box subc(\n  y: U16 val)\n: (U16 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U16/#parameters_5",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_17",
            "text": "( U16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U16/#parameters_6",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_18",
            "text": "( U16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#shl",
            "text": "fun box shl(\n  y: U16 val)\n: U16 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U16/#parameters_7",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_19",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#shr",
            "text": "fun box shr(\n  y: U16 val)\n: U16 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U16/#parameters_8",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_20",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_9",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_21",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_10",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_22",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#rotl",
            "text": "fun box rotl(\n  y: U16 val)\n: U16 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U16/#parameters_11",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_23",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#rotr",
            "text": "fun box rotr(\n  y: U16 val)\n: U16 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U16/#parameters_12",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_24",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U16/#returns_25",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_13",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_26",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_14",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_27",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_15",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_28",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_16",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_29",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_17",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_30",
            "text": "( U16  val ,  U16  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_18",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_31",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U16 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_32",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#op_and",
            "text": "fun box op_and(\n  y: U16 val)\n: U16 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U16/#parameters_19",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_33",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#op_or",
            "text": "fun box op_or(\n  y: U16 val)\n: U16 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U16/#parameters_20",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_34",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#op_xor",
            "text": "fun box op_xor(\n  y: U16 val)\n: U16 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U16/#parameters_21",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_35",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#op_not",
            "text": "fun box op_not()\n: U16 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U16/#returns_36",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#add",
            "text": "fun box add(\n  y: U16 val)\n: U16 val",
            "title": "add"
        },
        {
            "location": "/builtin-U16/#parameters_22",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_37",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#sub",
            "text": "fun box sub(\n  y: U16 val)\n: U16 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U16/#parameters_23",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_38",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mul",
            "text": "fun box mul(\n  y: U16 val)\n: U16 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U16/#parameters_24",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_39",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#div",
            "text": "fun box div(\n  y: U16 val)\n: U16 val",
            "title": "div"
        },
        {
            "location": "/builtin-U16/#parameters_25",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_40",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#divmod",
            "text": "fun box divmod(\n  y: U16 val)\n: (U16 val , U16 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U16/#parameters_26",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_41",
            "text": "( U16  val ,  U16  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mod",
            "text": "fun box mod(\n  y: U16 val)\n: U16 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U16/#parameters_27",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_42",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#neg",
            "text": "fun box neg()\n: U16 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U16/#returns_43",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#eq",
            "text": "fun box eq(\n  y: U16 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U16/#parameters_28",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ne",
            "text": "fun box ne(\n  y: U16 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U16/#parameters_29",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#lt",
            "text": "fun box lt(\n  y: U16 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U16/#parameters_30",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#le",
            "text": "fun box le(\n  y: U16 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U16/#parameters_31",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ge",
            "text": "fun box ge(\n  y: U16 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U16/#parameters_32",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#gt",
            "text": "fun box gt(\n  y: U16 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U16/#parameters_33",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U16/#returns_50",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U16/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U16/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U16/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U16/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U16/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U16/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U16/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U16/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U16/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u16_1",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U16/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U16/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U16/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U16/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U16/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U16/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U16/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U16/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#compare",
            "text": "fun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U16/#parameters_34",
            "text": "that:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/",
            "text": "U32\n\u00b6\n\n\n[Source]\n\n\nprimitive val U32 is\n  _UnsignedInteger[U32 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U32 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U32 val)\n: U32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: U32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U32"
        },
        {
            "location": "/builtin-U32/#u32",
            "text": "[Source]  primitive val U32 is\n  _UnsignedInteger[U32 val] val",
            "title": "U32"
        },
        {
            "location": "/builtin-U32/#implements",
            "text": "_UnsignedInteger[U32 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U32/#create",
            "text": "[Source]  new val create(\n  value: U32 val)\n: U32 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U32/#parameters",
            "text": "value:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns",
            "text": "U32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U32 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-U32/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_1",
            "text": "U32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#min_value",
            "text": "[Source]  new val min_value()\n: U32 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U32/#returns_2",
            "text": "U32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#max_value",
            "text": "[Source]  new val max_value()\n: U32 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U32/#returns_3",
            "text": "U32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U32/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U32 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U32/#returns_4",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#abs",
            "text": "[Source]  fun box abs()\n: U32 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U32/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U32 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U32/#returns_6",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#bswap",
            "text": "[Source]  fun box bswap()\n: U32 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U32/#returns_7",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#popcount",
            "text": "[Source]  fun box popcount()\n: U32 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U32/#returns_8",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#clz",
            "text": "[Source]  fun box clz()\n: U32 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U32/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ctz",
            "text": "[Source]  fun box ctz()\n: U32 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U32/#returns_10",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U32 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_11",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U32 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U32 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U32/#returns_13",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#min",
            "text": "[Source]  fun box min(\n  y: U32 val)\n: U32 val",
            "title": "min"
        },
        {
            "location": "/builtin-U32/#parameters_2",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_14",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#max",
            "text": "[Source]  fun box max(\n  y: U32 val)\n: U32 val",
            "title": "max"
        },
        {
            "location": "/builtin-U32/#parameters_3",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_15",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#addc",
            "text": "[Source]  fun box addc(\n  y: U32 val)\n: (U32 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U32/#parameters_4",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_16",
            "text": "( U32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#subc",
            "text": "[Source]  fun box subc(\n  y: U32 val)\n: (U32 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U32/#parameters_5",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_17",
            "text": "( U32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U32/#parameters_6",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_18",
            "text": "( U32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#shl",
            "text": "fun box shl(\n  y: U32 val)\n: U32 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U32/#parameters_7",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_19",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#shr",
            "text": "fun box shr(\n  y: U32 val)\n: U32 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U32/#parameters_8",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_20",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_9",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_21",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_10",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_22",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#rotl",
            "text": "fun box rotl(\n  y: U32 val)\n: U32 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U32/#parameters_11",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_23",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#rotr",
            "text": "fun box rotr(\n  y: U32 val)\n: U32 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U32/#parameters_12",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_24",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U32/#returns_25",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_13",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_26",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_14",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_27",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_15",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_28",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_16",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_29",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_17",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_30",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_18",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_31",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U32 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_32",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#op_and",
            "text": "fun box op_and(\n  y: U32 val)\n: U32 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U32/#parameters_19",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_33",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#op_or",
            "text": "fun box op_or(\n  y: U32 val)\n: U32 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U32/#parameters_20",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_34",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#op_xor",
            "text": "fun box op_xor(\n  y: U32 val)\n: U32 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U32/#parameters_21",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_35",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#op_not",
            "text": "fun box op_not()\n: U32 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U32/#returns_36",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#add",
            "text": "fun box add(\n  y: U32 val)\n: U32 val",
            "title": "add"
        },
        {
            "location": "/builtin-U32/#parameters_22",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_37",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#sub",
            "text": "fun box sub(\n  y: U32 val)\n: U32 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U32/#parameters_23",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_38",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mul",
            "text": "fun box mul(\n  y: U32 val)\n: U32 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U32/#parameters_24",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_39",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#div",
            "text": "fun box div(\n  y: U32 val)\n: U32 val",
            "title": "div"
        },
        {
            "location": "/builtin-U32/#parameters_25",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_40",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#divmod",
            "text": "fun box divmod(\n  y: U32 val)\n: (U32 val , U32 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U32/#parameters_26",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_41",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mod",
            "text": "fun box mod(\n  y: U32 val)\n: U32 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U32/#parameters_27",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_42",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#neg",
            "text": "fun box neg()\n: U32 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U32/#returns_43",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#eq",
            "text": "fun box eq(\n  y: U32 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U32/#parameters_28",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ne",
            "text": "fun box ne(\n  y: U32 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U32/#parameters_29",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#lt",
            "text": "fun box lt(\n  y: U32 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U32/#parameters_30",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#le",
            "text": "fun box le(\n  y: U32 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U32/#parameters_31",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ge",
            "text": "fun box ge(\n  y: U32 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U32/#parameters_32",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#gt",
            "text": "fun box gt(\n  y: U32 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U32/#parameters_33",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U32/#returns_50",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U32/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U32/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U32/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U32/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U32/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U32/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U32/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U32/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U32/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U32/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u32_1",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U32/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U32/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U32/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U32/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U32/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U32/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U32/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#compare",
            "text": "fun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U32/#parameters_34",
            "text": "that:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/",
            "text": "U64\n\u00b6\n\n\n[Source]\n\n\nprimitive val U64 is\n  _UnsignedInteger[U64 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U64 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U64 val)\n: U64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nU64\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: U64 val)\n: (U64 val , U64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nU64\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U64"
        },
        {
            "location": "/builtin-U64/#u64",
            "text": "[Source]  primitive val U64 is\n  _UnsignedInteger[U64 val] val",
            "title": "U64"
        },
        {
            "location": "/builtin-U64/#implements",
            "text": "_UnsignedInteger[U64 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U64/#create",
            "text": "[Source]  new val create(\n  value: U64 val)\n: U64 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U64/#parameters",
            "text": "value:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns",
            "text": "U64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U64 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-U64/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_1",
            "text": "U64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#min_value",
            "text": "[Source]  new val min_value()\n: U64 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U64/#returns_2",
            "text": "U64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#max_value",
            "text": "[Source]  new val max_value()\n: U64 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U64/#returns_3",
            "text": "U64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U64/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U64 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U64/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#abs",
            "text": "[Source]  fun box abs()\n: U64 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U64/#returns_5",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U64 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U64/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#bswap",
            "text": "[Source]  fun box bswap()\n: U64 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U64/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#popcount",
            "text": "[Source]  fun box popcount()\n: U64 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U64/#returns_8",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#clz",
            "text": "[Source]  fun box clz()\n: U64 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U64/#returns_9",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ctz",
            "text": "[Source]  fun box ctz()\n: U64 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U64/#returns_10",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U64 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_11",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U64 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_12",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U64 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U64/#returns_13",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#min",
            "text": "[Source]  fun box min(\n  y: U64 val)\n: U64 val",
            "title": "min"
        },
        {
            "location": "/builtin-U64/#parameters_2",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_14",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#max",
            "text": "[Source]  fun box max(\n  y: U64 val)\n: U64 val",
            "title": "max"
        },
        {
            "location": "/builtin-U64/#parameters_3",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_15",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U64/#returns_16",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#addc",
            "text": "[Source]  fun box addc(\n  y: U64 val)\n: (U64 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U64/#parameters_4",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_17",
            "text": "( U64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#subc",
            "text": "[Source]  fun box subc(\n  y: U64 val)\n: (U64 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U64/#parameters_5",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_18",
            "text": "( U64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U64/#parameters_6",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_19",
            "text": "( U64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#shl",
            "text": "fun box shl(\n  y: U64 val)\n: U64 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U64/#parameters_7",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_20",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#shr",
            "text": "fun box shr(\n  y: U64 val)\n: U64 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U64/#parameters_8",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_21",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_9",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_22",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_10",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_23",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#rotl",
            "text": "fun box rotl(\n  y: U64 val)\n: U64 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U64/#parameters_11",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_24",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#rotr",
            "text": "fun box rotr(\n  y: U64 val)\n: U64 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U64/#parameters_12",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_25",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U64/#returns_26",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_13",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_27",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_14",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_28",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_15",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_29",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_16",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_30",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_17",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_31",
            "text": "( U64  val ,  U64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_18",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_32",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U64 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_33",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#op_and",
            "text": "fun box op_and(\n  y: U64 val)\n: U64 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U64/#parameters_19",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_34",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#op_or",
            "text": "fun box op_or(\n  y: U64 val)\n: U64 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U64/#parameters_20",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_35",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#op_xor",
            "text": "fun box op_xor(\n  y: U64 val)\n: U64 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U64/#parameters_21",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_36",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#op_not",
            "text": "fun box op_not()\n: U64 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U64/#returns_37",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#add",
            "text": "fun box add(\n  y: U64 val)\n: U64 val",
            "title": "add"
        },
        {
            "location": "/builtin-U64/#parameters_22",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_38",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#sub",
            "text": "fun box sub(\n  y: U64 val)\n: U64 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U64/#parameters_23",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_39",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mul",
            "text": "fun box mul(\n  y: U64 val)\n: U64 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U64/#parameters_24",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_40",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#div",
            "text": "fun box div(\n  y: U64 val)\n: U64 val",
            "title": "div"
        },
        {
            "location": "/builtin-U64/#parameters_25",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_41",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#divmod",
            "text": "fun box divmod(\n  y: U64 val)\n: (U64 val , U64 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U64/#parameters_26",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_42",
            "text": "( U64  val ,  U64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mod",
            "text": "fun box mod(\n  y: U64 val)\n: U64 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U64/#parameters_27",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_43",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#neg",
            "text": "fun box neg()\n: U64 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U64/#returns_44",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#eq",
            "text": "fun box eq(\n  y: U64 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U64/#parameters_28",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ne",
            "text": "fun box ne(\n  y: U64 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U64/#parameters_29",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#lt",
            "text": "fun box lt(\n  y: U64 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U64/#parameters_30",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#le",
            "text": "fun box le(\n  y: U64 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U64/#parameters_31",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ge",
            "text": "fun box ge(\n  y: U64 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U64/#parameters_32",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#gt",
            "text": "fun box gt(\n  y: U64 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U64/#parameters_33",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_50",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U64/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U64/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U64/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U64/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U64/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U64/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U64/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U64/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U64/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U64/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U64/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u64_1",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U64/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U64/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U64/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U64/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U64/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U64/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#compare",
            "text": "fun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U64/#parameters_34",
            "text": "that:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/",
            "text": "ULong\n\u00b6\n\n\n[Source]\n\n\nprimitive val ULong is\n  _UnsignedInteger[ULong val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[ULong val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: ULong val)\n: ULong val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ULong val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: ULong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: ULong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nULong\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: ULong val)\n: (ULong val , ULong val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nULong\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive ULong"
        },
        {
            "location": "/builtin-ULong/#ulong",
            "text": "[Source]  primitive val ULong is\n  _UnsignedInteger[ULong val] val",
            "title": "ULong"
        },
        {
            "location": "/builtin-ULong/#implements",
            "text": "_UnsignedInteger[ULong val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-ULong/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ULong/#create",
            "text": "[Source]  new val create(\n  value: ULong val)\n: ULong val^",
            "title": "create"
        },
        {
            "location": "/builtin-ULong/#parameters",
            "text": "value:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns",
            "text": "ULong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ULong val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-ULong/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_1",
            "text": "ULong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#min_value",
            "text": "[Source]  new val min_value()\n: ULong val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-ULong/#returns_2",
            "text": "ULong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#max_value",
            "text": "[Source]  new val max_value()\n: ULong val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-ULong/#returns_3",
            "text": "ULong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ULong/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: ULong val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-ULong/#returns_4",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#abs",
            "text": "[Source]  fun box abs()\n: ULong val",
            "title": "abs"
        },
        {
            "location": "/builtin-ULong/#returns_5",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: ULong val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-ULong/#returns_6",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#bswap",
            "text": "[Source]  fun box bswap()\n: ULong val",
            "title": "bswap"
        },
        {
            "location": "/builtin-ULong/#returns_7",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#popcount",
            "text": "[Source]  fun box popcount()\n: ULong val",
            "title": "popcount"
        },
        {
            "location": "/builtin-ULong/#returns_8",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#clz",
            "text": "[Source]  fun box clz()\n: ULong val",
            "title": "clz"
        },
        {
            "location": "/builtin-ULong/#returns_9",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ctz",
            "text": "[Source]  fun box ctz()\n: ULong val",
            "title": "ctz"
        },
        {
            "location": "/builtin-ULong/#returns_10",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: ULong val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_11",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: ULong val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_12",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: ULong val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-ULong/#returns_13",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#min",
            "text": "[Source]  fun box min(\n  y: ULong val)\n: ULong val",
            "title": "min"
        },
        {
            "location": "/builtin-ULong/#parameters_2",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_14",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#max",
            "text": "[Source]  fun box max(\n  y: ULong val)\n: ULong val",
            "title": "max"
        },
        {
            "location": "/builtin-ULong/#parameters_3",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_15",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-ULong/#returns_16",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#addc",
            "text": "[Source]  fun box addc(\n  y: ULong val)\n: (ULong val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-ULong/#parameters_4",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_17",
            "text": "( ULong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#subc",
            "text": "[Source]  fun box subc(\n  y: ULong val)\n: (ULong val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-ULong/#parameters_5",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_18",
            "text": "( ULong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mulc",
            "text": "[Source]  fun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-ULong/#parameters_6",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_19",
            "text": "( ULong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#shl",
            "text": "fun box shl(\n  y: ULong val)\n: ULong val",
            "title": "shl"
        },
        {
            "location": "/builtin-ULong/#parameters_7",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_20",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#shr",
            "text": "fun box shr(\n  y: ULong val)\n: ULong val",
            "title": "shr"
        },
        {
            "location": "/builtin-ULong/#parameters_8",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_21",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_9",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_22",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_10",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_23",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#rotl",
            "text": "fun box rotl(\n  y: ULong val)\n: ULong val",
            "title": "rotl"
        },
        {
            "location": "/builtin-ULong/#parameters_11",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_24",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#rotr",
            "text": "fun box rotr(\n  y: ULong val)\n: ULong val",
            "title": "rotr"
        },
        {
            "location": "/builtin-ULong/#parameters_12",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_25",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-ULong/#returns_26",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_13",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_27",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_14",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_28",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_15",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_29",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_16",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_30",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_17",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_31",
            "text": "( ULong  val ,  ULong  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_18",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_32",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: ULong val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_33",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#op_and",
            "text": "fun box op_and(\n  y: ULong val)\n: ULong val",
            "title": "op_and"
        },
        {
            "location": "/builtin-ULong/#parameters_19",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_34",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#op_or",
            "text": "fun box op_or(\n  y: ULong val)\n: ULong val",
            "title": "op_or"
        },
        {
            "location": "/builtin-ULong/#parameters_20",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_35",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#op_xor",
            "text": "fun box op_xor(\n  y: ULong val)\n: ULong val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-ULong/#parameters_21",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_36",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#op_not",
            "text": "fun box op_not()\n: ULong val",
            "title": "op_not"
        },
        {
            "location": "/builtin-ULong/#returns_37",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#add",
            "text": "fun box add(\n  y: ULong val)\n: ULong val",
            "title": "add"
        },
        {
            "location": "/builtin-ULong/#parameters_22",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_38",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#sub",
            "text": "fun box sub(\n  y: ULong val)\n: ULong val",
            "title": "sub"
        },
        {
            "location": "/builtin-ULong/#parameters_23",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_39",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mul",
            "text": "fun box mul(\n  y: ULong val)\n: ULong val",
            "title": "mul"
        },
        {
            "location": "/builtin-ULong/#parameters_24",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_40",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#div",
            "text": "fun box div(\n  y: ULong val)\n: ULong val",
            "title": "div"
        },
        {
            "location": "/builtin-ULong/#parameters_25",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_41",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#divmod",
            "text": "fun box divmod(\n  y: ULong val)\n: (ULong val , ULong val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-ULong/#parameters_26",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_42",
            "text": "( ULong  val ,  ULong  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mod",
            "text": "fun box mod(\n  y: ULong val)\n: ULong val",
            "title": "mod"
        },
        {
            "location": "/builtin-ULong/#parameters_27",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_43",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#neg",
            "text": "fun box neg()\n: ULong val",
            "title": "neg"
        },
        {
            "location": "/builtin-ULong/#returns_44",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#eq",
            "text": "fun box eq(\n  y: ULong val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-ULong/#parameters_28",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ne",
            "text": "fun box ne(\n  y: ULong val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-ULong/#parameters_29",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#lt",
            "text": "fun box lt(\n  y: ULong val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-ULong/#parameters_30",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#le",
            "text": "fun box le(\n  y: ULong val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-ULong/#parameters_31",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ge",
            "text": "fun box ge(\n  y: ULong val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-ULong/#parameters_32",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#gt",
            "text": "fun box gt(\n  y: ULong val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-ULong/#parameters_33",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_50",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-ULong/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-ULong/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-ULong/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-ULong/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-ULong/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-ULong/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-ULong/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-ULong/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-ULong/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-ULong/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-ULong/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-ULong/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-ULong/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ulong_1",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-ULong/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-ULong/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-ULong/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-ULong/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#compare",
            "text": "fun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-ULong/#parameters_34",
            "text": "that:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/",
            "text": "USize\n\u00b6\n\n\n[Source]\n\n\nprimitive val USize is\n  _UnsignedInteger[USize val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[USize val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: USize val)\n: USize val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: USize val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: USize val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: USize val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: USize val)\n: (USize val , USize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nUSize\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: USize val)\n: (USize val , USize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nUSize\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive USize"
        },
        {
            "location": "/builtin-USize/#usize",
            "text": "[Source]  primitive val USize is\n  _UnsignedInteger[USize val] val",
            "title": "USize"
        },
        {
            "location": "/builtin-USize/#implements",
            "text": "_UnsignedInteger[USize val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-USize/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-USize/#create",
            "text": "[Source]  new val create(\n  value: USize val)\n: USize val^",
            "title": "create"
        },
        {
            "location": "/builtin-USize/#parameters",
            "text": "value:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns",
            "text": "USize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: USize val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-USize/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_1",
            "text": "USize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#min_value",
            "text": "[Source]  new val min_value()\n: USize val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-USize/#returns_2",
            "text": "USize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#max_value",
            "text": "[Source]  new val max_value()\n: USize val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-USize/#returns_3",
            "text": "USize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-USize/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: USize val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-USize/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#abs",
            "text": "[Source]  fun box abs()\n: USize val",
            "title": "abs"
        },
        {
            "location": "/builtin-USize/#returns_5",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: USize val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-USize/#returns_6",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#bswap",
            "text": "[Source]  fun box bswap()\n: USize val",
            "title": "bswap"
        },
        {
            "location": "/builtin-USize/#returns_7",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#popcount",
            "text": "[Source]  fun box popcount()\n: USize val",
            "title": "popcount"
        },
        {
            "location": "/builtin-USize/#returns_8",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#clz",
            "text": "[Source]  fun box clz()\n: USize val",
            "title": "clz"
        },
        {
            "location": "/builtin-USize/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ctz",
            "text": "[Source]  fun box ctz()\n: USize val",
            "title": "ctz"
        },
        {
            "location": "/builtin-USize/#returns_10",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: USize val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_11",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: USize val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_12",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: USize val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-USize/#returns_13",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#min",
            "text": "[Source]  fun box min(\n  y: USize val)\n: USize val",
            "title": "min"
        },
        {
            "location": "/builtin-USize/#parameters_2",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_14",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#max",
            "text": "[Source]  fun box max(\n  y: USize val)\n: USize val",
            "title": "max"
        },
        {
            "location": "/builtin-USize/#parameters_3",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#addc",
            "text": "[Source]  fun box addc(\n  y: USize val)\n: (USize val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-USize/#parameters_4",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_16",
            "text": "( USize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#subc",
            "text": "[Source]  fun box subc(\n  y: USize val)\n: (USize val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-USize/#parameters_5",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_17",
            "text": "( USize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mulc",
            "text": "[Source]  fun box mulc(\n  y: USize val)\n: (USize val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-USize/#parameters_6",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_18",
            "text": "( USize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#shl",
            "text": "fun box shl(\n  y: USize val)\n: USize val",
            "title": "shl"
        },
        {
            "location": "/builtin-USize/#parameters_7",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_19",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#shr",
            "text": "fun box shr(\n  y: USize val)\n: USize val",
            "title": "shr"
        },
        {
            "location": "/builtin-USize/#parameters_8",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_20",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: USize val)\n: USize val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_9",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_21",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: USize val)\n: USize val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_10",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_22",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#rotl",
            "text": "fun box rotl(\n  y: USize val)\n: USize val",
            "title": "rotl"
        },
        {
            "location": "/builtin-USize/#parameters_11",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_23",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#rotr",
            "text": "fun box rotr(\n  y: USize val)\n: USize val",
            "title": "rotr"
        },
        {
            "location": "/builtin-USize/#parameters_12",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_24",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-USize/#returns_25",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: USize val)\n: USize val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_13",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_26",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: USize val)\n: USize val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_14",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_27",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: USize val)\n: USize val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_15",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_28",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: USize val)\n: USize val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_16",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_29",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: USize val)\n: (USize val , USize val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_17",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_30",
            "text": "( USize  val ,  USize  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: USize val)\n: USize val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_18",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_31",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: USize val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_32",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#op_and",
            "text": "fun box op_and(\n  y: USize val)\n: USize val",
            "title": "op_and"
        },
        {
            "location": "/builtin-USize/#parameters_19",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_33",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#op_or",
            "text": "fun box op_or(\n  y: USize val)\n: USize val",
            "title": "op_or"
        },
        {
            "location": "/builtin-USize/#parameters_20",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_34",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#op_xor",
            "text": "fun box op_xor(\n  y: USize val)\n: USize val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-USize/#parameters_21",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_35",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#op_not",
            "text": "fun box op_not()\n: USize val",
            "title": "op_not"
        },
        {
            "location": "/builtin-USize/#returns_36",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#add",
            "text": "fun box add(\n  y: USize val)\n: USize val",
            "title": "add"
        },
        {
            "location": "/builtin-USize/#parameters_22",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_37",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#sub",
            "text": "fun box sub(\n  y: USize val)\n: USize val",
            "title": "sub"
        },
        {
            "location": "/builtin-USize/#parameters_23",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_38",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mul",
            "text": "fun box mul(\n  y: USize val)\n: USize val",
            "title": "mul"
        },
        {
            "location": "/builtin-USize/#parameters_24",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_39",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#div",
            "text": "fun box div(\n  y: USize val)\n: USize val",
            "title": "div"
        },
        {
            "location": "/builtin-USize/#parameters_25",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_40",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#divmod",
            "text": "fun box divmod(\n  y: USize val)\n: (USize val , USize val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-USize/#parameters_26",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_41",
            "text": "( USize  val ,  USize  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mod",
            "text": "fun box mod(\n  y: USize val)\n: USize val",
            "title": "mod"
        },
        {
            "location": "/builtin-USize/#parameters_27",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_42",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#neg",
            "text": "fun box neg()\n: USize val",
            "title": "neg"
        },
        {
            "location": "/builtin-USize/#returns_43",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#eq",
            "text": "fun box eq(\n  y: USize val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-USize/#parameters_28",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ne",
            "text": "fun box ne(\n  y: USize val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-USize/#parameters_29",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#lt",
            "text": "fun box lt(\n  y: USize val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-USize/#parameters_30",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#le",
            "text": "fun box le(\n  y: USize val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-USize/#parameters_31",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ge",
            "text": "fun box ge(\n  y: USize val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-USize/#parameters_32",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#gt",
            "text": "fun box gt(\n  y: USize val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-USize/#parameters_33",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-USize/#returns_50",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-USize/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-USize/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-USize/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-USize/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-USize/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-USize/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-USize/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-USize/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-USize/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-USize/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-USize/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-USize/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-USize/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-USize/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#usize_1",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-USize/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-USize/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-USize/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#compare",
            "text": "fun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-USize/#parameters_34",
            "text": "that:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/",
            "text": "U128\n\u00b6\n\n\n[Source]\n\n\nprimitive val U128 is\n  _UnsignedInteger[U128 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U128 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U128 val)\n: U128 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U128 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U128 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U128 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: U128 val)\n: (U128 val , U128 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nU128\n val)\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nU128\n val)\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U128 val)\n: (U128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U128 val)\n: (U128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U128 val)\n: (U128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U128"
        },
        {
            "location": "/builtin-U128/#u128",
            "text": "[Source]  primitive val U128 is\n  _UnsignedInteger[U128 val] val",
            "title": "U128"
        },
        {
            "location": "/builtin-U128/#implements",
            "text": "_UnsignedInteger[U128 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U128/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U128/#create",
            "text": "[Source]  new val create(\n  value: U128 val)\n: U128 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U128/#parameters",
            "text": "value:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns",
            "text": "U128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U128 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-U128/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_1",
            "text": "U128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#min_value",
            "text": "[Source]  new val min_value()\n: U128 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U128/#returns_2",
            "text": "U128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#max_value",
            "text": "[Source]  new val max_value()\n: U128 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U128/#returns_3",
            "text": "U128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U128/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U128 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U128/#returns_4",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#abs",
            "text": "[Source]  fun box abs()\n: U128 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U128/#returns_5",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U128 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U128/#returns_6",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#bswap",
            "text": "[Source]  fun box bswap()\n: U128 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U128/#returns_7",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#popcount",
            "text": "[Source]  fun box popcount()\n: U128 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U128/#returns_8",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#clz",
            "text": "[Source]  fun box clz()\n: U128 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U128/#returns_9",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ctz",
            "text": "[Source]  fun box ctz()\n: U128 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U128/#returns_10",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U128 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_11",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U128 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_12",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U128 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U128/#returns_13",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#min",
            "text": "[Source]  fun box min(\n  y: U128 val)\n: U128 val",
            "title": "min"
        },
        {
            "location": "/builtin-U128/#parameters_2",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_14",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#max",
            "text": "[Source]  fun box max(\n  y: U128 val)\n: U128 val",
            "title": "max"
        },
        {
            "location": "/builtin-U128/#parameters_3",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_15",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U128/#returns_16",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U128/#returns_17",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U128/#returns_18",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mul",
            "text": "[Source]  fun box mul(\n  y: U128 val)\n: U128 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U128/#parameters_4",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_19",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#divmod",
            "text": "[Source]  fun box divmod(\n  y: U128 val)\n: (U128 val , U128 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U128/#parameters_5",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_20",
            "text": "( U128  val ,  U128  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#div",
            "text": "[Source]  fun box div(\n  y: U128 val)\n: U128 val",
            "title": "div"
        },
        {
            "location": "/builtin-U128/#parameters_6",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_21",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mod",
            "text": "[Source]  fun box mod(\n  y: U128 val)\n: U128 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U128/#parameters_7",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_22",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mul_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_8",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_23",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#divmod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_9",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_24",
            "text": "( U128  val ,  U128  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#div_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_10",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_25",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_11",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_26",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U128/#returns_27",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U128/#returns_28",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#f32_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_29",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#f64_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_30",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#addc",
            "text": "[Source]  fun box addc(\n  y: U128 val)\n: (U128 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U128/#parameters_12",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_31",
            "text": "( U128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#subc",
            "text": "[Source]  fun box subc(\n  y: U128 val)\n: (U128 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U128/#parameters_13",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_32",
            "text": "( U128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U128 val)\n: (U128 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U128/#parameters_14",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_33",
            "text": "( U128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#shl",
            "text": "fun box shl(\n  y: U128 val)\n: U128 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U128/#parameters_15",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_34",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#shr",
            "text": "fun box shr(\n  y: U128 val)\n: U128 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U128/#parameters_16",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_35",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_17",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_36",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_18",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_37",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#rotl",
            "text": "fun box rotl(\n  y: U128 val)\n: U128 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U128/#parameters_19",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_38",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#rotr",
            "text": "fun box rotr(\n  y: U128 val)\n: U128 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U128/#parameters_20",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_39",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_21",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_40",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_22",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_41",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U128 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_42",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#op_and",
            "text": "fun box op_and(\n  y: U128 val)\n: U128 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U128/#parameters_23",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_43",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#op_or",
            "text": "fun box op_or(\n  y: U128 val)\n: U128 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U128/#parameters_24",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_44",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#op_xor",
            "text": "fun box op_xor(\n  y: U128 val)\n: U128 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U128/#parameters_25",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_45",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#op_not",
            "text": "fun box op_not()\n: U128 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U128/#returns_46",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#add",
            "text": "fun box add(\n  y: U128 val)\n: U128 val",
            "title": "add"
        },
        {
            "location": "/builtin-U128/#parameters_26",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_47",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#sub",
            "text": "fun box sub(\n  y: U128 val)\n: U128 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U128/#parameters_27",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_48",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#neg",
            "text": "fun box neg()\n: U128 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U128/#returns_49",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#eq",
            "text": "fun box eq(\n  y: U128 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U128/#parameters_28",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_50",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ne",
            "text": "fun box ne(\n  y: U128 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U128/#parameters_29",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_51",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#lt",
            "text": "fun box lt(\n  y: U128 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U128/#parameters_30",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_52",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#le",
            "text": "fun box le(\n  y: U128 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U128/#parameters_31",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_53",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ge",
            "text": "fun box ge(\n  y: U128 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U128/#parameters_32",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_54",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#gt",
            "text": "fun box gt(\n  y: U128 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U128/#parameters_33",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_55",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U128/#returns_56",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U128/#returns_57",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U128/#returns_58",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U128/#returns_59",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U128/#returns_60",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U128/#returns_61",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U128/#returns_62",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U128/#returns_63",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U128/#returns_64",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U128/#returns_65",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U128/#returns_66",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u128_1",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U128/#returns_67",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U128/#returns_68",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U128/#returns_69",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_70",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_71",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_72",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_73",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_74",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_75",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_76",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_77",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_78",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_79",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_80",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_81",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_82",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_83",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#compare",
            "text": "fun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U128/#parameters_34",
            "text": "that:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Unsigned/",
            "text": "Unsigned\n\u00b6\n\n\n[Source]\n\n\ntype Unsigned is\n  (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val)",
            "title": "type Unsigned"
        },
        {
            "location": "/builtin-Unsigned/#unsigned",
            "text": "[Source]  type Unsigned is\n  (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)",
            "title": "Unsigned"
        },
        {
            "location": "/builtin-Unsigned/#type-alias-for",
            "text": "( U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-Stringable/",
            "text": "Stringable\n\u00b6\n\n\n[Source]\n\n\nThings that can be turned into a String.\n\n\ninterface box Stringable\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nGenerate a string representation of this object.\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^",
            "title": "interface Stringable"
        },
        {
            "location": "/builtin-Stringable/#stringable",
            "text": "[Source]  Things that can be turned into a String.  interface box Stringable",
            "title": "Stringable"
        },
        {
            "location": "/builtin-Stringable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Stringable/#string",
            "text": "[Source]  Generate a string representation of this object.  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Stringable/#returns",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/",
            "text": "String\n\u00b6\n\n\n[Source]\n\n\nA String is an ordered collection of characters.\n\n\nStrings don't specify an encoding.\n\n\nExample usage of some common String methods:\n\n\nactor Main\n  new create(env: Env) =>\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\")\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\")\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end\n\n\n\n\nclass val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nSeq\n[\nU8\n val] ref\n\n\nComparable\n[\nString\n box] ref\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nAn empty string. Enough space for len bytes is reserved.\n\n\nnew ref create(\n  len: USize val = seq)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_array\n\u00b6\n\n\n[Source]\n\n\nCreate a string from an array, reusing the underlying data pointer.\n\n\nnew val from_array(\n  data: Array[U8 val] val)\n: String val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nArray\n[\nU8\n val] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val^\n\n\n\n\n\n\nfrom_iso_array\n\u00b6\n\n\n[Source]\n\n\nCreate a string from an array, reusing the underlying data pointer\n\n\nnew iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfrom_cpointer\n\u00b6\n\n\n[Source]\n\n\nReturn a string from binary pointer data without making a\ncopy. This must be done only with C-FFI functions that return\npony_alloc'd character arrays. If a null pointer is given then an\nempty string is returned.\n\n\nnew ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nPointer\n[\nU8\n val] ref\n\n\nlen: \nUSize\n val\n\n\nalloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_cstring\n\u00b6\n\n\n[Source]\n\n\nReturn a string from a pointer to a null-terminated cstring\nwithout making a copy. The data is not copied. This must be done\nonly with C-FFI functions that return pony_alloc'd character\narrays. The pointer is scanned for the first null byte, which will\nbe interpreted as the null terminator. Note that the scan is\nunbounded; the pointed to data must be null-terminated within\nthe allocated array to preserve memory safety. If a null pointer\nis given then an empty string is returned.\n\n\nnew ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nPointer\n[\nU8\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\ncopy_cpointer\n\u00b6\n\n\n[Source]\n\n\nCreate a string by copying a fixed number of bytes from a pointer.\n\n\nnew ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nPointer\n[\nU8\n val] box\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\ncopy_cstring\n\u00b6\n\n\n[Source]\n\n\nCreate a string by copying a null-terminated C string. Note that\nthe scan is unbounded; the pointed to data must be null-terminated\nwithin the allocated array to preserve memory safety. If a null\npointer is given then an empty string is returned.\n\n\nnew ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nPointer\n[\nU8\n val] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_utf32\n\u00b6\n\n\n[Source]\n\n\nCreate a UTF-8 string from a single UTF-32 code point.\n\n\nnew ref from_utf32(\n  value: U32 val)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\npush_utf32\n\u00b6\n\n\n[Source]\n\n\nPush a UTF-32 code point.\n\n\nfun ref push_utf32(\n  value: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncpointer\n\u00b6\n\n\n[Source]\n\n\nReturns a C compatible pointer to the underlying string allocation.\n\n\nfun box cpointer(\n  offset: USize val = seq)\n: Pointer[U8 val] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[\nU8\n val] tag\n\n\n\n\n\n\ncstring\n\u00b6\n\n\n[Source]\n\n\nReturns a C compatible pointer to a null-terminated version of the\nstring, safe to pass to an FFI function that doesn't accept a size\nargument, expecting a null-terminator. If the underlying string\nis already null terminated, this is returned; otherwise the string\nis copied into a new, null-terminated allocation.\n\n\nfun box cstring()\n: Pointer[U8 val] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[\nU8\n val] tag\n\n\n\n\n\n\narray\n\u00b6\n\n\n[Source]\n\n\nReturns an Array[U8] that that reuses the underlying data pointer.\n\n\nfun val array()\n: Array[U8 val] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the length of the string data in bytes.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncodepoints\n\u00b6\n\n\n[Source]\n\n\nReturns the number of unicode code points in the string between the two\noffsets. Index range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box codepoints(\n  from: ISize val = seq,\n  to: ISize val = seq)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nISize\n val = seq\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nReturns the space available for data, not including the null terminator.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreserve\n\u00b6\n\n\n[Source]\n\n\nReserve space for len bytes. An additional byte will be reserved for the\nnull terminator.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncompact\n\u00b6\n\n\n[Source]\n\n\nTry to remove unused space, making it available for garbage collection. The\nrequest may be ignored. The string is returned to allow call chaining.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrecalc\n\u00b6\n\n\n[Source]\n\n\nRecalculates the string length. This is only needed if the string is\nchanged via an FFI call. If a null terminator byte is not found within the\nallocated length, the size will not be changed.\n\n\nfun ref recalc()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\u00b6\n\n\n[Source]\n\n\nTruncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.\n\n\nNote that memory is not freed by this operation.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim_in_place\n\u00b6\n\n\n[Source]\n\n\nTrim the string to a portion of itself, covering \nfrom\n until \nto\n.\nUnlike slice, the operation does not allocate a new string nor copy\nelements.\n\n\nfun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim\n\u00b6\n\n\n[Source]\n\n\nReturn a shared portion of this string, covering \nfrom\n until \nto\n.\nBoth the original and the new string are immutable, as they share memory.\nThe operation does not allocate a new string pointer nor copy elements.\n\n\nfun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nchop\n\u00b6\n\n\n[Source]\n\n\nChops the string in half at the split point requested and returns both\nthe left and right portions. The original string is trimmed in place and\nreturned as the right portion. If the split point is larger than the\nstring, the left portion is the original string and the right portion\nis a new empty string.\nBoth strings are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new string pointer nor copy elements.\n\n\nfun iso chop(\n  split_point: USize val)\n: (String iso^ , String iso^)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsplit_point: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nString\n iso^ , \nString\n iso^)\n\n\n\n\n\n\nis_null_terminated\n\u00b6\n\n\n[Source]\n\n\nReturn true if the string is null-terminated and safe to pass to an FFI\nfunction that doesn't accept a size argument, expecting a null-terminator.\nThis method checks that there is a null byte just after the final position\nof populated bytes in the string, but does not check for other null bytes\nwhich may be present earlier in the content of the string.\nIf you need a null-terminated copy of this string, use the clone method.\n\n\nfun box is_null_terminated()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nutf32\n\u00b6\n\n\n[Source]\n\n\nReturn a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.\n\n\nfun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU8\n val) ?\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nChange the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nat_offset\n\u00b6\n\n\n[Source]\n\n\nReturns the byte at the given offset. Raise an error if the offset is out\nof bounds.\n\n\nfun box at_offset(\n  offset: ISize val)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nupdate_offset\n\u00b6\n\n\n[Source]\n\n\nChanges a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.\n\n\nfun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nclone\n\u00b6\n\n\n[Source]\n\n\nReturns a copy of the string. The resulting string is\nnull-terminated even if the original is not.\n\n\nfun box clone()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfind\n\u00b6\n\n\n[Source]\n\n\nReturn the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurrence of s or s is empty.\n\n\nfun box find(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\nrfind\n\u00b6\n\n\n[Source]\n\n\nReturn the index of n-th instance of \ns\n in the string starting from the\nend. The \noffset\n represents the highest index to included in the search.\nRaise an error if there is no n-th occurrence of \ns\n or \ns\n is empty.\n\n\nfun box rfind(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nReturns true if contains s as a substring, false otherwise.\n\n\nfun box contains(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncount\n\u00b6\n\n\n[Source]\n\n\nCounts the non-overlapping occurrences of s in the string.\n\n\nfun box count(\n  s: String box,\n  offset: ISize val = seq)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nat\n\u00b6\n\n\n[Source]\n\n\nReturns true if the substring s is present at the given offset.\n\n\nfun box at(\n  s: String box,\n  offset: ISize val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndelete\n\u00b6\n\n\n[Source]\n\n\nDelete len bytes at the supplied offset, compacting the string in place.\n\n\nfun ref delete(\n  offset: ISize val,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsubstring\n\u00b6\n\n\n[Source]\n\n\nReturns a substring. Index range [\nfrom\n .. \nto\n) is half-open.\nReturns an empty string if nothing is in the range.\n\n\nNote that this operation allocates a new string to be returned. For\nsimilar operations that don't allocate a new string, see \ntrim\n and\n\ntrim_in_place\n.\n\n\nfun box substring(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nlower\n\u00b6\n\n\n[Source]\n\n\nReturns a lower case version of the string.\n\n\nfun box lower()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nlower_in_place\n\u00b6\n\n\n[Source]\n\n\nTransforms the string to lower case. Currently only knows ASCII case.\n\n\nfun ref lower_in_place()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nupper\n\u00b6\n\n\n[Source]\n\n\nReturns an upper case version of the string. Currently only knows ASCII\ncase.\n\n\nfun box upper()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nupper_in_place\n\u00b6\n\n\n[Source]\n\n\nTransforms the string to upper case.\n\n\nfun ref upper_in_place()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nReturns a reversed version of the string.\n\n\nfun box reverse()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nreverse_in_place\n\u00b6\n\n\n[Source]\n\n\nReverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.\n\n\nfun ref reverse_in_place()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdd a byte to the end of the string.\n\n\nfun ref push(\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemove a byte from the end of the string.\n\n\nfun ref pop()\n: U8 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nunshift\n\u00b6\n\n\n[Source]\n\n\nAdds a byte to the beginning of the string.\n\n\nfun ref unshift(\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\u00b6\n\n\n[Source]\n\n\nRemoves a byte from the beginning of the string.\n\n\nfun ref shift()\n: U8 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: \nReadSeq\n[\nU8\n val] box\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd len iterated bytes to the end of the string, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[\nU8\n val] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nTruncate the string to zero length.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert\n\u00b6\n\n\n[Source]\n\n\nReturns a version of the string with the given string inserted at the given\noffset.\n\n\nfun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nthat: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ninsert_in_place\n\u00b6\n\n\n[Source]\n\n\nInserts the given string at the given offset. Appends the string if the\noffset is out of bounds.\n\n\nfun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert_byte\n\u00b6\n\n\n[Source]\n\n\nInserts a byte at the given offset. Appends if the offset is out of bounds.\n\n\nfun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncut\n\u00b6\n\n\n[Source]\n\n\nReturns a version of the string with the given range deleted.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box cut(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncut_in_place\n\u00b6\n\n\n[Source]\n\n\nCuts the given range out of the string.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove all instances of s from the string. Returns the count of removed\ninstances.\n\n\nfun ref remove(\n  s: String box)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreplace\n\u00b6\n\n\n[Source]\n\n\nReplace up to n occurrences of \nfrom\n in \nthis\n with \nto\n. If n is 0, all\noccurrences will be replaced. Returns the count of replaced occurrences.\n\n\nfun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = seq)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nString\n box\n\n\nto: \nString\n box\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsplit_by\n\u00b6\n\n\n[Source]\n\n\nSplit the string into an array of strings that are delimited by \ndelim\n in\nthe original string. If \nn > 0\n, then the split count is limited to n.\n\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, \n\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]\n.\n\n\nAn empty delimiter results in an array that contains a single element equal\nto the whole string.\n\n\nfun box split_by(\n  delim: String val,\n  n: USize val = seq)\n: Array[String val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndelim: \nString\n val\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nsplit\n\u00b6\n\n\n[Source]\n\n\nSplit the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If \nn > 0\n, then the split count is\nlimited to n.\n\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, \n\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]\n.\n\n\nfun box split(\n  delim: String val = seq,\n  n: USize val = seq)\n: Array[String val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndelim: \nString\n val = seq\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nstrip\n\u00b6\n\n\n[Source]\n\n\nRemove all leading and trailing characters from the string that are in s.\n\n\nfun ref strip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrstrip\n\u00b6\n\n\n[Source]\n\n\nRemove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.\n\n\nfun ref rstrip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlstrip\n\u00b6\n\n\n[Source]\n\n\nRemove all leading characters within the string that are in s. By default,\nleading whitespace is removed.\n\n\nfun ref lstrip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nReturn a string that is a concatenation of this and that.\n\n\nfun box add(\n  that: String box)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\njoin\n\u00b6\n\n\n[Source]\n\n\nReturn a string that is a concatenation of the strings in data, using this\nas a separator.\n\n\nfun box join(\n  data: Iterator[Stringable box] ref)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nIterator\n[\nStringable\n box] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nLexically compare two strings.\n\n\nfun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\ncompare_sub\n\u00b6\n\n\n[Source]\n\n\nLexically compare at most \nn\n bytes of the substring of \nthis\n starting at\n\noffset\n with the substring of \nthat\n starting at \nthat_offset\n. The\ncomparison is case sensitive unless \nignore_case\n is \ntrue\n.\n\n\nIf the substring of \nthis\n is a proper prefix of the substring of \nthat\n,\nthen \nthis\n is \nLess\n than \nthat\n. Likewise, if \nthat\n is a proper prefix of\n\nthis\n, then \nthis\n is \nGreater\n than \nthat\n.\n\n\nBoth \noffset\n and \nthat_offset\n can be negative, in which case the offsets\nare computed from the end of the string.\n\n\nIf \nn + offset\n is greater than the length of \nthis\n, or \nn + that_offset\n\nis greater than the length of \nthat\n, then the number of positions compared\nwill be reduced to the length of the longest substring.\n\n\nNeeds to be made UTF-8 safe.\n\n\nfun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = seq,\n  that_offset: ISize val = seq,\n  ignore_case: Bool val = seq)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\nn: \nUSize\n val\n\n\noffset: \nISize\n val = seq\n\n\nthat_offset: \nISize\n val = seq\n\n\nignore_case: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturns true if the two strings have the same contents.\n\n\nfun box eq(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturns true if this is lexically less than that. Needs to be made UTF-8\nsafe.\n\n\nfun box lt(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nReturns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.\n\n\nfun box le(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\noffset_to_index\n\u00b6\n\n\n[Source]\n\n\nfun box offset_to_index(\n  i: ISize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbool\n\u00b6\n\n\n[Source]\n\n\nfun box bool()\n: Bool val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val ?\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8(\n  base: U8 val = seq)\n: I8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val ?\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16(\n  base: U8 val = seq)\n: I16 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32(\n  base: U8 val = seq)\n: I32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64(\n  base: U8 val = seq)\n: I64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128(\n  base: U8 val = seq)\n: I128 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong(\n  base: U8 val = seq)\n: ILong val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val ?\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize(\n  base: U8 val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8(\n  base: U8 val = seq)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16(\n  base: U8 val = seq)\n: U16 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32(\n  base: U8 val = seq)\n: U32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64(\n  base: U8 val = seq)\n: U64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128(\n  base: U8 val = seq)\n: U128 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong(\n  base: U8 val = seq)\n: ULong val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val ?\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize(\n  base: U8 val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nread_int[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nInteger\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nRead an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.\n\n\nfun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A] val)](\n  offset: ISize val = seq,\n  base: U8 val = seq)\n: (A , USize val) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val = seq\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nUSize\n val) ?\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32(\n  offset: ISize val = seq)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64(\n  offset: ISize val = seq)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the bytes in the string.\n\n\nfun box values()\n: StringBytes ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStringBytes\n ref^\n\n\n\n\n\n\nrunes\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the codepoints in the string.\n\n\nfun box runes()\n: StringRunes ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStringRunes\n ref^\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class String"
        },
        {
            "location": "/builtin-String/#string",
            "text": "[Source]  A String is an ordered collection of characters.  Strings don't specify an encoding.  Example usage of some common String methods:  actor Main\n  new create(env: Env) =>\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\")\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\")\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end  class val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box",
            "title": "String"
        },
        {
            "location": "/builtin-String/#implements",
            "text": "Seq [ U8  val] ref  Comparable [ String  box] ref  Stringable  box",
            "title": "Implements"
        },
        {
            "location": "/builtin-String/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-String/#create",
            "text": "[Source]  An empty string. Enough space for len bytes is reserved.  new ref create(\n  len: USize val = seq)\n: String ref^",
            "title": "create"
        },
        {
            "location": "/builtin-String/#parameters",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_array",
            "text": "[Source]  Create a string from an array, reusing the underlying data pointer.  new val from_array(\n  data: Array[U8 val] val)\n: String val^",
            "title": "from_array"
        },
        {
            "location": "/builtin-String/#parameters_1",
            "text": "data:  Array [ U8  val] val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_1",
            "text": "String  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_iso_array",
            "text": "[Source]  Create a string from an array, reusing the underlying data pointer  new iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^",
            "title": "from_iso_array"
        },
        {
            "location": "/builtin-String/#parameters_2",
            "text": "data:  Array [ U8  val] iso",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_2",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_cpointer",
            "text": "[Source]  Return a string from binary pointer data without making a\ncopy. This must be done only with C-FFI functions that return\npony_alloc'd character arrays. If a null pointer is given then an\nempty string is returned.  new ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: String ref^",
            "title": "from_cpointer"
        },
        {
            "location": "/builtin-String/#parameters_3",
            "text": "str:  Pointer [ U8  val] ref  len:  USize  val  alloc:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_3",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_cstring",
            "text": "[Source]  Return a string from a pointer to a null-terminated cstring\nwithout making a copy. The data is not copied. This must be done\nonly with C-FFI functions that return pony_alloc'd character\narrays. The pointer is scanned for the first null byte, which will\nbe interpreted as the null terminator. Note that the scan is\nunbounded; the pointed to data must be null-terminated within\nthe allocated array to preserve memory safety. If a null pointer\nis given then an empty string is returned.  new ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^",
            "title": "from_cstring"
        },
        {
            "location": "/builtin-String/#parameters_4",
            "text": "str:  Pointer [ U8  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_4",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#copy_cpointer",
            "text": "[Source]  Create a string by copying a fixed number of bytes from a pointer.  new ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^",
            "title": "copy_cpointer"
        },
        {
            "location": "/builtin-String/#parameters_5",
            "text": "str:  Pointer [ U8  val] box  len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_5",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#copy_cstring",
            "text": "[Source]  Create a string by copying a null-terminated C string. Note that\nthe scan is unbounded; the pointed to data must be null-terminated\nwithin the allocated array to preserve memory safety. If a null\npointer is given then an empty string is returned.  new ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^",
            "title": "copy_cstring"
        },
        {
            "location": "/builtin-String/#parameters_6",
            "text": "str:  Pointer [ U8  val] box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_6",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_utf32",
            "text": "[Source]  Create a UTF-8 string from a single UTF-32 code point.  new ref from_utf32(\n  value: U32 val)\n: String ref^",
            "title": "from_utf32"
        },
        {
            "location": "/builtin-String/#parameters_7",
            "text": "value:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_7",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-String/#push_utf32",
            "text": "[Source]  Push a UTF-32 code point.  fun ref push_utf32(\n  value: U32 val)\n: None val",
            "title": "push_utf32"
        },
        {
            "location": "/builtin-String/#parameters_8",
            "text": "value:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#cpointer",
            "text": "[Source]  Returns a C compatible pointer to the underlying string allocation.  fun box cpointer(\n  offset: USize val = seq)\n: Pointer[U8 val] tag",
            "title": "cpointer"
        },
        {
            "location": "/builtin-String/#parameters_9",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_9",
            "text": "Pointer [ U8  val] tag",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#cstring",
            "text": "[Source]  Returns a C compatible pointer to a null-terminated version of the\nstring, safe to pass to an FFI function that doesn't accept a size\nargument, expecting a null-terminator. If the underlying string\nis already null terminated, this is returned; otherwise the string\nis copied into a new, null-terminated allocation.  fun box cstring()\n: Pointer[U8 val] tag",
            "title": "cstring"
        },
        {
            "location": "/builtin-String/#returns_10",
            "text": "Pointer [ U8  val] tag",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#array",
            "text": "[Source]  Returns an Array[U8] that that reuses the underlying data pointer.  fun val array()\n: Array[U8 val] val",
            "title": "array"
        },
        {
            "location": "/builtin-String/#returns_11",
            "text": "Array [ U8  val] val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#size",
            "text": "[Source]  Returns the length of the string data in bytes.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/builtin-String/#returns_12",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#codepoints",
            "text": "[Source]  Returns the number of unicode code points in the string between the two\noffsets. Index range [ from  ..  to ) is half-open.  fun box codepoints(\n  from: ISize val = seq,\n  to: ISize val = seq)\n: USize val",
            "title": "codepoints"
        },
        {
            "location": "/builtin-String/#parameters_10",
            "text": "from:  ISize  val = seq  to:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_13",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#space",
            "text": "[Source]  Returns the space available for data, not including the null terminator.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/builtin-String/#returns_14",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#reserve",
            "text": "[Source]  Reserve space for len bytes. An additional byte will be reserved for the\nnull terminator.  fun ref reserve(\n  len: USize val)\n: None val",
            "title": "reserve"
        },
        {
            "location": "/builtin-String/#parameters_11",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#compact",
            "text": "[Source]  Try to remove unused space, making it available for garbage collection. The\nrequest may be ignored. The string is returned to allow call chaining.  fun ref compact()\n: None val",
            "title": "compact"
        },
        {
            "location": "/builtin-String/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#recalc",
            "text": "[Source]  Recalculates the string length. This is only needed if the string is\nchanged via an FFI call. If a null terminator byte is not found within the\nallocated length, the size will not be changed.  fun ref recalc()\n: None val",
            "title": "recalc"
        },
        {
            "location": "/builtin-String/#returns_17",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#truncate",
            "text": "[Source]  Truncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.  Note that memory is not freed by this operation.  fun ref truncate(\n  len: USize val)\n: None val",
            "title": "truncate"
        },
        {
            "location": "/builtin-String/#parameters_12",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#trim_in_place",
            "text": "[Source]  Trim the string to a portion of itself, covering  from  until  to .\nUnlike slice, the operation does not allocate a new string nor copy\nelements.  fun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val",
            "title": "trim_in_place"
        },
        {
            "location": "/builtin-String/#parameters_13",
            "text": "from:  USize  val = seq  to:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#trim",
            "text": "[Source]  Return a shared portion of this string, covering  from  until  to .\nBoth the original and the new string are immutable, as they share memory.\nThe operation does not allocate a new string pointer nor copy elements.  fun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: String val",
            "title": "trim"
        },
        {
            "location": "/builtin-String/#parameters_14",
            "text": "from:  USize  val = seq  to:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_20",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#chop",
            "text": "[Source]  Chops the string in half at the split point requested and returns both\nthe left and right portions. The original string is trimmed in place and\nreturned as the right portion. If the split point is larger than the\nstring, the left portion is the original string and the right portion\nis a new empty string.\nBoth strings are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new string pointer nor copy elements.  fun iso chop(\n  split_point: USize val)\n: (String iso^ , String iso^)",
            "title": "chop"
        },
        {
            "location": "/builtin-String/#parameters_15",
            "text": "split_point:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_21",
            "text": "( String  iso^ ,  String  iso^)",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#is_null_terminated",
            "text": "[Source]  Return true if the string is null-terminated and safe to pass to an FFI\nfunction that doesn't accept a size argument, expecting a null-terminator.\nThis method checks that there is a null byte just after the final position\nof populated bytes in the string, but does not check for other null bytes\nwhich may be present earlier in the content of the string.\nIf you need a null-terminated copy of this string, use the clone method.  fun box is_null_terminated()\n: Bool val",
            "title": "is_null_terminated"
        },
        {
            "location": "/builtin-String/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#utf32",
            "text": "[Source]  Return a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.  fun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?",
            "title": "utf32"
        },
        {
            "location": "/builtin-String/#parameters_16",
            "text": "offset:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_23",
            "text": "( U32  val ,  U8  val) ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#apply",
            "text": "[Source]  Returns the i-th byte. Raise an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: U8 val ?",
            "title": "apply"
        },
        {
            "location": "/builtin-String/#parameters_17",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_24",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#update",
            "text": "[Source]  Change the i-th byte. Raise an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?",
            "title": "update"
        },
        {
            "location": "/builtin-String/#parameters_18",
            "text": "i:  USize  val  value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_25",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#at_offset",
            "text": "[Source]  Returns the byte at the given offset. Raise an error if the offset is out\nof bounds.  fun box at_offset(\n  offset: ISize val)\n: U8 val ?",
            "title": "at_offset"
        },
        {
            "location": "/builtin-String/#parameters_19",
            "text": "offset:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_26",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#update_offset",
            "text": "[Source]  Changes a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.  fun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?",
            "title": "update_offset"
        },
        {
            "location": "/builtin-String/#parameters_20",
            "text": "offset:  ISize  val  value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_27",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#clone",
            "text": "[Source]  Returns a copy of the string. The resulting string is\nnull-terminated even if the original is not.  fun box clone()\n: String iso^",
            "title": "clone"
        },
        {
            "location": "/builtin-String/#returns_28",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#find",
            "text": "[Source]  Return the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurrence of s or s is empty.  fun box find(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?",
            "title": "find"
        },
        {
            "location": "/builtin-String/#parameters_21",
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_29",
            "text": "ISize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#rfind",
            "text": "[Source]  Return the index of n-th instance of  s  in the string starting from the\nend. The  offset  represents the highest index to included in the search.\nRaise an error if there is no n-th occurrence of  s  or  s  is empty.  fun box rfind(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?",
            "title": "rfind"
        },
        {
            "location": "/builtin-String/#parameters_22",
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_30",
            "text": "ISize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#contains",
            "text": "[Source]  Returns true if contains s as a substring, false otherwise.  fun box contains(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/builtin-String/#parameters_23",
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_31",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#count",
            "text": "[Source]  Counts the non-overlapping occurrences of s in the string.  fun box count(\n  s: String box,\n  offset: ISize val = seq)\n: USize val",
            "title": "count"
        },
        {
            "location": "/builtin-String/#parameters_24",
            "text": "s:  String  box  offset:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_32",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#at",
            "text": "[Source]  Returns true if the substring s is present at the given offset.  fun box at(\n  s: String box,\n  offset: ISize val = seq)\n: Bool val",
            "title": "at"
        },
        {
            "location": "/builtin-String/#parameters_25",
            "text": "s:  String  box  offset:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_33",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#delete",
            "text": "[Source]  Delete len bytes at the supplied offset, compacting the string in place.  fun ref delete(\n  offset: ISize val,\n  len: USize val = seq)\n: None val",
            "title": "delete"
        },
        {
            "location": "/builtin-String/#parameters_26",
            "text": "offset:  ISize  val  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_34",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#substring",
            "text": "[Source]  Returns a substring. Index range [ from  ..  to ) is half-open.\nReturns an empty string if nothing is in the range.  Note that this operation allocates a new string to be returned. For\nsimilar operations that don't allocate a new string, see  trim  and trim_in_place .  fun box substring(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^",
            "title": "substring"
        },
        {
            "location": "/builtin-String/#parameters_27",
            "text": "from:  ISize  val  to:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_35",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#lower",
            "text": "[Source]  Returns a lower case version of the string.  fun box lower()\n: String iso^",
            "title": "lower"
        },
        {
            "location": "/builtin-String/#returns_36",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#lower_in_place",
            "text": "[Source]  Transforms the string to lower case. Currently only knows ASCII case.  fun ref lower_in_place()\n: None val",
            "title": "lower_in_place"
        },
        {
            "location": "/builtin-String/#returns_37",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#upper",
            "text": "[Source]  Returns an upper case version of the string. Currently only knows ASCII\ncase.  fun box upper()\n: String iso^",
            "title": "upper"
        },
        {
            "location": "/builtin-String/#returns_38",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#upper_in_place",
            "text": "[Source]  Transforms the string to upper case.  fun ref upper_in_place()\n: None val",
            "title": "upper_in_place"
        },
        {
            "location": "/builtin-String/#returns_39",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#reverse",
            "text": "[Source]  Returns a reversed version of the string.  fun box reverse()\n: String iso^",
            "title": "reverse"
        },
        {
            "location": "/builtin-String/#returns_40",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#reverse_in_place",
            "text": "[Source]  Reverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.  fun ref reverse_in_place()\n: None val",
            "title": "reverse_in_place"
        },
        {
            "location": "/builtin-String/#returns_41",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#push",
            "text": "[Source]  Add a byte to the end of the string.  fun ref push(\n  value: U8 val)\n: None val",
            "title": "push"
        },
        {
            "location": "/builtin-String/#parameters_28",
            "text": "value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_42",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#pop",
            "text": "[Source]  Remove a byte from the end of the string.  fun ref pop()\n: U8 val ?",
            "title": "pop"
        },
        {
            "location": "/builtin-String/#returns_43",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#unshift",
            "text": "[Source]  Adds a byte to the beginning of the string.  fun ref unshift(\n  value: U8 val)\n: None val",
            "title": "unshift"
        },
        {
            "location": "/builtin-String/#parameters_29",
            "text": "value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_44",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#shift",
            "text": "[Source]  Removes a byte from the beginning of the string.  fun ref shift()\n: U8 val ?",
            "title": "shift"
        },
        {
            "location": "/builtin-String/#returns_45",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#append",
            "text": "[Source]  Append the elements from a sequence, starting from the given offset.  fun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "append"
        },
        {
            "location": "/builtin-String/#parameters_30",
            "text": "seq:  ReadSeq [ U8  val] box  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_46",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#concat",
            "text": "[Source]  Add len iterated bytes to the end of the string, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "concat"
        },
        {
            "location": "/builtin-String/#parameters_31",
            "text": "iter:  Iterator [ U8  val] ref  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_47",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#clear",
            "text": "[Source]  Truncate the string to zero length.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/builtin-String/#returns_48",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#insert",
            "text": "[Source]  Returns a version of the string with the given string inserted at the given\noffset.  fun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^",
            "title": "insert"
        },
        {
            "location": "/builtin-String/#parameters_32",
            "text": "offset:  ISize  val  that:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_49",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#insert_in_place",
            "text": "[Source]  Inserts the given string at the given offset. Appends the string if the\noffset is out of bounds.  fun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val",
            "title": "insert_in_place"
        },
        {
            "location": "/builtin-String/#parameters_33",
            "text": "offset:  ISize  val  that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_50",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#insert_byte",
            "text": "[Source]  Inserts a byte at the given offset. Appends if the offset is out of bounds.  fun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val",
            "title": "insert_byte"
        },
        {
            "location": "/builtin-String/#parameters_34",
            "text": "offset:  ISize  val  value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_51",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#cut",
            "text": "[Source]  Returns a version of the string with the given range deleted.\nIndex range [ from  ..  to ) is half-open.  fun box cut(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^",
            "title": "cut"
        },
        {
            "location": "/builtin-String/#parameters_35",
            "text": "from:  ISize  val  to:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_52",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#cut_in_place",
            "text": "[Source]  Cuts the given range out of the string.\nIndex range [ from  ..  to ) is half-open.  fun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = seq)\n: None val",
            "title": "cut_in_place"
        },
        {
            "location": "/builtin-String/#parameters_36",
            "text": "from:  ISize  val  to:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_53",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#remove",
            "text": "[Source]  Remove all instances of s from the string. Returns the count of removed\ninstances.  fun ref remove(\n  s: String box)\n: USize val",
            "title": "remove"
        },
        {
            "location": "/builtin-String/#parameters_37",
            "text": "s:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_54",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#replace",
            "text": "[Source]  Replace up to n occurrences of  from  in  this  with  to . If n is 0, all\noccurrences will be replaced. Returns the count of replaced occurrences.  fun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = seq)\n: USize val",
            "title": "replace"
        },
        {
            "location": "/builtin-String/#parameters_38",
            "text": "from:  String  box  to:  String  box  n:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_55",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#split_by",
            "text": "[Source]  Split the string into an array of strings that are delimited by  delim  in\nthe original string. If  n > 0 , then the split count is limited to n.  Adjacent delimiters result in a zero length entry in the array. For\nexample,  \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] .  An empty delimiter results in an array that contains a single element equal\nto the whole string.  fun box split_by(\n  delim: String val,\n  n: USize val = seq)\n: Array[String val] iso^",
            "title": "split_by"
        },
        {
            "location": "/builtin-String/#parameters_39",
            "text": "delim:  String  val  n:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_56",
            "text": "Array [ String  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#split",
            "text": "[Source]  Split the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If  n > 0 , then the split count is\nlimited to n.  Adjacent delimiters result in a zero length entry in the array. For\nexample,  \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] .  fun box split(\n  delim: String val = seq,\n  n: USize val = seq)\n: Array[String val] iso^",
            "title": "split"
        },
        {
            "location": "/builtin-String/#parameters_40",
            "text": "delim:  String  val = seq  n:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_57",
            "text": "Array [ String  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#strip",
            "text": "[Source]  Remove all leading and trailing characters from the string that are in s.  fun ref strip(\n  s: String box = seq)\n: None val",
            "title": "strip"
        },
        {
            "location": "/builtin-String/#parameters_41",
            "text": "s:  String  box = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_58",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#rstrip",
            "text": "[Source]  Remove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.  fun ref rstrip(\n  s: String box = seq)\n: None val",
            "title": "rstrip"
        },
        {
            "location": "/builtin-String/#parameters_42",
            "text": "s:  String  box = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_59",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#lstrip",
            "text": "[Source]  Remove all leading characters within the string that are in s. By default,\nleading whitespace is removed.  fun ref lstrip(\n  s: String box = seq)\n: None val",
            "title": "lstrip"
        },
        {
            "location": "/builtin-String/#parameters_43",
            "text": "s:  String  box = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_60",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#add",
            "text": "[Source]  Return a string that is a concatenation of this and that.  fun box add(\n  that: String box)\n: String val",
            "title": "add"
        },
        {
            "location": "/builtin-String/#parameters_44",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_61",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#join",
            "text": "[Source]  Return a string that is a concatenation of the strings in data, using this\nas a separator.  fun box join(\n  data: Iterator[Stringable box] ref)\n: String iso^",
            "title": "join"
        },
        {
            "location": "/builtin-String/#parameters_45",
            "text": "data:  Iterator [ Stringable  box] ref",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_62",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#compare",
            "text": "[Source]  Lexically compare two strings.  fun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-String/#parameters_46",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_63",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#compare_sub",
            "text": "[Source]  Lexically compare at most  n  bytes of the substring of  this  starting at offset  with the substring of  that  starting at  that_offset . The\ncomparison is case sensitive unless  ignore_case  is  true .  If the substring of  this  is a proper prefix of the substring of  that ,\nthen  this  is  Less  than  that . Likewise, if  that  is a proper prefix of this , then  this  is  Greater  than  that .  Both  offset  and  that_offset  can be negative, in which case the offsets\nare computed from the end of the string.  If  n + offset  is greater than the length of  this , or  n + that_offset \nis greater than the length of  that , then the number of positions compared\nwill be reduced to the length of the longest substring.  Needs to be made UTF-8 safe.  fun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = seq,\n  that_offset: ISize val = seq,\n  ignore_case: Bool val = seq)\n: (Less val | Equal val | Greater val)",
            "title": "compare_sub"
        },
        {
            "location": "/builtin-String/#parameters_47",
            "text": "that:  String  box  n:  USize  val  offset:  ISize  val = seq  that_offset:  ISize  val = seq  ignore_case:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_64",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#eq",
            "text": "[Source]  Returns true if the two strings have the same contents.  fun box eq(\n  that: String box)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-String/#parameters_48",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_65",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#lt",
            "text": "[Source]  Returns true if this is lexically less than that. Needs to be made UTF-8\nsafe.  fun box lt(\n  that: String box)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-String/#parameters_49",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_66",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#le",
            "text": "[Source]  Returns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.  fun box le(\n  that: String box)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-String/#parameters_50",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_67",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#offset_to_index",
            "text": "[Source]  fun box offset_to_index(\n  i: ISize val)\n: USize val",
            "title": "offset_to_index"
        },
        {
            "location": "/builtin-String/#parameters_51",
            "text": "i:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_68",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#bool",
            "text": "[Source]  fun box bool()\n: Bool val ?",
            "title": "bool"
        },
        {
            "location": "/builtin-String/#returns_69",
            "text": "Bool  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i8",
            "text": "[Source]  fun box i8(\n  base: U8 val = seq)\n: I8 val ?",
            "title": "i8"
        },
        {
            "location": "/builtin-String/#parameters_52",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_70",
            "text": "I8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i16",
            "text": "[Source]  fun box i16(\n  base: U8 val = seq)\n: I16 val ?",
            "title": "i16"
        },
        {
            "location": "/builtin-String/#parameters_53",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_71",
            "text": "I16  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i32",
            "text": "[Source]  fun box i32(\n  base: U8 val = seq)\n: I32 val ?",
            "title": "i32"
        },
        {
            "location": "/builtin-String/#parameters_54",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_72",
            "text": "I32  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i64",
            "text": "[Source]  fun box i64(\n  base: U8 val = seq)\n: I64 val ?",
            "title": "i64"
        },
        {
            "location": "/builtin-String/#parameters_55",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_73",
            "text": "I64  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i128",
            "text": "[Source]  fun box i128(\n  base: U8 val = seq)\n: I128 val ?",
            "title": "i128"
        },
        {
            "location": "/builtin-String/#parameters_56",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_74",
            "text": "I128  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#ilong",
            "text": "[Source]  fun box ilong(\n  base: U8 val = seq)\n: ILong val ?",
            "title": "ilong"
        },
        {
            "location": "/builtin-String/#parameters_57",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_75",
            "text": "ILong  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#isize",
            "text": "[Source]  fun box isize(\n  base: U8 val = seq)\n: ISize val ?",
            "title": "isize"
        },
        {
            "location": "/builtin-String/#parameters_58",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_76",
            "text": "ISize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u8",
            "text": "[Source]  fun box u8(\n  base: U8 val = seq)\n: U8 val ?",
            "title": "u8"
        },
        {
            "location": "/builtin-String/#parameters_59",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_77",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u16",
            "text": "[Source]  fun box u16(\n  base: U8 val = seq)\n: U16 val ?",
            "title": "u16"
        },
        {
            "location": "/builtin-String/#parameters_60",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_78",
            "text": "U16  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u32",
            "text": "[Source]  fun box u32(\n  base: U8 val = seq)\n: U32 val ?",
            "title": "u32"
        },
        {
            "location": "/builtin-String/#parameters_61",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_79",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u64",
            "text": "[Source]  fun box u64(\n  base: U8 val = seq)\n: U64 val ?",
            "title": "u64"
        },
        {
            "location": "/builtin-String/#parameters_62",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_80",
            "text": "U64  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u128",
            "text": "[Source]  fun box u128(\n  base: U8 val = seq)\n: U128 val ?",
            "title": "u128"
        },
        {
            "location": "/builtin-String/#parameters_63",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_81",
            "text": "U128  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#ulong",
            "text": "[Source]  fun box ulong(\n  base: U8 val = seq)\n: ULong val ?",
            "title": "ulong"
        },
        {
            "location": "/builtin-String/#parameters_64",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_82",
            "text": "ULong  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#usize",
            "text": "[Source]  fun box usize(\n  base: U8 val = seq)\n: USize val ?",
            "title": "usize"
        },
        {
            "location": "/builtin-String/#parameters_65",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_83",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#read_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93",
            "text": "[Source]  Read an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.  fun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A] val)](\n  offset: ISize val = seq,\n  base: U8 val = seq)\n: (A , USize val) ?",
            "title": "read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"
        },
        {
            "location": "/builtin-String/#parameters_66",
            "text": "offset:  ISize  val = seq  base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_84",
            "text": "(A ,  USize  val) ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#f32",
            "text": "[Source]  fun box f32(\n  offset: ISize val = seq)\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-String/#parameters_67",
            "text": "offset:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_85",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#f64",
            "text": "[Source]  fun box f64(\n  offset: ISize val = seq)\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-String/#parameters_68",
            "text": "offset:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_86",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-String/#returns_87",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-String/#returns_88",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#string_1",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-String/#returns_89",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#values",
            "text": "[Source]  Return an iterator over the bytes in the string.  fun box values()\n: StringBytes ref^",
            "title": "values"
        },
        {
            "location": "/builtin-String/#returns_90",
            "text": "StringBytes  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#runes",
            "text": "[Source]  Return an iterator over the codepoints in the string.  fun box runes()\n: StringRunes ref^",
            "title": "runes"
        },
        {
            "location": "/builtin-String/#returns_91",
            "text": "StringRunes  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#ge",
            "text": "fun box ge(\n  that: String box)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-String/#parameters_69",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_92",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#gt",
            "text": "fun box gt(\n  that: String box)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-String/#parameters_70",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_93",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#ne",
            "text": "fun box ne(\n  that: String box)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-String/#parameters_71",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_94",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringBytes/",
            "text": "StringBytes\n\u00b6\n\n\n[Source]\n\n\nclass ref StringBytes is\n  Iterator[U8 val] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[\nU8\n val] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  string: String box)\n: StringBytes ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstring: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStringBytes\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: U8 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?",
            "title": "class StringBytes"
        },
        {
            "location": "/builtin-StringBytes/#stringbytes",
            "text": "[Source]  class ref StringBytes is\n  Iterator[U8 val] ref",
            "title": "StringBytes"
        },
        {
            "location": "/builtin-StringBytes/#implements",
            "text": "Iterator [ U8  val] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-StringBytes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StringBytes/#create",
            "text": "[Source]  new ref create(\n  string: String box)\n: StringBytes ref^",
            "title": "create"
        },
        {
            "location": "/builtin-StringBytes/#parameters",
            "text": "string:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StringBytes/#returns",
            "text": "StringBytes  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringBytes/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-StringBytes/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-StringBytes/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringBytes/#next",
            "text": "[Source]  fun ref next()\n: U8 val ?",
            "title": "next"
        },
        {
            "location": "/builtin-StringBytes/#returns_2",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringRunes/",
            "text": "StringRunes\n\u00b6\n\n\n[Source]\n\n\nclass ref StringRunes is\n  Iterator[U32 val] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[\nU32\n val] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  string: String box)\n: StringRunes ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstring: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStringRunes\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: U32 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?",
            "title": "class StringRunes"
        },
        {
            "location": "/builtin-StringRunes/#stringrunes",
            "text": "[Source]  class ref StringRunes is\n  Iterator[U32 val] ref",
            "title": "StringRunes"
        },
        {
            "location": "/builtin-StringRunes/#implements",
            "text": "Iterator [ U32  val] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-StringRunes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StringRunes/#create",
            "text": "[Source]  new ref create(\n  string: String box)\n: StringRunes ref^",
            "title": "create"
        },
        {
            "location": "/builtin-StringRunes/#parameters",
            "text": "string:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StringRunes/#returns",
            "text": "StringRunes  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringRunes/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-StringRunes/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-StringRunes/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringRunes/#next",
            "text": "[Source]  fun ref next()\n: U32 val ?",
            "title": "next"
        },
        {
            "location": "/builtin-StringRunes/#returns_2",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-InputNotify/",
            "text": "InputNotify\n\u00b6\n\n\n[Source]\n\n\nNotification for data arriving via an input stream.\n\n\ninterface ref InputNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nCalled when data is available on the stream.\n\n\nfun ref apply(\n  data: Array[U8 val] iso)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nCalled when no more data will arrive on the stream.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface InputNotify"
        },
        {
            "location": "/builtin-InputNotify/#inputnotify",
            "text": "[Source]  Notification for data arriving via an input stream.  interface ref InputNotify",
            "title": "InputNotify"
        },
        {
            "location": "/builtin-InputNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-InputNotify/#apply",
            "text": "[Source]  Called when data is available on the stream.  fun ref apply(\n  data: Array[U8 val] iso)\n: None val",
            "title": "apply"
        },
        {
            "location": "/builtin-InputNotify/#parameters",
            "text": "data:  Array [ U8  val] iso",
            "title": "Parameters"
        },
        {
            "location": "/builtin-InputNotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-InputNotify/#dispose",
            "text": "[Source]  Called when no more data will arrive on the stream.  fun ref dispose()\n: None val",
            "title": "dispose"
        },
        {
            "location": "/builtin-InputNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-DisposableActor/",
            "text": "DisposableActor\n\u00b6\n\n\n[Source]\n\n\nAn interface used to asynchronously dispose of an actor.\n\n\ninterface tag DisposableActor\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nbe dispose()",
            "title": "interface DisposableActor"
        },
        {
            "location": "/builtin-DisposableActor/#disposableactor",
            "text": "[Source]  An interface used to asynchronously dispose of an actor.  interface tag DisposableActor",
            "title": "DisposableActor"
        },
        {
            "location": "/builtin-DisposableActor/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-DisposableActor/#dispose",
            "text": "[Source]  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/builtin-InputStream/",
            "text": "InputStream\n\u00b6\n\n\n[Source]\n\n\nAsynchronous access to some input stream.\n\n\ninterface tag InputStream\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSet the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.\n\n\nbe apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: (\nInputNotify\n iso | \nNone\n val)\n\n\nchunk_size: \nUSize\n val = seq\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nClear the notifier in order to shut down input.\n\n\nbe dispose()",
            "title": "interface InputStream"
        },
        {
            "location": "/builtin-InputStream/#inputstream",
            "text": "[Source]  Asynchronous access to some input stream.  interface tag InputStream",
            "title": "InputStream"
        },
        {
            "location": "/builtin-InputStream/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-InputStream/#apply",
            "text": "[Source]  Set the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.  be apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = seq)",
            "title": "apply"
        },
        {
            "location": "/builtin-InputStream/#parameters",
            "text": "notify: ( InputNotify  iso |  None  val)  chunk_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-InputStream/#dispose",
            "text": "[Source]  Clear the notifier in order to shut down input.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/builtin-Stdin/",
            "text": "Stdin\n\u00b6\n\n\n[Source]\n\n\nAsynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.\n\n\nReading from stdin is done by registering an \nInputNotify\n:\n\n\nactor Main\n  new create(env: Env) =>\n    // do not forget to call `env.input.dispose` at some point\n    env.input(\n      object iso is InputNotify\n        fun ref apply(data: Array[U8] iso) =>\n          env.out.write(String.from_iso_array(consume data))\n\n        fun ref dispose() =>\n          env.out.print(\"Done.\")\n      end,\n      512)\n\n\n\n\nNote:\n For reading user input from a terminal, use the \nterm\n package.\n\n\nactor tag Stdin\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSet the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.\n\n\nbe apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: (\nInputNotify\n iso | \nNone\n val)\n\n\nchunk_size: \nUSize\n val = seq\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nClear the notifier in order to shut down input.\n\n\nbe dispose()",
            "title": "actor Stdin"
        },
        {
            "location": "/builtin-Stdin/#stdin",
            "text": "[Source]  Asynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.  Reading from stdin is done by registering an  InputNotify :  actor Main\n  new create(env: Env) =>\n    // do not forget to call `env.input.dispose` at some point\n    env.input(\n      object iso is InputNotify\n        fun ref apply(data: Array[U8] iso) =>\n          env.out.write(String.from_iso_array(consume data))\n\n        fun ref dispose() =>\n          env.out.print(\"Done.\")\n      end,\n      512)  Note:  For reading user input from a terminal, use the  term  package.  actor tag Stdin",
            "title": "Stdin"
        },
        {
            "location": "/builtin-Stdin/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-Stdin/#apply",
            "text": "[Source]  Set the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.  be apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = seq)",
            "title": "apply"
        },
        {
            "location": "/builtin-Stdin/#parameters",
            "text": "notify: ( InputNotify  iso |  None  val)  chunk_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Stdin/#dispose",
            "text": "[Source]  Clear the notifier in order to shut down input.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/builtin-ByteSeq/",
            "text": "ByteSeq\n\u00b6\n\n\n[Source]\n\n\ntype ByteSeq is\n  (String val | Array[U8 val] val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)",
            "title": "type ByteSeq"
        },
        {
            "location": "/builtin-ByteSeq/#byteseq",
            "text": "[Source]  type ByteSeq is\n  (String val | Array[U8 val] val)",
            "title": "ByteSeq"
        },
        {
            "location": "/builtin-ByteSeq/#type-alias-for",
            "text": "( String  val |  Array [ U8  val] val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-ByteSeqIter/",
            "text": "ByteSeqIter\n\u00b6\n\n\n[Source]\n\n\nAccept an iterable collection of String or Array[U8] val.\n\n\ninterface val ByteSeqIter\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nfun box values()\n: Iterator[(this->String box | this->Array[U8 val] box)] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[(this->\nString\n box | this->\nArray\n[\nU8\n val] box)] ref",
            "title": "interface ByteSeqIter"
        },
        {
            "location": "/builtin-ByteSeqIter/#byteseqiter",
            "text": "[Source]  Accept an iterable collection of String or Array[U8] val.  interface val ByteSeqIter",
            "title": "ByteSeqIter"
        },
        {
            "location": "/builtin-ByteSeqIter/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ByteSeqIter/#values",
            "text": "[Source]  fun box values()\n: Iterator[(this->String box | this->Array[U8 val] box)] ref",
            "title": "values"
        },
        {
            "location": "/builtin-ByteSeqIter/#returns",
            "text": "Iterator [(this-> String  box | this-> Array [ U8  val] box)] ref",
            "title": "Returns"
        },
        {
            "location": "/builtin-OutStream/",
            "text": "OutStream\n\u00b6\n\n\n[Source]\n\n\nAsnychronous access to some output stream.\n\n\ninterface tag OutStream\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nprint\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\u00b6\n\n\n[Source]\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val",
            "title": "interface OutStream"
        },
        {
            "location": "/builtin-OutStream/#outstream",
            "text": "[Source]  Asnychronous access to some output stream.  interface tag OutStream",
            "title": "OutStream"
        },
        {
            "location": "/builtin-OutStream/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-OutStream/#print",
            "text": "[Source]  Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))",
            "title": "print"
        },
        {
            "location": "/builtin-OutStream/#parameters",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-OutStream/#write",
            "text": "[Source]  Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))",
            "title": "write"
        },
        {
            "location": "/builtin-OutStream/#parameters_1",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-OutStream/#printv",
            "text": "[Source]  Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)",
            "title": "printv"
        },
        {
            "location": "/builtin-OutStream/#parameters_2",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-OutStream/#writev",
            "text": "[Source]  Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)",
            "title": "writev"
        },
        {
            "location": "/builtin-OutStream/#parameters_3",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StdStream/",
            "text": "StdStream\n\u00b6\n\n\n[Source]\n\n\nAsynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.\n\n\nactor tag StdStream\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nprint\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\u00b6\n\n\n[Source]\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val",
            "title": "actor StdStream"
        },
        {
            "location": "/builtin-StdStream/#stdstream",
            "text": "[Source]  Asynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.  actor tag StdStream",
            "title": "StdStream"
        },
        {
            "location": "/builtin-StdStream/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-StdStream/#print",
            "text": "[Source]  Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))",
            "title": "print"
        },
        {
            "location": "/builtin-StdStream/#parameters",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StdStream/#write",
            "text": "[Source]  Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))",
            "title": "write"
        },
        {
            "location": "/builtin-StdStream/#parameters_1",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StdStream/#printv",
            "text": "[Source]  Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)",
            "title": "printv"
        },
        {
            "location": "/builtin-StdStream/#parameters_2",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StdStream/#writev",
            "text": "[Source]  Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)",
            "title": "writev"
        },
        {
            "location": "/builtin-StdStream/#parameters_3",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-SourceLoc/",
            "text": "SourceLoc\n\u00b6\n\n\n[Source]\n\n\nRepresents a location in a Pony source file, as reported by \n__loc\n.\n\n\ninterface val SourceLoc\n\n\n\n\nPublic Functions\n\u00b6\n\n\nfile\n\u00b6\n\n\n[Source]\n\n\nName and path of source file.\n\n\nfun box file()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ntype_name\n\u00b6\n\n\n[Source]\n\n\nName of nearest class, actor, primitive, struct, interface, or trait.\n\n\nfun box type_name()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nmethod_name\n\u00b6\n\n\n[Source]\n\n\nName of containing method.\n\n\nfun box method_name()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nline\n\u00b6\n\n\n[Source]\n\n\nLine number within file.\nLine numbers start at 1.\n\n\nfun box line()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\npos\n\u00b6\n\n\n[Source]\n\n\nCharacter position on line.\nCharacter positions start at 1.\n\n\nfun box pos()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val",
            "title": "interface SourceLoc"
        },
        {
            "location": "/builtin-SourceLoc/#sourceloc",
            "text": "[Source]  Represents a location in a Pony source file, as reported by  __loc .  interface val SourceLoc",
            "title": "SourceLoc"
        },
        {
            "location": "/builtin-SourceLoc/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-SourceLoc/#file",
            "text": "[Source]  Name and path of source file.  fun box file()\n: String val",
            "title": "file"
        },
        {
            "location": "/builtin-SourceLoc/#returns",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-SourceLoc/#type_name",
            "text": "[Source]  Name of nearest class, actor, primitive, struct, interface, or trait.  fun box type_name()\n: String val",
            "title": "type_name"
        },
        {
            "location": "/builtin-SourceLoc/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-SourceLoc/#method_name",
            "text": "[Source]  Name of containing method.  fun box method_name()\n: String val",
            "title": "method_name"
        },
        {
            "location": "/builtin-SourceLoc/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-SourceLoc/#line",
            "text": "[Source]  Line number within file.\nLine numbers start at 1.  fun box line()\n: USize val",
            "title": "line"
        },
        {
            "location": "/builtin-SourceLoc/#returns_3",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-SourceLoc/#pos",
            "text": "[Source]  Character position on line.\nCharacter positions start at 1.  fun box pos()\n: USize val",
            "title": "pos"
        },
        {
            "location": "/builtin-SourceLoc/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/",
            "text": "I8\n\u00b6\n\n\n[Source]\n\n\nprimitive val I8 is\n  _SignedInteger[I8 val, U8 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I8 val, U8 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I8 val)\n: I8 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I8 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I8 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I8 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nI8\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: I8 val)\n: (I8 val , I8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nI8\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I8"
        },
        {
            "location": "/builtin-I8/#i8",
            "text": "[Source]  primitive val I8 is\n  _SignedInteger[I8 val, U8 val] val",
            "title": "I8"
        },
        {
            "location": "/builtin-I8/#implements",
            "text": "_SignedInteger[I8 val, U8 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I8/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I8/#create",
            "text": "[Source]  new val create(\n  value: I8 val)\n: I8 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I8/#parameters",
            "text": "value:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns",
            "text": "I8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I8 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I8/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_1",
            "text": "I8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#min_value",
            "text": "[Source]  new val min_value()\n: I8 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I8/#returns_2",
            "text": "I8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#max_value",
            "text": "[Source]  new val max_value()\n: I8 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I8/#returns_3",
            "text": "I8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I8/#abs",
            "text": "[Source]  fun box abs()\n: U8 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I8/#returns_4",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I8 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I8/#returns_5",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#bswap",
            "text": "[Source]  fun box bswap()\n: I8 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I8/#returns_6",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#popcount",
            "text": "[Source]  fun box popcount()\n: U8 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I8/#returns_7",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#clz",
            "text": "[Source]  fun box clz()\n: U8 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I8/#returns_8",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ctz",
            "text": "[Source]  fun box ctz()\n: U8 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I8/#returns_9",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U8 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_10",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U8 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_11",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U8 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I8/#returns_12",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#min",
            "text": "[Source]  fun box min(\n  y: I8 val)\n: I8 val",
            "title": "min"
        },
        {
            "location": "/builtin-I8/#parameters_2",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_13",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#max",
            "text": "[Source]  fun box max(\n  y: I8 val)\n: I8 val",
            "title": "max"
        },
        {
            "location": "/builtin-I8/#parameters_3",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_14",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#addc",
            "text": "[Source]  fun box addc(\n  y: I8 val)\n: (I8 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I8/#parameters_4",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_15",
            "text": "( I8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#subc",
            "text": "[Source]  fun box subc(\n  y: I8 val)\n: (I8 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I8/#parameters_5",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_16",
            "text": "( I8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I8/#parameters_6",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_17",
            "text": "( I8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#shl",
            "text": "fun box shl(\n  y: U8 val)\n: I8 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I8/#parameters_7",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_18",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#shr",
            "text": "fun box shr(\n  y: U8 val)\n: I8 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I8/#parameters_8",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_19",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U8 val)\n: I8 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_9",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_20",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U8 val)\n: I8 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_10",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_21",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I8/#returns_22",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_11",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_23",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_12",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_24",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_13",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_25",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_14",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_26",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_15",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_27",
            "text": "( I8  val ,  I8  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_16",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_28",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I8 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_29",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#op_and",
            "text": "fun box op_and(\n  y: I8 val)\n: I8 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I8/#parameters_17",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_30",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#op_or",
            "text": "fun box op_or(\n  y: I8 val)\n: I8 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I8/#parameters_18",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_31",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#op_xor",
            "text": "fun box op_xor(\n  y: I8 val)\n: I8 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I8/#parameters_19",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_32",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#op_not",
            "text": "fun box op_not()\n: I8 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I8/#returns_33",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#add",
            "text": "fun box add(\n  y: I8 val)\n: I8 val",
            "title": "add"
        },
        {
            "location": "/builtin-I8/#parameters_20",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_34",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#sub",
            "text": "fun box sub(\n  y: I8 val)\n: I8 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I8/#parameters_21",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_35",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mul",
            "text": "fun box mul(\n  y: I8 val)\n: I8 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I8/#parameters_22",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_36",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#div",
            "text": "fun box div(\n  y: I8 val)\n: I8 val",
            "title": "div"
        },
        {
            "location": "/builtin-I8/#parameters_23",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_37",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#divmod",
            "text": "fun box divmod(\n  y: I8 val)\n: (I8 val , I8 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I8/#parameters_24",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_38",
            "text": "( I8  val ,  I8  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mod",
            "text": "fun box mod(\n  y: I8 val)\n: I8 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I8/#parameters_25",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_39",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#neg",
            "text": "fun box neg()\n: I8 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I8/#returns_40",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#eq",
            "text": "fun box eq(\n  y: I8 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I8/#parameters_26",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_41",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ne",
            "text": "fun box ne(\n  y: I8 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I8/#parameters_27",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#lt",
            "text": "fun box lt(\n  y: I8 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I8/#parameters_28",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#le",
            "text": "fun box le(\n  y: I8 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I8/#parameters_29",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ge",
            "text": "fun box ge(\n  y: I8 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I8/#parameters_30",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#gt",
            "text": "fun box gt(\n  y: I8 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I8/#parameters_31",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I8/#returns_47",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I8/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i8_1",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I8/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I8/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I8/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I8/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I8/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I8/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I8/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I8/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I8/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I8/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I8/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I8/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I8/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I8/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I8/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I8/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#compare",
            "text": "fun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I8/#parameters_32",
            "text": "that:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/",
            "text": "I16\n\u00b6\n\n\n[Source]\n\n\nprimitive val I16 is\n  _SignedInteger[I16 val, U16 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I16 val, U16 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I16 val)\n: I16 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I16 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I16 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I16 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nI16\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: I16 val)\n: (I16 val , I16 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nI16\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I16"
        },
        {
            "location": "/builtin-I16/#i16",
            "text": "[Source]  primitive val I16 is\n  _SignedInteger[I16 val, U16 val] val",
            "title": "I16"
        },
        {
            "location": "/builtin-I16/#implements",
            "text": "_SignedInteger[I16 val, U16 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I16/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I16/#create",
            "text": "[Source]  new val create(\n  value: I16 val)\n: I16 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I16/#parameters",
            "text": "value:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns",
            "text": "I16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I16 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I16/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_1",
            "text": "I16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#min_value",
            "text": "[Source]  new val min_value()\n: I16 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I16/#returns_2",
            "text": "I16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#max_value",
            "text": "[Source]  new val max_value()\n: I16 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I16/#returns_3",
            "text": "I16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I16/#abs",
            "text": "[Source]  fun box abs()\n: U16 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I16/#returns_4",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I16 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I16/#returns_5",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#bswap",
            "text": "[Source]  fun box bswap()\n: I16 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I16/#returns_6",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#popcount",
            "text": "[Source]  fun box popcount()\n: U16 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I16/#returns_7",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#clz",
            "text": "[Source]  fun box clz()\n: U16 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I16/#returns_8",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ctz",
            "text": "[Source]  fun box ctz()\n: U16 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I16/#returns_9",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U16 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_10",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U16 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_11",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U16 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I16/#returns_12",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#min",
            "text": "[Source]  fun box min(\n  y: I16 val)\n: I16 val",
            "title": "min"
        },
        {
            "location": "/builtin-I16/#parameters_2",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_13",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#max",
            "text": "[Source]  fun box max(\n  y: I16 val)\n: I16 val",
            "title": "max"
        },
        {
            "location": "/builtin-I16/#parameters_3",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_14",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#addc",
            "text": "[Source]  fun box addc(\n  y: I16 val)\n: (I16 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I16/#parameters_4",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_15",
            "text": "( I16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#subc",
            "text": "[Source]  fun box subc(\n  y: I16 val)\n: (I16 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I16/#parameters_5",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_16",
            "text": "( I16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I16/#parameters_6",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_17",
            "text": "( I16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#shl",
            "text": "fun box shl(\n  y: U16 val)\n: I16 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I16/#parameters_7",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_18",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#shr",
            "text": "fun box shr(\n  y: U16 val)\n: I16 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I16/#parameters_8",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_19",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U16 val)\n: I16 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_9",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_20",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U16 val)\n: I16 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_10",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_21",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I16/#returns_22",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_11",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_23",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_12",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_24",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_13",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_25",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_14",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_26",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_15",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_27",
            "text": "( I16  val ,  I16  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_16",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_28",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I16 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_29",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#op_and",
            "text": "fun box op_and(\n  y: I16 val)\n: I16 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I16/#parameters_17",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_30",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#op_or",
            "text": "fun box op_or(\n  y: I16 val)\n: I16 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I16/#parameters_18",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_31",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#op_xor",
            "text": "fun box op_xor(\n  y: I16 val)\n: I16 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I16/#parameters_19",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_32",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#op_not",
            "text": "fun box op_not()\n: I16 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I16/#returns_33",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#add",
            "text": "fun box add(\n  y: I16 val)\n: I16 val",
            "title": "add"
        },
        {
            "location": "/builtin-I16/#parameters_20",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_34",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#sub",
            "text": "fun box sub(\n  y: I16 val)\n: I16 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I16/#parameters_21",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_35",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mul",
            "text": "fun box mul(\n  y: I16 val)\n: I16 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I16/#parameters_22",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_36",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#div",
            "text": "fun box div(\n  y: I16 val)\n: I16 val",
            "title": "div"
        },
        {
            "location": "/builtin-I16/#parameters_23",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_37",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#divmod",
            "text": "fun box divmod(\n  y: I16 val)\n: (I16 val , I16 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I16/#parameters_24",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_38",
            "text": "( I16  val ,  I16  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mod",
            "text": "fun box mod(\n  y: I16 val)\n: I16 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I16/#parameters_25",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_39",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#neg",
            "text": "fun box neg()\n: I16 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I16/#returns_40",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#eq",
            "text": "fun box eq(\n  y: I16 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I16/#parameters_26",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_41",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ne",
            "text": "fun box ne(\n  y: I16 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I16/#parameters_27",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#lt",
            "text": "fun box lt(\n  y: I16 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I16/#parameters_28",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#le",
            "text": "fun box le(\n  y: I16 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I16/#parameters_29",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ge",
            "text": "fun box ge(\n  y: I16 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I16/#parameters_30",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#gt",
            "text": "fun box gt(\n  y: I16 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I16/#parameters_31",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I16/#returns_47",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I16/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I16/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i16_1",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I16/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I16/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I16/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I16/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I16/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I16/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I16/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I16/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I16/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I16/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I16/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I16/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I16/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I16/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I16/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#compare",
            "text": "fun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I16/#parameters_32",
            "text": "that:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/",
            "text": "I32\n\u00b6\n\n\n[Source]\n\n\nprimitive val I32 is\n  _SignedInteger[I32 val, U32 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I32 val, U32 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I32 val)\n: I32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nI32\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: I32 val)\n: (I32 val , I32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nI32\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I32"
        },
        {
            "location": "/builtin-I32/#i32",
            "text": "[Source]  primitive val I32 is\n  _SignedInteger[I32 val, U32 val] val",
            "title": "I32"
        },
        {
            "location": "/builtin-I32/#implements",
            "text": "_SignedInteger[I32 val, U32 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I32/#create",
            "text": "[Source]  new val create(\n  value: I32 val)\n: I32 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I32/#parameters",
            "text": "value:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns",
            "text": "I32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I32 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I32/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_1",
            "text": "I32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#min_value",
            "text": "[Source]  new val min_value()\n: I32 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I32/#returns_2",
            "text": "I32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#max_value",
            "text": "[Source]  new val max_value()\n: I32 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I32/#returns_3",
            "text": "I32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I32/#abs",
            "text": "[Source]  fun box abs()\n: U32 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I32/#returns_4",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I32 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I32/#returns_5",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#bswap",
            "text": "[Source]  fun box bswap()\n: I32 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I32/#returns_6",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#popcount",
            "text": "[Source]  fun box popcount()\n: U32 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I32/#returns_7",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#clz",
            "text": "[Source]  fun box clz()\n: U32 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I32/#returns_8",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ctz",
            "text": "[Source]  fun box ctz()\n: U32 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I32/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U32 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_10",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U32 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_11",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U32 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I32/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#min",
            "text": "[Source]  fun box min(\n  y: I32 val)\n: I32 val",
            "title": "min"
        },
        {
            "location": "/builtin-I32/#parameters_2",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_13",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#max",
            "text": "[Source]  fun box max(\n  y: I32 val)\n: I32 val",
            "title": "max"
        },
        {
            "location": "/builtin-I32/#parameters_3",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_14",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#addc",
            "text": "[Source]  fun box addc(\n  y: I32 val)\n: (I32 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I32/#parameters_4",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_15",
            "text": "( I32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#subc",
            "text": "[Source]  fun box subc(\n  y: I32 val)\n: (I32 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I32/#parameters_5",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_16",
            "text": "( I32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I32/#parameters_6",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_17",
            "text": "( I32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#shl",
            "text": "fun box shl(\n  y: U32 val)\n: I32 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I32/#parameters_7",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_18",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#shr",
            "text": "fun box shr(\n  y: U32 val)\n: I32 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I32/#parameters_8",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_19",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U32 val)\n: I32 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_9",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_20",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U32 val)\n: I32 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_10",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_21",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I32/#returns_22",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_11",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_23",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_12",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_24",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_13",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_25",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_14",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_26",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_15",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_27",
            "text": "( I32  val ,  I32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_16",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_28",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I32 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_29",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#op_and",
            "text": "fun box op_and(\n  y: I32 val)\n: I32 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I32/#parameters_17",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_30",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#op_or",
            "text": "fun box op_or(\n  y: I32 val)\n: I32 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I32/#parameters_18",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_31",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#op_xor",
            "text": "fun box op_xor(\n  y: I32 val)\n: I32 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I32/#parameters_19",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_32",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#op_not",
            "text": "fun box op_not()\n: I32 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I32/#returns_33",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#add",
            "text": "fun box add(\n  y: I32 val)\n: I32 val",
            "title": "add"
        },
        {
            "location": "/builtin-I32/#parameters_20",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_34",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#sub",
            "text": "fun box sub(\n  y: I32 val)\n: I32 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I32/#parameters_21",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_35",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mul",
            "text": "fun box mul(\n  y: I32 val)\n: I32 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I32/#parameters_22",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_36",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#div",
            "text": "fun box div(\n  y: I32 val)\n: I32 val",
            "title": "div"
        },
        {
            "location": "/builtin-I32/#parameters_23",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_37",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#divmod",
            "text": "fun box divmod(\n  y: I32 val)\n: (I32 val , I32 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I32/#parameters_24",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_38",
            "text": "( I32  val ,  I32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mod",
            "text": "fun box mod(\n  y: I32 val)\n: I32 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I32/#parameters_25",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_39",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#neg",
            "text": "fun box neg()\n: I32 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I32/#returns_40",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#eq",
            "text": "fun box eq(\n  y: I32 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I32/#parameters_26",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_41",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ne",
            "text": "fun box ne(\n  y: I32 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I32/#parameters_27",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#lt",
            "text": "fun box lt(\n  y: I32 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I32/#parameters_28",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#le",
            "text": "fun box le(\n  y: I32 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I32/#parameters_29",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ge",
            "text": "fun box ge(\n  y: I32 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I32/#parameters_30",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#gt",
            "text": "fun box gt(\n  y: I32 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I32/#parameters_31",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I32/#returns_47",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I32/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I32/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I32/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i32_1",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I32/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I32/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I32/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I32/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I32/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I32/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I32/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I32/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I32/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I32/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I32/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I32/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I32/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I32/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#compare",
            "text": "fun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I32/#parameters_32",
            "text": "that:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/",
            "text": "I64\n\u00b6\n\n\n[Source]\n\n\nprimitive val I64 is\n  _SignedInteger[I64 val, U64 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I64 val, U64 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I64 val)\n: I64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: I64 val)\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I64"
        },
        {
            "location": "/builtin-I64/#i64",
            "text": "[Source]  primitive val I64 is\n  _SignedInteger[I64 val, U64 val] val",
            "title": "I64"
        },
        {
            "location": "/builtin-I64/#implements",
            "text": "_SignedInteger[I64 val, U64 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I64/#create",
            "text": "[Source]  new val create(\n  value: I64 val)\n: I64 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I64/#parameters",
            "text": "value:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns",
            "text": "I64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I64 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I64/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_1",
            "text": "I64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#min_value",
            "text": "[Source]  new val min_value()\n: I64 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I64/#returns_2",
            "text": "I64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#max_value",
            "text": "[Source]  new val max_value()\n: I64 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I64/#returns_3",
            "text": "I64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I64/#abs",
            "text": "[Source]  fun box abs()\n: U64 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I64/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I64 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I64/#returns_5",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#bswap",
            "text": "[Source]  fun box bswap()\n: I64 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I64/#returns_6",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#popcount",
            "text": "[Source]  fun box popcount()\n: U64 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I64/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#clz",
            "text": "[Source]  fun box clz()\n: U64 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I64/#returns_8",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ctz",
            "text": "[Source]  fun box ctz()\n: U64 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I64/#returns_9",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U64 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_10",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U64 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_11",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U64 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I64/#returns_12",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#min",
            "text": "[Source]  fun box min(\n  y: I64 val)\n: I64 val",
            "title": "min"
        },
        {
            "location": "/builtin-I64/#parameters_2",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_13",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#max",
            "text": "[Source]  fun box max(\n  y: I64 val)\n: I64 val",
            "title": "max"
        },
        {
            "location": "/builtin-I64/#parameters_3",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_14",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I64/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#addc",
            "text": "[Source]  fun box addc(\n  y: I64 val)\n: (I64 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I64/#parameters_4",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_16",
            "text": "( I64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#subc",
            "text": "[Source]  fun box subc(\n  y: I64 val)\n: (I64 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I64/#parameters_5",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_17",
            "text": "( I64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I64/#parameters_6",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_18",
            "text": "( I64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#shl",
            "text": "fun box shl(\n  y: U64 val)\n: I64 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I64/#parameters_7",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_19",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#shr",
            "text": "fun box shr(\n  y: U64 val)\n: I64 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I64/#parameters_8",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_20",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U64 val)\n: I64 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_9",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_21",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U64 val)\n: I64 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_10",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_22",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I64/#returns_23",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_11",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_24",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_12",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_25",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_13",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_26",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_14",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_27",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_15",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_28",
            "text": "( I64  val ,  I64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_16",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_29",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I64 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_30",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#op_and",
            "text": "fun box op_and(\n  y: I64 val)\n: I64 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I64/#parameters_17",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_31",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#op_or",
            "text": "fun box op_or(\n  y: I64 val)\n: I64 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I64/#parameters_18",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_32",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#op_xor",
            "text": "fun box op_xor(\n  y: I64 val)\n: I64 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I64/#parameters_19",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_33",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#op_not",
            "text": "fun box op_not()\n: I64 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I64/#returns_34",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#add",
            "text": "fun box add(\n  y: I64 val)\n: I64 val",
            "title": "add"
        },
        {
            "location": "/builtin-I64/#parameters_20",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_35",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#sub",
            "text": "fun box sub(\n  y: I64 val)\n: I64 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I64/#parameters_21",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_36",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mul",
            "text": "fun box mul(\n  y: I64 val)\n: I64 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I64/#parameters_22",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_37",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#div",
            "text": "fun box div(\n  y: I64 val)\n: I64 val",
            "title": "div"
        },
        {
            "location": "/builtin-I64/#parameters_23",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_38",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#divmod",
            "text": "fun box divmod(\n  y: I64 val)\n: (I64 val , I64 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I64/#parameters_24",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_39",
            "text": "( I64  val ,  I64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mod",
            "text": "fun box mod(\n  y: I64 val)\n: I64 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I64/#parameters_25",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_40",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#neg",
            "text": "fun box neg()\n: I64 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I64/#returns_41",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#eq",
            "text": "fun box eq(\n  y: I64 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I64/#parameters_26",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ne",
            "text": "fun box ne(\n  y: I64 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I64/#parameters_27",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#lt",
            "text": "fun box lt(\n  y: I64 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I64/#parameters_28",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#le",
            "text": "fun box le(\n  y: I64 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I64/#parameters_29",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ge",
            "text": "fun box ge(\n  y: I64 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I64/#parameters_30",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#gt",
            "text": "fun box gt(\n  y: I64 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I64/#parameters_31",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I64/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I64/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I64/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I64/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i64_1",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I64/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I64/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I64/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I64/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I64/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I64/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I64/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I64/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I64/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I64/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I64/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I64/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I64/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#compare",
            "text": "fun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I64/#parameters_32",
            "text": "that:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/",
            "text": "ILong\n\u00b6\n\n\n[Source]\n\n\nprimitive val ILong is\n  _SignedInteger[ILong val, ULong val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[ILong val, ULong val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: ILong val)\n: ILong val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ILong val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: ILong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: ILong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box clz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ctz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nILong\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: ILong val)\n: (ILong val , ILong val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nILong\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive ILong"
        },
        {
            "location": "/builtin-ILong/#ilong",
            "text": "[Source]  primitive val ILong is\n  _SignedInteger[ILong val, ULong val] val",
            "title": "ILong"
        },
        {
            "location": "/builtin-ILong/#implements",
            "text": "_SignedInteger[ILong val, ULong val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-ILong/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ILong/#create",
            "text": "[Source]  new val create(\n  value: ILong val)\n: ILong val^",
            "title": "create"
        },
        {
            "location": "/builtin-ILong/#parameters",
            "text": "value:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns",
            "text": "ILong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ILong val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-ILong/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_1",
            "text": "ILong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#min_value",
            "text": "[Source]  new val min_value()\n: ILong val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-ILong/#returns_2",
            "text": "ILong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#max_value",
            "text": "[Source]  new val max_value()\n: ILong val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-ILong/#returns_3",
            "text": "ILong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ILong/#abs",
            "text": "[Source]  fun box abs()\n: ULong val",
            "title": "abs"
        },
        {
            "location": "/builtin-ILong/#returns_4",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: ILong val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-ILong/#returns_5",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#bswap",
            "text": "[Source]  fun box bswap()\n: ILong val",
            "title": "bswap"
        },
        {
            "location": "/builtin-ILong/#returns_6",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#popcount",
            "text": "[Source]  fun box popcount()\n: ULong val",
            "title": "popcount"
        },
        {
            "location": "/builtin-ILong/#returns_7",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#clz",
            "text": "[Source]  fun box clz()\n: ULong val",
            "title": "clz"
        },
        {
            "location": "/builtin-ILong/#returns_8",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ctz",
            "text": "[Source]  fun box ctz()\n: ULong val",
            "title": "ctz"
        },
        {
            "location": "/builtin-ILong/#returns_9",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#clz_unsafe",
            "text": "[Source]  fun box clz_unsafe()\n: ULong val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_10",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ctz_unsafe",
            "text": "[Source]  fun box ctz_unsafe()\n: ULong val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_11",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: ULong val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-ILong/#returns_12",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#min",
            "text": "[Source]  fun box min(\n  y: ILong val)\n: ILong val",
            "title": "min"
        },
        {
            "location": "/builtin-ILong/#parameters_2",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_13",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#max",
            "text": "[Source]  fun box max(\n  y: ILong val)\n: ILong val",
            "title": "max"
        },
        {
            "location": "/builtin-ILong/#parameters_3",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_14",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-ILong/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#addc",
            "text": "[Source]  fun box addc(\n  y: ILong val)\n: (ILong val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-ILong/#parameters_4",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_16",
            "text": "( ILong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#subc",
            "text": "[Source]  fun box subc(\n  y: ILong val)\n: (ILong val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-ILong/#parameters_5",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_17",
            "text": "( ILong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mulc",
            "text": "[Source]  fun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-ILong/#parameters_6",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_18",
            "text": "( ILong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#shl",
            "text": "fun box shl(\n  y: ULong val)\n: ILong val",
            "title": "shl"
        },
        {
            "location": "/builtin-ILong/#parameters_7",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_19",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#shr",
            "text": "fun box shr(\n  y: ULong val)\n: ILong val",
            "title": "shr"
        },
        {
            "location": "/builtin-ILong/#parameters_8",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_20",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: ULong val)\n: ILong val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_9",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_21",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: ULong val)\n: ILong val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_10",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_22",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-ILong/#returns_23",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_11",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_24",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_12",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_25",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_13",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_26",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_14",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_27",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_15",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_28",
            "text": "( ILong  val ,  ILong  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_16",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_29",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: ILong val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_30",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#op_and",
            "text": "fun box op_and(\n  y: ILong val)\n: ILong val",
            "title": "op_and"
        },
        {
            "location": "/builtin-ILong/#parameters_17",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_31",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#op_or",
            "text": "fun box op_or(\n  y: ILong val)\n: ILong val",
            "title": "op_or"
        },
        {
            "location": "/builtin-ILong/#parameters_18",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_32",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#op_xor",
            "text": "fun box op_xor(\n  y: ILong val)\n: ILong val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-ILong/#parameters_19",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_33",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#op_not",
            "text": "fun box op_not()\n: ILong val",
            "title": "op_not"
        },
        {
            "location": "/builtin-ILong/#returns_34",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#add",
            "text": "fun box add(\n  y: ILong val)\n: ILong val",
            "title": "add"
        },
        {
            "location": "/builtin-ILong/#parameters_20",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_35",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#sub",
            "text": "fun box sub(\n  y: ILong val)\n: ILong val",
            "title": "sub"
        },
        {
            "location": "/builtin-ILong/#parameters_21",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_36",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mul",
            "text": "fun box mul(\n  y: ILong val)\n: ILong val",
            "title": "mul"
        },
        {
            "location": "/builtin-ILong/#parameters_22",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_37",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#div",
            "text": "fun box div(\n  y: ILong val)\n: ILong val",
            "title": "div"
        },
        {
            "location": "/builtin-ILong/#parameters_23",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_38",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#divmod",
            "text": "fun box divmod(\n  y: ILong val)\n: (ILong val , ILong val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-ILong/#parameters_24",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_39",
            "text": "( ILong  val ,  ILong  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mod",
            "text": "fun box mod(\n  y: ILong val)\n: ILong val",
            "title": "mod"
        },
        {
            "location": "/builtin-ILong/#parameters_25",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_40",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#neg",
            "text": "fun box neg()\n: ILong val",
            "title": "neg"
        },
        {
            "location": "/builtin-ILong/#returns_41",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#eq",
            "text": "fun box eq(\n  y: ILong val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-ILong/#parameters_26",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ne",
            "text": "fun box ne(\n  y: ILong val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-ILong/#parameters_27",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#lt",
            "text": "fun box lt(\n  y: ILong val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-ILong/#parameters_28",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#le",
            "text": "fun box le(\n  y: ILong val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-ILong/#parameters_29",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ge",
            "text": "fun box ge(\n  y: ILong val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-ILong/#parameters_30",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#gt",
            "text": "fun box gt(\n  y: ILong val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-ILong/#parameters_31",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-ILong/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-ILong/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-ILong/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-ILong/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-ILong/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-ILong/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ilong_1",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-ILong/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-ILong/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-ILong/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-ILong/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-ILong/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-ILong/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-ILong/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-ILong/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-ILong/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-ILong/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-ILong/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#compare",
            "text": "fun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-ILong/#parameters_32",
            "text": "that:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/",
            "text": "ISize\n\u00b6\n\n\n[Source]\n\n\nprimitive val ISize is\n  _SignedInteger[ISize val, USize val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[ISize val, USize val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: ISize val)\n: ISize val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ISize val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: ISize val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: ISize val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box clz_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ctz_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nISize\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: ISize val)\n: (ISize val , ISize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nISize\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive ISize"
        },
        {
            "location": "/builtin-ISize/#isize",
            "text": "[Source]  primitive val ISize is\n  _SignedInteger[ISize val, USize val] val",
            "title": "ISize"
        },
        {
            "location": "/builtin-ISize/#implements",
            "text": "_SignedInteger[ISize val, USize val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-ISize/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ISize/#create",
            "text": "[Source]  new val create(\n  value: ISize val)\n: ISize val^",
            "title": "create"
        },
        {
            "location": "/builtin-ISize/#parameters",
            "text": "value:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns",
            "text": "ISize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ISize val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-ISize/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_1",
            "text": "ISize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#min_value",
            "text": "[Source]  new val min_value()\n: ISize val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-ISize/#returns_2",
            "text": "ISize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#max_value",
            "text": "[Source]  new val max_value()\n: ISize val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-ISize/#returns_3",
            "text": "ISize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ISize/#abs",
            "text": "[Source]  fun box abs()\n: USize val",
            "title": "abs"
        },
        {
            "location": "/builtin-ISize/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: ISize val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-ISize/#returns_5",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#bswap",
            "text": "[Source]  fun box bswap()\n: ISize val",
            "title": "bswap"
        },
        {
            "location": "/builtin-ISize/#returns_6",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#popcount",
            "text": "[Source]  fun box popcount()\n: USize val",
            "title": "popcount"
        },
        {
            "location": "/builtin-ISize/#returns_7",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#clz",
            "text": "[Source]  fun box clz()\n: USize val",
            "title": "clz"
        },
        {
            "location": "/builtin-ISize/#returns_8",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ctz",
            "text": "[Source]  fun box ctz()\n: USize val",
            "title": "ctz"
        },
        {
            "location": "/builtin-ISize/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#clz_unsafe",
            "text": "[Source]  fun box clz_unsafe()\n: USize val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_10",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ctz_unsafe",
            "text": "[Source]  fun box ctz_unsafe()\n: USize val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_11",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: USize val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-ISize/#returns_12",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#min",
            "text": "[Source]  fun box min(\n  y: ISize val)\n: ISize val",
            "title": "min"
        },
        {
            "location": "/builtin-ISize/#parameters_2",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_13",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#max",
            "text": "[Source]  fun box max(\n  y: ISize val)\n: ISize val",
            "title": "max"
        },
        {
            "location": "/builtin-ISize/#parameters_3",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_14",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#addc",
            "text": "[Source]  fun box addc(\n  y: ISize val)\n: (ISize val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-ISize/#parameters_4",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_15",
            "text": "( ISize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#subc",
            "text": "[Source]  fun box subc(\n  y: ISize val)\n: (ISize val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-ISize/#parameters_5",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_16",
            "text": "( ISize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mulc",
            "text": "[Source]  fun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-ISize/#parameters_6",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_17",
            "text": "( ISize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#shl",
            "text": "fun box shl(\n  y: USize val)\n: ISize val",
            "title": "shl"
        },
        {
            "location": "/builtin-ISize/#parameters_7",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_18",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#shr",
            "text": "fun box shr(\n  y: USize val)\n: ISize val",
            "title": "shr"
        },
        {
            "location": "/builtin-ISize/#parameters_8",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_19",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: USize val)\n: ISize val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_9",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_20",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: USize val)\n: ISize val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_10",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_21",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-ISize/#returns_22",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_11",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_23",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_12",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_24",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_13",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_25",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_14",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_26",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_15",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_27",
            "text": "( ISize  val ,  ISize  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_16",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_28",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: ISize val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_29",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#op_and",
            "text": "fun box op_and(\n  y: ISize val)\n: ISize val",
            "title": "op_and"
        },
        {
            "location": "/builtin-ISize/#parameters_17",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_30",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#op_or",
            "text": "fun box op_or(\n  y: ISize val)\n: ISize val",
            "title": "op_or"
        },
        {
            "location": "/builtin-ISize/#parameters_18",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_31",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#op_xor",
            "text": "fun box op_xor(\n  y: ISize val)\n: ISize val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-ISize/#parameters_19",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_32",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#op_not",
            "text": "fun box op_not()\n: ISize val",
            "title": "op_not"
        },
        {
            "location": "/builtin-ISize/#returns_33",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#add",
            "text": "fun box add(\n  y: ISize val)\n: ISize val",
            "title": "add"
        },
        {
            "location": "/builtin-ISize/#parameters_20",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_34",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#sub",
            "text": "fun box sub(\n  y: ISize val)\n: ISize val",
            "title": "sub"
        },
        {
            "location": "/builtin-ISize/#parameters_21",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_35",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mul",
            "text": "fun box mul(\n  y: ISize val)\n: ISize val",
            "title": "mul"
        },
        {
            "location": "/builtin-ISize/#parameters_22",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_36",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#div",
            "text": "fun box div(\n  y: ISize val)\n: ISize val",
            "title": "div"
        },
        {
            "location": "/builtin-ISize/#parameters_23",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_37",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#divmod",
            "text": "fun box divmod(\n  y: ISize val)\n: (ISize val , ISize val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-ISize/#parameters_24",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_38",
            "text": "( ISize  val ,  ISize  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mod",
            "text": "fun box mod(\n  y: ISize val)\n: ISize val",
            "title": "mod"
        },
        {
            "location": "/builtin-ISize/#parameters_25",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_39",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#neg",
            "text": "fun box neg()\n: ISize val",
            "title": "neg"
        },
        {
            "location": "/builtin-ISize/#returns_40",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#eq",
            "text": "fun box eq(\n  y: ISize val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-ISize/#parameters_26",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_41",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ne",
            "text": "fun box ne(\n  y: ISize val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-ISize/#parameters_27",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#lt",
            "text": "fun box lt(\n  y: ISize val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-ISize/#parameters_28",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#le",
            "text": "fun box le(\n  y: ISize val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-ISize/#parameters_29",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ge",
            "text": "fun box ge(\n  y: ISize val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-ISize/#parameters_30",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#gt",
            "text": "fun box gt(\n  y: ISize val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-ISize/#parameters_31",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-ISize/#returns_47",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-ISize/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-ISize/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-ISize/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-ISize/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-ISize/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-ISize/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-ISize/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#isize_1",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-ISize/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-ISize/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-ISize/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-ISize/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-ISize/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-ISize/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-ISize/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-ISize/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-ISize/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-ISize/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#compare",
            "text": "fun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-ISize/#parameters_32",
            "text": "that:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/",
            "text": "I128\n\u00b6\n\n\n[Source]\n\n\nprimitive val I128 is\n  _SignedInteger[I128 val, U128 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I128 val, U128 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I128 val)\n: I128 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I128 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I128 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I128 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: I128 val)\n: (I128 val , I128 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nI128\n val)\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nI128\n val)\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I128 val)\n: (I128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I128 val)\n: (I128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I128 val)\n: (I128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I128"
        },
        {
            "location": "/builtin-I128/#i128",
            "text": "[Source]  primitive val I128 is\n  _SignedInteger[I128 val, U128 val] val",
            "title": "I128"
        },
        {
            "location": "/builtin-I128/#implements",
            "text": "_SignedInteger[I128 val, U128 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I128/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I128/#create",
            "text": "[Source]  new val create(\n  value: I128 val)\n: I128 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I128/#parameters",
            "text": "value:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns",
            "text": "I128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I128 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I128/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_1",
            "text": "I128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#min_value",
            "text": "[Source]  new val min_value()\n: I128 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I128/#returns_2",
            "text": "I128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#max_value",
            "text": "[Source]  new val max_value()\n: I128 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I128/#returns_3",
            "text": "I128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I128/#abs",
            "text": "[Source]  fun box abs()\n: U128 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I128/#returns_4",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I128 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I128/#returns_5",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#bswap",
            "text": "[Source]  fun box bswap()\n: I128 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I128/#returns_6",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#popcount",
            "text": "[Source]  fun box popcount()\n: U128 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I128/#returns_7",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#clz",
            "text": "[Source]  fun box clz()\n: U128 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I128/#returns_8",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ctz",
            "text": "[Source]  fun box ctz()\n: U128 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I128/#returns_9",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U128 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_10",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U128 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_11",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U128 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I128/#returns_12",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#min",
            "text": "[Source]  fun box min(\n  y: I128 val)\n: I128 val",
            "title": "min"
        },
        {
            "location": "/builtin-I128/#parameters_2",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_13",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#max",
            "text": "[Source]  fun box max(\n  y: I128 val)\n: I128 val",
            "title": "max"
        },
        {
            "location": "/builtin-I128/#parameters_3",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_14",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I128/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I128/#returns_16",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I128/#returns_17",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mul",
            "text": "[Source]  fun box mul(\n  y: I128 val)\n: I128 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I128/#parameters_4",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_18",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#divmod",
            "text": "[Source]  fun box divmod(\n  y: I128 val)\n: (I128 val , I128 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I128/#parameters_5",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_19",
            "text": "( I128  val ,  I128  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#div",
            "text": "[Source]  fun box div(\n  y: I128 val)\n: I128 val",
            "title": "div"
        },
        {
            "location": "/builtin-I128/#parameters_6",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_20",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mod",
            "text": "[Source]  fun box mod(\n  y: I128 val)\n: I128 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I128/#parameters_7",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_21",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mul_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_8",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_22",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#divmod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_9",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_23",
            "text": "( I128  val ,  I128  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#div_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_10",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_24",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_11",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_25",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I128/#returns_26",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I128/#returns_27",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#f32_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_28",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#f64_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_29",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#addc",
            "text": "[Source]  fun box addc(\n  y: I128 val)\n: (I128 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I128/#parameters_12",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_30",
            "text": "( I128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#subc",
            "text": "[Source]  fun box subc(\n  y: I128 val)\n: (I128 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I128/#parameters_13",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_31",
            "text": "( I128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I128 val)\n: (I128 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I128/#parameters_14",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_32",
            "text": "( I128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#shl",
            "text": "fun box shl(\n  y: U128 val)\n: I128 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I128/#parameters_15",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_33",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#shr",
            "text": "fun box shr(\n  y: U128 val)\n: I128 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I128/#parameters_16",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_34",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U128 val)\n: I128 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_17",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_35",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U128 val)\n: I128 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_18",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_36",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_19",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_37",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_20",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_38",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I128 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_39",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#op_and",
            "text": "fun box op_and(\n  y: I128 val)\n: I128 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I128/#parameters_21",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_40",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#op_or",
            "text": "fun box op_or(\n  y: I128 val)\n: I128 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I128/#parameters_22",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_41",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#op_xor",
            "text": "fun box op_xor(\n  y: I128 val)\n: I128 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I128/#parameters_23",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_42",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#op_not",
            "text": "fun box op_not()\n: I128 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I128/#returns_43",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#add",
            "text": "fun box add(\n  y: I128 val)\n: I128 val",
            "title": "add"
        },
        {
            "location": "/builtin-I128/#parameters_24",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_44",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#sub",
            "text": "fun box sub(\n  y: I128 val)\n: I128 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I128/#parameters_25",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_45",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#neg",
            "text": "fun box neg()\n: I128 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I128/#returns_46",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#eq",
            "text": "fun box eq(\n  y: I128 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I128/#parameters_26",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ne",
            "text": "fun box ne(\n  y: I128 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I128/#parameters_27",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#lt",
            "text": "fun box lt(\n  y: I128 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I128/#parameters_28",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#le",
            "text": "fun box le(\n  y: I128 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I128/#parameters_29",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_50",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ge",
            "text": "fun box ge(\n  y: I128 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I128/#parameters_30",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_51",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#gt",
            "text": "fun box gt(\n  y: I128 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I128/#parameters_31",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_52",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I128/#returns_53",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I128/#returns_54",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I128/#returns_55",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I128/#returns_56",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i128_1",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I128/#returns_57",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I128/#returns_58",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I128/#returns_59",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I128/#returns_60",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I128/#returns_61",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I128/#returns_62",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I128/#returns_63",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I128/#returns_64",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I128/#returns_65",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I128/#returns_66",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_67",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_68",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_69",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_70",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_71",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_72",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_73",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_74",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_75",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_76",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_77",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_78",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_79",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_80",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#compare",
            "text": "fun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I128/#parameters_32",
            "text": "that:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Signed/",
            "text": "Signed\n\u00b6\n\n\n[Source]\n\n\ntype Signed is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val)",
            "title": "type Signed"
        },
        {
            "location": "/builtin-Signed/#signed",
            "text": "[Source]  type Signed is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)",
            "title": "Signed"
        },
        {
            "location": "/builtin-Signed/#type-alias-for",
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-Seq/",
            "text": "Seq[A: A]\n\u00b6\n\n\n[Source]\n\n\nA sequence of elements.\n\n\ninterface ref Seq[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a sequence, reserving space for len elements.\n\n\nnew ref create(\n  len: USize val = seq)\n: Seq[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSeq\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nreserve\n\u00b6\n\n\n[Source]\n\n\nReserve space for len elements.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the number of elements in the sequence.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nReplaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nRemoves all elements from the sequence.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdds an element to the end of the sequence.\n\n\nfun ref push(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemoves an element from the end of the sequence.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\u00b6\n\n\n[Source]\n\n\nAdds an element to the beginning of the sequence.\n\n\nfun ref unshift(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\u00b6\n\n\n[Source]\n\n\nRemoves an element from the beginning of the sequence.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAdd len elements to the end of the list, starting from the given\noffset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\u00b6\n\n\n[Source]\n\n\nTruncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturns an iterator over the elements of the sequence.\n\n\nfun box values()\n: Iterator[this->A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[this->A] ref^",
            "title": "interface Seq"
        },
        {
            "location": "/builtin-Seq/#seq91a-a93",
            "text": "[Source]  A sequence of elements.  interface ref Seq[A: A]",
            "title": "Seq[A: A]"
        },
        {
            "location": "/builtin-Seq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Seq/#create",
            "text": "[Source]  Create a sequence, reserving space for len elements.  new ref create(\n  len: USize val = seq)\n: Seq[A] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-Seq/#parameters",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns",
            "text": "Seq [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Seq/#reserve",
            "text": "[Source]  Reserve space for len elements.  fun ref reserve(\n  len: USize val)\n: None val",
            "title": "reserve"
        },
        {
            "location": "/builtin-Seq/#parameters_1",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#size",
            "text": "[Source]  Returns the number of elements in the sequence.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/builtin-Seq/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#apply",
            "text": "[Source]  Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds.  fun box apply(\n  i: USize val)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-Seq/#parameters_2",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_3",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#update",
            "text": "[Source]  Replaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?",
            "title": "update"
        },
        {
            "location": "/builtin-Seq/#parameters_3",
            "text": "i:  USize  val  value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_4",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#clear",
            "text": "[Source]  Removes all elements from the sequence.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/builtin-Seq/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#push",
            "text": "[Source]  Adds an element to the end of the sequence.  fun ref push(\n  value: A)\n: None val",
            "title": "push"
        },
        {
            "location": "/builtin-Seq/#parameters_4",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#pop",
            "text": "[Source]  Removes an element from the end of the sequence.  fun ref pop()\n: A^ ?",
            "title": "pop"
        },
        {
            "location": "/builtin-Seq/#returns_7",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#unshift",
            "text": "[Source]  Adds an element to the beginning of the sequence.  fun ref unshift(\n  value: A)\n: None val",
            "title": "unshift"
        },
        {
            "location": "/builtin-Seq/#parameters_5",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#shift",
            "text": "[Source]  Removes an element from the beginning of the sequence.  fun ref shift()\n: A^ ?",
            "title": "shift"
        },
        {
            "location": "/builtin-Seq/#returns_9",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#append",
            "text": "[Source]  Add len elements to the end of the list, starting from the given\noffset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "append"
        },
        {
            "location": "/builtin-Seq/#parameters_6",
            "text": "seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#concat",
            "text": "[Source]  Add len iterated elements to the end of the list, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "concat"
        },
        {
            "location": "/builtin-Seq/#parameters_7",
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#truncate",
            "text": "[Source]  Truncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val",
            "title": "truncate"
        },
        {
            "location": "/builtin-Seq/#parameters_8",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#values",
            "text": "[Source]  Returns an iterator over the elements of the sequence.  fun box values()\n: Iterator[this->A] ref^",
            "title": "values"
        },
        {
            "location": "/builtin-Seq/#returns_13",
            "text": "Iterator [this->A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/",
            "text": "Real[A: \nReal\n[A] val]\n\u00b6\n\n\n[Source]\n\n\ntrait val Real[A: Real[A] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStringable\n box\n\n\n_ArithmeticConvertible val\n\n\nComparable\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "trait Real"
        },
        {
            "location": "/builtin-Real/#real91a-real91a93-val93",
            "text": "[Source]  trait val Real[A: Real[A] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A] ref",
            "title": "Real[A: Real[A] val]"
        },
        {
            "location": "/builtin-Real/#implements",
            "text": "Stringable  box  _ArithmeticConvertible val  Comparable [A] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Real/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Real/#create",
            "text": "[Source]  new val create(\n  value: A)\n: Real[A] val^",
            "title": "create"
        },
        {
            "location": "/builtin-Real/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-Real/#parameters_1",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_1",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#min_value",
            "text": "[Source]  new val min_value()\n: Real[A] val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-Real/#returns_2",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#max_value",
            "text": "[Source]  new val max_value()\n: Real[A] val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-Real/#returns_3",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Real/#add",
            "text": "[Source]  fun box add(\n  y: A)\n: A",
            "title": "add"
        },
        {
            "location": "/builtin-Real/#parameters_2",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_4",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#sub",
            "text": "[Source]  fun box sub(\n  y: A)\n: A",
            "title": "sub"
        },
        {
            "location": "/builtin-Real/#parameters_3",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_5",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#mul",
            "text": "[Source]  fun box mul(\n  y: A)\n: A",
            "title": "mul"
        },
        {
            "location": "/builtin-Real/#parameters_4",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_6",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#div",
            "text": "[Source]  fun box div(\n  y: A)\n: A",
            "title": "div"
        },
        {
            "location": "/builtin-Real/#parameters_5",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_7",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#divmod",
            "text": "[Source]  fun box divmod(\n  y: A)\n: (A , A)",
            "title": "divmod"
        },
        {
            "location": "/builtin-Real/#parameters_6",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_8",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#mod",
            "text": "[Source]  fun box mod(\n  y: A)\n: A",
            "title": "mod"
        },
        {
            "location": "/builtin-Real/#parameters_7",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_9",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#neg",
            "text": "[Source]  fun box neg()\n: A",
            "title": "neg"
        },
        {
            "location": "/builtin-Real/#returns_10",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#eq",
            "text": "[Source]  fun box eq(\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Real/#parameters_8",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ne",
            "text": "[Source]  fun box ne(\n  y: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Real/#parameters_9",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_12",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#lt",
            "text": "[Source]  fun box lt(\n  y: box->A)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-Real/#parameters_10",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#le",
            "text": "[Source]  fun box le(\n  y: box->A)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-Real/#parameters_11",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ge",
            "text": "[Source]  fun box ge(\n  y: box->A)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-Real/#parameters_12",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_15",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#gt",
            "text": "[Source]  fun box gt(\n  y: box->A)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-Real/#parameters_13",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_16",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#min",
            "text": "[Source]  fun box min(\n  y: A)\n: A",
            "title": "min"
        },
        {
            "location": "/builtin-Real/#parameters_14",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_17",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#max",
            "text": "[Source]  fun box max(\n  y: A)\n: A",
            "title": "max"
        },
        {
            "location": "/builtin-Real/#parameters_15",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_18",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-Real/#returns_19",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-Real/#returns_20",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Real/#returns_21",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-Real/#returns_22",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-Real/#returns_23",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-Real/#returns_24",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-Real/#returns_25",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-Real/#returns_26",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-Real/#returns_27",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-Real/#returns_28",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-Real/#returns_29",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-Real/#returns_30",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-Real/#returns_31",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-Real/#returns_32",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-Real/#returns_33",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-Real/#returns_34",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-Real/#returns_35",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-Real/#returns_36",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-Real/#returns_37",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_38",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_39",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_40",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_41",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i128_unsafe",
            "text": "[Source]  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_42",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_43",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_44",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_45",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_46",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_47",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u128_unsafe",
            "text": "[Source]  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_49",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_50",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_51",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_52",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_53",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#compare",
            "text": "fun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-Real/#parameters_16",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_54",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/",
            "text": "Integer[A: \nInteger\n[A] val]\n\u00b6\n\n\n[Source]\n\n\ntrait val Integer[A: Integer[A] val] is\n  Real[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nReal\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nadd_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box add_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box sub_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box neg_unsafe()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nAdd \ny\n to this integer and return the result and a flag indicating overflow.\n\n\nfun box addc(\n  y: A)\n: (A , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nSubtract \ny\n from this integer and return the result and a flag indicating overflow.\n\n\nfun box subc(\n  y: A)\n: (A , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nMultiply \ny\n with this integer and return the result and a flag indicating overflow.\n\n\nfun box mulc(\n  y: A)\n: (A , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nBool\n val)\n\n\n\n\n\n\nop_and\n\u00b6\n\n\n[Source]\n\n\nfun box op_and(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nop_or\n\u00b6\n\n\n[Source]\n\n\nfun box op_or(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\n[Source]\n\n\nfun box op_xor(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nop_not\n\u00b6\n\n\n[Source]\n\n\nfun box op_not()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nReverse the order of the bits within the integer.\nFor example, 0b11101101 (237) would return 0b10110111 (183).\n\n\nfun box bit_reverse()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "trait Integer"
        },
        {
            "location": "/builtin-Integer/#integer91a-integer91a93-val93",
            "text": "[Source]  trait val Integer[A: Integer[A] val] is\n  Real[A] val",
            "title": "Integer[A: Integer[A] val]"
        },
        {
            "location": "/builtin-Integer/#implements",
            "text": "Real [A] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-Integer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Integer/#create",
            "text": "[Source]  new val create(\n  value: A)\n: Real[A] val^",
            "title": "create"
        },
        {
            "location": "/builtin-Integer/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-Integer/#parameters_1",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_1",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#min_value",
            "text": "[Source]  new val min_value()\n: Real[A] val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-Integer/#returns_2",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#max_value",
            "text": "[Source]  new val max_value()\n: Real[A] val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-Integer/#returns_3",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Integer/#add_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box add_unsafe(\n  y: A)\n: A",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_2",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_4",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#sub_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box sub_unsafe(\n  y: A)\n: A",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_3",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_5",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mul_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: A)\n: A",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_4",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_6",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#div_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: A)\n: A",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_5",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_7",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#divmod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: A)\n: (A , A)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_6",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_8",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: A)\n: A",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_7",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_9",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#neg_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box neg_unsafe()\n: A",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_10",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#addc",
            "text": "[Source]  Add  y  to this integer and return the result and a flag indicating overflow.  fun box addc(\n  y: A)\n: (A , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-Integer/#parameters_8",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_11",
            "text": "(A ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#subc",
            "text": "[Source]  Subtract  y  from this integer and return the result and a flag indicating overflow.  fun box subc(\n  y: A)\n: (A , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-Integer/#parameters_9",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_12",
            "text": "(A ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mulc",
            "text": "[Source]  Multiply  y  with this integer and return the result and a flag indicating overflow.  fun box mulc(\n  y: A)\n: (A , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-Integer/#parameters_10",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_13",
            "text": "(A ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#op_and",
            "text": "[Source]  fun box op_and(\n  y: A)\n: A",
            "title": "op_and"
        },
        {
            "location": "/builtin-Integer/#parameters_11",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_14",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#op_or",
            "text": "[Source]  fun box op_or(\n  y: A)\n: A",
            "title": "op_or"
        },
        {
            "location": "/builtin-Integer/#parameters_12",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_15",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#op_xor",
            "text": "[Source]  fun box op_xor(\n  y: A)\n: A",
            "title": "op_xor"
        },
        {
            "location": "/builtin-Integer/#parameters_13",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_16",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#op_not",
            "text": "[Source]  fun box op_not()\n: A",
            "title": "op_not"
        },
        {
            "location": "/builtin-Integer/#returns_17",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#bit_reverse",
            "text": "[Source]  Reverse the order of the bits within the integer.\nFor example, 0b11101101 (237) would return 0b10110111 (183).  fun box bit_reverse()\n: A",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-Integer/#returns_18",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#bswap",
            "text": "[Source]  fun box bswap()\n: A",
            "title": "bswap"
        },
        {
            "location": "/builtin-Integer/#returns_19",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#add",
            "text": "[Source]  fun box add(\n  y: A)\n: A",
            "title": "add"
        },
        {
            "location": "/builtin-Integer/#parameters_14",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_20",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#sub",
            "text": "[Source]  fun box sub(\n  y: A)\n: A",
            "title": "sub"
        },
        {
            "location": "/builtin-Integer/#parameters_15",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_21",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mul",
            "text": "[Source]  fun box mul(\n  y: A)\n: A",
            "title": "mul"
        },
        {
            "location": "/builtin-Integer/#parameters_16",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_22",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#div",
            "text": "[Source]  fun box div(\n  y: A)\n: A",
            "title": "div"
        },
        {
            "location": "/builtin-Integer/#parameters_17",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_23",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#divmod",
            "text": "[Source]  fun box divmod(\n  y: A)\n: (A , A)",
            "title": "divmod"
        },
        {
            "location": "/builtin-Integer/#parameters_18",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_24",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mod",
            "text": "[Source]  fun box mod(\n  y: A)\n: A",
            "title": "mod"
        },
        {
            "location": "/builtin-Integer/#parameters_19",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_25",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#neg",
            "text": "[Source]  fun box neg()\n: A",
            "title": "neg"
        },
        {
            "location": "/builtin-Integer/#returns_26",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#eq",
            "text": "[Source]  fun box eq(\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Integer/#parameters_20",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_27",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ne",
            "text": "[Source]  fun box ne(\n  y: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Integer/#parameters_21",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_28",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#lt",
            "text": "[Source]  fun box lt(\n  y: box->A)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-Integer/#parameters_22",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_29",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#le",
            "text": "[Source]  fun box le(\n  y: box->A)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-Integer/#parameters_23",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_30",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ge",
            "text": "[Source]  fun box ge(\n  y: box->A)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-Integer/#parameters_24",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_31",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#gt",
            "text": "[Source]  fun box gt(\n  y: box->A)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-Integer/#parameters_25",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_32",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#min",
            "text": "[Source]  fun box min(\n  y: A)\n: A",
            "title": "min"
        },
        {
            "location": "/builtin-Integer/#parameters_26",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_33",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#max",
            "text": "[Source]  fun box max(\n  y: A)\n: A",
            "title": "max"
        },
        {
            "location": "/builtin-Integer/#parameters_27",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_34",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-Integer/#returns_35",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-Integer/#returns_36",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Integer/#returns_37",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-Integer/#returns_38",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-Integer/#returns_39",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-Integer/#returns_40",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-Integer/#returns_41",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-Integer/#returns_42",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-Integer/#returns_43",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-Integer/#returns_44",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-Integer/#returns_45",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-Integer/#returns_46",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-Integer/#returns_47",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-Integer/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-Integer/#returns_49",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-Integer/#returns_50",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-Integer/#returns_51",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-Integer/#returns_52",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-Integer/#returns_53",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_54",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_55",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_56",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_57",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i128_unsafe",
            "text": "[Source]  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_58",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_59",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_60",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_61",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_62",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_63",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_64",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u128_unsafe",
            "text": "[Source]  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_65",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_66",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_67",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_68",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_69",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#compare",
            "text": "fun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-Integer/#parameters_28",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_70",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/",
            "text": "FloatingPoint[A: \nFloatingPoint\n[A] val]\n\u00b6\n\n\n[Source]\n\n\ntrait val FloatingPoint[A: FloatingPoint[A] val] is\n  Real[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nReal\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\nmin_normalised\n\u00b6\n\n\n[Source]\n\n\nnew val min_normalised()\n: FloatingPoint[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFloatingPoint\n[A] val^\n\n\n\n\n\n\nepsilon\n\u00b6\n\n\n[Source]\n\n\nnew val epsilon()\n: FloatingPoint[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFloatingPoint\n[A] val^\n\n\n\n\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nradix\n\u00b6\n\n\n[Source]\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\u00b6\n\n\n[Source]\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\u00b6\n\n\n[Source]\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\u00b6\n\n\n[Source]\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\u00b6\n\n\n[Source]\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\u00b6\n\n\n[Source]\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\u00b6\n\n\n[Source]\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box add_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box sub_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box mul_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box div_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box divmod_unsafe(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box mod_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box neg_unsafe()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\neq_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box eq_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box ne_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box lt_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box le_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box ge_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box gt_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nceil\n\u00b6\n\n\n[Source]\n\n\nfun box ceil()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nfloor\n\u00b6\n\n\n[Source]\n\n\nfun box floor()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nround\n\u00b6\n\n\n[Source]\n\n\nfun box round()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ntrunc\n\u00b6\n\n\n[Source]\n\n\nfun box trunc()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nfinite\n\u00b6\n\n\n[Source]\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\u00b6\n\n\n[Source]\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\u00b6\n\n\n[Source]\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\u00b6\n\n\n[Source]\n\n\nfun box ldexp(\n  x: A,\n  exponent: I32 val)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: A\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nfrexp\n\u00b6\n\n\n[Source]\n\n\nfun box frexp()\n: (A , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nU32\n val)\n\n\n\n\n\n\nlog\n\u00b6\n\n\n[Source]\n\n\nfun box log()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nlog2\n\u00b6\n\n\n[Source]\n\n\nfun box log2()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nlog10\n\u00b6\n\n\n[Source]\n\n\nfun box log10()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nlogb\n\u00b6\n\n\n[Source]\n\n\nfun box logb()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\npow\n\u00b6\n\n\n[Source]\n\n\nfun box pow(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\npowi\n\u00b6\n\n\n[Source]\n\n\nfun box powi(\n  y: I32 val)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsqrt\n\u00b6\n\n\n[Source]\n\n\nfun box sqrt()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsqrt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ncbrt\n\u00b6\n\n\n[Source]\n\n\nfun box cbrt()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nexp\n\u00b6\n\n\n[Source]\n\n\nfun box exp()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nexp2\n\u00b6\n\n\n[Source]\n\n\nfun box exp2()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ncos\n\u00b6\n\n\n[Source]\n\n\nfun box cos()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsin\n\u00b6\n\n\n[Source]\n\n\nfun box sin()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ntan\n\u00b6\n\n\n[Source]\n\n\nfun box tan()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ncosh\n\u00b6\n\n\n[Source]\n\n\nfun box cosh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsinh\n\u00b6\n\n\n[Source]\n\n\nfun box sinh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ntanh\n\u00b6\n\n\n[Source]\n\n\nfun box tanh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nacos\n\u00b6\n\n\n[Source]\n\n\nfun box acos()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nasin\n\u00b6\n\n\n[Source]\n\n\nfun box asin()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\natan\n\u00b6\n\n\n[Source]\n\n\nfun box atan()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\natan2\n\u00b6\n\n\n[Source]\n\n\nfun box atan2(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nacosh\n\u00b6\n\n\n[Source]\n\n\nfun box acosh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nasinh\n\u00b6\n\n\n[Source]\n\n\nfun box asinh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\natanh\n\u00b6\n\n\n[Source]\n\n\nfun box atanh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ncopysign\n\u00b6\n\n\n[Source]\n\n\nfun box copysign(\n  sign: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsign: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "trait FloatingPoint"
        },
        {
            "location": "/builtin-FloatingPoint/#floatingpoint91a-floatingpoint91a93-val93",
            "text": "[Source]  trait val FloatingPoint[A: FloatingPoint[A] val] is\n  Real[A] val",
            "title": "FloatingPoint[A: FloatingPoint[A] val]"
        },
        {
            "location": "/builtin-FloatingPoint/#implements",
            "text": "Real [A] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-FloatingPoint/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FloatingPoint/#min_normalised",
            "text": "[Source]  new val min_normalised()\n: FloatingPoint[A] val^",
            "title": "min_normalised"
        },
        {
            "location": "/builtin-FloatingPoint/#returns",
            "text": "FloatingPoint [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#epsilon",
            "text": "[Source]  new val epsilon()\n: FloatingPoint[A] val^",
            "title": "epsilon"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_1",
            "text": "FloatingPoint [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#create",
            "text": "[Source]  new val create(\n  value: A)\n: Real[A] val^",
            "title": "create"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_2",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_1",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_3",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#min_value",
            "text": "[Source]  new val min_value()\n: Real[A] val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_4",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#max_value",
            "text": "[Source]  new val max_value()\n: Real[A] val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_5",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-FloatingPoint/#radix",
            "text": "[Source]  fun tag radix()\n: U8 val",
            "title": "radix"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_6",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#precision2",
            "text": "[Source]  fun tag precision2()\n: U8 val",
            "title": "precision2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_7",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#precision10",
            "text": "[Source]  fun tag precision10()\n: U8 val",
            "title": "precision10"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_8",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#min_exp2",
            "text": "[Source]  fun tag min_exp2()\n: I16 val",
            "title": "min_exp2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_9",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#min_exp10",
            "text": "[Source]  fun tag min_exp10()\n: I16 val",
            "title": "min_exp10"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_10",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#max_exp2",
            "text": "[Source]  fun tag max_exp2()\n: I16 val",
            "title": "max_exp2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_11",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#max_exp10",
            "text": "[Source]  fun tag max_exp10()\n: I16 val",
            "title": "max_exp10"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_12",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#add_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box add_unsafe(\n  y: A)\n: A",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_2",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_13",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sub_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box sub_unsafe(\n  y: A)\n: A",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_3",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_14",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#mul_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box mul_unsafe(\n  y: A)\n: A",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_4",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_15",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#div_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box div_unsafe(\n  y: A)\n: A",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_5",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_16",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#divmod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box divmod_unsafe(\n  y: A)\n: (A , A)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_6",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_17",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#mod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box mod_unsafe(\n  y: A)\n: A",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_7",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_18",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#neg_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box neg_unsafe()\n: A",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_19",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#eq_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box eq_unsafe(\n  y: box->A)\n: Bool val",
            "title": "eq_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_8",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_20",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ne_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box ne_unsafe(\n  y: box->A)\n: Bool val",
            "title": "ne_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_9",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_21",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#lt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box lt_unsafe(\n  y: box->A)\n: Bool val",
            "title": "lt_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_10",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#le_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box le_unsafe(\n  y: box->A)\n: Bool val",
            "title": "le_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_11",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_23",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ge_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box ge_unsafe(\n  y: box->A)\n: Bool val",
            "title": "ge_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_12",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#gt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box gt_unsafe(\n  y: box->A)\n: Bool val",
            "title": "gt_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_13",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#abs",
            "text": "[Source]  fun box abs()\n: A",
            "title": "abs"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_26",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ceil",
            "text": "[Source]  fun box ceil()\n: A",
            "title": "ceil"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_27",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#floor",
            "text": "[Source]  fun box floor()\n: A",
            "title": "floor"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_28",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#round",
            "text": "[Source]  fun box round()\n: A",
            "title": "round"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_29",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#trunc",
            "text": "[Source]  fun box trunc()\n: A",
            "title": "trunc"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_30",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#finite",
            "text": "[Source]  fun box finite()\n: Bool val",
            "title": "finite"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_31",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#infinite",
            "text": "[Source]  fun box infinite()\n: Bool val",
            "title": "infinite"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_32",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#nan",
            "text": "[Source]  fun box nan()\n: Bool val",
            "title": "nan"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_33",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ldexp",
            "text": "[Source]  fun box ldexp(\n  x: A,\n  exponent: I32 val)\n: A",
            "title": "ldexp"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_14",
            "text": "x: A  exponent:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_34",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#frexp",
            "text": "[Source]  fun box frexp()\n: (A , U32 val)",
            "title": "frexp"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_35",
            "text": "(A ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#log",
            "text": "[Source]  fun box log()\n: A",
            "title": "log"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_36",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#log2",
            "text": "[Source]  fun box log2()\n: A",
            "title": "log2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_37",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#log10",
            "text": "[Source]  fun box log10()\n: A",
            "title": "log10"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_38",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#logb",
            "text": "[Source]  fun box logb()\n: A",
            "title": "logb"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_39",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#pow",
            "text": "[Source]  fun box pow(\n  y: A)\n: A",
            "title": "pow"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_15",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_40",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#powi",
            "text": "[Source]  fun box powi(\n  y: I32 val)\n: A",
            "title": "powi"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_16",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_41",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sqrt",
            "text": "[Source]  fun box sqrt()\n: A",
            "title": "sqrt"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_42",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sqrt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: A",
            "title": "sqrt_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_43",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#cbrt",
            "text": "[Source]  fun box cbrt()\n: A",
            "title": "cbrt"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_44",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#exp",
            "text": "[Source]  fun box exp()\n: A",
            "title": "exp"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_45",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#exp2",
            "text": "[Source]  fun box exp2()\n: A",
            "title": "exp2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_46",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#cos",
            "text": "[Source]  fun box cos()\n: A",
            "title": "cos"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_47",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sin",
            "text": "[Source]  fun box sin()\n: A",
            "title": "sin"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_48",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#tan",
            "text": "[Source]  fun box tan()\n: A",
            "title": "tan"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_49",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#cosh",
            "text": "[Source]  fun box cosh()\n: A",
            "title": "cosh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_50",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sinh",
            "text": "[Source]  fun box sinh()\n: A",
            "title": "sinh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_51",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#tanh",
            "text": "[Source]  fun box tanh()\n: A",
            "title": "tanh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_52",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#acos",
            "text": "[Source]  fun box acos()\n: A",
            "title": "acos"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_53",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#asin",
            "text": "[Source]  fun box asin()\n: A",
            "title": "asin"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_54",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#atan",
            "text": "[Source]  fun box atan()\n: A",
            "title": "atan"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_55",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#atan2",
            "text": "[Source]  fun box atan2(\n  y: A)\n: A",
            "title": "atan2"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_17",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_56",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#acosh",
            "text": "[Source]  fun box acosh()\n: A",
            "title": "acosh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_57",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#asinh",
            "text": "[Source]  fun box asinh()\n: A",
            "title": "asinh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_58",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#atanh",
            "text": "[Source]  fun box atanh()\n: A",
            "title": "atanh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_59",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#copysign",
            "text": "[Source]  fun box copysign(\n  sign: A)\n: A",
            "title": "copysign"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_18",
            "text": "sign: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_60",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_61",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#add",
            "text": "[Source]  fun box add(\n  y: A)\n: A",
            "title": "add"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_19",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_62",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sub",
            "text": "[Source]  fun box sub(\n  y: A)\n: A",
            "title": "sub"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_20",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_63",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#mul",
            "text": "[Source]  fun box mul(\n  y: A)\n: A",
            "title": "mul"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_21",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_64",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#div",
            "text": "[Source]  fun box div(\n  y: A)\n: A",
            "title": "div"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_22",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_65",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#divmod",
            "text": "[Source]  fun box divmod(\n  y: A)\n: (A , A)",
            "title": "divmod"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_23",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_66",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#mod",
            "text": "[Source]  fun box mod(\n  y: A)\n: A",
            "title": "mod"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_24",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_67",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#neg",
            "text": "[Source]  fun box neg()\n: A",
            "title": "neg"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_68",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#eq",
            "text": "[Source]  fun box eq(\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_25",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_69",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ne",
            "text": "[Source]  fun box ne(\n  y: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_26",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_70",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#lt",
            "text": "[Source]  fun box lt(\n  y: box->A)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_27",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_71",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#le",
            "text": "[Source]  fun box le(\n  y: box->A)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_28",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_72",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ge",
            "text": "[Source]  fun box ge(\n  y: box->A)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_29",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_73",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#gt",
            "text": "[Source]  fun box gt(\n  y: box->A)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_30",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_74",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#min",
            "text": "[Source]  fun box min(\n  y: A)\n: A",
            "title": "min"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_31",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_75",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#max",
            "text": "[Source]  fun box max(\n  y: A)\n: A",
            "title": "max"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_32",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_76",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_77",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_79",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_80",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_81",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_82",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_83",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_84",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_85",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_86",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_87",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_88",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_89",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_90",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_91",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_92",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_93",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_94",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_95",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_96",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_97",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_98",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i128_unsafe",
            "text": "[Source]  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_99",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_100",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_101",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_102",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_103",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_104",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_105",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u128_unsafe",
            "text": "[Source]  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_106",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_107",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_108",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_109",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_110",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#compare",
            "text": "fun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_33",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_111",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Number/",
            "text": "Number\n\u00b6\n\n\n[Source]\n\n\ntype Number is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val)",
            "title": "type Number"
        },
        {
            "location": "/builtin-Number/#number",
            "text": "[Source]  type Number is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)",
            "title": "Number"
        },
        {
            "location": "/builtin-Number/#type-alias-for",
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val |  U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val |  F32  val |  F64  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-Int/",
            "text": "Int\n\u00b6\n\n\n[Source]\n\n\ntype Int is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val)",
            "title": "type Int"
        },
        {
            "location": "/builtin-Int/#int",
            "text": "[Source]  type Int is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)",
            "title": "Int"
        },
        {
            "location": "/builtin-Int/#type-alias-for",
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val |  U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-ReadSeq/",
            "text": "ReadSeq[A: A]\n\u00b6\n\n\n[Source]\n\n\nThe readable interface of a sequence.\n\n\ninterface box ReadSeq[A: A]\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the number of elements in the sequence.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns this->A, not A.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturns an iterator over the elements of the sequence. Note that this\niterates over this->A, not A.\n\n\nfun box values()\n: Iterator[this->A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[this->A] ref^",
            "title": "interface ReadSeq"
        },
        {
            "location": "/builtin-ReadSeq/#readseq91a-a93",
            "text": "[Source]  The readable interface of a sequence.  interface box ReadSeq[A: A]",
            "title": "ReadSeq[A: A]"
        },
        {
            "location": "/builtin-ReadSeq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ReadSeq/#size",
            "text": "[Source]  Returns the number of elements in the sequence.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/builtin-ReadSeq/#returns",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ReadSeq/#apply",
            "text": "[Source]  Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns this->A, not A.  fun box apply(\n  i: USize val)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-ReadSeq/#parameters",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ReadSeq/#returns_1",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-ReadSeq/#values",
            "text": "[Source]  Returns an iterator over the elements of the sequence. Note that this\niterates over this->A, not A.  fun box values()\n: Iterator[this->A] ref^",
            "title": "values"
        },
        {
            "location": "/builtin-ReadSeq/#returns_2",
            "text": "Iterator [this->A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ReadElement/",
            "text": "ReadElement[A: A]\n\u00b6\n\n\n[Source]\n\n\nUsed to show that a ReadSeq can return an element of a specific unmodified\ntype.\n\n\ninterface box ReadElement[A: A]\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  i: USize val)\n: A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA ?",
            "title": "interface ReadElement"
        },
        {
            "location": "/builtin-ReadElement/#readelement91a-a93",
            "text": "[Source]  Used to show that a ReadSeq can return an element of a specific unmodified\ntype.  interface box ReadElement[A: A]",
            "title": "ReadElement[A: A]"
        },
        {
            "location": "/builtin-ReadElement/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ReadElement/#apply",
            "text": "[Source]  fun box apply(\n  i: USize val)\n: A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-ReadElement/#parameters",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ReadElement/#returns",
            "text": "A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/",
            "text": "Pointer[A: A]\n\u00b6\n\n\n[Source]\n\n\nA Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.\n\n\nstruct ref Pointer[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nA null pointer.\n\n\nnew ref create()\n: Pointer[A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nConvert the pointer into an integer.\n\n\nfun tag usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nis_null\n\u00b6\n\n\n[Source]\n\n\nReturn true for a null pointer, false for anything else.\n\n\nfun tag is_null()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturn true if this address is that address.\n\n\nfun tag eq(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturn true if this address is less than that address.\n\n\nfun tag lt(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun tag ne(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun tag le(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun tag ge(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun tag gt(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nReturns a hash of the address.\n\n\nfun tag hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nReturns a 64-bit hash of the address.\n\n\nfun tag hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val",
            "title": "struct Pointer"
        },
        {
            "location": "/builtin-Pointer/#pointer91a-a93",
            "text": "[Source]  A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.  struct ref Pointer[A: A]",
            "title": "Pointer[A: A]"
        },
        {
            "location": "/builtin-Pointer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Pointer/#create",
            "text": "[Source]  A null pointer.  new ref create()\n: Pointer[A] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-Pointer/#returns",
            "text": "Pointer [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Pointer/#usize",
            "text": "[Source]  Convert the pointer into an integer.  fun tag usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-Pointer/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#is_null",
            "text": "[Source]  Return true for a null pointer, false for anything else.  fun tag is_null()\n: Bool val",
            "title": "is_null"
        },
        {
            "location": "/builtin-Pointer/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#eq",
            "text": "[Source]  Return true if this address is that address.  fun tag eq(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Pointer/#parameters",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#lt",
            "text": "[Source]  Return true if this address is less than that address.  fun tag lt(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-Pointer/#parameters_1",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#ne",
            "text": "[Source]  fun tag ne(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Pointer/#parameters_2",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#le",
            "text": "[Source]  fun tag le(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-Pointer/#parameters_3",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#ge",
            "text": "[Source]  fun tag ge(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-Pointer/#parameters_4",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#gt",
            "text": "[Source]  fun tag gt(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-Pointer/#parameters_5",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#hash",
            "text": "[Source]  Returns a hash of the address.  fun tag hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-Pointer/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#hash64",
            "text": "[Source]  Returns a 64-bit hash of the address.  fun tag hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-Pointer/#returns_10",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/",
            "text": "Platform\n\u00b6\n\n\n[Source]\n\n\nprimitive val Platform\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Platform val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPlatform\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nbsd\n\u00b6\n\n\n[Source]\n\n\nfun box bsd()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nfreebsd\n\u00b6\n\n\n[Source]\n\n\nfun box freebsd()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndragonfly\n\u00b6\n\n\n[Source]\n\n\nfun box dragonfly()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlinux\n\u00b6\n\n\n[Source]\n\n\nfun box linux()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nosx\n\u00b6\n\n\n[Source]\n\n\nfun box osx()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nposix\n\u00b6\n\n\n[Source]\n\n\nfun box posix()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwindows\n\u00b6\n\n\n[Source]\n\n\nfun box windows()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nx86\n\u00b6\n\n\n[Source]\n\n\nfun box x86()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\narm\n\u00b6\n\n\n[Source]\n\n\nfun box arm()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlp64\n\u00b6\n\n\n[Source]\n\n\nfun box lp64()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nllp64\n\u00b6\n\n\n[Source]\n\n\nfun box llp64()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nilp32\n\u00b6\n\n\n[Source]\n\n\nfun box ilp32()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nbigendian\n\u00b6\n\n\n[Source]\n\n\nfun box bigendian()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlittleendian\n\u00b6\n\n\n[Source]\n\n\nfun box littleendian()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnative128\n\u00b6\n\n\n[Source]\n\n\nfun box native128()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndebug\n\u00b6\n\n\n[Source]\n\n\nfun box debug()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Platform val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPlatform\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Platform val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPlatform\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Platform"
        },
        {
            "location": "/builtin-Platform/#platform",
            "text": "[Source]  primitive val Platform",
            "title": "Platform"
        },
        {
            "location": "/builtin-Platform/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Platform/#create",
            "text": "[Source]  new val create()\n: Platform val^",
            "title": "create"
        },
        {
            "location": "/builtin-Platform/#returns",
            "text": "Platform  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Platform/#bsd",
            "text": "[Source]  fun box bsd()\n: Bool val",
            "title": "bsd"
        },
        {
            "location": "/builtin-Platform/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#freebsd",
            "text": "[Source]  fun box freebsd()\n: Bool val",
            "title": "freebsd"
        },
        {
            "location": "/builtin-Platform/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#dragonfly",
            "text": "[Source]  fun box dragonfly()\n: Bool val",
            "title": "dragonfly"
        },
        {
            "location": "/builtin-Platform/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#linux",
            "text": "[Source]  fun box linux()\n: Bool val",
            "title": "linux"
        },
        {
            "location": "/builtin-Platform/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#osx",
            "text": "[Source]  fun box osx()\n: Bool val",
            "title": "osx"
        },
        {
            "location": "/builtin-Platform/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#posix",
            "text": "[Source]  fun box posix()\n: Bool val",
            "title": "posix"
        },
        {
            "location": "/builtin-Platform/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#windows",
            "text": "[Source]  fun box windows()\n: Bool val",
            "title": "windows"
        },
        {
            "location": "/builtin-Platform/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#x86",
            "text": "[Source]  fun box x86()\n: Bool val",
            "title": "x86"
        },
        {
            "location": "/builtin-Platform/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#arm",
            "text": "[Source]  fun box arm()\n: Bool val",
            "title": "arm"
        },
        {
            "location": "/builtin-Platform/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#lp64",
            "text": "[Source]  fun box lp64()\n: Bool val",
            "title": "lp64"
        },
        {
            "location": "/builtin-Platform/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#llp64",
            "text": "[Source]  fun box llp64()\n: Bool val",
            "title": "llp64"
        },
        {
            "location": "/builtin-Platform/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#ilp32",
            "text": "[Source]  fun box ilp32()\n: Bool val",
            "title": "ilp32"
        },
        {
            "location": "/builtin-Platform/#returns_12",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#bigendian",
            "text": "[Source]  fun box bigendian()\n: Bool val",
            "title": "bigendian"
        },
        {
            "location": "/builtin-Platform/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#littleendian",
            "text": "[Source]  fun box littleendian()\n: Bool val",
            "title": "littleendian"
        },
        {
            "location": "/builtin-Platform/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#native128",
            "text": "[Source]  fun box native128()\n: Bool val",
            "title": "native128"
        },
        {
            "location": "/builtin-Platform/#returns_15",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#debug",
            "text": "[Source]  fun box debug()\n: Bool val",
            "title": "debug"
        },
        {
            "location": "/builtin-Platform/#returns_16",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#eq",
            "text": "[Source]  fun box eq(\n  that: Platform val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Platform/#parameters",
            "text": "that:  Platform  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Platform/#returns_17",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#ne",
            "text": "[Source]  fun box ne(\n  that: Platform val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Platform/#parameters_1",
            "text": "that:  Platform  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Platform/#returns_18",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-None/",
            "text": "None\n\u00b6\n\n\n[Source]\n\n\nprimitive val None is\n  Stringable box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: None val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: None val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNone\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: None val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNone\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive None"
        },
        {
            "location": "/builtin-None/#none",
            "text": "[Source]  primitive val None is\n  Stringable box",
            "title": "None"
        },
        {
            "location": "/builtin-None/#implements",
            "text": "Stringable  box",
            "title": "Implements"
        },
        {
            "location": "/builtin-None/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-None/#create",
            "text": "[Source]  new val create()\n: None val^",
            "title": "create"
        },
        {
            "location": "/builtin-None/#returns",
            "text": "None  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-None/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-None/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-None/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-None/#eq",
            "text": "[Source]  fun box eq(\n  that: None val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-None/#parameters",
            "text": "that:  None  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-None/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-None/#ne",
            "text": "[Source]  fun box ne(\n  that: None val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-None/#parameters_1",
            "text": "that:  None  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-None/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-MaybePointer/",
            "text": "MaybePointer[A: A]\n\u00b6\n\n\n[Source]\n\n\nA MaybePointer[A] is used to encode a possibly-null type. It should\n\nonly\n be used for structs that need to be passed to and from the C FFI.\n\n\nAn optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).\n\n\nstruct ref MaybePointer[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nThis re-encodes the type of \nthat\n from A to MaybePointer[A], allowing\n\nthat\n to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for \nthat\n.\n\n\nnew ref create(\n  that: A)\n: MaybePointer[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMaybePointer\n[A] ref^\n\n\n\n\n\n\nnone\n\u00b6\n\n\n[Source]\n\n\nThis returns a null pointer typed as a MaybePointer[A].\n\n\nnew ref none()\n: MaybePointer[A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMaybePointer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nThis re-encodes the type of \nthis\n from MaybePointer[A] to A, allowing\n\nthis\n to be assigned to a field of variable of type A. If \nthis\n is a null\npointer, an error is raised.\n\n\nfun box apply()\n: this->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nis_none\n\u00b6\n\n\n[Source]\n\n\nReturns true if \nthis\n is null (ie apply would raise an error).\n\n\nfun box is_none()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "struct MaybePointer"
        },
        {
            "location": "/builtin-MaybePointer/#maybepointer91a-a93",
            "text": "[Source]  A MaybePointer[A] is used to encode a possibly-null type. It should only  be used for structs that need to be passed to and from the C FFI.  An optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).  struct ref MaybePointer[A: A]",
            "title": "MaybePointer[A: A]"
        },
        {
            "location": "/builtin-MaybePointer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-MaybePointer/#create",
            "text": "[Source]  This re-encodes the type of  that  from A to MaybePointer[A], allowing that  to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for  that .  new ref create(\n  that: A)\n: MaybePointer[A] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-MaybePointer/#parameters",
            "text": "that: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-MaybePointer/#returns",
            "text": "MaybePointer [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-MaybePointer/#none",
            "text": "[Source]  This returns a null pointer typed as a MaybePointer[A].  new ref none()\n: MaybePointer[A] ref^",
            "title": "none"
        },
        {
            "location": "/builtin-MaybePointer/#returns_1",
            "text": "MaybePointer [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-MaybePointer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-MaybePointer/#apply",
            "text": "[Source]  This re-encodes the type of  this  from MaybePointer[A] to A, allowing this  to be assigned to a field of variable of type A. If  this  is a null\npointer, an error is raised.  fun box apply()\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-MaybePointer/#returns_2",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-MaybePointer/#is_none",
            "text": "[Source]  Returns true if  this  is null (ie apply would raise an error).  fun box is_none()\n: Bool val",
            "title": "is_none"
        },
        {
            "location": "/builtin-MaybePointer/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Iterator/",
            "text": "Iterator[A: A]\n\u00b6\n\n\n[Source]\n\n\nIterators generate a series of values, one value at a time on each call to \nnext()\n.\n\n\nAn Iterator is considered exhausted, once its \nhas_next()\n method returns \nfalse\n.\nThus every call to \nnext()\n should be preceeded with a call to \nhas_next()\n to\ncheck for exhaustiveness.\n\n\nUsage\n\u00b6\n\n\nGiven the rules for using Iterators mentioned above, basic usage\nof an iterator looks like this:\n\n\nwhile iterator.has_next() do\n  let elem = iterator.next()?\n  // do something with elem\nend\n\n\n\n\nThe \nFor\n-loop provides a more concise way of iteration:\n\n\nfor elem in iterator do\n  // do something with elem\nend\n\n\n\n\nIteration using \nWhile\n is more flexible as it allows to continue iterating if a call to \nnext()\n errors.\nThe \nFor\n-loop does not allow this.\n\n\nImplementing Iterators\n\u00b6\n\n\nIterator implementations need to adhere to the following rules to be considered well-behaved:\n\n\n\n\nIf the Iterator is exhausted, \nhas_next()\n needs to return \nfalse\n.\n\n\nOnce \nhas_next()\n returned \nfalse\n it is not allowed to switch back to \ntrue\n\n  (Unless the Iterator supports rewinding)\n\n\nhas_next()\n does not change its returned value if \nnext()\n has not been called.\n  That means, that between two calls to \nnext()\n any number of calls to \nhas_next()\n\n  need to return the same value. (Unless the Iterator supports rewinding)\n\n\nA call to \nnext()\n erroring does not necessarily denote exhaustiveness.\n\n\n\n\nExample\n\u00b6\n\n\n// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\n  var _cur: USize\n  var _has_next: Bool = true\n\n  new ref create(from: USize) =>\n    _cur = from\n\n  fun ref has_next(): Bool =>\n    _has_next\n\n  fun ref next(): USize =>\n    let elem = _cur = _cur - 1\n    if elem == 0 then\n      _has_next = false\n    end\n    elem\n\n\n\n\ninterface ref Iterator[A: A]\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nReturns \ntrue\n if this Iterator is not yet exhausted.\nThat means that a value returned from a subsequent call to \nnext()\n\nis a valid part of this iterator.\n\n\nReturns \nfalse\n if this Iterator is exhausted.\n\n\nThe behavior of \nnext()\n after this function returned \nfalse\n is undefined,\nit might throw an error or return values which are not part of this Iterator.\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nGenerate the next value.\n\n\nThis might error, which does not necessarily mean that the Iterator is exhausted.\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA ?",
            "title": "interface Iterator"
        },
        {
            "location": "/builtin-Iterator/#iterator91a-a93",
            "text": "[Source]  Iterators generate a series of values, one value at a time on each call to  next() .  An Iterator is considered exhausted, once its  has_next()  method returns  false .\nThus every call to  next()  should be preceeded with a call to  has_next()  to\ncheck for exhaustiveness.",
            "title": "Iterator[A: A]"
        },
        {
            "location": "/builtin-Iterator/#usage",
            "text": "Given the rules for using Iterators mentioned above, basic usage\nof an iterator looks like this:  while iterator.has_next() do\n  let elem = iterator.next()?\n  // do something with elem\nend  The  For -loop provides a more concise way of iteration:  for elem in iterator do\n  // do something with elem\nend  Iteration using  While  is more flexible as it allows to continue iterating if a call to  next()  errors.\nThe  For -loop does not allow this.",
            "title": "Usage"
        },
        {
            "location": "/builtin-Iterator/#implementing-iterators",
            "text": "Iterator implementations need to adhere to the following rules to be considered well-behaved:   If the Iterator is exhausted,  has_next()  needs to return  false .  Once  has_next()  returned  false  it is not allowed to switch back to  true \n  (Unless the Iterator supports rewinding)  has_next()  does not change its returned value if  next()  has not been called.\n  That means, that between two calls to  next()  any number of calls to  has_next() \n  need to return the same value. (Unless the Iterator supports rewinding)  A call to  next()  erroring does not necessarily denote exhaustiveness.",
            "title": "Implementing Iterators"
        },
        {
            "location": "/builtin-Iterator/#example",
            "text": "// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\n  var _cur: USize\n  var _has_next: Bool = true\n\n  new ref create(from: USize) =>\n    _cur = from\n\n  fun ref has_next(): Bool =>\n    _has_next\n\n  fun ref next(): USize =>\n    let elem = _cur = _cur - 1\n    if elem == 0 then\n      _has_next = false\n    end\n    elem  interface ref Iterator[A: A]",
            "title": "Example"
        },
        {
            "location": "/builtin-Iterator/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Iterator/#has_next",
            "text": "[Source]  Returns  true  if this Iterator is not yet exhausted.\nThat means that a value returned from a subsequent call to  next() \nis a valid part of this iterator.  Returns  false  if this Iterator is exhausted.  The behavior of  next()  after this function returned  false  is undefined,\nit might throw an error or return values which are not part of this Iterator.  fun ref has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-Iterator/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Iterator/#next",
            "text": "[Source]  Generate the next value.  This might error, which does not necessarily mean that the Iterator is exhausted.  fun ref next()\n: A ?",
            "title": "next"
        },
        {
            "location": "/builtin-Iterator/#returns_1",
            "text": "A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/",
            "text": "F32\n\u00b6\n\n\n[Source]\n\n\nprimitive val F32 is\n  FloatingPoint[F32 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFloatingPoint\n[\nF32\n val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: F32 val = seq)\n: F32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nF32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\npi\n\u00b6\n\n\n[Source]\n\n\nnew val pi()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\ne\n\u00b6\n\n\n[Source]\n\n\nnew val e()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nfrom_bits\n\u00b6\n\n\n[Source]\n\n\nnew val from_bits(\n  i: U32 val)\n: F32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: F32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nMinimum negative value representable.\n\n\nnew val min_value()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nMaximum positive value representable.\n\n\nnew val max_value()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmin_normalised\n\u00b6\n\n\n[Source]\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nnew val min_normalised()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nepsilon\n\u00b6\n\n\n[Source]\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nnew val epsilon()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nbits\n\u00b6\n\n\n[Source]\n\n\nfun box bits()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nradix\n\u00b6\n\n\n[Source]\n\n\nExponent radix.\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\u00b6\n\n\n[Source]\n\n\nMantissa precision in bits.\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\u00b6\n\n\n[Source]\n\n\nMantissa precision in decimal digits.\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\u00b6\n\n\n[Source]\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\u00b6\n\n\n[Source]\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\u00b6\n\n\n[Source]\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\u00b6\n\n\n[Source]\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nceil\n\u00b6\n\n\n[Source]\n\n\nfun box ceil()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfloor\n\u00b6\n\n\n[Source]\n\n\nfun box floor()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nround\n\u00b6\n\n\n[Source]\n\n\nfun box round()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntrunc\n\u00b6\n\n\n[Source]\n\n\nfun box trunc()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfinite\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is +/-infinity\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is NaN.\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\u00b6\n\n\n[Source]\n\n\nfun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nF32\n val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfrexp\n\u00b6\n\n\n[Source]\n\n\nfun box frexp()\n: (F32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF32\n val , \nU32\n val)\n\n\n\n\n\n\nlog\n\u00b6\n\n\n[Source]\n\n\nfun box log()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlog2\n\u00b6\n\n\n[Source]\n\n\nfun box log2()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlog10\n\u00b6\n\n\n[Source]\n\n\nfun box log10()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlogb\n\u00b6\n\n\n[Source]\n\n\nfun box logb()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\npow\n\u00b6\n\n\n[Source]\n\n\nfun box pow(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\npowi\n\u00b6\n\n\n[Source]\n\n\nfun box powi(\n  y: I32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsqrt\n\u00b6\n\n\n[Source]\n\n\nfun box sqrt()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsqrt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncbrt\n\u00b6\n\n\n[Source]\n\n\nfun box cbrt()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nexp\n\u00b6\n\n\n[Source]\n\n\nfun box exp()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nexp2\n\u00b6\n\n\n[Source]\n\n\nfun box exp2()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncos\n\u00b6\n\n\n[Source]\n\n\nfun box cos()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsin\n\u00b6\n\n\n[Source]\n\n\nfun box sin()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntan\n\u00b6\n\n\n[Source]\n\n\nfun box tan()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncosh\n\u00b6\n\n\n[Source]\n\n\nfun box cosh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsinh\n\u00b6\n\n\n[Source]\n\n\nfun box sinh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntanh\n\u00b6\n\n\n[Source]\n\n\nfun box tanh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nacos\n\u00b6\n\n\n[Source]\n\n\nfun box acos()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nasin\n\u00b6\n\n\n[Source]\n\n\nfun box asin()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\natan\n\u00b6\n\n\n[Source]\n\n\nfun box atan()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\natan2\n\u00b6\n\n\n[Source]\n\n\nfun box atan2(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nacosh\n\u00b6\n\n\n[Source]\n\n\nfun box acosh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nasinh\n\u00b6\n\n\n[Source]\n\n\nfun box asinh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\natanh\n\u00b6\n\n\n[Source]\n\n\nfun box atanh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncopysign\n\u00b6\n\n\n[Source]\n\n\nfun box copysign(\n  sign: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsign: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box add_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box sub_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box mul_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box div_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box divmod_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF32\n val , \nF32\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box mod_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box neg_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\neq_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box eq_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ne_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box lt_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box le_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ge_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box gt_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: F32 val)\n: (F32 val , F32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF32\n val , \nF32\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive F32"
        },
        {
            "location": "/builtin-F32/#f32",
            "text": "[Source]  primitive val F32 is\n  FloatingPoint[F32 val] val",
            "title": "F32"
        },
        {
            "location": "/builtin-F32/#implements",
            "text": "FloatingPoint [ F32  val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-F32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-F32/#create",
            "text": "[Source]  new val create(\n  value: F32 val = seq)\n: F32 val^",
            "title": "create"
        },
        {
            "location": "/builtin-F32/#parameters",
            "text": "value:  F32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#pi",
            "text": "[Source]  new val pi()\n: F32 val^",
            "title": "pi"
        },
        {
            "location": "/builtin-F32/#returns_1",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#e",
            "text": "[Source]  new val e()\n: F32 val^",
            "title": "e"
        },
        {
            "location": "/builtin-F32/#returns_2",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#from_bits",
            "text": "[Source]  new val from_bits(\n  i: U32 val)\n: F32 val^",
            "title": "from_bits"
        },
        {
            "location": "/builtin-F32/#parameters_1",
            "text": "i:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_3",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: F32 val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-F32/#parameters_2",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_4",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min_value",
            "text": "[Source]  Minimum negative value representable.  new val min_value()\n: F32 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-F32/#returns_5",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#max_value",
            "text": "[Source]  Maximum positive value representable.  new val max_value()\n: F32 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-F32/#returns_6",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min_normalised",
            "text": "[Source]  Minimum positive value representable at full precision (ie a normalised\nnumber).  new val min_normalised()\n: F32 val^",
            "title": "min_normalised"
        },
        {
            "location": "/builtin-F32/#returns_7",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#epsilon",
            "text": "[Source]  Minimum positive value such that (1 + epsilon) != 1.  new val epsilon()\n: F32 val^",
            "title": "epsilon"
        },
        {
            "location": "/builtin-F32/#returns_8",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-F32/#bits",
            "text": "[Source]  fun box bits()\n: U32 val",
            "title": "bits"
        },
        {
            "location": "/builtin-F32/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#radix",
            "text": "[Source]  Exponent radix.  fun tag radix()\n: U8 val",
            "title": "radix"
        },
        {
            "location": "/builtin-F32/#returns_10",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#precision2",
            "text": "[Source]  Mantissa precision in bits.  fun tag precision2()\n: U8 val",
            "title": "precision2"
        },
        {
            "location": "/builtin-F32/#returns_11",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#precision10",
            "text": "[Source]  Mantissa precision in decimal digits.  fun tag precision10()\n: U8 val",
            "title": "precision10"
        },
        {
            "location": "/builtin-F32/#returns_12",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min_exp2",
            "text": "[Source]  Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp2()\n: I16 val",
            "title": "min_exp2"
        },
        {
            "location": "/builtin-F32/#returns_13",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min_exp10",
            "text": "[Source]  Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp10()\n: I16 val",
            "title": "min_exp10"
        },
        {
            "location": "/builtin-F32/#returns_14",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#max_exp2",
            "text": "[Source]  Maximum exponent value such that (2^exponent) - 1 is representable.  fun tag max_exp2()\n: I16 val",
            "title": "max_exp2"
        },
        {
            "location": "/builtin-F32/#returns_15",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#max_exp10",
            "text": "[Source]  Maximum exponent value such that (10^exponent) - 1 is representable.  fun tag max_exp10()\n: I16 val",
            "title": "max_exp10"
        },
        {
            "location": "/builtin-F32/#returns_16",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#abs",
            "text": "[Source]  fun box abs()\n: F32 val",
            "title": "abs"
        },
        {
            "location": "/builtin-F32/#returns_17",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ceil",
            "text": "[Source]  fun box ceil()\n: F32 val",
            "title": "ceil"
        },
        {
            "location": "/builtin-F32/#returns_18",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#floor",
            "text": "[Source]  fun box floor()\n: F32 val",
            "title": "floor"
        },
        {
            "location": "/builtin-F32/#returns_19",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#round",
            "text": "[Source]  fun box round()\n: F32 val",
            "title": "round"
        },
        {
            "location": "/builtin-F32/#returns_20",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#trunc",
            "text": "[Source]  fun box trunc()\n: F32 val",
            "title": "trunc"
        },
        {
            "location": "/builtin-F32/#returns_21",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min",
            "text": "[Source]  fun box min(\n  y: F32 val)\n: F32 val",
            "title": "min"
        },
        {
            "location": "/builtin-F32/#parameters_3",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_22",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#max",
            "text": "[Source]  fun box max(\n  y: F32 val)\n: F32 val",
            "title": "max"
        },
        {
            "location": "/builtin-F32/#parameters_4",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_23",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#finite",
            "text": "[Source]  Check whether this number is finite, ie not +/-infinity and not NaN.  fun box finite()\n: Bool val",
            "title": "finite"
        },
        {
            "location": "/builtin-F32/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#infinite",
            "text": "[Source]  Check whether this number is +/-infinity  fun box infinite()\n: Bool val",
            "title": "infinite"
        },
        {
            "location": "/builtin-F32/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#nan",
            "text": "[Source]  Check whether this number is NaN.  fun box nan()\n: Bool val",
            "title": "nan"
        },
        {
            "location": "/builtin-F32/#returns_26",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ldexp",
            "text": "[Source]  fun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val",
            "title": "ldexp"
        },
        {
            "location": "/builtin-F32/#parameters_5",
            "text": "x:  F32  val  exponent:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_27",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#frexp",
            "text": "[Source]  fun box frexp()\n: (F32 val , U32 val)",
            "title": "frexp"
        },
        {
            "location": "/builtin-F32/#returns_28",
            "text": "( F32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#log",
            "text": "[Source]  fun box log()\n: F32 val",
            "title": "log"
        },
        {
            "location": "/builtin-F32/#returns_29",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#log2",
            "text": "[Source]  fun box log2()\n: F32 val",
            "title": "log2"
        },
        {
            "location": "/builtin-F32/#returns_30",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#log10",
            "text": "[Source]  fun box log10()\n: F32 val",
            "title": "log10"
        },
        {
            "location": "/builtin-F32/#returns_31",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#logb",
            "text": "[Source]  fun box logb()\n: F32 val",
            "title": "logb"
        },
        {
            "location": "/builtin-F32/#returns_32",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#pow",
            "text": "[Source]  fun box pow(\n  y: F32 val)\n: F32 val",
            "title": "pow"
        },
        {
            "location": "/builtin-F32/#parameters_6",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_33",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#powi",
            "text": "[Source]  fun box powi(\n  y: I32 val)\n: F32 val",
            "title": "powi"
        },
        {
            "location": "/builtin-F32/#parameters_7",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_34",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sqrt",
            "text": "[Source]  fun box sqrt()\n: F32 val",
            "title": "sqrt"
        },
        {
            "location": "/builtin-F32/#returns_35",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sqrt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: F32 val",
            "title": "sqrt_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_36",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#cbrt",
            "text": "[Source]  fun box cbrt()\n: F32 val",
            "title": "cbrt"
        },
        {
            "location": "/builtin-F32/#returns_37",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#exp",
            "text": "[Source]  fun box exp()\n: F32 val",
            "title": "exp"
        },
        {
            "location": "/builtin-F32/#returns_38",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#exp2",
            "text": "[Source]  fun box exp2()\n: F32 val",
            "title": "exp2"
        },
        {
            "location": "/builtin-F32/#returns_39",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#cos",
            "text": "[Source]  fun box cos()\n: F32 val",
            "title": "cos"
        },
        {
            "location": "/builtin-F32/#returns_40",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sin",
            "text": "[Source]  fun box sin()\n: F32 val",
            "title": "sin"
        },
        {
            "location": "/builtin-F32/#returns_41",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#tan",
            "text": "[Source]  fun box tan()\n: F32 val",
            "title": "tan"
        },
        {
            "location": "/builtin-F32/#returns_42",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#cosh",
            "text": "[Source]  fun box cosh()\n: F32 val",
            "title": "cosh"
        },
        {
            "location": "/builtin-F32/#returns_43",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sinh",
            "text": "[Source]  fun box sinh()\n: F32 val",
            "title": "sinh"
        },
        {
            "location": "/builtin-F32/#returns_44",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#tanh",
            "text": "[Source]  fun box tanh()\n: F32 val",
            "title": "tanh"
        },
        {
            "location": "/builtin-F32/#returns_45",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#acos",
            "text": "[Source]  fun box acos()\n: F32 val",
            "title": "acos"
        },
        {
            "location": "/builtin-F32/#returns_46",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#asin",
            "text": "[Source]  fun box asin()\n: F32 val",
            "title": "asin"
        },
        {
            "location": "/builtin-F32/#returns_47",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#atan",
            "text": "[Source]  fun box atan()\n: F32 val",
            "title": "atan"
        },
        {
            "location": "/builtin-F32/#returns_48",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#atan2",
            "text": "[Source]  fun box atan2(\n  y: F32 val)\n: F32 val",
            "title": "atan2"
        },
        {
            "location": "/builtin-F32/#parameters_8",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_49",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#acosh",
            "text": "[Source]  fun box acosh()\n: F32 val",
            "title": "acosh"
        },
        {
            "location": "/builtin-F32/#returns_50",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#asinh",
            "text": "[Source]  fun box asinh()\n: F32 val",
            "title": "asinh"
        },
        {
            "location": "/builtin-F32/#returns_51",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#atanh",
            "text": "[Source]  fun box atanh()\n: F32 val",
            "title": "atanh"
        },
        {
            "location": "/builtin-F32/#returns_52",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#copysign",
            "text": "[Source]  fun box copysign(\n  sign: F32 val)\n: F32 val",
            "title": "copysign"
        },
        {
            "location": "/builtin-F32/#parameters_9",
            "text": "sign:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_53",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-F32/#returns_54",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-F32/#returns_55",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-F32/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-F32/#returns_57",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i128_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_58",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u128_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_59",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#add_unsafe",
            "text": "[Source]  fun box add_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_10",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_60",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sub_unsafe",
            "text": "[Source]  fun box sub_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_11",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_61",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#mul_unsafe",
            "text": "[Source]  fun box mul_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_12",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_62",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#div_unsafe",
            "text": "[Source]  fun box div_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_13",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#divmod_unsafe",
            "text": "[Source]  fun box divmod_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_14",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_64",
            "text": "( F32  val ,  F32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#mod_unsafe",
            "text": "[Source]  fun box mod_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_15",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_65",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#neg_unsafe",
            "text": "[Source]  fun box neg_unsafe()\n: F32 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#eq_unsafe",
            "text": "[Source]  fun box eq_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "eq_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_16",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_67",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ne_unsafe",
            "text": "[Source]  fun box ne_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "ne_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_17",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_68",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#lt_unsafe",
            "text": "[Source]  fun box lt_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "lt_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_18",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_69",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#le_unsafe",
            "text": "[Source]  fun box le_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "le_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_19",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_70",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ge_unsafe",
            "text": "[Source]  fun box ge_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "ge_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_20",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_71",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#gt_unsafe",
            "text": "[Source]  fun box gt_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "gt_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_21",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_72",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-F32/#returns_73",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#add",
            "text": "[Source]  fun box add(\n  y: F32 val)\n: F32 val",
            "title": "add"
        },
        {
            "location": "/builtin-F32/#parameters_22",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_74",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sub",
            "text": "[Source]  fun box sub(\n  y: F32 val)\n: F32 val",
            "title": "sub"
        },
        {
            "location": "/builtin-F32/#parameters_23",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_75",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#mul",
            "text": "[Source]  fun box mul(\n  y: F32 val)\n: F32 val",
            "title": "mul"
        },
        {
            "location": "/builtin-F32/#parameters_24",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_76",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#div",
            "text": "[Source]  fun box div(\n  y: F32 val)\n: F32 val",
            "title": "div"
        },
        {
            "location": "/builtin-F32/#parameters_25",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_77",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#divmod",
            "text": "[Source]  fun box divmod(\n  y: F32 val)\n: (F32 val , F32 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-F32/#parameters_26",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_78",
            "text": "( F32  val ,  F32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#mod",
            "text": "[Source]  fun box mod(\n  y: F32 val)\n: F32 val",
            "title": "mod"
        },
        {
            "location": "/builtin-F32/#parameters_27",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#neg",
            "text": "[Source]  fun box neg()\n: F32 val",
            "title": "neg"
        },
        {
            "location": "/builtin-F32/#returns_80",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#eq",
            "text": "[Source]  fun box eq(\n  y: F32 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-F32/#parameters_28",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_81",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ne",
            "text": "[Source]  fun box ne(\n  y: F32 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-F32/#parameters_29",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_82",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#lt",
            "text": "[Source]  fun box lt(\n  y: F32 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-F32/#parameters_30",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_83",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#le",
            "text": "[Source]  fun box le(\n  y: F32 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-F32/#parameters_31",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_84",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ge",
            "text": "[Source]  fun box ge(\n  y: F32 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-F32/#parameters_32",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_85",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#gt",
            "text": "[Source]  fun box gt(\n  y: F32 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-F32/#parameters_33",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_86",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-F32/#returns_87",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-F32/#returns_88",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-F32/#returns_89",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-F32/#returns_90",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-F32/#returns_91",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-F32/#returns_92",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-F32/#returns_93",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-F32/#returns_94",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-F32/#returns_95",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-F32/#returns_96",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-F32/#returns_97",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-F32/#returns_98",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#f32_1",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-F32/#returns_99",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-F32/#returns_100",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_101",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_102",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_103",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_104",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_105",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_106",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_107",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_108",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_109",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_110",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_111",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_112",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_113",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_114",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#compare",
            "text": "fun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-F32/#parameters_34",
            "text": "that:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_115",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/",
            "text": "F64\n\u00b6\n\n\n[Source]\n\n\nprimitive val F64 is\n  FloatingPoint[F64 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFloatingPoint\n[\nF64\n val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: F64 val = seq)\n: F64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nF64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\npi\n\u00b6\n\n\n[Source]\n\n\nnew val pi()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\ne\n\u00b6\n\n\n[Source]\n\n\nnew val e()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nfrom_bits\n\u00b6\n\n\n[Source]\n\n\nnew val from_bits(\n  i: U64 val)\n: F64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: F64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nMinimum negative value representable.\n\n\nnew val min_value()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nMaximum positive value representable.\n\n\nnew val max_value()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmin_normalised\n\u00b6\n\n\n[Source]\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nnew val min_normalised()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nepsilon\n\u00b6\n\n\n[Source]\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nnew val epsilon()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nbits\n\u00b6\n\n\n[Source]\n\n\nfun box bits()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nradix\n\u00b6\n\n\n[Source]\n\n\nExponent radix.\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\u00b6\n\n\n[Source]\n\n\nMantissa precision in bits.\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\u00b6\n\n\n[Source]\n\n\nMantissa precision in decimal digits.\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\u00b6\n\n\n[Source]\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\u00b6\n\n\n[Source]\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\u00b6\n\n\n[Source]\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\u00b6\n\n\n[Source]\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nceil\n\u00b6\n\n\n[Source]\n\n\nfun box ceil()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfloor\n\u00b6\n\n\n[Source]\n\n\nfun box floor()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nround\n\u00b6\n\n\n[Source]\n\n\nfun box round()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntrunc\n\u00b6\n\n\n[Source]\n\n\nfun box trunc()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfinite\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is +/-infinity\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is NaN.\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\u00b6\n\n\n[Source]\n\n\nfun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nF64\n val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfrexp\n\u00b6\n\n\n[Source]\n\n\nfun box frexp()\n: (F64 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF64\n val , \nU32\n val)\n\n\n\n\n\n\nlog\n\u00b6\n\n\n[Source]\n\n\nfun box log()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlog2\n\u00b6\n\n\n[Source]\n\n\nfun box log2()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlog10\n\u00b6\n\n\n[Source]\n\n\nfun box log10()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlogb\n\u00b6\n\n\n[Source]\n\n\nfun box logb()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\npow\n\u00b6\n\n\n[Source]\n\n\nfun box pow(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\npowi\n\u00b6\n\n\n[Source]\n\n\nfun box powi(\n  y: I32 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsqrt\n\u00b6\n\n\n[Source]\n\n\nfun box sqrt()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsqrt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncbrt\n\u00b6\n\n\n[Source]\n\n\nfun box cbrt()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nexp\n\u00b6\n\n\n[Source]\n\n\nfun box exp()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nexp2\n\u00b6\n\n\n[Source]\n\n\nfun box exp2()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncos\n\u00b6\n\n\n[Source]\n\n\nfun box cos()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsin\n\u00b6\n\n\n[Source]\n\n\nfun box sin()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntan\n\u00b6\n\n\n[Source]\n\n\nfun box tan()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncosh\n\u00b6\n\n\n[Source]\n\n\nfun box cosh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsinh\n\u00b6\n\n\n[Source]\n\n\nfun box sinh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntanh\n\u00b6\n\n\n[Source]\n\n\nfun box tanh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nacos\n\u00b6\n\n\n[Source]\n\n\nfun box acos()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nasin\n\u00b6\n\n\n[Source]\n\n\nfun box asin()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\natan\n\u00b6\n\n\n[Source]\n\n\nfun box atan()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\natan2\n\u00b6\n\n\n[Source]\n\n\nfun box atan2(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nacosh\n\u00b6\n\n\n[Source]\n\n\nfun box acosh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nasinh\n\u00b6\n\n\n[Source]\n\n\nfun box asinh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\natanh\n\u00b6\n\n\n[Source]\n\n\nfun box atanh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncopysign\n\u00b6\n\n\n[Source]\n\n\nfun box copysign(\n  sign: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsign: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box add_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box sub_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box mul_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box div_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box divmod_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF64\n val , \nF64\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box mod_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box neg_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\neq_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box eq_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ne_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box lt_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box le_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ge_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box gt_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: F64 val)\n: (F64 val , F64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF64\n val , \nF64\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive F64"
        },
        {
            "location": "/builtin-F64/#f64",
            "text": "[Source]  primitive val F64 is\n  FloatingPoint[F64 val] val",
            "title": "F64"
        },
        {
            "location": "/builtin-F64/#implements",
            "text": "FloatingPoint [ F64  val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-F64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-F64/#create",
            "text": "[Source]  new val create(\n  value: F64 val = seq)\n: F64 val^",
            "title": "create"
        },
        {
            "location": "/builtin-F64/#parameters",
            "text": "value:  F64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#pi",
            "text": "[Source]  new val pi()\n: F64 val^",
            "title": "pi"
        },
        {
            "location": "/builtin-F64/#returns_1",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#e",
            "text": "[Source]  new val e()\n: F64 val^",
            "title": "e"
        },
        {
            "location": "/builtin-F64/#returns_2",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#from_bits",
            "text": "[Source]  new val from_bits(\n  i: U64 val)\n: F64 val^",
            "title": "from_bits"
        },
        {
            "location": "/builtin-F64/#parameters_1",
            "text": "i:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_3",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: F64 val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-F64/#parameters_2",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_4",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min_value",
            "text": "[Source]  Minimum negative value representable.  new val min_value()\n: F64 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-F64/#returns_5",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#max_value",
            "text": "[Source]  Maximum positive value representable.  new val max_value()\n: F64 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-F64/#returns_6",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min_normalised",
            "text": "[Source]  Minimum positive value representable at full precision (ie a normalised\nnumber).  new val min_normalised()\n: F64 val^",
            "title": "min_normalised"
        },
        {
            "location": "/builtin-F64/#returns_7",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#epsilon",
            "text": "[Source]  Minimum positive value such that (1 + epsilon) != 1.  new val epsilon()\n: F64 val^",
            "title": "epsilon"
        },
        {
            "location": "/builtin-F64/#returns_8",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-F64/#bits",
            "text": "[Source]  fun box bits()\n: U64 val",
            "title": "bits"
        },
        {
            "location": "/builtin-F64/#returns_9",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#radix",
            "text": "[Source]  Exponent radix.  fun tag radix()\n: U8 val",
            "title": "radix"
        },
        {
            "location": "/builtin-F64/#returns_10",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#precision2",
            "text": "[Source]  Mantissa precision in bits.  fun tag precision2()\n: U8 val",
            "title": "precision2"
        },
        {
            "location": "/builtin-F64/#returns_11",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#precision10",
            "text": "[Source]  Mantissa precision in decimal digits.  fun tag precision10()\n: U8 val",
            "title": "precision10"
        },
        {
            "location": "/builtin-F64/#returns_12",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min_exp2",
            "text": "[Source]  Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp2()\n: I16 val",
            "title": "min_exp2"
        },
        {
            "location": "/builtin-F64/#returns_13",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min_exp10",
            "text": "[Source]  Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp10()\n: I16 val",
            "title": "min_exp10"
        },
        {
            "location": "/builtin-F64/#returns_14",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#max_exp2",
            "text": "[Source]  Maximum exponent value such that (2^exponent) - 1 is representable.  fun tag max_exp2()\n: I16 val",
            "title": "max_exp2"
        },
        {
            "location": "/builtin-F64/#returns_15",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#max_exp10",
            "text": "[Source]  Maximum exponent value such that (10^exponent) - 1 is representable.  fun tag max_exp10()\n: I16 val",
            "title": "max_exp10"
        },
        {
            "location": "/builtin-F64/#returns_16",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#abs",
            "text": "[Source]  fun box abs()\n: F64 val",
            "title": "abs"
        },
        {
            "location": "/builtin-F64/#returns_17",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ceil",
            "text": "[Source]  fun box ceil()\n: F64 val",
            "title": "ceil"
        },
        {
            "location": "/builtin-F64/#returns_18",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#floor",
            "text": "[Source]  fun box floor()\n: F64 val",
            "title": "floor"
        },
        {
            "location": "/builtin-F64/#returns_19",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#round",
            "text": "[Source]  fun box round()\n: F64 val",
            "title": "round"
        },
        {
            "location": "/builtin-F64/#returns_20",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#trunc",
            "text": "[Source]  fun box trunc()\n: F64 val",
            "title": "trunc"
        },
        {
            "location": "/builtin-F64/#returns_21",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min",
            "text": "[Source]  fun box min(\n  y: F64 val)\n: F64 val",
            "title": "min"
        },
        {
            "location": "/builtin-F64/#parameters_3",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_22",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#max",
            "text": "[Source]  fun box max(\n  y: F64 val)\n: F64 val",
            "title": "max"
        },
        {
            "location": "/builtin-F64/#parameters_4",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_23",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#finite",
            "text": "[Source]  Check whether this number is finite, ie not +/-infinity and not NaN.  fun box finite()\n: Bool val",
            "title": "finite"
        },
        {
            "location": "/builtin-F64/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#infinite",
            "text": "[Source]  Check whether this number is +/-infinity  fun box infinite()\n: Bool val",
            "title": "infinite"
        },
        {
            "location": "/builtin-F64/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#nan",
            "text": "[Source]  Check whether this number is NaN.  fun box nan()\n: Bool val",
            "title": "nan"
        },
        {
            "location": "/builtin-F64/#returns_26",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ldexp",
            "text": "[Source]  fun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val",
            "title": "ldexp"
        },
        {
            "location": "/builtin-F64/#parameters_5",
            "text": "x:  F64  val  exponent:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_27",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#frexp",
            "text": "[Source]  fun box frexp()\n: (F64 val , U32 val)",
            "title": "frexp"
        },
        {
            "location": "/builtin-F64/#returns_28",
            "text": "( F64  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#log",
            "text": "[Source]  fun box log()\n: F64 val",
            "title": "log"
        },
        {
            "location": "/builtin-F64/#returns_29",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#log2",
            "text": "[Source]  fun box log2()\n: F64 val",
            "title": "log2"
        },
        {
            "location": "/builtin-F64/#returns_30",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#log10",
            "text": "[Source]  fun box log10()\n: F64 val",
            "title": "log10"
        },
        {
            "location": "/builtin-F64/#returns_31",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#logb",
            "text": "[Source]  fun box logb()\n: F64 val",
            "title": "logb"
        },
        {
            "location": "/builtin-F64/#returns_32",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#pow",
            "text": "[Source]  fun box pow(\n  y: F64 val)\n: F64 val",
            "title": "pow"
        },
        {
            "location": "/builtin-F64/#parameters_6",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_33",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#powi",
            "text": "[Source]  fun box powi(\n  y: I32 val)\n: F64 val",
            "title": "powi"
        },
        {
            "location": "/builtin-F64/#parameters_7",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_34",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sqrt",
            "text": "[Source]  fun box sqrt()\n: F64 val",
            "title": "sqrt"
        },
        {
            "location": "/builtin-F64/#returns_35",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sqrt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: F64 val",
            "title": "sqrt_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_36",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#cbrt",
            "text": "[Source]  fun box cbrt()\n: F64 val",
            "title": "cbrt"
        },
        {
            "location": "/builtin-F64/#returns_37",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#exp",
            "text": "[Source]  fun box exp()\n: F64 val",
            "title": "exp"
        },
        {
            "location": "/builtin-F64/#returns_38",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#exp2",
            "text": "[Source]  fun box exp2()\n: F64 val",
            "title": "exp2"
        },
        {
            "location": "/builtin-F64/#returns_39",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#cos",
            "text": "[Source]  fun box cos()\n: F64 val",
            "title": "cos"
        },
        {
            "location": "/builtin-F64/#returns_40",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sin",
            "text": "[Source]  fun box sin()\n: F64 val",
            "title": "sin"
        },
        {
            "location": "/builtin-F64/#returns_41",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#tan",
            "text": "[Source]  fun box tan()\n: F64 val",
            "title": "tan"
        },
        {
            "location": "/builtin-F64/#returns_42",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#cosh",
            "text": "[Source]  fun box cosh()\n: F64 val",
            "title": "cosh"
        },
        {
            "location": "/builtin-F64/#returns_43",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sinh",
            "text": "[Source]  fun box sinh()\n: F64 val",
            "title": "sinh"
        },
        {
            "location": "/builtin-F64/#returns_44",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#tanh",
            "text": "[Source]  fun box tanh()\n: F64 val",
            "title": "tanh"
        },
        {
            "location": "/builtin-F64/#returns_45",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#acos",
            "text": "[Source]  fun box acos()\n: F64 val",
            "title": "acos"
        },
        {
            "location": "/builtin-F64/#returns_46",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#asin",
            "text": "[Source]  fun box asin()\n: F64 val",
            "title": "asin"
        },
        {
            "location": "/builtin-F64/#returns_47",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#atan",
            "text": "[Source]  fun box atan()\n: F64 val",
            "title": "atan"
        },
        {
            "location": "/builtin-F64/#returns_48",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#atan2",
            "text": "[Source]  fun box atan2(\n  y: F64 val)\n: F64 val",
            "title": "atan2"
        },
        {
            "location": "/builtin-F64/#parameters_8",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_49",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#acosh",
            "text": "[Source]  fun box acosh()\n: F64 val",
            "title": "acosh"
        },
        {
            "location": "/builtin-F64/#returns_50",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#asinh",
            "text": "[Source]  fun box asinh()\n: F64 val",
            "title": "asinh"
        },
        {
            "location": "/builtin-F64/#returns_51",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#atanh",
            "text": "[Source]  fun box atanh()\n: F64 val",
            "title": "atanh"
        },
        {
            "location": "/builtin-F64/#returns_52",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#copysign",
            "text": "[Source]  fun box copysign(\n  sign: F64 val)\n: F64 val",
            "title": "copysign"
        },
        {
            "location": "/builtin-F64/#parameters_9",
            "text": "sign:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_53",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-F64/#returns_54",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-F64/#returns_55",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-F64/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-F64/#returns_57",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i128_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_58",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u128_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_59",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#add_unsafe",
            "text": "[Source]  fun box add_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_10",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_60",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sub_unsafe",
            "text": "[Source]  fun box sub_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_11",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_61",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#mul_unsafe",
            "text": "[Source]  fun box mul_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_12",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_62",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#div_unsafe",
            "text": "[Source]  fun box div_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_13",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_63",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#divmod_unsafe",
            "text": "[Source]  fun box divmod_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_14",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_64",
            "text": "( F64  val ,  F64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#mod_unsafe",
            "text": "[Source]  fun box mod_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_15",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_65",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#neg_unsafe",
            "text": "[Source]  fun box neg_unsafe()\n: F64 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_66",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#eq_unsafe",
            "text": "[Source]  fun box eq_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "eq_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_16",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_67",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ne_unsafe",
            "text": "[Source]  fun box ne_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "ne_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_17",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_68",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#lt_unsafe",
            "text": "[Source]  fun box lt_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "lt_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_18",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_69",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#le_unsafe",
            "text": "[Source]  fun box le_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "le_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_19",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_70",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ge_unsafe",
            "text": "[Source]  fun box ge_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "ge_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_20",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_71",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#gt_unsafe",
            "text": "[Source]  fun box gt_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "gt_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_21",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_72",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-F64/#returns_73",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#add",
            "text": "[Source]  fun box add(\n  y: F64 val)\n: F64 val",
            "title": "add"
        },
        {
            "location": "/builtin-F64/#parameters_22",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_74",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sub",
            "text": "[Source]  fun box sub(\n  y: F64 val)\n: F64 val",
            "title": "sub"
        },
        {
            "location": "/builtin-F64/#parameters_23",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_75",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#mul",
            "text": "[Source]  fun box mul(\n  y: F64 val)\n: F64 val",
            "title": "mul"
        },
        {
            "location": "/builtin-F64/#parameters_24",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_76",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#div",
            "text": "[Source]  fun box div(\n  y: F64 val)\n: F64 val",
            "title": "div"
        },
        {
            "location": "/builtin-F64/#parameters_25",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_77",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#divmod",
            "text": "[Source]  fun box divmod(\n  y: F64 val)\n: (F64 val , F64 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-F64/#parameters_26",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_78",
            "text": "( F64  val ,  F64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#mod",
            "text": "[Source]  fun box mod(\n  y: F64 val)\n: F64 val",
            "title": "mod"
        },
        {
            "location": "/builtin-F64/#parameters_27",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_79",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#neg",
            "text": "[Source]  fun box neg()\n: F64 val",
            "title": "neg"
        },
        {
            "location": "/builtin-F64/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#eq",
            "text": "[Source]  fun box eq(\n  y: F64 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-F64/#parameters_28",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_81",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ne",
            "text": "[Source]  fun box ne(\n  y: F64 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-F64/#parameters_29",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_82",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#lt",
            "text": "[Source]  fun box lt(\n  y: F64 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-F64/#parameters_30",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_83",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#le",
            "text": "[Source]  fun box le(\n  y: F64 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-F64/#parameters_31",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_84",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ge",
            "text": "[Source]  fun box ge(\n  y: F64 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-F64/#parameters_32",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_85",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#gt",
            "text": "[Source]  fun box gt(\n  y: F64 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-F64/#parameters_33",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_86",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-F64/#returns_87",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-F64/#returns_88",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-F64/#returns_89",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-F64/#returns_90",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-F64/#returns_91",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-F64/#returns_92",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-F64/#returns_93",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-F64/#returns_94",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-F64/#returns_95",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-F64/#returns_96",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-F64/#returns_97",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-F64/#returns_98",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-F64/#returns_99",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#f64_1",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-F64/#returns_100",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_101",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_102",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_103",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_104",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_105",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_106",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_107",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_108",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_109",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_110",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_111",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_112",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_113",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_114",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#compare",
            "text": "fun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-F64/#parameters_34",
            "text": "that:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_115",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Float/",
            "text": "Float\n\u00b6\n\n\n[Source]\n\n\ntype Float is\n  (F32 val | F64 val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nF32\n val | \nF64\n val)",
            "title": "type Float"
        },
        {
            "location": "/builtin-Float/#float",
            "text": "[Source]  type Float is\n  (F32 val | F64 val)",
            "title": "Float"
        },
        {
            "location": "/builtin-Float/#type-alias-for",
            "text": "( F32  val |  F64  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-Env/",
            "text": "Env\n\u00b6\n\n\n[Source]\n\n\nAn environment holds the command line and other values injected into the\nprogram by default by the runtime.\n\n\nclass val Env\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nBuild an artificial environment. A root capability may be supplied.\n\n\nnew val create(\n  root': (AmbientAuth val | None val),\n  input': InputStream tag,\n  out': OutStream tag,\n  err': OutStream tag,\n  args': Array[String val] val,\n  vars': Array[String val] val,\n  exitcode': {(I32)} val)\n: Env val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nroot': (\nAmbientAuth\n val | \nNone\n val)\n\n\ninput': \nInputStream\n tag\n\n\nout': \nOutStream\n tag\n\n\nerr': \nOutStream\n tag\n\n\nargs': \nArray\n[\nString\n val] val\n\n\nvars': \nArray\n[\nString\n val] val\n\n\nexitcode': {(I32)} val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nEnv\n val^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet root: (\nAmbientAuth\n val | \nNone\n val)\n\u00b6\n\n\n[Source]\n\n\nThe root capability.\n\n\nCan be \nNone\n for artificially constructed \nEnv\n instances.\n\n\n\n\nlet input: \nInputStream\n tag\n\u00b6\n\n\n[Source]\n\n\nStdin represented as an actor.\n\n\n\n\nlet out: \nOutStream\n tag\n\u00b6\n\n\n[Source]\n\n\nStdout\n\n\n\n\nlet err: \nOutStream\n tag\n\u00b6\n\n\n[Source]\n\n\nStderr\n\n\n\n\nlet args: \nArray\n[\nString\n val] val\n\u00b6\n\n\n[Source]\n\n\nThe command line used to start the program.\n\n\n\n\nlet vars: \nArray\n[\nString\n val] val\n\u00b6\n\n\n[Source]\n\n\nThe program's environment variables.\n\n\n\n\nlet exitcode: {(I32)} val\n\u00b6\n\n\n[Source]\n\n\nSets the environment's exit code. The exit code of the root environment will\nbe the exit code of the application, which defaults to 0.",
            "title": "class Env"
        },
        {
            "location": "/builtin-Env/#env",
            "text": "[Source]  An environment holds the command line and other values injected into the\nprogram by default by the runtime.  class val Env",
            "title": "Env"
        },
        {
            "location": "/builtin-Env/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Env/#create",
            "text": "[Source]  Build an artificial environment. A root capability may be supplied.  new val create(\n  root': (AmbientAuth val | None val),\n  input': InputStream tag,\n  out': OutStream tag,\n  err': OutStream tag,\n  args': Array[String val] val,\n  vars': Array[String val] val,\n  exitcode': {(I32)} val)\n: Env val^",
            "title": "create"
        },
        {
            "location": "/builtin-Env/#parameters",
            "text": "root': ( AmbientAuth  val |  None  val)  input':  InputStream  tag  out':  OutStream  tag  err':  OutStream  tag  args':  Array [ String  val] val  vars':  Array [ String  val] val  exitcode': {(I32)} val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Env/#returns",
            "text": "Env  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Env/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/builtin-Env/#let-root-ambientauth-val-none-val",
            "text": "[Source]  The root capability.  Can be  None  for artificially constructed  Env  instances.",
            "title": "let root: (AmbientAuth val | None val)"
        },
        {
            "location": "/builtin-Env/#let-input-inputstream-tag",
            "text": "[Source]  Stdin represented as an actor.",
            "title": "let input: InputStream tag"
        },
        {
            "location": "/builtin-Env/#let-out-outstream-tag",
            "text": "[Source]  Stdout",
            "title": "let out: OutStream tag"
        },
        {
            "location": "/builtin-Env/#let-err-outstream-tag",
            "text": "[Source]  Stderr",
            "title": "let err: OutStream tag"
        },
        {
            "location": "/builtin-Env/#let-args-array91string-val93-val",
            "text": "[Source]  The command line used to start the program.",
            "title": "let args: Array[String val] val"
        },
        {
            "location": "/builtin-Env/#let-vars-array91string-val93-val",
            "text": "[Source]  The program's environment variables.",
            "title": "let vars: Array[String val] val"
        },
        {
            "location": "/builtin-Env/#let-exitcode-i32-val",
            "text": "[Source]  Sets the environment's exit code. The exit code of the root environment will\nbe the exit code of the application, which defaults to 0.",
            "title": "let exitcode: {(I32)} val"
        },
        {
            "location": "/builtin-DoNotOptimise/",
            "text": "DoNotOptimise\n\u00b6\n\n\n[Source]\n\n\nContains functions preventing some compiler optimisations, namely dead code\nremoval. This is useful for benchmarking purposes.\n\n\nprimitive val DoNotOptimise\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: DoNotOptimise val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDoNotOptimise\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply[A: A]\n\u00b6\n\n\n[Source]\n\n\nPrevent the compiler from optimising out obj and any computation it is\nderived from. This doesn't prevent constant propagation.\n\n\nfun box apply[A: A](\n  obj: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nobj: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nobserve\n\u00b6\n\n\n[Source]\n\n\nPrevent the compiler from optimising out writes to an object marked by\nthe apply function.\n\n\nfun box observe()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DoNotOptimise val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDoNotOptimise\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DoNotOptimise val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDoNotOptimise\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DoNotOptimise"
        },
        {
            "location": "/builtin-DoNotOptimise/#donotoptimise",
            "text": "[Source]  Contains functions preventing some compiler optimisations, namely dead code\nremoval. This is useful for benchmarking purposes.  primitive val DoNotOptimise",
            "title": "DoNotOptimise"
        },
        {
            "location": "/builtin-DoNotOptimise/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-DoNotOptimise/#create",
            "text": "[Source]  new val create()\n: DoNotOptimise val^",
            "title": "create"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns",
            "text": "DoNotOptimise  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-DoNotOptimise/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-DoNotOptimise/#apply91a-a93",
            "text": "[Source]  Prevent the compiler from optimising out obj and any computation it is\nderived from. This doesn't prevent constant propagation.  fun box apply[A: A](\n  obj: A)\n: None val",
            "title": "apply[A: A]"
        },
        {
            "location": "/builtin-DoNotOptimise/#parameters",
            "text": "obj: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-DoNotOptimise/#observe",
            "text": "[Source]  Prevent the compiler from optimising out writes to an object marked by\nthe apply function.  fun box observe()\n: None val",
            "title": "observe"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-DoNotOptimise/#eq",
            "text": "[Source]  fun box eq(\n  that: DoNotOptimise val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-DoNotOptimise/#parameters_1",
            "text": "that:  DoNotOptimise  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-DoNotOptimise/#ne",
            "text": "[Source]  fun box ne(\n  that: DoNotOptimise val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-DoNotOptimise/#parameters_2",
            "text": "that:  DoNotOptimise  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Less/",
            "text": "Less\n\u00b6\n\n\n[Source]\n\n\nprimitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Less val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nLess\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Less"
        },
        {
            "location": "/builtin-Less/#less",
            "text": "[Source]  primitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref",
            "title": "Less"
        },
        {
            "location": "/builtin-Less/#implements",
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Less/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Less/#create",
            "text": "[Source]  new val create()\n: Less val^",
            "title": "create"
        },
        {
            "location": "/builtin-Less/#returns",
            "text": "Less  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Less/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Less/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Less/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Less/#eq",
            "text": "[Source]  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Less/#parameters",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Less/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Less/#ne",
            "text": "[Source]  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Less/#parameters_1",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Less/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equal/",
            "text": "Equal\n\u00b6\n\n\n[Source]\n\n\nprimitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Equal val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nEqual\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Equal"
        },
        {
            "location": "/builtin-Equal/#equal",
            "text": "[Source]  primitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref",
            "title": "Equal"
        },
        {
            "location": "/builtin-Equal/#implements",
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Equal/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Equal/#create",
            "text": "[Source]  new val create()\n: Equal val^",
            "title": "create"
        },
        {
            "location": "/builtin-Equal/#returns",
            "text": "Equal  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equal/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Equal/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Equal/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equal/#eq",
            "text": "[Source]  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Equal/#parameters",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Equal/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equal/#ne",
            "text": "[Source]  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Equal/#parameters_1",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Equal/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Greater/",
            "text": "Greater\n\u00b6\n\n\n[Source]\n\n\nprimitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Greater val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nGreater\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Greater"
        },
        {
            "location": "/builtin-Greater/#greater",
            "text": "[Source]  primitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref",
            "title": "Greater"
        },
        {
            "location": "/builtin-Greater/#implements",
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Greater/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Greater/#create",
            "text": "[Source]  new val create()\n: Greater val^",
            "title": "create"
        },
        {
            "location": "/builtin-Greater/#returns",
            "text": "Greater  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Greater/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Greater/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Greater/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Greater/#eq",
            "text": "[Source]  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Greater/#parameters",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Greater/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Greater/#ne",
            "text": "[Source]  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Greater/#parameters_1",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Greater/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Compare/",
            "text": "Compare\n\u00b6\n\n\n[Source]\n\n\ntype Compare is\n  (Less val | Equal val | Greater val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "type Compare"
        },
        {
            "location": "/builtin-Compare/#compare",
            "text": "[Source]  type Compare is\n  (Less val | Equal val | Greater val)",
            "title": "Compare"
        },
        {
            "location": "/builtin-Compare/#type-alias-for",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-HasEq/",
            "text": "HasEq[A: A]\n\u00b6\n\n\n[Source]\n\n\ninterface ref HasEq[A: A]\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface HasEq"
        },
        {
            "location": "/builtin-HasEq/#haseq91a-a93",
            "text": "[Source]  interface ref HasEq[A: A]",
            "title": "HasEq[A: A]"
        },
        {
            "location": "/builtin-HasEq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-HasEq/#eq",
            "text": "[Source]  fun box eq(\n  that: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-HasEq/#parameters",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-HasEq/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equatable/",
            "text": "Equatable[A: \nEquatable\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\ninterface ref Equatable[A: Equatable[A] #read]\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface Equatable"
        },
        {
            "location": "/builtin-Equatable/#equatable91a-equatable91a93-read93",
            "text": "[Source]  interface ref Equatable[A: Equatable[A] #read]",
            "title": "Equatable[A: Equatable[A] #read]"
        },
        {
            "location": "/builtin-Equatable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Equatable/#eq",
            "text": "[Source]  fun box eq(\n  that: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Equatable/#parameters",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Equatable/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equatable/#ne",
            "text": "[Source]  fun box ne(\n  that: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Equatable/#parameters_1",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Equatable/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/",
            "text": "Comparable[A: \nComparable\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\ninterface ref Comparable[A: Comparable[A] #read] is\n  Equatable[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[A] ref\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nfun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface Comparable"
        },
        {
            "location": "/builtin-Comparable/#comparable91a-comparable91a93-read93",
            "text": "[Source]  interface ref Comparable[A: Comparable[A] #read] is\n  Equatable[A] ref",
            "title": "Comparable[A: Comparable[A] #read]"
        },
        {
            "location": "/builtin-Comparable/#implements",
            "text": "Equatable [A] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Comparable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Comparable/#lt",
            "text": "[Source]  fun box lt(\n  that: box->A)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-Comparable/#parameters",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#le",
            "text": "[Source]  fun box le(\n  that: box->A)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-Comparable/#parameters_1",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#ge",
            "text": "[Source]  fun box ge(\n  that: box->A)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-Comparable/#parameters_2",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#gt",
            "text": "[Source]  fun box gt(\n  that: box->A)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-Comparable/#parameters_3",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#compare",
            "text": "[Source]  fun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-Comparable/#parameters_4",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_4",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#eq",
            "text": "[Source]  fun box eq(\n  that: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Comparable/#parameters_5",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#ne",
            "text": "[Source]  fun box ne(\n  that: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Comparable/#parameters_6",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/",
            "text": "Bool\n\u00b6\n\n\n[Source]\n\n\nprimitive val Bool is\n  Stringable box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  from: Bool val)\n: Bool val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\n[Source]\n\n\nfun box op_and(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\n[Source]\n\n\nfun box op_or(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\n[Source]\n\n\nfun box op_xor(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\n[Source]\n\n\nfun box op_not()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^",
            "title": "primitive Bool"
        },
        {
            "location": "/builtin-Bool/#bool",
            "text": "[Source]  primitive val Bool is\n  Stringable box",
            "title": "Bool"
        },
        {
            "location": "/builtin-Bool/#implements",
            "text": "Stringable  box",
            "title": "Implements"
        },
        {
            "location": "/builtin-Bool/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Bool/#create",
            "text": "[Source]  new val create(\n  from: Bool val)\n: Bool val^",
            "title": "create"
        },
        {
            "location": "/builtin-Bool/#parameters",
            "text": "from:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns",
            "text": "Bool  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Bool/#eq",
            "text": "[Source]  fun box eq(\n  y: Bool val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Bool/#parameters_1",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#ne",
            "text": "[Source]  fun box ne(\n  y: Bool val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Bool/#parameters_2",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#op_and",
            "text": "[Source]  fun box op_and(\n  y: Bool val)\n: Bool val",
            "title": "op_and"
        },
        {
            "location": "/builtin-Bool/#parameters_3",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#op_or",
            "text": "[Source]  fun box op_or(\n  y: Bool val)\n: Bool val",
            "title": "op_or"
        },
        {
            "location": "/builtin-Bool/#parameters_4",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#op_xor",
            "text": "[Source]  fun box op_xor(\n  y: Bool val)\n: Bool val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-Bool/#parameters_5",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#op_not",
            "text": "[Source]  fun box op_not()\n: Bool val",
            "title": "op_not"
        },
        {
            "location": "/builtin-Bool/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Bool/#returns_7",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEventID/",
            "text": "AsioEventID\n\u00b6\n\n\n[Source]\n\n\ntype AsioEventID is\n  Pointer[AsioEvent val] tag\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nPointer\n[\nAsioEvent\n val] tag",
            "title": "type AsioEventID"
        },
        {
            "location": "/builtin-AsioEventID/#asioeventid",
            "text": "[Source]  type AsioEventID is\n  Pointer[AsioEvent val] tag",
            "title": "AsioEventID"
        },
        {
            "location": "/builtin-AsioEventID/#type-alias-for",
            "text": "Pointer [ AsioEvent  val] tag",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-AsioEventNotify/",
            "text": "AsioEventNotify\n\u00b6\n\n\n[Source]\n\n\ninterface tag AsioEventNotify",
            "title": "interface AsioEventNotify"
        },
        {
            "location": "/builtin-AsioEventNotify/#asioeventnotify",
            "text": "[Source]  interface tag AsioEventNotify",
            "title": "AsioEventNotify"
        },
        {
            "location": "/builtin-AsioEvent/",
            "text": "AsioEvent\n\u00b6\n\n\n[Source]\n\n\nFunctions for asynchronous event notification.\n\n\nprimitive val AsioEvent\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: AsioEvent val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAsioEvent\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnone\n\u00b6\n\n\n[Source]\n\n\nAn empty event.\n\n\nfun box none()\n: Pointer[AsioEvent val] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[\nAsioEvent\n val] tag\n\n\n\n\n\n\nreadable\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags contain the readable flag.\n\n\nfun box readable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwriteable\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags contain the writeable flag.\n\n\nfun box writeable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndisposable\n\u00b6\n\n\n[Source]\n\n\nReturns true if the event should be disposed of.\n\n\nfun box disposable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nfun box dispose()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread\n\u00b6\n\n\n[Source]\n\n\nfun box read()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nfun box write()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ntimer\n\u00b6\n\n\n[Source]\n\n\nfun box timer()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsignal\n\u00b6\n\n\n[Source]\n\n\nfun box signal()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread_write\n\u00b6\n\n\n[Source]\n\n\nfun box read_write()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\noneshot\n\u00b6\n\n\n[Source]\n\n\nfun box oneshot()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread_write_oneshot\n\u00b6\n\n\n[Source]\n\n\nfun box read_write_oneshot()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: AsioEvent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAsioEvent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: AsioEvent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAsioEvent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive AsioEvent"
        },
        {
            "location": "/builtin-AsioEvent/#asioevent",
            "text": "[Source]  Functions for asynchronous event notification.  primitive val AsioEvent",
            "title": "AsioEvent"
        },
        {
            "location": "/builtin-AsioEvent/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AsioEvent/#create",
            "text": "[Source]  new val create()\n: AsioEvent val^",
            "title": "create"
        },
        {
            "location": "/builtin-AsioEvent/#returns",
            "text": "AsioEvent  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-AsioEvent/#none",
            "text": "[Source]  An empty event.  fun box none()\n: Pointer[AsioEvent val] tag",
            "title": "none"
        },
        {
            "location": "/builtin-AsioEvent/#returns_1",
            "text": "Pointer [ AsioEvent  val] tag",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#readable",
            "text": "[Source]  Returns true if the flags contain the readable flag.  fun box readable(\n  flags: U32 val)\n: Bool val",
            "title": "readable"
        },
        {
            "location": "/builtin-AsioEvent/#parameters",
            "text": "flags:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#writeable",
            "text": "[Source]  Returns true if the flags contain the writeable flag.  fun box writeable(\n  flags: U32 val)\n: Bool val",
            "title": "writeable"
        },
        {
            "location": "/builtin-AsioEvent/#parameters_1",
            "text": "flags:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#disposable",
            "text": "[Source]  Returns true if the event should be disposed of.  fun box disposable(\n  flags: U32 val)\n: Bool val",
            "title": "disposable"
        },
        {
            "location": "/builtin-AsioEvent/#parameters_2",
            "text": "flags:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#dispose",
            "text": "[Source]  fun box dispose()\n: U32 val",
            "title": "dispose"
        },
        {
            "location": "/builtin-AsioEvent/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#read",
            "text": "[Source]  fun box read()\n: U32 val",
            "title": "read"
        },
        {
            "location": "/builtin-AsioEvent/#returns_6",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#write",
            "text": "[Source]  fun box write()\n: U32 val",
            "title": "write"
        },
        {
            "location": "/builtin-AsioEvent/#returns_7",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#timer",
            "text": "[Source]  fun box timer()\n: U32 val",
            "title": "timer"
        },
        {
            "location": "/builtin-AsioEvent/#returns_8",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#signal",
            "text": "[Source]  fun box signal()\n: U32 val",
            "title": "signal"
        },
        {
            "location": "/builtin-AsioEvent/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#read_write",
            "text": "[Source]  fun box read_write()\n: U32 val",
            "title": "read_write"
        },
        {
            "location": "/builtin-AsioEvent/#returns_10",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#oneshot",
            "text": "[Source]  fun box oneshot()\n: U32 val",
            "title": "oneshot"
        },
        {
            "location": "/builtin-AsioEvent/#returns_11",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#read_write_oneshot",
            "text": "[Source]  fun box read_write_oneshot()\n: U32 val",
            "title": "read_write_oneshot"
        },
        {
            "location": "/builtin-AsioEvent/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#eq",
            "text": "[Source]  fun box eq(\n  that: AsioEvent val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-AsioEvent/#parameters_3",
            "text": "that:  AsioEvent  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#ne",
            "text": "[Source]  fun box ne(\n  that: AsioEvent val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-AsioEvent/#parameters_4",
            "text": "that:  AsioEvent  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/",
            "text": "Array[A: A]\n\u00b6\n\n\n[Source]\n\n\nContiguous, resizable memory to store elements of type A.\n\n\nUsage\n\u00b6\n\n\nCreating an Array of String.\n\n\n  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  // array.size() == 3\n  // array.space() >= 3\n\n\n\n\nCreating an empty Array of String, which may hold at least 10 elements before\nrequesting more space.\n\n\n  let array = Array(10)\n  // array.size() == 0\n  // array.space() >= 10\n\n\n\n\nAccessing elements can be done via the \napply(i: USize): this->A ?\n method.\nThe provided index might be out of bounds so \napply\n is partial and has to be\ncalled within a try-catch block or inside another partial method.\n\n\n  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  let is_second_element_wobat = try\n    // indexes start from 0, so 1 is the second element\n    array(1)? == \"wombat\"\n  else\n    false\n  end\n\n\n\n\nAdding and removing elements to and from the end of the Array can be done via\n\npush\n and \npop\n methods. You could treat the array as a FIFO queue using\nthose methods.\n\n\n  while (array.size() > 0) do\n    let elem = array.pop()?\n    // do something with element\n  end\n\n\n\n\nModifying the Array can be done via \nupdate\n, \ninsert\n and \ndelete\n methods\nwhich alter the Array at an arbitrary index, moving elements left (when\ndeleting) or right (when inserting) as necessary.\n\n\nIterating over the elements of an Array can be done using the \nvalues\n method.\n\n\n  for element in array.values() do\n      // do something with element\n  end\n\n\n\n\nMemory allocation\n\u00b6\n\n\nArray allocates contiguous memory. It always allocates at least enough memory\nspace to hold all of its elements. Space is the number of elements the Array\ncan hold without allocating more memory. The \nspace()\n method returns the\nnumber of elements an Array can hold. The \nsize()\n method returns the number\nof elements the Array holds.\n\n\nDifferent data types require different amounts of memory. Array[U64] with size\nof 6 will take more memory than an Array[U8] of the same size.\n\n\nWhen creating an Array or adding more elements will calculate the next power\nof 2 of the requested number of elements and allocate that much space, with a\nlower bound of space for 8 elements.\n\n\nHere's a few examples of the space allocated when initialising an Array with\nvarious number of elements:\n\n\n\n\n\n\n\n\nsize\n\n\nspace\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n\n\n\n\n1\n\n\n8\n\n\n\n\n\n\n8\n\n\n8\n\n\n\n\n\n\n9\n\n\n16\n\n\n\n\n\n\n16\n\n\n16\n\n\n\n\n\n\n17\n\n\n32\n\n\n\n\n\n\n\n\nCall the \ncompact()\n method to ask the GC to reclaim unused space. There are\nno guarantees that the GC will actually reclaim any space.\n\n\nclass ref Array[A: A] is\n  Seq[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nSeq\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew ref create(\n  len: USize val = seq)\n: Array[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\ninit\n\u00b6\n\n\n[Source]\n\n\nCreate an array of len elements, all initialised to the given value.\n\n\nnew ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: A^\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\nfrom_cpointer\n\u00b6\n\n\n[Source]\n\n\nCreate an array from a C-style pointer and length. The contents are not\ncopied.\n\n\nnew ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: Array[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nptr: \nPointer\n[A] ref\n\n\nlen: \nUSize\n val\n\n\nalloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\ncpointer\n\u00b6\n\n\n[Source]\n\n\nReturn the underlying C-style pointer.\n\n\nfun box cpointer(\n  offset: USize val = seq)\n: Pointer[A] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[A] tag\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nThe number of elements in the array.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nThe available space in the array.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreserve\n\u00b6\n\n\n[Source]\n\n\nReserve space for len elements, including whatever elements are already in\nthe array. Array space grows geometrically.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncompact\n\u00b6\n\n\n[Source]\n\n\nTry to remove unused space, making it available for garbage collection. The\nrequest may be ignored.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nundefined[optional B: (A & \nReal\n[B] val & (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\u00b6\n\n\n[Source]\n\n\nResize to len elements, populating previously empty elements with random\nmemory. This is only allowed for an array of numbers.\n\n\nfun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nChange the i-th element, raising an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\ninsert\n\u00b6\n\n\n[Source]\n\n\nInsert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.\n\n\nfun ref insert(\n  i: USize val,\n  value: A)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\ndelete\n\u00b6\n\n\n[Source]\n\n\nDelete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.\n\n\nfun ref delete(\n  i: USize val)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\ntruncate\n\u00b6\n\n\n[Source]\n\n\nTruncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim_in_place\n\u00b6\n\n\n[Source]\n\n\nTrim the array to a portion of itself, covering \nfrom\n until \nto\n.\nUnlike slice, the operation does not allocate a new array nor copy elements.\n\n\nfun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim\n\u00b6\n\n\n[Source]\n\n\nReturn a shared portion of this array, covering \nfrom\n until \nto\n.\nBoth the original and the new array are immutable, as they share memory.\nThe operation does not allocate a new array pointer nor copy elements.\n\n\nfun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: Array[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[A] val\n\n\n\n\n\n\nchop\n\u00b6\n\n\n[Source]\n\n\nChops the array in half at the split point requested and returns both\nthe left and right portions. The original array is trimmed in place and\nreturned as the right portion. If the split point is larger than the\narray, the left portion is the original array and the right portion\nis a new empty array.\nBoth arrays are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new array pointer nor copy elements.\n\n\nfun iso chop(\n  split_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsplit_point: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nArray\n[A] iso^ , \nArray\n[A] iso^)\n\n\n\n\n\n\ncopy_to\n\u00b6\n\n\n[Source]\n\n\nCopy len elements from this(src_idx) to dst(dst_idx).\n\n\nfun box copy_to(\n  dst: Array[this->A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndst: \nArray\n[this->A!] ref\n\n\nsrc_idx: \nUSize\n val\n\n\ndst_idx: \nUSize\n val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove n elements from the array, beginning at index i.\n\n\nfun ref remove(\n  i: USize val,\n  n: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nRemove all elements from the array.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdd an element to the end of the array.\n\n\nfun ref push(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemove an element from the end of the array.\nThe removed element is returned.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\u00b6\n\n\n[Source]\n\n\nAdd an element to the beginning of the array.\n\n\nfun ref unshift(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\u00b6\n\n\n[Source]\n\n\nRemove an element from the beginning of the array.\nThe removed element is returned.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd len iterated elements to the end of the array, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfind\n\u00b6\n\n\n[Source]\n\n\nFind the \nnth\n appearance of \nvalue\n from the beginning of the array,\nstarting at \noffset\n and examining higher indices, and using the supplied\n\npredicate\n for comparisons. Returns the index of the value, or raise an\nerror if the value isn't present.\n\n\nBy default, the search starts at the first element of the array, returns\nthe first instance of \nvalue\n found, and uses object identity for\ncomparison.\n\n\nfun box find(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A!\n\n\noffset: \nUSize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nReturns true if the array contains \nvalue\n, false otherwise.\n\n\nThe default predicate checks for matches by identity. To search for matches\nby structural equality, pass an object literal such as \n{(l, r) => l == r}\n.\n\n\nfun box contains(\n  value: A!,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A!\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrfind\n\u00b6\n\n\n[Source]\n\n\nFind the \nnth\n appearance of \nvalue\n from the end of the array, starting at\n\noffset\n and examining lower indices, and using the supplied \npredicate\n for\ncomparisons. Returns the index of the value, or raise an error if the value\nisn't present.\n\n\nBy default, the search starts at the last element of the array, returns the\nfirst instance of \nvalue\n found, and uses object identity for comparison.\n\n\nfun box rfind(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A!\n\n\noffset: \nUSize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nclone\n\u00b6\n\n\n[Source]\n\n\nClone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box clone()\n: Array[this->A!] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\nslice\n\u00b6\n\n\n[Source]\n\n\nCreate a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Array[this->A!] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\nstep: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\npermute\n\u00b6\n\n\n[Source]\n\n\nCreate a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this->A!] ref^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nindices: \nIterator\n[\nUSize\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[this->A!] ref^ ?\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nCreate a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun box reverse()\n: Array[this->A!] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\nreverse_in_place\n\u00b6\n\n\n[Source]\n\n\nReverse the array in place.\n\n\nfun ref reverse_in_place()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nswap_elements\n\u00b6\n\n\n[Source]\n\n\nSwap the element at index i with the element at index j.\nIf either i or j are out of bounds, an error is raised.\n\n\nfun ref swap_elements(\n  i: USize val,\n  j: USize val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nj: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nkeys\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the indices in the array.\n\n\nfun box keys()\n: ArrayKeys[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayKeys\n[A, this->\nArray\n[A] ref] ref^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the values in the array.\n\n\nfun box values()\n: ArrayValues[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayValues\n[A, this->\nArray\n[A] ref] ref^\n\n\n\n\n\n\npairs\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the (index, value) pairs in the array.\n\n\nfun box pairs()\n: ArrayPairs[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayPairs\n[A, this->\nArray\n[A] ref] ref^",
            "title": "class Array"
        },
        {
            "location": "/builtin-Array/#array91a-a93",
            "text": "[Source]  Contiguous, resizable memory to store elements of type A.",
            "title": "Array[A: A]"
        },
        {
            "location": "/builtin-Array/#usage",
            "text": "Creating an Array of String.    let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  // array.size() == 3\n  // array.space() >= 3  Creating an empty Array of String, which may hold at least 10 elements before\nrequesting more space.    let array = Array(10)\n  // array.size() == 0\n  // array.space() >= 10  Accessing elements can be done via the  apply(i: USize): this->A ?  method.\nThe provided index might be out of bounds so  apply  is partial and has to be\ncalled within a try-catch block or inside another partial method.    let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  let is_second_element_wobat = try\n    // indexes start from 0, so 1 is the second element\n    array(1)? == \"wombat\"\n  else\n    false\n  end  Adding and removing elements to and from the end of the Array can be done via push  and  pop  methods. You could treat the array as a FIFO queue using\nthose methods.    while (array.size() > 0) do\n    let elem = array.pop()?\n    // do something with element\n  end  Modifying the Array can be done via  update ,  insert  and  delete  methods\nwhich alter the Array at an arbitrary index, moving elements left (when\ndeleting) or right (when inserting) as necessary.  Iterating over the elements of an Array can be done using the  values  method.    for element in array.values() do\n      // do something with element\n  end",
            "title": "Usage"
        },
        {
            "location": "/builtin-Array/#memory-allocation",
            "text": "Array allocates contiguous memory. It always allocates at least enough memory\nspace to hold all of its elements. Space is the number of elements the Array\ncan hold without allocating more memory. The  space()  method returns the\nnumber of elements an Array can hold. The  size()  method returns the number\nof elements the Array holds.  Different data types require different amounts of memory. Array[U64] with size\nof 6 will take more memory than an Array[U8] of the same size.  When creating an Array or adding more elements will calculate the next power\nof 2 of the requested number of elements and allocate that much space, with a\nlower bound of space for 8 elements.  Here's a few examples of the space allocated when initialising an Array with\nvarious number of elements:     size  space      0  0    1  8    8  8    9  16    16  16    17  32     Call the  compact()  method to ask the GC to reclaim unused space. There are\nno guarantees that the GC will actually reclaim any space.  class ref Array[A: A] is\n  Seq[A] ref",
            "title": "Memory allocation"
        },
        {
            "location": "/builtin-Array/#implements",
            "text": "Seq [A] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Array/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Array/#create",
            "text": "[Source]  Create an array with zero elements, but space for len elements.  new ref create(\n  len: USize val = seq)\n: Array[A] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-Array/#parameters",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns",
            "text": "Array [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#init",
            "text": "[Source]  Create an array of len elements, all initialised to the given value.  new ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^",
            "title": "init"
        },
        {
            "location": "/builtin-Array/#parameters_1",
            "text": "from: A^  len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_1",
            "text": "Array [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#from_cpointer",
            "text": "[Source]  Create an array from a C-style pointer and length. The contents are not\ncopied.  new ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: Array[A] ref^",
            "title": "from_cpointer"
        },
        {
            "location": "/builtin-Array/#parameters_2",
            "text": "ptr:  Pointer [A] ref  len:  USize  val  alloc:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_2",
            "text": "Array [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Array/#cpointer",
            "text": "[Source]  Return the underlying C-style pointer.  fun box cpointer(\n  offset: USize val = seq)\n: Pointer[A] tag",
            "title": "cpointer"
        },
        {
            "location": "/builtin-Array/#parameters_3",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_3",
            "text": "Pointer [A] tag",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#size",
            "text": "[Source]  The number of elements in the array.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/builtin-Array/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#space",
            "text": "[Source]  The available space in the array.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/builtin-Array/#returns_5",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#reserve",
            "text": "[Source]  Reserve space for len elements, including whatever elements are already in\nthe array. Array space grows geometrically.  fun ref reserve(\n  len: USize val)\n: None val",
            "title": "reserve"
        },
        {
            "location": "/builtin-Array/#parameters_4",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#compact",
            "text": "[Source]  Try to remove unused space, making it available for garbage collection. The\nrequest may be ignored.  fun ref compact()\n: None val",
            "title": "compact"
        },
        {
            "location": "/builtin-Array/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#undefined91optional-b-a-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93",
            "text": "[Source]  Resize to len elements, populating previously empty elements with random\nmemory. This is only allowed for an array of numbers.  fun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val",
            "title": "undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        },
        {
            "location": "/builtin-Array/#parameters_5",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#apply",
            "text": "[Source]  Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-Array/#parameters_6",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_9",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#update",
            "text": "[Source]  Change the i-th element, raising an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?",
            "title": "update"
        },
        {
            "location": "/builtin-Array/#parameters_7",
            "text": "i:  USize  val  value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_10",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#insert",
            "text": "[Source]  Insert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.  fun ref insert(\n  i: USize val,\n  value: A)\n: None val ?",
            "title": "insert"
        },
        {
            "location": "/builtin-Array/#parameters_8",
            "text": "i:  USize  val  value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_11",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#delete",
            "text": "[Source]  Delete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.  fun ref delete(\n  i: USize val)\n: A^ ?",
            "title": "delete"
        },
        {
            "location": "/builtin-Array/#parameters_9",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_12",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#truncate",
            "text": "[Source]  Truncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val",
            "title": "truncate"
        },
        {
            "location": "/builtin-Array/#parameters_10",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#trim_in_place",
            "text": "[Source]  Trim the array to a portion of itself, covering  from  until  to .\nUnlike slice, the operation does not allocate a new array nor copy elements.  fun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val",
            "title": "trim_in_place"
        },
        {
            "location": "/builtin-Array/#parameters_11",
            "text": "from:  USize  val = seq  to:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#trim",
            "text": "[Source]  Return a shared portion of this array, covering  from  until  to .\nBoth the original and the new array are immutable, as they share memory.\nThe operation does not allocate a new array pointer nor copy elements.  fun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: Array[A] val",
            "title": "trim"
        },
        {
            "location": "/builtin-Array/#parameters_12",
            "text": "from:  USize  val = seq  to:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_15",
            "text": "Array [A] val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#chop",
            "text": "[Source]  Chops the array in half at the split point requested and returns both\nthe left and right portions. The original array is trimmed in place and\nreturned as the right portion. If the split point is larger than the\narray, the left portion is the original array and the right portion\nis a new empty array.\nBoth arrays are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new array pointer nor copy elements.  fun iso chop(\n  split_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)",
            "title": "chop"
        },
        {
            "location": "/builtin-Array/#parameters_13",
            "text": "split_point:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_16",
            "text": "( Array [A] iso^ ,  Array [A] iso^)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#copy_to",
            "text": "[Source]  Copy len elements from this(src_idx) to dst(dst_idx).  fun box copy_to(\n  dst: Array[this->A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val",
            "title": "copy_to"
        },
        {
            "location": "/builtin-Array/#parameters_14",
            "text": "dst:  Array [this->A!] ref  src_idx:  USize  val  dst_idx:  USize  val  len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_17",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#remove",
            "text": "[Source]  Remove n elements from the array, beginning at index i.  fun ref remove(\n  i: USize val,\n  n: USize val)\n: None val",
            "title": "remove"
        },
        {
            "location": "/builtin-Array/#parameters_15",
            "text": "i:  USize  val  n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#clear",
            "text": "[Source]  Remove all elements from the array.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/builtin-Array/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#push",
            "text": "[Source]  Add an element to the end of the array.  fun ref push(\n  value: A)\n: None val",
            "title": "push"
        },
        {
            "location": "/builtin-Array/#parameters_16",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_20",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#pop",
            "text": "[Source]  Remove an element from the end of the array.\nThe removed element is returned.  fun ref pop()\n: A^ ?",
            "title": "pop"
        },
        {
            "location": "/builtin-Array/#returns_21",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#unshift",
            "text": "[Source]  Add an element to the beginning of the array.  fun ref unshift(\n  value: A)\n: None val",
            "title": "unshift"
        },
        {
            "location": "/builtin-Array/#parameters_17",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_22",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#shift",
            "text": "[Source]  Remove an element from the beginning of the array.\nThe removed element is returned.  fun ref shift()\n: A^ ?",
            "title": "shift"
        },
        {
            "location": "/builtin-Array/#returns_23",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#append",
            "text": "[Source]  Append the elements from a sequence, starting from the given offset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "append"
        },
        {
            "location": "/builtin-Array/#parameters_18",
            "text": "seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_24",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#concat",
            "text": "[Source]  Add len iterated elements to the end of the array, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "concat"
        },
        {
            "location": "/builtin-Array/#parameters_19",
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_25",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#find",
            "text": "[Source]  Find the  nth  appearance of  value  from the beginning of the array,\nstarting at  offset  and examining higher indices, and using the supplied predicate  for comparisons. Returns the index of the value, or raise an\nerror if the value isn't present.  By default, the search starts at the first element of the array, returns\nthe first instance of  value  found, and uses object identity for\ncomparison.  fun box find(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: USize val ?",
            "title": "find"
        },
        {
            "location": "/builtin-Array/#parameters_20",
            "text": "value: A!  offset:  USize  val = seq  nth:  USize  val = seq  predicate: {(box->A!, box->A!): Bool}[A] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_26",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#contains",
            "text": "[Source]  Returns true if the array contains  value , false otherwise.  The default predicate checks for matches by identity. To search for matches\nby structural equality, pass an object literal such as  {(l, r) => l == r} .  fun box contains(\n  value: A!,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/builtin-Array/#parameters_21",
            "text": "value: A!  predicate: {(box->A!, box->A!): Bool}[A] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_27",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#rfind",
            "text": "[Source]  Find the  nth  appearance of  value  from the end of the array, starting at offset  and examining lower indices, and using the supplied  predicate  for\ncomparisons. Returns the index of the value, or raise an error if the value\nisn't present.  By default, the search starts at the last element of the array, returns the\nfirst instance of  value  found, and uses object identity for comparison.  fun box rfind(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: USize val ?",
            "title": "rfind"
        },
        {
            "location": "/builtin-Array/#parameters_22",
            "text": "value: A!  offset:  USize  val = seq  nth:  USize  val = seq  predicate: {(box->A!, box->A!): Bool}[A] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_28",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#clone",
            "text": "[Source]  Clone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.  fun box clone()\n: Array[this->A!] ref^",
            "title": "clone"
        },
        {
            "location": "/builtin-Array/#returns_29",
            "text": "Array [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#slice",
            "text": "[Source]  Create a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.  fun box slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Array[this->A!] ref^",
            "title": "slice"
        },
        {
            "location": "/builtin-Array/#parameters_23",
            "text": "from:  USize  val = seq  to:  USize  val = seq  step:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_30",
            "text": "Array [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#permute",
            "text": "[Source]  Create a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.  fun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this->A!] ref^ ?",
            "title": "permute"
        },
        {
            "location": "/builtin-Array/#parameters_24",
            "text": "indices:  Iterator [ USize  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_31",
            "text": "Array [this->A!] ref^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#reverse",
            "text": "[Source]  Create a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.  fun box reverse()\n: Array[this->A!] ref^",
            "title": "reverse"
        },
        {
            "location": "/builtin-Array/#returns_32",
            "text": "Array [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#reverse_in_place",
            "text": "[Source]  Reverse the array in place.  fun ref reverse_in_place()\n: None val",
            "title": "reverse_in_place"
        },
        {
            "location": "/builtin-Array/#returns_33",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#swap_elements",
            "text": "[Source]  Swap the element at index i with the element at index j.\nIf either i or j are out of bounds, an error is raised.  fun ref swap_elements(\n  i: USize val,\n  j: USize val)\n: None val ?",
            "title": "swap_elements"
        },
        {
            "location": "/builtin-Array/#parameters_25",
            "text": "i:  USize  val  j:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_34",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#keys",
            "text": "[Source]  Return an iterator over the indices in the array.  fun box keys()\n: ArrayKeys[A, this->Array[A] ref] ref^",
            "title": "keys"
        },
        {
            "location": "/builtin-Array/#returns_35",
            "text": "ArrayKeys [A, this-> Array [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#values",
            "text": "[Source]  Return an iterator over the values in the array.  fun box values()\n: ArrayValues[A, this->Array[A] ref] ref^",
            "title": "values"
        },
        {
            "location": "/builtin-Array/#returns_36",
            "text": "ArrayValues [A, this-> Array [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#pairs",
            "text": "[Source]  Return an iterator over the (index, value) pairs in the array.  fun box pairs()\n: ArrayPairs[A, this->Array[A] ref] ref^",
            "title": "pairs"
        },
        {
            "location": "/builtin-Array/#returns_37",
            "text": "ArrayPairs [A, this-> Array [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayKeys/",
            "text": "ArrayKeys[A: A, B: \nArray\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nclass ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[\nUSize\n val] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  array: B)\n: ArrayKeys[A, B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayKeys\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val",
            "title": "class ArrayKeys"
        },
        {
            "location": "/builtin-ArrayKeys/#arraykeys91a-a-b-array91a93-read93",
            "text": "[Source]  class ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref",
            "title": "ArrayKeys[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayKeys/#implements",
            "text": "Iterator [ USize  val] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-ArrayKeys/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayKeys/#create",
            "text": "[Source]  new ref create(\n  array: B)\n: ArrayKeys[A, B] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-ArrayKeys/#parameters",
            "text": "array: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ArrayKeys/#returns",
            "text": "ArrayKeys [A, B] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayKeys/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ArrayKeys/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-ArrayKeys/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayKeys/#next",
            "text": "[Source]  fun ref next()\n: USize val",
            "title": "next"
        },
        {
            "location": "/builtin-ArrayKeys/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayValues/",
            "text": "ArrayValues[A: A, B: \nArray\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nclass ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B->A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[B->A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  array: B)\n: ArrayValues[A, B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayValues\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: B->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB->A ?\n\n\n\n\n\n\nrewind\n\u00b6\n\n\n[Source]\n\n\nfun ref rewind()\n: ArrayValues[A, B] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayValues\n[A, B] ref",
            "title": "class ArrayValues"
        },
        {
            "location": "/builtin-ArrayValues/#arrayvalues91a-a-b-array91a93-read93",
            "text": "[Source]  class ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B->A] ref",
            "title": "ArrayValues[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayValues/#implements",
            "text": "Iterator [B->A] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-ArrayValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayValues/#create",
            "text": "[Source]  new ref create(\n  array: B)\n: ArrayValues[A, B] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-ArrayValues/#parameters",
            "text": "array: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ArrayValues/#returns",
            "text": "ArrayValues [A, B] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ArrayValues/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-ArrayValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayValues/#next",
            "text": "[Source]  fun ref next()\n: B->A ?",
            "title": "next"
        },
        {
            "location": "/builtin-ArrayValues/#returns_2",
            "text": "B->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayValues/#rewind",
            "text": "[Source]  fun ref rewind()\n: ArrayValues[A, B] ref",
            "title": "rewind"
        },
        {
            "location": "/builtin-ArrayValues/#returns_3",
            "text": "ArrayValues [A, B] ref",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayPairs/",
            "text": "ArrayPairs[A: A, B: \nArray\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nclass ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B->A)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[(\nUSize\n val , B->A)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  array: B)\n: ArrayPairs[A, B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayPairs\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: (USize val , B->A) ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , B->A) ?",
            "title": "class ArrayPairs"
        },
        {
            "location": "/builtin-ArrayPairs/#arraypairs91a-a-b-array91a93-read93",
            "text": "[Source]  class ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B->A)] ref",
            "title": "ArrayPairs[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayPairs/#implements",
            "text": "Iterator [( USize  val , B->A)] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-ArrayPairs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayPairs/#create",
            "text": "[Source]  new ref create(\n  array: B)\n: ArrayPairs[A, B] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-ArrayPairs/#parameters",
            "text": "array: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ArrayPairs/#returns",
            "text": "ArrayPairs [A, B] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayPairs/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ArrayPairs/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-ArrayPairs/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayPairs/#next",
            "text": "[Source]  fun ref next()\n: (USize val , B->A) ?",
            "title": "next"
        },
        {
            "location": "/builtin-ArrayPairs/#returns_2",
            "text": "( USize  val , B->A) ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Any/",
            "text": "Any\n\u00b6\n\n\n[Source]\n\n\ninterface tag Any",
            "title": "interface Any"
        },
        {
            "location": "/builtin-Any/#any",
            "text": "[Source]  interface tag Any",
            "title": "Any"
        },
        {
            "location": "/builtin-AmbientAuth/",
            "text": "AmbientAuth\n\u00b6\n\n\n[Source]\n\n\nThis type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.\n\n\nAmbient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.\n\n\nThe root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.\n\n\nprimitive val AmbientAuth\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: AmbientAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAmbientAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: AmbientAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAmbientAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive AmbientAuth"
        },
        {
            "location": "/builtin-AmbientAuth/#ambientauth",
            "text": "[Source]  This type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.  Ambient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.  The root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.  primitive val AmbientAuth",
            "title": "AmbientAuth"
        },
        {
            "location": "/builtin-AmbientAuth/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-AmbientAuth/#eq",
            "text": "[Source]  fun box eq(\n  that: AmbientAuth val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-AmbientAuth/#parameters",
            "text": "that:  AmbientAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AmbientAuth/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AmbientAuth/#ne",
            "text": "[Source]  fun box ne(\n  that: AmbientAuth val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-AmbientAuth/#parameters_1",
            "text": "that:  AmbientAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AmbientAuth/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections--index/",
            "text": "No package doc string provided for collections.\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive Sort\n\n\ntype Set\n\n\ntype SetIs\n\n\nclass HashSet\n\n\nclass SetValues\n\n\nclass RingBuffer\n\n\nclass Reverse\n\n\nclass Range\n\n\ntype Map\n\n\ntype MapIs\n\n\nclass HashMap\n\n\nclass MapKeys\n\n\nclass MapValues\n\n\nclass MapPairs\n\n\nclass ListNode\n\n\nclass List\n\n\nclass ListNodes\n\n\nclass ListValues\n\n\ninterface Hashable\n\n\ninterface Hashable64\n\n\ninterface HashFunction\n\n\ninterface HashFunction64\n\n\nprimitive HashEq\n\n\nprimitive HashEq64\n\n\nprimitive HashIs\n\n\nprimitive HashByteSeq\n\n\ninterface Flag\n\n\nclass Flags",
            "title": "Package"
        },
        {
            "location": "/collections--index/#public-types",
            "text": "primitive Sort  type Set  type SetIs  class HashSet  class SetValues  class RingBuffer  class Reverse  class Range  type Map  type MapIs  class HashMap  class MapKeys  class MapValues  class MapPairs  class ListNode  class List  class ListNodes  class ListValues  interface Hashable  interface Hashable64  interface HashFunction  interface HashFunction64  primitive HashEq  primitive HashEq64  primitive HashIs  primitive HashByteSeq  interface Flag  class Flags",
            "title": "Public Types"
        },
        {
            "location": "/collections-Sort/",
            "text": "Sort[A: \nSeq\n[B] ref, B: \nComparable\n[B] #read]\n\u00b6\n\n\n[Source]\n\n\nImplementation of dual-pivot quicksort.\n\n\nprimitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Sort[A, B] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSort\n[A, B] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSort the given seq.\n\n\nfun box apply(\n  a: A)\n: A^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Sort[A, B] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSort\n[A, B] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Sort[A, B] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSort\n[A, B] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Sort"
        },
        {
            "location": "/collections-Sort/#sort91a-seq91b93-ref-b-comparable91b93-read93",
            "text": "[Source]  Implementation of dual-pivot quicksort.  primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]",
            "title": "Sort[A: Seq[B] ref, B: Comparable[B] #read]"
        },
        {
            "location": "/collections-Sort/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Sort/#create",
            "text": "[Source]  new val create()\n: Sort[A, B] val^",
            "title": "create"
        },
        {
            "location": "/collections-Sort/#returns",
            "text": "Sort [A, B] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-Sort/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Sort/#apply",
            "text": "[Source]  Sort the given seq.  fun box apply(\n  a: A)\n: A^",
            "title": "apply"
        },
        {
            "location": "/collections-Sort/#parameters",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Sort/#returns_1",
            "text": "A^",
            "title": "Returns"
        },
        {
            "location": "/collections-Sort/#eq",
            "text": "[Source]  fun box eq(\n  that: Sort[A, B] val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-Sort/#parameters_1",
            "text": "that:  Sort [A, B] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-Sort/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Sort/#ne",
            "text": "[Source]  fun box ne(\n  that: Sort[A, B] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-Sort/#parameters_2",
            "text": "that:  Sort [A, B] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-Sort/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Set/",
            "text": "Set[A: (\nHashable\n #read & \nEquatable\n[A] #read)]\n\u00b6\n\n\n[Source]\n\n\ntype Set[A: (Hashable #read & Equatable[A] #read)] is\n  HashSet[A, HashEq[A] val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashSet\n[A, \nHashEq\n[A] val] ref",
            "title": "type Set"
        },
        {
            "location": "/collections-Set/#set91a-hashable-read-equatable91a93-read93",
            "text": "[Source]  type Set[A: (Hashable #read & Equatable[A] #read)] is\n  HashSet[A, HashEq[A] val] ref",
            "title": "Set[A: (Hashable #read &amp; Equatable[A] #read)]"
        },
        {
            "location": "/collections-Set/#type-alias-for",
            "text": "HashSet [A,  HashEq [A] val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-SetIs/",
            "text": "SetIs[A: A]\n\u00b6\n\n\n[Source]\n\n\ntype SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashSet\n[A, \nHashIs\n[A!] val] ref",
            "title": "type SetIs"
        },
        {
            "location": "/collections-SetIs/#setis91a-a93",
            "text": "[Source]  type SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref",
            "title": "SetIs[A: A]"
        },
        {
            "location": "/collections-SetIs/#type-alias-for",
            "text": "HashSet [A,  HashIs [A!] val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-HashSet/",
            "text": "HashSet[A: A, H: \nHashFunction\n[A!] val]\n\u00b6\n\n\n[Source]\n\n\nA set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself\n\n\nclass ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H] box] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nComparable\n[\nHashSet\n[A, H] box] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nDefaults to a prealloc of 8.\n\n\nnew ref create(\n  prealloc: USize val = seq)\n: HashSet[A, H] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nprealloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nThe number of items in the set.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nThe available space in the set.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturn the value if its in the set, otherwise raise an error.\n\n\nfun box apply(\n  value: box->A!)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nChecks whether the set contains the value.\n\n\nfun box contains(\n  value: box->A!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nRemove all elements from the set.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset\n\u00b6\n\n\n[Source]\n\n\nAdd a value to the set.\n\n\nfun ref set(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\u00b6\n\n\n[Source]\n\n\nRemove a value from the set.\n\n\nfun ref unset(\n  value: box->A!)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nextract\n\u00b6\n\n\n[Source]\n\n\nRemove a value from the set and return it. Raises an error if the value\nwasn't in the set.\n\n\nfun ref extract(\n  value: box->A!)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunion\n\u00b6\n\n\n[Source]\n\n\nAdd everything in that to the set.\n\n\nfun ref union(\n  that: Iterator[A^] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nintersect[optional K: \nHashFunction\n[box->A!] val]\n\u00b6\n\n\n[Source]\n\n\nRemove everything that isn't in that.\n\n\nfun ref intersect[optional K: HashFunction[box->A!] val](\n  that: HashSet[box->A!, K] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[box->A!, K] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndifference\n\u00b6\n\n\n[Source]\n\n\nRemove elements in this which are also in that. Add elements in that which\nare not in this.\n\n\nfun ref difference(\n  that: Iterator[A^] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove everything that is in that.\n\n\nfun ref remove(\n  that: Iterator[box->A!] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nIterator\n[box->A!] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nAdd a value to the set.\n\n\nfun box add[optional K: HashFunction[this->A!] val](\n  value: this->A!)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: this->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nsub[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nRemove a value from the set.\n\n\nfun box sub[optional K: HashFunction[this->A!] val](\n  value: box->this->A!)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->this->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nop_or[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a set with the elements of both this and that.\n\n\nfun box op_or[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: this->\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nop_and[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a set with the elements that are in both this and that.\n\n\nfun box op_and[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: this->\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nop_xor[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a set with the elements that are in either set but not both.\n\n\nfun box op_xor[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: this->\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nwithout[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a set with the elements of this that are not in that.\n\n\nfun box without[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: this->\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nclone[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a clone. The element type may be different due to aliasing and\nviewpoint adaptation.\n\n\nfun box clone[optional K: HashFunction[this->A!] val]()\n: HashSet[this->A!, K] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturns true if the sets contain the same elements.\n\n\nfun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nReturns false if the sets contain the same elements.\n\n\nfun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element in this is also in that, and this has fewer\nelements than that.\n\n\nfun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element in this is also in that.\n\n\nfun box le(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element in that is also in this, and this has more\nelements than that.\n\n\nfun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element in that is also in this.\n\n\nfun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext_index\n\u00b6\n\n\n[Source]\n\n\nGiven an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.\n\n\nfun box next_index(\n  prev: USize val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nprev: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nindex\n\u00b6\n\n\n[Source]\n\n\nReturns the value at a given index. Raise an error if the index is not\npopulated.\n\n\nfun box index(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the values.\n\n\nfun box values()\n: SetValues[A, H, this->HashSet[A, H] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSetValues\n[A, H, this->\nHashSet\n[A, H] ref] ref^\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nfun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "class HashSet"
        },
        {
            "location": "/collections-HashSet/#hashset91a-a-h-hashfunction91a93-val93",
            "text": "[Source]  A set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself  class ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H] box] ref",
            "title": "HashSet[A: A, H: HashFunction[A!] val]"
        },
        {
            "location": "/collections-HashSet/#implements",
            "text": "Comparable [ HashSet [A, H] box] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-HashSet/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashSet/#create",
            "text": "[Source]  Defaults to a prealloc of 8.  new ref create(\n  prealloc: USize val = seq)\n: HashSet[A, H] ref^",
            "title": "create"
        },
        {
            "location": "/collections-HashSet/#parameters",
            "text": "prealloc:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns",
            "text": "HashSet [A, H] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashSet/#size",
            "text": "[Source]  The number of items in the set.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-HashSet/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#space",
            "text": "[Source]  The available space in the set.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/collections-HashSet/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#apply",
            "text": "[Source]  Return the value if its in the set, otherwise raise an error.  fun box apply(\n  value: box->A!)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-HashSet/#parameters_1",
            "text": "value: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_3",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#contains",
            "text": "[Source]  Checks whether the set contains the value.  fun box contains(\n  value: box->A!)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/collections-HashSet/#parameters_2",
            "text": "value: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#clear",
            "text": "[Source]  Remove all elements from the set.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-HashSet/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#set",
            "text": "[Source]  Add a value to the set.  fun ref set(\n  value: A)\n: None val",
            "title": "set"
        },
        {
            "location": "/collections-HashSet/#parameters_3",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#unset",
            "text": "[Source]  Remove a value from the set.  fun ref unset(\n  value: box->A!)\n: None val",
            "title": "unset"
        },
        {
            "location": "/collections-HashSet/#parameters_4",
            "text": "value: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#extract",
            "text": "[Source]  Remove a value from the set and return it. Raises an error if the value\nwasn't in the set.  fun ref extract(\n  value: box->A!)\n: A^ ?",
            "title": "extract"
        },
        {
            "location": "/collections-HashSet/#parameters_5",
            "text": "value: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_8",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#union",
            "text": "[Source]  Add everything in that to the set.  fun ref union(\n  that: Iterator[A^] ref)\n: None val",
            "title": "union"
        },
        {
            "location": "/collections-HashSet/#parameters_6",
            "text": "that:  Iterator [A^] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#intersect91optional-k-hashfunction91box-a93-val93",
            "text": "[Source]  Remove everything that isn't in that.  fun ref intersect[optional K: HashFunction[box->A!] val](\n  that: HashSet[box->A!, K] ref)\n: None val",
            "title": "intersect[optional K: HashFunction[box-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_7",
            "text": "that:  HashSet [box->A!, K] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#difference",
            "text": "[Source]  Remove elements in this which are also in that. Add elements in that which\nare not in this.  fun ref difference(\n  that: Iterator[A^] ref)\n: None val",
            "title": "difference"
        },
        {
            "location": "/collections-HashSet/#parameters_8",
            "text": "that:  Iterator [A^] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#remove",
            "text": "[Source]  Remove everything that is in that.  fun ref remove(\n  that: Iterator[box->A!] ref)\n: None val",
            "title": "remove"
        },
        {
            "location": "/collections-HashSet/#parameters_9",
            "text": "that:  Iterator [box->A!] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#add91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Add a value to the set.  fun box add[optional K: HashFunction[this->A!] val](\n  value: this->A!)\n: HashSet[this->A!, K] ref^",
            "title": "add[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_10",
            "text": "value: this->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_13",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#sub91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Remove a value from the set.  fun box sub[optional K: HashFunction[this->A!] val](\n  value: box->this->A!)\n: HashSet[this->A!, K] ref^",
            "title": "sub[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_11",
            "text": "value: box->this->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_14",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#op_or91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a set with the elements of both this and that.  fun box op_or[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^",
            "title": "op_or[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_12",
            "text": "that: this-> HashSet [A, H] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_15",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#op_and91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a set with the elements that are in both this and that.  fun box op_and[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^",
            "title": "op_and[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_13",
            "text": "that: this-> HashSet [A, H] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_16",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#op_xor91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a set with the elements that are in either set but not both.  fun box op_xor[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^",
            "title": "op_xor[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_14",
            "text": "that: this-> HashSet [A, H] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_17",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#without91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a set with the elements of this that are not in that.  fun box without[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^",
            "title": "without[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_15",
            "text": "that: this-> HashSet [A, H] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_18",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#clone91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a clone. The element type may be different due to aliasing and\nviewpoint adaptation.  fun box clone[optional K: HashFunction[this->A!] val]()\n: HashSet[this->A!, K] ref^",
            "title": "clone[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#returns_19",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#eq",
            "text": "[Source]  Returns true if the sets contain the same elements.  fun box eq(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashSet/#parameters_16",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_20",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#ne",
            "text": "[Source]  Returns false if the sets contain the same elements.  fun box ne(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashSet/#parameters_17",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_21",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#lt",
            "text": "[Source]  Returns true if every element in this is also in that, and this has fewer\nelements than that.  fun box lt(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/collections-HashSet/#parameters_18",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#le",
            "text": "[Source]  Returns true if every element in this is also in that.  fun box le(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/collections-HashSet/#parameters_19",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_23",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#gt",
            "text": "[Source]  Returns true if every element in that is also in this, and this has more\nelements than that.  fun box gt(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/collections-HashSet/#parameters_20",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#ge",
            "text": "[Source]  Returns true if every element in that is also in this.  fun box ge(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/collections-HashSet/#parameters_21",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#next_index",
            "text": "[Source]  Given an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.  fun box next_index(\n  prev: USize val = seq)\n: USize val ?",
            "title": "next_index"
        },
        {
            "location": "/collections-HashSet/#parameters_22",
            "text": "prev:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_26",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#index",
            "text": "[Source]  Returns the value at a given index. Raise an error if the index is not\npopulated.  fun box index(\n  i: USize val)\n: this->A ?",
            "title": "index"
        },
        {
            "location": "/collections-HashSet/#parameters_23",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_27",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#values",
            "text": "[Source]  Return an iterator over the values.  fun box values()\n: SetValues[A, H, this->HashSet[A, H] ref] ref^",
            "title": "values"
        },
        {
            "location": "/collections-HashSet/#returns_28",
            "text": "SetValues [A, H, this-> HashSet [A, H] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#compare",
            "text": "[Source]  fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/collections-HashSet/#parameters_24",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_29",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-SetValues/",
            "text": "SetValues[A: A, H: \nHashFunction\n[A!] val, S: \nHashSet\n[A, H] #read]\n\u00b6\n\n\n[Source]\n\n\nAn iterator over the values in a set.\n\n\nclass ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S->A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[S->A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates an iterator for the given set.\n\n\nnew ref create(\n  set: S)\n: SetValues[A, H, S] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nset: S\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSetValues\n[A, H, S] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.\n\n\nfun ref next()\n: S->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nS->A ?",
            "title": "class SetValues"
        },
        {
            "location": "/collections-SetValues/#setvalues91a-a-h-hashfunction91a93-val-s-hashset91a-h93-read93",
            "text": "[Source]  An iterator over the values in a set.  class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S->A] ref",
            "title": "SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]"
        },
        {
            "location": "/collections-SetValues/#implements",
            "text": "Iterator [S->A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-SetValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-SetValues/#create",
            "text": "[Source]  Creates an iterator for the given set.  new ref create(\n  set: S)\n: SetValues[A, H, S] ref^",
            "title": "create"
        },
        {
            "location": "/collections-SetValues/#parameters",
            "text": "set: S",
            "title": "Parameters"
        },
        {
            "location": "/collections-SetValues/#returns",
            "text": "SetValues [A, H, S] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-SetValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-SetValues/#has_next",
            "text": "[Source]  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-SetValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-SetValues/#next",
            "text": "[Source]  Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.  fun ref next()\n: S->A ?",
            "title": "next"
        },
        {
            "location": "/collections-SetValues/#returns_2",
            "text": "S->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/",
            "text": "RingBuffer[A: A]\n\u00b6\n\n\n[Source]\n\n\nA ring buffer.\n\n\nclass ref RingBuffer[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a ring buffer with a fixed size. The size will be rounded up to the\nnext power of 2.\n\n\nnew ref create(\n  len: USize val)\n: RingBuffer[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nRingBuffer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhead\n\u00b6\n\n\n[Source]\n\n\nThe first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.\n\n\nfun box head()\n: USize val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nThe number of elements that have been added to the ring.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nThe available space in the ring.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGet the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdd an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring. Returns true if an element was dropped.\n\n\nfun ref push(\n  value: A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nClear the queue.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class RingBuffer"
        },
        {
            "location": "/collections-RingBuffer/#ringbuffer91a-a93",
            "text": "[Source]  A ring buffer.  class ref RingBuffer[A: A]",
            "title": "RingBuffer[A: A]"
        },
        {
            "location": "/collections-RingBuffer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-RingBuffer/#create",
            "text": "[Source]  Create a ring buffer with a fixed size. The size will be rounded up to the\nnext power of 2.  new ref create(\n  len: USize val)\n: RingBuffer[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-RingBuffer/#parameters",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-RingBuffer/#returns",
            "text": "RingBuffer [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-RingBuffer/#head",
            "text": "[Source]  The first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.  fun box head()\n: USize val ?",
            "title": "head"
        },
        {
            "location": "/collections-RingBuffer/#returns_1",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#size",
            "text": "[Source]  The number of elements that have been added to the ring.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-RingBuffer/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#space",
            "text": "[Source]  The available space in the ring.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/collections-RingBuffer/#returns_3",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#apply",
            "text": "[Source]  Get the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.  fun box apply(\n  i: USize val)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-RingBuffer/#parameters_1",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-RingBuffer/#returns_4",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#push",
            "text": "[Source]  Add an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring. Returns true if an element was dropped.  fun ref push(\n  value: A)\n: Bool val",
            "title": "push"
        },
        {
            "location": "/collections-RingBuffer/#parameters_2",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-RingBuffer/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#clear",
            "text": "[Source]  Clear the queue.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-RingBuffer/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Reverse/",
            "text": "Reverse[optional A: (\nReal\n[A] val & (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\u00b6\n\n\n[Source]\n\n\nProduces [max, min].\n\n\nclass ref Reverse[optional A: (Real[A] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  max: A,\n  min: A,\n  dec: A = seq)\n: Reverse[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmax: A\n\n\nmin: A\n\n\ndec: A = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReverse\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nrewind\n\u00b6\n\n\n[Source]\n\n\nfun ref rewind()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class Reverse"
        },
        {
            "location": "/collections-Reverse/#reverse91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93",
            "text": "[Source]  Produces [max, min].  class ref Reverse[optional A: (Real[A] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref",
            "title": "Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        },
        {
            "location": "/collections-Reverse/#implements",
            "text": "Iterator [A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-Reverse/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Reverse/#create",
            "text": "[Source]  new ref create(\n  max: A,\n  min: A,\n  dec: A = seq)\n: Reverse[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-Reverse/#parameters",
            "text": "max: A  min: A  dec: A = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-Reverse/#returns",
            "text": "Reverse [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-Reverse/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Reverse/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-Reverse/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Reverse/#next",
            "text": "[Source]  fun ref next()\n: A",
            "title": "next"
        },
        {
            "location": "/collections-Reverse/#returns_2",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/collections-Reverse/#rewind",
            "text": "[Source]  fun ref rewind()\n: None val",
            "title": "rewind"
        },
        {
            "location": "/collections-Reverse/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/",
            "text": "Range[optional A: (\nReal\n[A] val & (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\u00b6\n\n\n[Source]\n\n\nProduces \n[min, max)\n with a step of \ninc\n for any \nNumber\n type.\n\n\n// iterating with for-loop\nfor i in Range(0, 10) do\n  env.out.print(i.string())\nend\n\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\n  handle_u8(range.next())\nend\n\n\n\n\nSupports \nmin\n being smaller than \nmax\n with negative \ninc\n\nbut only for signed integer types and floats:\n\n\nvar previous = 11\nfor left in Range[I64](10, -5, -1) do\n  if not (left < previous) then\n    error\n  end\n  previous = left\nend\n\n\n\n\nIf the \nstep\n is not moving \nmin\n towards \nmax\n or if it is \n0\n,\nthe Range is considered infinite and iterating over it\nwill never terminate:\n\n\nlet infinite_range1 = Range(0, 1, 0)\ninfinite_range1.is_infinite() == true\n\nlet infinite_range2 = Range[I8](0, 10, -1)\nfor _ in infinite_range2 do\n  env.out.print(\"will this ever end?\")\n  env.err.print(\"no, never!\")\nend\n\n\n\n\nWhen using \nRange\n with  floating point types (\nF32\n and \nF64\n)\n\ninc\n steps < 1.0 are possible. If any of the arguments contains\n\nNaN\n, \n+Inf\n or \n-Inf\n the range is considered infinite as operations on\nany of them won't move \nmin\n towards \nmax\n.\nThe actual values produced by such a \nRange\n are determined by what IEEE 754\ndefines as the result of \nmin\n + \ninc\n:\n\n\nfor and_a_half in Range[F64](0.5, 100) do\n  handle_half(and_a_half)\nend\n\n// this Range will produce 0 at first, then infinitely NaN\nlet nan: F64 = F64(0) / F64(0)\nfor what_am_i in Range[F64](0, 1000, nan) do\n  wild_guess(what_am_i)\nend\n\n\n\n\nclass ref Range[optional A: (Real[A] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  min: A,\n  max: A,\n  inc: A = seq)\n: Range[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmin: A\n\n\nmax: A\n\n\ninc: A = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nRange\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nrewind\n\u00b6\n\n\n[Source]\n\n\nfun ref rewind()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nis_infinite\n\u00b6\n\n\n[Source]\n\n\nfun box is_infinite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class Range"
        },
        {
            "location": "/collections-Range/#range91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93",
            "text": "[Source]  Produces  [min, max)  with a step of  inc  for any  Number  type.  // iterating with for-loop\nfor i in Range(0, 10) do\n  env.out.print(i.string())\nend\n\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\n  handle_u8(range.next())\nend  Supports  min  being smaller than  max  with negative  inc \nbut only for signed integer types and floats:  var previous = 11\nfor left in Range[I64](10, -5, -1) do\n  if not (left < previous) then\n    error\n  end\n  previous = left\nend  If the  step  is not moving  min  towards  max  or if it is  0 ,\nthe Range is considered infinite and iterating over it\nwill never terminate:  let infinite_range1 = Range(0, 1, 0)\ninfinite_range1.is_infinite() == true\n\nlet infinite_range2 = Range[I8](0, 10, -1)\nfor _ in infinite_range2 do\n  env.out.print(\"will this ever end?\")\n  env.err.print(\"no, never!\")\nend  When using  Range  with  floating point types ( F32  and  F64 ) inc  steps < 1.0 are possible. If any of the arguments contains NaN ,  +Inf  or  -Inf  the range is considered infinite as operations on\nany of them won't move  min  towards  max .\nThe actual values produced by such a  Range  are determined by what IEEE 754\ndefines as the result of  min  +  inc :  for and_a_half in Range[F64](0.5, 100) do\n  handle_half(and_a_half)\nend\n\n// this Range will produce 0 at first, then infinitely NaN\nlet nan: F64 = F64(0) / F64(0)\nfor what_am_i in Range[F64](0, 1000, nan) do\n  wild_guess(what_am_i)\nend  class ref Range[optional A: (Real[A] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref",
            "title": "Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        },
        {
            "location": "/collections-Range/#implements",
            "text": "Iterator [A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-Range/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Range/#create",
            "text": "[Source]  new ref create(\n  min: A,\n  max: A,\n  inc: A = seq)\n: Range[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-Range/#parameters",
            "text": "min: A  max: A  inc: A = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-Range/#returns",
            "text": "Range [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Range/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-Range/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/#next",
            "text": "[Source]  fun ref next()\n: A",
            "title": "next"
        },
        {
            "location": "/collections-Range/#returns_2",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/#rewind",
            "text": "[Source]  fun ref rewind()\n: None val",
            "title": "rewind"
        },
        {
            "location": "/collections-Range/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/#is_infinite",
            "text": "[Source]  fun box is_infinite()\n: Bool val",
            "title": "is_infinite"
        },
        {
            "location": "/collections-Range/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Map/",
            "text": "Map[K: (\nHashable\n #read & \nEquatable\n[K] #read), V: V]\n\u00b6\n\n\n[Source]\n\n\nThis is a map that uses structural equality on the key.\n\n\ntype Map[K: (Hashable #read & Equatable[K] #read), V: V] is\n  HashMap[K, V, HashEq[K] val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashMap\n[K, V, \nHashEq\n[K] val] ref",
            "title": "type Map"
        },
        {
            "location": "/collections-Map/#map91k-hashable-read-equatable91k93-read-v-v93",
            "text": "[Source]  This is a map that uses structural equality on the key.  type Map[K: (Hashable #read & Equatable[K] #read), V: V] is\n  HashMap[K, V, HashEq[K] val] ref",
            "title": "Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]"
        },
        {
            "location": "/collections-Map/#type-alias-for",
            "text": "HashMap [K, V,  HashEq [K] val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-MapIs/",
            "text": "MapIs[K: K, V: V]\n\u00b6\n\n\n[Source]\n\n\nThis is a map that uses identity comparison on the key.\n\n\ntype MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashMap\n[K, V, \nHashIs\n[K] val] ref",
            "title": "type MapIs"
        },
        {
            "location": "/collections-MapIs/#mapis91k-k-v-v93",
            "text": "[Source]  This is a map that uses identity comparison on the key.  type MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref",
            "title": "MapIs[K: K, V: V]"
        },
        {
            "location": "/collections-MapIs/#type-alias-for",
            "text": "HashMap [K, V,  HashIs [K] val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-HashMap/",
            "text": "HashMap[K: K, V: V, H: \nHashFunction\n[K] val]\n\u00b6\n\n\n[Source]\n\n\nA quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.\n\n\nclass ref HashMap[K: K, V: V, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate an array with space for prealloc elements without triggering a\nresize. Defaults to 6.\n\n\nnew ref create(\n  prealloc: USize val = seq)\n: HashMap[K, V, H] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nprealloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nThe number of items in the map.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nThe available space in the map. Resize will happen when\nsize / space >= 0.75.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGets a value from the map. Raises an error if no such item exists.\n\n\nfun box apply(\n  key: box->K!)\n: this->V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: box->K!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->V ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nSets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.\n\n\nfun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(V^ | \nNone\n val)\n\n\n\n\n\n\nupsert\n\u00b6\n\n\n[Source]\n\n\nCombines a provided value with the current value for the provided key\nusing the provided function. If the provided key has not been added to\nthe map yet, it sets its value to the provided value.\n\n\nAs a simple example, say we had a map with I64 values and we wanted to\nadd 4 to the current value for key \"test\", which let's say is currently 2.\nWe call\n\n\nm.upsert(\"test\", 4, {(x, y) => x - y })\n\n\nThis changes the value associated with \"test\" to -2.\n\n\nIf we have not yet added the key \"new-key\" to the map and we call\n\n\nm.upsert(\"new-key\", 4, {(x, y) => x - y })\n\n\nthen \"new-key\" is added to the map with a value of -4.\n\n\nReturns the value that we set the key to\n\n\nfun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H] box)\n: V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\nf: {(V, V): V^}[K, V, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nV ?\n\n\n\n\n\n\ninsert\n\u00b6\n\n\n[Source]\n\n\nSet a value in the map. Returns the new value, allowing reuse.\n\n\nfun ref insert(\n  key: K,\n  value: V)\n: V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nV ?\n\n\n\n\n\n\ninsert_if_absent\n\u00b6\n\n\n[Source]\n\n\nSet a value in the map if the key doesn't already exist in the Map.\nSaves an extra lookup when doing a pattern like:\n\n\nif not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend\n\n\n\n\nReturns the value, the same as \ninsert\n, allowing 'insert_if_absent'\nto be used as a drop-in replacement for \ninsert\n.\n\n\nfun ref insert_if_absent(\n  key: K,\n  value: V)\n: V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nV ?\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nDelete a value from the map and return it. Raises an error if there was no\nvalue for the given key.\n\n\nfun ref remove(\n  key: box->K!)\n: (K^ , V^) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: box->K!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(K^ , V^) ?\n\n\n\n\n\n\nget_or_else\n\u00b6\n\n\n[Source]\n\n\nGet the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.\n\n\nfun box get_or_else(\n  key: box->K!,\n  alt: this->V)\n: this->V\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: box->K!\n\n\nalt: this->V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->V\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nChecks whether the map contains the key k\n\n\nfun box contains(\n  k: box->K!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nk: box->K!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd K, V pairs from the iterator to the map.\n\n\nfun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[(K^ , V^)] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd[optional H2: \nHashFunction\n[this->K!] val]\n\u00b6\n\n\n[Source]\n\n\nThis with the new (key, value) mapping.\n\n\nfun box add[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: this->K!\n\n\nvalue: this->V!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[this->K!, this->V!, H2] ref^\n\n\n\n\n\n\nsub[optional H2: \nHashFunction\n[this->K!] val]\n\u00b6\n\n\n[Source]\n\n\nThis without the given key.\n\n\nfun box sub[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: this->K!\n\n\nvalue: this->V!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[this->K!, this->V!, H2] ref^\n\n\n\n\n\n\nnext_index\n\u00b6\n\n\n[Source]\n\n\nGiven an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.\n\n\nfun box next_index(\n  prev: USize val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nprev: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nindex\n\u00b6\n\n\n[Source]\n\n\nReturns the key and value at a given index.\nRaise an error if the index is not populated.\n\n\nfun box index(\n  i: USize val)\n: (this->K , this->V) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(this->K , this->V) ?\n\n\n\n\n\n\ncompact\n\u00b6\n\n\n[Source]\n\n\nMinimise the memory used for the map.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclone[optional H2: \nHashFunction\n[this->K!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.\n\n\nfun box clone[optional H2: HashFunction[this->K!] val]()\n: HashMap[this->K!, this->V!, H2] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[this->K!, this->V!, H2] ref^\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nRemove all entries.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nkeys\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the keys.\n\n\nfun box keys()\n: MapKeys[K, V, H, this->HashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapKeys\n[K, V, H, this->\nHashMap\n[K, V, H] ref] ref^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the values.\n\n\nfun box values()\n: MapValues[K, V, H, this->HashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapValues\n[K, V, H, this->\nHashMap\n[K, V, H] ref] ref^\n\n\n\n\n\n\npairs\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the keys and values.\n\n\nfun box pairs()\n: MapPairs[K, V, H, this->HashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapPairs\n[K, V, H, this->\nHashMap\n[K, V, H] ref] ref^",
            "title": "class HashMap"
        },
        {
            "location": "/collections-HashMap/#hashmap91k-k-v-v-h-hashfunction91k93-val93",
            "text": "[Source]  A quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.  class ref HashMap[K: K, V: V, H: HashFunction[K] val]",
            "title": "HashMap[K: K, V: V, H: HashFunction[K] val]"
        },
        {
            "location": "/collections-HashMap/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashMap/#create",
            "text": "[Source]  Create an array with space for prealloc elements without triggering a\nresize. Defaults to 6.  new ref create(\n  prealloc: USize val = seq)\n: HashMap[K, V, H] ref^",
            "title": "create"
        },
        {
            "location": "/collections-HashMap/#parameters",
            "text": "prealloc:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns",
            "text": "HashMap [K, V, H] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashMap/#size",
            "text": "[Source]  The number of items in the map.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-HashMap/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#space",
            "text": "[Source]  The available space in the map. Resize will happen when\nsize / space >= 0.75.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/collections-HashMap/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#apply",
            "text": "[Source]  Gets a value from the map. Raises an error if no such item exists.  fun box apply(\n  key: box->K!)\n: this->V ?",
            "title": "apply"
        },
        {
            "location": "/collections-HashMap/#parameters_1",
            "text": "key: box->K!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_3",
            "text": "this->V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#update",
            "text": "[Source]  Sets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.  fun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)",
            "title": "update"
        },
        {
            "location": "/collections-HashMap/#parameters_2",
            "text": "key: K  value: V",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_4",
            "text": "(V^ |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#upsert",
            "text": "[Source]  Combines a provided value with the current value for the provided key\nusing the provided function. If the provided key has not been added to\nthe map yet, it sets its value to the provided value.  As a simple example, say we had a map with I64 values and we wanted to\nadd 4 to the current value for key \"test\", which let's say is currently 2.\nWe call  m.upsert(\"test\", 4, {(x, y) => x - y })  This changes the value associated with \"test\" to -2.  If we have not yet added the key \"new-key\" to the map and we call  m.upsert(\"new-key\", 4, {(x, y) => x - y })  then \"new-key\" is added to the map with a value of -4.  Returns the value that we set the key to  fun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H] box)\n: V ?",
            "title": "upsert"
        },
        {
            "location": "/collections-HashMap/#parameters_3",
            "text": "key: K  value: V  f: {(V, V): V^}[K, V, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_5",
            "text": "V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#insert",
            "text": "[Source]  Set a value in the map. Returns the new value, allowing reuse.  fun ref insert(\n  key: K,\n  value: V)\n: V ?",
            "title": "insert"
        },
        {
            "location": "/collections-HashMap/#parameters_4",
            "text": "key: K  value: V",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_6",
            "text": "V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#insert_if_absent",
            "text": "[Source]  Set a value in the map if the key doesn't already exist in the Map.\nSaves an extra lookup when doing a pattern like:  if not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend  Returns the value, the same as  insert , allowing 'insert_if_absent'\nto be used as a drop-in replacement for  insert .  fun ref insert_if_absent(\n  key: K,\n  value: V)\n: V ?",
            "title": "insert_if_absent"
        },
        {
            "location": "/collections-HashMap/#parameters_5",
            "text": "key: K  value: V",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_7",
            "text": "V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#remove",
            "text": "[Source]  Delete a value from the map and return it. Raises an error if there was no\nvalue for the given key.  fun ref remove(\n  key: box->K!)\n: (K^ , V^) ?",
            "title": "remove"
        },
        {
            "location": "/collections-HashMap/#parameters_6",
            "text": "key: box->K!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_8",
            "text": "(K^ , V^) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#get_or_else",
            "text": "[Source]  Get the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.  fun box get_or_else(\n  key: box->K!,\n  alt: this->V)\n: this->V",
            "title": "get_or_else"
        },
        {
            "location": "/collections-HashMap/#parameters_7",
            "text": "key: box->K!  alt: this->V",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_9",
            "text": "this->V",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#contains",
            "text": "[Source]  Checks whether the map contains the key k  fun box contains(\n  k: box->K!)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/collections-HashMap/#parameters_8",
            "text": "k: box->K!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#concat",
            "text": "[Source]  Add K, V pairs from the iterator to the map.  fun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val",
            "title": "concat"
        },
        {
            "location": "/collections-HashMap/#parameters_9",
            "text": "iter:  Iterator [(K^ , V^)] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#add91optional-h2-hashfunction91this-k93-val93",
            "text": "[Source]  This with the new (key, value) mapping.  fun box add[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2] ref^",
            "title": "add[optional H2: HashFunction[this-&gt;K!] val]"
        },
        {
            "location": "/collections-HashMap/#parameters_10",
            "text": "key: this->K!  value: this->V!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_12",
            "text": "HashMap [this->K!, this->V!, H2] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#sub91optional-h2-hashfunction91this-k93-val93",
            "text": "[Source]  This without the given key.  fun box sub[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2] ref^",
            "title": "sub[optional H2: HashFunction[this-&gt;K!] val]"
        },
        {
            "location": "/collections-HashMap/#parameters_11",
            "text": "key: this->K!  value: this->V!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_13",
            "text": "HashMap [this->K!, this->V!, H2] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#next_index",
            "text": "[Source]  Given an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.  fun box next_index(\n  prev: USize val = seq)\n: USize val ?",
            "title": "next_index"
        },
        {
            "location": "/collections-HashMap/#parameters_12",
            "text": "prev:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_14",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#index",
            "text": "[Source]  Returns the key and value at a given index.\nRaise an error if the index is not populated.  fun box index(\n  i: USize val)\n: (this->K , this->V) ?",
            "title": "index"
        },
        {
            "location": "/collections-HashMap/#parameters_13",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_15",
            "text": "(this->K , this->V) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#compact",
            "text": "[Source]  Minimise the memory used for the map.  fun ref compact()\n: None val",
            "title": "compact"
        },
        {
            "location": "/collections-HashMap/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#clone91optional-h2-hashfunction91this-k93-val93",
            "text": "[Source]  Create a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.  fun box clone[optional H2: HashFunction[this->K!] val]()\n: HashMap[this->K!, this->V!, H2] ref^",
            "title": "clone[optional H2: HashFunction[this-&gt;K!] val]"
        },
        {
            "location": "/collections-HashMap/#returns_17",
            "text": "HashMap [this->K!, this->V!, H2] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#clear",
            "text": "[Source]  Remove all entries.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-HashMap/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#keys",
            "text": "[Source]  Return an iterator over the keys.  fun box keys()\n: MapKeys[K, V, H, this->HashMap[K, V, H] ref] ref^",
            "title": "keys"
        },
        {
            "location": "/collections-HashMap/#returns_19",
            "text": "MapKeys [K, V, H, this-> HashMap [K, V, H] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#values",
            "text": "[Source]  Return an iterator over the values.  fun box values()\n: MapValues[K, V, H, this->HashMap[K, V, H] ref] ref^",
            "title": "values"
        },
        {
            "location": "/collections-HashMap/#returns_20",
            "text": "MapValues [K, V, H, this-> HashMap [K, V, H] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#pairs",
            "text": "[Source]  Return an iterator over the keys and values.  fun box pairs()\n: MapPairs[K, V, H, this->HashMap[K, V, H] ref] ref^",
            "title": "pairs"
        },
        {
            "location": "/collections-HashMap/#returns_21",
            "text": "MapPairs [K, V, H, this-> HashMap [K, V, H] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-MapKeys/",
            "text": "MapKeys[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\u00b6\n\n\n[Source]\n\n\nAn iterator over the keys in a map.\n\n\nclass ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->K] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[M->K] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates an iterator for the given map.\n\n\nnew ref create(\n  map: M)\n: MapKeys[K, V, H, M] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapKeys\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.\n\n\nfun ref next()\n: M->K ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nM->K ?",
            "title": "class MapKeys"
        },
        {
            "location": "/collections-MapKeys/#mapkeys91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93",
            "text": "[Source]  An iterator over the keys in a map.  class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->K] ref",
            "title": "MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        },
        {
            "location": "/collections-MapKeys/#implements",
            "text": "Iterator [M->K] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-MapKeys/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapKeys/#create",
            "text": "[Source]  Creates an iterator for the given map.  new ref create(\n  map: M)\n: MapKeys[K, V, H, M] ref^",
            "title": "create"
        },
        {
            "location": "/collections-MapKeys/#parameters",
            "text": "map: M",
            "title": "Parameters"
        },
        {
            "location": "/collections-MapKeys/#returns",
            "text": "MapKeys [K, V, H, M] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-MapKeys/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-MapKeys/#has_next",
            "text": "[Source]  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-MapKeys/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-MapKeys/#next",
            "text": "[Source]  Returns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.  fun ref next()\n: M->K ?",
            "title": "next"
        },
        {
            "location": "/collections-MapKeys/#returns_2",
            "text": "M->K ?",
            "title": "Returns"
        },
        {
            "location": "/collections-MapValues/",
            "text": "MapValues[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\u00b6\n\n\n[Source]\n\n\nAn iterator over the values in a map.\n\n\nclass ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->V] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[M->V] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates an iterator for the given map.\n\n\nnew ref create(\n  map: M)\n: MapValues[K, V, H, M] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapValues\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.\n\n\nfun ref next()\n: M->V ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nM->V ?",
            "title": "class MapValues"
        },
        {
            "location": "/collections-MapValues/#mapvalues91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93",
            "text": "[Source]  An iterator over the values in a map.  class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->V] ref",
            "title": "MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        },
        {
            "location": "/collections-MapValues/#implements",
            "text": "Iterator [M->V] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-MapValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapValues/#create",
            "text": "[Source]  Creates an iterator for the given map.  new ref create(\n  map: M)\n: MapValues[K, V, H, M] ref^",
            "title": "create"
        },
        {
            "location": "/collections-MapValues/#parameters",
            "text": "map: M",
            "title": "Parameters"
        },
        {
            "location": "/collections-MapValues/#returns",
            "text": "MapValues [K, V, H, M] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-MapValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-MapValues/#has_next",
            "text": "[Source]  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-MapValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-MapValues/#next",
            "text": "[Source]  Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.  fun ref next()\n: M->V ?",
            "title": "next"
        },
        {
            "location": "/collections-MapValues/#returns_2",
            "text": "M->V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-MapPairs/",
            "text": "MapPairs[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\u00b6\n\n\n[Source]\n\n\nAn iterator over the keys and values in a map.\n\n\nclass ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M->K , M->V)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[(M->K , M->V)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates an iterator for the given map.\n\n\nnew ref create(\n  map: M)\n: MapPairs[K, V, H, M] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapPairs\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.\n\n\nfun ref next()\n: (M->K , M->V) ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(M->K , M->V) ?",
            "title": "class MapPairs"
        },
        {
            "location": "/collections-MapPairs/#mappairs91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93",
            "text": "[Source]  An iterator over the keys and values in a map.  class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M->K , M->V)] ref",
            "title": "MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        },
        {
            "location": "/collections-MapPairs/#implements",
            "text": "Iterator [(M->K , M->V)] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-MapPairs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapPairs/#create",
            "text": "[Source]  Creates an iterator for the given map.  new ref create(\n  map: M)\n: MapPairs[K, V, H, M] ref^",
            "title": "create"
        },
        {
            "location": "/collections-MapPairs/#parameters",
            "text": "map: M",
            "title": "Parameters"
        },
        {
            "location": "/collections-MapPairs/#returns",
            "text": "MapPairs [K, V, H, M] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-MapPairs/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-MapPairs/#has_next",
            "text": "[Source]  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-MapPairs/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-MapPairs/#next",
            "text": "[Source]  Returns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.  fun ref next()\n: (M->K , M->V) ?",
            "title": "next"
        },
        {
            "location": "/collections-MapPairs/#returns_2",
            "text": "(M->K , M->V) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/",
            "text": "ListNode[A: A]\n\u00b6\n\n\n[Source]\n\n\nA node in a list.\n\n\nclass ref ListNode[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a node. Initially, it is not in any list.\n\n\nnew ref create(\n  item: (A | None val) = seq)\n: ListNode[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nitem: (A | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNode\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturn the item, if we have one, otherwise raise an error.\n\n\nfun box apply()\n: this->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nReplace the item and return the previous one. Raise an error if we have no\nprevious value.\n\n\nfun ref update(\n  value: (A | None val))\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: (A | \nNone\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemove the item from the node, if we have one, otherwise raise an error.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nprepend\n\u00b6\n\n\n[Source]\n\n\nPrepend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is prepended. Returns true if \nthat\n was removed from another\nlist.\n\n\nfun ref prepend(\n  that: ListNode[A] ref)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nListNode\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAppend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is appended. Returns true if \nthat\n was removed from another\nlist.\n\n\nfun ref append(\n  that: ListNode[A] ref)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nListNode\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove a node from a list.\n\n\nfun ref remove()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhas_prev\n\u00b6\n\n\n[Source]\n\n\nReturn true if there is a previous node.\n\n\nfun box has_prev()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nReturn true if there is a next node.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nprev\n\u00b6\n\n\n[Source]\n\n\nReturn the previous node.\n\n\nfun box prev()\n: (this->ListNode[A] ref | None val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(this->\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturn the next node.\n\n\nfun box next()\n: (this->ListNode[A] ref | None val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(this->\nListNode\n[A] ref | \nNone\n val)",
            "title": "class ListNode"
        },
        {
            "location": "/collections-ListNode/#listnode91a-a93",
            "text": "[Source]  A node in a list.  class ref ListNode[A: A]",
            "title": "ListNode[A: A]"
        },
        {
            "location": "/collections-ListNode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListNode/#create",
            "text": "[Source]  Create a node. Initially, it is not in any list.  new ref create(\n  item: (A | None val) = seq)\n: ListNode[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-ListNode/#parameters",
            "text": "item: (A |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNode/#returns",
            "text": "ListNode [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-ListNode/#apply",
            "text": "[Source]  Return the item, if we have one, otherwise raise an error.  fun box apply()\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-ListNode/#returns_1",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#update",
            "text": "[Source]  Replace the item and return the previous one. Raise an error if we have no\nprevious value.  fun ref update(\n  value: (A | None val))\n: A^ ?",
            "title": "update"
        },
        {
            "location": "/collections-ListNode/#parameters_1",
            "text": "value: (A |  None  val)",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNode/#returns_2",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#pop",
            "text": "[Source]  Remove the item from the node, if we have one, otherwise raise an error.  fun ref pop()\n: A^ ?",
            "title": "pop"
        },
        {
            "location": "/collections-ListNode/#returns_3",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#prepend",
            "text": "[Source]  Prepend a node to this one. If  that  is already in a list, it is removed\nbefore it is prepended. Returns true if  that  was removed from another\nlist.  fun ref prepend(\n  that: ListNode[A] ref)\n: Bool val",
            "title": "prepend"
        },
        {
            "location": "/collections-ListNode/#parameters_2",
            "text": "that:  ListNode [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNode/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#append",
            "text": "[Source]  Append a node to this one. If  that  is already in a list, it is removed\nbefore it is appended. Returns true if  that  was removed from another\nlist.  fun ref append(\n  that: ListNode[A] ref)\n: Bool val",
            "title": "append"
        },
        {
            "location": "/collections-ListNode/#parameters_3",
            "text": "that:  ListNode [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNode/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#remove",
            "text": "[Source]  Remove a node from a list.  fun ref remove()\n: None val",
            "title": "remove"
        },
        {
            "location": "/collections-ListNode/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#has_prev",
            "text": "[Source]  Return true if there is a previous node.  fun box has_prev()\n: Bool val",
            "title": "has_prev"
        },
        {
            "location": "/collections-ListNode/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#has_next",
            "text": "[Source]  Return true if there is a next node.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-ListNode/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#prev",
            "text": "[Source]  Return the previous node.  fun box prev()\n: (this->ListNode[A] ref | None val)",
            "title": "prev"
        },
        {
            "location": "/collections-ListNode/#returns_9",
            "text": "(this-> ListNode [A] ref |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#next",
            "text": "[Source]  Return the next node.  fun box next()\n: (this->ListNode[A] ref | None val)",
            "title": "next"
        },
        {
            "location": "/collections-ListNode/#returns_10",
            "text": "(this-> ListNode [A] ref |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-List/",
            "text": "List[A: A]\n\u00b6\n\n\n[Source]\n\n\nA doubly linked list.\n\n\nclass ref List[A: A] is\n  Seq[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nSeq\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nDo nothing, but be compatible with Seq.\n\n\nnew ref create(\n  len: USize val = seq)\n: List[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nunit\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list from an element.\n\n\nnew ref unit(\n  a: A)\n: List[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nfrom\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list from the sequence passed in.\n\n\nnew ref from(\n  seq: Array[A^] ref)\n: List[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: \nArray\n[A^] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nreserve\n\u00b6\n\n\n[Source]\n\n\nDo nothing, but be compatible with Seq.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the number of items in the list.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val = seq)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nChange the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nindex\n\u00b6\n\n\n[Source]\n\n\nGets the i-th node, raising an error if the index is out of bounds.\n\n\nfun box index(\n  i: USize val)\n: this->ListNode[A] ref ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove the i-th node, raising an error if the index is out of bounds.\nThe removed node is returned.\n\n\nfun ref remove(\n  i: USize val)\n: ListNode[A] ref ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNode\n[A] ref ?\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nEmpties the list.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhead\n\u00b6\n\n\n[Source]\n\n\nGet the head of the list.\n\n\nfun box head()\n: this->ListNode[A] ref ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\ntail\n\u00b6\n\n\n[Source]\n\n\nGet the tail of the list.\n\n\nfun box tail()\n: this->ListNode[A] ref ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\nprepend_node\n\u00b6\n\n\n[Source]\n\n\nAdds a node to the head of the list.\n\n\nfun ref prepend_node(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend_node\n\u00b6\n\n\n[Source]\n\n\nAdds a node to the tail of the list.\n\n\nfun ref append_node(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend_list\n\u00b6\n\n\n[Source]\n\n\nRemove all nodes from that and append them to this.\n\n\nfun ref append_list(\n  that: List[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nList\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprepend_list\n\u00b6\n\n\n[Source]\n\n\nRemove all nodes from that and prepend them to this.\n\n\nfun ref prepend_list(\n  that: List[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nList\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdds a value to the tail of the list.\n\n\nfun ref push(\n  a: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemoves a value from the tail of the list.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\u00b6\n\n\n[Source]\n\n\nAdds a value to the head of the list.\n\n\nfun ref unshift(\n  a: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\u00b6\n\n\n[Source]\n\n\nRemoves a value from the head of the list.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAppend len elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\u00b6\n\n\n[Source]\n\n\nTruncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclone\n\u00b6\n\n\n[Source]\n\n\nClone the list.\n\n\nfun box clone()\n: List[this->A!] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nmap[B: B]\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by applying a function to every member of the list.\n\n\nfun box map[B: B](\n  f: {(this->A!): B^}[A, B] box)\n: List[B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): B^}[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\nflat_map[B: B]\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.\n\n\nfun box flat_map[B: B](\n  f: {(this->A!): List[B]}[A, B] box)\n: List[B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): List[B]}[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\nfilter\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list with those elements that satisfy a provided predicate.\n\n\nfun box filter(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nfold[B: B]\n\u00b6\n\n\n[Source]\n\n\nFolds the elements of the list using the supplied function.\n\n\nfun box fold[B: B](\n  f: {(B!, this->A!): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(B!, this->A!): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB\n\n\n\n\n\n\nevery\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element satisfies the provided predicate, false\notherwise.\n\n\nfun box every(\n  f: {(this->A!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexists\n\u00b6\n\n\n[Source]\n\n\nReturns true if at least one element satisfies the provided predicate,\nfalse otherwise.\n\n\nfun box exists(\n  f: {(this->A!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\npartition\n\u00b6\n\n\n[Source]\n\n\nBuilds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.\n\n\nfun box partition(\n  f: {(this->A!): Bool}[A] box)\n: (List[this->A!] ref^ , List[this->A!] ref^)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nList\n[this->A!] ref^ , \nList\n[this->A!] ref^)\n\n\n\n\n\n\ndrop\n\u00b6\n\n\n[Source]\n\n\nBuilds a list by dropping the first n elements.\n\n\nfun box drop(\n  n: USize val)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\ntake\n\u00b6\n\n\n[Source]\n\n\nBuilds a list of the first n elements.\n\n\nfun box take(\n  n: USize val)\n: List[this->A!] ref\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref\n\n\n\n\n\n\ntake_while\n\u00b6\n\n\n[Source]\n\n\nBuilds a list of elements satisfying the provided predicate until one does\nnot.\n\n\nfun box take_while(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by reversing the elements in the list.\n\n\nfun box reverse()\n: List[this->A!] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\ncontains[optional B: (A & \nHasEq\n[A!] #read)]\n\u00b6\n\n\n[Source]\n\n\nReturns true if the list contains the provided element, false otherwise.\n\n\nfun box contains[optional B: (A & HasEq[A!] #read)](\n  a: box->B)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: box->B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnodes\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box nodes()\n: ListNodes[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNodes\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nrnodes\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box rnodes()\n: ListNodes[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNodes\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator on the values in the list.\n\n\nfun box values()\n: ListValues[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListValues\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nrvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator on the values in the list.\n\n\nfun box rvalues()\n: ListValues[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListValues\n[A, this->\nListNode\n[A] ref] ref^",
            "title": "class List"
        },
        {
            "location": "/collections-List/#list91a-a93",
            "text": "[Source]  A doubly linked list.  class ref List[A: A] is\n  Seq[A] ref",
            "title": "List[A: A]"
        },
        {
            "location": "/collections-List/#implements",
            "text": "Seq [A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-List/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-List/#create",
            "text": "[Source]  Do nothing, but be compatible with Seq.  new ref create(\n  len: USize val = seq)\n: List[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-List/#parameters",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns",
            "text": "List [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#unit",
            "text": "[Source]  Builds a new list from an element.  new ref unit(\n  a: A)\n: List[A] ref^",
            "title": "unit"
        },
        {
            "location": "/collections-List/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_1",
            "text": "List [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#from",
            "text": "[Source]  Builds a new list from the sequence passed in.  new ref from(\n  seq: Array[A^] ref)\n: List[A] ref^",
            "title": "from"
        },
        {
            "location": "/collections-List/#parameters_2",
            "text": "seq:  Array [A^] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_2",
            "text": "List [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-List/#reserve",
            "text": "[Source]  Do nothing, but be compatible with Seq.  fun ref reserve(\n  len: USize val)\n: None val",
            "title": "reserve"
        },
        {
            "location": "/collections-List/#parameters_3",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#size",
            "text": "[Source]  Returns the number of items in the list.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-List/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#apply",
            "text": "[Source]  Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val = seq)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-List/#parameters_4",
            "text": "i:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_5",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#update",
            "text": "[Source]  Change the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?",
            "title": "update"
        },
        {
            "location": "/collections-List/#parameters_5",
            "text": "i:  USize  val  value: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_6",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#index",
            "text": "[Source]  Gets the i-th node, raising an error if the index is out of bounds.  fun box index(\n  i: USize val)\n: this->ListNode[A] ref ?",
            "title": "index"
        },
        {
            "location": "/collections-List/#parameters_6",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_7",
            "text": "this-> ListNode [A] ref ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#remove",
            "text": "[Source]  Remove the i-th node, raising an error if the index is out of bounds.\nThe removed node is returned.  fun ref remove(\n  i: USize val)\n: ListNode[A] ref ?",
            "title": "remove"
        },
        {
            "location": "/collections-List/#parameters_7",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_8",
            "text": "ListNode [A] ref ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#clear",
            "text": "[Source]  Empties the list.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-List/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#head",
            "text": "[Source]  Get the head of the list.  fun box head()\n: this->ListNode[A] ref ?",
            "title": "head"
        },
        {
            "location": "/collections-List/#returns_10",
            "text": "this-> ListNode [A] ref ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#tail",
            "text": "[Source]  Get the tail of the list.  fun box tail()\n: this->ListNode[A] ref ?",
            "title": "tail"
        },
        {
            "location": "/collections-List/#returns_11",
            "text": "this-> ListNode [A] ref ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#prepend_node",
            "text": "[Source]  Adds a node to the head of the list.  fun ref prepend_node(\n  node: ListNode[A] ref)\n: None val",
            "title": "prepend_node"
        },
        {
            "location": "/collections-List/#parameters_8",
            "text": "node:  ListNode [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#append_node",
            "text": "[Source]  Adds a node to the tail of the list.  fun ref append_node(\n  node: ListNode[A] ref)\n: None val",
            "title": "append_node"
        },
        {
            "location": "/collections-List/#parameters_9",
            "text": "node:  ListNode [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#append_list",
            "text": "[Source]  Remove all nodes from that and append them to this.  fun ref append_list(\n  that: List[A] ref)\n: None val",
            "title": "append_list"
        },
        {
            "location": "/collections-List/#parameters_10",
            "text": "that:  List [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#prepend_list",
            "text": "[Source]  Remove all nodes from that and prepend them to this.  fun ref prepend_list(\n  that: List[A] ref)\n: None val",
            "title": "prepend_list"
        },
        {
            "location": "/collections-List/#parameters_11",
            "text": "that:  List [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#push",
            "text": "[Source]  Adds a value to the tail of the list.  fun ref push(\n  a: A)\n: None val",
            "title": "push"
        },
        {
            "location": "/collections-List/#parameters_12",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#pop",
            "text": "[Source]  Removes a value from the tail of the list.  fun ref pop()\n: A^ ?",
            "title": "pop"
        },
        {
            "location": "/collections-List/#returns_17",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#unshift",
            "text": "[Source]  Adds a value to the head of the list.  fun ref unshift(\n  a: A)\n: None val",
            "title": "unshift"
        },
        {
            "location": "/collections-List/#parameters_13",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#shift",
            "text": "[Source]  Removes a value from the head of the list.  fun ref shift()\n: A^ ?",
            "title": "shift"
        },
        {
            "location": "/collections-List/#returns_19",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#append",
            "text": "[Source]  Append len elements from a sequence, starting from the given offset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "append"
        },
        {
            "location": "/collections-List/#parameters_14",
            "text": "seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_20",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#concat",
            "text": "[Source]  Add len iterated elements to the end of the list, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "concat"
        },
        {
            "location": "/collections-List/#parameters_15",
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_21",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#truncate",
            "text": "[Source]  Truncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val",
            "title": "truncate"
        },
        {
            "location": "/collections-List/#parameters_16",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_22",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#clone",
            "text": "[Source]  Clone the list.  fun box clone()\n: List[this->A!] ref^",
            "title": "clone"
        },
        {
            "location": "/collections-List/#returns_23",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#map91b-b93",
            "text": "[Source]  Builds a new list by applying a function to every member of the list.  fun box map[B: B](\n  f: {(this->A!): B^}[A, B] box)\n: List[B] ref^",
            "title": "map[B: B]"
        },
        {
            "location": "/collections-List/#parameters_17",
            "text": "f: {(this->A!): B^}[A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_24",
            "text": "List [B] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#flat_map91b-b93",
            "text": "[Source]  Builds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.  fun box flat_map[B: B](\n  f: {(this->A!): List[B]}[A, B] box)\n: List[B] ref^",
            "title": "flat_map[B: B]"
        },
        {
            "location": "/collections-List/#parameters_18",
            "text": "f: {(this->A!): List[B]}[A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_25",
            "text": "List [B] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#filter",
            "text": "[Source]  Builds a new list with those elements that satisfy a provided predicate.  fun box filter(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^",
            "title": "filter"
        },
        {
            "location": "/collections-List/#parameters_19",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_26",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#fold91b-b93",
            "text": "[Source]  Folds the elements of the list using the supplied function.  fun box fold[B: B](\n  f: {(B!, this->A!): B^}[A, B] box,\n  acc: B)\n: B",
            "title": "fold[B: B]"
        },
        {
            "location": "/collections-List/#parameters_20",
            "text": "f: {(B!, this->A!): B^}[A, B] box  acc: B",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_27",
            "text": "B",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#every",
            "text": "[Source]  Returns true if every element satisfies the provided predicate, false\notherwise.  fun box every(\n  f: {(this->A!): Bool}[A] box)\n: Bool val",
            "title": "every"
        },
        {
            "location": "/collections-List/#parameters_21",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_28",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#exists",
            "text": "[Source]  Returns true if at least one element satisfies the provided predicate,\nfalse otherwise.  fun box exists(\n  f: {(this->A!): Bool}[A] box)\n: Bool val",
            "title": "exists"
        },
        {
            "location": "/collections-List/#parameters_22",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_29",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#partition",
            "text": "[Source]  Builds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.  fun box partition(\n  f: {(this->A!): Bool}[A] box)\n: (List[this->A!] ref^ , List[this->A!] ref^)",
            "title": "partition"
        },
        {
            "location": "/collections-List/#parameters_23",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_30",
            "text": "( List [this->A!] ref^ ,  List [this->A!] ref^)",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#drop",
            "text": "[Source]  Builds a list by dropping the first n elements.  fun box drop(\n  n: USize val)\n: List[this->A!] ref^",
            "title": "drop"
        },
        {
            "location": "/collections-List/#parameters_24",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_31",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#take",
            "text": "[Source]  Builds a list of the first n elements.  fun box take(\n  n: USize val)\n: List[this->A!] ref",
            "title": "take"
        },
        {
            "location": "/collections-List/#parameters_25",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_32",
            "text": "List [this->A!] ref",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#take_while",
            "text": "[Source]  Builds a list of elements satisfying the provided predicate until one does\nnot.  fun box take_while(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^",
            "title": "take_while"
        },
        {
            "location": "/collections-List/#parameters_26",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_33",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#reverse",
            "text": "[Source]  Builds a new list by reversing the elements in the list.  fun box reverse()\n: List[this->A!] ref^",
            "title": "reverse"
        },
        {
            "location": "/collections-List/#returns_34",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#contains91optional-b-a-haseq91a93-read93",
            "text": "[Source]  Returns true if the list contains the provided element, false otherwise.  fun box contains[optional B: (A & HasEq[A!] #read)](\n  a: box->B)\n: Bool val",
            "title": "contains[optional B: (A &amp; HasEq[A!] #read)]"
        },
        {
            "location": "/collections-List/#parameters_27",
            "text": "a: box->B",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_35",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#nodes",
            "text": "[Source]  Return an iterator on the nodes in the list.  fun box nodes()\n: ListNodes[A, this->ListNode[A] ref] ref^",
            "title": "nodes"
        },
        {
            "location": "/collections-List/#returns_36",
            "text": "ListNodes [A, this-> ListNode [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#rnodes",
            "text": "[Source]  Return an iterator on the nodes in the list.  fun box rnodes()\n: ListNodes[A, this->ListNode[A] ref] ref^",
            "title": "rnodes"
        },
        {
            "location": "/collections-List/#returns_37",
            "text": "ListNodes [A, this-> ListNode [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#values",
            "text": "[Source]  Return an iterator on the values in the list.  fun box values()\n: ListValues[A, this->ListNode[A] ref] ref^",
            "title": "values"
        },
        {
            "location": "/collections-List/#returns_38",
            "text": "ListValues [A, this-> ListNode [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#rvalues",
            "text": "[Source]  Return an iterator on the values in the list.  fun box rvalues()\n: ListValues[A, this->ListNode[A] ref] ref^",
            "title": "rvalues"
        },
        {
            "location": "/collections-List/#returns_39",
            "text": "ListValues [A, this-> ListNode [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNodes/",
            "text": "ListNodes[A: A, N: \nListNode\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nIterate over the nodes in a list.\n\n\nclass ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[N] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nKeep the next list node to be examined.\n\n\nnew ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListNodes[A, N] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhead: (N | \nNone\n val)\n\n\nreverse: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNodes\n[A, N] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nIf we have a list node, we have more values.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nGet the list node and replace it with the next one.\n\n\nfun ref next()\n: N ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nN ?",
            "title": "class ListNodes"
        },
        {
            "location": "/collections-ListNodes/#listnodes91a-a-n-listnode91a93-read93",
            "text": "[Source]  Iterate over the nodes in a list.  class ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N] ref",
            "title": "ListNodes[A: A, N: ListNode[A] #read]"
        },
        {
            "location": "/collections-ListNodes/#implements",
            "text": "Iterator [N] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-ListNodes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListNodes/#create",
            "text": "[Source]  Keep the next list node to be examined.  new ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListNodes[A, N] ref^",
            "title": "create"
        },
        {
            "location": "/collections-ListNodes/#parameters",
            "text": "head: (N |  None  val)  reverse:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNodes/#returns",
            "text": "ListNodes [A, N] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNodes/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-ListNodes/#has_next",
            "text": "[Source]  If we have a list node, we have more values.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-ListNodes/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNodes/#next",
            "text": "[Source]  Get the list node and replace it with the next one.  fun ref next()\n: N ?",
            "title": "next"
        },
        {
            "location": "/collections-ListNodes/#returns_2",
            "text": "N ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListValues/",
            "text": "ListValues[A: A, N: \nListNode\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nIterate over the values in a list.\n\n\nclass ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N->A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[N->A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nKeep the next list node to be examined.\n\n\nnew ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListValues[A, N] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhead: (N | \nNone\n val)\n\n\nreverse: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListValues\n[A, N] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nIf we have a list node, we have more values.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nGet the value of the list node and replace it with the next one.\n\n\nfun ref next()\n: N->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nN->A ?",
            "title": "class ListValues"
        },
        {
            "location": "/collections-ListValues/#listvalues91a-a-n-listnode91a93-read93",
            "text": "[Source]  Iterate over the values in a list.  class ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N->A] ref",
            "title": "ListValues[A: A, N: ListNode[A] #read]"
        },
        {
            "location": "/collections-ListValues/#implements",
            "text": "Iterator [N->A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-ListValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListValues/#create",
            "text": "[Source]  Keep the next list node to be examined.  new ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListValues[A, N] ref^",
            "title": "create"
        },
        {
            "location": "/collections-ListValues/#parameters",
            "text": "head: (N |  None  val)  reverse:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListValues/#returns",
            "text": "ListValues [A, N] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-ListValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-ListValues/#has_next",
            "text": "[Source]  If we have a list node, we have more values.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-ListValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListValues/#next",
            "text": "[Source]  Get the value of the list node and replace it with the next one.  fun ref next()\n: N->A ?",
            "title": "next"
        },
        {
            "location": "/collections-ListValues/#returns_2",
            "text": "N->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-Hashable/",
            "text": "Hashable\n\u00b6\n\n\n[Source]\n\n\nAnything with a hash method is hashable.\n\n\ninterface ref Hashable\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val",
            "title": "interface Hashable"
        },
        {
            "location": "/collections-Hashable/#hashable",
            "text": "[Source]  Anything with a hash method is hashable.  interface ref Hashable",
            "title": "Hashable"
        },
        {
            "location": "/collections-Hashable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Hashable/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-Hashable/#returns",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Hashable64/",
            "text": "Hashable64\n\u00b6\n\n\n[Source]\n\n\nA version of Hashable that returns 64-bit hashes on every platform.\n\n\ninterface ref Hashable64\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val",
            "title": "interface Hashable64"
        },
        {
            "location": "/collections-Hashable64/#hashable64",
            "text": "[Source]  A version of Hashable that returns 64-bit hashes on every platform.  interface ref Hashable64",
            "title": "Hashable64"
        },
        {
            "location": "/collections-Hashable64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Hashable64/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-Hashable64/#returns",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction/",
            "text": "HashFunction[A: A]\n\u00b6\n\n\n[Source]\n\n\nA pluggable hash function.\n\n\ninterface val HashFunction[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nData structures create instances internally. Use a primitive if possible.\n\n\nnew val create()\n: HashFunction[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashFunction\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nCalculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.\n\n\nfun box hash(\n  x: box->A!)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nDetermine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.\n\n\nfun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\ny: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface HashFunction"
        },
        {
            "location": "/collections-HashFunction/#hashfunction91a-a93",
            "text": "[Source]  A pluggable hash function.  interface val HashFunction[A: A]",
            "title": "HashFunction[A: A]"
        },
        {
            "location": "/collections-HashFunction/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashFunction/#create",
            "text": "[Source]  Data structures create instances internally. Use a primitive if possible.  new val create()\n: HashFunction[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashFunction/#returns",
            "text": "HashFunction [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashFunction/#hash",
            "text": "[Source]  Calculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.  fun box hash(\n  x: box->A!)\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-HashFunction/#parameters",
            "text": "x: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashFunction/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction/#eq",
            "text": "[Source]  Determine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.  fun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashFunction/#parameters_1",
            "text": "x: box->A!  y: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashFunction/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction64/",
            "text": "HashFunction64[A: A]\n\u00b6\n\n\n[Source]\n\n\nA pluggable hash function with 64-bit hashes.\n\n\ninterface val HashFunction64[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nData structures create instances internally. Use a primitive if possible.\n\n\nnew val create()\n: HashFunction64[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashFunction64\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nCalculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.\n\n\nfun box hash64(\n  x: box->A!)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nDetermine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.\n\n\nfun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\ny: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface HashFunction64"
        },
        {
            "location": "/collections-HashFunction64/#hashfunction6491a-a93",
            "text": "[Source]  A pluggable hash function with 64-bit hashes.  interface val HashFunction64[A: A]",
            "title": "HashFunction64[A: A]"
        },
        {
            "location": "/collections-HashFunction64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashFunction64/#create",
            "text": "[Source]  Data structures create instances internally. Use a primitive if possible.  new val create()\n: HashFunction64[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashFunction64/#returns",
            "text": "HashFunction64 [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashFunction64/#hash64",
            "text": "[Source]  Calculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.  fun box hash64(\n  x: box->A!)\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-HashFunction64/#parameters",
            "text": "x: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashFunction64/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction64/#eq",
            "text": "[Source]  Determine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.  fun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashFunction64/#parameters_1",
            "text": "x: box->A!  y: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashFunction64/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq/",
            "text": "HashEq[A: (\nHashable\n #read & \nEquatable\n[A] #read)]\n\u00b6\n\n\n[Source]\n\n\nprimitive val HashEq[A: (Hashable #read & Equatable[A] #read)] is\n  HashFunction[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashFunction\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashEq[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashEq\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nUse the hash function from the type parameter.\n\n\nfun box hash(\n  x: box->A)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nUse the structural equality function from the type parameter.\n\n\nfun box eq(\n  x: box->A,\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashEq[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashEq\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive HashEq"
        },
        {
            "location": "/collections-HashEq/#hasheq91a-hashable-read-equatable91a93-read93",
            "text": "[Source]  primitive val HashEq[A: (Hashable #read & Equatable[A] #read)] is\n  HashFunction[A] val",
            "title": "HashEq[A: (Hashable #read &amp; Equatable[A] #read)]"
        },
        {
            "location": "/collections-HashEq/#implements",
            "text": "HashFunction [A] val",
            "title": "Implements"
        },
        {
            "location": "/collections-HashEq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashEq/#create",
            "text": "[Source]  new val create()\n: HashEq[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashEq/#returns",
            "text": "HashEq [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashEq/#hash",
            "text": "[Source]  Use the hash function from the type parameter.  fun box hash(\n  x: box->A)\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-HashEq/#parameters",
            "text": "x: box->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq/#eq",
            "text": "[Source]  Use the structural equality function from the type parameter.  fun box eq(\n  x: box->A,\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashEq/#parameters_1",
            "text": "x: box->A  y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq/#ne",
            "text": "[Source]  fun box ne(\n  that: HashEq[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashEq/#parameters_2",
            "text": "that:  HashEq [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq64/",
            "text": "HashEq64[A: (\nHashable64\n #read & \nEquatable\n[A] #read)]\n\u00b6\n\n\n[Source]\n\n\nprimitive val HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is\n  HashFunction64[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashFunction64\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashEq64[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashEq64\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nUse the hash function from the type parameter.\n\n\nfun box hash64(\n  x: box->A)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nUse the structural equality function from the type parameter.\n\n\nfun box eq(\n  x: box->A,\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashEq64[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashEq64\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive HashEq64"
        },
        {
            "location": "/collections-HashEq64/#hasheq6491a-hashable64-read-equatable91a93-read93",
            "text": "[Source]  primitive val HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is\n  HashFunction64[A] val",
            "title": "HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]"
        },
        {
            "location": "/collections-HashEq64/#implements",
            "text": "HashFunction64 [A] val",
            "title": "Implements"
        },
        {
            "location": "/collections-HashEq64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashEq64/#create",
            "text": "[Source]  new val create()\n: HashEq64[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashEq64/#returns",
            "text": "HashEq64 [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashEq64/#hash64",
            "text": "[Source]  Use the hash function from the type parameter.  fun box hash64(\n  x: box->A)\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-HashEq64/#parameters",
            "text": "x: box->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq64/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq64/#eq",
            "text": "[Source]  Use the structural equality function from the type parameter.  fun box eq(\n  x: box->A,\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashEq64/#parameters_1",
            "text": "x: box->A  y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq64/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq64/#ne",
            "text": "[Source]  fun box ne(\n  that: HashEq64[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashEq64/#parameters_2",
            "text": "that:  HashEq64 [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq64/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/",
            "text": "HashIs[A: A]\n\u00b6\n\n\n[Source]\n\n\nprimitive val HashIs[A: A] is\n  HashFunction[A] val,\n  HashFunction64[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashFunction\n[A] val\n\n\nHashFunction64\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashIs[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashIs\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nHash the identity rather than the contents.\n\n\nfun box hash(\n  x: box->A!)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nHash the identity rather than the contents.\n\n\nfun box hash64(\n  x: box->A!)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nDetermine equality by identity rather than structurally.\n\n\nfun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\ny: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashIs[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashIs\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive HashIs"
        },
        {
            "location": "/collections-HashIs/#hashis91a-a93",
            "text": "[Source]  primitive val HashIs[A: A] is\n  HashFunction[A] val,\n  HashFunction64[A] val",
            "title": "HashIs[A: A]"
        },
        {
            "location": "/collections-HashIs/#implements",
            "text": "HashFunction [A] val  HashFunction64 [A] val",
            "title": "Implements"
        },
        {
            "location": "/collections-HashIs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashIs/#create",
            "text": "[Source]  new val create()\n: HashIs[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashIs/#returns",
            "text": "HashIs [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashIs/#hash",
            "text": "[Source]  Hash the identity rather than the contents.  fun box hash(\n  x: box->A!)\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-HashIs/#parameters",
            "text": "x: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashIs/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/#hash64",
            "text": "[Source]  Hash the identity rather than the contents.  fun box hash64(\n  x: box->A!)\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-HashIs/#parameters_1",
            "text": "x: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashIs/#returns_2",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/#eq",
            "text": "[Source]  Determine equality by identity rather than structurally.  fun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashIs/#parameters_2",
            "text": "x: box->A!  y: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashIs/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/#ne",
            "text": "[Source]  fun box ne(\n  that: HashIs[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashIs/#parameters_3",
            "text": "that:  HashIs [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashIs/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/",
            "text": "HashByteSeq\n\u00b6\n\n\n[Source]\n\n\nHash and equality functions for arbitrary ByteSeq.\n\n\nprimitive val HashByteSeq is\n  HashFunction[(String box | Array[U8 val] box)] val,\n  HashFunction64[(String box | Array[U8 val] box)] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashFunction\n[(\nString\n box | \nArray\n[\nU8\n val] box)] val\n\n\nHashFunction64\n[(\nString\n box | \nArray\n[\nU8\n val] box)] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashByteSeq val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashByteSeq\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash(\n  x: (String box | Array[U8 val] box))\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64(\n  x: (String box | Array[U8 val] box))\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\ny: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashByteSeq val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashByteSeq\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive HashByteSeq"
        },
        {
            "location": "/collections-HashByteSeq/#hashbyteseq",
            "text": "[Source]  Hash and equality functions for arbitrary ByteSeq.  primitive val HashByteSeq is\n  HashFunction[(String box | Array[U8 val] box)] val,\n  HashFunction64[(String box | Array[U8 val] box)] val",
            "title": "HashByteSeq"
        },
        {
            "location": "/collections-HashByteSeq/#implements",
            "text": "HashFunction [( String  box |  Array [ U8  val] box)] val  HashFunction64 [( String  box |  Array [ U8  val] box)] val",
            "title": "Implements"
        },
        {
            "location": "/collections-HashByteSeq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashByteSeq/#create",
            "text": "[Source]  new val create()\n: HashByteSeq val^",
            "title": "create"
        },
        {
            "location": "/collections-HashByteSeq/#returns",
            "text": "HashByteSeq  val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashByteSeq/#hash",
            "text": "[Source]  fun box hash(\n  x: (String box | Array[U8 val] box))\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-HashByteSeq/#parameters",
            "text": "x: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashByteSeq/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/#hash64",
            "text": "[Source]  fun box hash64(\n  x: (String box | Array[U8 val] box))\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-HashByteSeq/#parameters_1",
            "text": "x: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashByteSeq/#returns_2",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/#eq",
            "text": "[Source]  fun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashByteSeq/#parameters_2",
            "text": "x: ( String  box |  Array [ U8  val] box)  y: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashByteSeq/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/#ne",
            "text": "[Source]  fun box ne(\n  that: HashByteSeq val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashByteSeq/#parameters_3",
            "text": "that:  HashByteSeq  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashByteSeq/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flag/",
            "text": "Flag[A: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nInteger\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nA flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.\n\n\ninterface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[A] val)]\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA",
            "title": "interface Flag"
        },
        {
            "location": "/collections-Flag/#flag91a-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93",
            "text": "[Source]  A flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.  interface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[A] val)]",
            "title": "Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"
        },
        {
            "location": "/collections-Flag/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Flag/#value",
            "text": "[Source]  fun box value()\n: A",
            "title": "value"
        },
        {
            "location": "/collections-Flag/#returns",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/",
            "text": "Flags[A: \nFlag\n[B] val, optional B: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nInteger\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nFlags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:\n\n\nprimitive SSE\n  fun value(): U64 => 1\n\n\nprimitive AVX\n  fun value(): U64 => 2\n\n\nprimitive RDTSCP\n  fun value(): U64 => 4\n\n\ntype Features is Flags[(SSE | AVX | RDTSCP)]\n\n\nType parameter B is the unlying field used to store the flags.\n\n\nclass ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[B] val)] is\n  Comparable[Flags[A, B] box] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nComparable\n[\nFlags\n[A, B] box] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create()\n: Flags[A, B] iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nReturns the bit encoding of the set flags.\n\n\nfun box value()\n: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flag is set.\n\n\nfun box apply(\n  flag: A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nall\n\u00b6\n\n\n[Source]\n\n\nSets all bits, including undefined flags.\n\n\nfun ref all()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nUnsets all flags.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset\n\u00b6\n\n\n[Source]\n\n\nSets the flag.\n\n\nfun ref set(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\u00b6\n\n\n[Source]\n\n\nUnsets the flag.\n\n\nfun ref unset(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nflip\n\u00b6\n\n\n[Source]\n\n\nSets the flag if it is unset, unsets the flag if it is set.\n\n\nfun ref flip(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunion\n\u00b6\n\n\n[Source]\n\n\nThe union of this and that.\n\n\nfun ref union(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nintersect\n\u00b6\n\n\n[Source]\n\n\nThe intersection of this and that.\n\n\nfun ref intersect(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndifference\n\u00b6\n\n\n[Source]\n\n\nThe symmetric difference of this and that.\n\n\nfun ref difference(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nUnset flags that are set in that.\n\n\nfun ref remove(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nThis with the flag set.\n\n\nfun box add(\n  flag: A)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nThis with the flag unset.\n\n\nfun box sub(\n  flag: A)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_or\n\u00b6\n\n\n[Source]\n\n\nThe union of this and that.\n\n\nfun box op_or(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_and\n\u00b6\n\n\n[Source]\n\n\nThe intersection of this and that.\n\n\nfun box op_and(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\n[Source]\n\n\nThe symmetric difference of this and that.\n\n\nfun box op_xor(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nwithout\n\u00b6\n\n\n[Source]\n\n\nThe flags in this that are not in that.\n\n\nfun box without(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nclone\n\u00b6\n\n\n[Source]\n\n\nCreate a clone.\n\n\nfun box clone()\n: Flags[A, B] iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturns true if this has the same flags set as that.\n\n\nfun box eq(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.\n\n\nfun box lt(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.\n\n\nfun box le(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.\n\n\nfun box gt(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.\n\n\nfun box ge(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nfun box compare(\n  that: Flags[A, B] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class Flags"
        },
        {
            "location": "/collections-Flags/#flags91a-flag91b93-val-optional-b-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91b93-val93",
            "text": "[Source]  Flags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:  primitive SSE\n  fun value(): U64 => 1  primitive AVX\n  fun value(): U64 => 2  primitive RDTSCP\n  fun value(): U64 => 4  type Features is Flags[(SSE | AVX | RDTSCP)]  Type parameter B is the unlying field used to store the flags.  class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[B] val)] is\n  Comparable[Flags[A, B] box] ref",
            "title": "Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]"
        },
        {
            "location": "/collections-Flags/#implements",
            "text": "Comparable [ Flags [A, B] box] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-Flags/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Flags/#create",
            "text": "[Source]  new iso create()\n: Flags[A, B] iso^",
            "title": "create"
        },
        {
            "location": "/collections-Flags/#returns",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Flags/#value",
            "text": "[Source]  Returns the bit encoding of the set flags.  fun box value()\n: B",
            "title": "value"
        },
        {
            "location": "/collections-Flags/#returns_1",
            "text": "B",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#apply",
            "text": "[Source]  Returns true if the flag is set.  fun box apply(\n  flag: A)\n: Bool val",
            "title": "apply"
        },
        {
            "location": "/collections-Flags/#parameters",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#all",
            "text": "[Source]  Sets all bits, including undefined flags.  fun ref all()\n: None val",
            "title": "all"
        },
        {
            "location": "/collections-Flags/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#clear",
            "text": "[Source]  Unsets all flags.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-Flags/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#set",
            "text": "[Source]  Sets the flag.  fun ref set(\n  flag: A)\n: None val",
            "title": "set"
        },
        {
            "location": "/collections-Flags/#parameters_1",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#unset",
            "text": "[Source]  Unsets the flag.  fun ref unset(\n  flag: A)\n: None val",
            "title": "unset"
        },
        {
            "location": "/collections-Flags/#parameters_2",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#flip",
            "text": "[Source]  Sets the flag if it is unset, unsets the flag if it is set.  fun ref flip(\n  flag: A)\n: None val",
            "title": "flip"
        },
        {
            "location": "/collections-Flags/#parameters_3",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#union",
            "text": "[Source]  The union of this and that.  fun ref union(\n  that: Flags[A, B] box)\n: None val",
            "title": "union"
        },
        {
            "location": "/collections-Flags/#parameters_4",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#intersect",
            "text": "[Source]  The intersection of this and that.  fun ref intersect(\n  that: Flags[A, B] box)\n: None val",
            "title": "intersect"
        },
        {
            "location": "/collections-Flags/#parameters_5",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#difference",
            "text": "[Source]  The symmetric difference of this and that.  fun ref difference(\n  that: Flags[A, B] box)\n: None val",
            "title": "difference"
        },
        {
            "location": "/collections-Flags/#parameters_6",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#remove",
            "text": "[Source]  Unset flags that are set in that.  fun ref remove(\n  that: Flags[A, B] box)\n: None val",
            "title": "remove"
        },
        {
            "location": "/collections-Flags/#parameters_7",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#add",
            "text": "[Source]  This with the flag set.  fun box add(\n  flag: A)\n: Flags[A, B] iso^",
            "title": "add"
        },
        {
            "location": "/collections-Flags/#parameters_8",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_12",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#sub",
            "text": "[Source]  This with the flag unset.  fun box sub(\n  flag: A)\n: Flags[A, B] iso^",
            "title": "sub"
        },
        {
            "location": "/collections-Flags/#parameters_9",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_13",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#op_or",
            "text": "[Source]  The union of this and that.  fun box op_or(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^",
            "title": "op_or"
        },
        {
            "location": "/collections-Flags/#parameters_10",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_14",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#op_and",
            "text": "[Source]  The intersection of this and that.  fun box op_and(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^",
            "title": "op_and"
        },
        {
            "location": "/collections-Flags/#parameters_11",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_15",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#op_xor",
            "text": "[Source]  The symmetric difference of this and that.  fun box op_xor(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^",
            "title": "op_xor"
        },
        {
            "location": "/collections-Flags/#parameters_12",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_16",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#without",
            "text": "[Source]  The flags in this that are not in that.  fun box without(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^",
            "title": "without"
        },
        {
            "location": "/collections-Flags/#parameters_13",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_17",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#clone",
            "text": "[Source]  Create a clone.  fun box clone()\n: Flags[A, B] iso^",
            "title": "clone"
        },
        {
            "location": "/collections-Flags/#returns_18",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#eq",
            "text": "[Source]  Returns true if this has the same flags set as that.  fun box eq(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-Flags/#parameters_14",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_19",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#lt",
            "text": "[Source]  Returns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.  fun box lt(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/collections-Flags/#parameters_15",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_20",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#le",
            "text": "[Source]  Returns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.  fun box le(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/collections-Flags/#parameters_16",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_21",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#gt",
            "text": "[Source]  Returns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.  fun box gt(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/collections-Flags/#parameters_17",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#ge",
            "text": "[Source]  Returns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.  fun box ge(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/collections-Flags/#parameters_18",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_23",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#compare",
            "text": "[Source]  fun box compare(\n  that: Flags[A, B] box)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/collections-Flags/#parameters_19",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_24",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#ne",
            "text": "[Source]  fun box ne(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-Flags/#parameters_20",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent--index/",
            "text": "Persistent Collections Package\n\u00b6\n\n\nList - A persistent list with functional transformations.\n\n\nMap - A persistent map based on the Compressed Hash Array Mapped Prefix-tree\nfrom 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\nCollections' by Michael J. Steindorfer and Jurgen J. Vinju.\n\n\nSet - A persistent set implemented as a persistent map of an alias of a type\nto itself.\n\n\nVec - A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\nTrees' by Phil Bagwell.\n\n\nPublic Types\n\u00b6\n\n\n\n\nclass Vec\n\n\nclass VecKeys\n\n\nclass VecValues\n\n\nclass VecPairs\n\n\ntype Set\n\n\ntype SetIs\n\n\nclass HashSet\n\n\ntype Map\n\n\ntype MapIs\n\n\nclass HashMap\n\n\nclass MapKeys\n\n\nclass MapValues\n\n\nclass MapPairs\n\n\ntype List\n\n\nprimitive Lists\n\n\nprimitive Nil\n\n\nclass Cons",
            "title": "Package"
        },
        {
            "location": "/collections-persistent--index/#persistent-collections-package",
            "text": "List - A persistent list with functional transformations.  Map - A persistent map based on the Compressed Hash Array Mapped Prefix-tree\nfrom 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\nCollections' by Michael J. Steindorfer and Jurgen J. Vinju.  Set - A persistent set implemented as a persistent map of an alias of a type\nto itself.  Vec - A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\nTrees' by Phil Bagwell.",
            "title": "Persistent Collections Package"
        },
        {
            "location": "/collections-persistent--index/#public-types",
            "text": "class Vec  class VecKeys  class VecValues  class VecPairs  type Set  type SetIs  class HashSet  type Map  type MapIs  class HashMap  class MapKeys  class MapValues  class MapPairs  type List  primitive Lists  primitive Nil  class Cons",
            "title": "Public Types"
        },
        {
            "location": "/collections-persistent-Vec/",
            "text": "Vec[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nA persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\nTrees' by Phil Bagwell.\n\n\nclass val Vec[A: Any #share]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Vec[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturn the amount of values in the vector.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: val->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nReturn a vector with the i-th element changed, raising an error if the\nindex is out of bounds.\n\n\nfun val update(\n  i: USize val,\n  value: val->A)\n: Vec[A] val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: val->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\ninsert\n\u00b6\n\n\n[Source]\n\n\nReturn a vector with an element inserted. Elements after this are moved\nup by one index, extending the vector. An out of bounds index raises an\nerror.\n\n\nfun val insert(\n  i: USize val,\n  value: val->A)\n: Vec[A] val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: val->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\ndelete\n\u00b6\n\n\n[Source]\n\n\nReturn a vector with an element deleted. Elements after this are moved\ndown by one index, compacting the vector. An out of bounds index raises an\nerror.\n\n\nfun val delete(\n  i: USize val)\n: Vec[A] val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nReturn a vector with n elements removed, beginning at index i.\n\n\nfun val remove(\n  i: USize val,\n  n: USize val)\n: Vec[A] val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nReturn a vector with the value added to the end.\n\n\nfun val push(\n  value: val->A)\n: Vec[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: val->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nReturn a vector with the value at the end removed.\n\n\nfun val pop()\n: Vec[A] val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nReturn a vector with the values of the given iterator added to the end.\n\n\nfun val concat(\n  iter: Iterator[val->A] ref)\n: Vec[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[val->A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val\n\n\n\n\n\n\nfind\n\u00b6\n\n\n[Source]\n\n\nFind the \nnth\n appearance of \nvalue\n from the beginning of the vector,\nstarting at \noffset\n and examining higher indices, and using the\nsupplied \npredicate\n for comparisons. Returns the index of the value, or\nraise an error if the value isn't present.\n\n\nBy default, the search starts at the first element of the vector,\nreturns the first instance of \nvalue\n found, and uses object identity\nfor comparison.\n\n\nfun val find(\n  value: val->A,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(A, A): Bool}[A] val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: val->A\n\n\noffset: \nUSize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\npredicate: {(A, A): Bool}[A] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nReturns true if the vector contains \nvalue\n, false otherwise.\n\n\nfun val contains(\n  value: val->A,\n  predicate: {(A, A): Bool}[A] val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: val->A\n\n\npredicate: {(A, A): Bool}[A] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nslice\n\u00b6\n\n\n[Source]\n\n\nReturn a vector that is a clone of a portion of this vector. The range is\nexclusive and saturated.\n\n\nfun val slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Vec[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\nstep: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nReturn a vector with the elements in reverse order.\n\n\nfun val reverse()\n: Vec[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVec\n[A] val\n\n\n\n\n\n\nkeys\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the indices in the vector.\n\n\nfun val keys()\n: VecKeys[A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVecKeys\n[A] ref^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the values in the vector.\n\n\nfun val values()\n: VecValues[A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVecValues\n[A] ref^\n\n\n\n\n\n\npairs\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the (index, value) pairs in the vector.\n\n\nfun val pairs()\n: VecPairs[A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVecPairs\n[A] ref^",
            "title": "class Vec"
        },
        {
            "location": "/collections-persistent-Vec/#vec91a-any-share93",
            "text": "[Source]  A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\nTrees' by Phil Bagwell.  class val Vec[A: Any #share]",
            "title": "Vec[A: Any #share]"
        },
        {
            "location": "/collections-persistent-Vec/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-Vec/#create",
            "text": "[Source]  new val create()\n: Vec[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-Vec/#returns",
            "text": "Vec [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-Vec/#size",
            "text": "[Source]  Return the amount of values in the vector.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-persistent-Vec/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#apply",
            "text": "[Source]  Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: val->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-persistent-Vec/#parameters",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_2",
            "text": "val->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#update",
            "text": "[Source]  Return a vector with the i-th element changed, raising an error if the\nindex is out of bounds.  fun val update(\n  i: USize val,\n  value: val->A)\n: Vec[A] val ?",
            "title": "update"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_1",
            "text": "i:  USize  val  value: val->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_3",
            "text": "Vec [A] val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#insert",
            "text": "[Source]  Return a vector with an element inserted. Elements after this are moved\nup by one index, extending the vector. An out of bounds index raises an\nerror.  fun val insert(\n  i: USize val,\n  value: val->A)\n: Vec[A] val ?",
            "title": "insert"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_2",
            "text": "i:  USize  val  value: val->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_4",
            "text": "Vec [A] val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#delete",
            "text": "[Source]  Return a vector with an element deleted. Elements after this are moved\ndown by one index, compacting the vector. An out of bounds index raises an\nerror.  fun val delete(\n  i: USize val)\n: Vec[A] val ?",
            "title": "delete"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_3",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_5",
            "text": "Vec [A] val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#remove",
            "text": "[Source]  Return a vector with n elements removed, beginning at index i.  fun val remove(\n  i: USize val,\n  n: USize val)\n: Vec[A] val ?",
            "title": "remove"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_4",
            "text": "i:  USize  val  n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_6",
            "text": "Vec [A] val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#push",
            "text": "[Source]  Return a vector with the value added to the end.  fun val push(\n  value: val->A)\n: Vec[A] val",
            "title": "push"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_5",
            "text": "value: val->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_7",
            "text": "Vec [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#pop",
            "text": "[Source]  Return a vector with the value at the end removed.  fun val pop()\n: Vec[A] val ?",
            "title": "pop"
        },
        {
            "location": "/collections-persistent-Vec/#returns_8",
            "text": "Vec [A] val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#concat",
            "text": "[Source]  Return a vector with the values of the given iterator added to the end.  fun val concat(\n  iter: Iterator[val->A] ref)\n: Vec[A] val",
            "title": "concat"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_6",
            "text": "iter:  Iterator [val->A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_9",
            "text": "Vec [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#find",
            "text": "[Source]  Find the  nth  appearance of  value  from the beginning of the vector,\nstarting at  offset  and examining higher indices, and using the\nsupplied  predicate  for comparisons. Returns the index of the value, or\nraise an error if the value isn't present.  By default, the search starts at the first element of the vector,\nreturns the first instance of  value  found, and uses object identity\nfor comparison.  fun val find(\n  value: val->A,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(A, A): Bool}[A] val = seq)\n: USize val ?",
            "title": "find"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_7",
            "text": "value: val->A  offset:  USize  val = seq  nth:  USize  val = seq  predicate: {(A, A): Bool}[A] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_10",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#contains",
            "text": "[Source]  Returns true if the vector contains  value , false otherwise.  fun val contains(\n  value: val->A,\n  predicate: {(A, A): Bool}[A] val = seq)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_8",
            "text": "value: val->A  predicate: {(A, A): Bool}[A] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#slice",
            "text": "[Source]  Return a vector that is a clone of a portion of this vector. The range is\nexclusive and saturated.  fun val slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Vec[A] val",
            "title": "slice"
        },
        {
            "location": "/collections-persistent-Vec/#parameters_9",
            "text": "from:  USize  val = seq  to:  USize  val = seq  step:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Vec/#returns_12",
            "text": "Vec [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#reverse",
            "text": "[Source]  Return a vector with the elements in reverse order.  fun val reverse()\n: Vec[A] val",
            "title": "reverse"
        },
        {
            "location": "/collections-persistent-Vec/#returns_13",
            "text": "Vec [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#keys",
            "text": "[Source]  Return an iterator over the indices in the vector.  fun val keys()\n: VecKeys[A] ref^",
            "title": "keys"
        },
        {
            "location": "/collections-persistent-Vec/#returns_14",
            "text": "VecKeys [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#values",
            "text": "[Source]  Return an iterator over the values in the vector.  fun val values()\n: VecValues[A] ref^",
            "title": "values"
        },
        {
            "location": "/collections-persistent-Vec/#returns_15",
            "text": "VecValues [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Vec/#pairs",
            "text": "[Source]  Return an iterator over the (index, value) pairs in the vector.  fun val pairs()\n: VecPairs[A] ref^",
            "title": "pairs"
        },
        {
            "location": "/collections-persistent-Vec/#returns_16",
            "text": "VecPairs [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecKeys/",
            "text": "VecKeys[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nclass ref VecKeys[A: Any #share]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  v: Vec[A] val)\n: VecKeys[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nv: \nVec\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVecKeys\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: USize val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?",
            "title": "class VecKeys"
        },
        {
            "location": "/collections-persistent-VecKeys/#veckeys91a-any-share93",
            "text": "[Source]  class ref VecKeys[A: Any #share]",
            "title": "VecKeys[A: Any #share]"
        },
        {
            "location": "/collections-persistent-VecKeys/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-VecKeys/#create",
            "text": "[Source]  new ref create(\n  v: Vec[A] val)\n: VecKeys[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-VecKeys/#parameters",
            "text": "v:  Vec [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-VecKeys/#returns",
            "text": "VecKeys [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecKeys/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-VecKeys/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-persistent-VecKeys/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecKeys/#next",
            "text": "[Source]  fun ref next()\n: USize val ?",
            "title": "next"
        },
        {
            "location": "/collections-persistent-VecKeys/#returns_2",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecValues/",
            "text": "VecValues[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nclass ref VecValues[A: Any #share]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  v: Vec[A] val)\n: VecValues[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nv: \nVec\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVecValues\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: val->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->A ?",
            "title": "class VecValues"
        },
        {
            "location": "/collections-persistent-VecValues/#vecvalues91a-any-share93",
            "text": "[Source]  class ref VecValues[A: Any #share]",
            "title": "VecValues[A: Any #share]"
        },
        {
            "location": "/collections-persistent-VecValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-VecValues/#create",
            "text": "[Source]  new ref create(\n  v: Vec[A] val)\n: VecValues[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-VecValues/#parameters",
            "text": "v:  Vec [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-VecValues/#returns",
            "text": "VecValues [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-VecValues/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-persistent-VecValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecValues/#next",
            "text": "[Source]  fun ref next()\n: val->A ?",
            "title": "next"
        },
        {
            "location": "/collections-persistent-VecValues/#returns_2",
            "text": "val->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecPairs/",
            "text": "VecPairs[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nclass ref VecPairs[A: Any #share]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  v: Vec[A] val)\n: VecPairs[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nv: \nVec\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nVecPairs\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: (USize val , A) ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , A) ?",
            "title": "class VecPairs"
        },
        {
            "location": "/collections-persistent-VecPairs/#vecpairs91a-any-share93",
            "text": "[Source]  class ref VecPairs[A: Any #share]",
            "title": "VecPairs[A: Any #share]"
        },
        {
            "location": "/collections-persistent-VecPairs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-VecPairs/#create",
            "text": "[Source]  new ref create(\n  v: Vec[A] val)\n: VecPairs[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-VecPairs/#parameters",
            "text": "v:  Vec [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-VecPairs/#returns",
            "text": "VecPairs [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecPairs/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-VecPairs/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-persistent-VecPairs/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-VecPairs/#next",
            "text": "[Source]  fun ref next()\n: (USize val , A) ?",
            "title": "next"
        },
        {
            "location": "/collections-persistent-VecPairs/#returns_2",
            "text": "( USize  val , A) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Set/",
            "text": "Set[A: (\nHashable\n val & \nEquatable\n[A])]\n\u00b6\n\n\n[Source]\n\n\ntype Set[A: (Hashable val & Equatable[A])] is\n  HashSet[A, HashEq[A] val] val\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashSet\n[A, \nHashEq\n[A] val] val",
            "title": "type Set"
        },
        {
            "location": "/collections-persistent-Set/#set91a-hashable-val-equatable91a9393",
            "text": "[Source]  type Set[A: (Hashable val & Equatable[A])] is\n  HashSet[A, HashEq[A] val] val",
            "title": "Set[A: (Hashable val &amp; Equatable[A])]"
        },
        {
            "location": "/collections-persistent-Set/#type-alias-for",
            "text": "HashSet [A,  HashEq [A] val] val",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-persistent-SetIs/",
            "text": "SetIs[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\ntype SetIs[A: Any #share] is\n  HashSet[A, HashIs[A] val] val\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashSet\n[A, \nHashIs\n[A] val] val",
            "title": "type SetIs"
        },
        {
            "location": "/collections-persistent-SetIs/#setis91a-any-share93",
            "text": "[Source]  type SetIs[A: Any #share] is\n  HashSet[A, HashIs[A] val] val",
            "title": "SetIs[A: Any #share]"
        },
        {
            "location": "/collections-persistent-SetIs/#type-alias-for",
            "text": "HashSet [A,  HashIs [A] val] val",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-persistent-HashSet/",
            "text": "HashSet[A: \nAny\n #share, H: \nHashFunction\n[A] val]\n\u00b6\n\n\n[Source]\n\n\nA set, built on top of persistent Map. This is implemented as map of an\nalias of a type to itself.\n\n\nclass val HashSet[A: Any #share, H: HashFunction[A] val] is\n  Comparable[HashSet[A, H] box] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nComparable\n[\nHashSet\n[A, H] box] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashSet[A, H] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturn the number of elements in the set.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturn the value if it is in the set, otherwise raise an error.\n\n\nfun box apply(\n  value: val->A)\n: val->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: val->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->A ?\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nCheck whether the set contains the value.\n\n\nfun box contains(\n  value: val->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: val->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nReturn a set with the value added.\n\n\nfun val add(\n  value: val->A)\n: HashSet[A, H] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: val->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nReturn a set with the value removed.\n\n\nfun val sub(\n  value: val->A)\n: HashSet[A, H] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: val->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\n[Source]\n\n\nReturn a set with the elements of both this and that.\n\n\nfun val op_or(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nHashSet\n[A, H] val | \nIterator\n[A] ref)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\n[Source]\n\n\nReturn a set with the elements that are in both this and that.\n\n\nfun val op_and(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nHashSet\n[A, H] val | \nIterator\n[A] ref)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\n[Source]\n\n\nReturn a set with elements that are in either this or that, but not both.\n\n\nfun val op_xor(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nHashSet\n[A, H] val | \nIterator\n[A] ref)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nwithout\n\u00b6\n\n\n[Source]\n\n\nReturn a set with the elements of this that are not in that.\n\n\nfun val without(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nHashSet\n[A, H] val | \nIterator\n[A] ref)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturn true if this and that contain the same elements.\n\n\nfun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturn true if every element in this is also in that, and this has fewer\nelements than that.\n\n\nfun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nReturn true if every element in this is also in that.\n\n\nfun box le(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nReturn true if every element in that is also in this, and this has more\nelements than that.\n\n\nfun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nReturn true if every element in that is also in this.\n\n\nfun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the values in the set.\n\n\nfun box values()\n: Iterator[A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[A] ref^\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nfun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class HashSet"
        },
        {
            "location": "/collections-persistent-HashSet/#hashset91a-any-share-h-hashfunction91a93-val93",
            "text": "[Source]  A set, built on top of persistent Map. This is implemented as map of an\nalias of a type to itself.  class val HashSet[A: Any #share, H: HashFunction[A] val] is\n  Comparable[HashSet[A, H] box] ref",
            "title": "HashSet[A: Any #share, H: HashFunction[A] val]"
        },
        {
            "location": "/collections-persistent-HashSet/#implements",
            "text": "Comparable [ HashSet [A, H] box] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-persistent-HashSet/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-HashSet/#create",
            "text": "[Source]  new val create()\n: HashSet[A, H] val^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-HashSet/#returns",
            "text": "HashSet [A, H] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-HashSet/#size",
            "text": "[Source]  Return the number of elements in the set.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#apply",
            "text": "[Source]  Return the value if it is in the set, otherwise raise an error.  fun box apply(\n  value: val->A)\n: val->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters",
            "text": "value: val->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_2",
            "text": "val->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#contains",
            "text": "[Source]  Check whether the set contains the value.  fun box contains(\n  value: val->A)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_1",
            "text": "value: val->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#add",
            "text": "[Source]  Return a set with the value added.  fun val add(\n  value: val->A)\n: HashSet[A, H] val",
            "title": "add"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_2",
            "text": "value: val->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_4",
            "text": "HashSet [A, H] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#sub",
            "text": "[Source]  Return a set with the value removed.  fun val sub(\n  value: val->A)\n: HashSet[A, H] val",
            "title": "sub"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_3",
            "text": "value: val->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_5",
            "text": "HashSet [A, H] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#op_or",
            "text": "[Source]  Return a set with the elements of both this and that.  fun val op_or(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val",
            "title": "op_or"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_4",
            "text": "that: ( HashSet [A, H] val |  Iterator [A] ref)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_6",
            "text": "HashSet [A, H] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#op_and",
            "text": "[Source]  Return a set with the elements that are in both this and that.  fun val op_and(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val",
            "title": "op_and"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_5",
            "text": "that: ( HashSet [A, H] val |  Iterator [A] ref)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_7",
            "text": "HashSet [A, H] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#op_xor",
            "text": "[Source]  Return a set with elements that are in either this or that, but not both.  fun val op_xor(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val",
            "title": "op_xor"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_6",
            "text": "that: ( HashSet [A, H] val |  Iterator [A] ref)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_8",
            "text": "HashSet [A, H] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#without",
            "text": "[Source]  Return a set with the elements of this that are not in that.  fun val without(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val",
            "title": "without"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_7",
            "text": "that: ( HashSet [A, H] val |  Iterator [A] ref)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_9",
            "text": "HashSet [A, H] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#eq",
            "text": "[Source]  Return true if this and that contain the same elements.  fun box eq(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_8",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#lt",
            "text": "[Source]  Return true if every element in this is also in that, and this has fewer\nelements than that.  fun box lt(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_9",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#le",
            "text": "[Source]  Return true if every element in this is also in that.  fun box le(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_10",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_12",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#gt",
            "text": "[Source]  Return true if every element in that is also in this, and this has more\nelements than that.  fun box gt(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_11",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#ge",
            "text": "[Source]  Return true if every element in that is also in this.  fun box ge(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_12",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#values",
            "text": "[Source]  Return an iterator over the values in the set.  fun box values()\n: Iterator[A] ref^",
            "title": "values"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_15",
            "text": "Iterator [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#compare",
            "text": "[Source]  fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_13",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_16",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashSet/#ne",
            "text": "[Source]  fun box ne(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-persistent-HashSet/#parameters_14",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashSet/#returns_17",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Map/",
            "text": "Map[K: (\nHashable\n val & \nEquatable\n[K]), V: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nA map that uses structural equality on the key.\n\n\ntype Map[K: (Hashable val & Equatable[K]), V: Any #share] is\n  HashMap[K, V, HashEq[K] val] val\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashMap\n[K, V, \nHashEq\n[K] val] val",
            "title": "type Map"
        },
        {
            "location": "/collections-persistent-Map/#map91k-hashable-val-equatable91k93-v-any-share93",
            "text": "[Source]  A map that uses structural equality on the key.  type Map[K: (Hashable val & Equatable[K]), V: Any #share] is\n  HashMap[K, V, HashEq[K] val] val",
            "title": "Map[K: (Hashable val &amp; Equatable[K]), V: Any #share]"
        },
        {
            "location": "/collections-persistent-Map/#type-alias-for",
            "text": "HashMap [K, V,  HashEq [K] val] val",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-persistent-MapIs/",
            "text": "MapIs[K: \nAny\n #share, V: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nA map that uses identity comparison on the key.\n\n\ntype MapIs[K: Any #share, V: Any #share] is\n  HashMap[K, V, HashIs[K] val] val\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashMap\n[K, V, \nHashIs\n[K] val] val",
            "title": "type MapIs"
        },
        {
            "location": "/collections-persistent-MapIs/#mapis91k-any-share-v-any-share93",
            "text": "[Source]  A map that uses identity comparison on the key.  type MapIs[K: Any #share, V: Any #share] is\n  HashMap[K, V, HashIs[K] val] val",
            "title": "MapIs[K: Any #share, V: Any #share]"
        },
        {
            "location": "/collections-persistent-MapIs/#type-alias-for",
            "text": "HashMap [K, V,  HashIs [K] val] val",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-persistent-HashMap/",
            "text": "HashMap[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\u00b6\n\n\n[Source]\n\n\nA persistent map based on the Compressed Hash Array Mapped Prefix-tree from\n'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\nCollections' by Michael J. Steindorfer and Jurgen J. Vinju\n\n\nUsage\n\u00b6\n\n\nuse \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =>\n    try\n      let m1 = Map[String, U32] // {}\n      // Update returns a new map with the provided key set\n      // to the provided value. The old map is unchanged.\n      let m2 = m1(\"a\") = 5 // {a: 5}\n      let m3 = m2(\"b\") = 10 // {a: 5, b: 10}\n      let m4 = m3.remove(\"a\")? // {b: 10}\n      // You can create a new map from key value pairs.\n      let m5 = Map[String, U32].concat([(\"a\", 2); (\"b\", 3)].values()) // {a: 2, b: 3}\n    end\n\n\n\n\nclass val HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashMap[K, V, H] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[K, V, H] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nAttempt to get the value corresponding to k.\n\n\nfun val apply(\n  k: K)\n: val->V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nk: K\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->V ?\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturn the amount of key-value pairs in the Map.\n\n\nfun val size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nUpdate the value associated with the provided key.\n\n\nfun val update(\n  key: K,\n  value: val->V)\n: HashMap[K, V, H] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: val->V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[K, V, H] val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nTry to remove the provided key from the Map.\n\n\nfun val remove(\n  k: K)\n: HashMap[K, V, H] val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nk: K\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[K, V, H] val ?\n\n\n\n\n\n\nget_or_else\n\u00b6\n\n\n[Source]\n\n\nGet the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.\n\n\nfun val get_or_else(\n  k: K,\n  alt: val->V)\n: val->V\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nk: K\n\n\nalt: val->V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->V\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nCheck whether the node contains the provided key.\n\n\nfun val contains(\n  k: K)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nk: K\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd the K, V pairs from the given iterator to the map.\n\n\nfun val concat(\n  iter: Iterator[(val->K , val->V)] ref)\n: HashMap[K, V, H] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[(val->K , val->V)] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[K, V, H] val\n\n\n\n\n\n\nkeys\n\u00b6\n\n\n[Source]\n\n\nfun val keys()\n: MapKeys[K, V, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapKeys\n[K, V, H] ref\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nfun val values()\n: MapValues[K, V, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapValues\n[K, V, H] ref\n\n\n\n\n\n\npairs\n\u00b6\n\n\n[Source]\n\n\nfun val pairs()\n: MapPairs[K, V, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapPairs\n[K, V, H] ref",
            "title": "class HashMap"
        },
        {
            "location": "/collections-persistent-HashMap/#hashmap91k-any-share-v-any-share-h-hashfunction91k93-val93",
            "text": "[Source]  A persistent map based on the Compressed Hash Array Mapped Prefix-tree from\n'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\nCollections' by Michael J. Steindorfer and Jurgen J. Vinju",
            "title": "HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        },
        {
            "location": "/collections-persistent-HashMap/#usage",
            "text": "use \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =>\n    try\n      let m1 = Map[String, U32] // {}\n      // Update returns a new map with the provided key set\n      // to the provided value. The old map is unchanged.\n      let m2 = m1(\"a\") = 5 // {a: 5}\n      let m3 = m2(\"b\") = 10 // {a: 5, b: 10}\n      let m4 = m3.remove(\"a\")? // {b: 10}\n      // You can create a new map from key value pairs.\n      let m5 = Map[String, U32].concat([(\"a\", 2); (\"b\", 3)].values()) // {a: 2, b: 3}\n    end  class val HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]",
            "title": "Usage"
        },
        {
            "location": "/collections-persistent-HashMap/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-HashMap/#create",
            "text": "[Source]  new val create()\n: HashMap[K, V, H] val^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-HashMap/#returns",
            "text": "HashMap [K, V, H] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-HashMap/#apply",
            "text": "[Source]  Attempt to get the value corresponding to k.  fun val apply(\n  k: K)\n: val->V ?",
            "title": "apply"
        },
        {
            "location": "/collections-persistent-HashMap/#parameters",
            "text": "k: K",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_1",
            "text": "val->V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#size",
            "text": "[Source]  Return the amount of key-value pairs in the Map.  fun val size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#update",
            "text": "[Source]  Update the value associated with the provided key.  fun val update(\n  key: K,\n  value: val->V)\n: HashMap[K, V, H] val",
            "title": "update"
        },
        {
            "location": "/collections-persistent-HashMap/#parameters_1",
            "text": "key: K  value: val->V",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_3",
            "text": "HashMap [K, V, H] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#remove",
            "text": "[Source]  Try to remove the provided key from the Map.  fun val remove(\n  k: K)\n: HashMap[K, V, H] val ?",
            "title": "remove"
        },
        {
            "location": "/collections-persistent-HashMap/#parameters_2",
            "text": "k: K",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_4",
            "text": "HashMap [K, V, H] val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#get_or_else",
            "text": "[Source]  Get the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.  fun val get_or_else(\n  k: K,\n  alt: val->V)\n: val->V",
            "title": "get_or_else"
        },
        {
            "location": "/collections-persistent-HashMap/#parameters_3",
            "text": "k: K  alt: val->V",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_5",
            "text": "val->V",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#contains",
            "text": "[Source]  Check whether the node contains the provided key.  fun val contains(\n  k: K)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/collections-persistent-HashMap/#parameters_4",
            "text": "k: K",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#concat",
            "text": "[Source]  Add the K, V pairs from the given iterator to the map.  fun val concat(\n  iter: Iterator[(val->K , val->V)] ref)\n: HashMap[K, V, H] val",
            "title": "concat"
        },
        {
            "location": "/collections-persistent-HashMap/#parameters_5",
            "text": "iter:  Iterator [(val->K , val->V)] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_7",
            "text": "HashMap [K, V, H] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#keys",
            "text": "[Source]  fun val keys()\n: MapKeys[K, V, H] ref",
            "title": "keys"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_8",
            "text": "MapKeys [K, V, H] ref",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#values",
            "text": "[Source]  fun val values()\n: MapValues[K, V, H] ref",
            "title": "values"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_9",
            "text": "MapValues [K, V, H] ref",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-HashMap/#pairs",
            "text": "[Source]  fun val pairs()\n: MapPairs[K, V, H] ref",
            "title": "pairs"
        },
        {
            "location": "/collections-persistent-HashMap/#returns_10",
            "text": "MapPairs [K, V, H] ref",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapKeys/",
            "text": "MapKeys[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\u00b6\n\n\n[Source]\n\n\nclass ref MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  m: HashMap[K, V, H] val)\n: MapKeys[K, V, H] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nm: \nHashMap\n[K, V, H] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapKeys\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: K ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nK ?",
            "title": "class MapKeys"
        },
        {
            "location": "/collections-persistent-MapKeys/#mapkeys91k-any-share-v-any-share-h-hashfunction91k93-val93",
            "text": "[Source]  class ref MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]",
            "title": "MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        },
        {
            "location": "/collections-persistent-MapKeys/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-MapKeys/#create",
            "text": "[Source]  new ref create(\n  m: HashMap[K, V, H] val)\n: MapKeys[K, V, H] ref^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-MapKeys/#parameters",
            "text": "m:  HashMap [K, V, H] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-MapKeys/#returns",
            "text": "MapKeys [K, V, H] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapKeys/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-MapKeys/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-persistent-MapKeys/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapKeys/#next",
            "text": "[Source]  fun ref next()\n: K ?",
            "title": "next"
        },
        {
            "location": "/collections-persistent-MapKeys/#returns_2",
            "text": "K ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapValues/",
            "text": "MapValues[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\u00b6\n\n\n[Source]\n\n\nclass ref MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  m: HashMap[K, V, H] val)\n: MapValues[K, V, H] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nm: \nHashMap\n[K, V, H] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapValues\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: val->V ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->V ?",
            "title": "class MapValues"
        },
        {
            "location": "/collections-persistent-MapValues/#mapvalues91k-any-share-v-any-share-h-hashfunction91k93-val93",
            "text": "[Source]  class ref MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]",
            "title": "MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        },
        {
            "location": "/collections-persistent-MapValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-MapValues/#create",
            "text": "[Source]  new ref create(\n  m: HashMap[K, V, H] val)\n: MapValues[K, V, H] ref^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-MapValues/#parameters",
            "text": "m:  HashMap [K, V, H] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-MapValues/#returns",
            "text": "MapValues [K, V, H] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-MapValues/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-persistent-MapValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapValues/#next",
            "text": "[Source]  fun ref next()\n: val->V ?",
            "title": "next"
        },
        {
            "location": "/collections-persistent-MapValues/#returns_2",
            "text": "val->V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapPairs/",
            "text": "MapPairs[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\u00b6\n\n\n[Source]\n\n\nclass ref MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  m: HashMap[K, V, H] val)\n: MapPairs[K, V, H] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nm: \nHashMap\n[K, V, H] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapPairs\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: (K , val->V) ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(K , val->V) ?",
            "title": "class MapPairs"
        },
        {
            "location": "/collections-persistent-MapPairs/#mappairs91k-any-share-v-any-share-h-hashfunction91k93-val93",
            "text": "[Source]  class ref MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]",
            "title": "MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        },
        {
            "location": "/collections-persistent-MapPairs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-MapPairs/#create",
            "text": "[Source]  new ref create(\n  m: HashMap[K, V, H] val)\n: MapPairs[K, V, H] ref^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-MapPairs/#parameters",
            "text": "m:  HashMap [K, V, H] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-MapPairs/#returns",
            "text": "MapPairs [K, V, H] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapPairs/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-MapPairs/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-persistent-MapPairs/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-MapPairs/#next",
            "text": "[Source]  fun ref next()\n: (K , val->V) ?",
            "title": "next"
        },
        {
            "location": "/collections-persistent-MapPairs/#returns_2",
            "text": "(K , val->V) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-List/",
            "text": "List[A: A]\n\u00b6\n\n\n[Source]\n\n\nA persistent list with functional transformations.\n\n\nUsage\n\u00b6\n\n\nuse \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =>\n    try\n      let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8)\n\n      let empty = Lists[U32].empty() // List()\n\n      // prepend() returns a new List, leaving the\n      // old list unchanged\n      let l2 = empty.prepend(3) // List(3)\n      let l3 = l2.prepend(2) // List(2, 3)\n      let l4 = l3.prepend(1) // List(1, 2, 3)\n      let l4_head = l4.head() // 1\n      let l4_tail = l4.tail() // List(2, 3)\n\n      l4_head == 1\n      Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))?\n      Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))?\n\n      let doubled = l4.map[U32]({(x) => x * 2 })\n\n      Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))?\n    end\n\n\n\n\ntype List[A: A] is\n  (Cons[A] val | Nil[A] val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)",
            "title": "type List"
        },
        {
            "location": "/collections-persistent-List/#list91a-a93",
            "text": "[Source]  A persistent list with functional transformations.",
            "title": "List[A: A]"
        },
        {
            "location": "/collections-persistent-List/#usage",
            "text": "use \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =>\n    try\n      let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8)\n\n      let empty = Lists[U32].empty() // List()\n\n      // prepend() returns a new List, leaving the\n      // old list unchanged\n      let l2 = empty.prepend(3) // List(3)\n      let l3 = l2.prepend(2) // List(2, 3)\n      let l4 = l3.prepend(1) // List(1, 2, 3)\n      let l4_head = l4.head() // 1\n      let l4_tail = l4.tail() // List(2, 3)\n\n      l4_head == 1\n      Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))?\n      Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))?\n\n      let doubled = l4.map[U32]({(x) => x * 2 })\n\n      Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))?\n    end  type List[A: A] is\n  (Cons[A] val | Nil[A] val)",
            "title": "Usage"
        },
        {
            "location": "/collections-persistent-List/#type-alias-for",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-persistent-Lists/",
            "text": "Lists[A: A]\n\u00b6\n\n\n[Source]\n\n\nA primitive containing helper functions for constructing and\ntesting Lists.\n\n\nprimitive val Lists[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Lists[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nLists\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nempty\n\u00b6\n\n\n[Source]\n\n\nReturns an empty list.\n\n\nfun box empty()\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\ncons\n\u00b6\n\n\n[Source]\n\n\nReturns a list that has h as a head and t as a tail.\n\n\nfun box cons(\n  h: val->A,\n  t: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nh: val->A\n\n\nt: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list from an Array\n\n\nfun box apply(\n  arr: Array[val->A] ref)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narr: \nArray\n[val->A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nfrom\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list from an iterator\n\n\nfun box from(\n  iter: Iterator[val->A] ref)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[val->A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\neq[optional T: \nEquatable\n[T] val]\n\u00b6\n\n\n[Source]\n\n\nChecks whether two lists are equal.\n\n\nfun box eq[optional T: Equatable[T] val](\n  l1: (Cons[T] val | Nil[T] val),\n  l2: (Cons[T] val | Nil[T] val))\n: Bool val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nl1: (\nCons\n[T] val | \nNil\n[T] val)\n\n\nl2: (\nCons\n[T] val | \nNil\n[T] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val ?\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Lists[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nLists\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Lists"
        },
        {
            "location": "/collections-persistent-Lists/#lists91a-a93",
            "text": "[Source]  A primitive containing helper functions for constructing and\ntesting Lists.  primitive val Lists[A: A]",
            "title": "Lists[A: A]"
        },
        {
            "location": "/collections-persistent-Lists/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-Lists/#create",
            "text": "[Source]  new val create()\n: Lists[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-Lists/#returns",
            "text": "Lists [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Lists/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-Lists/#empty",
            "text": "[Source]  Returns an empty list.  fun box empty()\n: (Cons[A] val | Nil[A] val)",
            "title": "empty"
        },
        {
            "location": "/collections-persistent-Lists/#returns_1",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Lists/#cons",
            "text": "[Source]  Returns a list that has h as a head and t as a tail.  fun box cons(\n  h: val->A,\n  t: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)",
            "title": "cons"
        },
        {
            "location": "/collections-persistent-Lists/#parameters",
            "text": "h: val->A  t: ( Cons [A] val |  Nil [A] val)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Lists/#returns_2",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Lists/#apply",
            "text": "[Source]  Builds a new list from an Array  fun box apply(\n  arr: Array[val->A] ref)\n: (Cons[A] val | Nil[A] val)",
            "title": "apply"
        },
        {
            "location": "/collections-persistent-Lists/#parameters_1",
            "text": "arr:  Array [val->A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Lists/#returns_3",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Lists/#from",
            "text": "[Source]  Builds a new list from an iterator  fun box from(\n  iter: Iterator[val->A] ref)\n: (Cons[A] val | Nil[A] val)",
            "title": "from"
        },
        {
            "location": "/collections-persistent-Lists/#parameters_2",
            "text": "iter:  Iterator [val->A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Lists/#returns_4",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Lists/#eq91optional-t-equatable91t93-val93",
            "text": "[Source]  Checks whether two lists are equal.  fun box eq[optional T: Equatable[T] val](\n  l1: (Cons[T] val | Nil[T] val),\n  l2: (Cons[T] val | Nil[T] val))\n: Bool val ?",
            "title": "eq[optional T: Equatable[T] val]"
        },
        {
            "location": "/collections-persistent-Lists/#parameters_3",
            "text": "l1: ( Cons [T] val |  Nil [T] val)  l2: ( Cons [T] val |  Nil [T] val)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Lists/#returns_5",
            "text": "Bool  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Lists/#ne",
            "text": "[Source]  fun box ne(\n  that: Lists[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-persistent-Lists/#parameters_4",
            "text": "that:  Lists [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Lists/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/",
            "text": "Nil[A: A]\n\u00b6\n\n\n[Source]\n\n\nThe empty list of As.\n\n\nprimitive val Nil[A: A] is\n  ReadSeq[val->A] box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nReadSeq\n[val->A] box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Nil[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the size of the list.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the i-th element of the sequence. For the empty list this call will\nalways error because any index will be out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: val->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->A ?\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturns an empty iterator over the elements of the empty list.\n\n\nfun box values()\n: Iterator[val->A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[val->A] ref^\n\n\n\n\n\n\nis_empty\n\u00b6\n\n\n[Source]\n\n\nReturns a Bool indicating if the list is empty.\n\n\nfun box is_empty()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nis_non_empty\n\u00b6\n\n\n[Source]\n\n\nReturns a Bool indicating if the list is non-empty.\n\n\nfun box is_non_empty()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhead\n\u00b6\n\n\n[Source]\n\n\nReturns an error, since Nil has no head.\n\n\nfun box head()\n: val->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->A ?\n\n\n\n\n\n\ntail\n\u00b6\n\n\n[Source]\n\n\nReturns an error, since Nil has no tail.\n\n\nfun box tail()\n: (Cons[A] val | Nil[A] val) ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val) ?\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nThe reverse of the empty list is the empty list.\n\n\nfun box reverse()\n: Nil[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\nprepend\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list with an element added to the front of this list.\n\n\nfun box prepend(\n  a: val->A!)\n: Cons[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: val->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCons\n[A] val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nThe concatenation of any list l with the empty list is l.\n\n\nfun box concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nmap[B: B]\n\u00b6\n\n\n[Source]\n\n\nMapping a function from A to B over the empty list yields the\nempty list of Bs.\n\n\nfun box map[B: B](\n  f: {(val->A): val->B}[A, B] box)\n: Nil[B] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): val->B}[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[B] val\n\n\n\n\n\n\nflat_map[B: B]\n\u00b6\n\n\n[Source]\n\n\nFlatmapping a function from A to B over the empty list yields the\nempty list of Bs.\n\n\nfun box flat_map[B: B](\n  f: {(val->A): List[B]}[A, B] box)\n: Nil[B] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): List[B]}[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[B] val\n\n\n\n\n\n\nfor_each\n\u00b6\n\n\n[Source]\n\n\nApplying a function to every member of the empty list is a no-op.\n\n\nfun box for_each(\n  f: {(val->A)}[A] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A)}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfilter\n\u00b6\n\n\n[Source]\n\n\nFiltering the empty list yields the empty list.\n\n\nfun box filter(\n  f: {(val->A): Bool}[A] box)\n: Nil[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\nfold[B: B]\n\u00b6\n\n\n[Source]\n\n\nFolding over the empty list yields the initial accumulator.\n\n\nfun box fold[B: B](\n  f: {(B, val->A): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(B, val->A): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB\n\n\n\n\n\n\nevery\n\u00b6\n\n\n[Source]\n\n\nAny predicate is true of every member of the empty list.\n\n\nfun box every(\n  f: {(val->A): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexists\n\u00b6\n\n\n[Source]\n\n\nFor any predicate, there is no element that satisfies it in the empty\nlist.\n\n\nfun box exists(\n  f: {(val->A): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\npartition\n\u00b6\n\n\n[Source]\n\n\nThe only partition of the empty list is two empty lists.\n\n\nfun box partition(\n  f: {(val->A): Bool}[A] box)\n: (Nil[A] val , Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nNil\n[A] val , \nNil\n[A] val)\n\n\n\n\n\n\ndrop\n\u00b6\n\n\n[Source]\n\n\nThere are no elements to drop from the empty list.\n\n\nfun box drop(\n  n: USize val)\n: Nil[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\ndrop_while\n\u00b6\n\n\n[Source]\n\n\nThere are no elements to drop from the empty list.\n\n\nfun box drop_while(\n  f: {(val->A): Bool}[A] box)\n: Nil[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\ntake\n\u00b6\n\n\n[Source]\n\n\nThere are no elements to take from the empty list.\n\n\nfun box take(\n  n: USize val)\n: Nil[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\ntake_while\n\u00b6\n\n\n[Source]\n\n\nThere are no elements to take from the empty list.\n\n\nfun box take_while(\n  f: {(val->A): Bool}[A] box)\n: Nil[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\ncontains[optional T: (A & \nHasEq\n[A!] #read)]\n\u00b6\n\n\n[Source]\n\n\nfun val contains[optional T: (A & HasEq[A!] #read)](\n  a: val->T)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: val->T\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Nil[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNil\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Nil[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNil\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Nil"
        },
        {
            "location": "/collections-persistent-Nil/#nil91a-a93",
            "text": "[Source]  The empty list of As.  primitive val Nil[A: A] is\n  ReadSeq[val->A] box",
            "title": "Nil[A: A]"
        },
        {
            "location": "/collections-persistent-Nil/#implements",
            "text": "ReadSeq [val->A] box",
            "title": "Implements"
        },
        {
            "location": "/collections-persistent-Nil/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-Nil/#create",
            "text": "[Source]  new val create()\n: Nil[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-Nil/#returns",
            "text": "Nil [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-Nil/#size",
            "text": "[Source]  Returns the size of the list.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-persistent-Nil/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#apply",
            "text": "[Source]  Returns the i-th element of the sequence. For the empty list this call will\nalways error because any index will be out of bounds.  fun box apply(\n  i: USize val)\n: val->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-persistent-Nil/#parameters",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_2",
            "text": "val->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#values",
            "text": "[Source]  Returns an empty iterator over the elements of the empty list.  fun box values()\n: Iterator[val->A] ref^",
            "title": "values"
        },
        {
            "location": "/collections-persistent-Nil/#returns_3",
            "text": "Iterator [val->A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#is_empty",
            "text": "[Source]  Returns a Bool indicating if the list is empty.  fun box is_empty()\n: Bool val",
            "title": "is_empty"
        },
        {
            "location": "/collections-persistent-Nil/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#is_non_empty",
            "text": "[Source]  Returns a Bool indicating if the list is non-empty.  fun box is_non_empty()\n: Bool val",
            "title": "is_non_empty"
        },
        {
            "location": "/collections-persistent-Nil/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#head",
            "text": "[Source]  Returns an error, since Nil has no head.  fun box head()\n: val->A ?",
            "title": "head"
        },
        {
            "location": "/collections-persistent-Nil/#returns_6",
            "text": "val->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#tail",
            "text": "[Source]  Returns an error, since Nil has no tail.  fun box tail()\n: (Cons[A] val | Nil[A] val) ?",
            "title": "tail"
        },
        {
            "location": "/collections-persistent-Nil/#returns_7",
            "text": "( Cons [A] val |  Nil [A] val) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#reverse",
            "text": "[Source]  The reverse of the empty list is the empty list.  fun box reverse()\n: Nil[A] val",
            "title": "reverse"
        },
        {
            "location": "/collections-persistent-Nil/#returns_8",
            "text": "Nil [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#prepend",
            "text": "[Source]  Builds a new list with an element added to the front of this list.  fun box prepend(\n  a: val->A!)\n: Cons[A] val",
            "title": "prepend"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_1",
            "text": "a: val->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_9",
            "text": "Cons [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#concat",
            "text": "[Source]  The concatenation of any list l with the empty list is l.  fun box concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)",
            "title": "concat"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_2",
            "text": "l: ( Cons [A] val |  Nil [A] val)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_10",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#map91b-b93",
            "text": "[Source]  Mapping a function from A to B over the empty list yields the\nempty list of Bs.  fun box map[B: B](\n  f: {(val->A): val->B}[A, B] box)\n: Nil[B] val",
            "title": "map[B: B]"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_3",
            "text": "f: {(val->A): val->B}[A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_11",
            "text": "Nil [B] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#flat_map91b-b93",
            "text": "[Source]  Flatmapping a function from A to B over the empty list yields the\nempty list of Bs.  fun box flat_map[B: B](\n  f: {(val->A): List[B]}[A, B] box)\n: Nil[B] val",
            "title": "flat_map[B: B]"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_4",
            "text": "f: {(val->A): List[B]}[A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_12",
            "text": "Nil [B] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#for_each",
            "text": "[Source]  Applying a function to every member of the empty list is a no-op.  fun box for_each(\n  f: {(val->A)}[A] box)\n: None val",
            "title": "for_each"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_5",
            "text": "f: {(val->A)}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#filter",
            "text": "[Source]  Filtering the empty list yields the empty list.  fun box filter(\n  f: {(val->A): Bool}[A] box)\n: Nil[A] val",
            "title": "filter"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_6",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_14",
            "text": "Nil [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#fold91b-b93",
            "text": "[Source]  Folding over the empty list yields the initial accumulator.  fun box fold[B: B](\n  f: {(B, val->A): B^}[A, B] box,\n  acc: B)\n: B",
            "title": "fold[B: B]"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_7",
            "text": "f: {(B, val->A): B^}[A, B] box  acc: B",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_15",
            "text": "B",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#every",
            "text": "[Source]  Any predicate is true of every member of the empty list.  fun box every(\n  f: {(val->A): Bool}[A] box)\n: Bool val",
            "title": "every"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_8",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_16",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#exists",
            "text": "[Source]  For any predicate, there is no element that satisfies it in the empty\nlist.  fun box exists(\n  f: {(val->A): Bool}[A] box)\n: Bool val",
            "title": "exists"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_9",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_17",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#partition",
            "text": "[Source]  The only partition of the empty list is two empty lists.  fun box partition(\n  f: {(val->A): Bool}[A] box)\n: (Nil[A] val , Nil[A] val)",
            "title": "partition"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_10",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_18",
            "text": "( Nil [A] val ,  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#drop",
            "text": "[Source]  There are no elements to drop from the empty list.  fun box drop(\n  n: USize val)\n: Nil[A] val",
            "title": "drop"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_11",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_19",
            "text": "Nil [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#drop_while",
            "text": "[Source]  There are no elements to drop from the empty list.  fun box drop_while(\n  f: {(val->A): Bool}[A] box)\n: Nil[A] val",
            "title": "drop_while"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_12",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_20",
            "text": "Nil [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#take",
            "text": "[Source]  There are no elements to take from the empty list.  fun box take(\n  n: USize val)\n: Nil[A] val",
            "title": "take"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_13",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_21",
            "text": "Nil [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#take_while",
            "text": "[Source]  There are no elements to take from the empty list.  fun box take_while(\n  f: {(val->A): Bool}[A] box)\n: Nil[A] val",
            "title": "take_while"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_14",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_22",
            "text": "Nil [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#contains91optional-t-a-haseq91a93-read93",
            "text": "[Source]  fun val contains[optional T: (A & HasEq[A!] #read)](\n  a: val->T)\n: Bool val",
            "title": "contains[optional T: (A &amp; HasEq[A!] #read)]"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_15",
            "text": "a: val->T",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_23",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#eq",
            "text": "[Source]  fun box eq(\n  that: Nil[A] val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_16",
            "text": "that:  Nil [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Nil/#ne",
            "text": "[Source]  fun box ne(\n  that: Nil[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-persistent-Nil/#parameters_17",
            "text": "that:  Nil [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Nil/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/",
            "text": "Cons[A: A]\n\u00b6\n\n\n[Source]\n\n\nA list with a head and a tail, where the tail can be empty.\n\n\nclass val Cons[A: A] is\n  ReadSeq[val->A] box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nReadSeq\n[val->A] box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  a: val->A,\n  t: (Cons[A] val | Nil[A] val))\n: Cons[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: val->A\n\n\nt: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCons\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the size of the list.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the i-th element of the list. Errors if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: val->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->A ?\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturns an iterator over the elements of the list.\n\n\nfun box values()\n: Iterator[val->A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[val->A] ref^\n\n\n\n\n\n\nis_empty\n\u00b6\n\n\n[Source]\n\n\nReturns a Bool indicating if the list is empty.\n\n\nfun box is_empty()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nis_non_empty\n\u00b6\n\n\n[Source]\n\n\nReturns a Bool indicating if the list is non-empty.\n\n\nfun box is_non_empty()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhead\n\u00b6\n\n\n[Source]\n\n\nReturns the head of the list.\n\n\nfun box head()\n: val->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nval->A\n\n\n\n\n\n\ntail\n\u00b6\n\n\n[Source]\n\n\nReturns the tail of the list.\n\n\nfun box tail()\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by reversing the elements in the list.\n\n\nfun val reverse()\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nprepend\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list with an element added to the front of this list.\n\n\nfun val prepend(\n  a: val->A!)\n: Cons[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: val->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCons\n[A] val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list that is the concatenation of this list and the provided\nlist.\n\n\nfun val concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nmap[B: B]\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by applying a function to every member of the list.\n\n\nfun val map[B: B](\n  f: {(val->A): val->B}[A, B] box)\n: (Cons[B] val | Nil[B] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): val->B}[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\n\n\nflat_map[B: B]\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.\n\n\nfun val flat_map[B: B](\n  f: {(val->A): List[B]}[A, B] box)\n: (Cons[B] val | Nil[B] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): List[B]}[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\n\n\nfor_each\n\u00b6\n\n\n[Source]\n\n\nApplies the supplied function to every element of the list in order.\n\n\nfun val for_each(\n  f: {(val->A)}[A] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A)}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfilter\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list with those elements that satisfy a provided predicate.\n\n\nfun val filter(\n  f: {(val->A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nfold[B: B]\n\u00b6\n\n\n[Source]\n\n\nFolds the elements of the list using the supplied function.\n\n\nfun val fold[B: B](\n  f: {(B, val->A): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(B, val->A): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB\n\n\n\n\n\n\nevery\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element satisfies the provided predicate, false\notherwise.\n\n\nfun val every(\n  f: {(val->A): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexists\n\u00b6\n\n\n[Source]\n\n\nReturns true if at least one element satisfies the provided predicate,\nfalse otherwise.\n\n\nfun val exists(\n  f: {(val->A): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\npartition\n\u00b6\n\n\n[Source]\n\n\nBuilds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.\n\n\nfun val partition(\n  f: {(val->A): Bool}[A] box)\n: ((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n((\nCons\n[A] val | \nNil\n[A] val) , (\nCons\n[A] val | \nNil\n[A] val))\n\n\n\n\n\n\ndrop\n\u00b6\n\n\n[Source]\n\n\nBuilds a list by dropping the first n elements.\n\n\nfun val drop(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\ndrop_while\n\u00b6\n\n\n[Source]\n\n\nBuilds a list by dropping elements from the front of the list until one\nfails to satisfy the provided predicate.\n\n\nfun val drop_while(\n  f: {(val->A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\ntake\n\u00b6\n\n\n[Source]\n\n\nBuilds a list of the first n elements.\n\n\nfun val take(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\ntake_while\n\u00b6\n\n\n[Source]\n\n\nBuilds a list of elements satisfying the provided predicate until one does\nnot.\n\n\nfun val take_while(\n  f: {(val->A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(val->A): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)",
            "title": "class Cons"
        },
        {
            "location": "/collections-persistent-Cons/#cons91a-a93",
            "text": "[Source]  A list with a head and a tail, where the tail can be empty.  class val Cons[A: A] is\n  ReadSeq[val->A] box",
            "title": "Cons[A: A]"
        },
        {
            "location": "/collections-persistent-Cons/#implements",
            "text": "ReadSeq [val->A] box",
            "title": "Implements"
        },
        {
            "location": "/collections-persistent-Cons/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-persistent-Cons/#create",
            "text": "[Source]  new val create(\n  a: val->A,\n  t: (Cons[A] val | Nil[A] val))\n: Cons[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-persistent-Cons/#parameters",
            "text": "a: val->A  t: ( Cons [A] val |  Nil [A] val)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns",
            "text": "Cons [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-persistent-Cons/#size",
            "text": "[Source]  Returns the size of the list.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-persistent-Cons/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#apply",
            "text": "[Source]  Returns the i-th element of the list. Errors if the index is out of bounds.  fun box apply(\n  i: USize val)\n: val->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_1",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_2",
            "text": "val->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#values",
            "text": "[Source]  Returns an iterator over the elements of the list.  fun box values()\n: Iterator[val->A] ref^",
            "title": "values"
        },
        {
            "location": "/collections-persistent-Cons/#returns_3",
            "text": "Iterator [val->A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#is_empty",
            "text": "[Source]  Returns a Bool indicating if the list is empty.  fun box is_empty()\n: Bool val",
            "title": "is_empty"
        },
        {
            "location": "/collections-persistent-Cons/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#is_non_empty",
            "text": "[Source]  Returns a Bool indicating if the list is non-empty.  fun box is_non_empty()\n: Bool val",
            "title": "is_non_empty"
        },
        {
            "location": "/collections-persistent-Cons/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#head",
            "text": "[Source]  Returns the head of the list.  fun box head()\n: val->A",
            "title": "head"
        },
        {
            "location": "/collections-persistent-Cons/#returns_6",
            "text": "val->A",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#tail",
            "text": "[Source]  Returns the tail of the list.  fun box tail()\n: (Cons[A] val | Nil[A] val)",
            "title": "tail"
        },
        {
            "location": "/collections-persistent-Cons/#returns_7",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#reverse",
            "text": "[Source]  Builds a new list by reversing the elements in the list.  fun val reverse()\n: (Cons[A] val | Nil[A] val)",
            "title": "reverse"
        },
        {
            "location": "/collections-persistent-Cons/#returns_8",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#prepend",
            "text": "[Source]  Builds a new list with an element added to the front of this list.  fun val prepend(\n  a: val->A!)\n: Cons[A] val",
            "title": "prepend"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_2",
            "text": "a: val->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_9",
            "text": "Cons [A] val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#concat",
            "text": "[Source]  Builds a new list that is the concatenation of this list and the provided\nlist.  fun val concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)",
            "title": "concat"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_3",
            "text": "l: ( Cons [A] val |  Nil [A] val)",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_10",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#map91b-b93",
            "text": "[Source]  Builds a new list by applying a function to every member of the list.  fun val map[B: B](\n  f: {(val->A): val->B}[A, B] box)\n: (Cons[B] val | Nil[B] val)",
            "title": "map[B: B]"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_4",
            "text": "f: {(val->A): val->B}[A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_11",
            "text": "( Cons [B] val |  Nil [B] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#flat_map91b-b93",
            "text": "[Source]  Builds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.  fun val flat_map[B: B](\n  f: {(val->A): List[B]}[A, B] box)\n: (Cons[B] val | Nil[B] val)",
            "title": "flat_map[B: B]"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_5",
            "text": "f: {(val->A): List[B]}[A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_12",
            "text": "( Cons [B] val |  Nil [B] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#for_each",
            "text": "[Source]  Applies the supplied function to every element of the list in order.  fun val for_each(\n  f: {(val->A)}[A] box)\n: None val",
            "title": "for_each"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_6",
            "text": "f: {(val->A)}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#filter",
            "text": "[Source]  Builds a new list with those elements that satisfy a provided predicate.  fun val filter(\n  f: {(val->A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)",
            "title": "filter"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_7",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_14",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#fold91b-b93",
            "text": "[Source]  Folds the elements of the list using the supplied function.  fun val fold[B: B](\n  f: {(B, val->A): B^}[A, B] box,\n  acc: B)\n: B",
            "title": "fold[B: B]"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_8",
            "text": "f: {(B, val->A): B^}[A, B] box  acc: B",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_15",
            "text": "B",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#every",
            "text": "[Source]  Returns true if every element satisfies the provided predicate, false\notherwise.  fun val every(\n  f: {(val->A): Bool}[A] box)\n: Bool val",
            "title": "every"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_9",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_16",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#exists",
            "text": "[Source]  Returns true if at least one element satisfies the provided predicate,\nfalse otherwise.  fun val exists(\n  f: {(val->A): Bool}[A] box)\n: Bool val",
            "title": "exists"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_10",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_17",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#partition",
            "text": "[Source]  Builds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.  fun val partition(\n  f: {(val->A): Bool}[A] box)\n: ((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))",
            "title": "partition"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_11",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_18",
            "text": "(( Cons [A] val |  Nil [A] val) , ( Cons [A] val |  Nil [A] val))",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#drop",
            "text": "[Source]  Builds a list by dropping the first n elements.  fun val drop(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)",
            "title": "drop"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_12",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_19",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#drop_while",
            "text": "[Source]  Builds a list by dropping elements from the front of the list until one\nfails to satisfy the provided predicate.  fun val drop_while(\n  f: {(val->A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)",
            "title": "drop_while"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_13",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_20",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#take",
            "text": "[Source]  Builds a list of the first n elements.  fun val take(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)",
            "title": "take"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_14",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_21",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/collections-persistent-Cons/#take_while",
            "text": "[Source]  Builds a list of elements satisfying the provided predicate until one does\nnot.  fun val take_while(\n  f: {(val->A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)",
            "title": "take_while"
        },
        {
            "location": "/collections-persistent-Cons/#parameters_15",
            "text": "f: {(val->A): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-persistent-Cons/#returns_22",
            "text": "( Cons [A] val |  Nil [A] val)",
            "title": "Returns"
        },
        {
            "location": "/debug--index/",
            "text": "Debug package\n\u00b6\n\n\nProvides facilities to create output to either \nSTDOUT\n or \nSTDERR\n that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the \n-d\n flag to \nponyc\n when compiling e.g.:\n\n\nponyc -d\n\n\nExample code\n\u00b6\n\n\nactor Main\n  new create(env: Env) =>\n    Debug.out(\"This will only bee seen when configured for debug info\")\n    env.out.print(\"This will always be seen\")\n\n\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive DebugOut\n\n\nprimitive DebugErr\n\n\ntype DebugStream\n\n\nprimitive Debug",
            "title": "Package"
        },
        {
            "location": "/debug--index/#debug-package",
            "text": "Provides facilities to create output to either  STDOUT  or  STDERR  that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the  -d  flag to  ponyc  when compiling e.g.:  ponyc -d",
            "title": "Debug package"
        },
        {
            "location": "/debug--index/#example-code",
            "text": "actor Main\n  new create(env: Env) =>\n    Debug.out(\"This will only bee seen when configured for debug info\")\n    env.out.print(\"This will always be seen\")",
            "title": "Example code"
        },
        {
            "location": "/debug--index/#public-types",
            "text": "primitive DebugOut  primitive DebugErr  type DebugStream  primitive Debug",
            "title": "Public Types"
        },
        {
            "location": "/debug-DebugOut/",
            "text": "DebugOut\n\u00b6\n\n\n[Source]\n\n\nprimitive val DebugOut\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: DebugOut val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDebugOut\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DebugOut val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDebugOut\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DebugOut val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDebugOut\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DebugOut"
        },
        {
            "location": "/debug-DebugOut/#debugout",
            "text": "[Source]  primitive val DebugOut",
            "title": "DebugOut"
        },
        {
            "location": "/debug-DebugOut/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/debug-DebugOut/#create",
            "text": "[Source]  new val create()\n: DebugOut val^",
            "title": "create"
        },
        {
            "location": "/debug-DebugOut/#returns",
            "text": "DebugOut  val^",
            "title": "Returns"
        },
        {
            "location": "/debug-DebugOut/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/debug-DebugOut/#eq",
            "text": "[Source]  fun box eq(\n  that: DebugOut val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/debug-DebugOut/#parameters",
            "text": "that:  DebugOut  val",
            "title": "Parameters"
        },
        {
            "location": "/debug-DebugOut/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/debug-DebugOut/#ne",
            "text": "[Source]  fun box ne(\n  that: DebugOut val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/debug-DebugOut/#parameters_1",
            "text": "that:  DebugOut  val",
            "title": "Parameters"
        },
        {
            "location": "/debug-DebugOut/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/debug-DebugErr/",
            "text": "DebugErr\n\u00b6\n\n\n[Source]\n\n\nprimitive val DebugErr\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: DebugErr val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDebugErr\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DebugErr val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDebugErr\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DebugErr val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDebugErr\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DebugErr"
        },
        {
            "location": "/debug-DebugErr/#debugerr",
            "text": "[Source]  primitive val DebugErr",
            "title": "DebugErr"
        },
        {
            "location": "/debug-DebugErr/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/debug-DebugErr/#create",
            "text": "[Source]  new val create()\n: DebugErr val^",
            "title": "create"
        },
        {
            "location": "/debug-DebugErr/#returns",
            "text": "DebugErr  val^",
            "title": "Returns"
        },
        {
            "location": "/debug-DebugErr/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/debug-DebugErr/#eq",
            "text": "[Source]  fun box eq(\n  that: DebugErr val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/debug-DebugErr/#parameters",
            "text": "that:  DebugErr  val",
            "title": "Parameters"
        },
        {
            "location": "/debug-DebugErr/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/debug-DebugErr/#ne",
            "text": "[Source]  fun box ne(\n  that: DebugErr val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/debug-DebugErr/#parameters_1",
            "text": "that:  DebugErr  val",
            "title": "Parameters"
        },
        {
            "location": "/debug-DebugErr/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/debug-DebugStream/",
            "text": "DebugStream\n\u00b6\n\n\n[Source]\n\n\ntype DebugStream is\n  (DebugOut val | DebugErr val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nDebugOut\n val | \nDebugErr\n val)",
            "title": "type DebugStream"
        },
        {
            "location": "/debug-DebugStream/#debugstream",
            "text": "[Source]  type DebugStream is\n  (DebugOut val | DebugErr val)",
            "title": "DebugStream"
        },
        {
            "location": "/debug-DebugStream/#type-alias-for",
            "text": "( DebugOut  val |  DebugErr  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/debug-Debug/",
            "text": "Debug\n\u00b6\n\n\n[Source]\n\n\nThis is a debug only print utility.\n\n\nprimitive val Debug\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Debug val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDebug\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nIf platform is debug configured, print either a single stringable or a\nsequence of stringables. The default separator is \", \", and the default\noutput stream is stdout.\n\n\nfun box apply(\n  msg: (Stringable box | ReadSeq[Stringable box] box),\n  sep: String val = seq,\n  stream: (DebugOut val | DebugErr val) = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmsg: (\nStringable\n box | \nReadSeq\n[\nStringable\n box] box)\n\n\nsep: \nString\n val = seq\n\n\nstream: (\nDebugOut\n val | \nDebugErr\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nout\n\u00b6\n\n\n[Source]\n\n\nIf platform is debug configured, print message to standard output\n\n\nfun box out(\n  msg: Stringable box = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmsg: \nStringable\n box = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nerr\n\u00b6\n\n\n[Source]\n\n\nIf platform is debug configured, print message to standard error\n\n\nfun box err(\n  msg: Stringable box = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmsg: \nStringable\n box = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Debug val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDebug\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Debug val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDebug\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Debug"
        },
        {
            "location": "/debug-Debug/#debug",
            "text": "[Source]  This is a debug only print utility.  primitive val Debug",
            "title": "Debug"
        },
        {
            "location": "/debug-Debug/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/debug-Debug/#create",
            "text": "[Source]  new val create()\n: Debug val^",
            "title": "create"
        },
        {
            "location": "/debug-Debug/#returns",
            "text": "Debug  val^",
            "title": "Returns"
        },
        {
            "location": "/debug-Debug/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/debug-Debug/#apply",
            "text": "[Source]  If platform is debug configured, print either a single stringable or a\nsequence of stringables. The default separator is \", \", and the default\noutput stream is stdout.  fun box apply(\n  msg: (Stringable box | ReadSeq[Stringable box] box),\n  sep: String val = seq,\n  stream: (DebugOut val | DebugErr val) = seq)\n: None val",
            "title": "apply"
        },
        {
            "location": "/debug-Debug/#parameters",
            "text": "msg: ( Stringable  box |  ReadSeq [ Stringable  box] box)  sep:  String  val = seq  stream: ( DebugOut  val |  DebugErr  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/debug-Debug/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/debug-Debug/#out",
            "text": "[Source]  If platform is debug configured, print message to standard output  fun box out(\n  msg: Stringable box = seq)\n: None val",
            "title": "out"
        },
        {
            "location": "/debug-Debug/#parameters_1",
            "text": "msg:  Stringable  box = seq",
            "title": "Parameters"
        },
        {
            "location": "/debug-Debug/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/debug-Debug/#err",
            "text": "[Source]  If platform is debug configured, print message to standard error  fun box err(\n  msg: Stringable box = seq)\n: None val",
            "title": "err"
        },
        {
            "location": "/debug-Debug/#parameters_2",
            "text": "msg:  Stringable  box = seq",
            "title": "Parameters"
        },
        {
            "location": "/debug-Debug/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/debug-Debug/#eq",
            "text": "[Source]  fun box eq(\n  that: Debug val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/debug-Debug/#parameters_3",
            "text": "that:  Debug  val",
            "title": "Parameters"
        },
        {
            "location": "/debug-Debug/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/debug-Debug/#ne",
            "text": "[Source]  fun box ne(\n  that: Debug val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/debug-Debug/#parameters_4",
            "text": "that:  Debug  val",
            "title": "Parameters"
        },
        {
            "location": "/debug-Debug/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest--index/",
            "text": "PonyTest package\n\u00b6\n\n\nThe PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.\n\n\nTo help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n\n\n\n\nbuiltin\n\n\ntime\n\n\ncollections\n\n\n\n\nEach unit test is a class, with a single test function. By default all tests\nrun concurrently.\n\n\nEach test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.\n\n\nWhen any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.\n\n\nExample program\n\u00b6\n\n\nTo use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.\n\n\nThe following is a complete program with 2 trivial tests.\n\n\nuse \"ponytest\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String => \"addition\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String => \"subtraction\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](2, 4 - 2)\n\n\n\n\nThe make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.\n\n\nMain.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.\n\n\nTest names\n\u00b6\n\n\nTests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.\n\n\nArbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.\n\n\nYou can skip any tests whose names start with a given string by using the\n\n--exclude=[prefix]\n command line option.\n\n\nYou can run only tests whose names start with a given string by using the\n\n--only=[prefix]\n command line option.\n\n\nAggregation\n\u00b6\n\n\nOften it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.\n\n\nThis can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages \nfoo\n and \nbar\n.\n\n\nuse \"ponytest\"\nuse foo = \"foo\"\nuse bar = \"bar\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)\n\n\n\n\nAggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.\n\n\nLong tests\n\u00b6\n\n\nSimple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.\n\n\nLong tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.\n\n\nThe complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.\n\n\nSince failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.\n\n\nOn a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.\n\n\nNote that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.\n\n\nTimeouts should not be used as the standard method of detecting if a test has\nfailed.\n\n\nExclusion groups\n\u00b6\n\n\nBy default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.\n\n\nNo tests that are in the same exclusion group will be run concurrently.\n\n\nExclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.\n\n\nThe command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.\n\n\nLabels\n\u00b6\n\n\nTest can have label. Labels are used to filter which tests are run, by setting\ncommand line argument \n--label=[some custom label]\n. It can be used to separate\nunit tests from integration tests.\n\n\nBy default label is empty. You can set it up by overriding \nlabel(): String\n\nmethod in unit test.\n\n\nuse \"ponytest\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String => \"_I8AddTest\"\n  fun label(): String => \"simple\"\n  fun apply(h: TestHelper) =>\n    h.assert_eq[I8](1, 1)\n\n\n\n\n\nTear down\n\u00b6\n\n\nEach unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.\n\n\nThe tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.\n\n\nWhen a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.\n\n\nThe test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.\n\n\nPublic Types\n\u00b6\n\n\n\n\ntrait UnitTest\n\n\ntrait TestList\n\n\ninterface ITest\n\n\nclass TestHelper\n\n\nactor PonyTest",
            "title": "Package"
        },
        {
            "location": "/ponytest--index/#ponytest-package",
            "text": "The PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.  To help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:   builtin  time  collections   Each unit test is a class, with a single test function. By default all tests\nrun concurrently.  Each test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.  When any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.",
            "title": "PonyTest package"
        },
        {
            "location": "/ponytest--index/#example-program",
            "text": "To use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.  The following is a complete program with 2 trivial tests.  use \"ponytest\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String => \"addition\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String => \"subtraction\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](2, 4 - 2)  The make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.  Main.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.",
            "title": "Example program"
        },
        {
            "location": "/ponytest--index/#test-names",
            "text": "Tests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.  Arbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.  You can skip any tests whose names start with a given string by using the --exclude=[prefix]  command line option.  You can run only tests whose names start with a given string by using the --only=[prefix]  command line option.",
            "title": "Test names"
        },
        {
            "location": "/ponytest--index/#aggregation",
            "text": "Often it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.  This can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages  foo  and  bar .  use \"ponytest\"\nuse foo = \"foo\"\nuse bar = \"bar\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)  Aggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.",
            "title": "Aggregation"
        },
        {
            "location": "/ponytest--index/#long-tests",
            "text": "Simple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.  Long tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.  The complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.  Since failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.  On a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.  Note that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.  Timeouts should not be used as the standard method of detecting if a test has\nfailed.",
            "title": "Long tests"
        },
        {
            "location": "/ponytest--index/#exclusion-groups",
            "text": "By default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.  No tests that are in the same exclusion group will be run concurrently.  Exclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.  The command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.",
            "title": "Exclusion groups"
        },
        {
            "location": "/ponytest--index/#labels",
            "text": "Test can have label. Labels are used to filter which tests are run, by setting\ncommand line argument  --label=[some custom label] . It can be used to separate\nunit tests from integration tests.  By default label is empty. You can set it up by overriding  label(): String \nmethod in unit test.  use \"ponytest\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String => \"_I8AddTest\"\n  fun label(): String => \"simple\"\n  fun apply(h: TestHelper) =>\n    h.assert_eq[I8](1, 1)",
            "title": "Labels"
        },
        {
            "location": "/ponytest--index/#tear-down",
            "text": "Each unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.  The tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.  When a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.  The test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.",
            "title": "Tear down"
        },
        {
            "location": "/ponytest--index/#public-types",
            "text": "trait UnitTest  trait TestList  interface ITest  class TestHelper  actor PonyTest",
            "title": "Public Types"
        },
        {
            "location": "/ponytest-UnitTest/",
            "text": "UnitTest\n\u00b6\n\n\n[Source]\n\n\nEach unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.\n\n\ntrait ref UnitTest\n\n\n\n\nPublic Functions\n\u00b6\n\n\nname\n\u00b6\n\n\n[Source]\n\n\nReport the test name, which is used when printing test results and on the\ncommand line to select tests to run.\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nexclusion_group\n\u00b6\n\n\n[Source]\n\n\nReport the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.\n\n\nfun box exclusion_group()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nRun the test.\nRaising an error is interpreted as a test failure.\n\n\nfun ref apply(\n  h: TestHelper val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\ntimed_out\n\u00b6\n\n\n[Source]\n\n\nTear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.\n\n\nfun ref timed_out(\n  h: TestHelper val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntear_down\n\u00b6\n\n\n[Source]\n\n\nTidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.\n\n\nfun ref tear_down(\n  h: TestHelper val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlabel\n\u00b6\n\n\n[Source]\n\n\nReport the test label, returning an empty string for none.\nIt can be later use to filter tests which we want to run, by labels.\n\n\nfun box label()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val",
            "title": "trait UnitTest"
        },
        {
            "location": "/ponytest-UnitTest/#unittest",
            "text": "[Source]  Each unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.  trait ref UnitTest",
            "title": "UnitTest"
        },
        {
            "location": "/ponytest-UnitTest/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-UnitTest/#name",
            "text": "[Source]  Report the test name, which is used when printing test results and on the\ncommand line to select tests to run.  fun box name()\n: String val",
            "title": "name"
        },
        {
            "location": "/ponytest-UnitTest/#returns",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#exclusion_group",
            "text": "[Source]  Report the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.  fun box exclusion_group()\n: String val",
            "title": "exclusion_group"
        },
        {
            "location": "/ponytest-UnitTest/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#apply",
            "text": "[Source]  Run the test.\nRaising an error is interpreted as a test failure.  fun ref apply(\n  h: TestHelper val)\n: None val ?",
            "title": "apply"
        },
        {
            "location": "/ponytest-UnitTest/#parameters",
            "text": "h:  TestHelper  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-UnitTest/#returns_2",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#timed_out",
            "text": "[Source]  Tear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.  fun ref timed_out(\n  h: TestHelper val)\n: None val",
            "title": "timed_out"
        },
        {
            "location": "/ponytest-UnitTest/#parameters_1",
            "text": "h:  TestHelper  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-UnitTest/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#tear_down",
            "text": "[Source]  Tidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.  fun ref tear_down(\n  h: TestHelper val)\n: None val",
            "title": "tear_down"
        },
        {
            "location": "/ponytest-UnitTest/#parameters_2",
            "text": "h:  TestHelper  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-UnitTest/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#label",
            "text": "[Source]  Report the test label, returning an empty string for none.\nIt can be later use to filter tests which we want to run, by labels.  fun box label()\n: String val",
            "title": "label"
        },
        {
            "location": "/ponytest-UnitTest/#returns_5",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestList/",
            "text": "TestList\n\u00b6\n\n\n[Source]\n\n\nSource of unit tests for a PonyTest object.\nSee package doc string for further information and example use.\n\n\ntrait ref TestList\n\n\n\n\nPublic Functions\n\u00b6\n\n\ntests\n\u00b6\n\n\n[Source]\n\n\nAdd all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:\n\n\nfun tests(test: PonyTest) =>\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)\n\n\n\n\nfun tag tests(\n  test: PonyTest tag)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nPonyTest\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "trait TestList"
        },
        {
            "location": "/ponytest-TestList/#testlist",
            "text": "[Source]  Source of unit tests for a PonyTest object.\nSee package doc string for further information and example use.  trait ref TestList",
            "title": "TestList"
        },
        {
            "location": "/ponytest-TestList/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-TestList/#tests",
            "text": "[Source]  Add all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:  fun tests(test: PonyTest) =>\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)  fun tag tests(\n  test: PonyTest tag)\n: None val",
            "title": "tests"
        },
        {
            "location": "/ponytest-TestList/#parameters",
            "text": "test:  PonyTest  tag",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestList/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-ITest/",
            "text": "ITest\n\u00b6\n\n\n[Source]\n\n\ninterface ref ITest\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: None val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?",
            "title": "interface ITest"
        },
        {
            "location": "/ponytest-ITest/#itest",
            "text": "[Source]  interface ref ITest",
            "title": "ITest"
        },
        {
            "location": "/ponytest-ITest/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-ITest/#apply",
            "text": "[Source]  fun box apply()\n: None val ?",
            "title": "apply"
        },
        {
            "location": "/ponytest-ITest/#returns",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/",
            "text": "TestHelper\n\u00b6\n\n\n[Source]\n\n\nPer unit test class that provides control, logging and assertion functions.\n\n\nEach unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.\n\n\nThe assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.\n\n\nAll assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.\n\n\nclass val TestHelper\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet env: \nEnv\n val\n\u00b6\n\n\n[Source]\n\n\nThe process environment.\n\n\nThis is useful for getting the \nroot authority\n in\norder to access the filesystem (See \nfiles\n) or the network\n(See \nnet\n) in your tests.\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlog\n\u00b6\n\n\n[Source]\n\n\nLog the given message.\n\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.\n\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.\n\n\nfun box log(\n  msg: String val,\n  verbose: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmsg: \nString\n val\n\n\nverbose: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfail\n\u00b6\n\n\n[Source]\n\n\nFlag the test as having failed.\n\n\nfun box fail(\n  msg: String val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmsg: \nString\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nassert_true\n\u00b6\n\n\n[Source]\n\n\nAssert that the given expression is true.\n\n\nfun box assert_true(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nactual: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_false\n\u00b6\n\n\n[Source]\n\n\nAssert that the given expression is false.\n\n\nfun box assert_false(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nactual: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_error\n\u00b6\n\n\n[Source]\n\n\nAssert that the given test function throws an error when run.\n\n\nfun box assert_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nITest\n box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_no_error\n\u00b6\n\n\n[Source]\n\n\nAssert that the gived test function does not throw an error when run.\n\n\nfun box assert_no_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nITest\n box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_is[A: A]\n\u00b6\n\n\n[Source]\n\n\nAssert that the 2 given expressions resolve to the same instance\n\n\nfun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_eq[A: (\nEquatable\n[A] #read & \nStringable\n #read)]\n\u00b6\n\n\n[Source]\n\n\nAssert that the 2 given expressions are equal.\n\n\nfun box assert_eq[A: (Equatable[A] #read & Stringable #read)](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_isnt[A: A]\n\u00b6\n\n\n[Source]\n\n\nAssert that the 2 given expressions resolve to different instances.\n\n\nfun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_ne[A: (\nEquatable\n[A] #read & \nStringable\n #read)]\n\u00b6\n\n\n[Source]\n\n\nAssert that the 2 given expressions are not equal.\n\n\nfun box assert_ne[A: (Equatable[A] #read & Stringable #read)](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_array_eq[A: (\nEquatable\n[A] #read & \nStringable\n #read)]\n\u00b6\n\n\n[Source]\n\n\nAssert that the contents of the 2 given ReadSeqs are equal.\n\n\nfun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: \nReadSeq\n[A] box\n\n\nactual: \nReadSeq\n[A] box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_array_eq_unordered[A: (\nEquatable\n[A] #read & \nStringable\n #read)]\n\u00b6\n\n\n[Source]\n\n\nAssert that the contents of the 2 given ReadSeqs are equal ignoring order.\n\n\nfun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: \nReadSeq\n[A] box\n\n\nactual: \nReadSeq\n[A] box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlong_test\n\u00b6\n\n\n[Source]\n\n\nIndicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.\n\n\nfun box long_test(\n  timeout: U64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimeout: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncomplete\n\u00b6\n\n\n[Source]\n\n\nMUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.\n\n\nOnce this is called tear_down() may be called at any time.\n\n\nfun box complete(\n  success: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsuccess: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nexpect_action\n\u00b6\n\n\n[Source]\n\n\nCan be called in a long test to set up expectations for one or more actions\nthat, when all completed, will complete the test.\n\n\nThis pattern is useful for cases where you have multiple things that need\nto happen to complete your test, but don't want to have to collect them\nall yourself into a single actor that calls the complete method.\n\n\nThe order of calls to expect_action don't matter - the actions may be\ncompleted in any other order to complete the test.\n\n\nfun box expect_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncomplete_action\n\u00b6\n\n\n[Source]\n\n\nMUST be called for each action expectation that was set up in a long test\nto fulfill the expectations. Any expectations that are still outstanding\nwhen the long test timeout runs out will be printed by name when it fails.\n\n\nCompleting all outstanding actions is enough to finish the test. There's no\nneed to also call the complete method when the actions are finished.\n\n\nCalling the complete method will finish the test immediately, without\nwaiting for any outstanding actions to be completed.\n\n\nfun box complete_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfail_action\n\u00b6\n\n\n[Source]\n\n\nCall to fail an action, which will also cause the entire test to fail\nimmediately, without waiting the rest of the outstanding actions.\n\n\nThe name of the failed action will be included in the failure output.\n\n\nUsually the action name should be an expected action set up by a call to\nexpect_action, but failing unexpected actions will also fail the test.\n\n\nfun box fail_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose_when_done\n\u00b6\n\n\n[Source]\n\n\nPass a disposable actor to be disposed of when the test is complete.\nThe actor will be disposed no matter whether the test succeeds or fails.\n\n\nIf the test is already tearing down, the actor will be disposed immediately.\n\n\nfun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndisposable: \nDisposableActor\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class TestHelper"
        },
        {
            "location": "/ponytest-TestHelper/#testhelper",
            "text": "[Source]  Per unit test class that provides control, logging and assertion functions.  Each unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.  The assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.  All assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.  class val TestHelper",
            "title": "TestHelper"
        },
        {
            "location": "/ponytest-TestHelper/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/ponytest-TestHelper/#let-env-env-val",
            "text": "[Source]  The process environment.  This is useful for getting the  root authority  in\norder to access the filesystem (See  files ) or the network\n(See  net ) in your tests.",
            "title": "let env: Env val"
        },
        {
            "location": "/ponytest-TestHelper/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-TestHelper/#log",
            "text": "[Source]  Log the given message.  The verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.  Logs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.  fun box log(\n  msg: String val,\n  verbose: Bool val = seq)\n: None val",
            "title": "log"
        },
        {
            "location": "/ponytest-TestHelper/#parameters",
            "text": "msg:  String  val  verbose:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#fail",
            "text": "[Source]  Flag the test as having failed.  fun box fail(\n  msg: String val = seq)\n: None val",
            "title": "fail"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_1",
            "text": "msg:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_true",
            "text": "[Source]  Assert that the given expression is true.  fun box assert_true(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_true"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_2",
            "text": "actual:  Bool  val  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_false",
            "text": "[Source]  Assert that the given expression is false.  fun box assert_false(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_false"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_3",
            "text": "actual:  Bool  val  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_error",
            "text": "[Source]  Assert that the given test function throws an error when run.  fun box assert_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_error"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_4",
            "text": "test:  ITest  box  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_no_error",
            "text": "[Source]  Assert that the gived test function does not throw an error when run.  fun box assert_no_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_no_error"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_5",
            "text": "test:  ITest  box  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_is91a-a93",
            "text": "[Source]  Assert that the 2 given expressions resolve to the same instance  fun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_is[A: A]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_6",
            "text": "expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_eq91a-equatable91a93-read-stringable-read93",
            "text": "[Source]  Assert that the 2 given expressions are equal.  fun box assert_eq[A: (Equatable[A] #read & Stringable #read)](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_7",
            "text": "expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_isnt91a-a93",
            "text": "[Source]  Assert that the 2 given expressions resolve to different instances.  fun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_isnt[A: A]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_8",
            "text": "not_expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_ne91a-equatable91a93-read-stringable-read93",
            "text": "[Source]  Assert that the 2 given expressions are not equal.  fun box assert_ne[A: (Equatable[A] #read & Stringable #read)](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_9",
            "text": "not_expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_array_eq91a-equatable91a93-read-stringable-read93",
            "text": "[Source]  Assert that the contents of the 2 given ReadSeqs are equal.  fun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_10",
            "text": "expect:  ReadSeq [A] box  actual:  ReadSeq [A] box  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_array_eq_unordered91a-equatable91a93-read-stringable-read93",
            "text": "[Source]  Assert that the contents of the 2 given ReadSeqs are equal ignoring order.  fun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_11",
            "text": "expect:  ReadSeq [A] box  actual:  ReadSeq [A] box  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#long_test",
            "text": "[Source]  Indicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.  fun box long_test(\n  timeout: U64 val)\n: None val",
            "title": "long_test"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_12",
            "text": "timeout:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#complete",
            "text": "[Source]  MUST be called by each long test to indicate the test has finished, unless\na timeout occurs.  The \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.  Once this is called tear_down() may be called at any time.  fun box complete(\n  success: Bool val)\n: None val",
            "title": "complete"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_13",
            "text": "success:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#expect_action",
            "text": "[Source]  Can be called in a long test to set up expectations for one or more actions\nthat, when all completed, will complete the test.  This pattern is useful for cases where you have multiple things that need\nto happen to complete your test, but don't want to have to collect them\nall yourself into a single actor that calls the complete method.  The order of calls to expect_action don't matter - the actions may be\ncompleted in any other order to complete the test.  fun box expect_action(\n  name: String val)\n: None val",
            "title": "expect_action"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_14",
            "text": "name:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#complete_action",
            "text": "[Source]  MUST be called for each action expectation that was set up in a long test\nto fulfill the expectations. Any expectations that are still outstanding\nwhen the long test timeout runs out will be printed by name when it fails.  Completing all outstanding actions is enough to finish the test. There's no\nneed to also call the complete method when the actions are finished.  Calling the complete method will finish the test immediately, without\nwaiting for any outstanding actions to be completed.  fun box complete_action(\n  name: String val)\n: None val",
            "title": "complete_action"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_15",
            "text": "name:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#fail_action",
            "text": "[Source]  Call to fail an action, which will also cause the entire test to fail\nimmediately, without waiting the rest of the outstanding actions.  The name of the failed action will be included in the failure output.  Usually the action name should be an expected action set up by a call to\nexpect_action, but failing unexpected actions will also fail the test.  fun box fail_action(\n  name: String val)\n: None val",
            "title": "fail_action"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_16",
            "text": "name:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#dispose_when_done",
            "text": "[Source]  Pass a disposable actor to be disposed of when the test is complete.\nThe actor will be disposed no matter whether the test succeeds or fails.  If the test is already tearing down, the actor will be disposed immediately.  fun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val",
            "title": "dispose_when_done"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_17",
            "text": "disposable:  DisposableActor  tag",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_17",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-PonyTest/",
            "text": "PonyTest\n\u00b6\n\n\n[Source]\n\n\nMain test framework actor that organises tests, collates information and\nprints results.\n\n\nactor tag PonyTest\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a PonyTest object and use it to run the tests from the given\nTestList\n\n\nnew tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nenv: \nEnv\n val\n\n\nlist: \nTestList\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPonyTest\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nRun the given test, subject to our filters and options.\n\n\nbe apply(\n  test: UnitTest iso)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nUnitTest\n iso",
            "title": "actor PonyTest"
        },
        {
            "location": "/ponytest-PonyTest/#ponytest",
            "text": "[Source]  Main test framework actor that organises tests, collates information and\nprints results.  actor tag PonyTest",
            "title": "PonyTest"
        },
        {
            "location": "/ponytest-PonyTest/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-PonyTest/#create",
            "text": "[Source]  Create a PonyTest object and use it to run the tests from the given\nTestList  new tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^",
            "title": "create"
        },
        {
            "location": "/ponytest-PonyTest/#parameters",
            "text": "env:  Env  val  list:  TestList  tag",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-PonyTest/#returns",
            "text": "PonyTest  tag^",
            "title": "Returns"
        },
        {
            "location": "/ponytest-PonyTest/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/ponytest-PonyTest/#apply",
            "text": "[Source]  Run the given test, subject to our filters and options.  be apply(\n  test: UnitTest iso)",
            "title": "apply"
        },
        {
            "location": "/ponytest-PonyTest/#parameters_1",
            "text": "test:  UnitTest  iso",
            "title": "Parameters"
        },
        {
            "location": "/random--index/",
            "text": "Random package\n\u00b6\n\n\nThe Random package provides support generating random numbers. The package\nprovides random number generators you can use in your code, a dice roller and\na trait for implementing your own random number generator.\n\n\nIf your application does not require a specific generator, use Rand.\n\n\nSeed values can contain up to 128 bits of randomness in the form of two U64s.\nA common non-cryptographically secure way to seed a generator is with\n\nTime.now\n.\n\n\nlet rand = Rand\nlet n = rand.next()\n\n\n\n\nPublic Types\n\u00b6\n\n\n\n\nclass XorShift128Plus\n\n\nclass XorOshiro128Plus\n\n\ntype Rand\n\n\ntrait Random\n\n\nclass MT\n\n\nclass Dice",
            "title": "Package"
        },
        {
            "location": "/random--index/#random-package",
            "text": "The Random package provides support generating random numbers. The package\nprovides random number generators you can use in your code, a dice roller and\na trait for implementing your own random number generator.  If your application does not require a specific generator, use Rand.  Seed values can contain up to 128 bits of randomness in the form of two U64s.\nA common non-cryptographically secure way to seed a generator is with Time.now .  let rand = Rand\nlet n = rand.next()",
            "title": "Random package"
        },
        {
            "location": "/random--index/#public-types",
            "text": "class XorShift128Plus  class XorOshiro128Plus  type Rand  trait Random  class MT  class Dice",
            "title": "Public Types"
        },
        {
            "location": "/random-XorShift128Plus/",
            "text": "XorShift128Plus\n\u00b6\n\n\n[Source]\n\n\nThis is an implementation of xorshift+, as detailed at:\n\n\nhttp://xoroshiro.di.unimi.it\n\n\nThis should only be used for legacy applications that specifically require\nXorShift128Plus, otherwise use Rand.\n\n\nclass ref XorShift128Plus is\n  Random ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nRandom\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nnew ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: XorShift128Plus ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nU64\n val = seq\n\n\ny: \nU64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nXorShift128Plus\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^64)\n\n\nfun ref next()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nhas_next\n\u00b6\n\n\nfun tag has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun ref u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun ref u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun ref u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun ref u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun ref u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun ref ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun ref usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun ref i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun ref i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun ref i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun ref i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun ref i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun ref ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun ref isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nint[optional N: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nReal\n[N] val)]\n\u00b6\n\n\nfun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Real[N] val)](\n  n: N)\n: N\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: N\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nN\n\n\n\n\n\n\nreal\n\u00b6\n\n\nfun ref real()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshuffle[A: A]\n\u00b6\n\n\nfun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: \nArray\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class XorShift128Plus"
        },
        {
            "location": "/random-XorShift128Plus/#xorshift128plus",
            "text": "[Source]  This is an implementation of xorshift+, as detailed at:  http://xoroshiro.di.unimi.it  This should only be used for legacy applications that specifically require\nXorShift128Plus, otherwise use Rand.  class ref XorShift128Plus is\n  Random ref",
            "title": "XorShift128Plus"
        },
        {
            "location": "/random-XorShift128Plus/#implements",
            "text": "Random  ref",
            "title": "Implements"
        },
        {
            "location": "/random-XorShift128Plus/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/random-XorShift128Plus/#create",
            "text": "[Source]  Create with the specified seed. Returned values are deterministic for a\ngiven seed.  new ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: XorShift128Plus ref^",
            "title": "create"
        },
        {
            "location": "/random-XorShift128Plus/#parameters",
            "text": "x:  U64  val = seq  y:  U64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/random-XorShift128Plus/#returns",
            "text": "XorShift128Plus  ref^",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/random-XorShift128Plus/#next",
            "text": "[Source]  A random integer in [0, 2^64)  fun ref next()\n: U64 val",
            "title": "next"
        },
        {
            "location": "/random-XorShift128Plus/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#has_next",
            "text": "fun tag has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/random-XorShift128Plus/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#u8",
            "text": "fun ref u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/random-XorShift128Plus/#returns_3",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#u16",
            "text": "fun ref u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/random-XorShift128Plus/#returns_4",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#u32",
            "text": "fun ref u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/random-XorShift128Plus/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#u64",
            "text": "fun ref u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/random-XorShift128Plus/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#u128",
            "text": "fun ref u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/random-XorShift128Plus/#returns_7",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#ulong",
            "text": "fun ref ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/random-XorShift128Plus/#returns_8",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#usize",
            "text": "fun ref usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/random-XorShift128Plus/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#i8",
            "text": "fun ref i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/random-XorShift128Plus/#returns_10",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#i16",
            "text": "fun ref i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/random-XorShift128Plus/#returns_11",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#i32",
            "text": "fun ref i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/random-XorShift128Plus/#returns_12",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#i64",
            "text": "fun ref i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/random-XorShift128Plus/#returns_13",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#i128",
            "text": "fun ref i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/random-XorShift128Plus/#returns_14",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#ilong",
            "text": "fun ref ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/random-XorShift128Plus/#returns_15",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#isize",
            "text": "fun ref isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/random-XorShift128Plus/#returns_16",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93",
            "text": "fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Real[N] val)](\n  n: N)\n: N",
            "title": "int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"
        },
        {
            "location": "/random-XorShift128Plus/#parameters_1",
            "text": "n: N",
            "title": "Parameters"
        },
        {
            "location": "/random-XorShift128Plus/#returns_17",
            "text": "N",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#real",
            "text": "fun ref real()\n: F64 val",
            "title": "real"
        },
        {
            "location": "/random-XorShift128Plus/#returns_18",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorShift128Plus/#shuffle91a-a93",
            "text": "fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val",
            "title": "shuffle[A: A]"
        },
        {
            "location": "/random-XorShift128Plus/#parameters_2",
            "text": "array:  Array [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/random-XorShift128Plus/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/",
            "text": "XorOshiro128Plus\n\u00b6\n\n\n[Source]\n\n\nThis is an implementation of xoroshiro128+, as detailed at:\n\n\nhttp://xoroshiro.di.unimi.it\n\n\nThis is currently the default Rand implementation.\n\n\nclass ref XorOshiro128Plus is\n  Random ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nRandom\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nnew ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: XorOshiro128Plus ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nU64\n val = seq\n\n\ny: \nU64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nXorOshiro128Plus\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^64)\n\n\nfun ref next()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nhas_next\n\u00b6\n\n\nfun tag has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun ref u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun ref u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun ref u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun ref u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun ref u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun ref ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun ref usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun ref i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun ref i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun ref i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun ref i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun ref i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun ref ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun ref isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nint[optional N: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nReal\n[N] val)]\n\u00b6\n\n\nfun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Real[N] val)](\n  n: N)\n: N\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: N\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nN\n\n\n\n\n\n\nreal\n\u00b6\n\n\nfun ref real()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshuffle[A: A]\n\u00b6\n\n\nfun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: \nArray\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class XorOshiro128Plus"
        },
        {
            "location": "/random-XorOshiro128Plus/#xoroshiro128plus",
            "text": "[Source]  This is an implementation of xoroshiro128+, as detailed at:  http://xoroshiro.di.unimi.it  This is currently the default Rand implementation.  class ref XorOshiro128Plus is\n  Random ref",
            "title": "XorOshiro128Plus"
        },
        {
            "location": "/random-XorOshiro128Plus/#implements",
            "text": "Random  ref",
            "title": "Implements"
        },
        {
            "location": "/random-XorOshiro128Plus/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/random-XorOshiro128Plus/#create",
            "text": "[Source]  Create with the specified seed. Returned values are deterministic for a\ngiven seed.  new ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: XorOshiro128Plus ref^",
            "title": "create"
        },
        {
            "location": "/random-XorOshiro128Plus/#parameters",
            "text": "x:  U64  val = seq  y:  U64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns",
            "text": "XorOshiro128Plus  ref^",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/random-XorOshiro128Plus/#next",
            "text": "[Source]  A random integer in [0, 2^64)  fun ref next()\n: U64 val",
            "title": "next"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#has_next",
            "text": "fun tag has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#u8",
            "text": "fun ref u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_3",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#u16",
            "text": "fun ref u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_4",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#u32",
            "text": "fun ref u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#u64",
            "text": "fun ref u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#u128",
            "text": "fun ref u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_7",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#ulong",
            "text": "fun ref ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_8",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#usize",
            "text": "fun ref usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#i8",
            "text": "fun ref i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_10",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#i16",
            "text": "fun ref i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_11",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#i32",
            "text": "fun ref i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_12",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#i64",
            "text": "fun ref i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_13",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#i128",
            "text": "fun ref i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_14",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#ilong",
            "text": "fun ref ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_15",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#isize",
            "text": "fun ref isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_16",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93",
            "text": "fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Real[N] val)](\n  n: N)\n: N",
            "title": "int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"
        },
        {
            "location": "/random-XorOshiro128Plus/#parameters_1",
            "text": "n: N",
            "title": "Parameters"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_17",
            "text": "N",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#real",
            "text": "fun ref real()\n: F64 val",
            "title": "real"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_18",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/random-XorOshiro128Plus/#shuffle91a-a93",
            "text": "fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val",
            "title": "shuffle[A: A]"
        },
        {
            "location": "/random-XorOshiro128Plus/#parameters_2",
            "text": "array:  Array [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/random-XorOshiro128Plus/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/random-Rand/",
            "text": "Rand\n\u00b6\n\n\n[Source]\n\n\ntype Rand is\n  XorOshiro128Plus ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nXorOshiro128Plus\n ref",
            "title": "type Rand"
        },
        {
            "location": "/random-Rand/#rand",
            "text": "[Source]  type Rand is\n  XorOshiro128Plus ref",
            "title": "Rand"
        },
        {
            "location": "/random-Rand/#type-alias-for",
            "text": "XorOshiro128Plus  ref",
            "title": "Type Alias For"
        },
        {
            "location": "/random-Random/",
            "text": "Random\n\u00b6\n\n\n[Source]\n\n\nThe \nRandom\n trait should be implemented by all random number generators. The\nonly method you need to implement is \nfun ref next(): 64\n. Once that method\nhas been implemented, the \nRandom\n trait provides default implementations of\nconversions to other number types.\n\n\ntrait ref Random\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nnew ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: Random ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nU64\n val = seq\n\n\ny: \nU64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nRandom\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nIf used as an iterator, this always has another value.\n\n\nfun tag has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^64)\n\n\nfun ref next()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^8)\n\n\nfun ref u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^16)\n\n\nfun ref u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^32)\n\n\nfun ref u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^64)\n\n\nfun ref u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^128)\n\n\nfun ref u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, ULong.max_value()]\n\n\nfun ref ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, USize.max_value()]\n\n\nfun ref usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nA random integer in [-2^7, 2^7)\n\n\nfun ref i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nA random integer in [-2^15, 2^15)\n\n\nfun ref i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nA random integer in [-2^31, 2^31)\n\n\nfun ref i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nA random integer in [-2^63, 2^63)\n\n\nfun ref i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nA random integer in [-2^127, 2^127)\n\n\nfun ref i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nA random integer in [ILong.min_value(), ILong.max_value()]\n\n\nfun ref ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nA random integer in [ISize.min_value(), ISize.max_value()]\n\n\nfun ref isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nint[optional N: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nReal\n[N] val)]\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, n)\n\n\nfun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Real[N] val)](\n  n: N)\n: N\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: N\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nN\n\n\n\n\n\n\nreal\n\u00b6\n\n\n[Source]\n\n\nA random number in [0, 1)\n\n\nfun ref real()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshuffle[A: A]\n\u00b6\n\n\n[Source]\n\n\nShuffle the elements of the array into a random order, mutating the array.\n\n\nfun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: \nArray\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "trait Random"
        },
        {
            "location": "/random-Random/#random",
            "text": "[Source]  The  Random  trait should be implemented by all random number generators. The\nonly method you need to implement is  fun ref next(): 64 . Once that method\nhas been implemented, the  Random  trait provides default implementations of\nconversions to other number types.  trait ref Random",
            "title": "Random"
        },
        {
            "location": "/random-Random/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/random-Random/#create",
            "text": "[Source]  Create with the specified seed. Returned values are deterministic for a\ngiven seed.  new ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: Random ref^",
            "title": "create"
        },
        {
            "location": "/random-Random/#parameters",
            "text": "x:  U64  val = seq  y:  U64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/random-Random/#returns",
            "text": "Random  ref^",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/random-Random/#has_next",
            "text": "[Source]  If used as an iterator, this always has another value.  fun tag has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/random-Random/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#next",
            "text": "[Source]  A random integer in [0, 2^64)  fun ref next()\n: U64 val",
            "title": "next"
        },
        {
            "location": "/random-Random/#returns_2",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#u8",
            "text": "[Source]  A random integer in [0, 2^8)  fun ref u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/random-Random/#returns_3",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#u16",
            "text": "[Source]  A random integer in [0, 2^16)  fun ref u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/random-Random/#returns_4",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#u32",
            "text": "[Source]  A random integer in [0, 2^32)  fun ref u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/random-Random/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#u64",
            "text": "[Source]  A random integer in [0, 2^64)  fun ref u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/random-Random/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#u128",
            "text": "[Source]  A random integer in [0, 2^128)  fun ref u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/random-Random/#returns_7",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#ulong",
            "text": "[Source]  A random integer in [0, ULong.max_value()]  fun ref ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/random-Random/#returns_8",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#usize",
            "text": "[Source]  A random integer in [0, USize.max_value()]  fun ref usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/random-Random/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#i8",
            "text": "[Source]  A random integer in [-2^7, 2^7)  fun ref i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/random-Random/#returns_10",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#i16",
            "text": "[Source]  A random integer in [-2^15, 2^15)  fun ref i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/random-Random/#returns_11",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#i32",
            "text": "[Source]  A random integer in [-2^31, 2^31)  fun ref i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/random-Random/#returns_12",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#i64",
            "text": "[Source]  A random integer in [-2^63, 2^63)  fun ref i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/random-Random/#returns_13",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#i128",
            "text": "[Source]  A random integer in [-2^127, 2^127)  fun ref i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/random-Random/#returns_14",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#ilong",
            "text": "[Source]  A random integer in [ILong.min_value(), ILong.max_value()]  fun ref ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/random-Random/#returns_15",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#isize",
            "text": "[Source]  A random integer in [ISize.min_value(), ISize.max_value()]  fun ref isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/random-Random/#returns_16",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93",
            "text": "[Source]  A random integer in [0, n)  fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Real[N] val)](\n  n: N)\n: N",
            "title": "int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"
        },
        {
            "location": "/random-Random/#parameters_1",
            "text": "n: N",
            "title": "Parameters"
        },
        {
            "location": "/random-Random/#returns_17",
            "text": "N",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#real",
            "text": "[Source]  A random number in [0, 1)  fun ref real()\n: F64 val",
            "title": "real"
        },
        {
            "location": "/random-Random/#returns_18",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/random-Random/#shuffle91a-a93",
            "text": "[Source]  Shuffle the elements of the array into a random order, mutating the array.  fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val",
            "title": "shuffle[A: A]"
        },
        {
            "location": "/random-Random/#parameters_2",
            "text": "array:  Array [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/random-Random/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/",
            "text": "MT\n\u00b6\n\n\n[Source]\n\n\nA Mersenne Twister. This is a non-cryptographic random number generator. This\nshould only be used for legacy applications that require a Mersenne Twister,\notherwise use Rand.\n\n\nclass ref MT is\n  Random ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nRandom\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nnew ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: MT ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nU64\n val = seq\n\n\ny: \nU64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMT\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nA random integer in [0, 2^64)\n\n\nfun ref next()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun tag has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun ref u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun ref u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun ref u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun ref u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun ref u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun ref ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun ref usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun ref i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun ref i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun ref i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun ref i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun ref i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun ref ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun ref isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nint[optional N: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nReal\n[N] val)]\n\u00b6\n\n\n[Source]\n\n\nfun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Real[N] val)](\n  n: N)\n: N\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: N\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nN\n\n\n\n\n\n\nreal\n\u00b6\n\n\n[Source]\n\n\nfun ref real()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshuffle[A: A]\n\u00b6\n\n\n[Source]\n\n\nfun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: \nArray\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class MT"
        },
        {
            "location": "/random-MT/#mt",
            "text": "[Source]  A Mersenne Twister. This is a non-cryptographic random number generator. This\nshould only be used for legacy applications that require a Mersenne Twister,\notherwise use Rand.  class ref MT is\n  Random ref",
            "title": "MT"
        },
        {
            "location": "/random-MT/#implements",
            "text": "Random  ref",
            "title": "Implements"
        },
        {
            "location": "/random-MT/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/random-MT/#create",
            "text": "[Source]  Create with the specified seed. Returned values are deterministic for a\ngiven seed.  new ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: MT ref^",
            "title": "create"
        },
        {
            "location": "/random-MT/#parameters",
            "text": "x:  U64  val = seq  y:  U64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/random-MT/#returns",
            "text": "MT  ref^",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/random-MT/#next",
            "text": "[Source]  A random integer in [0, 2^64)  fun ref next()\n: U64 val",
            "title": "next"
        },
        {
            "location": "/random-MT/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#has_next",
            "text": "[Source]  fun tag has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/random-MT/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#u8",
            "text": "[Source]  fun ref u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/random-MT/#returns_3",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#u16",
            "text": "[Source]  fun ref u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/random-MT/#returns_4",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#u32",
            "text": "[Source]  fun ref u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/random-MT/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#u64",
            "text": "[Source]  fun ref u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/random-MT/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#u128",
            "text": "[Source]  fun ref u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/random-MT/#returns_7",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#ulong",
            "text": "[Source]  fun ref ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/random-MT/#returns_8",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#usize",
            "text": "[Source]  fun ref usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/random-MT/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#i8",
            "text": "[Source]  fun ref i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/random-MT/#returns_10",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#i16",
            "text": "[Source]  fun ref i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/random-MT/#returns_11",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#i32",
            "text": "[Source]  fun ref i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/random-MT/#returns_12",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#i64",
            "text": "[Source]  fun ref i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/random-MT/#returns_13",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#i128",
            "text": "[Source]  fun ref i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/random-MT/#returns_14",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#ilong",
            "text": "[Source]  fun ref ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/random-MT/#returns_15",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#isize",
            "text": "[Source]  fun ref isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/random-MT/#returns_16",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93",
            "text": "[Source]  fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Real[N] val)](\n  n: N)\n: N",
            "title": "int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"
        },
        {
            "location": "/random-MT/#parameters_1",
            "text": "n: N",
            "title": "Parameters"
        },
        {
            "location": "/random-MT/#returns_17",
            "text": "N",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#real",
            "text": "[Source]  fun ref real()\n: F64 val",
            "title": "real"
        },
        {
            "location": "/random-MT/#returns_18",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/random-MT/#shuffle91a-a93",
            "text": "[Source]  fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val",
            "title": "shuffle[A: A]"
        },
        {
            "location": "/random-MT/#parameters_2",
            "text": "array:  Array [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/random-MT/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/random-Dice/",
            "text": "Dice\n\u00b6\n\n\n[Source]\n\n\nA simple dice roller.\n\n\nclass ref Dice\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nInitialise with a random number generator.\n\n\nnew ref create(\n  from: Random ref)\n: Dice ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nRandom\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDice\n ref^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nvar r: \nRandom\n ref\n\u00b6\n\n\n[Source]\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturn the sum of \ncount\n rolls of a die with the given number of \nsides\n.\nThe die is numbered from 1 to \nsides\n. For example, count = 2 and\nsides = 6 will return a value between 2 and 12.\n\n\nfun ref apply(\n  count: U64 val,\n  sides: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncount: \nU64\n val\n\n\nsides: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val",
            "title": "class Dice"
        },
        {
            "location": "/random-Dice/#dice",
            "text": "[Source]  A simple dice roller.  class ref Dice",
            "title": "Dice"
        },
        {
            "location": "/random-Dice/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/random-Dice/#create",
            "text": "[Source]  Initialise with a random number generator.  new ref create(\n  from: Random ref)\n: Dice ref^",
            "title": "create"
        },
        {
            "location": "/random-Dice/#parameters",
            "text": "from:  Random  ref",
            "title": "Parameters"
        },
        {
            "location": "/random-Dice/#returns",
            "text": "Dice  ref^",
            "title": "Returns"
        },
        {
            "location": "/random-Dice/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/random-Dice/#var-r-random-ref",
            "text": "[Source]",
            "title": "var r: Random ref"
        },
        {
            "location": "/random-Dice/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/random-Dice/#apply",
            "text": "[Source]  Return the sum of  count  rolls of a die with the given number of  sides .\nThe die is numbered from 1 to  sides . For example, count = 2 and\nsides = 6 will return a value between 2 and 12.  fun ref apply(\n  count: U64 val,\n  sides: U64 val)\n: U64 val",
            "title": "apply"
        },
        {
            "location": "/random-Dice/#parameters_1",
            "text": "count:  U64  val  sides:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/random-Dice/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time--index/",
            "text": "Time Package\n\u00b6\n\n\nThe Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.\n\n\nPublic Types\n\u00b6\n\n\n\n\nactor Timers\n\n\ninterface TimerNotify\n\n\nclass Timer\n\n\nprimitive Time\n\n\nclass PosixDate\n\n\nprimitive Nanos",
            "title": "Package"
        },
        {
            "location": "/time--index/#time-package",
            "text": "The Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.",
            "title": "Time Package"
        },
        {
            "location": "/time--index/#public-types",
            "text": "actor Timers  interface TimerNotify  class Timer  primitive Time  class PosixDate  primitive Nanos",
            "title": "Public Types"
        },
        {
            "location": "/time-Timers/",
            "text": "Timers\n\u00b6\n\n\n[Source]\n\n\nA hierarchical set of timing wheels.\n\n\nactor tag Timers\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a timer handler with the specified number of slop bits. No slop bits\nmeans trying for nanosecond resolution. 10 slop bits is approximately\nmicrosecond resolution, 20 slop bits is approximately millisecond\nresolution.\n\n\nnew tag create(\n  slop: USize val = seq)\n: Timers tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nslop: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTimers\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.\n\n\nbe apply(\n  timer: Timer iso)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n iso\n\n\n\n\n\n\ncancel\n\u00b6\n\n\n[Source]\n\n\nCancels a timer.\n\n\nbe cancel(\n  timer: Timer tag)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n tag\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nDispose of this set of timing wheels.\n\n\nbe dispose()",
            "title": "actor Timers"
        },
        {
            "location": "/time-Timers/#timers",
            "text": "[Source]  A hierarchical set of timing wheels.  actor tag Timers",
            "title": "Timers"
        },
        {
            "location": "/time-Timers/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Timers/#create",
            "text": "[Source]  Create a timer handler with the specified number of slop bits. No slop bits\nmeans trying for nanosecond resolution. 10 slop bits is approximately\nmicrosecond resolution, 20 slop bits is approximately millisecond\nresolution.  new tag create(\n  slop: USize val = seq)\n: Timers tag^",
            "title": "create"
        },
        {
            "location": "/time-Timers/#parameters",
            "text": "slop:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/time-Timers/#returns",
            "text": "Timers  tag^",
            "title": "Returns"
        },
        {
            "location": "/time-Timers/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/time-Timers/#apply",
            "text": "[Source]  Sets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.  be apply(\n  timer: Timer iso)",
            "title": "apply"
        },
        {
            "location": "/time-Timers/#parameters_1",
            "text": "timer:  Timer  iso",
            "title": "Parameters"
        },
        {
            "location": "/time-Timers/#cancel",
            "text": "[Source]  Cancels a timer.  be cancel(\n  timer: Timer tag)",
            "title": "cancel"
        },
        {
            "location": "/time-Timers/#parameters_2",
            "text": "timer:  Timer  tag",
            "title": "Parameters"
        },
        {
            "location": "/time-Timers/#dispose",
            "text": "[Source]  Dispose of this set of timing wheels.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/time-TimerNotify/",
            "text": "TimerNotify\n\u00b6\n\n\n[Source]\n\n\nNotifications for timer.\n\n\ninterface ref TimerNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nCalled with the the number of times the timer has fired since this was last\ncalled. Usually, the value of \ncount\n will be 1. If it is not 1, it means\nthat the timer isn't firing on schedule.\n\n\nFor example, if your timer is set to fire every 10 milliseconds, and\n\ncount\n is 2, that means it has been between 20-29 milliseconds since the\nlast time your timer fired. Non 1 values for a timer are rare and indicate\na system under heavy load.\n\n\nReturn true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).\n\n\nfun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\ncount: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncancel\n\u00b6\n\n\n[Source]\n\n\nCalled if the timer is cancelled. This is also called if the notifier\nreturns false from its \napply\n method.\n\n\nfun ref cancel(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface TimerNotify"
        },
        {
            "location": "/time-TimerNotify/#timernotify",
            "text": "[Source]  Notifications for timer.  interface ref TimerNotify",
            "title": "TimerNotify"
        },
        {
            "location": "/time-TimerNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/time-TimerNotify/#apply",
            "text": "[Source]  Called with the the number of times the timer has fired since this was last\ncalled. Usually, the value of  count  will be 1. If it is not 1, it means\nthat the timer isn't firing on schedule.  For example, if your timer is set to fire every 10 milliseconds, and count  is 2, that means it has been between 20-29 milliseconds since the\nlast time your timer fired. Non 1 values for a timer are rare and indicate\na system under heavy load.  Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).  fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val",
            "title": "apply"
        },
        {
            "location": "/time-TimerNotify/#parameters",
            "text": "timer:  Timer  ref  count:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-TimerNotify/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time-TimerNotify/#cancel",
            "text": "[Source]  Called if the timer is cancelled. This is also called if the notifier\nreturns false from its  apply  method.  fun ref cancel(\n  timer: Timer ref)\n: None val",
            "title": "cancel"
        },
        {
            "location": "/time-TimerNotify/#parameters_1",
            "text": "timer:  Timer  ref",
            "title": "Parameters"
        },
        {
            "location": "/time-TimerNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/time-Timer/",
            "text": "Timer\n\u00b6\n\n\n[Source]\n\n\nThe \nTimer\n class represents a timer that fires after an expiration\ntime, and then fires at an interval. When a \nTimer\n fires, it calls\nthe \napply\n method of the \nTimerNotify\n object that was passed to it\nwhen it was created.\n\n\nThe following example waits 5 seconds and then fires every 2\nseconds, and when it fires the \nTimerNotify\n object prints how many\ntimes it has been called:\n\n\nuse \"time\"\n\nactor Main\n  new create(env: Env) =>\n    let timers = Timers\n    let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n    timers(consume timer)\n\nclass Notify is TimerNotify\n  let _env: Env\n  var _counter: U32 = 0\n  new iso create(env: Env) =>\n    _env = env\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    _env.out.print(_counter.string())\n    _counter = _counter + 1\n    true\n\n\n\n\nclass ref Timer\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.\n\n\nnew iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = seq)\n: Timer iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nTimerNotify\n iso\n\n\nexpiration: \nU64\n val\n\n\ninterval: \nU64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTimer\n iso^\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nCreates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.\n\n\nnew ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = seq)\n: Timer ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nTimerNotify\n ref\n\n\nexpiration: (\nI64\n val , \nI64\n val)\n\n\ninterval: \nU64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTimer\n ref^",
            "title": "class Timer"
        },
        {
            "location": "/time-Timer/#timer",
            "text": "[Source]  The  Timer  class represents a timer that fires after an expiration\ntime, and then fires at an interval. When a  Timer  fires, it calls\nthe  apply  method of the  TimerNotify  object that was passed to it\nwhen it was created.  The following example waits 5 seconds and then fires every 2\nseconds, and when it fires the  TimerNotify  object prints how many\ntimes it has been called:  use \"time\"\n\nactor Main\n  new create(env: Env) =>\n    let timers = Timers\n    let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n    timers(consume timer)\n\nclass Notify is TimerNotify\n  let _env: Env\n  var _counter: U32 = 0\n  new iso create(env: Env) =>\n    _env = env\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    _env.out.print(_counter.string())\n    _counter = _counter + 1\n    true  class ref Timer",
            "title": "Timer"
        },
        {
            "location": "/time-Timer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Timer/#create",
            "text": "[Source]  Create a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.  new iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = seq)\n: Timer iso^",
            "title": "create"
        },
        {
            "location": "/time-Timer/#parameters",
            "text": "notify:  TimerNotify  iso  expiration:  U64  val  interval:  U64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/time-Timer/#returns",
            "text": "Timer  iso^",
            "title": "Returns"
        },
        {
            "location": "/time-Timer/#abs",
            "text": "[Source]  Creates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.  new ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = seq)\n: Timer ref^",
            "title": "abs"
        },
        {
            "location": "/time-Timer/#parameters_1",
            "text": "notify:  TimerNotify  ref  expiration: ( I64  val ,  I64  val)  interval:  U64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/time-Timer/#returns_1",
            "text": "Timer  ref^",
            "title": "Returns"
        },
        {
            "location": "/time-Time/",
            "text": "Time\n\u00b6\n\n\n[Source]\n\n\nA collection of ways to fetch the current time.\n\n\nprimitive val Time\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Time val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTime\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnow\n\u00b6\n\n\n[Source]\n\n\nThe wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)\n\n\nfun box now()\n: (I64 val , I64 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nseconds\n\u00b6\n\n\n[Source]\n\n\nThe wall-clock adjusted system time.\n\n\nfun box seconds()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmillis\n\u00b6\n\n\n[Source]\n\n\nMonotonic unadjusted milliseconds.\n\n\nfun box millis()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmicros\n\u00b6\n\n\n[Source]\n\n\nMonotonic unadjusted microseconds.\n\n\nfun box micros()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nnanos\n\u00b6\n\n\n[Source]\n\n\nMonotonic unadjusted nanoseconds.\n\n\nfun box nanos()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ncycles\n\u00b6\n\n\n[Source]\n\n\nProcessor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.\n\n\nfun box cycles()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nperf_begin\n\u00b6\n\n\n[Source]\n\n\nGet a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.\n\n\nfun box perf_begin()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nperf_end\n\u00b6\n\n\n[Source]\n\n\nGet a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.\n\n\nfun box perf_end()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Time val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTime\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Time val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTime\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Time"
        },
        {
            "location": "/time-Time/#time",
            "text": "[Source]  A collection of ways to fetch the current time.  primitive val Time",
            "title": "Time"
        },
        {
            "location": "/time-Time/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Time/#create",
            "text": "[Source]  new val create()\n: Time val^",
            "title": "create"
        },
        {
            "location": "/time-Time/#returns",
            "text": "Time  val^",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/time-Time/#now",
            "text": "[Source]  The wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)  fun box now()\n: (I64 val , I64 val)",
            "title": "now"
        },
        {
            "location": "/time-Time/#returns_1",
            "text": "( I64  val ,  I64  val)",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#seconds",
            "text": "[Source]  The wall-clock adjusted system time.  fun box seconds()\n: I64 val",
            "title": "seconds"
        },
        {
            "location": "/time-Time/#returns_2",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#millis",
            "text": "[Source]  Monotonic unadjusted milliseconds.  fun box millis()\n: U64 val",
            "title": "millis"
        },
        {
            "location": "/time-Time/#returns_3",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#micros",
            "text": "[Source]  Monotonic unadjusted microseconds.  fun box micros()\n: U64 val",
            "title": "micros"
        },
        {
            "location": "/time-Time/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#nanos",
            "text": "[Source]  Monotonic unadjusted nanoseconds.  fun box nanos()\n: U64 val",
            "title": "nanos"
        },
        {
            "location": "/time-Time/#returns_5",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#cycles",
            "text": "[Source]  Processor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.  fun box cycles()\n: U64 val",
            "title": "cycles"
        },
        {
            "location": "/time-Time/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#perf_begin",
            "text": "[Source]  Get a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.  fun box perf_begin()\n: U64 val",
            "title": "perf_begin"
        },
        {
            "location": "/time-Time/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#perf_end",
            "text": "[Source]  Get a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.  fun box perf_end()\n: U64 val",
            "title": "perf_end"
        },
        {
            "location": "/time-Time/#returns_8",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#eq",
            "text": "[Source]  fun box eq(\n  that: Time val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/time-Time/#parameters",
            "text": "that:  Time  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Time/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#ne",
            "text": "[Source]  fun box ne(\n  that: Time val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/time-Time/#parameters_1",
            "text": "that:  Time  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Time/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time-PosixDate/",
            "text": "PosixDate\n\u00b6\n\n\n[Source]\n\n\nRepresents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.\n\n\nclass ref PosixDate\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a date from a POSIX time. Negative arguments will be changed to zero.\n\n\nnew ref create(\n  seconds: I64 val = seq,\n  nanoseconds: I64 val = seq)\n: PosixDate ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseconds: \nI64\n val = seq\n\n\nnanoseconds: \nI64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPosixDate\n ref^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nvar nsec: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar sec: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar min: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar hour: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar day_of_month: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar month: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar year: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar day_of_week: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar day_of_year: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nPublic Functions\n\u00b6\n\n\ntime\n\u00b6\n\n\n[Source]\n\n\nReturn a POSIX time. Treats the date as UTC.\n\n\nfun box time()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nnormal\n\u00b6\n\n\n[Source]\n\n\nNormalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.\n\n\nfun ref normal()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nformat\n\u00b6\n\n\n[Source]\n\n\nFormat the time as for strftime.\n\n\nfun box format(\n  fmt: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfmt: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val",
            "title": "class PosixDate"
        },
        {
            "location": "/time-PosixDate/#posixdate",
            "text": "[Source]  Represents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.  class ref PosixDate",
            "title": "PosixDate"
        },
        {
            "location": "/time-PosixDate/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-PosixDate/#create",
            "text": "[Source]  Create a date from a POSIX time. Negative arguments will be changed to zero.  new ref create(\n  seconds: I64 val = seq,\n  nanoseconds: I64 val = seq)\n: PosixDate ref^",
            "title": "create"
        },
        {
            "location": "/time-PosixDate/#parameters",
            "text": "seconds:  I64  val = seq  nanoseconds:  I64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/time-PosixDate/#returns",
            "text": "PosixDate  ref^",
            "title": "Returns"
        },
        {
            "location": "/time-PosixDate/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/time-PosixDate/#var-nsec-i32-val",
            "text": "[Source]",
            "title": "var nsec: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-sec-i32-val",
            "text": "[Source]",
            "title": "var sec: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-min-i32-val",
            "text": "[Source]",
            "title": "var min: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-hour-i32-val",
            "text": "[Source]",
            "title": "var hour: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-day_of_month-i32-val",
            "text": "[Source]",
            "title": "var day_of_month: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-month-i32-val",
            "text": "[Source]",
            "title": "var month: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-year-i32-val",
            "text": "[Source]",
            "title": "var year: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-day_of_week-i32-val",
            "text": "[Source]",
            "title": "var day_of_week: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-day_of_year-i32-val",
            "text": "[Source]",
            "title": "var day_of_year: I32 val"
        },
        {
            "location": "/time-PosixDate/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/time-PosixDate/#time",
            "text": "[Source]  Return a POSIX time. Treats the date as UTC.  fun box time()\n: I64 val",
            "title": "time"
        },
        {
            "location": "/time-PosixDate/#returns_1",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/time-PosixDate/#normal",
            "text": "[Source]  Normalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.  fun ref normal()\n: None val",
            "title": "normal"
        },
        {
            "location": "/time-PosixDate/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/time-PosixDate/#format",
            "text": "[Source]  Format the time as for strftime.  fun box format(\n  fmt: String val)\n: String val",
            "title": "format"
        },
        {
            "location": "/time-PosixDate/#parameters_1",
            "text": "fmt:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/time-PosixDate/#returns_3",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/",
            "text": "Nanos\n\u00b6\n\n\n[Source]\n\n\nCollection of utility functions for converting various durations of time\nto nanoseconds, for passing to other functions in the time package.\n\n\nprimitive val Nanos\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Nanos val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNanos\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nfrom_seconds\n\u00b6\n\n\n[Source]\n\n\nfun box from_seconds(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_millis\n\u00b6\n\n\n[Source]\n\n\nfun box from_millis(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_micros\n\u00b6\n\n\n[Source]\n\n\nfun box from_micros(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_seconds_f\n\u00b6\n\n\n[Source]\n\n\nfun box from_seconds_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_millis_f\n\u00b6\n\n\n[Source]\n\n\nfun box from_millis_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_micros_f\n\u00b6\n\n\n[Source]\n\n\nfun box from_micros_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_wall_clock\n\u00b6\n\n\n[Source]\n\n\nfun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nwall: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Nanos val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNanos\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Nanos val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNanos\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Nanos"
        },
        {
            "location": "/time-Nanos/#nanos",
            "text": "[Source]  Collection of utility functions for converting various durations of time\nto nanoseconds, for passing to other functions in the time package.  primitive val Nanos",
            "title": "Nanos"
        },
        {
            "location": "/time-Nanos/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Nanos/#create",
            "text": "[Source]  new val create()\n: Nanos val^",
            "title": "create"
        },
        {
            "location": "/time-Nanos/#returns",
            "text": "Nanos  val^",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/time-Nanos/#from_seconds",
            "text": "[Source]  fun box from_seconds(\n  t: U64 val)\n: U64 val",
            "title": "from_seconds"
        },
        {
            "location": "/time-Nanos/#parameters",
            "text": "t:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_millis",
            "text": "[Source]  fun box from_millis(\n  t: U64 val)\n: U64 val",
            "title": "from_millis"
        },
        {
            "location": "/time-Nanos/#parameters_1",
            "text": "t:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_2",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_micros",
            "text": "[Source]  fun box from_micros(\n  t: U64 val)\n: U64 val",
            "title": "from_micros"
        },
        {
            "location": "/time-Nanos/#parameters_2",
            "text": "t:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_3",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_seconds_f",
            "text": "[Source]  fun box from_seconds_f(\n  t: F64 val)\n: U64 val",
            "title": "from_seconds_f"
        },
        {
            "location": "/time-Nanos/#parameters_3",
            "text": "t:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_millis_f",
            "text": "[Source]  fun box from_millis_f(\n  t: F64 val)\n: U64 val",
            "title": "from_millis_f"
        },
        {
            "location": "/time-Nanos/#parameters_4",
            "text": "t:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_5",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_micros_f",
            "text": "[Source]  fun box from_micros_f(\n  t: F64 val)\n: U64 val",
            "title": "from_micros_f"
        },
        {
            "location": "/time-Nanos/#parameters_5",
            "text": "t:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_wall_clock",
            "text": "[Source]  fun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val",
            "title": "from_wall_clock"
        },
        {
            "location": "/time-Nanos/#parameters_6",
            "text": "wall: ( I64  val ,  I64  val)",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#eq",
            "text": "[Source]  fun box eq(\n  that: Nanos val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/time-Nanos/#parameters_7",
            "text": "that:  Nanos  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#ne",
            "text": "[Source]  fun box ne(\n  that: Nanos val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/time-Nanos/#parameters_8",
            "text": "that:  Nanos  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/src/kiuatan/rules/",
            "text": "use \"collections/persistent\"\n\n\n\nclass val Single[S: (Any #read & Equatable[S]), V = None]\n\n  \"\"\"\n\n  Matches a single item.  If given a list of possibilities, will only succeed if it matches one of them.  Otherwise, it succeeds for any single item.\n\n  \"\"\"\n\n  let _expected: ReadSeq[S] val\n\n  let _action: (Action[S, V] | None)\n\n\n\n  new create(expected: ReadSeq[S] val = [],\n\n    action: (Action[S, V] | None) = None)\n\n  =>\n\n    _expected = expected\n\n    _action = action\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool =>\n\n    true\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    try\n\n      if loc.has_value() then\n\n        if _expected.size() > 0 then\n\n          for exp in _expected.values() do\n\n            if exp == loc()? then\n\n              cont(Success[S, V](this, loc, loc.next()), stack, recur)\n\n              return\n\n            end\n\n          end\n\n        else\n\n          cont(Success[S, V](this, loc, loc.next()), stack, recur)\n\n          return\n\n        end\n\n      end\n\n    end\n\n    cont(Failure[S, V](this, loc, \"any failed\"), stack, recur)\n\n\n\n  fun val _get_action(): Action[S, V] =>\n\n    match _action\n\n    | let action: Action[S, V] =>\n\n      action\n\n    else\n\n      Rules[S, V].emptyAction()\n\n    end\n\n\n\n\n\nclass val Literal[S: (Any #read & Equatable[S]), V = None]\n\n  \"\"\"\n\n  Matches a string of items.\n\n  \"\"\"\n\n  let _expected: ReadSeq[S] val\n\n  let _action: (Action[S, V] | None)\n\n\n\n  new create(expected: ReadSeq[S] val, action: (Action[S, V] | None) = None) =>\n\n    _expected = expected\n\n    _action = action\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool =>\n\n    true\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    try\n\n      var act = loc\n\n      for exp in _expected.values() do\n\n        if (not act.has_value()) or (exp != act()?) then\n\n          cont(Failure[S, V](this, loc), stack, recur)\n\n          return\n\n        end\n\n        act = act.next()\n\n      end\n\n      cont(Success[S, V](this, loc, act), stack, recur)\n\n    else\n\n      cont(Failure[S, V](this, loc, \"literal failed\"), stack, recur)\n\n    end\n\n\n\n  fun val _get_action(): Action[S, V] =>\n\n    match _action\n\n    | let action: Action[S, V] =>\n\n      action\n\n    else\n\n      Rules[S, V].emptyAction()\n\n    end\n\n\n\n\n\nclass val Conj[S, V = None]\n\n  \"\"\"\n\n  Matches a sequence of child rules.\n\n  \"\"\"\n\n  let _children: ReadSeq[RuleNode[S, V] box]\n\n  let _action: (Action[S, V] | None)\n\n\n\n  new create(children: ReadSeq[RuleNode[S, V] box],\n\n    action: (Action[S, V] | None) = None)\n\n  =>\n\n    _children = children\n\n    _action = action\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool =>\n\n    let rule = this\n\n    if stack.exists({(x) => x is rule}) then\n\n      false\n\n    else\n\n      let stack' = stack.prepend(rule)\n\n      for child in _children.values() do\n\n        if not child._is_terminal(stack') then\n\n          return false\n\n        end\n\n      end\n\n      true\n\n    end\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    _parse_one(0, loc, parser, src, loc, stack, recur, cont,\n\n      Lists[Success[S, V]].empty())\n\n\n\n  fun val _parse_one(\n\n    child_index: USize,\n\n    start: Loc[S],\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V],\n\n    results: List[Success[S, V]])\n\n  =>\n\n    if child_index == _children.size() then\n\n      cont(Success[S, V](this, start, loc, results.reverse()), stack, recur)\n\n    else\n\n      try\n\n        let rule = this\n\n        let cont' =\n\n          recover\n\n            {(result: Result[S, V], stack': List[_LRRecord[S, V]],\n\n              recur': _LRByRule[S, V])\n\n            =>\n\n              match result\n\n              | let success: Success[S, V] =>\n\n                rule._parse_one(child_index + 1, start, parser, src,\n\n                  success.next, stack', recur', cont,\n\n                  results.prepend(success))\n\n              | let failure: Failure[S, V] =>\n\n                cont(Failure[S, V](rule, start, \"\", failure), stack',\n\n                  recur')\n\n              end\n\n            }\n\n          end\n\n\n\n        parser._parse_with_memo(_children(child_index)?, src, loc, stack,\n\n          recur, consume cont')\n\n      else\n\n        cont(Failure[S, V](this, start, \"conj failed\"), stack, recur)\n\n      end\n\n    end\n\n\n\n  fun val _get_action(): Action[S, V] =>\n\n    match _action\n\n    | let action: Action[S, V] =>\n\n      action\n\n    else\n\n      Rules[S, V].defaultAction()\n\n    end\n\n\n\n\n\nclass val Disj[S, V = None]\n\n  \"\"\"\n\n  Matches one out of a list of possible alternatives.  Tries each alternative in order.  If one alternative fails, but an outer rule later fails, will *not* backtrack to another alternative.\n\n  \"\"\"\n\n  let _children: ReadSeq[RuleNode[S, V] box]\n\n  let _action: (Action[S, V] | None)\n\n\n\n  new create(children: ReadSeq[RuleNode[S, V] box],\n\n    action: (Action[S, V] | None) = None)\n\n  =>\n\n    _children = children\n\n    _action = action\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool =>\n\n    let rule = this\n\n    if stack.exists({(x) => x is rule}) then\n\n      false\n\n    else\n\n      let stack' = stack.prepend(rule)\n\n      for child in _children.values() do\n\n        if not child._is_terminal(stack') then\n\n          return false\n\n        end\n\n      end\n\n      true\n\n    end\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    _parse_one(0, loc, parser, src, loc, stack, recur, cont)\n\n\n\n  fun val _parse_one(\n\n    child_index: USize,\n\n    start: Loc[S],\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    if child_index == _children.size() then\n\n      cont(Failure[S, V](this, start), stack, recur)\n\n    else\n\n      try\n\n        let rule = this\n\n        let cont' =\n\n          recover\n\n            {(result: Result[S, V], stack': List[_LRRecord[S, V]],\n\n              recur': _LRByRule[S, V])\n\n            =>\n\n              match result\n\n              | let success: Success[S, V] =>\n\n                cont(Success[S, V](rule, start, success.next, [success]),\n\n                  stack', recur')\n\n              | let failure: Failure[S, V] =>\n\n                rule._parse_one(child_index + 1, start, parser, src,\n\n                  start, stack', recur', cont)\n\n              end\n\n            }\n\n          end\n\n\n\n        parser._parse_with_memo(_children(child_index)?, src, start, stack,\n\n          recur, consume cont')\n\n      else\n\n        cont(Failure[S, V](this, start, \"disj failed\"), stack, recur)\n\n      end\n\n    end\n\n\n\n  fun val _get_action(): Action[S, V] =>\n\n    match _action\n\n    | let action: Action[S, V] =>\n\n      action\n\n    else\n\n      Rules[S, V].defaultAction()\n\n    end\n\n\n\n\n\nclass val Error[S, V = None]\n\n  \"\"\"\n\n  Will result in an error with the given message.\n\n  \"\"\"\n\n  let _message: String\n\n  let _action: (Action[S, V] | None)\n\n\n\n  new create(message: String, action: (Action[S, V] | None) = None) =>\n\n    _message = message\n\n    _action = action\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool =>\n\n    true\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    cont(Failure[S, V](this, loc, _message), stack, recur)\n\n\n\n  fun val _get_action(): Action[S, V] =>\n\n    match _action\n\n    | let action: Action[S, V] =>\n\n      action\n\n    else\n\n      Rules[S, V].emptyAction()\n\n    end\n\n\n\n\n\nclass val Look[S, V = None]\n\n  \"\"\"\n\n  Positive lookahead: will succeed if its child rule matches, but will not advance the match position.\n\n  \"\"\"\n\n  let _body: RuleNode[S, V] box\n\n  let _action: (Action[S, V] | None)\n\n\n\n  new create(body: RuleNode[S, V] box, action: (Action[S, V] | None) = None) =>\n\n    _body = body\n\n    _action = action\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool =>\n\n    let rule = this\n\n    if stack.exists({(x) => x is rule}) then\n\n      false\n\n    else\n\n      _body._is_terminal(stack.prepend(rule))\n\n    end\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    let rule = this\n\n    let cont' =\n\n      recover\n\n        {(result: Result[S, V], stack': List[_LRRecord[S, V]],\n\n          recur': _LRByRule[S, V])\n\n        =>\n\n          match result\n\n          | let success: Success[S, V] =>\n\n            cont(Success[S, V](rule, loc, loc), stack', recur')\n\n          | let failure: Failure[S, V] =>\n\n            cont(Failure[S, V](rule, loc, \"lookahead failed\", failure),\n\n              stack', recur')\n\n          end\n\n        }\n\n      end\n\n    parser._parse_with_memo(_body, src, loc, stack, recur, consume cont')\n\n\n\n  fun val _get_action(): Action[S, V] =>\n\n    match _action\n\n    | let action: Action[S, V] =>\n\n      action\n\n    else\n\n      Rules[S, V].emptyAction()\n\n    end\n\n\n\n\n\nclass val Neg[S, V = None]\n\n  \"\"\"\n\n  Negative lookahead: will succeed if its child rule does not match, and will not advance the match position.\n\n  \"\"\"\n\n  let _body: RuleNode[S, V] box\n\n  let _action: (Action[S, V] | None)\n\n\n\n  new create(body: RuleNode[S, V] box, action: (Action[S, V] | None) = None) =>\n\n    _body = body\n\n    _action = action\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool =>\n\n    let rule = this\n\n    if stack.exists({(x) => x is rule}) then\n\n      false\n\n    else\n\n      _body._is_terminal(stack.prepend(rule))\n\n    end\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    let rule = this\n\n    let cont' =\n\n      recover\n\n        {(result: Result[S, V], stack': List[_LRRecord[S, V]],\n\n          recur': _LRByRule[S, V])\n\n        =>\n\n          match result\n\n          | let success: Success[S, V] =>\n\n            cont(Failure[S, V](rule, loc, \"neg failed\"), stack', recur')\n\n          | let failure: Failure[S, V] =>\n\n            cont(Success[S, V](rule, loc, loc), stack', recur')\n\n          end\n\n        }\n\n      end\n\n    parser._parse_with_memo(_body, src, loc, stack, recur, consume cont')\n\n\n\n  fun val _get_action(): Action[S, V] =>\n\n    match _action\n\n    | let action: Action[S, V] =>\n\n      action\n\n    else\n\n      Rules[S, V].emptyAction()\n\n    end\n\n\n\n\n\nclass val Star[S, V = None]\n\n  \"\"\"\n\n  A generalization of Kleene star: will match from `min` to `max` repetitions of its child rule.\n\n  \"\"\"\n\n  let _body: RuleNode[S, V] box\n\n  let _min: USize\n\n  let _max: USize\n\n  let _action: (Action[S, V] | None)\n\n\n\n  new create(body: RuleNode[S, V] box, min: USize = 0,\n\n    action: (Action[S, V] | None) = None, max: USize = USize.max_value())\n\n  =>\n\n    _body = body\n\n    _min = min\n\n    _max = max\n\n    _action = action\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool =>\n\n    let rule = this\n\n    if stack.exists({(x) => x is rule}) then\n\n      false\n\n    else\n\n      _body._is_terminal(stack.prepend(rule))\n\n    end\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    _parse_one(0, loc, parser, src, loc, stack, recur, cont)\n\n\n\n  fun val _parse_one(\n\n    index: USize,\n\n    start: Loc[S],\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    let rule = this\n\n    let cont' =\n\n      recover\n\n        {(result: Result[S, V], stack': List[_LRRecord[S, V]],\n\n          recur': _LRByRule[S, V])\n\n        =>\n\n          match result\n\n          | let success: Success[S, V] =>\n\n            if index == _max then\n\n              cont(Failure[S, V](rule, start, \"star succeeded too often\"),\n\n                stack', recur')\n\n            else\n\n              rule._parse_one(index + 1, start, parser, src,\n\n                success.next, stack', recur', cont)\n\n            end\n\n          | let failure: Failure[S, V] =>\n\n            if index >= _min then\n\n              cont(Success[S, V](rule, start, loc), stack', recur')\n\n            else\n\n              cont(Failure[S, V](rule, start,\n\n                \"star did not match enough times\"), stack', recur')\n\n            end\n\n          end\n\n        }\n\n      end\n\n    parser._parse_with_memo(_body, src, loc, stack, recur, consume cont')\n\n\n\n  fun val _get_action(): Action[S, V] =>\n\n    match _action\n\n    | let action: Action[S, V] =>\n\n      action\n\n    else\n\n      Rules[S, V].defaultAction()\n\n    end\n\n\n\n\n\nprimitive Rules[S, V = None]\n\n  fun defaultAction(): Action[S, V] =>\n\n    {(ctx) =>\n\n      try\n\n        var i = ctx.child_values.size()\n\n        while i > 0 do\n\n          match ctx.child_values(i-1)?\n\n          | let v: V =>\n\n            return consume v\n\n          end\n\n          i = i - 1\n\n        end\n\n      end\n\n      None\n\n    }\n\n\n\n  fun emptyAction(): Action[S, V] =>\n\n    {(_) => None}",
            "title": "rules.pony"
        },
        {
            "location": "/src/kiuatan/rule/",
            "text": "use \"collections/persistent\"\n\n\n\ninterface val RuleNode[S, V = None]\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag]): Bool\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  fun val _get_action(): Action[S, V]\n\n\n\n\n\nclass val Rule[S, V = None] is RuleNode[S, V]\n\n  \"\"\"\n\n  Represents a named grammar rule.  Memoization and left-recursion handling happens per named `Rule`.\n\n  \"\"\"\n\n  let name: String\n\n  var _body: (RuleNode[S, V] box | None)\n\n  let _action: Action[S, V]\n\n\n\n  new create(name': String, body: (RuleNode[S, V] box | None),\n\n    action: Action[S, V] = Rules[S, V].defaultAction())\n\n  =>\n\n    name = name'\n\n    _body = body\n\n    _action = action\n\n\n\n  fun ref set_body(body: RuleNode[S, V] box) =>\n\n    _body = body\n\n\n\n  fun val _is_terminal(stack: List[RuleNode[S, V] tag] =\n\n    Lists[RuleNode[S, V] tag].empty()): Bool\n\n  =>\n\n    match _body\n\n    | let body: val->RuleNode[S, V] =>\n\n      let rule = this\n\n      if stack.exists({(x) => x is rule}) then\n\n        false\n\n      else\n\n        body._is_terminal(stack.prepend(rule))\n\n      end\n\n    else\n\n      true\n\n    end\n\n\n\n  fun val _parse(\n\n    parser: Parser[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    match _body\n\n    | let body: val->RuleNode[S, V] =>\n\n      parser._parse_with_memo(body, src, loc, stack, recur, cont)\n\n    else\n\n      cont(Failure[S, V](this, loc, \"rule is empty\"), stack, recur)\n\n    end\n\n\n\n  fun _get_action(): Action[S, V] =>\n\n    _action\n\n\n\n\n\ninterface val _Cont[S, V]\n\n  fun apply(result: Result[S, V], stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V])\n\n\n\n\n\ntype Result[S, V = None] is ( Success[S, V] | Failure[S, V] )\n\n  \"\"\"\n\n  The result of a parse attempt, either successful or failed.\n\n  \"\"\"\n\n\n\n\n\nclass val Success[S, V = None]\n\n  \"\"\"\n\n  The result of a successful parse.\n\n  \"\"\"\n\n  let node: RuleNode[S, V]\n\n  \"\"\"The rule that matched successfully.\"\"\"\n\n\n\n  let start: Loc[S]\n\n  \"\"\"The location at which the rule matched.\"\"\"\n\n\n\n  let next: Loc[S]\n\n  \"\"\"The location one past the end of the match.\"\"\"\n\n\n\n  let children: ReadSeq[Success[S, V]] val\n\n  \"\"\"Results from child rules' matches.\"\"\"\n\n\n\n  new val create(node': RuleNode[S, V], start': Loc[S], next': Loc[S],\n\n    children': ReadSeq[Success[S, V]] val = recover Array[Success[S, V]](0) end)\n\n  =>\n\n    node = node'\n\n    start = start'\n\n    next = next'\n\n    children = children'\n\n\n\n  fun val value(): (V^ | None) =>\n\n    \"\"\"\n\n    Call the matched rules' actions to assemble a custom result value.\n\n    \"\"\"\n\n    let cvs: Array[(V | None)] val =\n\n      recover\n\n        let cvs' = Array[(V | None)](children.size())\n\n        for child in children.values() do\n\n          cvs'.push(child.value())\n\n        end\n\n        cvs'\n\n      end\n\n    node._get_action()(ActionContext[S, V](this, cvs))\n\n\n\n  fun string(): String iso^ =>\n\n    recover\n\n      let s = String\n\n      match node\n\n      | let rule: Rule[S, V] =>\n\n        s.append(\"Success(\" + rule.name + \"@[\" + start.string() + \",\" +\n\n          next.string() + \"))\")\n\n      else\n\n        s.append(\"Success(_@[\" + start.string() + \",\" + next.string() + \"))\")\n\n      end\n\n      s\n\n    end\n\n\n\nclass val Failure[S, V = None]\n\n  \"\"\"\n\n  The result of a failed match.\n\n  \"\"\"\n\n  let node: RuleNode[S, V]\n\n  let start: Loc[S]\n\n  let message: String\n\n  let inner: (Failure[S, V] | None)\n\n\n\n  new val create(node': RuleNode[S, V], start': Loc[S], message': String = \"\",\n\n    inner': (Failure[S, V] | None) = None)\n\n  =>\n\n    node = node'\n\n    start = start'\n\n    message = message'\n\n    inner = inner'\n\n\n\n  fun get_message(): String =>\n\n    recover\n\n      let s = String\n\n      s.append(\"[\")\n\n      if message.size() > 0 then\n\n        s.append(message)\n\n      end\n\n      match inner\n\n      | let inner': Failure[S, V] =>\n\n        if message.size() > 0 then\n\n          s.append(\": \")\n\n        end\n\n        s.append(inner'.get_message())\n\n      end\n\n      s.append(\"]\")\n\n      s\n\n    end\n\n\n\n  fun string(): String iso^ =>\n\n    recover\n\n      let s = String\n\n      match node\n\n      | let rule: Rule[S, V] =>\n\n        s.append(\"Failure(\" + rule.name + \"@\" + start.string() + \")\")\n\n      else\n\n        s.append(\"Failure(_@\" + start.string() + \")\")\n\n      end\n\n      s\n\n    end\n\n\n\n\n\ninterface val Action[S, V]\n\n  \"\"\"\n\n  Used to assemble a custom result value.\n\n  \"\"\"\n\n  fun apply(ctx: ActionContext[S, V]): (V^ | None)\n\n\n\n\n\nclass iso ActionContext[S, V]\n\n  let result: Success[S, V]\n\n  let child_values: Array[(V | None)] val\n\n\n\n  new iso create(result': Success[S, V],\n\n    child_values': Array[(V | None)] val)\n\n  =>\n\n    result = result'\n\n    child_values = child_values'",
            "title": "rule.pony"
        },
        {
            "location": "/src/kiuatan/parser/",
            "text": "use \"debug\"\n\nuse mut=\"collections\"\n\nuse \"collections/persistent\"\n\n\n\nactor Parser[S, V = None]\n\n  \"\"\"\n\n  Stores a source of inputs to a parse, and a memo of parse results from prior parses.\n\n  Also used to initiate a parse attempt.\n\n  \"\"\"\n\n\n\n  var _segments: List[Segment[S]]\n\n  var _updates: List[_UpdateSeg[S]] = Nil[_UpdateSeg[S]]\n\n\n\n  let _memo: _Memo[S, V] = _memo.create()\n\n\n\n  new create(source: ReadSeq[Segment[S]] val) =>\n\n    _segments = Lists[Segment[S]].from(source.values())\n\n\n\n  fun num_segments(): USize =>\n\n    \"\"\"\n\n    Returns the number of segments currently in the source.\n\n    \"\"\"\n\n    _segments.size()\n\n\n\n  be insert_segment(index: USize, segment: Segment[S]) =>\n\n    \"\"\"\n\n    Insert a source segment at the given index.  The insertion will happen upon the next call to `parse()`.\n\n    \"\"\"\n\n    let insert = _InsertSeg[S](index, segment)\n\n    _updates = _updates.concat(Cons[_UpdateSeg[S]](insert, Nil[_UpdateSeg[S]]))\n\n\n\n  be remove_segment(index: USize) =>\n\n    \"\"\"\n\n    Removes the source segment at the given index.  The removal will happen upon the next call to `parse()`.\n\n    \"\"\"\n\n    let remove = _RemoveSeg(index)\n\n    _updates = _updates.concat(Cons[_UpdateSeg[S]](remove, Nil[_UpdateSeg[S]]))\n\n\n\n  fun ref _update_segments() =>\n\n    for op in _updates.values() do\n\n      match op\n\n      | let insert: _InsertSeg[S] =>\n\n        let left = _segments.take(insert.index)\n\n        let right = _segments.drop(insert.index)\n\n        _segments = left\n\n          .concat(Cons[Segment[S]](insert.segment, Nil[Segment[S]]))\n\n          .concat(right)\n\n      | let remove: _RemoveSeg =>\n\n        let left = _segments.take(remove.index)\n\n        let right = _segments.take(remove.index + 1)\n\n        _segments = left.concat(right)\n\n      end\n\n    end\n\n    _updates = Lists[_UpdateSeg[S]].empty()\n\n\n\n  be parse(rule: RuleNode[S, V], callback: ParseCallback[S, V],\n\n    start: (Loc[S] | None) = None)\n\n  =>\n\n    \"\"\"\n\n    Initiates a parse attempt with the given rule.\n\n    \"\"\"\n\n    let stack = Lists[_LRRecord[S, V]].empty()\n\n    let recur = _LRByRule[S, V]\n\n\n\n    match _segments\n\n    | let source: Cons[Segment[S]] =>\n\n      _update_segments()\n\n      let start': Loc[S] =\n\n        match start\n\n        | let loc: Loc[S] =>\n\n          loc\n\n        else\n\n          Loc[S](source, 0)\n\n        end\n\n\n\n      let cont =\n\n        recover\n\n          {(result: Result[S, V], stack: List[_LRRecord[S, V]],\n\n            recur: _LRByRule[S, V])\n\n          =>\n\n            callback(result)\n\n          }\n\n        end\n\n      _parse_with_memo(rule, source, start', stack, recur, consume cont)\n\n    else\n\n      let pos =\n\n        match start\n\n        | let loc: Loc[S] =>\n\n          loc\n\n        else\n\n          Loc[S](Cons[Segment[S]]([], Nil[Segment[S]]), 0)\n\n        end\n\n      callback(Failure[S, V](rule, pos, \"cannot parse empty source\"))\n\n    end\n\n\n\n  be _parse_with_memo(\n\n    rule: RuleNode[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    match rule\n\n    | let rule': Rule[S, V] =>\n\n      ifdef debug then\n\n        Dbg[S, V]._dbg(stack, \"_parse_with_memo: \" + rule'.name + \"@\" +\n\n          loc.string() + \": \" +\n\n          (if rule'._is_terminal() then \"terminal\" else \"nonterminal\" end))\n\n      end\n\n\n\n      match _lookup(rule', loc, 0)\n\n      | let result: Result[S, V] =>\n\n        ifdef debug then\n\n          Dbg[S, V]._dbg(stack, \"_parse_with_memo: \" + rule'.name + \"@\" +\n\n            loc.string() + \": from memo: \" + result.string())\n\n        end\n\n        cont(result, stack, recur)\n\n      else\n\n        if rule'._is_terminal() then\n\n          _parse_non_lr(rule', src, loc, stack, recur, cont)\n\n        else\n\n          _parse_lr(rule', src, loc, stack, recur, cont)\n\n        end\n\n      end\n\n    else\n\n      rule._parse(this, src, loc, stack, recur, cont)\n\n    end\n\n\n\n  fun _parse_non_lr(\n\n    rule: Rule[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    let stack' = stack.prepend(_LRRecord[S, V](rule, 0, loc, loc, false, None))\n\n    let parser: Parser[S, V] = this\n\n    rule._parse(this, src, loc, stack', recur,\n\n      {(result: Result[S, V], stack'': List[_LRRecord[S, V]],\n\n        recur': _LRByRule[S, V])(cont)\n\n      =>\n\n        ifdef debug then\n\n          Dbg[S, V]._dbg(stack'', \"_parse_non_lr: \" + rule.name + \":0@\" +\n\n            loc.string() + \": \" + result.string())\n\n        end\n\n        parser._memoize(rule, loc, 0, result, {() =>\n\n          cont(result, stack''.drop(1), recur')\n\n        })\n\n      })\n\n\n\n  fun _parse_lr(\n\n    rule: Rule[S, V],\n\n    src: Source[S],\n\n    loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]],\n\n    recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    match _LRR[S, V]._get_lr_record(recur, rule, loc)\n\n    | let rec: _LRRecord[S, V] =>\n\n      _parse_existing_lr(rule, rec, stack, recur, cont)\n\n    else\n\n      _parse_new_lr(rule, src, loc, stack, recur, cont)\n\n    end\n\n\n\n  fun _parse_existing_lr(rule: Rule[S, V], rec: _LRRecord[S, V],\n\n    stack: List[_LRRecord[S, V]], recur: _LRByRule[S, V], cont: _Cont[S, V])\n\n  =>\n\n    var involved = rec.involved\n\n    for lr in stack.reverse().values() do\n\n      if lr.rule is rule then break end\n\n      involved = involved.add(rule)\n\n    end\n\n    match _lookup(rule, rec.start, rec.exp)\n\n    | let success: Success[S, V] =>\n\n      let rec' = _LRRecord[S, V](rec.rule, rec.exp, rec.start, success.next,\n\n        true, success, involved)\n\n      ifdef debug then\n\n        Dbg[S, V]._dbg(stack, \"_parse_existing_lr: \" + rule.name + \":\" +\n\n          rec'.exp.string() + \"@[\" + rec'.start.string() + \",\" +\n\n          rec'.next.string() + \"): result \" + success.string())\n\n      end\n\n      cont(success, stack, _LRR[S, V]._set_lr_record(recur, rule, rec'))\n\n    | let failure: Failure[S, V] =>\n\n      let rec' = _LRRecord[S, V](rec.rule, rec.exp, rec.start, rec.start,\n\n        true, failure, involved)\n\n      ifdef debug then\n\n        Dbg[S, V]._dbg(stack, \"_parse_existing_lr: \" + rule.name + \":\" +\n\n          rec'.exp.string() + \"@\" + rec'.start.string() + \": result \" +\n\n          failure.string())\n\n      end\n\n      cont(failure, stack, _LRR[S, V]._set_lr_record(recur, rule, rec'))\n\n    else // can't happen\n\n      ifdef debug then\n\n        Dbg[S, V]._dbg(stack, \"_parse_existing_lr: \" + rule.name + \":\" +\n\n          rec.exp.string() + \"@\" + rec.start.string() +\n\n          \": FAILED; CAN'T HAPPEN\")\n\n      end\n\n      cont(Failure[S, V](rule, rec.start, \"LR not memoized\"), stack, recur)\n\n    end\n\n\n\n  fun _parse_new_lr(rule: Rule[S, V], src: Source[S], loc: Loc[S],\n\n    stack: List[_LRRecord[S, V]], recur: _LRByRule[S, V], cont: _Cont[S, V])\n\n  =>\n\n    let rec' = _LRRecord[S, V](rule, 1, loc, loc, false, None,\n\n      SetIs[Rule[S, V]])\n\n    let stack' = stack.prepend(rec')\n\n    let recur' = _LRR[S, V]._set_lr_record(recur, rule, rec')\n\n\n\n    ifdef debug then\n\n      Dbg[S, V]._dbg(stack', \"_parse_new_lr: memoize \" + rule.name + \":\" +\n\n        rec'.exp.string() + \"@\" + loc.string() + \" failure\")\n\n    end\n\n\n\n    let self: Parser[S, V] tag = this\n\n    _memoize(rule, loc, rec'.exp, Failure[S, V](rule, loc, \"LR started\"),\n\n      self~_parse_new_lr_aux1(0, rule, src, loc, stack', recur', cont))\n\n\n\n  be _parse_new_lr_aux1(count: USize, rule: Rule[S, V], src: Source[S],\n\n    loc: Loc[S], stack: List[_LRRecord[S, V]], recur: _LRByRule[S, V],\n\n    cont: _Cont[S, V])\n\n  =>\n\n    let self: Parser[S, V] tag = this\n\n    rule._parse(this, src, loc, stack, recur,\n\n      self~_parse_new_lr_aux2(count, rule, src, loc, cont))\n\n\n\n  be _parse_new_lr_aux2(count: USize, rule: Rule[S, V], src: Source[S],\n\n    loc: Loc[S], cont: _Cont[S, V], result: Result[S, V],\n\n    stack: List[_LRRecord[S, V]], recur: _LRByRule[S, V])\n\n  =>\n\n    let rec =\n\n      match _LRR[S, V]._get_lr_record(recur, rule, loc)\n\n      | let rec': _LRRecord[S, V] =>\n\n        rec'\n\n      else\n\n        Dbg[S, V]._dbg(stack,\n\n          \"_parse_new_lr_aux_{}: CAN'T HAPPEN: NO LR RECORD\")\n\n        _LRRecord[S, V](rule, 0, loc, loc, true, None, SetIs[Rule[S, V]])\n\n      end\n\n\n\n    match result\n\n    | let success: Success[S, V] // do we need to go on trying to expand?\n\n      if rec.lr and ((count == 0) or (success.next > rec.next))\n\n    =>\n\n      let rec' = _LRRecord[S, V](rec.rule, rec.exp + 1, success.start,\n\n        success.next, true, success, rec.involved)\n\n      let recur' = _LRR[S, V]._set_lr_record(recur, rule, rec')\n\n\n\n      ifdef debug then\n\n        Dbg[S, V]._dbg(stack, \"_parse_new_lr_aux_{} \" + rule.name + \":\" +\n\n          rec'.exp.string() + \"@\" + loc.string() + \" #\" + count.string() +\n\n          \" new expansion: \" + success.string())\n\n      end\n\n\n\n      let self: Parser[S, V] tag = this\n\n      _memoize(rule, loc, rec'.exp, success,\n\n        self~_parse_new_lr_aux1(count + 1, rule, src, loc, stack, recur',\n\n          cont))\n\n    else // we've failed or we're done expanding\n\n      let stack' = stack.drop(1)\n\n      let recur' = _LRR[S, V]._del_lr_record(recur, rule, loc)\n\n\n\n      let res =\n\n        match result\n\n        | let success': Success[S, V] =>\n\n          success'\n\n        | let failure': Failure[S, V] =>\n\n          match rec.res\n\n          | let res': Result[S, V] =>\n\n            res'\n\n          else\n\n            result\n\n          end\n\n        end\n\n\n\n      ifdef debug then\n\n        Dbg[S, V]._dbg(stack, \"_parse_new_lr_aux_{} \" + rule.name + \":\" +\n\n          rec.exp.string() + \"@\" + loc.string() + \" #\" + count.string() +\n\n          \" lr DONE: result \" + res.string())\n\n      end\n\n\n\n      //var foundlr = stack'.exists({(r) => r.involved.contains(rule) })\n\n      var foundlr = false\n\n      for r in stack'.values() do\n\n        if r.involved.contains(rule) then\n\n          foundlr = true\n\n          break\n\n        end\n\n      end\n\n      if not foundlr then\n\n        _memoize(rec.rule, rec.start, rec.exp, res, {() =>\n\n          cont(res, stack', recur')\n\n        })\n\n      else\n\n        cont(res, stack', recur')\n\n      end\n\n    end\n\n\n\n  be _memoize(rule: Rule[S, V], loc: Loc[S], exp: USize, result: Result[S, V],\n\n    cont: {()} val)\n\n  =>\n\n    try\n\n      let memo_by_loc =\n\n        try\n\n          _memo(rule)?\n\n        else\n\n          let mbl = _MemoByLoc[S, V]\n\n          _memo.update(rule, mbl)\n\n          mbl\n\n        end\n\n\n\n      let memo_by_exp =\n\n        try\n\n          memo_by_loc(loc)?\n\n        else\n\n          let mbe = Array[(Result[S, V] | None)].init(None, exp + 1)\n\n          memo_by_loc.update(loc, mbe)\n\n          mbe\n\n        end\n\n\n\n      while memo_by_exp.size() <= exp do\n\n        memo_by_exp.push(None)\n\n      end\n\n\n\n      memo_by_exp(exp)? = result\n\n      cont()\n\n    end\n\n\n\n  fun _lookup(rule: Rule[S, V], loc: Loc[S], exp: USize)\n\n    : (Result[S, V] | None)\n\n  =>\n\n    try\n\n      let memo_by_loc = _memo(rule)?\n\n      let memo_by_exp = memo_by_loc(loc)?\n\n      memo_by_exp(exp)?\n\n    else\n\n      None\n\n    end\n\n\n\n\n\ninterface val ParseCallback[S, V]\n\n  \"\"\"\n\n  Used to report the results of a parse attempt.\n\n  \"\"\"\n\n  fun apply(result: Result[S, V])\n\n\n\n\n\ntype _UpdateSeg[S] is (_InsertSeg[S] | _RemoveSeg)\n\n\n\n\n\nclass val _InsertSeg[S]\n\n  let index: USize\n\n  let segment: Segment[S]\n\n\n\n  new val create(index': USize, segment': Segment[S]) =>\n\n    index = index'\n\n    segment = segment'\n\n\n\n\n\nclass val _RemoveSeg\n\n  let index: USize\n\n\n\n  new val create(index': USize) =>\n\n    index = index'\n\n\n\n\n\ntype _Memo[S, V] is\n\n  mut.MapIs[Rule[S, V] tag, _MemoByLoc[S, V]]\n\ntype _MemoByLoc[S, V] is\n\n  mut.Map[Loc[S], _MemoByExpansion[S, V]]\n\ntype _MemoByExpansion[S, V] is\n\n  Array[(Result[S, V] | None)]\n\n\n\n\n\nclass val _LRRecord[S, V = None]\n\n  let rule: Rule[S, V]\n\n  let exp: USize\n\n  let start: Loc[S]\n\n  let next: Loc[S]\n\n  let lr: Bool\n\n  let res: (Result[S, V] | None)\n\n  let involved: SetIs[Rule[S, V]]\n\n\n\n  new val create(\n\n    rule': Rule[S, V],\n\n    exp': USize,\n\n    start': Loc[S],\n\n    next': Loc[S],\n\n    lr': Bool,\n\n    res': (Result[S, V] | None),\n\n    involved': SetIs[Rule[S, V]] = SetIs[Rule[S, V]])\n\n  =>\n\n    rule = rule'\n\n    exp = exp'\n\n    start = start'\n\n    next = next'\n\n    lr = lr'\n\n    res = res'\n\n    involved = involved'\n\n\n\n\n\ntype _LRByRule[S, V = None] is\n\n  MapIs[Rule[S, V] tag, _LRByLoc[S, V]]\n\ntype _LRByLoc[S, V = None] is\n\n  Map[Loc[S], _LRRecord[S, V]]\n\n\n\n\n\nprimitive _LRR[S, V]\n\n  fun _get_lr_record(recur: _LRByRule[S, V], rule: Rule[S, V], loc: Loc[S])\n\n    : (_LRRecord[S, V] | None)\n\n  =>\n\n    try\n\n      let loc_lr = recur(rule)?\n\n      loc_lr(loc)?\n\n    else\n\n      None\n\n    end\n\n\n\n  fun _set_lr_record(recur: _LRByRule[S, V], rule: Rule[S, V],\n\n    lr: _LRRecord[S, V]) : _LRByRule[S, V]\n\n  =>\n\n    let loc_lr =\n\n      try\n\n        recur(rule)?\n\n      else\n\n        _LRByLoc[S, V]\n\n      end\n\n    recur.update(rule, loc_lr.update(lr.start, lr))\n\n\n\n  fun _del_lr_record(recur: _LRByRule[S, V], rule: Rule[S, V], loc: Loc[S])\n\n    : _LRByRule[S, V]\n\n  =>\n\n    let loc_lr =\n\n      try\n\n        recur(rule)?\n\n      else\n\n        _LRByLoc[S, V]\n\n      end\n\n    try\n\n      recur.update(rule, loc_lr.remove(loc)?)\n\n    else\n\n      recur\n\n    end\n\n\n\n\n\nprimitive Dbg[S, V]\n\n  fun _dbg(stack: List[_LRRecord[S, V]], msg: String) =>\n\n    Debug.out(_dbg_get_indent(stack) + msg)\n\n\n\n  fun _dbg_res(result: Result[S, V]): String =>\n\n    match result\n\n    | let success: Success[S, V] =>\n\n      \"  => [\" + success.start.string() + \",\" + success.next.string() + \")\"\n\n    | let failure: Failure[S, V] =>\n\n      \"  => !\" + failure.start.string() + \": '\" + failure.message + \"'\"\n\n    end\n\n\n\n  fun _dbg_get_indent(stack: List[_LRRecord[S, V]]): String =>\n\n    recover\n\n      var len = stack.size() * 2\n\n      let s = String(len)\n\n      while (len = len - 1) > 0 do\n\n        s.push(' ')\n\n      end\n\n      s\n\n    end",
            "title": "parser.pony"
        },
        {
            "location": "/src/kiuatan/loc/",
            "text": "use mut = \"collections\"\n\nuse \"collections/persistent\"\n\n\n\ntype Segment[T] is ReadSeq[T] val\n\ntype Source[T] is List[Segment[T]]\n\n\n\nclass val Loc[T] is (mut.Hashable & Equatable[Loc[T]] & Stringable)\n\n  \"\"\"\n\n  Represents a location in a [`Source`](/kiuatan-Source) at which to parse, or at which a parse has matched.\n\n  \"\"\"\n\n\n\n  let _segment: List[Segment[T]]\n\n  let _index: USize\n\n\n\n  new val create(segment: List[Segment[T]], index: USize = 0) =>\n\n    \"\"\"\n\n    Create a new location in the given segment.\n\n    \"\"\"\n\n    _segment = segment\n\n    _index = index\n\n\n\n  fun has_value(): Bool =>\n\n    \"\"\"\n\n    Returns `true` if there is actually an item at the location, i.e. if the location points to a valid place in the segment.\n\n    \"\"\"\n\n    try\n\n      _index < _segment(0)?.size()\n\n    else\n\n      false\n\n    end\n\n\n\n  fun apply(): val->T ? =>\n\n    \"\"\"\n\n    Returns the item at the location.\n\n    \"\"\"\n\n    _segment(0)?(_index)?\n\n\n\n  fun next(): val->Loc[T] =>\n\n    \"\"\"\n\n    Returns the next location in the source.  May not be valid.\n\n    \"\"\"\n\n    try\n\n      if (_index+1) >= _segment(0)?.size() then\n\n        match _segment.tail()?\n\n        | let cons: Cons[Segment[T]] =>\n\n          return Loc[T](cons, 0)\n\n        end\n\n      end\n\n    end\n\n    Loc[T](_segment, _index + 1)\n\n\n\n  fun val add(n: USize): val->Loc[T] =>\n\n    \"\"\"\n\n    Returns a location `n` places further in the source.  May not be valid.\n\n    \"\"\"\n\n    var cur = this\n\n    var i = n\n\n    while i > 0 do\n\n      cur = cur.next()\n\n      i = i - 1\n\n    end\n\n    cur\n\n\n\n  fun eq(that: Loc[T]): Bool =>\n\n    \"\"\"\n\n    Returns `true` if the two locations point to the same spot in the same segment.\n\n    \"\"\"\n\n    try\n\n      (_index == that._index) and (_segment(0)? is that._segment(0)?)\n\n    else\n\n      false\n\n    end\n\n\n\n  fun ne(that: Loc[T]): Bool =>\n\n    \"\"\"\n\n    Returns `true` if the two locations do not point to the same spot in the same segment.\n\n    \"\"\"\n\n    try\n\n      not ((_index == that._index) and (_segment(0)? is that._segment(0)?))\n\n    else\n\n      false\n\n    end\n\n\n\n  fun gt(that: Loc[T]): Bool =>\n\n    \"\"\"\n\n    Returns `true` if `that` is further along in the source than `this`.  Should be used sparingly, as it has to count up from `this`, possibly to the end of the source.\n\n    \"\"\"\n\n    var cur = this.next()\n\n    while cur.has_value() do\n\n      if cur == that then\n\n        return true\n\n      end\n\n      cur = cur.next()\n\n    end\n\n    false\n\n\n\n  fun hash(): USize =>\n\n    try\n\n      let seq = _segment(0)?\n\n      (digestof seq) xor _index\n\n    else\n\n      0\n\n    end\n\n\n\n  fun string(): String iso^ =>\n\n    recover\n\n      let s = String\n\n      // try\n\n      //   let seq = _segment(0)?\n\n      //   s.append((digestof seq).string())\n\n      //   s.append(\":\")\n\n      // end\n\n      s.append(_index.string())\n\n      s\n\n    end",
            "title": "loc.pony"
        },
        {
            "location": "/src/builtin/unsigned/",
            "text": "primitive U8 is _UnsignedInteger[U8]\n  new create(value: U8) => value\n  new from[B: (Number & Real[B] val)](a: B) => a.u8()\n\n  new min_value() => 0\n  new max_value() => 0xFF\n\n  fun next_pow2(): U8 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U8 => this\n  fun bit_reverse(): U8 => @\"llvm.bitreverse.i8\"[U8](this)\n  fun bswap(): U8 => this\n  fun popcount(): U8 => @\"llvm.ctpop.i8\"[U8](this)\n  fun clz(): U8 => @\"llvm.ctlz.i8\"[U8](this, false)\n  fun ctz(): U8 => @\"llvm.cttz.i8\"[U8](this, false)\n\n  fun clz_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i8\"[U8](this, true)\n\n  fun ctz_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i8\"[U8](this, true)\n\n  fun bitwidth(): U8 => 8\n  fun min(y: U8): U8 => if this < y then this else y end\n  fun max(y: U8): U8 => if this > y then this else y end\n\n  fun addc(y: U8): (U8, Bool) =>\n    @\"llvm.uadd.with.overflow.i8\"[(U8, Bool)](this, y)\n\n  fun subc(y: U8): (U8, Bool) =>\n    @\"llvm.usub.with.overflow.i8\"[(U8, Bool)](this, y)\n\n  fun mulc(y: U8): (U8, Bool) =>\n    @\"llvm.umul.with.overflow.i8\"[(U8, Bool)](this, y)\n\nprimitive U16 is _UnsignedInteger[U16]\n  new create(value: U16) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.u16()\n\n  new min_value() => 0\n  new max_value() => 0xFFFF\n\n  fun next_pow2(): U16 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U16 => this\n  fun bit_reverse(): U16 => @\"llvm.bitreverse.i16\"[U16](this)\n  fun bswap(): U16 => @\"llvm.bswap.i16\"[U16](this)\n  fun popcount(): U16 => @\"llvm.ctpop.i16\"[U16](this)\n  fun clz(): U16 => @\"llvm.ctlz.i16\"[U16](this, false)\n  fun ctz(): U16 => @\"llvm.cttz.i16\"[U16](this, false)\n\n  fun clz_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i16\"[U16](this, true)\n\n  fun ctz_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i16\"[U16](this, true)\n\n  fun bitwidth(): U16 => 16\n  fun min(y: U16): U16 => if this < y then this else y end\n  fun max(y: U16): U16 => if this > y then this else y end\n\n  fun addc(y: U16): (U16, Bool) =>\n    @\"llvm.uadd.with.overflow.i16\"[(U16, Bool)](this, y)\n\n  fun subc(y: U16): (U16, Bool) =>\n    @\"llvm.usub.with.overflow.i16\"[(U16, Bool)](this, y)\n\n  fun mulc(y: U16): (U16, Bool) =>\n    @\"llvm.umul.with.overflow.i16\"[(U16, Bool)](this, y)\n\nprimitive U32 is _UnsignedInteger[U32]\n  new create(value: U32) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.u32()\n\n  new min_value() => 0\n  new max_value() => 0xFFFF_FFFF\n\n  fun next_pow2(): U32 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U32 => this\n  fun bit_reverse(): U32 => @\"llvm.bitreverse.i32\"[U32](this)\n  fun bswap(): U32 => @\"llvm.bswap.i32\"[U32](this)\n  fun popcount(): U32 => @\"llvm.ctpop.i32\"[U32](this)\n  fun clz(): U32 => @\"llvm.ctlz.i32\"[U32](this, false)\n  fun ctz(): U32 => @\"llvm.cttz.i32\"[U32](this, false)\n\n  fun clz_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i32\"[U32](this, true)\n\n  fun ctz_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i32\"[U32](this, true)\n\n  fun bitwidth(): U32 => 32\n  fun min(y: U32): U32 => if this < y then this else y end\n  fun max(y: U32): U32 => if this > y then this else y end\n\n  fun addc(y: U32): (U32, Bool) =>\n    @\"llvm.uadd.with.overflow.i32\"[(U32, Bool)](this, y)\n\n  fun subc(y: U32): (U32, Bool) =>\n    @\"llvm.usub.with.overflow.i32\"[(U32, Bool)](this, y)\n\n  fun mulc(y: U32): (U32, Bool) =>\n    @\"llvm.umul.with.overflow.i32\"[(U32, Bool)](this, y)\n\nprimitive U64 is _UnsignedInteger[U64]\n  new create(value: U64) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.u64()\n\n  new min_value() => 0\n  new max_value() => 0xFFFF_FFFF_FFFF_FFFF\n\n  fun next_pow2(): U64 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U64 => this\n  fun bit_reverse(): U64 => @\"llvm.bitreverse.i64\"[U64](this)\n  fun bswap(): U64 => @\"llvm.bswap.i64\"[U64](this)\n  fun popcount(): U64 => @\"llvm.ctpop.i64\"[U64](this)\n  fun clz(): U64 => @\"llvm.ctlz.i64\"[U64](this, false)\n  fun ctz(): U64 => @\"llvm.cttz.i64\"[U64](this, false)\n\n  fun clz_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i64\"[U64](this, true)\n\n  fun ctz_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i64\"[U64](this, true)\n\n  fun bitwidth(): U64 => 64\n  fun min(y: U64): U64 => if this < y then this else y end\n  fun max(y: U64): U64 => if this > y then this else y end\n\n  fun hash(): USize =>\n    ifdef ilp32 then\n      ((this >> 32).u32() xor this.u32()).hash()\n    else\n      usize().hash()\n    end\n\n  fun addc(y: U64): (U64, Bool) =>\n    @\"llvm.uadd.with.overflow.i64\"[(U64, Bool)](this, y)\n\n  fun subc(y: U64): (U64, Bool) =>\n    @\"llvm.usub.with.overflow.i64\"[(U64, Bool)](this, y)\n\n  fun mulc(y: U64): (U64, Bool) =>\n    @\"llvm.umul.with.overflow.i64\"[(U64, Bool)](this, y)\n\nprimitive ULong is _UnsignedInteger[ULong]\n  new create(value: ULong) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.ulong()\n\n  new min_value() => 0\n\n  new max_value() =>\n    ifdef ilp32 or llp64 then\n      0xFFFF_FFFF\n    else\n      0xFFFF_FFFF_FFFF_FFFF\n    end\n\n  fun next_pow2(): ULong =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): ULong => this\n\n  fun bit_reverse(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.bitreverse.i32\"[ULong](this)\n    else\n      @\"llvm.bitreverse.i64\"[ULong](this)\n    end\n\n  fun bswap(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.bswap.i32\"[ULong](this)\n    else\n      @\"llvm.bswap.i64\"[ULong](this)\n    end\n\n  fun popcount(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctpop.i32\"[ULong](this)\n    else\n      @\"llvm.ctpop.i64\"[ULong](this)\n    end\n\n  fun clz(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctlz.i32\"[ULong](this, false)\n    else\n      @\"llvm.ctlz.i64\"[ULong](this, false)\n    end\n\n  fun ctz(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.cttz.i32\"[ULong](this, false)\n    else\n      @\"llvm.cttz.i64\"[ULong](this, false)\n    end\n\n  fun clz_unsafe(): ULong =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctlz.i32\"[ULong](this, true)\n    else\n      @\"llvm.ctlz.i64\"[ULong](this, true)\n    end\n\n  fun ctz_unsafe(): ULong =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    ifdef ilp32 or llp64 then\n      @\"llvm.cttz.i32\"[ULong](this, false)\n    else\n      @\"llvm.cttz.i64\"[ULong](this, true)\n    end\n\n  fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end\n  fun min(y: ULong): ULong => if this < y then this else y end\n  fun max(y: ULong): ULong => if this > y then this else y end\n\n  fun hash(): USize =>\n    ifdef ilp32 or llp64 then\n      u32().hash()\n    else\n      u64().hash()\n    end\n\n  fun addc(y: ULong): (ULong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.uadd.with.overflow.i32\"[(ULong, Bool)](this, y)\n    else\n      @\"llvm.uadd.with.overflow.i64\"[(ULong, Bool)](this, y)\n    end\n\n  fun subc(y: ULong): (ULong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.usub.with.overflow.i32\"[(ULong, Bool)](this, y)\n    else\n      @\"llvm.usub.with.overflow.i64\"[(ULong, Bool)](this, y)\n    end\n\n  fun mulc(y: ULong): (ULong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.umul.with.overflow.i32\"[(ULong, Bool)](this, y)\n    else\n      @\"llvm.umul.with.overflow.i64\"[(ULong, Bool)](this, y)\n    end\n\nprimitive USize is _UnsignedInteger[USize]\n  new create(value: USize) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.usize()\n\n  new min_value() => 0\n\n  new max_value() =>\n    ifdef ilp32 then\n      0xFFFF_FFFF\n    else\n      0xFFFF_FFFF_FFFF_FFFF\n    end\n\n  fun next_pow2(): USize =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): USize => this\n\n  fun bit_reverse(): USize =>\n    ifdef ilp32 then\n      @\"llvm.bitreverse.i32\"[USize](this)\n    else\n      @\"llvm.bitreverse.i64\"[USize](this)\n    end\n\n  fun bswap(): USize =>\n    ifdef ilp32 then\n      @\"llvm.bswap.i32\"[USize](this)\n    else\n      @\"llvm.bswap.i64\"[USize](this)\n    end\n\n  fun popcount(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctpop.i32\"[USize](this)\n    else\n      @\"llvm.ctpop.i64\"[USize](this)\n    end\n\n  fun clz(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctlz.i32\"[USize](this, false)\n    else\n      @\"llvm.ctlz.i64\"[USize](this, false)\n    end\n\n  fun ctz(): USize =>\n    ifdef ilp32 then\n      @\"llvm.cttz.i32\"[USize](this, false)\n    else\n      @\"llvm.cttz.i64\"[USize](this, false)\n    end\n\n  fun clz_unsafe(): USize =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    ifdef ilp32 then\n      @\"llvm.ctlz.i32\"[USize](this, true)\n    else\n      @\"llvm.ctlz.i64\"[USize](this, true)\n    end\n\n  fun ctz_unsafe(): USize =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    ifdef ilp32 then\n      @\"llvm.cttz.i32\"[USize](this, true)\n    else\n      @\"llvm.cttz.i64\"[USize](this, true)\n    end\n\n  fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end\n  fun min(y: USize): USize => if this < y then this else y end\n  fun max(y: USize): USize => if this > y then this else y end\n\n  fun addc(y: USize): (USize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.uadd.with.overflow.i32\"[(USize, Bool)](this, y)\n    else\n      @\"llvm.uadd.with.overflow.i64\"[(USize, Bool)](this, y)\n    end\n\n  fun subc(y: USize): (USize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.usub.with.overflow.i32\"[(USize, Bool)](this, y)\n    else\n      @\"llvm.usub.with.overflow.i64\"[(USize, Bool)](this, y)\n    end\n\n  fun mulc(y: USize): (USize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.umul.with.overflow.i32\"[(USize, Bool)](this, y)\n    else\n      @\"llvm.umul.with.overflow.i64\"[(USize, Bool)](this, y)\n    end\n\nprimitive U128 is _UnsignedInteger[U128]\n  new create(value: U128) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.u128()\n\n  new min_value() => 0\n  new max_value() => 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF\n\n  fun next_pow2(): U128 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U128 => this\n  fun bit_reverse(): U128 => @\"llvm.bitreverse.i128\"[U128](this)\n  fun bswap(): U128 => @\"llvm.bswap.i128\"[U128](this)\n  fun popcount(): U128 => @\"llvm.ctpop.i128\"[U128](this)\n  fun clz(): U128 => @\"llvm.ctlz.i128\"[U128](this, false)\n  fun ctz(): U128 => @\"llvm.cttz.i128\"[U128](this, false)\n\n  fun clz_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i128\"[U128](this, true)\n\n  fun ctz_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i128\"[U128](this, true)\n\n  fun bitwidth(): U128 => 128\n  fun min(y: U128): U128 => if this < y then this else y end\n  fun max(y: U128): U128 => if this > y then this else y end\n\n  fun hash(): USize =>\n    ifdef ilp32 then\n      ((this >> 96).u32() xor\n      (this >> 64).u32() xor\n      (this >> 32).u32() xor\n      this.u32()).hash()\n    else\n      ((this >> 64).u64() xor this.u64()).hash()\n    end\n\n  fun hash64(): U64 =>\n    ((this >> 64).u64() xor this.u64()).hash64()\n\n  fun string(): String iso^ =>\n    _ToString._u128(this, false)\n\n  fun mul(y: U128): U128 =>\n    ifdef native128 then\n      this * y\n    else\n      let x_hi = (this >> 64).u64()\n      let x_lo = this.u64()\n      let y_hi = (y >> 64).u64()\n      let y_lo = y.u64()\n\n      let mask = U64(0x00000000FFFFFFFF)\n\n      var lo = (x_lo and mask) * (y_lo and mask)\n      var t = lo >> 32\n      lo = lo and mask\n      t = t + ((x_lo >> 32) * (y_lo and mask))\n      lo = lo + ((t and mask) << 32)\n\n      var hi = t >> 32\n      t = lo >> 32\n      lo = lo and mask\n      t = t + ((y_lo >> 32) * (x_lo and mask))\n      lo = lo + ((t and mask) << 32)\n      hi = hi + (t >> 32)\n      hi = hi + ((x_lo >> 32) * (y_lo >> 32))\n      hi = hi + (x_hi * y_lo) + (x_lo * y_hi)\n\n      (hi.u128() << 64) or lo.u128()\n    end\n\n  fun divmod(y: U128): (U128, U128) =>\n    ifdef native128 then\n      (this / y, this % y)\n    else\n      if y == 0 then\n        return (0, 0)\n      end\n\n      var quot: U128 = 0\n      var qbit: U128 = 1\n      var num = this\n      var den = y\n\n      while den.i128() >= 0 do\n        den = den << 1\n        qbit = qbit << 1\n      end\n\n      while qbit != 0 do\n        if den <= num then\n          num = num - den\n          quot = quot + qbit\n        end\n\n        den = den >> 1\n        qbit = qbit >> 1\n      end\n      (quot, num)\n    end\n\n  fun div(y: U128): U128 =>\n    ifdef native128 then\n      this / y\n    else\n      (let q, let r) = divmod(y)\n      q\n    end\n\n  fun mod(y: U128): U128 =>\n    ifdef native128 then\n      this % y\n    else\n      (let q, let r) = divmod(y)\n      r\n    end\n\n  fun mul_unsafe(y: U128): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this *~ y\n    else\n      this * y\n    end\n\n  fun divmod_unsafe(y: U128): (U128, U128) =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      (this *~ y, this /~ y)\n    else\n      divmod(y)\n    end\n\n  fun div_unsafe(y: U128): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this /~ y\n    else\n      this / y\n    end\n\n  fun mod_unsafe(y: U128): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this %~ y\n    else\n      this % y\n    end\n\n  fun f32(): F32 =>\n    let v = f64()\n    if v > F32.max_value().f64() then\n      F32._inf(false)\n    else\n      v.f32()\n    end\n\n  fun f64(): F64 =>\n    if this == 0 then\n      return 0\n    end\n\n    var a = this\n    let sd = bitwidth() - clz()\n    var e = (sd - 1).u64()\n\n    if sd > 53 then\n      match sd\n      | 54 => a = a << 1\n      | 55 => None\n      else\n        a = (a >> (sd - 55)) or\n          if (a and (-1 >> ((bitwidth() + 55) - sd))) != 0 then 1 else 0 end\n      end\n\n      if (a and 4) != 0 then\n        a = a or 1\n      end\n\n      a = (a + 1) >> 2\n\n      if (a and (1 << 53)) != 0 then\n        a = a >> 1\n        e = e + 1\n      end\n    else\n      a = a << (53 - sd)\n    end\n\n    F64.from_bits(((e + 1023) << 52) or (a.u64() and 0xF_FFFF_FFFF_FFFF))\n\n  fun f32_unsafe(): F32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64_unsafe().f32_unsafe()\n\n  fun f64_unsafe(): F64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64()\n\n  fun addc(y: U128): (U128, Bool) =>\n    ifdef native128 then\n      @\"llvm.uadd.with.overflow.i128\"[(U128, Bool)](this, y)\n    else\n      let overflow = this > (max_value() - y)\n      (this + y, overflow)\n    end\n\n  fun subc(y: U128): (U128, Bool) =>\n    ifdef native128 then\n      @\"llvm.usub.with.overflow.i128\"[(U128, Bool)](this, y)\n    else\n      let overflow = this < y\n      (this - y, overflow)\n    end\n\n  fun mulc(y: U128): (U128, Bool) =>\n    ifdef native128 then\n      @\"llvm.umul.with.overflow.i128\"[(U128, Bool)](this, y)\n    else\n      let result = this * y\n      let overflow = (this != 0) and ((result / this) != y)\n      (result, overflow)\n    end\n\ntype Unsigned is (U8 | U16 | U32 | U64 | U128 | ULong | USize)",
            "title": "unsigned.pony"
        },
        {
            "location": "/src/builtin/stringable/",
            "text": "interface box Stringable\n  \"\"\"\n  Things that can be turned into a String.\n  \"\"\"\n  fun string(): String iso^\n    \"\"\"\n    Generate a string representation of this object.\n    \"\"\"",
            "title": "stringable.pony"
        },
        {
            "location": "/src/builtin/string/",
            "text": "use @memcmp[I32](dst: Pointer[U8] box, src: Pointer[U8] box, len: USize)\nuse @memset[Pointer[None]](dst: Pointer[None], set: U32, len: USize)\nuse @memmove[Pointer[None]](dst: Pointer[None], src: Pointer[None], len: USize)\nuse @strtof[F32](nptr: Pointer[U8] box, endptr: USize)\nuse @strtod[F64](nptr: Pointer[U8] box, endptr: USize)\n\nclass val String is (Seq[U8] & Comparable[String box] & Stringable)\n  \"\"\"\n  A String is an ordered collection of characters.\n\n  Strings don't specify an encoding.\n\n  Example usage of some common String methods:\n\n```pony\nactor Main\n  new create(env: Env) =>\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\")\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\")\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end\n```\n  \"\"\"\n  var _size: USize\n  var _alloc: USize\n  var _ptr: Pointer[U8]\n\n  new create(len: USize = 0) =>\n    \"\"\"\n    An empty string. Enough space for len bytes is reserved.\n    \"\"\"\n    _size = 0\n    _alloc = len.min(len.max_value() - 1) + 1\n    _ptr = Pointer[U8]._alloc(_alloc)\n    _set(0, 0)\n\n  new val from_array(data: Array[U8] val) =>\n    \"\"\"\n    Create a string from an array, reusing the underlying data pointer.\n    \"\"\"\n    _size = data.size()\n    _alloc = data.space()\n    _ptr = data.cpointer()._unsafe()\n\n  new iso from_iso_array(data: Array[U8] iso) =>\n    \"\"\"\n    Create a string from an array, reusing the underlying data pointer\n    \"\"\"\n    _size = data.size()\n    _alloc = data.space()\n    _ptr = (consume data).cpointer()._unsafe()\n    if _alloc > _size then\n      _set(_size, 0)\n    end\n\n  new from_cpointer(str: Pointer[U8], len: USize, alloc: USize = 0) =>\n    \"\"\"\n    Return a string from binary pointer data without making a\n    copy. This must be done only with C-FFI functions that return\n    pony_alloc'd character arrays. If a null pointer is given then an\n    empty string is returned.\n    \"\"\"\n    if str.is_null() then\n      _size = 0\n      _alloc = 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      _set(0, 0)\n    else\n      _size = len\n      _alloc = alloc.max(_size.min(len.max_value() - 1))\n      _ptr = str\n    end\n\n  new from_cstring(str: Pointer[U8]) =>\n    \"\"\"\n    Return a string from a pointer to a null-terminated cstring\n    without making a copy. The data is not copied. This must be done\n    only with C-FFI functions that return pony_alloc'd character\n    arrays. The pointer is scanned for the first null byte, which will\n    be interpreted as the null terminator. Note that the scan is\n    unbounded; the pointed to data must be null-terminated within\n    the allocated array to preserve memory safety. If a null pointer\n    is given then an empty string is returned.\n    \"\"\"\n    if str.is_null() then\n      _size = 0\n      _alloc = 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      _set(0, 0)\n    else\n      var i: USize = 0\n\n      while str._apply(i) != 0 do\n        i = i + 1\n      end\n\n      _size = i\n      _alloc = i + 1\n      _ptr = str\n    end\n\n  new copy_cpointer(str: Pointer[U8] box, len: USize) =>\n    \"\"\"\n    Create a string by copying a fixed number of bytes from a pointer.\n    \"\"\"\n    if str.is_null() then\n      _size = 0\n      _alloc = 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      _set(0, 0)\n    else\n      _size = len\n      _alloc = _size + 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      str._copy_to(_ptr, _alloc)\n    end\n\n  new copy_cstring(str: Pointer[U8] box) =>\n    \"\"\"\n    Create a string by copying a null-terminated C string. Note that\n    the scan is unbounded; the pointed to data must be null-terminated\n    within the allocated array to preserve memory safety. If a null\n    pointer is given then an empty string is returned.\n    \"\"\"\n    if str.is_null() then\n      _size = 0\n      _alloc = 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      _set(0, 0)\n    else\n      var i: USize = 0\n\n      while str._apply(i) != 0 do\n        i = i + 1\n      end\n\n      _size = i\n      _alloc = i + 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      str._copy_to(_ptr, _alloc)\n    end\n\n  new from_utf32(value: U32) =>\n    \"\"\"\n    Create a UTF-8 string from a single UTF-32 code point.\n    \"\"\"\n    let encoded = _UTF32Encoder.encode(value)\n    _size = encoded._1\n    _alloc = _size + 1\n    _ptr = Pointer[U8]._alloc(_alloc)\n    _set(0, encoded._2)\n    if encoded._1 > 1 then\n      _set(1, encoded._3)\n      if encoded._1 > 2 then\n        _set(2, encoded._4)\n        if encoded._1 > 3 then\n          _set(3, encoded._5)\n        end\n      end\n    end\n    _set(_size, 0)\n\n  fun ref push_utf32(value: U32) =>\n    \"\"\"\n    Push a UTF-32 code point.\n    \"\"\"\n    let encoded = _UTF32Encoder.encode(value)\n    let i = _size\n    _size = _size + encoded._1\n    reserve(_size)\n    _set(i, encoded._2)\n    if encoded._1 > 1 then\n      _set(i + 1, encoded._3)\n      if encoded._1 > 2 then\n        _set(i + 2, encoded._4)\n        if encoded._1 > 3 then\n          _set(i + 3, encoded._5)\n        end\n      end\n    end\n    _set(_size, 0)\n\n  fun box _copy_to(ptr: Pointer[U8] ref, copy_len: USize,\n    from_offset: USize = 0, to_offset: USize = 0) =>\n    \"\"\"\n    Copy copy_len characters from this to that at specified offsets.\n    \"\"\"\n    _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len)\n\n  fun cpointer(offset: USize = 0): Pointer[U8] tag =>\n    \"\"\"\n    Returns a C compatible pointer to the underlying string allocation.\n    \"\"\"\n    _ptr._offset(offset)\n\n  fun cstring(): Pointer[U8] tag =>\n    \"\"\"\n    Returns a C compatible pointer to a null-terminated version of the\n    string, safe to pass to an FFI function that doesn't accept a size\n    argument, expecting a null-terminator. If the underlying string\n    is already null terminated, this is returned; otherwise the string\n    is copied into a new, null-terminated allocation.\n    \"\"\"\n    if is_null_terminated() then\n      return _ptr\n    end\n\n    let ptr = Pointer[U8]._alloc(_size + 1)\n    _ptr._copy_to(ptr._unsafe(), _size)\n    ptr._update(_size, 0)\n    ptr\n\n  fun val array(): Array[U8] val =>\n    \"\"\"\n    Returns an Array[U8] that that reuses the underlying data pointer.\n    \"\"\"\n    recover\n      Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc)\n    end\n\n  fun size(): USize =>\n    \"\"\"\n    Returns the length of the string data in bytes.\n    \"\"\"\n    _size\n\n  fun codepoints(from: ISize = 0, to: ISize = ISize.max_value()): USize =>\n    \"\"\"\n    Returns the number of unicode code points in the string between the two\n    offsets. Index range [`from` .. `to`) is half-open.\n    \"\"\"\n    if _size == 0 then\n      return 0\n    end\n\n    var i = offset_to_index(from)\n    let j = offset_to_index(to).min(_size)\n    var n = USize(0)\n\n    while i < j do\n      if (_ptr._apply(i) and 0xC0) != 0x80 then\n        n = n + 1\n      end\n\n      i = i + 1\n    end\n\n    n\n\n  fun space(): USize =>\n    \"\"\"\n    Returns the space available for data, not including the null terminator.\n    \"\"\"\n    if is_null_terminated() then _alloc - 1 else _alloc end\n\n  fun ref reserve(len: USize) =>\n    \"\"\"\n    Reserve space for len bytes. An additional byte will be reserved for the\n    null terminator.\n    \"\"\"\n    if _alloc <= len then\n      let max = len.max_value() - 1\n      let min_alloc = len.min(max) + 1\n      if min_alloc <= (max / 2) then\n        _alloc = min_alloc.next_pow2()\n      else\n        _alloc = min_alloc.min(max)\n      end\n      _ptr = _ptr._realloc(_alloc)\n    end\n\n  fun ref compact() =>\n    \"\"\"\n    Try to remove unused space, making it available for garbage collection. The\n    request may be ignored. The string is returned to allow call chaining.\n    \"\"\"\n    if (_size + 1) <= 512 then\n      if (_size + 1).next_pow2() != _alloc.next_pow2() then\n        _alloc = (_size + 1).next_pow2()\n        let old_ptr = _ptr = Pointer[U8]._alloc(_alloc)\n        old_ptr._copy_to(_ptr, _size)\n        _set(_size, 0)\n      end\n    elseif (_size + 1) < _alloc then\n      _alloc = (_size + 1)\n      let old_ptr = _ptr = Pointer[U8]._alloc(_alloc)\n      old_ptr._copy_to(_ptr, _size)\n      _set(_size, 0)\n    end\n\n  fun ref recalc() =>\n    \"\"\"\n    Recalculates the string length. This is only needed if the string is\n    changed via an FFI call. If a null terminator byte is not found within the\n    allocated length, the size will not be changed.\n    \"\"\"\n    var s: USize = 0\n\n    while (s < _alloc) and (_ptr._apply(s) > 0) do\n      s = s + 1\n    end\n\n    if s != _alloc then\n      _size = s\n    end\n\n  fun ref truncate(len: USize) =>\n    \"\"\"\n    Truncates the string at the minimum of len and space. Ensures there is a\n    null terminator. Does not check for null terminators inside the string.\n\n    Note that memory is not freed by this operation.\n    \"\"\"\n    if len >= _alloc then\n      _size = len.min(_alloc)\n      reserve(_alloc + 1)\n    else\n      _size = len.min(_alloc - 1)\n    end\n\n    _set(_size, 0)\n\n  fun ref trim_in_place(from: USize = 0, to: USize = -1) =>\n    \"\"\"\n    Trim the string to a portion of itself, covering `from` until `to`.\n    Unlike slice, the operation does not allocate a new string nor copy\n    elements.\n    \"\"\"\n    let last = _size.min(to)\n    let offset = last.min(from)\n    let size' = last - offset\n\n    // use the new size' for alloc if we're not including the last used byte\n    // from the original data and only include the extra allocated bytes if\n    // we're including the last byte.\n    _alloc = if last == _size then _alloc - offset else size' end\n\n    _size = size'\n\n    // if _alloc == 0 then we've trimmed all the memory originally allocated.\n    // if we do _ptr._offset, we will spill into memory not allocated/owned\n    // by this string and could potentially cause a segfault if we cross\n    // a pagemap boundary into a pagemap address that hasn't been allocated\n    // yet when `reserve` is called next.\n    if _alloc == 0 then\n      _ptr = Pointer[U8]\n    else\n      _ptr = _ptr._offset(offset)\n    end\n\n  fun val trim(from: USize = 0, to: USize = -1): String val =>\n    \"\"\"\n    Return a shared portion of this string, covering `from` until `to`.\n    Both the original and the new string are immutable, as they share memory.\n    The operation does not allocate a new string pointer nor copy elements.\n    \"\"\"\n    let last = _size.min(to)\n    let offset = last.min(from)\n\n    recover\n      let size' = last - offset\n\n      // use the new size' for alloc if we're not including the last used byte\n      // from the original data and only include the extra allocated bytes if\n      // we're including the last byte.\n      let alloc = if last == _size then _alloc - offset else size' end\n\n      if size' > 0 then\n        from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc)\n      else\n        create()\n      end\n    end\n\n  fun iso chop(split_point: USize): (String iso^, String iso^) =>\n    \"\"\"\n    Chops the string in half at the split point requested and returns both\n    the left and right portions. The original string is trimmed in place and\n    returned as the right portion. If the split point is larger than the\n    string, the left portion is the original string and the right portion\n    is a new empty string.\n    Both strings are isolated and mutable, as they do not share memory.\n    The operation does not allocate a new string pointer nor copy elements.\n    \"\"\"\n    let start_ptr = _ptr\n    let size' = _size.min(split_point)\n    let alloc = if size' == _size then _alloc else split_point end\n\n    trim_in_place(split_point)\n\n    let left = recover\n      if size' > 0 then\n        from_cpointer(start_ptr._unsafe(), size', alloc)\n      else\n        create()\n      end\n    end\n\n    (consume left, consume this)\n\n  fun is_null_terminated(): Bool =>\n    \"\"\"\n    Return true if the string is null-terminated and safe to pass to an FFI\n    function that doesn't accept a size argument, expecting a null-terminator.\n    This method checks that there is a null byte just after the final position\n    of populated bytes in the string, but does not check for other null bytes\n    which may be present earlier in the content of the string.\n    If you need a null-terminated copy of this string, use the clone method.\n    \"\"\"\n    (_alloc > 0) and (_alloc != _size) and (_ptr._apply(_size) == 0)\n\n  fun utf32(offset: ISize): (U32, U8) ? =>\n    \"\"\"\n    Return a UTF32 representation of the character at the given offset and the\n    number of bytes needed to encode that character. If the offset does not\n    point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\n    replacement character) and a length of one. Raise an error if the offset is\n    out of bounds.\n    \"\"\"\n    let i = offset_to_index(offset)\n    let err: (U32, U8) = (0xFFFD, 1)\n\n    if i >= _size then error end\n    let c = _ptr._apply(i)\n\n    if c < 0x80 then\n      // 1-byte\n      (c.u32(), 1)\n    elseif c < 0xC2 then\n      // Stray continuation.\n      err\n    elseif c < 0xE0 then\n      // 2-byte\n      if (i + 1) >= _size then\n        // Not enough bytes.\n        err\n      else\n        let c2 = _ptr._apply(i + 1)\n        if (c2 and 0xC0) != 0x80 then\n          // Not a continuation byte.\n          err\n        else\n          (((c.u32() << 6) + c2.u32()) - 0x3080, 2)\n        end\n      end\n    elseif c < 0xF0 then\n      // 3-byte.\n      if (i + 2) >= _size then\n        // Not enough bytes.\n        err\n      else\n        let c2 = _ptr._apply(i + 1)\n        let c3 = _ptr._apply(i + 2)\n        if\n          // Not continuation bytes.\n          ((c2 and 0xC0) != 0x80) or\n          ((c3 and 0xC0) != 0x80) or\n          // Overlong encoding.\n          ((c == 0xE0) and (c2 < 0xA0))\n        then\n          err\n        else\n          (((c.u32() << 12) + (c2.u32() << 6) + c3.u32()) - 0xE2080, 3)\n        end\n      end\n    elseif c < 0xF5 then\n      // 4-byte.\n      if (i + 3) >= _size then\n        // Not enough bytes.\n        err\n      else\n        let c2 = _ptr._apply(i + 1)\n        let c3 = _ptr._apply(i + 2)\n        let c4 = _ptr._apply(i + 3)\n        if\n          // Not continuation bytes.\n          ((c2 and 0xC0) != 0x80) or\n          ((c3 and 0xC0) != 0x80) or\n          ((c4 and 0xC0) != 0x80) or\n          // Overlong encoding.\n          ((c == 0xF0) and (c2 < 0x90)) or\n          // UTF32 would be > 0x10FFFF.\n          ((c == 0xF4) and (c2 >= 0x90))\n        then\n          err\n        else\n          (((c.u32() << 18) +\n            (c2.u32() << 12) +\n            (c3.u32() << 6) +\n            c4.u32()) - 0x3C82080, 4)\n        end\n      end\n    else\n      // UTF32 would be > 0x10FFFF.\n      err\n    end\n\n  fun apply(i: USize): U8 ? =>\n    \"\"\"\n    Returns the i-th byte. Raise an error if the index is out of bounds.\n    \"\"\"\n    if i < _size then _ptr._apply(i) else error end\n\n  fun ref update(i: USize, value: U8): U8 ? =>\n    \"\"\"\n    Change the i-th byte. Raise an error if the index is out of bounds.\n    \"\"\"\n    if i < _size then\n      _set(i, value)\n    else\n      error\n    end\n\n  fun at_offset(offset: ISize): U8 ? =>\n    \"\"\"\n    Returns the byte at the given offset. Raise an error if the offset is out\n    of bounds.\n    \"\"\"\n    this(offset_to_index(offset))?\n\n  fun ref update_offset(offset: ISize, value: U8): U8 ? =>\n    \"\"\"\n    Changes a byte in the string, returning the previous byte at that offset.\n    Raise an error if the offset is out of bounds.\n    \"\"\"\n    this(offset_to_index(offset))? = value\n\n  fun clone(): String iso^ =>\n    \"\"\"\n    Returns a copy of the string. The resulting string is\n    null-terminated even if the original is not.\n    \"\"\"\n    let len = _size\n    let str = recover String(len) end\n    _ptr._copy_to(str._ptr._unsafe(), len)\n    str._size = len\n    str._set(len, 0)\n    str\n\n  fun find(s: String box, offset: ISize = 0, nth: USize = 0): ISize ? =>\n    \"\"\"\n    Return the index of the n-th instance of s in the string starting from the\n    beginning. Raise an error if there is no n-th occurrence of s or s is empty.\n    \"\"\"\n    var i = offset_to_index(offset)\n    var steps = nth + 1\n\n    while i < _size do\n      var j: USize = 0\n\n      let same = while j < s._size do\n        if _ptr._apply(i + j) != s._ptr._apply(j) then\n          break false\n        end\n        j = j + 1\n        true\n      else\n        false\n      end\n\n      if same and ((steps = steps - 1) == 1) then\n        return i.isize()\n      end\n\n      i = i + 1\n    end\n    error\n\n  fun rfind(s: String box, offset: ISize = -1, nth: USize = 0): ISize ? =>\n    \"\"\"\n    Return the index of n-th instance of `s` in the string starting from the\n    end. The `offset` represents the highest index to included in the search.\n    Raise an error if there is no n-th occurrence of `s` or `s` is empty.\n    \"\"\"\n    var i = (offset_to_index(offset) + 1) - s._size\n\n    var steps = nth + 1\n\n    while i < _size do\n      var j: USize = 0\n\n      let same = while j < s._size do\n        if _ptr._apply(i + j) != s._ptr._apply(j) then\n          break false\n        end\n        j = j + 1\n        true\n      else\n        false\n      end\n\n      if same and ((steps = steps - 1) == 1) then\n        return i.isize()\n      end\n\n      i = i - 1\n    end\n    error\n\n  fun contains(s: String box, offset: ISize = 0, nth: USize = 0): Bool =>\n    \"\"\"\n    Returns true if contains s as a substring, false otherwise.\n    \"\"\"\n    var i = offset_to_index(offset)\n    var steps = nth + 1\n\n    while i < _size do\n      var j: USize = 0\n\n      let same = while j < s._size do\n        if _ptr._apply(i + j) != s._ptr._apply(j) then\n          break false\n        end\n        j = j + 1\n        true\n      else\n        false\n      end\n\n      if same and ((steps = steps - 1) == 1) then\n        return true\n      end\n\n      i = i + 1\n    end\n    false\n\n  fun count(s: String box, offset: ISize = 0): USize =>\n    \"\"\"\n    Counts the non-overlapping occurrences of s in the string.\n    \"\"\"\n    let j: ISize = (_size - s.size()).isize()\n    var i: USize = 0\n    var k = offset\n\n    if j < 0 then\n      return 0\n    elseif (j == 0) and (this == s) then\n      return 1\n    end\n\n    try\n      while k <= j do\n        k = find(s, k)? + s.size().isize()\n        i = i + 1\n      end\n    end\n\n    i\n\n  fun at(s: String box, offset: ISize = 0): Bool =>\n    \"\"\"\n    Returns true if the substring s is present at the given offset.\n    \"\"\"\n    let i = offset_to_index(offset)\n\n    if (i + s.size()) <= _size then\n      @memcmp(_ptr._offset(i), s._ptr, s._size) == 0\n    else\n      false\n    end\n\n  fun ref delete(offset: ISize, len: USize = 1) =>\n    \"\"\"\n    Delete len bytes at the supplied offset, compacting the string in place.\n    \"\"\"\n    let i = offset_to_index(offset)\n\n    if i < _size then\n      let n = len.min(_size - i)\n      _size = _size - n\n      _ptr._offset(i)._delete(n, _size - i)\n      _set(_size, 0)\n    end\n\n  fun substring(from: ISize, to: ISize = ISize.max_value()): String iso^ =>\n    \"\"\"\n    Returns a substring. Index range [`from` .. `to`) is half-open.\n    Returns an empty string if nothing is in the range.\n\n    Note that this operation allocates a new string to be returned. For\n    similar operations that don't allocate a new string, see `trim` and\n    `trim_in_place`.\n    \"\"\"\n    let start = offset_to_index(from)\n    let finish = offset_to_index(to).min(_size)\n\n    if (start < _size) and (start < finish) then\n      let len = finish - start\n      let str = recover String(len) end\n      _ptr._offset(start)._copy_to(str._ptr._unsafe(), len)\n      str._size = len\n      str._set(len, 0)\n      str\n    else\n      recover String end\n    end\n\n  fun lower(): String iso^ =>\n    \"\"\"\n    Returns a lower case version of the string.\n    \"\"\"\n    let s = clone()\n    s.lower_in_place()\n    s\n\n  fun ref lower_in_place() =>\n    \"\"\"\n    Transforms the string to lower case. Currently only knows ASCII case.\n    \"\"\"\n    var i: USize = 0\n\n    while i < _size do\n      let c = _ptr._apply(i)\n\n      if (c >= 0x41) and (c <= 0x5A) then\n        _set(i, c + 0x20)\n      end\n\n      i = i + 1\n    end\n\n  fun upper(): String iso^ =>\n    \"\"\"\n    Returns an upper case version of the string. Currently only knows ASCII\n    case.\n    \"\"\"\n    let s = clone()\n    s.upper_in_place()\n    s\n\n  fun ref upper_in_place() =>\n    \"\"\"\n    Transforms the string to upper case.\n    \"\"\"\n    var i: USize = 0\n\n    while i < _size do\n      let c = _ptr._apply(i)\n\n      if (c >= 0x61) and (c <= 0x7A) then\n        _set(i, c - 0x20)\n      end\n\n      i = i + 1\n    end\n\n  fun reverse(): String iso^ =>\n    \"\"\"\n    Returns a reversed version of the string.\n    \"\"\"\n    let s = clone()\n    s.reverse_in_place()\n    s\n\n  fun ref reverse_in_place() =>\n    \"\"\"\n    Reverses the byte order in the string. This needs to be changed to handle\n    UTF-8 correctly.\n    \"\"\"\n    if _size > 1 then\n      var i: USize = 0\n      var j = _size - 1\n\n      while i < j do\n        let x = _ptr._apply(i)\n        _set(i, _ptr._apply(j))\n        _set(j, x)\n        i = i + 1\n        j = j - 1\n      end\n    end\n\n  fun ref push(value: U8) =>\n    \"\"\"\n    Add a byte to the end of the string.\n    \"\"\"\n    reserve(_size + 1)\n    _set(_size, value)\n    _size = _size + 1\n    _set(_size, 0)\n\n  fun ref pop(): U8 ? =>\n    \"\"\"\n    Remove a byte from the end of the string.\n    \"\"\"\n    if _size > 0 then\n      _size = _size - 1\n      _ptr._offset(_size)._delete(1, 0)\n    else\n      error\n    end\n\n  fun ref unshift(value: U8) =>\n    \"\"\"\n    Adds a byte to the beginning of the string.\n    \"\"\"\n    if value != 0 then\n      reserve(_size + 1)\n      @memmove(_ptr.usize() + 1, _ptr.usize(), _size + 1)\n      _set(0, value)\n      _size = _size + 1\n    else\n      _set(0, 0)\n      _size = 0\n    end\n\n  fun ref shift(): U8 ? =>\n    \"\"\"\n    Removes a byte from the beginning of the string.\n    \"\"\"\n    if _size > 0 then\n      let value = _ptr._apply(0)\n      @memmove(_ptr.usize(), _ptr.usize() + 1, _size)\n      _size = _size - 1\n      value\n    else\n      error\n    end\n\n  fun ref append(seq: ReadSeq[U8], offset: USize = 0, len: USize = -1) =>\n    \"\"\"\n    Append the elements from a sequence, starting from the given offset.\n    \"\"\"\n    if offset >= seq.size() then\n      return\n    end\n\n    let copy_len = len.min(seq.size() - offset)\n    reserve(_size + copy_len)\n\n    match seq\n    | let s: (String box | Array[U8] box) =>\n      s._copy_to(_ptr, copy_len, offset, _size)\n      _size = _size + copy_len\n      _set(_size, 0)\n    else\n      let cap = copy_len + offset\n      var i = offset\n\n      try\n        while i < cap do\n          push(seq(i)?)\n          i = i + 1\n        end\n      end\n    end\n\n  fun ref concat(iter: Iterator[U8], offset: USize = 0, len: USize = -1) =>\n    \"\"\"\n    Add len iterated bytes to the end of the string, starting from the given\n    offset.\n    \"\"\"\n    try\n      var n = USize(0)\n\n      while n < offset do\n        if iter.has_next() then\n          iter.next()?\n        else\n          return\n        end\n\n        n = n + 1\n      end\n\n      n = 0\n\n      while n < len do\n        if iter.has_next() then\n          push(iter.next()?)\n        else\n          return\n        end\n\n        n = n + 1\n      end\n    end\n\n  fun ref clear() =>\n    \"\"\"\n    Truncate the string to zero length.\n    \"\"\"\n    _set(0, 0)\n    _size = 0\n\n  fun insert(offset: ISize, that: String): String iso^ =>\n    \"\"\"\n    Returns a version of the string with the given string inserted at the given\n    offset.\n    \"\"\"\n    let s = clone()\n    s.insert_in_place(offset, that)\n    s\n\n  fun ref insert_in_place(offset: ISize, that: String box) =>\n    \"\"\"\n    Inserts the given string at the given offset. Appends the string if the\n    offset is out of bounds.\n    \"\"\"\n    reserve(_size + that._size)\n    let index = offset_to_index(offset).min(_size)\n    @memmove(_ptr.usize() + index + that._size,\n      _ptr.usize() + index, _size - index)\n    that._ptr._copy_to(_ptr._offset(index), that._size)\n    _size = _size + that._size\n    _set(_size, 0)\n\n  fun ref insert_byte(offset: ISize, value: U8) =>\n    \"\"\"\n    Inserts a byte at the given offset. Appends if the offset is out of bounds.\n    \"\"\"\n    reserve(_size + 1)\n    let index = offset_to_index(offset).min(_size)\n    @memmove(_ptr.usize() + index + 1, _ptr.usize() + index,\n      _size - index)\n    _set(index, value)\n    _size = _size + 1\n    _set(_size, 0)\n\n  fun cut(from: ISize, to: ISize = ISize.max_value()): String iso^ =>\n    \"\"\"\n    Returns a version of the string with the given range deleted.\n    Index range [`from` .. `to`) is half-open.\n    \"\"\"\n    let s = clone()\n    s.cut_in_place(from, to)\n    s\n\n  fun ref cut_in_place(from: ISize, to: ISize = ISize.max_value()) =>\n    \"\"\"\n    Cuts the given range out of the string.\n    Index range [`from` .. `to`) is half-open.\n    \"\"\"\n    let start = offset_to_index(from)\n    let finish = offset_to_index(to).min(_size)\n\n    if (start < _size) and (start < finish) and (finish <= _size) then\n      let fragment_len = finish - start\n      let new_size = _size - fragment_len\n      var i = start\n\n      while i < new_size do\n        _set(i, _ptr._apply(i + fragment_len))\n        i = i + 1\n      end\n\n      _size = _size - fragment_len\n      _set(_size, 0)\n    end\n\n  fun ref remove(s: String box): USize =>\n    \"\"\"\n    Remove all instances of s from the string. Returns the count of removed\n    instances.\n    \"\"\"\n    var i: ISize = 0\n    var n: USize = 0\n\n    try\n      while true do\n        i = find(s, i)?\n        cut_in_place(i, i + s.size().isize())\n        n = n + 1\n      end\n    end\n    n\n\n  fun ref replace(from: String box, to: String box, n: USize = 0): USize =>\n    \"\"\"\n    Replace up to n occurrences of `from` in `this` with `to`. If n is 0, all\n    occurrences will be replaced. Returns the count of replaced occurrences.\n    \"\"\"\n    let from_len = from.size().isize()\n    let to_len = to.size().isize()\n    var offset = ISize(0)\n    var occur = USize(0)\n\n    try\n      while true do\n        offset = find(from, offset)?\n        cut_in_place(offset, offset + from_len)\n        insert_in_place(offset, to)\n        offset = offset + to_len\n        occur = occur + 1\n\n        if (n > 0) and (occur >= n) then\n          break\n        end\n      end\n    end\n    occur\n\n  fun split_by(\n    delim: String,\n    n: USize = USize.max_value())\n    : Array[String] iso^\n  =>\n    \"\"\"\n    Split the string into an array of strings that are delimited by `delim` in\n    the original string. If `n > 0`, then the split count is limited to n.\n\n    Adjacent delimiters result in a zero length entry in the array. For\n    example, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`.\n\n    An empty delimiter results in an array that contains a single element equal\n    to the whole string.\n    \"\"\"\n    let delim_size = ISize.from[USize](delim.size())\n    let total_size = ISize.from[USize](size())\n\n    let result = recover Array[String] end\n    var current = ISize(0)\n\n    while ((result.size() + 1) < n) and (current < total_size) do\n      try\n        let delim_start = find(delim where offset = current)?\n        result.push(substring(current, delim_start))\n        current = delim_start + delim_size\n      else break end\n    end\n    result.push(substring(current))\n    consume result\n\n  fun split(delim: String = \" \\t\\v\\f\\r\\n\", n: USize = 0): Array[String] iso^ =>\n    \"\"\"\n    Split the string into an array of strings. Any character in the delimiter\n    string is accepted as a delimiter. If `n > 0`, then the split count is\n    limited to n.\n\n    Adjacent delimiters result in a zero length entry in the array. For\n    example, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`.\n    \"\"\"\n    let result = recover Array[String] end\n\n    if _size > 0 then\n      let chars = Array[U32](delim.size())\n\n      for rune in delim.runes() do\n        chars.push(rune)\n      end\n\n      var cur = recover String end\n      var i = USize(0)\n      var occur = USize(0)\n\n      try\n        while i < _size do\n          (let c, let len) = utf32(i.isize())?\n\n          if chars.contains(c) then\n            // If we find a delimiter, add the current string to the array.\n            occur = occur + 1\n\n            if (n > 0) and (occur >= n) then\n              break\n            end\n\n            result.push(cur = recover String end)\n          else\n            // Add bytes to the current string.\n            var j = U8(0)\n\n            while j < len do\n              cur.push(_ptr._apply(i + j.usize()))\n              j = j + 1\n            end\n          end\n\n          i = i + len.usize()\n        end\n      end\n\n      // Add all remaining bytes to the current string.\n      while i < _size do\n        cur.push(_ptr._apply(i))\n        i = i + 1\n      end\n\n      result.push(consume cur)\n    end\n\n    consume result\n\n  fun ref strip(s: String box = \" \\t\\v\\f\\r\\n\") =>\n    \"\"\"\n    Remove all leading and trailing characters from the string that are in s.\n    \"\"\"\n    this .> lstrip(s) .> rstrip(s)\n\n  fun ref rstrip(s: String box = \" \\t\\v\\f\\r\\n\") =>\n    \"\"\"\n    Remove all trailing characters within the string that are in s. By default,\n    trailing whitespace is removed.\n    \"\"\"\n    if _size > 0 then\n      let chars = Array[U32](s.size())\n      var i = _size - 1\n      var truncate_at = _size\n\n      for rune in s.runes() do\n        chars.push(rune)\n      end\n\n      repeat\n        try\n          match utf32(i.isize())?\n          | (0xFFFD, 1) => None\n          | (let c: U32, _) =>\n            if not chars.contains(c) then\n              break\n            end\n        truncate_at = i\n          end\n        else\n          break\n        end\n      until (i = i - 1) == 0 end\n\n      truncate(truncate_at)\n    end\n\n  fun ref lstrip(s: String box = \" \\t\\v\\f\\r\\n\") =>\n    \"\"\"\n    Remove all leading characters within the string that are in s. By default,\n    leading whitespace is removed.\n    \"\"\"\n    if _size > 0 then\n      let chars = Array[U32](s.size())\n      var i = USize(0)\n\n      for rune in s.runes() do\n        chars.push(rune)\n      end\n\n      while i < _size do\n        try\n          (let c, let len) = utf32(i.isize())?\n          if not chars.contains(c) then\n            break\n          end\n          i = i + len.usize()\n        else\n          break\n        end\n      end\n\n      if i > 0 then\n        delete(0, i)\n      end\n    end\n\n  fun iso _append(s: String box): String iso^ =>\n    let len = _size + s._size\n    reserve(len)\n    if s.is_null_terminated() then\n      s._copy_to(_ptr._unsafe(), s._size + 1, 0, _size)\n    else\n      s._copy_to(_ptr._unsafe(), s._size, 0, _size)\n    end\n    _size = len\n    consume this\n\n  fun add(that: String box): String =>\n    \"\"\"\n    Return a string that is a concatenation of this and that.\n    \"\"\"\n    let len = _size + that._size\n    let s = recover String(len) end\n    (consume s)._append(this)._append(that)\n\n  fun join(data: Iterator[Stringable]): String iso^ =>\n    \"\"\"\n    Return a string that is a concatenation of the strings in data, using this\n    as a separator.\n    \"\"\"\n    var buf = recover String end\n    var first = true\n    for v in data do\n      if first then\n        first = false\n      else\n        buf = (consume buf)._append(this)\n      end\n      buf.append(v.string())\n    end\n    buf\n\n  fun compare(that: String box): Compare =>\n    \"\"\"\n    Lexically compare two strings.\n    \"\"\"\n    compare_sub(that, _size.max(that._size))\n\n  fun compare_sub(\n    that: String box,\n    n: USize,\n    offset: ISize = 0,\n    that_offset: ISize = 0,\n    ignore_case: Bool = false)\n    : Compare\n  =>\n    \"\"\"\n    Lexically compare at most `n` bytes of the substring of `this` starting at\n    `offset` with the substring of `that` starting at `that_offset`. The\n    comparison is case sensitive unless `ignore_case` is `true`.\n\n    If the substring of `this` is a proper prefix of the substring of `that`,\n    then `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of\n    `this`, then `this` is `Greater` than `that`.\n\n    Both `offset` and `that_offset` can be negative, in which case the offsets\n    are computed from the end of the string.\n\n    If `n + offset` is greater than the length of `this`, or `n + that_offset`\n    is greater than the length of `that`, then the number of positions compared\n    will be reduced to the length of the longest substring.\n\n    Needs to be made UTF-8 safe.\n    \"\"\"\n    var j: USize = offset_to_index(offset)\n    var k: USize = that.offset_to_index(that_offset)\n    var i = n.min((_size - j).max(that._size - k))\n\n    while i > 0 do\n      // this and that are equal up to this point\n      if j >= _size then\n        // this is shorter\n        return Less\n      elseif k >= that._size then\n        // that is shorter\n        return Greater\n      end\n\n      let c1 = _ptr._apply(j)\n      let c2 = that._ptr._apply(k)\n      if\n        not ((c1 == c2) or\n          (ignore_case and ((c1 or 0x20) == (c2 or 0x20)) and\n            ((c1 or 0x20) >= 'a') and ((c1 or 0x20) <= 'z')))\n      then\n        // this and that differ here\n        return if c1.i32() > c2.i32() then Greater else Less end\n      end\n\n      j = j + 1\n      k = k + 1\n      i = i - 1\n    end\n    Equal\n\n  fun eq(that: String box): Bool =>\n    \"\"\"\n    Returns true if the two strings have the same contents.\n    \"\"\"\n    if _size == that._size then\n      @memcmp(_ptr, that._ptr, _size) == 0\n    else\n      false\n    end\n\n  fun lt(that: String box): Bool =>\n    \"\"\"\n    Returns true if this is lexically less than that. Needs to be made UTF-8\n    safe.\n    \"\"\"\n    let len = _size.min(that._size)\n    var i: USize = 0\n\n    while i < len do\n      if _ptr._apply(i) < that._ptr._apply(i) then\n        return true\n      elseif _ptr._apply(i) > that._ptr._apply(i) then\n        return false\n      end\n      i = i + 1\n    end\n    _size < that._size\n\n  fun le(that: String box): Bool =>\n    \"\"\"\n    Returns true if this is lexically less than or equal to that. Needs to be\n    made UTF-8 safe.\n    \"\"\"\n    let len = _size.min(that._size)\n    var i: USize = 0\n\n    while i < len do\n      if _ptr._apply(i) < that._ptr._apply(i) then\n        return true\n      elseif _ptr._apply(i) > that._ptr._apply(i) then\n        return false\n      end\n      i = i + 1\n    end\n    _size <= that._size\n\n  fun offset_to_index(i: ISize): USize =>\n    if i < 0 then i.usize() + _size else i.usize() end\n\n  fun bool(): Bool ? =>\n    match lower()\n    | \"true\" => true\n    | \"false\" => false\n    else\n      error\n    end\n\n  fun i8(base: U8 = 0): I8 ? => _to_int[I8](base)?\n  fun i16(base: U8 = 0): I16 ? => _to_int[I16](base)?\n  fun i32(base: U8 = 0): I32 ? => _to_int[I32](base)?\n  fun i64(base: U8 = 0): I64 ? => _to_int[I64](base)?\n  fun i128(base: U8 = 0): I128 ? => _to_int[I128](base)?\n  fun ilong(base: U8 = 0): ILong ? => _to_int[ILong](base)?\n  fun isize(base: U8 = 0): ISize ? => _to_int[ISize](base)?\n  fun u8(base: U8 = 0): U8 ? => _to_int[U8](base)?\n  fun u16(base: U8 = 0): U16 ? => _to_int[U16](base)?\n  fun u32(base: U8 = 0): U32 ? => _to_int[U32](base)?\n  fun u64(base: U8 = 0): U64 ? => _to_int[U64](base)?\n  fun u128(base: U8 = 0): U128 ? => _to_int[U128](base)?\n  fun ulong(base: U8 = 0): ULong ? => _to_int[ULong](base)?\n  fun usize(base: U8 = 0): USize ? => _to_int[USize](base)?\n\n  fun _to_int[A: ((Signed | Unsigned) & Integer[A] val)](base: U8): A ? =>\n    \"\"\"\n    Convert the *whole* string to the specified type.\n    If there are any other characters in the string, or the integer found is\n    out of range for the target type then an error is thrown.\n    \"\"\"\n    (let v, let d) = read_int[A](0, base)?\n    // Check the whole string is used\n    if (d == 0) or (d.usize() != _size) then error end\n    v\n\n  fun read_int[A: ((Signed | Unsigned) & Integer[A] val)](\n    offset: ISize = 0,\n    base: U8 = 0)\n    : (A, USize /* chars used */) ?\n  =>\n    \"\"\"\n    Read an integer from the specified location in this string. The integer\n    value read and the number of characters consumed are reported.\n    The base parameter specifies the base to use, 0 indicates using the prefix,\n    if any, to detect base 2, 10 or 16.\n    If no integer is found at the specified location, then (0, 0) is returned,\n    since no characters have been used.\n    An integer out of range for the target type throws an error.\n    A leading minus is allowed for signed integer types.\n    Underscore characters are allowed throughout the integer and are ignored.\n    \"\"\"\n    let start_index = offset_to_index(offset)\n    var index = start_index\n    var value: A = 0\n    var had_digit = false\n\n    // Check for leading minus\n    let minus = (index < _size) and (_ptr._apply(index) == '-')\n    if minus then\n      if A(-1) > A(0) then\n        // We're reading an unsigned type, negative not allowed, int not found\n        return (0, 0)\n      end\n\n      index = index + 1\n    end\n\n    (let base', let base_chars) = _read_int_base[A](base, index)\n    index = index + base_chars\n\n    // Process characters\n    while index < _size do\n      let char: A = A(0).from[U8](_ptr._apply(index))\n      if char == '_' then\n        index = index + 1\n        continue\n      end\n\n      let digit =\n        if (char >= '0') and (char <= '9') then\n          char - '0'\n        elseif (char >= 'A') and (char <= 'Z') then\n          (char - 'A') + 10\n        elseif (char >= 'a') and (char <= 'z') then\n          (char - 'a') + 10\n        else\n          break\n        end\n\n      if digit >= base' then\n        break\n      end\n\n      let new_value: A = if minus then\n        (value * base') - digit\n      else\n        (value * base') + digit\n      end\n\n      if (new_value / base') != value then\n        // Overflow\n        error\n      end\n\n      value = new_value\n      had_digit = true\n      index = index + 1\n    end\n\n    // Check result\n    if not had_digit then\n      // No integer found\n      return (0, 0)\n    end\n\n    // Success\n    (value, index - start_index)\n\n  fun _read_int_base[A: ((Signed | Unsigned) & Integer[A] val)](\n    base: U8,\n    index: USize)\n    : (A, USize /* chars used */)\n  =>\n    \"\"\"\n    Determine the base of an integer starting at the specified index.\n    If a non-0 base is given use that. If given base is 0 read the base\n    specifying prefix, if any, to detect base 2 or 16.\n    If no base is specified and no prefix is found default to decimal.\n    Note that a leading 0 does NOT imply octal.\n    Report the base found and the number of characters in the prefix.\n    \"\"\"\n    if base > 0 then\n      return (A(0).from[U8](base), 0)\n    end\n\n    // Determine base from prefix\n    if (index + 2) >= _size then\n      // Not enough characters, must be decimal\n      return (10, 0)\n    end\n\n    let lead_char = _ptr._apply(index)\n    let base_char = _ptr._apply(index + 1) and not 0x20\n\n    if (lead_char == '0') and (base_char == 'B') then\n      return (2, 2)\n    end\n\n    if (lead_char == '0') and (base_char == 'X') then\n      return (16, 2)\n    end\n\n    // No base specified, default to decimal\n    (10, 0)\n\n  fun f32(offset: ISize = 0): F32 =>\n    let index = offset_to_index(offset)\n\n    if index < _size then\n      @strtof(_ptr._offset(index), 0)\n    else\n      F32(0)\n    end\n\n  fun f64(offset: ISize = 0): F64 =>\n    let index = offset_to_index(offset)\n\n    if index < _size then\n      @strtod(_ptr._offset(index), 0)\n    else\n      F64(0)\n    end\n\n  fun hash(): USize =>\n    @ponyint_hash_block[USize](_ptr, _size)\n\n  fun hash64(): U64 =>\n    @ponyint_hash_block64[U64](_ptr, _size)\n\n  fun string(): String iso^ =>\n    clone()\n\n  fun values(): StringBytes^ =>\n    \"\"\"\n    Return an iterator over the bytes in the string.\n    \"\"\"\n    StringBytes(this)\n\n  fun runes(): StringRunes^ =>\n    \"\"\"\n    Return an iterator over the codepoints in the string.\n    \"\"\"\n    StringRunes(this)\n\n  fun ref _set(i: USize, value: U8): U8 =>\n    \"\"\"\n    Unsafe update, used internally.\n    \"\"\"\n    _ptr._update(i, value)\n\nclass StringBytes is Iterator[U8]\n  let _string: String box\n  var _i: USize\n\n  new create(string: String box) =>\n    _string = string\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _string.size()\n\n  fun ref next(): U8 ? =>\n    _string(_i = _i + 1)?\n\nclass StringRunes is Iterator[U32]\n  let _string: String box\n  var _i: USize\n\n  new create(string: String box) =>\n    _string = string\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _string.size()\n\n  fun ref next(): U32 ? =>\n    (let rune, let len) = _string.utf32(_i.isize())?\n    _i = _i + len.usize()\n    rune\n\nprimitive _UTF32Encoder\n  fun encode(value: U32): (USize, U8, U8, U8, U8) =>\n    \"\"\"\n    Encode the code point into UTF-8. It returns a tuple with the size of the\n    encoded data and then the data.\n    \"\"\"\n    if value < 0x80 then\n      (1, value.u8(), 0, 0, 0)\n    elseif value < 0x800 then\n      ( 2,\n        ((value >> 6) or 0xC0).u8(),\n        ((value and 0x3F) or 0x80).u8(),\n        0,\n        0\n      )\n    elseif value < 0xD800 then\n      ( 3,\n        ((value >> 12) or 0xE0).u8(),\n        (((value >> 6) and 0x3F) or 0x80).u8(),\n        ((value and 0x3F) or 0x80).u8(),\n        0\n      )\n    elseif value < 0xE000 then\n      // UTF-16 surrogate pairs are not allowed.\n      (3, 0xEF, 0xBF, 0xBD, 0)\n    elseif value < 0x10000 then\n      ( 3,\n        ((value >> 12) or 0xE0).u8(),\n        (((value >> 6) and 0x3F) or 0x80).u8(),\n        ((value and 0x3F) or 0x80).u8(),\n        0\n      )\n    elseif value < 0x110000 then\n      ( 4,\n        ((value >> 18) or 0xF0).u8(),\n        (((value >> 12) and 0x3F) or 0x80).u8(),\n        (((value >> 6) and 0x3F) or 0x80).u8(),\n        ((value and 0x3F) or 0x80).u8()\n      )\n    else\n      // Code points beyond 0x10FFFF are not allowed.\n      (3, 0xEF, 0xBF, 0xBD, 0)\n    end",
            "title": "string.pony"
        },
        {
            "location": "/src/builtin/stdin/",
            "text": "use @pony_asio_event_create[AsioEventID](\n  owner: AsioEventNotify,\n  fd: U32,\n  flags: U32,\n  nsec: U64,\n  noisy: Bool)\n\nuse @pony_asio_event_unsubscribe[None](event: AsioEventID)\nuse @pony_asio_event_destroy[None](event: AsioEventID)\n\ninterface InputNotify\n  \"\"\"\n  Notification for data arriving via an input stream.\n  \"\"\"\n  fun ref apply(data: Array[U8] iso) =>\n    \"\"\"\n    Called when data is available on the stream.\n    \"\"\"\n    None\n\n  fun ref dispose() =>\n    \"\"\"\n    Called when no more data will arrive on the stream.\n    \"\"\"\n    None\n\ninterface tag DisposableActor\n  \"\"\"\n  An interface used to asynchronously dispose of an actor.\n  \"\"\"\n  be dispose()\n\ninterface tag InputStream\n  \"\"\"\n  Asynchronous access to some input stream.\n  \"\"\"\n  be apply(notify: (InputNotify iso | None), chunk_size: USize = 32)\n    \"\"\"\n    Set the notifier. Optionally, also sets the chunk size, dictating the\n    maximum number of bytes of each chunk that will be passed to the notifier.\n    \"\"\"\n\n  be dispose() =>\n    \"\"\"\n    Clear the notifier in order to shut down input.\n    \"\"\"\n    None\n\nactor Stdin\n  \"\"\"\n  Asynchronous access to stdin. The constructor is private to ensure that\n  access is provided only via an environment.\n\n  Reading from stdin is done by registering an `InputNotify`:\n\n  ```pony\n  actor Main\n    new create(env: Env) =>\n      // do not forget to call `env.input.dispose` at some point\n      env.input(\n        object iso is InputNotify\n          fun ref apply(data: Array[U8] iso) =>\n            env.out.write(String.from_iso_array(consume data))\n\n          fun ref dispose() =>\n            env.out.print(\"Done.\")\n        end,\n        512)\n  ```\n\n  **Note:** For reading user input from a terminal, use the [term](term--index) package.\n  \"\"\"\n  var _notify: (InputNotify | None) = None\n  var _chunk_size: USize = 32\n  var _event: AsioEventID = AsioEvent.none()\n  let _use_event: Bool\n\n  new _create(use_event: Bool) =>\n    \"\"\"\n    Create an asynchronous stdin provider.\n    \"\"\"\n    _use_event = use_event\n\n  be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) =>\n    \"\"\"\n    Set the notifier. Optionally, also sets the chunk size, dictating the\n    maximum number of bytes of each chunk that will be passed to the notifier.\n    \"\"\"\n    _set_notify(consume notify)\n    _chunk_size = chunk_size\n\n  be dispose() =>\n    \"\"\"\n    Clear the notifier in order to shut down input.\n    \"\"\"\n    _set_notify(None)\n\n  fun ref _set_notify(notify: (InputNotify iso | None)) =>\n    \"\"\"\n    Set the notifier.\n    \"\"\"\n    if notify is None then\n      if _use_event and not _event.is_null() then\n        // Unsubscribe the event.\n        @pony_asio_event_unsubscribe(_event)\n        _event = AsioEvent.none()\n      end\n    elseif _notify is None then\n      if _use_event then\n        // Create a new event.\n        _event = @pony_asio_event_create(this, 0, AsioEvent.read(), 0, true)\n      else\n        // Start the read loop.\n        _loop_read()\n      end\n    end\n\n    try (_notify as InputNotify).dispose() end\n    _notify = consume notify\n\n  be _loop_read() =>\n    \"\"\"\n    If we are able to read from stdin, schedule another read.\n    \"\"\"\n    if _read() then\n      _loop_read()\n    end\n\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32) =>\n    \"\"\"\n    When the event fires, read from stdin.\n    \"\"\"\n    if AsioEvent.disposable(flags) then\n      @pony_asio_event_destroy(event)\n    elseif (_event is event) and AsioEvent.readable(flags) then\n      _read()\n    end\n\n  be _read_again() =>\n    \"\"\"\n    Resume reading.\n    \"\"\"\n    _read()\n\n  fun ref _read(): Bool =>\n    \"\"\"\n    Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send\n    ourself a resume message and stop reading to avoid starving other actors.\n    \"\"\"\n    try\n      let notify = _notify as InputNotify\n      var sum: USize = 0\n\n      while true do\n        let chunk_size = _chunk_size\n        var data = recover Array[U8] .> undefined(chunk_size) end\n        var again: Bool = false\n\n        let len =\n          @pony_os_stdin_read[USize](data.cpointer(), data.space(),\n            addressof again)\n\n        match len\n        | -1 =>\n          // Error, possibly would block. Try again.\n          return true\n        | 0 =>\n          // EOF. Close everything, stop reading.\n          _close_event()\n          notify.dispose()\n          _notify = None\n          return false\n        end\n\n        data.truncate(len)\n        notify(consume data)\n\n        if not again then\n          // Not allowed to call pony_os_stdin_read again yet, exit loop.\n          return true\n        end\n\n        sum = sum + len\n\n        if sum > (1 << 12) then\n          if _use_event then\n            _read_again()\n          end\n\n          break\n        end\n      end\n      true\n    else\n      // No notifier. Stop reading.\n      _close_event()\n      false\n    end\n\n    fun ref _close_event() =>\n      \"\"\"\n      Close the event.\n      \"\"\"\n      if not _event.is_null() then\n        @pony_asio_event_unsubscribe(_event)\n        _event = AsioEvent.none()\n      end",
            "title": "stdin.pony"
        },
        {
            "location": "/src/builtin/std_stream/",
            "text": "type ByteSeq is (String | Array[U8] val)\n\ninterface val ByteSeqIter\n  \"\"\"\n  Accept an iterable collection of String or Array[U8] val.\n  \"\"\"\n  fun values(): Iterator[this->ByteSeq box]\n\ninterface tag OutStream\n  \"\"\"\n  Asnychronous access to some output stream.\n  \"\"\"\n  be print(data: ByteSeq)\n    \"\"\"\n    Print some bytes and insert a newline afterwards.\n    \"\"\"\n\n  be write(data: ByteSeq)\n    \"\"\"\n    Print some bytes without inserting a newline afterwards.\n    \"\"\"\n\n  be printv(data: ByteSeqIter)\n    \"\"\"\n    Print an iterable collection of ByteSeqs.\n    \"\"\"\n\n  be writev(data: ByteSeqIter)\n    \"\"\"\n    Write an iterable collection of ByteSeqs.\n    \"\"\"\n\nactor StdStream\n  \"\"\"\n  Asynchronous access to stdout and stderr. The constructors are private to\n  ensure that access is provided only via an environment.\n  \"\"\"\n  var _stream: Pointer[None]\n\n  new _out() =>\n    \"\"\"\n    Create an async stream for stdout.\n    \"\"\"\n    _stream = @pony_os_stdout[Pointer[None]]()\n\n  new _err() =>\n    \"\"\"\n    Create an async stream for stderr.\n    \"\"\"\n    _stream = @pony_os_stderr[Pointer[None]]()\n\n  be print(data: ByteSeq) =>\n    \"\"\"\n    Print some bytes and insert a newline afterwards.\n    \"\"\"\n    _print(data)\n\n  be write(data: ByteSeq) =>\n    \"\"\"\n    Print some bytes without inserting a newline afterwards.\n    \"\"\"\n    _write(data)\n\n  be printv(data: ByteSeqIter) =>\n    \"\"\"\n    Print an iterable collection of ByteSeqs.\n    \"\"\"\n    for bytes in data.values() do\n      _print(bytes)\n    end\n\n  be writev(data: ByteSeqIter) =>\n    \"\"\"\n    Write an iterable collection of ByteSeqs.\n    \"\"\"\n    for bytes in data.values() do\n      _write(bytes)\n    end\n\n  fun ref _write(data: ByteSeq) =>\n    \"\"\"\n    Write the bytes without explicitly flushing.\n    \"\"\"\n    @pony_os_std_write[None](_stream, data.cpointer(), data.size())\n\n  fun ref _print(data: ByteSeq) =>\n    \"\"\"\n    Write the bytes and a newline without explicitly flushing.\n    \"\"\"\n    @pony_os_std_print[None](_stream, data.cpointer(), data.size())",
            "title": "std_stream.pony"
        },
        {
            "location": "/src/builtin/source_loc/",
            "text": "interface val SourceLoc\n  \"\"\"\n  Represents a location in a Pony source file, as reported by `__loc`.\n  \"\"\"\n  fun file(): String\n    \"\"\"\n    Name and path of source file.\n    \"\"\"\n\n  fun type_name(): String\n    \"\"\"\n    Name of nearest class, actor, primitive, struct, interface, or trait.\n    \"\"\"\n\n  fun method_name(): String\n    \"\"\"\n    Name of containing method.\n    \"\"\"\n\n  fun line(): USize\n    \"\"\"\n    Line number within file.\n    Line numbers start at 1.\n    \"\"\"\n\n  fun pos(): USize\n    \"\"\"\n    Character position on line.\n    Character positions start at 1.\n    \"\"\"",
            "title": "source_loc.pony"
        },
        {
            "location": "/src/builtin/signed/",
            "text": "primitive I8 is _SignedInteger[I8, U8]\n  new create(value: I8) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i8()\n\n  new min_value() => -0x80\n  new max_value() => 0x7F\n\n  fun abs(): U8 => if this < 0 then (-this).u8() else this.u8() end\n  fun bit_reverse(): I8 => @\"llvm.bitreverse.i8\"[I8](this)\n  fun bswap(): I8 => this\n  fun popcount(): U8 => @\"llvm.ctpop.i8\"[U8](this)\n  fun clz(): U8 => @\"llvm.ctlz.i8\"[U8](this, false)\n  fun ctz(): U8 => @\"llvm.cttz.i8\"[U8](this, false)\n\n  fun clz_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i8\"[U8](this, true)\n\n  fun ctz_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i8\"[U8](this, true)\n\n  fun bitwidth(): U8 => 8\n\n  fun min(y: I8): I8 => if this < y then this else y end\n  fun max(y: I8): I8 => if this > y then this else y end\n\n  fun addc(y: I8): (I8, Bool) =>\n    @\"llvm.sadd.with.overflow.i8\"[(I8, Bool)](this, y)\n\n  fun subc(y: I8): (I8, Bool) =>\n    @\"llvm.ssub.with.overflow.i8\"[(I8, Bool)](this, y)\n\n  fun mulc(y: I8): (I8, Bool) =>\n    @\"llvm.smul.with.overflow.i8\"[(I8, Bool)](this, y)\n\nprimitive I16 is _SignedInteger[I16, U16]\n  new create(value: I16) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i16()\n\n  new min_value() => -0x8000\n  new max_value() => 0x7FFF\n\n  fun abs(): U16 => if this < 0 then (-this).u16() else this.u16() end\n  fun bit_reverse(): I16 => @\"llvm.bitreverse.i16\"[I16](this)\n  fun bswap(): I16 => @\"llvm.bswap.i16\"[I16](this)\n  fun popcount(): U16 => @\"llvm.ctpop.i16\"[U16](this)\n  fun clz(): U16 => @\"llvm.ctlz.i16\"[U16](this, false)\n  fun ctz(): U16 => @\"llvm.cttz.i16\"[U16](this, false)\n\n  fun clz_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i16\"[U16](this, true)\n\n  fun ctz_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i16\"[U16](this, true)\n\n  fun bitwidth(): U16 => 16\n\n  fun min(y: I16): I16 => if this < y then this else y end\n  fun max(y: I16): I16 => if this > y then this else y end\n\n  fun addc(y: I16): (I16, Bool) =>\n    @\"llvm.sadd.with.overflow.i16\"[(I16, Bool)](this, y)\n\n  fun subc(y: I16): (I16, Bool) =>\n    @\"llvm.ssub.with.overflow.i16\"[(I16, Bool)](this, y)\n\n  fun mulc(y: I16): (I16, Bool) =>\n    @\"llvm.smul.with.overflow.i16\"[(I16, Bool)](this, y)\n\nprimitive I32 is _SignedInteger[I32, U32]\n  new create(value: I32) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i32()\n\n  new min_value() => -0x8000_0000\n  new max_value() => 0x7FFF_FFFF\n\n  fun abs(): U32 => if this < 0 then (-this).u32() else this.u32() end\n  fun bit_reverse(): I32 => @\"llvm.bitreverse.i32\"[I32](this)\n  fun bswap(): I32 => @\"llvm.bswap.i32\"[I32](this)\n  fun popcount(): U32 => @\"llvm.ctpop.i32\"[U32](this)\n  fun clz(): U32 => @\"llvm.ctlz.i32\"[U32](this, false)\n  fun ctz(): U32 => @\"llvm.cttz.i32\"[U32](this, false)\n\n  fun clz_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i32\"[U32](this, true)\n\n  fun ctz_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i32\"[U32](this, true)\n\n  fun bitwidth(): U32 => 32\n\n  fun min(y: I32): I32 => if this < y then this else y end\n  fun max(y: I32): I32 => if this > y then this else y end\n\n  fun addc(y: I32): (I32, Bool) =>\n    @\"llvm.sadd.with.overflow.i32\"[(I32, Bool)](this, y)\n\n  fun subc(y: I32): (I32, Bool) =>\n    @\"llvm.ssub.with.overflow.i32\"[(I32, Bool)](this, y)\n\n  fun mulc(y: I32): (I32, Bool) =>\n    @\"llvm.smul.with.overflow.i32\"[(I32, Bool)](this, y)\n\nprimitive I64 is _SignedInteger[I64, U64]\n  new create(value: I64) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i64()\n\n  new min_value() => -0x8000_0000_0000_0000\n  new max_value() => 0x7FFF_FFFF_FFFF_FFFF\n\n  fun abs(): U64 => if this < 0 then (-this).u64() else this.u64() end\n  fun bit_reverse(): I64 => @\"llvm.bitreverse.i64\"[I64](this)\n  fun bswap(): I64 => @\"llvm.bswap.i64\"[I64](this)\n  fun popcount(): U64 => @\"llvm.ctpop.i64\"[U64](this)\n  fun clz(): U64 => @\"llvm.ctlz.i64\"[U64](this, false)\n  fun ctz(): U64 => @\"llvm.cttz.i64\"[U64](this, false)\n\n  fun clz_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i64\"[U64](this, true)\n\n  fun ctz_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i64\"[U64](this, true)\n\n  fun bitwidth(): U64 => 64\n\n  fun min(y: I64): I64 => if this < y then this else y end\n  fun max(y: I64): I64 => if this > y then this else y end\n  fun hash(): USize => u64().hash()\n\n  fun addc(y: I64): (I64, Bool) =>\n    @\"llvm.sadd.with.overflow.i64\"[(I64, Bool)](this, y)\n\n  fun subc(y: I64): (I64, Bool) =>\n    @\"llvm.ssub.with.overflow.i64\"[(I64, Bool)](this, y)\n\n  fun mulc(y: I64): (I64, Bool) =>\n    _SignedCheckedArithmetic._mulc[U64, I64](this, y)\n\n\nprimitive ILong is _SignedInteger[ILong, ULong]\n  new create(value: ILong) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.ilong()\n\n  new min_value() =>\n    ifdef ilp32 or llp64 then\n      -0x8000_0000\n    else\n      -0x8000_0000_0000_0000\n    end\n\n  new max_value() =>\n    ifdef ilp32 or llp64 then\n      0x7FFF_FFFF\n    else\n      0x7FFF_FFFF_FFFF_FFFF\n    end\n\n  fun abs(): ULong => if this < 0 then (-this).ulong() else this.ulong() end\n\n  fun bit_reverse(): ILong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.bitreverse.i32\"[ILong](this)\n    else\n      @\"llvm.bitreverse.i64\"[ILong](this)\n    end\n\n  fun bswap(): ILong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.bswap.i32\"[ILong](this)\n    else\n      @\"llvm.bswap.i64\"[ILong](this)\n    end\n\n  fun popcount(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctpop.i32\"[ULong](this)\n    else\n      @\"llvm.ctpop.i64\"[ULong](this)\n    end\n\n  fun clz(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctlz.i32\"[ULong](this, false)\n    else\n      @\"llvm.ctlz.i64\"[ULong](this, false)\n    end\n\n  fun ctz(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.cttz.i32\"[ULong](this, false)\n    else\n      @\"llvm.cttz.i64\"[ULong](this, false)\n    end\n\n  fun clz_unsafe(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctlz.i32\"[ULong](this, true)\n    else\n      @\"llvm.ctlz.i64\"[ULong](this, true)\n    end\n\n  fun ctz_unsafe(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.cttz.i32\"[ULong](this, false)\n    else\n      @\"llvm.cttz.i64\"[ULong](this, true)\n    end\n\n  fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end\n  fun min(y: ILong): ILong => if this < y then this else y end\n  fun max(y: ILong): ILong => if this > y then this else y end\n  fun hash(): USize => ulong().hash()\n\n  fun addc(y: ILong): (ILong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.sadd.with.overflow.i32\"[(ILong, Bool)](this, y)\n    else\n      @\"llvm.sadd.with.overflow.i64\"[(ILong, Bool)](this, y)\n    end\n\n  fun subc(y: ILong): (ILong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ssub.with.overflow.i32\"[(ILong, Bool)](this, y)\n    else\n      @\"llvm.ssub.with.overflow.i64\"[(ILong, Bool)](this, y)\n    end\n\n  fun mulc(y: ILong): (ILong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.smul.with.overflow.i32\"[(ILong, Bool)](this, y)\n    else\n      _SignedCheckedArithmetic._mulc[ULong, ILong](this, y)\n    end\n\nprimitive ISize is _SignedInteger[ISize, USize]\n  new create(value: ISize) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.isize()\n\n  new min_value() =>\n    ifdef ilp32 then\n      -0x8000_0000\n    else\n      -0x8000_0000_0000_0000\n    end\n\n  new max_value() =>\n    ifdef ilp32 then\n      0x7FFF_FFFF\n    else\n      0x7FFF_FFFF_FFFF_FFFF\n    end\n\n  fun abs(): USize => if this < 0 then (-this).usize() else this.usize() end\n\n  fun bit_reverse(): ISize =>\n    ifdef ilp32 then\n      @\"llvm.bitreverse.i32\"[ISize](this)\n    else\n      @\"llvm.bitreverse.i64\"[ISize](this)\n    end\n\n  fun bswap(): ISize =>\n    ifdef ilp32 then\n      @\"llvm.bswap.i32\"[ISize](this)\n    else\n      @\"llvm.bswap.i64\"[ISize](this)\n    end\n\n  fun popcount(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctpop.i32\"[USize](this)\n    else\n      @\"llvm.ctpop.i64\"[USize](this)\n    end\n\n  fun clz(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctlz.i32\"[USize](this, false)\n    else\n      @\"llvm.ctlz.i64\"[USize](this, false)\n    end\n\n  fun ctz(): USize =>\n    ifdef ilp32 then\n      @\"llvm.cttz.i32\"[USize](this, false)\n    else\n      @\"llvm.cttz.i64\"[USize](this, false)\n    end\n\n  fun clz_unsafe(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctlz.i32\"[USize](this, true)\n    else\n      @\"llvm.ctlz.i64\"[USize](this, true)\n    end\n\n  fun ctz_unsafe(): USize =>\n    ifdef ilp32 then\n      @\"llvm.cttz.i32\"[USize](this, true)\n    else\n      @\"llvm.cttz.i64\"[USize](this, true)\n    end\n\n  fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end\n  fun min(y: ISize): ISize => if this < y then this else y end\n  fun max(y: ISize): ISize => if this > y then this else y end\n\n  fun addc(y: ISize): (ISize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.sadd.with.overflow.i32\"[(ISize, Bool)](this, y)\n    else\n      @\"llvm.sadd.with.overflow.i64\"[(ISize, Bool)](this, y)\n    end\n\n  fun subc(y: ISize): (ISize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.ssub.with.overflow.i32\"[(ISize, Bool)](this, y)\n    else\n      @\"llvm.ssub.with.overflow.i64\"[(ISize, Bool)](this, y)\n    end\n\n  fun mulc(y: ISize): (ISize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.smul.with.overflow.i32\"[(ISize, Bool)](this, y)\n    else\n      _SignedCheckedArithmetic._mulc[USize, ISize](this, y)\n    end\n\nprimitive I128 is _SignedInteger[I128, U128]\n  new create(value: I128) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i128()\n\n  new min_value() => -0x8000_0000_0000_0000_0000_0000_0000_0000\n  new max_value() => 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF\n\n  fun abs(): U128 => if this < 0 then (-this).u128() else this.u128() end\n  fun bit_reverse(): I128 => @\"llvm.bitreverse.i128\"[I128](this)\n  fun bswap(): I128 => @\"llvm.bswap.i128\"[I128](this)\n  fun popcount(): U128 => @\"llvm.ctpop.i128\"[U128](this)\n  fun clz(): U128 => @\"llvm.ctlz.i128\"[U128](this, false)\n  fun ctz(): U128 => @\"llvm.cttz.i128\"[U128](this, false)\n\n  fun clz_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i128\"[U128](this, true)\n\n  fun ctz_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i128\"[U128](this, true)\n\n  fun bitwidth(): U128 => 128\n  fun min(y: I128): I128 => if this < y then this else y end\n  fun max(y: I128): I128 => if this > y then this else y end\n  fun hash(): USize => u128().hash()\n  fun hash64(): U64 => u128().hash64()\n\n  fun string(): String iso^ =>\n    _ToString._u128(abs().u128(), this < 0)\n\n  fun mul(y: I128): I128 =>\n    (u128() * y.u128()).i128()\n\n  fun divmod(y: I128): (I128, I128) =>\n    ifdef native128 then\n      (this / y, this % y)\n    else\n      if y == 0 then\n        return (0, 0)\n      end\n\n      var num: I128 = if this >= 0 then this else -this end\n      var den: I128 = if y >= 0 then y else -y end\n\n      (let q, let r) = num.u128().divmod(den.u128())\n      (var q', var r') = (q.i128(), r.i128())\n\n      if this < 0 then\n        r' = -r'\n\n        if y > 0 then\n          q' = -q'\n        end\n      elseif y < 0 then\n        q' = -q'\n      end\n\n      (q', r')\n    end\n\n  fun div(y: I128): I128 =>\n    ifdef native128 then\n      this / y\n    else\n      (let q, let r) = divmod(y)\n      q\n    end\n\n  fun mod(y: I128): I128 =>\n    ifdef native128 then\n      this % y\n    else\n      (let q, let r) = divmod(y)\n      r\n    end\n\n  fun mul_unsafe(y: I128): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this *~ y\n    else\n      this * y\n    end\n\n  fun divmod_unsafe(y: I128): (I128, I128) =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      (this *~ y, this /~ y)\n    else\n      divmod(y)\n    end\n\n  fun div_unsafe(y: I128): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this /~ y\n    else\n      this / y\n    end\n\n  fun mod_unsafe(y: I128): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this %~ y\n    else\n      this % y\n    end\n\n  fun f32(): F32 =>\n    f64().f32()\n\n  fun f64(): F64 =>\n    if this < 0 then\n      -(-u128()).f64()\n    else\n      u128().f64()\n    end\n\n  fun f32_unsafe(): F32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64_unsafe().f32_unsafe()\n\n  fun f64_unsafe(): F64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64()\n\n  fun addc(y: I128): (I128, Bool) =>\n    ifdef native128 then\n      @\"llvm.sadd.with.overflow.i128\"[(I128, Bool)](this, y)\n    else\n      let overflow =\n        if y > 0 then\n          (this > (max_value() - y))\n        else\n          (this < (min_value() - y))\n        end\n\n      (this + y, overflow)\n    end\n\n  fun subc(y: I128): (I128, Bool) =>\n    ifdef native128 then\n      @\"llvm.ssub.with.overflow.i128\"[(I128, Bool)](this, y)\n    else\n      let overflow =\n        if y > 0 then\n          (this < (min_value() + y))\n        else\n          (this > (max_value() + y))\n        end\n\n      (this - y, overflow)\n    end\n\n  fun mulc(y: I128): (I128, Bool) =>\n    // using llvm.smul.with.overflow.i128 would require to link\n    // llvm compiler-rt where the function implementing it lives: https://github.com/llvm-mirror/compiler-rt/blob/master/lib/builtins/muloti4.c\n    // See this bug for reference:\n    // the following implementation is more or less exactly was __muloti4 is\n    // doing\n    _SignedCheckedArithmetic._mulc[U128, I128](this, y)\n\ntype Signed is (I8 | I16 | I32 | I64 | I128 | ILong | ISize)\n\n\nprimitive _SignedCheckedArithmetic\n  fun _mulc[U: _UnsignedInteger[U] val, T: (Signed & _SignedInteger[T, U] val)](x: T, y: T): (T, Bool) =>\n    \"\"\"\n    basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing\n    and roughly as fast as these.\n\n    Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available.\n    So we shouldn't use: `@\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y)`\n\n    Also see https://bugs.llvm.org/show_bug.cgi?id=14469\n\n    That's basically why we rolled our own.\n    \"\"\"\n    let result = x * y\n    if x == T.min_value() then\n      return (result, (y != T.from[I8](0)) and (y != T.from[I8](1)))\n    end\n    if y == T.min_value() then\n      return (result, (x != T.from[I8](0)) and (x != T.from[I8](1)))\n    end\n    let x_neg = x >> (x.bitwidth() - U.from[U8](1))\n    let x_abs = (x xor x_neg) - x_neg\n    let y_neg = y >> (x.bitwidth() - U.from[U8](1))\n    let y_abs = (y xor y_neg) - y_neg\n\n    if ((x_abs < T.from[I8](2)) or (y_abs < T.from[I8](2))) then\n      return (result, false)\n    end\n    if (x_neg == y_neg) then\n      (result, (x_abs > (T.max_value() / y_abs)))\n    else\n      (result, (x_abs > (T.min_value() / -y_abs)))\n    end",
            "title": "signed.pony"
        },
        {
            "location": "/src/builtin/seq/",
            "text": "interface Seq[A]\n  \"\"\"\n  A sequence of elements.\n  \"\"\"\n  new create(len: USize = 0)\n    \"\"\"\n    Create a sequence, reserving space for len elements.\n    \"\"\"\n\n  fun ref reserve(len: USize)\n    \"\"\"\n    Reserve space for len elements.\n    \"\"\"\n\n  fun size(): USize\n    \"\"\"\n    Returns the number of elements in the sequence.\n    \"\"\"\n\n  fun apply(i: USize): this->A ?\n    \"\"\"\n    Returns the i-th element of the sequence. Raises an error if the index\n    is out of bounds.\n    \"\"\"\n\n  fun ref update(i: USize, value: A): A^ ?\n    \"\"\"\n    Replaces the i-th element of the sequence. Returns the previous value.\n    Raises an error if the index is out of bounds.\n    \"\"\"\n\n  fun ref clear()\n    \"\"\"\n    Removes all elements from the sequence.\n    \"\"\"\n\n  fun ref push(value: A)\n    \"\"\"\n    Adds an element to the end of the sequence.\n    \"\"\"\n\n  fun ref pop(): A^ ?\n    \"\"\"\n    Removes an element from the end of the sequence.\n    \"\"\"\n\n  fun ref unshift(value: A)\n    \"\"\"\n    Adds an element to the beginning of the sequence.\n    \"\"\"\n\n  fun ref shift(): A^ ?\n    \"\"\"\n    Removes an element from the beginning of the sequence.\n    \"\"\"\n\n  fun ref append(\n    seq: (ReadSeq[A] & ReadElement[A^]),\n    offset: USize = 0,\n    len: USize = -1)\n    \"\"\"\n    Add len elements to the end of the list, starting from the given\n    offset.\n    \"\"\"\n\n  fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1)\n    \"\"\"\n    Add len iterated elements to the end of the list, starting from the given\n    offset.\n    \"\"\"\n\n  fun ref truncate(len: USize)\n    \"\"\"\n    Truncate the sequence to the given length, discarding excess elements.\n    If the sequence is already smaller than len, do nothing.\n    \"\"\"\n\n  fun values(): Iterator[this->A]^\n    \"\"\"\n    Returns an iterator over the elements of the sequence.\n    \"\"\"",
            "title": "seq.pony"
        },
        {
            "location": "/src/builtin/real/",
            "text": "trait val _ArithmeticConvertible\n  fun i8(): I8 => compile_intrinsic\n  fun i16(): I16 => compile_intrinsic\n  fun i32(): I32 => compile_intrinsic\n  fun i64(): I64 => compile_intrinsic\n  fun i128(): I128 => compile_intrinsic\n  fun ilong(): ILong => compile_intrinsic\n  fun isize(): ISize => compile_intrinsic\n\n  fun u8(): U8 => compile_intrinsic\n  fun u16(): U16 => compile_intrinsic\n  fun u32(): U32 => compile_intrinsic\n  fun u64(): U64 => compile_intrinsic\n  fun u128(): U128 => compile_intrinsic\n  fun ulong(): ULong => compile_intrinsic\n  fun usize(): USize => compile_intrinsic\n\n  fun f32(): F32 => compile_intrinsic\n  fun f64(): F64 => compile_intrinsic\n\n  fun i8_unsafe(): I8 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun i16_unsafe(): I16 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun i32_unsafe(): I32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun i64_unsafe(): I64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun i128_unsafe(): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun ilong_unsafe(): ILong =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun isize_unsafe(): ISize =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u8_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u16_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u32_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u64_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u128_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun ulong_unsafe(): ULong =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun usize_unsafe(): USize =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun f32_unsafe(): F32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun f64_unsafe(): F64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\ntrait val Real[A: Real[A] val] is\n  (Stringable & _ArithmeticConvertible & Comparable[A])\n  new val create(value: A)\n\n  new val from[B: (Number & Real[B] val)](a: B)\n  new val min_value()\n  new val max_value()\n\n  fun add(y: A): A => this + y\n  fun sub(y: A): A => this - y\n  fun mul(y: A): A => this * y\n  fun div(y: A): A => this / y\n  fun divmod(y: A): (A, A) => (this / y, this % y)\n  fun mod(y: A): A => this % y\n  fun neg(): A => -this\n\n  fun eq(y: box->A): Bool => this == y\n  fun ne(y: box->A): Bool => this != y\n  fun lt(y: box->A): Bool => this < y\n  fun le(y: box->A): Bool => this <= y\n  fun ge(y: box->A): Bool => this >= y\n  fun gt(y: box->A): Bool => this > y\n\n  fun min(y: A): A\n  fun max(y: A): A\n\n  fun hash(): USize =>\n    var x = usize()\n\n    ifdef ilp32 then\n      x = (not x) + (x << 15)\n      x = x xor (x >> 12)\n      x = x + (x << 2)\n      x = x xor (x >> 4)\n      x = (x + (x << 3)) + (x << 11)\n      x = x xor (x >> 16)\n\n      x\n    else\n      hash64().usize()\n    end\n\n  fun hash64(): U64 =>\n    var x = u64()\n\n    x = (not x) + (x << 21)\n    x = x xor (x >> 24)\n    x = (x + (x << 3)) + (x << 8)\n    x = x xor (x >> 14)\n    x = (x + (x << 2)) + (x << 4)\n    x = x xor (x >> 28)\n    x = x + (x << 31)\n\n    x\n\n  fun _value(): A => compile_intrinsic\n\ntrait val Integer[A: Integer[A] val] is Real[A]\n  fun add_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this +~ y\n\n  fun sub_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this -~ y\n\n  fun mul_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this *~ y\n\n  fun div_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this /~ y\n\n  fun divmod_unsafe(y: A): (A, A) =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    (this /~ y, this %~ y)\n\n  fun mod_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this %~ y\n\n  fun neg_unsafe(): A =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    -~this\n\n  fun addc(y: A): (A, Bool)\n    \"\"\"\n    Add `y` to this integer and return the result and a flag indicating overflow.\n    \"\"\"\n  fun subc(y: A): (A, Bool)\n    \"\"\"\n    Subtract `y` from this integer and return the result and a flag indicating overflow.\n    \"\"\"\n  fun mulc(y: A): (A, Bool)\n    \"\"\"\n    Multiply `y` with this integer and return the result and a flag indicating overflow.\n    \"\"\"\n  fun op_and(y: A): A => this and y\n  fun op_or(y: A): A => this or y\n  fun op_xor(y: A): A => this xor y\n  fun op_not(): A => not this\n\n  fun bit_reverse(): A\n    \"\"\"\n    Reverse the order of the bits within the integer.\n    For example, 0b11101101 (237) would return 0b10110111 (183).\n    \"\"\"\n\n  fun bswap(): A\n\ntrait val _SignedInteger[A: _SignedInteger[A, B] val,\n    B: _UnsignedInteger[B] val] is Integer[A]\n  fun abs(): B\n\n  fun shl(y: B): A => this << y\n  fun shr(y: B): A => this >> y\n\n  fun shl_unsafe(y: B): A =>\n    \"\"\"\n    Unsafe operation.\n    If bits differing from the final sign bit are shifted-out, the result is\n    undefined.\n    \"\"\"\n    this <<~ y\n\n  fun shr_unsafe(y: B): A =>\n    \"\"\"\n    Unsafe operation.\n    If non-zero bits are shifted-out, the result is undefined.\n    \"\"\"\n    this >>~ y\n\n  fun popcount(): B\n  fun clz(): B\n  fun ctz(): B\n\n  fun clz_unsafe(): B\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n\n  fun ctz_unsafe(): B\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n\n  fun bitwidth(): B\n\n  fun string(): String iso^ =>\n    _ToString._u64(abs().u64(), i64() < 0)\n\ntrait val _UnsignedInteger[A: _UnsignedInteger[A] val] is Integer[A]\n  fun abs(): A\n\n  fun shl(y: A): A => this << y\n  fun shr(y: A): A => this >> y\n\n  fun shl_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If non-zero bits are shifted-out, the result is undefined.\n    \"\"\"\n    this <<~ y\n\n  fun shr_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If non-zero bits are shifted-out, the result is undefined.\n    \"\"\"\n    this >>~ y\n\n  fun rotl(y: A): A =>\n    let y' = y % bitwidth()\n    if y' == y'.min_value() then\n      this._value()\n    else\n      (this << y') or (this >> (bitwidth() - y'))\n    end\n\n  fun rotr(y: A): A =>\n    let y' = y % bitwidth()\n    if y' == y'.min_value() then\n      this._value()\n    else\n      (this >> y') or (this << (bitwidth() - y'))\n    end\n\n  fun popcount(): A\n  fun clz(): A\n  fun ctz(): A\n\n  fun clz_unsafe(): A\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n\n  fun ctz_unsafe(): A\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n\n  fun bitwidth(): A\n\n  fun string(): String iso^ =>\n    _ToString._u64(u64(), false)\n\ntrait val FloatingPoint[A: FloatingPoint[A] val] is Real[A]\n  new val min_normalised()\n  new val epsilon()\n  fun tag radix(): U8\n  fun tag precision2(): U8\n  fun tag precision10(): U8\n  fun tag min_exp2(): I16\n  fun tag min_exp10(): I16\n  fun tag max_exp2(): I16\n  fun tag max_exp10(): I16\n\n  fun add_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this +~ y\n\n  fun sub_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this -~ y\n\n  fun mul_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this *~ y\n\n  fun div_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this /~ y\n\n  fun divmod_unsafe(y: A): (A, A) =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    (this /~ y, this %~ y)\n\n  fun mod_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this %~ y\n\n  fun neg_unsafe(): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    -~this\n\n  fun eq_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this ==~ y\n\n  fun ne_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this !=~ y\n\n  fun lt_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this <~ y\n\n  fun le_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this <=~ y\n\n  fun ge_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this >=~ y\n\n  fun gt_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this >~ y\n\n  fun abs(): A\n  fun ceil(): A\n  fun floor(): A\n  fun round(): A\n  fun trunc(): A\n\n  fun finite(): Bool\n  fun infinite(): Bool\n  fun nan(): Bool\n\n  fun ldexp(x: A, exponent: I32): A\n  fun frexp(): (A, U32)\n  fun log(): A\n  fun log2(): A\n  fun log10(): A\n  fun logb(): A\n\n  fun pow(y: A): A\n  fun powi(y: I32): A\n\n  fun sqrt(): A\n\n  fun sqrt_unsafe(): A\n    \"\"\"\n    Unsafe operation.\n    If this is negative, the result is undefined.\n    \"\"\"\n\n  fun cbrt(): A\n  fun exp(): A\n  fun exp2(): A\n\n  fun cos(): A\n  fun sin(): A\n  fun tan(): A\n\n  fun cosh(): A\n  fun sinh(): A\n  fun tanh(): A\n\n  fun acos(): A\n  fun asin(): A\n  fun atan(): A\n  fun atan2(y: A): A\n\n  fun acosh(): A\n  fun asinh(): A\n  fun atanh(): A\n\n  fun copysign(sign: A): A\n\n  fun string(): String iso^ =>\n    _ToString._f64(f64())\n\ntype Number is (Int | Float)\n\ntype Int is (Signed | Unsigned)",
            "title": "real.pony"
        },
        {
            "location": "/src/builtin/read_seq/",
            "text": "interface box ReadSeq[A]\n  \"\"\"\n  The readable interface of a sequence.\n  \"\"\"\n  fun size(): USize\n    \"\"\"\n    Returns the number of elements in the sequence.\n    \"\"\"\n\n  fun apply(i: USize): this->A ?\n    \"\"\"\n    Returns the i-th element of the sequence. Raises an error if the index\n    is out of bounds. Note that this returns this->A, not A.\n    \"\"\"\n\n  fun values(): Iterator[this->A]^\n    \"\"\"\n    Returns an iterator over the elements of the sequence. Note that this\n    iterates over this->A, not A.\n    \"\"\"\n\ninterface box ReadElement[A]\n  \"\"\"\n  Used to show that a ReadSeq can return an element of a specific unmodified\n  type.\n  \"\"\"\n  fun apply(i: USize): A ?",
            "title": "read_seq.pony"
        },
        {
            "location": "/src/builtin/pointer/",
            "text": "struct Pointer[A]\n  \"\"\"\n  A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\n  included in a union or intersection, or be a subtype of any interface. Most\n  functions on a Pointer[A] are private to maintain memory safety.\n  \"\"\"\n  new create() =>\n    \"\"\"\n    A null pointer.\n    \"\"\"\n    compile_intrinsic\n\n  new _alloc(len: USize) =>\n    \"\"\"\n    Space for len instances of A.\n    \"\"\"\n    compile_intrinsic\n\n  fun ref _realloc(len: USize): Pointer[A] =>\n    \"\"\"\n    Keep the contents, but reserve space for len instances of A.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag _unsafe(): Pointer[A] ref =>\n    \"\"\"\n    Unsafe change in reference capability.\n    \"\"\"\n    compile_intrinsic\n\n  fun _convert[B](): this->Pointer[B] =>\n    \"\"\"\n    Convert from Pointer[A] to Pointer[B].\n    \"\"\"\n    compile_intrinsic\n\n  fun _apply(i: USize): this->A =>\n    \"\"\"\n    Retrieve index i.\n    \"\"\"\n    compile_intrinsic\n\n  fun ref _update(i: USize, value: A!): A^ =>\n    \"\"\"\n    Set index i and return the previous value.\n    \"\"\"\n    compile_intrinsic\n\n  fun _offset(n: USize): this->Pointer[A] =>\n    \"\"\"\n    Return a pointer to the n-th element.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag _element_size(): USize =>\n    \"\"\"\n    Return the size of a single element in an array of type A.\n    \"\"\"\n    compile_intrinsic\n\n  fun ref _insert(n: USize, len: USize): Pointer[A] =>\n    \"\"\"\n    Creates space for n new elements at the head, moving following elements.\n    The array length before this should be len, and the available space should\n    be at least n + len.\n    \"\"\"\n    compile_intrinsic\n\n  fun ref _delete(n: USize, len: USize): A^ =>\n    \"\"\"\n    Delete n elements from the head of pointer, compact remaining elements of\n    the underlying array. The array length before this should be n + len.\n    Returns the first deleted element.\n    \"\"\"\n    compile_intrinsic\n\n  fun _copy_to(that: Pointer[this->A!], n: USize): this->Pointer[A] =>\n    \"\"\"\n    Copy n elements from this to that.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag usize(): USize =>\n    \"\"\"\n    Convert the pointer into an integer.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag is_null(): Bool =>\n    \"\"\"\n    Return true for a null pointer, false for anything else.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag eq(that: Pointer[A] tag): Bool =>\n    \"\"\"\n    Return true if this address is that address.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag lt(that: Pointer[A] tag): Bool =>\n    \"\"\"\n    Return true if this address is less than that address.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag ne(that: Pointer[A] tag): Bool => not eq(that)\n  fun tag le(that: Pointer[A] tag): Bool => lt(that) or eq(that)\n  fun tag ge(that: Pointer[A] tag): Bool => not lt(that)\n  fun tag gt(that: Pointer[A] tag): Bool => not le(that)\n\n  fun tag hash(): USize =>\n    \"\"\"\n    Returns a hash of the address.\n    \"\"\"\n    usize().hash()\n\n  fun tag hash64(): U64 =>\n    \"\"\"\n    Returns a 64-bit hash of the address.\n    \"\"\"\n    usize().hash64()",
            "title": "pointer.pony"
        },
        {
            "location": "/src/builtin/platform/",
            "text": "primitive Platform\n  fun bsd(): Bool => freebsd() or dragonfly()\n  fun freebsd(): Bool => compile_intrinsic\n  fun dragonfly(): Bool => compile_intrinsic\n  fun linux(): Bool => compile_intrinsic\n  fun osx(): Bool => compile_intrinsic\n  fun posix(): Bool => bsd() or linux() or osx()\n  fun windows(): Bool => compile_intrinsic\n\n  fun x86(): Bool => compile_intrinsic\n  fun arm(): Bool => compile_intrinsic\n\n  fun lp64(): Bool => compile_intrinsic\n  fun llp64(): Bool => compile_intrinsic\n  fun ilp32(): Bool => compile_intrinsic\n\n  fun bigendian(): Bool => compile_intrinsic\n  fun littleendian(): Bool => compile_intrinsic\n\n  fun native128(): Bool => compile_intrinsic\n  fun debug(): Bool => compile_intrinsic",
            "title": "platform.pony"
        },
        {
            "location": "/src/builtin/none/",
            "text": "primitive None is Stringable\n  fun string(): String iso^ =>\n    \"None\".string()",
            "title": "none.pony"
        },
        {
            "location": "/src/builtin/maybe_pointer/",
            "text": "struct MaybePointer[A]\n  \"\"\"\n  A MaybePointer[A] is used to encode a possibly-null type. It should\n  _only_ be used for structs that need to be passed to and from the C FFI.\n\n  An optional type for anything that isn't a struct should be encoded as a\n  union type, for example (A | None).\n  \"\"\"\n  new create(that: A) =>\n    \"\"\"\n    This re-encodes the type of `that` from A to MaybePointer[A], allowing\n    `that` to be assigned to a field or variable of type MaybePointer[A]. It\n    doesn't allocate a wrapper object: there is no containing object for `that`.\n    \"\"\"\n    compile_intrinsic\n\n  new none() =>\n    \"\"\"\n    This returns a null pointer typed as a MaybePointer[A].\n    \"\"\"\n    compile_intrinsic\n\n  fun apply(): this->A ? =>\n    \"\"\"\n    This re-encodes the type of `this` from MaybePointer[A] to A, allowing\n    `this` to be assigned to a field of variable of type A. If `this` is a null\n    pointer, an error is raised.\n    \"\"\"\n    compile_intrinsic\n\n  fun is_none(): Bool =>\n    \"\"\"\n    Returns true if `this` is null (ie apply would raise an error).\n    \"\"\"\n    compile_intrinsic",
            "title": "maybe_pointer.pony"
        },
        {
            "location": "/src/builtin/iterator/",
            "text": "interface Iterator[A]\n  \"\"\"\n\n  Iterators generate a series of values, one value at a time on each call to `next()`.\n\n  An Iterator is considered exhausted, once its `has_next()` method returns `false`.\n  Thus every call to `next()` should be preceeded with a call to `has_next()` to\n  check for exhaustiveness.\n\n  ## Usage\n\n  Given the rules for using Iterators mentioned above, basic usage\n  of an iterator looks like this:\n\n  ```pony\n  while iterator.has_next() do\n    let elem = iterator.next()?\n    // do something with elem\n  end\n  ```\n\n  The `For`-loop provides a more concise way of iteration:\n\n  ```pony\n  for elem in iterator do\n    // do something with elem\n  end\n  ```\n\n  Iteration using `While` is more flexible as it allows to continue iterating if a call to `next()` errors.\n  The `For`-loop does not allow this.\n\n  ## Implementing Iterators\n\n  Iterator implementations need to adhere to the following rules to be considered well-behaved:\n\n  * If the Iterator is exhausted, `has_next()` needs to return `false`.\n  * Once `has_next()` returned `false` it is not allowed to switch back to `true`\n    (Unless the Iterator supports rewinding)\n  * `has_next()` does not change its returned value if `next()` has not been called.\n    That means, that between two calls to `next()` any number of calls to `has_next()`\n    need to return the same value. (Unless the Iterator supports rewinding)\n  * A call to `next()` erroring does not necessarily denote exhaustiveness.\n\n  ### Example\n\n  ```pony\n  // Generates values from `from` to 0\n  class ref Countdown is Iterator[USize]\n    var _cur: USize\n    var _has_next: Bool = true\n\n    new ref create(from: USize) =>\n      _cur = from\n\n    fun ref has_next(): Bool =>\n      _has_next\n\n    fun ref next(): USize =>\n      let elem = _cur = _cur - 1\n      if elem == 0 then\n        _has_next = false\n      end\n      elem\n  ```\n\n  \"\"\"\n\n  fun ref has_next(): Bool\n    \"\"\"\n    Returns `true` if this Iterator is not yet exhausted.\n    That means that a value returned from a subsequent call to `next()`\n    is a valid part of this iterator.\n\n    Returns `false` if this Iterator is exhausted.\n\n    The behavior of `next()` after this function returned `false` is undefined,\n    it might throw an error or return values which are not part of this Iterator.\n    \"\"\"\n\n  fun ref next(): A ?\n    \"\"\"\n    Generate the next value.\n\n    This might error, which does not necessarily mean that the Iterator is exhausted.\n    \"\"\"",
            "title": "iterator.pony"
        },
        {
            "location": "/src/builtin/float/",
            "text": "primitive F32 is FloatingPoint[F32]\n  new create(value: F32 = 0) => value\n  new pi() => 3.14159265358979323846\n  new e() => 2.71828182845904523536\n\n  new _nan() => compile_intrinsic\n  new _inf(negative: Bool) => compile_intrinsic\n\n  new from_bits(i: U32) => compile_intrinsic\n  fun bits(): U32 => compile_intrinsic\n  new from[B: (Number & Real[B] val)](a: B) => a.f32()\n\n  new min_value() =>\n    \"\"\"\n    Minimum negative value representable.\n    \"\"\"\n    from_bits(0xFF7FFFFF)\n\n  new max_value() =>\n    \"\"\"\n    Maximum positive value representable.\n    \"\"\"\n    from_bits(0x7F7FFFFF)\n\n  new min_normalised() =>\n    \"\"\"\n    Minimum positive value representable at full precision (ie a normalised\n    number).\n    \"\"\"\n    from_bits(0x00800000)\n\n  new epsilon() =>\n    \"\"\"\n    Minimum positive value such that (1 + epsilon) != 1.\n    \"\"\"\n    from_bits(0x34000000)\n\n  fun tag radix(): U8 =>\n    \"\"\"\n    Exponent radix.\n    \"\"\"\n    2\n\n  fun tag precision2(): U8 =>\n    \"\"\"\n    Mantissa precision in bits.\n    \"\"\"\n    24\n\n  fun tag precision10(): U8 =>\n    \"\"\"\n    Mantissa precision in decimal digits.\n    \"\"\"\n    6\n\n  fun tag min_exp2(): I16 =>\n    \"\"\"\n    Minimum exponent value such that (2^exponent) - 1 is representable at full\n    precision (ie a normalised number).\n    \"\"\"\n    -125\n\n  fun tag min_exp10(): I16 =>\n    \"\"\"\n    Minimum exponent value such that (10^exponent) - 1 is representable at full\n    precision (ie a normalised number).\n    \"\"\"\n    -37\n\n  fun tag max_exp2(): I16 =>\n    \"\"\"\n    Maximum exponent value such that (2^exponent) - 1 is representable.\n    \"\"\"\n    128\n\n  fun tag max_exp10(): I16 =>\n    \"\"\"\n    Maximum exponent value such that (10^exponent) - 1 is representable.\n    \"\"\"\n    38\n\n  fun abs(): F32 => @\"llvm.fabs.f32\"[F32](this)\n  fun ceil(): F32 => @\"llvm.ceil.f32\"[F32](this)\n  fun floor(): F32 => @\"llvm.floor.f32\"[F32](this)\n  fun round(): F32 => @\"llvm.round.f32\"[F32](this)\n  fun trunc(): F32 => @\"llvm.trunc.f32\"[F32](this)\n\n  fun min(y: F32): F32 => if this < y then this else y end\n  fun max(y: F32): F32 => if this > y then this else y end\n\n  fun finite(): Bool =>\n    \"\"\"\n    Check whether this number is finite, ie not +/-infinity and not NaN.\n    \"\"\"\n    // True if exponent is not all 1s\n    (bits() and 0x7F800000) != 0x7F800000\n\n  fun infinite(): Bool =>\n    \"\"\"\n    Check whether this number is +/-infinity\n    \"\"\"\n    // True if exponent is all 1s and mantissa is 0\n    ((bits() and 0x7F800000) == 0x7F800000) and  // exp\n    ((bits() and 0x007FFFFF) == 0)  // mantissa\n\n  fun nan(): Bool =>\n    \"\"\"\n    Check whether this number is NaN.\n    \"\"\"\n    // True if exponent is all 1s and mantissa is non-0\n    ((bits() and 0x7F800000) == 0x7F800000) and  // exp\n    ((bits() and 0x007FFFFF) != 0)  // mantissa\n\n  fun ldexp(x: F32, exponent: I32): F32 =>\n    @ldexpf[F32](x, exponent)\n\n  fun frexp(): (F32, U32) =>\n    var exponent: U32 = 0\n    var mantissa = @frexp[F64](f64(), addressof exponent)\n    (mantissa.f32(), exponent)\n\n  fun log(): F32 => @\"llvm.log.f32\"[F32](this)\n  fun log2(): F32 => @\"llvm.log2.f32\"[F32](this)\n  fun log10(): F32 => @\"llvm.log10.f32\"[F32](this)\n  fun logb(): F32 => @logbf[F32](this)\n\n  fun pow(y: F32): F32 => @\"llvm.pow.f32\"[F32](this, y)\n  fun powi(y: I32): F32 =>\n    ifdef windows then\n      pow(y.f32())\n    else\n      @\"llvm.powi.f32\"[F32](this, y)\n    end\n\n  fun sqrt(): F32 =>\n    if this < 0.0 then\n      _nan()\n    else\n      @\"llvm.sqrt.f32\"[F32](this)\n    end\n\n  fun sqrt_unsafe(): F32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is negative, the result is undefined.\n    \"\"\"\n    @\"llvm.sqrt.f32\"[F32](this)\n\n  fun cbrt(): F32 => @cbrtf[F32](this)\n  fun exp(): F32 => @\"llvm.exp.f32\"[F32](this)\n  fun exp2(): F32 => @\"llvm.exp2.f32\"[F32](this)\n\n  fun cos(): F32 => @\"llvm.cos.f32\"[F32](this)\n  fun sin(): F32 => @\"llvm.sin.f32\"[F32](this)\n  fun tan(): F32 => @tanf[F32](this)\n\n  fun cosh(): F32 => @coshf[F32](this)\n  fun sinh(): F32 => @sinhf[F32](this)\n  fun tanh(): F32 => @tanhf[F32](this)\n\n  fun acos(): F32 => @acosf[F32](this)\n  fun asin(): F32 => @asinf[F32](this)\n  fun atan(): F32 => @atanf[F32](this)\n  fun atan2(y: F32): F32 => @atan2f[F32](this, y)\n\n  fun acosh(): F32 => @acoshf[F32](this)\n  fun asinh(): F32 => @asinhf[F32](this)\n  fun atanh(): F32 => @atanhf[F32](this)\n\n  fun copysign(sign: F32): F32 => @\"llvm.copysign.f32\"[F32](this, sign)\n\n  fun hash(): USize => bits().hash()\n  fun hash64(): U64 => bits().hash64()\n\n  fun i128(): I128 => f64().i128()\n  fun u128(): U128 => f64().u128()\n\n  fun i128_unsafe(): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64_unsafe().i128_unsafe()\n\n  fun u128_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64_unsafe().u128_unsafe()\n\nprimitive F64 is FloatingPoint[F64]\n  new create(value: F64 = 0) => value\n  new pi() => 3.14159265358979323846\n  new e() => 2.71828182845904523536\n\n  new _nan() => compile_intrinsic\n  new _inf(negative: Bool) => compile_intrinsic\n\n  new from_bits(i: U64) => compile_intrinsic\n  fun bits(): U64 => compile_intrinsic\n  new from[B: (Number & Real[B] val)](a: B) => a.f64()\n\n  new min_value() =>\n    \"\"\"\n    Minimum negative value representable.\n    \"\"\"\n    from_bits(0xFFEF_FFFF_FFFF_FFFF)\n\n  new max_value() =>\n    \"\"\"\n    Maximum positive value representable.\n    \"\"\"\n    from_bits(0x7FEF_FFFF_FFFF_FFFF)\n\n  new min_normalised() =>\n    \"\"\"\n    Minimum positive value representable at full precision (ie a normalised\n    number).\n    \"\"\"\n    from_bits(0x0010_0000_0000_0000)\n\n  new epsilon() =>\n    \"\"\"\n    Minimum positive value such that (1 + epsilon) != 1.\n    \"\"\"\n    from_bits(0x3CB0_0000_0000_0000)\n\n  fun tag radix(): U8 =>\n    \"\"\"\n    Exponent radix.\n    \"\"\"\n    2\n\n  fun tag precision2(): U8 =>\n    \"\"\"\n    Mantissa precision in bits.\n    \"\"\"\n    53\n\n  fun tag precision10(): U8 =>\n    \"\"\"\n    Mantissa precision in decimal digits.\n    \"\"\"\n    15\n\n  fun tag min_exp2(): I16 =>\n    \"\"\"\n    Minimum exponent value such that (2^exponent) - 1 is representable at full\n    precision (ie a normalised number).\n    \"\"\"\n    -1021\n\n  fun tag min_exp10(): I16 =>\n    \"\"\"\n    Minimum exponent value such that (10^exponent) - 1 is representable at full\n    precision (ie a normalised number).\n    \"\"\"\n    -307\n\n  fun tag max_exp2(): I16 =>\n    \"\"\"\n    Maximum exponent value such that (2^exponent) - 1 is representable.\n    \"\"\"\n    1024\n\n  fun tag max_exp10(): I16 =>\n    \"\"\"\n    Maximum exponent value such that (10^exponent) - 1 is representable.\n    \"\"\"\n    308\n\n  fun abs(): F64 => @\"llvm.fabs.f64\"[F64](this)\n  fun ceil(): F64 => @\"llvm.ceil.f64\"[F64](this)\n  fun floor(): F64 => @\"llvm.floor.f64\"[F64](this)\n  fun round(): F64 => @\"llvm.round.f64\"[F64](this)\n  fun trunc(): F64 => @\"llvm.trunc.f64\"[F64](this)\n\n  fun min(y: F64): F64 => if this < y then this else y end\n  fun max(y: F64): F64 => if this > y then this else y end\n\n  fun finite(): Bool =>\n    \"\"\"\n    Check whether this number is finite, ie not +/-infinity and not NaN.\n    \"\"\"\n    // True if exponent is not all 1s\n    (bits() and 0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000\n\n  fun infinite(): Bool =>\n    \"\"\"\n    Check whether this number is +/-infinity\n    \"\"\"\n    // True if exponent is all 1s and mantissa is 0\n    ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and  // exp\n    ((bits() and 0x000F_FFFF_FFFF_FFFF) == 0)  // mantissa\n\n  fun nan(): Bool =>\n    \"\"\"\n    Check whether this number is NaN.\n    \"\"\"\n    // True if exponent is all 1s and mantissa is non-0\n    ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and  // exp\n    ((bits() and 0x000F_FFFF_FFFF_FFFF) != 0)  // mantissa\n\n  fun ldexp(x: F64, exponent: I32): F64 =>\n    @ldexp[F64](x, exponent)\n\n  fun frexp(): (F64, U32) =>\n    var exponent: U32 = 0\n    var mantissa = @frexp[F64](this, addressof exponent)\n    (mantissa, exponent)\n\n  fun log(): F64 => @\"llvm.log.f64\"[F64](this)\n  fun log2(): F64 => @\"llvm.log2.f64\"[F64](this)\n  fun log10(): F64 => @\"llvm.log10.f64\"[F64](this)\n  fun logb(): F64 => @logb[F64](this)\n\n  fun pow(y: F64): F64 => @\"llvm.pow.f64\"[F64](this, y)\n  fun powi(y: I32): F64 =>\n    ifdef windows then\n      pow(y.f64())\n    else\n      @\"llvm.powi.f64\"[F64](this, y)\n    end\n\n  fun sqrt(): F64 =>\n    if this < 0.0 then\n      _nan()\n    else\n      @\"llvm.sqrt.f64\"[F64](this)\n    end\n\n  fun sqrt_unsafe(): F64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is negative, the result is undefined.\n    \"\"\"\n    @\"llvm.sqrt.f64\"[F64](this)\n\n  fun cbrt(): F64 => @cbrt[F64](this)\n  fun exp(): F64 => @\"llvm.exp.f64\"[F64](this)\n  fun exp2(): F64 => @\"llvm.exp2.f64\"[F64](this)\n\n  fun cos(): F64 => @\"llvm.cos.f64\"[F64](this)\n  fun sin(): F64 => @\"llvm.sin.f64\"[F64](this)\n  fun tan(): F64 => @tan[F64](this)\n\n  fun cosh(): F64 => @cosh[F64](this)\n  fun sinh(): F64 => @sinh[F64](this)\n  fun tanh(): F64 => @tanh[F64](this)\n\n  fun acos(): F64 => @acos[F64](this)\n  fun asin(): F64 => @asin[F64](this)\n  fun atan(): F64 => @atan[F64](this)\n  fun atan2(y: F64): F64 => @atan2[F64](this, y)\n\n  fun acosh(): F64 => @acosh[F64](this)\n  fun asinh(): F64 => @asinh[F64](this)\n  fun atanh(): F64 => @atanh[F64](this)\n\n  fun copysign(sign: F64): F64 => @\"llvm.copysign.f64\"[F64](this, sign)\n\n  fun hash(): USize => bits().hash()\n  fun hash64(): U64 => bits().hash64()\n\n  fun i128(): I128 =>\n    if this > I128.max_value().f64() then\n      return I128.max_value()\n    elseif this < I128.min_value().f64() then\n      return I128.min_value()\n    end\n\n    let bit = bits()\n    let high = (bit >> 32).u32()\n    let ex = ((high and 0x7FF00000) >> 20) - 1023\n\n    if ex < 0 then\n      return 0\n    end\n\n    let s = ((high and 0x80000000) >> 31).i128()\n    var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).i128()\n    let ex' = ex.u128()\n\n    if ex' > 52 then\n      r = r << (ex' - 52)\n    else\n      r = r >> (52 - ex')\n    end\n\n    (r xor s) - s\n\n  fun u128(): U128 =>\n    if this > U128.max_value().f64() then\n      return U128.max_value()\n    elseif this < U128.min_value().f64() then\n      return U128.min_value()\n    end\n\n    let bit = bits()\n    let high = (bit >> 32).u32()\n    let ex = ((high and 0x7FF00000) >> 20) - 1023\n\n    if (ex < 0) or ((high and 0x80000000) != 0) then\n      return 0\n    end\n\n    var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).u128()\n    let ex' = ex.u128()\n\n    if ex' > 52 then\n      r = r << (ex' - 52)\n    else\n      r = r >> (52 - ex')\n    end\n\n    r.u128()\n\n  fun i128_unsafe(): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    i128()\n\n  fun u128_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    u128()\n\ntype Float is (F32 | F64)",
            "title": "float.pony"
        },
        {
            "location": "/src/builtin/env/",
            "text": "class val Env\n  \"\"\"\n  An environment holds the command line and other values injected into the\n  program by default by the runtime.\n  \"\"\"\n  let root: (AmbientAuth | None)\n    \"\"\"\n    The root capability.\n\n    Can be `None` for artificially constructed `Env` instances.\n    \"\"\"\n\n  let input: InputStream\n    \"\"\"\n    Stdin represented as an actor.\n    \"\"\"\n\n  let out: OutStream\n    \"\"\"Stdout\"\"\"\n\n  let err: OutStream\n    \"\"\"Stderr\"\"\"\n\n  let args: Array[String] val\n    \"\"\"The command line used to start the program.\"\"\"\n\n  let vars: Array[String] val\n    \"\"\"The program's environment variables.\"\"\"\n\n  let exitcode: {(I32)} val\n    \"\"\"\n    Sets the environment's exit code. The exit code of the root environment will\n    be the exit code of the application, which defaults to 0.\n    \"\"\"\n\n  new _create(\n    argc: U32,\n    argv: Pointer[Pointer[U8]] val,\n    envp: Pointer[Pointer[U8]] val)\n  =>\n    \"\"\"\n    Builds an environment from the command line. This is done before the Main\n    actor is created.\n    \"\"\"\n    root = AmbientAuth._create()\n    @pony_os_stdout_setup[None]()\n\n    input = Stdin._create(@pony_os_stdin_setup[Bool]())\n    out = StdStream._out()\n    err = StdStream._err()\n\n    args = _strings_from_pointers(argv, argc.usize())\n    vars = _strings_from_pointers(envp, _count_strings(envp))\n\n    exitcode = {(code: I32) => @pony_exitcode[None](code) }\n\n  new val create(\n    root': (AmbientAuth | None),\n    input': InputStream, out': OutStream,\n    err': OutStream, args': Array[String] val,\n    vars': Array[String] val,\n    exitcode': {(I32)} val)\n  =>\n    \"\"\"\n    Build an artificial environment. A root capability may be supplied.\n    \"\"\"\n    root = root'\n    input = input'\n    out = out'\n    err = err'\n    args = args'\n    vars = vars'\n    exitcode = exitcode'\n\n  fun tag _count_strings(data: Pointer[Pointer[U8]] val): USize =>\n    if data.is_null() then\n      return 0\n    end\n\n    var i: USize = 0\n\n    while\n      let entry = data._apply(i)\n      not entry.is_null()\n    do\n      i = i + 1\n    end\n    i\n\n  fun tag _strings_from_pointers(\n    data: Pointer[Pointer[U8]] val,\n    len: USize)\n    : Array[String] iso^\n  =>\n    let array = recover Array[String](len) end\n    var i: USize = 0\n\n    while i < len do\n      let entry = data._apply(i = i + 1)\n      array.push(recover String.copy_cstring(entry) end)\n    end\n\n    array",
            "title": "env.pony"
        },
        {
            "location": "/src/builtin/do_not_optimise/",
            "text": "primitive DoNotOptimise\n  \"\"\"\n  Contains functions preventing some compiler optimisations, namely dead code\n  removal. This is useful for benchmarking purposes.\n  \"\"\"\n\n  fun apply[A](obj: A) =>\n    \"\"\"\n    Prevent the compiler from optimising out obj and any computation it is\n    derived from. This doesn't prevent constant propagation.\n    \"\"\"\n    compile_intrinsic\n\n  fun observe() =>\n    \"\"\"\n    Prevent the compiler from optimising out writes to an object marked by\n    the apply function.\n    \"\"\"\n    compile_intrinsic",
            "title": "do_not_optimise.pony"
        },
        {
            "location": "/src/builtin/compare/",
            "text": "primitive Less is Equatable[Compare]\n  fun string(): String iso^ =>\n    \"Less\".string()\n\nprimitive Equal is Equatable[Compare]\n  fun string(): String iso^ =>\n    \"Equal\".string()\n\nprimitive Greater is Equatable[Compare]\n  fun string(): String iso^ =>\n    \"Greater\".string()\n\ntype Compare is (Less | Equal | Greater)\n\ninterface HasEq[A]\n  fun eq(that: box->A): Bool\n\ninterface Equatable[A: Equatable[A] #read]\n  fun eq(that: box->A): Bool => this is that\n  fun ne(that: box->A): Bool => not eq(that)\n\ninterface Comparable[A: Comparable[A] #read] is Equatable[A]\n  fun lt(that: box->A): Bool\n  fun le(that: box->A): Bool => lt(that) or eq(that)\n  fun ge(that: box->A): Bool => not lt(that)\n  fun gt(that: box->A): Bool => not le(that)\n\n  fun compare(that: box->A): Compare =>\n    if eq(that) then\n      Equal\n    elseif lt(that) then\n      Less\n    else\n      Greater\n    end",
            "title": "compare.pony"
        },
        {
            "location": "/src/builtin/bool/",
            "text": "primitive Bool is Stringable\n  new create(from: Bool) => from\n\n  fun eq(y: Bool): Bool => this == y\n  fun ne(y: Bool): Bool => this != y\n  fun op_and(y: Bool): Bool => this and y\n  fun op_or(y: Bool): Bool => this or y\n  fun op_xor(y: Bool): Bool => this xor y\n  fun op_not(): Bool => not this\n\n  fun string(): String iso^ =>\n    (if this then \"true\" else \"false\" end).string()",
            "title": "bool.pony"
        },
        {
            "location": "/src/builtin/asio_event/",
            "text": "type AsioEventID is Pointer[AsioEvent] tag\n\ninterface tag AsioEventNotify\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32)\n\nprimitive AsioEvent\n  \"\"\"\n  Functions for asynchronous event notification.\n  \"\"\"\n  fun none(): AsioEventID =>\n    \"\"\"\n    An empty event.\n    \"\"\"\n    AsioEventID\n\n  fun readable(flags: U32): Bool =>\n    \"\"\"\n    Returns true if the flags contain the readable flag.\n    \"\"\"\n    (flags and (1 << 0)) != 0\n\n  fun writeable(flags: U32): Bool =>\n    \"\"\"\n    Returns true if the flags contain the writeable flag.\n    \"\"\"\n    (flags and (1 << 1)) != 0\n\n  fun disposable(flags: U32): Bool =>\n    \"\"\"\n    Returns true if the event should be disposed of.\n    \"\"\"\n    flags == 0\n\n  fun dispose(): U32 => 0\n\n  fun read(): U32 => 1 << 0\n\n  fun write(): U32 => 1 << 1\n\n  fun timer(): U32 => 1 << 2\n\n  fun signal(): U32 => 1 << 3\n\n  fun read_write(): U32 => read() or write()\n\n  fun oneshot(): U32 => 1 << 8\n\n  fun read_write_oneshot(): U32 => read() or write() or oneshot()",
            "title": "asio_event.pony"
        },
        {
            "location": "/src/builtin/array/",
            "text": "class Array[A] is Seq[A]\n  \"\"\"\n  Contiguous, resizable memory to store elements of type A.\n\n  ## Usage\n\n  Creating an Array of String.\n  ```pony\n    let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n    // array.size() == 3\n    // array.space() >= 3\n  ```\n\n  Creating an empty Array of String, which may hold at least 10 elements before\n  requesting more space.\n  ```pony\n    let array = Array(10)\n    // array.size() == 0\n    // array.space() >= 10\n  ```\n\n  Accessing elements can be done via the `apply(i: USize): this->A ?` method.\n  The provided index might be out of bounds so `apply` is partial and has to be\n  called within a try-catch block or inside another partial method.\n  ```pony\n    let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n    let is_second_element_wobat = try\n      // indexes start from 0, so 1 is the second element\n      array(1)? == \"wombat\"\n    else\n      false\n    end\n  ```\n\n  Adding and removing elements to and from the end of the Array can be done via\n  `push` and `pop` methods. You could treat the array as a FIFO queue using\n  those methods.\n  ```pony\n    while (array.size() > 0) do\n      let elem = array.pop()?\n      // do something with element\n    end\n  ```\n\n  Modifying the Array can be done via `update`, `insert` and `delete` methods\n  which alter the Array at an arbitrary index, moving elements left (when\n  deleting) or right (when inserting) as necessary.\n\n  Iterating over the elements of an Array can be done using the `values` method.\n  ```pony\n    for element in array.values() do\n        // do something with element\n    end\n  ```\n\n  ## Memory allocation\n  Array allocates contiguous memory. It always allocates at least enough memory\n  space to hold all of its elements. Space is the number of elements the Array\n  can hold without allocating more memory. The `space()` method returns the\n  number of elements an Array can hold. The `size()` method returns the number\n  of elements the Array holds.\n\n  Different data types require different amounts of memory. Array[U64] with size\n  of 6 will take more memory than an Array[U8] of the same size.\n\n  When creating an Array or adding more elements will calculate the next power\n  of 2 of the requested number of elements and allocate that much space, with a\n  lower bound of space for 8 elements.\n\n  Here's a few examples of the space allocated when initialising an Array with\n  various number of elements:\n\n  | size | space |\n  |------|-------|\n  | 0    | 0     |\n  | 1    | 8     |\n  | 8    | 8     |\n  | 9    | 16    |\n  | 16   | 16    |\n  | 17   | 32    |\n\n  Call the `compact()` method to ask the GC to reclaim unused space. There are\n  no guarantees that the GC will actually reclaim any space.\n  \"\"\"\n  var _size: USize\n  var _alloc: USize\n  var _ptr: Pointer[A]\n\n  new create(len: USize = 0) =>\n    \"\"\"\n    Create an array with zero elements, but space for len elements.\n    \"\"\"\n    _size = 0\n\n    if len > 0 then\n      _alloc = len.next_pow2().max(len).max(8)\n      _ptr = Pointer[A]._alloc(_alloc)\n    else\n      _alloc = 0\n      _ptr = Pointer[A]\n    end\n\n  new init(from: A^, len: USize) =>\n    \"\"\"\n    Create an array of len elements, all initialised to the given value.\n    \"\"\"\n    _size = len\n\n    if len > 0 then\n      _alloc = len.next_pow2().max(len).max(8)\n      _ptr = Pointer[A]._alloc(_alloc)\n\n      var i: USize = 0\n\n      while i < len do\n        _ptr._update(i, from)\n        i = i + 1\n      end\n    else\n      _alloc = 0\n      _ptr = Pointer[A]\n    end\n\n  new from_cpointer(ptr: Pointer[A], len: USize, alloc: USize = 0) =>\n    \"\"\"\n    Create an array from a C-style pointer and length. The contents are not\n    copied.\n    \"\"\"\n    _size = len\n\n    if alloc > len then\n      _alloc = alloc\n    else\n      _alloc = len\n    end\n\n    _ptr = ptr\n\n  fun _copy_to(\n    ptr: Pointer[this->A!],\n    copy_len: USize,\n    from_offset: USize = 0,\n    to_offset: USize = 0)\n  =>\n    \"\"\"\n    Copy copy_len elements from this to that at specified offsets.\n    \"\"\"\n    _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len)\n\n  fun cpointer(offset: USize = 0): Pointer[A] tag =>\n    \"\"\"\n    Return the underlying C-style pointer.\n    \"\"\"\n    _ptr._offset(offset)\n\n  fun size(): USize =>\n    \"\"\"\n    The number of elements in the array.\n    \"\"\"\n    _size\n\n  fun space(): USize =>\n    \"\"\"\n    The available space in the array.\n    \"\"\"\n    _alloc\n\n  fun ref reserve(len: USize) =>\n    \"\"\"\n    Reserve space for len elements, including whatever elements are already in\n    the array. Array space grows geometrically.\n    \"\"\"\n    if _alloc < len then\n      _alloc = len.next_pow2().max(len).max(8)\n      _ptr = _ptr._realloc(_alloc)\n    end\n\n  fun ref compact() =>\n    \"\"\"\n    Try to remove unused space, making it available for garbage collection. The\n    request may be ignored.\n    \"\"\"\n    if _size <= (512 / _ptr._element_size()) then\n      if _size.next_pow2() != _alloc.next_pow2() then\n        _alloc = _size.next_pow2()\n        let old_ptr = _ptr = Pointer[A]._alloc(_alloc)\n        old_ptr._copy_to(_ptr._convert[A!](), _size)\n      end\n    elseif _size < _alloc then\n      _alloc = _size\n      let old_ptr = _ptr = Pointer[A]._alloc(_alloc)\n      old_ptr._copy_to(_ptr._convert[A!](), _size)\n    end\n\n  fun ref undefined[B: (A & Real[B] val & Number) = A](len: USize) =>\n    \"\"\"\n    Resize to len elements, populating previously empty elements with random\n    memory. This is only allowed for an array of numbers.\n    \"\"\"\n    reserve(len)\n    _size = len\n\n  fun apply(i: USize): this->A ? =>\n    \"\"\"\n    Get the i-th element, raising an error if the index is out of bounds.\n    \"\"\"\n    if i < _size then\n      _ptr._apply(i)\n    else\n      error\n    end\n\n  fun ref update(i: USize, value: A): A^ ? =>\n    \"\"\"\n    Change the i-th element, raising an error if the index is out of bounds.\n    \"\"\"\n    if i < _size then\n      _ptr._update(i, consume value)\n    else\n      error\n    end\n\n  fun ref insert(i: USize, value: A) ? =>\n    \"\"\"\n    Insert an element into the array. Elements after this are moved up by one\n    index, extending the array.\n    An out of bounds index raises an error.\n    \"\"\"\n    if i <= _size then\n      reserve(_size + 1)\n      _ptr._offset(i)._insert(1, _size - i)\n      _ptr._update(i, consume value)\n      _size = _size + 1\n    else\n      error\n    end\n\n  fun ref delete(i: USize): A^ ? =>\n    \"\"\"\n    Delete an element from the array. Elements after this are moved down by one\n    index, compacting the array.\n    An out of bounds index raises an error.\n    The deleted element is returned.\n    \"\"\"\n    if i < _size then\n      _size = _size - 1\n      _ptr._offset(i)._delete(1, _size - i)\n    else\n      error\n    end\n\n  fun ref truncate(len: USize) =>\n    \"\"\"\n    Truncate an array to the given length, discarding excess elements. If the\n    array is already smaller than len, do nothing.\n    \"\"\"\n    _size = _size.min(len)\n\n  fun ref trim_in_place(from: USize = 0, to: USize = -1) =>\n    \"\"\"\n    Trim the array to a portion of itself, covering `from` until `to`.\n    Unlike slice, the operation does not allocate a new array nor copy elements.\n    \"\"\"\n    let last = _size.min(to)\n    let offset = last.min(from)\n    let size' = last - offset\n\n    // use the new size' for alloc if we're not including the last used byte\n    // from the original data and only include the extra allocated bytes if\n    // we're including the last byte.\n    _alloc = if last == _size then _alloc - offset else size' end\n\n    _size = size'\n\n    // if _alloc == 0 then we've trimmed all the memory originally allocated.\n    // if we do _ptr._offset, we will spill into memory not allocated/owned\n    // by this array and could potentially cause a segfault if we cross\n    // a pagemap boundary into a pagemap address that hasn't been allocated\n    // yet when `reserve` is called next.\n    if _alloc == 0 then\n      _ptr = Pointer[A]\n    else\n      _ptr = _ptr._offset(offset)\n    end\n\n  fun val trim(from: USize = 0, to: USize = -1): Array[A] val =>\n    \"\"\"\n    Return a shared portion of this array, covering `from` until `to`.\n    Both the original and the new array are immutable, as they share memory.\n    The operation does not allocate a new array pointer nor copy elements.\n    \"\"\"\n    let last = _size.min(to)\n    let offset = last.min(from)\n\n    recover\n      let size' = last - offset\n\n      // use the new size' for alloc if we're not including the last used byte\n      // from the original data and only include the extra allocated bytes if\n      // we're including the last byte.\n      let alloc = if last == _size then _alloc - offset else size' end\n\n      if size' > 0 then\n        from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc)\n      else\n        create()\n      end\n    end\n\n  fun iso chop(split_point: USize): (Array[A] iso^, Array[A] iso^) =>\n    \"\"\"\n    Chops the array in half at the split point requested and returns both\n    the left and right portions. The original array is trimmed in place and\n    returned as the right portion. If the split point is larger than the\n    array, the left portion is the original array and the right portion\n    is a new empty array.\n    Both arrays are isolated and mutable, as they do not share memory.\n    The operation does not allocate a new array pointer nor copy elements.\n    \"\"\"\n    let start_ptr = _ptr\n    let size' = _size.min(split_point)\n    let alloc = if size' == _size then _alloc else split_point end\n\n    trim_in_place(split_point)\n\n    let left = recover\n      if size' > 0 then\n        from_cpointer(start_ptr._unsafe(), size', alloc)\n      else\n        create()\n      end\n    end\n\n    (consume left, consume this)\n\n  fun copy_to(\n    dst: Array[this->A!],\n    src_idx: USize,\n    dst_idx: USize,\n    len: USize)\n  =>\n    \"\"\"\n    Copy len elements from this(src_idx) to dst(dst_idx).\n    \"\"\"\n    dst.reserve(dst_idx + len)\n    _ptr._offset(src_idx)._copy_to(dst._ptr._offset(dst_idx), len)\n\n    if dst._size < (dst_idx + len) then\n      dst._size = dst_idx + len\n    end\n\n  fun ref remove(i: USize, n: USize) =>\n    \"\"\"\n    Remove n elements from the array, beginning at index i.\n    \"\"\"\n    if i < _size then\n      let count = n.min(_size - i)\n      _size = _size - count\n      _ptr._offset(i)._delete(count, _size - i)\n    end\n\n  fun ref clear() =>\n    \"\"\"\n    Remove all elements from the array.\n    \"\"\"\n    _size = 0\n\n  fun ref push(value: A) =>\n    \"\"\"\n    Add an element to the end of the array.\n    \"\"\"\n    reserve(_size + 1)\n    _ptr._update(_size, consume value)\n    _size = _size + 1\n\n  fun ref pop(): A^ ? =>\n    \"\"\"\n    Remove an element from the end of the array.\n    The removed element is returned.\n    \"\"\"\n    delete(_size - 1)?\n\n  fun ref unshift(value: A) =>\n    \"\"\"\n    Add an element to the beginning of the array.\n    \"\"\"\n    try\n      insert(0, consume value)?\n    end\n\n  fun ref shift(): A^ ? =>\n    \"\"\"\n    Remove an element from the beginning of the array.\n    The removed element is returned.\n    \"\"\"\n    delete(0)?\n\n  fun ref append(\n    seq: (ReadSeq[A] & ReadElement[A^]),\n    offset: USize = 0,\n    len: USize = -1)\n  =>\n    \"\"\"\n    Append the elements from a sequence, starting from the given offset.\n    \"\"\"\n    if offset >= seq.size() then\n      return\n    end\n\n    let copy_len = len.min(seq.size() - offset)\n    reserve(_size + copy_len)\n\n    var n = USize(0)\n\n    try\n      while n < copy_len do\n        _ptr._update(_size + n, seq(offset + n)?)\n\n        n = n + 1\n      end\n    end\n\n    _size = _size + n\n\n  fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) =>\n    \"\"\"\n    Add len iterated elements to the end of the array, starting from the given\n    offset.\n    \"\"\"\n\n    var n = USize(0)\n\n    try\n      while n < offset do\n        if iter.has_next() then\n          iter.next()?\n        else\n          return\n        end\n\n        n = n + 1\n      end\n    end\n\n    n = 0\n\n    // If a concrete len is specified, we take the caller at their word\n    // and reserve that much space, even though we can't verify that the\n    // iterator actually has that many elements available. Reserving ahead\n    // of time lets us take a fast path of direct pointer access.\n    if len != -1 then\n      reserve(_size + len)\n\n      try\n        while n < len do\n          if iter.has_next() then\n            _ptr._update(_size + n, iter.next()?)\n          else\n            break\n          end\n\n          n = n + 1\n        end\n      end\n\n      _size = _size + n\n    else\n      try\n        while n < len do\n          if iter.has_next() then\n            push(iter.next()?)\n          else\n            break\n          end\n\n          n = n + 1\n        end\n      end\n    end\n\n  fun find(\n    value: A!,\n    offset: USize = 0,\n    nth: USize = 0,\n    predicate: {(box->A!, box->A!): Bool} val = {(l, r) => l is r })\n    : USize ?\n  =>\n    \"\"\"\n    Find the `nth` appearance of `value` from the beginning of the array,\n    starting at `offset` and examining higher indices, and using the supplied\n    `predicate` for comparisons. Returns the index of the value, or raise an\n    error if the value isn't present.\n\n    By default, the search starts at the first element of the array, returns\n    the first instance of `value` found, and uses object identity for\n    comparison.\n    \"\"\"\n    var i = offset\n    var n = USize(0)\n\n    while i < _size do\n      if predicate(_ptr._apply(i), value) then\n        if n == nth then\n          return i\n        end\n\n        n = n + 1\n      end\n\n      i = i + 1\n    end\n\n    error\n\n  fun contains(\n    value: A!,\n    predicate: {(box->A!, box->A!): Bool} val =\n      {(l: box->A!, r: box->A!): Bool => l is r })\n    : Bool\n  =>\n    \"\"\"\n    Returns true if the array contains `value`, false otherwise.\n\n    The default predicate checks for matches by identity. To search for matches\n    by structural equality, pass an object literal such as `{(l, r) => l == r}`.\n    \"\"\"\n    var i = USize(0)\n\n    while i < _size do\n      if predicate(_ptr._apply(i), value) then\n        return true\n      end\n\n      i = i + 1\n    end\n    false\n\n  fun rfind(\n    value: A!,\n    offset: USize = -1,\n    nth: USize = 0,\n    predicate: {(box->A!, box->A!): Bool} val =\n      {(l: box->A!, r: box->A!): Bool => l is r })\n    : USize ?\n  =>\n    \"\"\"\n    Find the `nth` appearance of `value` from the end of the array, starting at\n    `offset` and examining lower indices, and using the supplied `predicate` for\n    comparisons. Returns the index of the value, or raise an error if the value\n    isn't present.\n\n    By default, the search starts at the last element of the array, returns the\n    first instance of `value` found, and uses object identity for comparison.\n    \"\"\"\n    if _size > 0 then\n      var i = if offset >= _size then _size - 1 else offset end\n      var n = USize(0)\n\n      repeat\n        if predicate(_ptr._apply(i), value) then\n          if n == nth then\n            return i\n          end\n\n          n = n + 1\n        end\n      until (i = i - 1) == 0\n      end\n    end\n\n    error\n\n  fun clone(): Array[this->A!]^ =>\n    \"\"\"\n    Clone the array.\n    The new array contains references to the same elements that the old array\n    contains, the elements themselves are not cloned.\n    \"\"\"\n    let out = Array[this->A!](_size)\n    _ptr._copy_to(out._ptr, _size)\n    out._size = _size\n    out\n\n  fun slice(\n    from: USize = 0,\n    to: USize = -1,\n    step: USize = 1)\n    : Array[this->A!]^\n  =>\n    \"\"\"\n    Create a new array that is a clone of a portion of this array. The range is\n    exclusive and saturated.\n    The new array contains references to the same elements that the old array\n    contains, the elements themselves are not cloned.\n    \"\"\"\n    let out = Array[this->A!]\n    let last = _size.min(to)\n    let len = last - from\n\n    if (last > from) and (step > 0) then\n      out.reserve((len + (step - 1)) / step)\n\n      if step == 1 then\n        copy_to(out, from, 0, len)\n      else\n        try\n          var i = from\n\n          while i < last do\n            out.push(this(i)?)\n            i = i + step\n          end\n        end\n      end\n    end\n\n    out\n\n  fun permute(indices: Iterator[USize]): Array[this->A!]^ ? =>\n    \"\"\"\n    Create a new array with the elements permuted.\n    Permute to an arbitrary order that may include duplicates. An out of bounds\n    index raises an error.\n    The new array contains references to the same elements that the old array\n    contains, the elements themselves are not copied.\n    \"\"\"\n    let out = Array[this->A!]\n    for i in indices do\n      out.push(this(i)?)\n    end\n    out\n\n  fun reverse(): Array[this->A!]^ =>\n    \"\"\"\n    Create a new array with the elements in reverse order.\n    The new array contains references to the same elements that the old array\n    contains, the elements themselves are not copied.\n    \"\"\"\n    clone() .> reverse_in_place()\n\n  fun ref reverse_in_place() =>\n    \"\"\"\n    Reverse the array in place.\n    \"\"\"\n    if _size > 1 then\n      var i: USize = 0\n      var j = _size - 1\n\n      while i < j do\n        let x = _ptr._apply(i)\n        _ptr._update(i, _ptr._apply(j))\n        _ptr._update(j, x)\n        i = i + 1\n        j = j - 1\n      end\n    end\n\n  fun ref swap_elements(i: USize, j: USize) ? =>\n    \"\"\"\n    Swap the element at index i with the element at index j.\n    If either i or j are out of bounds, an error is raised.\n    \"\"\"\n    if (i >= _size) or (j >= _size) then error end\n\n    let x = _ptr._apply(i)\n    _ptr._update(i, _ptr._apply(j))\n    _ptr._update(j, consume x)\n\n  fun keys(): ArrayKeys[A, this->Array[A]]^ =>\n    \"\"\"\n    Return an iterator over the indices in the array.\n    \"\"\"\n    ArrayKeys[A, this->Array[A]](this)\n\n  fun values(): ArrayValues[A, this->Array[A]]^ =>\n    \"\"\"\n    Return an iterator over the values in the array.\n    \"\"\"\n    ArrayValues[A, this->Array[A]](this)\n\n  fun pairs(): ArrayPairs[A, this->Array[A]]^ =>\n    \"\"\"\n    Return an iterator over the (index, value) pairs in the array.\n    \"\"\"\n    ArrayPairs[A, this->Array[A]](this)\n\nclass ArrayKeys[A, B: Array[A] #read] is Iterator[USize]\n  let _array: B\n  var _i: USize\n\n  new create(array: B) =>\n    _array = array\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _array.size()\n\n  fun ref next(): USize =>\n    if _i < _array.size() then\n      _i = _i + 1\n    else\n      _i\n    end\n\nclass ArrayValues[A, B: Array[A] #read] is Iterator[B->A]\n  let _array: B\n  var _i: USize\n\n  new create(array: B) =>\n    _array = array\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _array.size()\n\n  fun ref next(): B->A ? =>\n    _array(_i = _i + 1)?\n\n  fun ref rewind(): ArrayValues[A, B] =>\n    _i = 0\n    this\n\nclass ArrayPairs[A, B: Array[A] #read] is Iterator[(USize, B->A)]\n  let _array: B\n  var _i: USize\n\n  new create(array: B) =>\n    _array = array\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _array.size()\n\n  fun ref next(): (USize, B->A) ? =>\n    (_i, _array(_i = _i + 1)?)",
            "title": "array.pony"
        },
        {
            "location": "/src/builtin/any/",
            "text": "interface tag Any",
            "title": "any.pony"
        },
        {
            "location": "/src/builtin/ambient_auth/",
            "text": "primitive AmbientAuth\n  \"\"\"\n  This type represents the root capability. When a Pony program starts, the\n  Env passed to the Main actor contains an instance of the root capability.\n\n  Ambient access to the root capability is denied outside of the builtin\n  package. Inside the builtin package, only Env creates a Root.\n\n  The root capability can be used by any package that wants to establish a\n  principle of least authority. A typical usage is to have a parameter on a\n  constructor for some resource that expects a limiting capability specific to\n  the package, but will also accept the root capability as representing\n  unlimited access.\n  \"\"\"\n  new _create() =>\n    None",
            "title": "ambient_auth.pony"
        },
        {
            "location": "/src/collections/sort/",
            "text": "primitive Sort[A: Seq[B] ref, B: Comparable[B] #read]\n  \"\"\"\n  Implementation of dual-pivot quicksort.\n  \"\"\"\n  fun apply(a: A): A^ =>\n    \"\"\"\n    Sort the given seq.\n    \"\"\"\n    try _sort(a, 0, a.size().isize() - 1)? end\n    a\n\n  fun _sort(a: A, lo: ISize, hi: ISize) ? =>\n    if hi <= lo then return end\n    // choose outermost elements as pivots\n    if a(lo.usize())? > a(hi.usize())? then _swap(a, lo, hi)? end\n    (var p, var q) = (a(lo.usize())?, a(hi.usize())?)\n    // partition according to invariant\n    (var l, var g) = (lo + 1, hi - 1)\n    var k = l\n    while k <= g do\n      if a(k.usize())? < p then\n        _swap(a, k, l)?\n        l = l + 1\n      elseif a(k.usize())? >= q then\n        while (a(g.usize())? > q) and (k < g) do g = g - 1 end\n        _swap(a, k, g)?\n        g = g - 1\n        if a(k.usize())? < p then\n          _swap(a, k, l)?\n          l = l + 1\n        end\n      end\n      k = k + 1\n    end\n    (l, g) = (l - 1, g + 1)\n    // swap pivots to final positions\n    _swap(a, lo, l)?\n    _swap(a, hi, g)?\n    // recursively sort 3 partitions\n    _sort(a, lo, l - 1)?\n    _sort(a, l + 1, g - 1)?\n    _sort(a, g + 1, hi)?\n\n  fun _swap(a: A, i: ISize, j: ISize) ? =>\n    a(j.usize())? = a(i.usize())? = a(j.usize())?",
            "title": "sort.pony"
        },
        {
            "location": "/src/collections/set/",
            "text": "type Set[A: (Hashable #read & Equatable[A] #read)] is HashSet[A, HashEq[A]]\n\ntype SetIs[A] is HashSet[A, HashIs[A!]]\n\nclass HashSet[A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box]\n  \"\"\"\n  A set, built on top of a HashMap. This is implemented as map of an alias of\n  a type to itself\n  \"\"\"\n  embed _map: HashMap[A!, A, H]\n\n  new create(prealloc: USize = 8) =>\n    \"\"\"\n    Defaults to a prealloc of 8.\n    \"\"\"\n    _map = _map.create(prealloc)\n\n  fun size(): USize =>\n    \"\"\"\n    The number of items in the set.\n    \"\"\"\n    _map.size()\n\n  fun space(): USize =>\n    \"\"\"\n    The available space in the set.\n    \"\"\"\n    _map.space()\n\n  fun apply(value: box->A!): this->A ? =>\n    \"\"\"\n    Return the value if its in the set, otherwise raise an error.\n    \"\"\"\n    _map(value)?\n\n  fun contains(value: box->A!): Bool =>\n    \"\"\"\n    Checks whether the set contains the value.\n    \"\"\"\n    _map.contains(value)\n\n  fun ref clear() =>\n    \"\"\"\n    Remove all elements from the set.\n    \"\"\"\n    _map.clear()\n\n  fun ref set(value: A) =>\n    \"\"\"\n    Add a value to the set.\n    \"\"\"\n    _map(value) = consume value\n\n  fun ref unset(value: box->A!) =>\n    \"\"\"\n    Remove a value from the set.\n    \"\"\"\n    try _map.remove(value)? end\n\n  fun ref extract(value: box->A!): A^ ? =>\n    \"\"\"\n    Remove a value from the set and return it. Raises an error if the value\n    wasn't in the set.\n    \"\"\"\n    _map.remove(value)?._2\n\n  fun ref union(that: Iterator[A^]) =>\n    \"\"\"\n    Add everything in that to the set.\n    \"\"\"\n    for value in that do\n      set(consume value)\n    end\n\n  fun ref intersect[K: HashFunction[box->A!] val = H](\n    that: HashSet[box->A!, K])\n  =>\n    \"\"\"\n    Remove everything that isn't in that.\n    \"\"\"\n    let start_size = _map.size()\n    var seen: USize = 0\n    var i: USize = -1\n\n    while seen < start_size do\n      try\n        i = next_index(i)?\n        if not that.contains(index(i)?) then\n          unset(index(i)?)\n        end\n      end\n      seen = seen + 1\n    end\n\n  fun ref difference(that: Iterator[A^]) =>\n    \"\"\"\n    Remove elements in this which are also in that. Add elements in that which\n    are not in this.\n    \"\"\"\n    for value in that do\n      try\n        extract(value)?\n      else\n        set(consume value)\n      end\n    end\n\n  fun ref remove(that: Iterator[box->A!]) =>\n    \"\"\"\n    Remove everything that is in that.\n    \"\"\"\n    for value in that do\n      unset(value)\n    end\n\n  fun add[K: HashFunction[this->A!] val = H](\n    value: this->A!)\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Add a value to the set.\n    \"\"\"\n    clone[K]() .> set(value)\n\n  fun sub[K: HashFunction[this->A!] val = H](\n    value: box->this->A!)\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Remove a value from the set.\n    \"\"\"\n    clone[K]() .> unset(value)\n\n  fun op_or[K: HashFunction[this->A!] val = H](\n    that: this->HashSet[A, H])\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Create a set with the elements of both this and that.\n    \"\"\"\n    let r = clone[K]()\n\n    for value in that.values() do\n      r.set(value)\n    end\n    r\n\n  fun op_and[K: HashFunction[this->A!] val = H](\n    that: this->HashSet[A, H])\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Create a set with the elements that are in both this and that.\n    \"\"\"\n    let r = HashSet[this->A!, K](size().min(that.size()))\n\n    for value in values() do\n      try\n        that(value)?\n        r.set(value)\n      end\n    end\n    r\n\n  fun op_xor[K: HashFunction[this->A!] val = H](\n    that: this->HashSet[A, H])\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Create a set with the elements that are in either set but not both.\n    \"\"\"\n    let r = HashSet[this->A!, K](size().max(that.size()))\n\n    for value in values() do\n      try\n        that(value)?\n      else\n        r.set(value)\n      end\n    end\n\n    for value in that.values() do\n      try\n        this(value)?\n      else\n        r.set(value)\n      end\n    end\n    r\n\n  fun without[K: HashFunction[this->A!] val = H](\n    that: this->HashSet[A, H])\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Create a set with the elements of this that are not in that.\n    \"\"\"\n    let r = HashSet[this->A!, K](size())\n\n    for value in values() do\n      try\n        that(value)?\n      else\n        r.set(value)\n      end\n    end\n    r\n\n  fun clone[K: HashFunction[this->A!] val = H](): HashSet[this->A!, K]^ =>\n    \"\"\"\n    Create a clone. The element type may be different due to aliasing and\n    viewpoint adaptation.\n    \"\"\"\n    let r = HashSet[this->A!, K](size())\n\n    for value in values() do\n      r.set(value)\n    end\n    r\n\n  fun eq(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if the sets contain the same elements.\n    \"\"\"\n    (size() == that.size()) and (this <= that)\n\n  fun ne(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns false if the sets contain the same elements.\n    \"\"\"\n    not (this == that)\n\n  fun lt(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if every element in this is also in that, and this has fewer\n    elements than that.\n    \"\"\"\n    (size() < that.size()) and (this <= that)\n\n  fun le(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if every element in this is also in that.\n    \"\"\"\n    try\n      for value in values() do\n        that(value)?\n      end\n      true\n    else\n      false\n    end\n\n  fun gt(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if every element in that is also in this, and this has more\n    elements than that.\n    \"\"\"\n    (size() > that.size()) and (that <= this)\n\n  fun ge(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if every element in that is also in this.\n    \"\"\"\n    that <= this\n\n  fun next_index(prev: USize = -1): USize ? =>\n    \"\"\"\n    Given an index, return the next index that has a populated value. Raise an\n    error if there is no next populated index.\n    \"\"\"\n    _map.next_index(prev)?\n\n  fun index(i: USize): this->A ? =>\n    \"\"\"\n    Returns the value at a given index. Raise an error if the index is not\n    populated.\n    \"\"\"\n    _map.index(i)?._2\n\n  fun values(): SetValues[A, H, this->HashSet[A, H]]^ =>\n    \"\"\"\n    Return an iterator over the values.\n    \"\"\"\n    SetValues[A, H, this->HashSet[A, H]](this)\n\nclass SetValues[A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S->A]\n  \"\"\"\n  An iterator over the values in a set.\n  \"\"\"\n  let _set: S\n  var _i: USize = -1\n  var _count: USize = 0\n\n  new create(set: S) =>\n    \"\"\"\n    Creates an iterator for the given set.\n    \"\"\"\n    _set = set\n\n  fun has_next(): Bool =>\n    \"\"\"\n    True if it believes there are remaining entries. May not be right if values\n    were added or removed from the set.\n    \"\"\"\n    _count < _set.size()\n\n  fun ref next(): S->A ? =>\n    \"\"\"\n    Returns the next value, or raises an error if there isn't one. If values\n    are added during iteration, this may not return all values.\n    \"\"\"\n    _i = _set.next_index(_i)?\n    _count = _count + 1\n    _set.index(_i)?",
            "title": "set.pony"
        },
        {
            "location": "/src/collections/ring_buffer/",
            "text": "class RingBuffer[A]\n  \"\"\"\n  A ring buffer.\n  \"\"\"\n  embed _array: Array[A]\n  let _mod: USize\n  var _write: USize = 0\n\n  new create(len: USize) =>\n    \"\"\"\n    Create a ring buffer with a fixed size. The size will be rounded up to the\n    next power of 2.\n    \"\"\"\n    let n = len.max(2).next_pow2()\n    _mod = n - 1\n    _array = Array[A](n)\n\n  fun head(): USize ? =>\n    \"\"\"\n    The first read that will succeed. If nothing has been written to the ring,\n    this will raise an error.\n    \"\"\"\n    if _write > 0 then\n      if _write > space() then\n        _write - space()\n      else\n        0\n      end\n    else\n      error\n    end\n\n  fun size(): USize =>\n    \"\"\"\n    The number of elements that have been added to the ring.\n    \"\"\"\n    _write\n\n  fun space(): USize =>\n    \"\"\"\n    The available space in the ring.\n    \"\"\"\n    _mod + 1\n\n  fun apply(i: USize): this->A ? =>\n    \"\"\"\n    Get the i-th element from the ring. If the i-th element has not yet been\n    added or is no longer available, this will raise an error.\n    \"\"\"\n    if (i >= _write) or ((_write - i) > space()) then\n      error\n    end\n\n    _array(i and _mod)?\n\n  fun ref push(value: A): Bool =>\n    \"\"\"\n    Add an element to the ring. If the ring is full, this will drop the oldest\n    element in the ring. Returns true if an element was dropped.\n    \"\"\"\n    var full = false\n\n    if _write < space() then\n      _array.push(consume value)\n    else\n      try _array(_write and _mod)? = consume value end\n      full = true\n    end\n\n    _write = _write + 1\n    full\n\n  fun ref clear() =>\n    \"\"\"\n    Clear the queue.\n    \"\"\"\n    _array.clear()\n    _write = 0",
            "title": "ring_buffer.pony"
        },
        {
            "location": "/src/collections/reverse/",
            "text": "class Reverse[A: (Real[A] val & Number) = USize] is Iterator[A]\n  \"\"\"\n  Produces [max, min].\n  \"\"\"\n  let _min: A\n  let _max: A\n  let _dec: A\n  var _idx: A\n\n  new create(max: A, min: A, dec: A = 1) =>\n    _min = min\n    _max = max\n    _dec = dec\n    _idx = max\n\n  fun has_next(): Bool =>\n    (_idx >= _min) and (_idx <= _max)\n\n  fun ref next(): A =>\n    if has_next() then\n      _idx = _idx - _dec\n    else\n      _idx + _dec\n    end\n\n  fun ref rewind() =>\n    _idx = _max",
            "title": "reverse.pony"
        },
        {
            "location": "/src/collections/range/",
            "text": "class Range[A: (Real[A] val & Number) = USize] is Iterator[A]\n  \"\"\"\n  Produces `[min, max)` with a step of `inc` for any `Number` type.\n\n  ```pony\n  // iterating with for-loop\n  for i in Range(0, 10) do\n    env.out.print(i.string())\n  end\n\n  // iterating over Range of U8 with while-loop\n  let range = Range[U8](5, 100, 5)\n  while range.has_next() do\n    handle_u8(range.next())\n  end\n  ```\n\n  Supports `min` being smaller than `max` with negative `inc`\n  but only for signed integer types and floats:\n\n  ```pony\n  var previous = 11\n  for left in Range[I64](10, -5, -1) do\n    if not (left < previous) then\n      error\n    end\n    previous = left\n  end\n  ```\n\n  If the `step` is not moving `min` towards `max` or if it is `0`,\n  the Range is considered infinite and iterating over it\n  will never terminate:\n\n  ```pony\n  let infinite_range1 = Range(0, 1, 0)\n  infinite_range1.is_infinite() == true\n\n  let infinite_range2 = Range[I8](0, 10, -1)\n  for _ in infinite_range2 do\n    env.out.print(\"will this ever end?\")\n    env.err.print(\"no, never!\")\n  end\n  ```\n\n  When using `Range` with  floating point types (`F32` and `F64`)\n  `inc` steps < 1.0 are possible. If any of the arguments contains\n  `NaN`, `+Inf` or `-Inf` the range is considered infinite as operations on\n  any of them won't move `min` towards `max`.\n  The actual values produced by such a `Range` are determined by what IEEE 754\n  defines as the result of `min` + `inc`:\n\n  ```pony\n  for and_a_half in Range[F64](0.5, 100) do\n    handle_half(and_a_half)\n  end\n\n  // this Range will produce 0 at first, then infinitely NaN\n  let nan: F64 = F64(0) / F64(0)\n  for what_am_i in Range[F64](0, 1000, nan) do\n    wild_guess(what_am_i)\n  end\n  ```\n\n  \"\"\"\n  let _min: A\n  let _max: A\n  let _inc: A\n  let _forward: Bool\n  let _infinite: Bool\n  var _idx: A\n\n  new create(min: A, max: A, inc: A = 1) =>\n    _min = min\n    _max = max\n    _inc = inc\n    _idx = min\n    _forward = (_min < _max) and (_inc > 0)\n    let is_float_infinite =\n      iftype A <: FloatingPoint[A] then\n        _min.nan() or _min.infinite()\n          or _max.nan() or _max.infinite()\n          or _inc.nan() or _inc.infinite()\n      else\n        false\n      end\n    _infinite =\n      is_float_infinite\n        or ((_inc == 0) and (min != max))    // no progress\n        or ((_min < _max) and (_inc < 0)) // progress into other directions\n        or ((_min > _max) and (_inc > 0))\n\n  fun has_next(): Bool =>\n    if _forward then\n      _idx < _max\n    else\n      _idx > _max\n    end\n\n  fun ref next(): A =>\n    if has_next() then\n      _idx = _idx + _inc\n    else\n      _idx\n    end\n\n  fun ref rewind() =>\n    _idx = _min\n\n  fun is_infinite(): Bool =>\n    _infinite",
            "title": "range.pony"
        },
        {
            "location": "/src/collections/map/",
            "text": "primitive _MapEmpty\nprimitive _MapDeleted\n\ntype Map[K: (Hashable #read & Equatable[K] #read), V] is\n  HashMap[K, V, HashEq[K]]\n  \"\"\"\n  This is a map that uses structural equality on the key.\n  \"\"\"\n\ntype MapIs[K, V] is HashMap[K, V, HashIs[K]]\n  \"\"\"\n  This is a map that uses identity comparison on the key.\n  \"\"\"\n\nclass HashMap[K, V, H: HashFunction[K] val]\n  \"\"\"\n  A quadratic probing hash map. Resize occurs at a load factor of 0.75. A\n  resized map has 2 times the space. The hash function can be plugged in to the\n  type to create different kinds of maps.\n  \"\"\"\n  var _size: USize = 0\n  var _array: Array[((K, V) | _MapEmpty | _MapDeleted)]\n\n  new create(prealloc: USize = 6) =>\n    \"\"\"\n    Create an array with space for prealloc elements without triggering a\n    resize. Defaults to 6.\n    \"\"\"\n    let len = (prealloc * 4) / 3\n    let n = len.max(8).next_pow2()\n    _array = _array.init(_MapEmpty, n)\n\n  fun size(): USize =>\n    \"\"\"\n    The number of items in the map.\n    \"\"\"\n    _size\n\n  fun space(): USize =>\n    \"\"\"\n    The available space in the map. Resize will happen when\n    size / space >= 0.75.\n    \"\"\"\n    _array.space()\n\n  fun apply(key: box->K!): this->V ? =>\n    \"\"\"\n    Gets a value from the map. Raises an error if no such item exists.\n    \"\"\"\n    (let i, let found) = _search(key)\n\n    if found then\n      _array(i)? as (_, this->V)\n    else\n      error\n    end\n\n  fun ref update(key: K, value: V): (V^ | None) =>\n    \"\"\"\n    Sets a value in the map. Returns the old value if there was one, otherwise\n    returns None. If there was no previous value, this may trigger a resize.\n    \"\"\"\n    try\n      (let i, let found) = _search(key)\n\n      let k = if found then\n        _array(i)? as (K^, _)\n      else\n        consume key\n      end\n      match _array(i)? = (consume k, consume value)\n      | (_, let v: V) =>\n        return consume v\n      else\n        _size = _size + 1\n\n        if (_size * 4) > (_array.size() * 3) then\n          _resize(_array.size() * 2)\n        end\n      end\n    end\n\n  fun ref upsert(key: K, value: V, f: {(V, V): V^} box): V ? =>\n    \"\"\"\n    Combines a provided value with the current value for the provided key\n    using the provided function. If the provided key has not been added to\n    the map yet, it sets its value to the provided value.\n\n    As a simple example, say we had a map with I64 values and we wanted to\n    add 4 to the current value for key \"test\", which let's say is currently 2.\n    We call\n\n    m.upsert(\"test\", 4, {(x, y) => x - y })\n\n    This changes the value associated with \"test\" to -2.\n\n    If we have not yet added the key \"new-key\" to the map and we call\n\n    m.upsert(\"new-key\", 4, {(x, y) => x - y })\n\n    then \"new-key\" is added to the map with a value of -4.\n\n    Returns the value that we set the key to\n    \"\"\"\n\n    (let i, let found) = _search(key)\n\n    try\n      if found then\n        (let pkey, let pvalue) = (_array(i)? = _MapEmpty) as (K^, V^)\n        _array(i)? = (consume pkey, f(consume pvalue, consume value))\n      else\n        let key' = key\n        _array(i)? = (consume key, consume value)\n        _size = _size + 1\n\n        if (_size * 4) > (_array.size() * 3) then\n          _resize(_array.size() * 2)\n          return this(key')?\n        end\n      end\n\n      return _array(i)? as (_, V)\n    else\n      error\n    end\n\n  fun ref insert(key: K, value: V): V ? =>\n    \"\"\"\n    Set a value in the map. Returns the new value, allowing reuse.\n    \"\"\"\n    try\n      (let i, let found) = _search(key)\n      let key' = key\n      _array(i)? = (consume key, consume value)\n\n      if not found then\n        _size = _size + 1\n\n        if (_size * 4) > (_array.size() * 3) then\n          _resize(_array.size() * 2)\n          return this(key')?\n        end\n      end\n\n      _array(i)? as (_, V)\n    else\n      // This is unreachable, since index will never be out-of-bounds.\n      error\n    end\n\n  fun ref insert_if_absent(key: K, value: V): V ? =>\n    \"\"\"\n    Set a value in the map if the key doesn't already exist in the Map.\n    Saves an extra lookup when doing a pattern like:\n\n    ```pony\n    if not my_map.contains(my_key) then\n      my_map(my_key) = my_value\n    end\n    ```\n\n    Returns the value, the same as `insert`, allowing 'insert_if_absent'\n    to be used as a drop-in replacement for `insert`.\n    \"\"\"\n    try\n      (let i, let found) = _search(key)\n      let key' = key\n\n      if not found then\n        _array(i)? = (consume key, consume value)\n\n        _size = _size + 1\n\n        if (_size * 4) > (_array.size() * 3) then\n          _resize(_array.size() * 2)\n          return this(key')?\n        end\n      end\n\n      _array(i)? as (_, V)\n    else\n      // This is unreachable, since index will never be out-of-bounds.\n      error\n    end\n\n  fun ref remove(key: box->K!): (K^, V^) ? =>\n    \"\"\"\n    Delete a value from the map and return it. Raises an error if there was no\n    value for the given key.\n    \"\"\"\n    try\n      (let i, let found) = _search(key)\n\n      if found then\n        _size = _size - 1\n\n        match _array(i)? = _MapDeleted\n        | (let k: K, let v: V) =>\n          return (consume k, consume v)\n        end\n      end\n    end\n    error\n\n  fun get_or_else(key: box->K!, alt: this->V): this->V =>\n    \"\"\"\n    Get the value associated with provided key if present. Otherwise,\n    return the provided alternate value.\n    \"\"\"\n    (let i, let found) = _search(key)\n\n    if found then\n      try\n        _array(i)? as (_, this->V)\n      else\n        // This should never happen as we have already\n        // proven that _array(i) exists\n        consume alt\n      end\n    else\n      consume alt\n    end\n\n  fun contains(k: box->K!): Bool =>\n    \"\"\"\n    Checks whether the map contains the key k\n    \"\"\"\n    (_, let found) = _search(k)\n    found\n\n  fun ref concat(iter: Iterator[(K^, V^)]) =>\n    \"\"\"\n    Add K, V pairs from the iterator to the map.\n    \"\"\"\n    for (k, v) in iter do\n      this(consume k) = consume v\n    end\n\n  fun add[H2: HashFunction[this->K!] val = H](\n    key: this->K!,\n    value: this->V!)\n    : HashMap[this->K!, this->V!, H2]^\n  =>\n    \"\"\"\n    This with the new (key, value) mapping.\n    \"\"\"\n    let r = clone[H2]()\n    r(key) = value\n    r\n\n  fun sub[H2: HashFunction[this->K!] val = H](\n    key: this->K!,\n    value: this->V!)\n    : HashMap[this->K!, this->V!, H2]^\n  =>\n    \"\"\"\n    This without the given key.\n    \"\"\"\n    let r = clone[H2]()\n    try r.remove(key)? end\n    r\n\n  fun next_index(prev: USize = -1): USize ? =>\n    \"\"\"\n    Given an index, return the next index that has a populated key and value.\n    Raise an error if there is no next populated index.\n    \"\"\"\n    for i in Range(prev + 1, _array.size()) do\n      match _array(i)?\n      | (_, _) => return i\n      end\n    end\n    error\n\n  fun index(i: USize): (this->K, this->V) ? =>\n    \"\"\"\n    Returns the key and value at a given index.\n    Raise an error if the index is not populated.\n    \"\"\"\n    _array(i)? as (this->K, this->V)\n\n  fun ref compact() =>\n    \"\"\"\n    Minimise the memory used for the map.\n    \"\"\"\n    _resize(((_size * 4) / 3).next_pow2().max(8))\n\n  fun clone[H2: HashFunction[this->K!] val = H]()\n    : HashMap[this->K!, this->V!, H2]^\n  =>\n    \"\"\"\n    Create a clone. The key and value types may be different due to aliasing\n    and viewpoint adaptation.\n    \"\"\"\n    let r = HashMap[this->K!, this->V!, H2](_size)\n\n    for (k, v) in pairs() do\n      r(k) = v\n    end\n    r\n\n  fun ref clear() =>\n    \"\"\"\n    Remove all entries.\n    \"\"\"\n    _size = 0\n    // Our default prealloc of 6 corresponds to an array alloc size of 8.\n    let n: USize = 8\n    _array = _array.init(_MapEmpty, n)\n\n  fun _search(key: box->K!): (USize, Bool) =>\n    \"\"\"\n    Return a slot number and whether or not it's currently occupied.\n    \"\"\"\n    var idx_del = _array.size()\n    let mask = idx_del - 1\n    let h = H.hash(key).usize()\n    var idx = h and mask\n\n    try\n      for i in Range(0, _array.size()) do\n        let entry = _array(idx)?\n\n        match entry\n        | (let k: this->K!, _) =>\n          if H.eq(k, key) then\n            return (idx, true)\n          end\n        | _MapEmpty =>\n          if idx_del <= mask then\n            return (idx_del, false)\n          else\n            return (idx, false)\n          end\n        | _MapDeleted =>\n          if idx_del > mask then\n            idx_del = idx\n          end\n        end\n\n        idx = (h + ((i + (i * i)) / 2)) and mask\n      end\n    end\n\n    (idx_del, false)\n\n  fun ref _resize(len: USize) =>\n    \"\"\"\n    Change the available space.\n    \"\"\"\n    let old = _array\n    let old_len = old.size()\n\n    _array = _array.init(_MapEmpty, len)\n    _size = 0\n\n    try\n      for i in Range(0, old_len) do\n        match old(i)? = _MapDeleted\n        | (let k: K, let v: V) =>\n          this(consume k) = consume v\n        end\n      end\n    end\n\n  fun keys(): MapKeys[K, V, H, this->HashMap[K, V, H]]^ =>\n    \"\"\"\n    Return an iterator over the keys.\n    \"\"\"\n    MapKeys[K, V, H, this->HashMap[K, V, H]](this)\n\n  fun values(): MapValues[K, V, H, this->HashMap[K, V, H]]^ =>\n    \"\"\"\n    Return an iterator over the values.\n    \"\"\"\n    MapValues[K, V, H, this->HashMap[K, V, H]](this)\n\n  fun pairs(): MapPairs[K, V, H, this->HashMap[K, V, H]]^ =>\n    \"\"\"\n    Return an iterator over the keys and values.\n    \"\"\"\n    MapPairs[K, V, H, this->HashMap[K, V, H]](this)\n\nclass MapKeys[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->K]\n  \"\"\"\n  An iterator over the keys in a map.\n  \"\"\"\n  let _map: M\n  var _i: USize = -1\n  var _count: USize = 0\n\n  new create(map: M) =>\n    \"\"\"\n    Creates an iterator for the given map.\n    \"\"\"\n    _map = map\n\n  fun has_next(): Bool =>\n    \"\"\"\n    True if it believes there are remaining entries. May not be right if values\n    were added or removed from the map.\n    \"\"\"\n    _count < _map.size()\n\n  fun ref next(): M->K ? =>\n    \"\"\"\n    Returns the next key, or raises an error if there isn't one. If keys are\n    added during iteration, this may not return all keys.\n    \"\"\"\n    _i = _map.next_index(_i)?\n    _count = _count + 1\n    _map.index(_i)?._1\n\nclass MapValues[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->V]\n  \"\"\"\n  An iterator over the values in a map.\n  \"\"\"\n  let _map: M\n  var _i: USize = -1\n  var _count: USize = 0\n\n  new create(map: M) =>\n    \"\"\"\n    Creates an iterator for the given map.\n    \"\"\"\n    _map = map\n\n  fun has_next(): Bool =>\n    \"\"\"\n    True if it believes there are remaining entries. May not be right if values\n    were added or removed from the map.\n    \"\"\"\n    _count < _map.size()\n\n  fun ref next(): M->V ? =>\n    \"\"\"\n    Returns the next value, or raises an error if there isn't one. If values\n    are added during iteration, this may not return all values.\n    \"\"\"\n    _i = _map.next_index(_i)?\n    _count = _count + 1\n    _map.index(_i)?._2\n\nclass MapPairs[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M->K, M->V)]\n  \"\"\"\n  An iterator over the keys and values in a map.\n  \"\"\"\n  let _map: M\n  var _i: USize = -1\n  var _count: USize = 0\n\n  new create(map: M) =>\n    \"\"\"\n    Creates an iterator for the given map.\n    \"\"\"\n    _map = map\n\n  fun has_next(): Bool =>\n    \"\"\"\n    True if it believes there are remaining entries. May not be right if values\n    were added or removed from the map.\n    \"\"\"\n    _count < _map.size()\n\n  fun ref next(): (M->K, M->V) ? =>\n    \"\"\"\n    Returns the next entry, or raises an error if there isn't one. If entries\n    are added during iteration, this may not return all entries.\n    \"\"\"\n    _i = _map.next_index(_i)?\n    _count = _count + 1\n    _map.index(_i)?",
            "title": "map.pony"
        },
        {
            "location": "/src/collections/list_node/",
            "text": "class ListNode[A]\n  \"\"\"\n  A node in a list.\n  \"\"\"\n  var _item: (A | None)\n  var _list: (List[A] | None) = None\n  var _prev: (ListNode[A] | None) = None\n  var _next: (ListNode[A] | None) = None\n\n  new create(item: (A | None) = None) =>\n    \"\"\"\n    Create a node. Initially, it is not in any list.\n    \"\"\"\n    _item = consume item\n\n  fun apply(): this->A ? =>\n    \"\"\"\n    Return the item, if we have one, otherwise raise an error.\n    \"\"\"\n    _item as this->A\n\n  fun ref update(value: (A | None)): A^ ? =>\n    \"\"\"\n    Replace the item and return the previous one. Raise an error if we have no\n    previous value.\n    \"\"\"\n    (_item = consume value) as A^\n\n  fun ref pop(): A^ ? =>\n    \"\"\"\n    Remove the item from the node, if we have one, otherwise raise an error.\n    \"\"\"\n    (_item = None) as A^\n\n  fun ref prepend(that: ListNode[A]): Bool =>\n    \"\"\"\n    Prepend a node to this one. If `that` is already in a list, it is removed\n    before it is prepended. Returns true if `that` was removed from another\n    list.\n    \"\"\"\n    if (_prev is that) or (this is that) then\n      return false\n    end\n\n    var in_list = false\n\n    match _list\n    | let list': List[A] =>\n      in_list = that._list isnt None\n      that.remove()\n\n      match _prev\n      | let  prev': ListNode[A] =>\n        prev'._next = that\n      else\n        list'._set_head(that)\n      end\n\n      that._list = list'\n      that._prev = _prev\n      that._next = this\n      _prev = that\n      list'._increment()\n    end\n    in_list\n\n  fun ref append(that: ListNode[A]): Bool =>\n    \"\"\"\n    Append a node to this one. If `that` is already in a list, it is removed\n    before it is appended. Returns true if `that` was removed from another\n    list.\n    \"\"\"\n    if (_next is that) or (this is that) then\n      return false\n    end\n\n    var in_list = false\n\n    match _list\n    | let list': List[A] =>\n      in_list = that._list isnt None\n      that.remove()\n\n      match _next\n      | let  next': ListNode[A] =>\n        next'._prev = that\n      else\n        list'._set_tail(that)\n      end\n\n      that._list = list'\n      that._prev = this\n      that._next = _next\n      _next = that\n      list'._increment()\n    end\n    in_list\n\n  fun ref remove() =>\n    \"\"\"\n    Remove a node from a list.\n    \"\"\"\n    match _list\n    | let list': List[A] =>\n      match (_prev, _next)\n      | (let prev': ListNode[A], let next': ListNode[A]) =>\n        // We're in the middle of the list.\n        prev'._next = _next\n        next'._prev = _prev\n        _prev = None\n        _next = None\n      | (let prev': ListNode[A], None) =>\n        // We're the tail.\n        prev'._next = None\n        list'._set_tail(prev')\n        _prev = None\n      | (None, let next': ListNode[A]) =>\n        // We're the head.\n        next'._prev = None\n        list'._set_head(next')\n        _next = None\n      | (None, None) =>\n        // We're the only member\n        list'._set_head(None)\n        list'._set_tail(None)\n      end\n\n      list'._decrement()\n      _list = None\n    end\n\n  fun has_prev(): Bool =>\n    \"\"\"\n    Return true if there is a previous node.\n    \"\"\"\n    _prev isnt None\n\n  fun has_next(): Bool =>\n    \"\"\"\n    Return true if there is a next node.\n    \"\"\"\n    _next isnt None\n\n  fun prev(): (this->ListNode[A] | None) =>\n    \"\"\"\n    Return the previous node.\n    \"\"\"\n    _prev\n\n  fun next(): (this->ListNode[A] | None) =>\n    \"\"\"\n    Return the next node.\n    \"\"\"\n    _next\n\n  fun ref _set_list(list: List[A]): ListNode[A]^ =>\n    \"\"\"\n    Make this node the only node on the given list.\n    \"\"\"\n    remove()\n    _list = list\n    this",
            "title": "list_node.pony"
        },
        {
            "location": "/src/collections/list/",
            "text": "class List[A] is Seq[A]\n  \"\"\"\n  A doubly linked list.\n  \"\"\"\n  var _head: (ListNode[A] | None) = None\n  var _tail: (ListNode[A] | None) = None\n  var _size: USize = 0\n\n  new create(len: USize = 0) =>\n    \"\"\"\n    Do nothing, but be compatible with Seq.\n    \"\"\"\n    None\n\n  new unit(a: A) =>\n    \"\"\"\n    Builds a new list from an element.\n    \"\"\"\n    push(consume a)\n\n  new from(seq: Array[A^]) =>\n    \"\"\"\n    Builds a new list from the sequence passed in.\n    \"\"\"\n    for value in seq.values() do\n      push(consume value)\n    end\n\n  fun ref reserve(len: USize) =>\n    \"\"\"\n    Do nothing, but be compatible with Seq.\n    \"\"\"\n    None\n\n  fun size(): USize =>\n    \"\"\"\n    Returns the number of items in the list.\n    \"\"\"\n    _size\n\n  fun apply(i: USize = 0): this->A ? =>\n    \"\"\"\n    Get the i-th element, raising an error if the index is out of bounds.\n    \"\"\"\n    index(i)?()?\n\n  fun ref update(i: USize, value: A): A^ ? =>\n    \"\"\"\n    Change the i-th element, raising an error if the index is out of bounds.\n    Returns the previous value, which may be None if the node has been popped\n    but left on the list.\n    \"\"\"\n    index(i)?()? = consume value\n\n  fun index(i: USize): this->ListNode[A] ? =>\n    \"\"\"\n    Gets the i-th node, raising an error if the index is out of bounds.\n    \"\"\"\n    if i >= _size then\n      error\n    end\n\n    var node = _head as this->ListNode[A]\n    var j = USize(0)\n\n    while j < i do\n      node = node.next() as this->ListNode[A]\n      j = j + 1\n    end\n\n    node\n\n  fun ref remove(i: USize): ListNode[A] ? =>\n    \"\"\"\n    Remove the i-th node, raising an error if the index is out of bounds.\n    The removed node is returned.\n    \"\"\"\n    index(i)? .> remove()\n\n  fun ref clear() =>\n    \"\"\"\n    Empties the list.\n    \"\"\"\n    _head = None\n    _tail = None\n    _size = 0\n\n  fun head(): this->ListNode[A] ? =>\n    \"\"\"\n    Get the head of the list.\n    \"\"\"\n    _head as this->ListNode[A]\n\n  fun tail(): this->ListNode[A] ? =>\n    \"\"\"\n    Get the tail of the list.\n    \"\"\"\n    _tail as this->ListNode[A]\n\n  fun ref prepend_node(node: ListNode[A]) =>\n    \"\"\"\n    Adds a node to the head of the list.\n    \"\"\"\n    match _head\n    | let head': ListNode[A] =>\n      head'.prepend(node)\n    else\n      _set_both(node)\n    end\n\n  fun ref append_node(node: ListNode[A]) =>\n    \"\"\"\n    Adds a node to the tail of the list.\n    \"\"\"\n    match _tail\n    | let tail': ListNode[A] =>\n      tail'.append(node)\n    else\n      _set_both(node)\n    end\n\n  fun ref append_list(that: List[A]) =>\n    \"\"\"\n    Remove all nodes from that and append them to this.\n    \"\"\"\n    if this isnt that then\n      while that._size > 0 do\n        try append_node(that.head()?) end\n      end\n    end\n\n  fun ref prepend_list(that: List[A]) =>\n    \"\"\"\n    Remove all nodes from that and prepend them to this.\n    \"\"\"\n    if this isnt that then\n      while that._size > 0 do\n        try prepend_node(that.tail()?) end\n      end\n    end\n\n  fun ref push(a: A) =>\n    \"\"\"\n    Adds a value to the tail of the list.\n    \"\"\"\n    append_node(ListNode[A](consume a))\n\n  fun ref pop(): A^ ? =>\n    \"\"\"\n    Removes a value from the tail of the list.\n    \"\"\"\n    tail()? .> remove().pop()?\n\n  fun ref unshift(a: A) =>\n    \"\"\"\n    Adds a value to the head of the list.\n    \"\"\"\n    prepend_node(ListNode[A](consume a))\n\n  fun ref shift(): A^ ? =>\n    \"\"\"\n    Removes a value from the head of the list.\n    \"\"\"\n    head()? .> remove().pop()?\n\n  fun ref append(\n    seq: (ReadSeq[A] & ReadElement[A^]),\n    offset: USize = 0,\n    len: USize = -1)\n  =>\n    \"\"\"\n    Append len elements from a sequence, starting from the given offset.\n    \"\"\"\n    if offset >= seq.size() then\n      return\n    end\n\n    let copy_len = len.min(seq.size() - offset)\n    reserve(_size + copy_len)\n\n    let cap = copy_len + offset\n    var i = offset\n\n    try\n      while i < cap do\n        push(seq(i)?)\n        i = i + 1\n      end\n    end\n\n  fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) =>\n    \"\"\"\n    Add len iterated elements to the end of the list, starting from the given\n    offset.\n    \"\"\"\n    try\n      for i in Range(0, offset) do\n        if iter.has_next() then\n          iter.next()?\n        else\n          return\n        end\n      end\n\n      for i in Range(0, len) do\n        if iter.has_next() then\n          push(iter.next()?)\n        else\n          return\n        end\n      end\n    end\n\n  fun ref truncate(len: USize) =>\n    \"\"\"\n    Truncate the list to the given length, discarding excess elements.\n    If the list is already smaller than len, do nothing.\n    \"\"\"\n    try\n      while _size > len do\n        pop()?\n      end\n    end\n\n  fun clone(): List[this->A!]^ =>\n    \"\"\"\n    Clone the list.\n    \"\"\"\n    let out = List[this->A!]\n\n    for v in values() do\n      out.push(v)\n    end\n    out\n\n  fun map[B](f: {(this->A!): B^} box): List[B]^ =>\n    \"\"\"\n    Builds a new list by applying a function to every member of the list.\n    \"\"\"\n    try\n      _map[B](head()?, f, List[B])\n    else\n      List[B]\n    end\n\n  fun _map[B](\n    ln: this->ListNode[A],\n    f: {(this->A!): B^} box,\n    acc: List[B])\n    : List[B]^\n  =>\n    \"\"\"\n    Private helper for map, recursively working with ListNodes.\n    \"\"\"\n    try acc.push(f(ln()?)) end\n\n    try\n      _map[B](ln.next() as this->ListNode[A], f, acc)\n    else\n      acc\n    end\n\n  fun flat_map[B](f: {(this->A!): List[B]} box): List[B]^ =>\n    \"\"\"\n    Builds a new list by applying a function to every member of the list and\n    using the elements of the resulting lists.\n    \"\"\"\n    try\n      _flat_map[B](head()?, f, List[B])\n    else\n      List[B]\n    end\n\n  fun _flat_map[B](\n    ln: this->ListNode[A],\n    f: {(this->A!): List[B]} box,\n    acc: List[B]): List[B]^\n  =>\n    \"\"\"\n    Private helper for flat_map, recursively working with ListNodes.\n    \"\"\"\n    try acc.append_list(f(ln()?)) end\n\n    try\n      _flat_map[B](ln.next() as this->ListNode[A], f, acc)\n    else\n      acc\n    end\n\n  fun filter(f: {(this->A!): Bool} box): List[this->A!]^ =>\n    \"\"\"\n    Builds a new list with those elements that satisfy a provided predicate.\n    \"\"\"\n    try\n      _filter(head()?, f, List[this->A!])\n    else\n      List[this->A!]\n    end\n\n  fun _filter(\n    ln: this->ListNode[A],\n    f: {(this->A!): Bool} box,\n    acc: List[this->A!]): List[this->A!]\n  =>\n    \"\"\"\n    Private helper for filter, recursively working with ListNodes.\n    \"\"\"\n    try\n      let cur = ln()?\n      if f(cur) then acc.push(cur) end\n    end\n\n    try\n      _filter(ln.next() as this->ListNode[A], f, acc)\n    else\n      acc\n    end\n\n  fun fold[B](f: {(B!, this->A!): B^} box, acc: B): B =>\n    \"\"\"\n    Folds the elements of the list using the supplied function.\n    \"\"\"\n    let h = try\n      head()?\n    else\n      return acc\n    end\n\n    _fold[B](h, f, consume acc)\n\n  fun _fold[B](\n    ln: this->ListNode[A],\n    f: {(B!, this->A!): B^} box,\n    acc: B)\n    : B\n  =>\n    \"\"\"\n    Private helper for fold, recursively working with ListNodes.\n    \"\"\"\n    let nextAcc: B = try f(acc, ln()?) else consume acc end\n    let h = try\n      ln.next() as this->ListNode[A]\n    else\n      return nextAcc\n    end\n\n    _fold[B](h, f, consume nextAcc)\n\n  fun every(f: {(this->A!): Bool} box): Bool =>\n    \"\"\"\n    Returns true if every element satisfies the provided predicate, false\n    otherwise.\n    \"\"\"\n    try\n      _every(head()?, f)\n    else\n      true\n    end\n\n  fun _every(ln: this->ListNode[A], f: {(this->A!): Bool} box): Bool =>\n    \"\"\"\n    Private helper for every, recursively working with ListNodes.\n    \"\"\"\n    try\n      if not(f(ln()?)) then\n        false\n      else\n        _every(ln.next() as this->ListNode[A], f)\n      end\n    else\n      true\n    end\n\n  fun exists(f: {(this->A!): Bool} box): Bool =>\n    \"\"\"\n    Returns true if at least one element satisfies the provided predicate,\n    false otherwise.\n    \"\"\"\n    try\n      _exists(head()?, f)\n    else\n      false\n    end\n\n  fun _exists(ln: this->ListNode[A], f: {(this->A!): Bool} box): Bool =>\n    \"\"\"\n    Private helper for exists, recursively working with ListNodes.\n    \"\"\"\n    try\n      if f(ln()?) then\n        true\n      else\n        _exists(ln.next() as this->ListNode[A], f)\n      end\n    else\n      false\n    end\n\n  fun partition(\n    f: {(this->A!): Bool} box)\n    : (List[this->A!]^, List[this->A!]^)\n  =>\n    \"\"\"\n    Builds a pair of lists, the first of which is made up of the elements\n    satisfying the supplied predicate and the second of which is made up of\n    those that do not.\n    \"\"\"\n    let l1 = List[this->A!]\n    let l2 = List[this->A!]\n    for item in values() do\n      if f(item) then l1.push(item) else l2.push(item) end\n    end\n    (l1, l2)\n\n  fun drop(n: USize): List[this->A!]^ =>\n    \"\"\"\n    Builds a list by dropping the first n elements.\n    \"\"\"\n    let l = List[this->A!]\n\n    if size() > n then\n      try\n        var node = index(n)?\n\n        for i in Range(n, size()) do\n          l.push(node()?)\n          node = node.next() as this->ListNode[A]\n        end\n      end\n    end\n    l\n\n  fun take(n: USize): List[this->A!] =>\n    \"\"\"\n    Builds a list of the first n elements.\n    \"\"\"\n    let l = List[this->A!]\n\n    if size() > 0 then\n      try\n        var node = head()?\n\n        for i in Range(0, n.min(size())) do\n          l.push(node()?)\n          node = node.next() as this->ListNode[A]\n        end\n      end\n    end\n    l\n\n  fun take_while(f: {(this->A!): Bool} box): List[this->A!]^ =>\n    \"\"\"\n    Builds a list of elements satisfying the provided predicate until one does\n    not.\n    \"\"\"\n    let l = List[this->A!]\n\n    if size() > 0 then\n      try\n        var node = head()?\n\n        for i in Range(0, size()) do\n          let item = node()?\n          if f(item) then l.push(item) else return l end\n          node = node.next() as this->ListNode[A]\n        end\n      end\n    end\n    l\n\n  fun reverse(): List[this->A!]^ =>\n    \"\"\"\n    Builds a new list by reversing the elements in the list.\n    \"\"\"\n    try\n      _reverse(head()?, List[this->A!])\n    else\n      List[this->A!]\n    end\n\n  fun _reverse(ln: this->ListNode[A], acc: List[this->A!]): List[this->A!]^ =>\n    \"\"\"\n    Private helper for reverse, recursively working with ListNodes.\n    \"\"\"\n    try acc.unshift(ln()?) end\n\n    try\n      _reverse(ln.next() as this->ListNode[A], acc)\n    else\n      acc\n    end\n\n  fun contains[B: (A & HasEq[A!] #read) = A](a: box->B): Bool =>\n    \"\"\"\n    Returns true if the list contains the provided element, false otherwise.\n    \"\"\"\n    try\n      _contains[B](head()?, a)\n    else\n      false\n    end\n\n  fun _contains[B: (A & HasEq[A!] #read) = A](\n    ln: this->ListNode[A],\n    a: box->B)\n    : Bool\n  =>\n    \"\"\"\n    Private helper for contains, recursively working with ListNodes.\n    \"\"\"\n    try\n      if a == ln()? then\n        true\n      else\n        _contains[B](ln.next() as this->ListNode[A], a)\n      end\n    else\n      false\n    end\n\n  fun nodes(): ListNodes[A, this->ListNode[A]]^ =>\n    \"\"\"\n    Return an iterator on the nodes in the list.\n    \"\"\"\n    ListNodes[A, this->ListNode[A]](_head)\n\n  fun rnodes(): ListNodes[A, this->ListNode[A]]^ =>\n    \"\"\"\n    Return an iterator on the nodes in the list.\n    \"\"\"\n    ListNodes[A, this->ListNode[A]](_head, true)\n\n  fun values(): ListValues[A, this->ListNode[A]]^ =>\n    \"\"\"\n    Return an iterator on the values in the list.\n    \"\"\"\n    ListValues[A, this->ListNode[A]](_head)\n\n  fun rvalues(): ListValues[A, this->ListNode[A]]^ =>\n    \"\"\"\n    Return an iterator on the values in the list.\n    \"\"\"\n    ListValues[A, this->ListNode[A]](_head, true)\n\n  fun ref _increment() =>\n    _size = _size + 1\n\n  fun ref _decrement() =>\n    _size = _size - 1\n\n  fun ref _set_head(head': (ListNode[A] | None)) =>\n    _head = head'\n\n  fun ref _set_tail(tail': (ListNode[A] | None)) =>\n    _tail = tail'\n\n  fun ref _set_both(node: ListNode[A]) =>\n    node._set_list(this)\n    _head = node\n    _tail = node\n    _size = 1\n\nclass ListNodes[A, N: ListNode[A] #read] is Iterator[N]\n  \"\"\"\n  Iterate over the nodes in a list.\n  \"\"\"\n  var _next: (N | None)\n  let _reverse: Bool\n\n  new create(head: (N | None), reverse: Bool = false) =>\n    \"\"\"\n    Keep the next list node to be examined.\n    \"\"\"\n    _next = head\n    _reverse = reverse\n\n  fun has_next(): Bool =>\n    \"\"\"\n    If we have a list node, we have more values.\n    \"\"\"\n    _next isnt None\n\n  fun ref next(): N ? =>\n    \"\"\"\n    Get the list node and replace it with the next one.\n    \"\"\"\n    match _next\n    | let next': N =>\n      if _reverse then\n        _next = next'.prev()\n      else\n        _next = next'.next()\n      end\n\n      next'\n    else\n      error\n    end\n\nclass ListValues[A, N: ListNode[A] #read] is Iterator[N->A]\n  \"\"\"\n  Iterate over the values in a list.\n  \"\"\"\n  var _next: (N | None)\n  let _reverse: Bool\n\n  new create(head: (N | None), reverse: Bool = false) =>\n    \"\"\"\n    Keep the next list node to be examined.\n    \"\"\"\n    _next = head\n    _reverse = reverse\n\n  fun has_next(): Bool =>\n    \"\"\"\n    If we have a list node, we have more values.\n    \"\"\"\n    _next isnt None\n\n  fun ref next(): N->A ? =>\n    \"\"\"\n    Get the value of the list node and replace it with the next one.\n    \"\"\"\n    match _next\n    | let next': N =>\n      if _reverse then\n        _next = next'.prev()\n      else\n        _next = next'.next()\n      end\n\n      next'()?\n    else\n      error\n    end",
            "title": "list.pony"
        },
        {
            "location": "/src/collections/hashable/",
            "text": "interface Hashable\n  \"\"\"\n  Anything with a hash method is hashable.\n  \"\"\"\n  fun hash(): USize\n\ninterface Hashable64\n  \"\"\"\n  A version of Hashable that returns 64-bit hashes on every platform.\n  \"\"\"\n  fun hash64(): U64\n\ninterface val HashFunction[A]\n  \"\"\"\n  A pluggable hash function.\n  \"\"\"\n  new val create()\n    \"\"\"\n    Data structures create instances internally. Use a primitive if possible.\n    \"\"\"\n\n  fun hash(x: box->A!): USize\n    \"\"\"\n    Calculate the hash of some type. This is an alias of the type parameter to\n    allow data structures to hash things without consuming them.\n    \"\"\"\n\n  fun eq(x: box->A!, y: box->A!): Bool\n    \"\"\"\n    Determine equality between two keys with the same hash. This is done with\n    viewpoint adapted aliases to allow data structures to determine equality\n    in a box fun without consuming keys.\n    \"\"\"\n\ninterface val HashFunction64[A]\n  \"\"\"\n  A pluggable hash function with 64-bit hashes.\n  \"\"\"\n  new val create()\n    \"\"\"\n    Data structures create instances internally. Use a primitive if possible.\n    \"\"\"\n\n  fun hash64(x: box->A!): U64\n    \"\"\"\n    Calculate the hash of some type. This is an alias of the type parameter to\n    allow data structures to hash things without consuming them.\n    \"\"\"\n\n  fun eq(x: box->A!, y: box->A!): Bool\n    \"\"\"\n    Determine equality between two keys with the same hash. This is done with\n    viewpoint adapted aliases to allow data structures to determine equality\n    in a box fun without consuming keys.\n    \"\"\"\n\nprimitive HashEq[A: (Hashable #read & Equatable[A] #read)] is HashFunction[A]\n  fun hash(x: box->A): USize =>\n    \"\"\"\n    Use the hash function from the type parameter.\n    \"\"\"\n    x.hash()\n\n  fun eq(x: box->A, y: box->A): Bool =>\n    \"\"\"\n    Use the structural equality function from the type parameter.\n    \"\"\"\n    x == y\n\nprimitive HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is\n  HashFunction64[A]\n  fun hash64(x: box->A): U64 =>\n    \"\"\"\n    Use the hash function from the type parameter.\n    \"\"\"\n    x.hash64()\n\n  fun eq(x: box->A, y: box->A): Bool =>\n    \"\"\"\n    Use the structural equality function from the type parameter.\n    \"\"\"\n    x == y\n\nprimitive HashIs[A] is (HashFunction[A] & HashFunction64[A])\n  fun hash(x: box->A!): USize =>\n    \"\"\"\n    Hash the identity rather than the contents.\n    \"\"\"\n    (digestof x).hash()\n\n  fun hash64(x: box->A!): U64 =>\n    \"\"\"\n    Hash the identity rather than the contents.\n    \"\"\"\n    (digestof x).hash64()\n\n  fun eq(x: box->A!, y: box->A!): Bool =>\n    \"\"\"\n    Determine equality by identity rather than structurally.\n    \"\"\"\n    x is y\n\nprimitive HashByteSeq is\n  (HashFunction[ByteSeq box] & HashFunction64[ByteSeq box])\n  \"\"\"\n  Hash and equality functions for arbitrary ByteSeq.\n  \"\"\"\n  fun hash(x: ByteSeq box): USize =>\n    @ponyint_hash_block[USize](x.cpointer(), x.size())\n\n  fun hash64(x: ByteSeq box): U64 =>\n    @ponyint_hash_block64[U64](x.cpointer(), x.size())\n\n  fun eq(x: ByteSeq box, y: ByteSeq box): Bool =>\n    if x.size() == y.size() then\n      @memcmp[I32](x.cpointer(), y.cpointer(), x.size()) == 0\n    else\n      false\n    end",
            "title": "hashable.pony"
        },
        {
            "location": "/src/collections/flag/",
            "text": "interface val Flag[A: (Unsigned & Integer[A] val)]\n  \"\"\"\n  A flag should be a primitive with a value method that returns the bits that\n  represent the flag. This allows a flag to encode a single bit, or any\n  combination of bits.\n  \"\"\"\n  fun value(): A\n\nclass Flags[A: Flag[B] val, B: (Unsigned & Integer[B] val) = U64] is\n  Comparable[Flags[A, B] box]\n  \"\"\"\n  Flags is a set of flags. The flags that are recognised should be passed as\n  a union type for type parameter A. For example:\n\n  primitive SSE\n    fun value(): U64 => 1\n\n  primitive AVX\n    fun value(): U64 => 2\n\n  primitive RDTSCP\n    fun value(): U64 => 4\n\n  type Features is Flags[(SSE | AVX | RDTSCP)]\n\n  Type parameter B is the unlying field used to store the flags.\n  \"\"\"\n  var _value: B = 0\n\n  fun value(): B =>\n    \"\"\"\n    Returns the bit encoding of the set flags.\n    \"\"\"\n    _value\n\n  fun apply(flag: A): Bool =>\n    \"\"\"\n    Returns true if the flag is set.\n    \"\"\"\n    (_value and flag.value()) > 0\n\n  fun ref all() =>\n    \"\"\"\n    Sets all bits, including undefined flags.\n    \"\"\"\n    _value = -1\n\n  fun ref clear() =>\n    \"\"\"\n    Unsets all flags.\n    \"\"\"\n    _value = 0\n\n  fun ref set(flag: A) =>\n    \"\"\"\n    Sets the flag.\n    \"\"\"\n    _value = _value or flag.value()\n\n  fun ref unset(flag: A) =>\n    \"\"\"\n    Unsets the flag.\n    \"\"\"\n    _value = _value and not flag.value()\n\n  fun ref flip(flag: A) =>\n    \"\"\"\n    Sets the flag if it is unset, unsets the flag if it is set.\n    \"\"\"\n    _value = _value xor flag.value()\n\n  fun ref union(that: Flags[A, B] box) =>\n    \"\"\"\n    The union of this and that.\n    \"\"\"\n    _value = this._value or that._value\n\n  fun ref intersect(that: Flags[A, B] box) =>\n    \"\"\"\n    The intersection of this and that.\n    \"\"\"\n    _value = this._value and that._value\n\n  fun ref difference(that: Flags[A, B] box) =>\n    \"\"\"\n    The symmetric difference of this and that.\n    \"\"\"\n    _value = this._value xor that._value\n\n  fun ref remove(that: Flags[A, B] box) =>\n    \"\"\"\n    Unset flags that are set in that.\n    \"\"\"\n    _value = this._value xor that._value\n\n  fun add(flag: A): Flags[A, B] iso^ =>\n    \"\"\"\n    This with the flag set.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value or flag.value()\n    f\n\n  fun sub(flag: A): Flags[A, B] iso^ =>\n    \"\"\"\n    This with the flag unset.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value and not flag.value()\n    f\n\n  fun op_or(that: Flags[A, B] box): Flags[A, B] iso^ =>\n    \"\"\"\n    The union of this and that.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value or that._value\n    f\n\n  fun op_and(that: Flags[A, B] box): Flags[A, B] iso^ =>\n    \"\"\"\n    The intersection of this and that.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value and that._value\n    f\n\n  fun op_xor(that: Flags[A, B] box): Flags[A, B] iso^ =>\n    \"\"\"\n    The symmetric difference of this and that.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value xor that._value\n    f\n\n  fun without(that: Flags[A, B] box): Flags[A, B] iso^ =>\n    \"\"\"\n    The flags in this that are not in that.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value and not that._value\n    f\n\n  fun clone(): Flags[A, B] iso^ =>\n    \"\"\"\n    Create a clone.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value\n    f\n\n  fun eq(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if this has the same flags set as that.\n    \"\"\"\n    _value == that._value\n\n  fun lt(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if the flags set on this are a strict subset of the flags set\n    on that. Flags is only partially ordered, so lt is not the opposite of ge.\n    \"\"\"\n    (_value != that._value) and ((_value and not that._value) == 0)\n\n  fun le(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if the flags set on this are a subset of the flags set on\n    that or they are the same. Flags is only partially ordered, so le is not\n    the opposite of te.\n    \"\"\"\n    ((_value and not that._value) == 0)\n\n  fun gt(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if the flags set on this are a struct superset of the flags\n    set on that. Flags is only partially ordered, so gt is not the opposite of\n    le.\n    \"\"\"\n    (_value != that._value) and ((that._value and not _value) == 0)\n\n  fun ge(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if the flags set on this are a superset of the flags set on\n    that or they are the same. Flags is only partially ordered, so ge is not\n    the opposite of lt.\n    \"\"\"\n    ((that._value and not _value) == 0)",
            "title": "flag.pony"
        },
        {
            "location": "/src/collections-persistent/vec/",
            "text": "use mut = \"collections\"\n\nclass val Vec[A: Any #share]\n  \"\"\"\n  A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\n  Trees' by Phil Bagwell.\n  \"\"\"\n\n  let _root: (_VecNode[A] | None)\n  let _tail: Array[A] val\n  let _size: USize\n  let _depth: USize\n\n  new val create() =>\n    _root = None\n    _tail = recover Array[A] end\n    _size = 0\n    _depth = -1\n\n  new val _create(\n    root': (_VecNode[A] | None),\n    tail': Array[A] val,\n    size': USize,\n    depth': USize)\n  =>\n    _root = root'\n    _tail = tail'\n    _size = size'\n    _depth = depth'\n\n  fun size(): USize =>\n    \"\"\"\n    Return the amount of values in the vector.\n    \"\"\"\n    _size\n\n  fun _tail_offset(): USize =>\n    \"\"\"\n    Return the amount of values in the root.\n    \"\"\"\n    _size - _tail.size()\n\n  fun apply(i: USize): val->A ? =>\n    \"\"\"\n    Get the i-th element, raising an error if the index is out of bounds.\n    \"\"\"\n    if i < _tail_offset() then\n      (_root as _VecNode[A])(_depth, i)?\n    else\n      _tail(i - _tail_offset())?\n    end\n\n  fun val update(i: USize, value: val->A): Vec[A] ? =>\n    \"\"\"\n    Return a vector with the i-th element changed, raising an error if the\n    index is out of bounds.\n    \"\"\"\n    if i < _tail_offset() then\n      let root = (_root as _VecNode[A]).update(_depth, i, value)?\n      _create(root, _tail, _size, _depth)\n    else\n      let tail =\n        recover val _tail.clone() .> update(i - _tail_offset(), value)? end\n      _create(_root, tail, _size, _depth)\n    end\n\n  fun val insert(i: USize, value: val->A): Vec[A] ? =>\n    \"\"\"\n    Return a vector with an element inserted. Elements after this are moved\n    up by one index, extending the vector. An out of bounds index raises an\n    error.\n    \"\"\"\n    if i >= _size then error end\n    var vec = this\n    var prev = value\n    for idx in mut.Range(i, _size) do\n      vec = vec.update(idx, prev = this(idx)?)?\n    end\n    vec.push(this(_size - 1)?)\n\n  fun val delete(i: USize): Vec[A] ? =>\n    \"\"\"\n    Return a vector with an element deleted. Elements after this are moved\n    down by one index, compacting the vector. An out of bounds index raises an\n    error.\n    \"\"\"\n    if i >= _size then error end\n    var vec = pop()?\n    for idx in mut.Range(i + 1, _size) do\n      vec = vec.update(idx - 1, this(idx)?)?\n    end\n    vec\n\n  fun val remove(i: USize, n: USize): Vec[A] ? =>\n    \"\"\"\n    Return a vector with n elements removed, beginning at index i.\n    \"\"\"\n    if i >= _size then error end\n    var vec = this\n    for _ in mut.Range(0, n) do vec = vec.pop()? end\n    for idx in mut.Range(i, _size - n) do\n      vec = vec.update(idx, this(idx + n)?)?\n    end\n    vec\n\n  fun val push(value: val->A): Vec[A] =>\n    \"\"\"\n    Return a vector with the value added to the end.\n    \"\"\"\n    // push tail into root when it becomes full\n    let size' = _size + 1\n    let tail = recover val _tail.clone() .> push(value) end\n    if tail.size() < 32 then\n      // push value into tail\n      _create(_root, tail, size', _depth)\n    elseif _tail_offset() == _Bits.next_pow32(_depth) then\n      // create new root\n      // push tail into root\n      let depth' = _depth + 1\n      let root' =\n        match _root\n        | let r: _VecNode[A] =>\n          try r.grow_root().push(depth', _tail_offset(), tail)?\n          else r\n          end\n        | None => _VecNode[A](tail)\n        end\n      _create(root', recover Array[A] end, size', depth')\n    else\n      // push tail into root\n      let root' =\n        try (_root as _VecNode[A]).push(_depth, _tail_offset(), tail)?\n        else _root\n        end\n      _create(root', recover Array[A] end, size', _depth)\n    end\n\n  fun val pop(): Vec[A] ? =>\n    \"\"\"\n    Return a vector with the value at the end removed.\n    \"\"\"\n    // root is popped when tail is empty\n    let size' = _size - 1\n    if _tail.size() > 0 then\n      let tail = _tail.trim(0, _tail.size() - 1)\n      _create(_root, tail, size', _depth)\n    else\n      (let root, var tail) = (_root as _VecNode[A]).pop(_depth, size')?\n      tail = tail.trim(0, tail.size() - 1)\n      if _depth == 0\n      then _create(None, tail, size', -1)\n      else _create(root, tail, size', _depth)\n      end\n    end\n\n  fun val concat(iter: Iterator[val->A]): Vec[A] =>\n    \"\"\"\n    Return a vector with the values of the given iterator added to the end.\n    \"\"\"\n    var v = this\n    for a in iter do\n      v = v.push(a)\n    end\n    v\n\n  fun val find(\n    value: val->A,\n    offset: USize = 0,\n    nth: USize = 0,\n    predicate: {(A, A): Bool} val = {(l: A, r: A): Bool => l is r })\n    : USize ?\n  =>\n    \"\"\"\n    Find the `nth` appearance of `value` from the beginning of the vector,\n    starting at `offset` and examining higher indices, and using the\n    supplied `predicate` for comparisons. Returns the index of the value, or\n    raise an error if the value isn't present.\n\n    By default, the search starts at the first element of the vector,\n    returns the first instance of `value` found, and uses object identity\n    for comparison.\n    \"\"\"\n    var n: USize = 0\n    for i in mut.Range(offset, _size) do\n      if predicate(this(i)?, value) then\n        if n == nth then return i end\n        n = n + 1\n      end\n    end\n    error\n\n  fun val contains(\n    value: val->A,\n    predicate: {(A, A): Bool} val = {(l: A, r: A): Bool => l is r })\n    : Bool\n  =>\n    \"\"\"\n    Returns true if the vector contains `value`, false otherwise.\n    \"\"\"\n    for v in values() do\n      if predicate(v, value) then return true end\n    end\n    false\n\n  fun val slice(from: USize = 0, to: USize = -1, step: USize = 1): Vec[A] =>\n    \"\"\"\n    Return a vector that is a clone of a portion of this vector. The range is\n    exclusive and saturated.\n    \"\"\"\n    var vec = Vec[A]\n    for i in mut.Range(0, if _size < to then _size else to end, step) do\n      try vec.push(this(i)?) end\n    end\n    vec\n\n  fun val reverse(): Vec[A] =>\n    \"\"\"\n    Return a vector with the elements in reverse order.\n    \"\"\"\n    var vec = Vec[A]\n    for i in mut.Reverse(_size - 1, 0) do\n      try vec = vec.push(this(i)?) end\n    end\n    vec\n\n  fun val keys(): VecKeys[A]^ =>\n    \"\"\"\n    Return an iterator over the indices in the vector.\n    \"\"\"\n    VecKeys[A](this)\n\n  fun val values(): VecValues[A]^ =>\n    \"\"\"\n    Return an iterator over the values in the vector.\n    \"\"\"\n    VecValues[A](this)\n\n  fun val pairs(): VecPairs[A]^ =>\n    \"\"\"\n    Return an iterator over the (index, value) pairs in the vector.\n    \"\"\"\n    VecPairs[A](this)\n\n  fun _pow32(n: USize): USize =>\n    \"\"\"\n    Raise 32 to the power of n.\n    \"\"\"\n    if n == 0 then\n      1\n    else\n      32 << ((n - 1) * 5)\n    end\n\n  fun _leaf_nodes(): Array[Array[A] val]^ =>\n    let lns = Array[Array[A] val](_size / 32)\n    match _root\n    | let vn: _VecNode[A] => vn.leaf_nodes(lns)\n    end\n    if _tail.size() > 0 then lns.push(_tail) end\n    lns\n\nclass VecKeys[A: Any #share]\n  embed _pairs: VecPairs[A]\n\n  new create(v: Vec[A]) => _pairs = VecPairs[A](v)\n\n  fun has_next(): Bool => _pairs.has_next()\n\n  fun ref next(): USize ? => _pairs.next()?._1\n\nclass VecValues[A: Any #share]\n  embed _pairs: VecPairs[A]\n\n  new create(v: Vec[A]) => _pairs = VecPairs[A](v)\n\n  fun has_next(): Bool => _pairs.has_next()\n\n  fun ref next(): val->A ? => _pairs.next()?._2\n\nclass VecPairs[A: Any #share]\n  let _leaf_nodes: Array[Array[A] val]\n  var _idx: USize = 0\n  var _i: USize = 0\n\n  new create(v: Vec[A]) =>\n    _leaf_nodes = v._leaf_nodes()\n\n  fun has_next(): Bool =>\n    _leaf_nodes.size() > 0\n\n  fun ref next(): (USize, A) ? =>\n    var leaves = _leaf_nodes(0)?\n    let v = leaves(_idx = _idx + 1)?\n\n    if _idx == leaves.size() then\n      _leaf_nodes.shift()?\n      _idx = 0\n    end\n    (_i = _i + 1, v)",
            "title": "vec.pony"
        },
        {
            "location": "/src/collections-persistent/set/",
            "text": "use mut = \"collections\"\n\ntype Set[A: (mut.Hashable val & Equatable[A])] is HashSet[A, mut.HashEq[A]]\n\ntype SetIs[A: Any #share] is HashSet[A, mut.HashIs[A]]\n\nclass val HashSet[A: Any #share, H: mut.HashFunction[A] val]\n  is Comparable[HashSet[A, H] box]\n  \"\"\"\n  A set, built on top of persistent Map. This is implemented as map of an\n  alias of a type to itself.\n  \"\"\"\n  let _map: HashMap[A, A, H]\n\n  new val create() =>\n    _map = HashMap[A, A, H]\n\n  new val _create(map': HashMap[A, A, H]) =>\n    _map = map'\n\n  fun size(): USize =>\n    \"\"\"\n    Return the number of elements in the set.\n    \"\"\"\n    _map.size()\n\n  fun apply(value: val->A): val->A ? =>\n    \"\"\"\n    Return the value if it is in the set, otherwise raise an error.\n    \"\"\"\n    _map(value)?\n\n  fun contains(value: val->A): Bool =>\n    \"\"\"\n    Check whether the set contains the value.\n    \"\"\"\n    _map.contains(value)\n\n  fun val add(value: val->A): HashSet[A, H] =>\n    \"\"\"\n    Return a set with the value added.\n    \"\"\"\n    _create(_map(value) = value)\n\n  fun val sub(value: val->A): HashSet[A, H] =>\n    \"\"\"\n    Return a set with the value removed.\n    \"\"\"\n    try _create(_map.remove(value)?) else this end\n\n  fun val op_or(that: (HashSet[A, H] | Iterator[A])): HashSet[A, H] =>\n    \"\"\"\n    Return a set with the elements of both this and that.\n    \"\"\"\n    let iter =\n      match that\n      | let s: HashSet[A, H] => s.values()\n      | let i: Iterator[A] => i\n      end\n    var s' = this\n    for v in iter do\n      s' = s' + v\n    end\n    s'\n\n  fun val op_and(that: (HashSet[A, H] | Iterator[A])): HashSet[A, H] =>\n    \"\"\"\n    Return a set with the elements that are in both this and that.\n    \"\"\"\n    let iter =\n      match that\n      | let s: HashSet[A, H] => s.values()\n      | let i: Iterator[A] => i\n      end\n    var s' = create()\n    for v in iter do\n      if contains(v) then\n        s' = s' + v\n      end\n    end\n    s'\n\n  fun val op_xor(that: (HashSet[A, H] | Iterator[A])): HashSet[A, H] =>\n    \"\"\"\n    Return a set with elements that are in either this or that, but not both.\n    \"\"\"\n    let iter =\n      match that\n      | let s: HashSet[A, H] => s.values()\n      | let i: Iterator[A] => i\n      end\n    var s' = this\n    for v in iter do\n      if contains(v) then\n        s' = s' - v\n      else\n        s' = s' + v\n      end\n    end\n    s'\n\n  fun val without(that: (HashSet[A, H] | Iterator[A])): HashSet[A, H] =>\n    \"\"\"\n    Return a set with the elements of this that are not in that.\n    \"\"\"\n    let iter =\n      match that\n      | let s: HashSet[A, H] => s.values()\n      | let i: Iterator[A] => i\n      end\n    var s' = this\n    for v in iter do\n      if contains(v) then\n        s' = s' - v\n      end\n    end\n    s'\n\n  fun eq(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Return true if this and that contain the same elements.\n    \"\"\"\n    (size() == that.size()) and (this <= that)\n\n  fun lt(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Return true if every element in this is also in that, and this has fewer\n    elements than that.\n    \"\"\"\n    (size() < that.size()) and (this <= that)\n\n  fun le(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Return true if every element in this is also in that.\n    \"\"\"\n    for v in values() do\n      if not that.contains(v) then return false end\n    end\n    true\n\n  fun gt(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Return true if every element in that is also in this, and this has more\n    elements than that.\n    \"\"\"\n    (size() > that.size()) and (that <= this)\n\n  fun ge(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Return true if every element in that is also in this.\n    \"\"\"\n    that <= this\n\n  fun values(): Iterator[A]^ =>\n    \"\"\"\n    Return an iterator over the values in the set.\n    \"\"\"\n    _map.values()",
            "title": "set.pony"
        },
        {
            "location": "/src/collections-persistent/map/",
            "text": "use mut = \"collections\"\n\ntype Map[K: (mut.Hashable val & Equatable[K]), V: Any #share] is\n  HashMap[K, V, mut.HashEq[K]]\n  \"\"\"\n  A map that uses structural equality on the key.\n  \"\"\"\n\ntype MapIs[K: Any #share, V: Any #share] is HashMap[K, V, mut.HashIs[K]]\n  \"\"\"\n  A map that uses identity comparison on the key.\n  \"\"\"\n\nclass val HashMap[K: Any #share, V: Any #share, H: mut.HashFunction[K] val]\n  \"\"\"\n  A persistent map based on the Compressed Hash Array Mapped Prefix-tree from\n  'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\n  Collections' by Michael J. Steindorfer and Jurgen J. Vinju\n\n  ## Usage\n  ```pony\n  use \"collections/persistent\"\n\n  actor Main\n    new create(env: Env) =>\n      try\n        let m1 = Map[String, U32] // {}\n        // Update returns a new map with the provided key set\n        // to the provided value. The old map is unchanged.\n        let m2 = m1(\"a\") = 5 // {a: 5}\n        let m3 = m2(\"b\") = 10 // {a: 5, b: 10}\n        let m4 = m3.remove(\"a\")? // {b: 10}\n        // You can create a new map from key value pairs.\n        let m5 = Map[String, U32].concat([(\"a\", 2); (\"b\", 3)].values()) // {a: 2, b: 3}\n      end\n  ```\n  \"\"\"\n  let _root: _MapNode[K, V, H]\n  let _size: USize\n\n  new val create() =>\n    _root = _MapNode[K, V, H].empty(0)\n    _size = 0\n\n  new val _create(r: _MapNode[K, V, H], s: USize) =>\n    _root = r\n    _size = s\n\n  fun val apply(k: K): val->V ? =>\n    \"\"\"\n    Attempt to get the value corresponding to k.\n    \"\"\"\n    _root(H.hash(k), k)?\n\n  fun val size(): USize =>\n    \"\"\"\n    Return the amount of key-value pairs in the Map.\n    \"\"\"\n    _size\n\n  fun val update(key: K, value: val->V): HashMap[K, V, H] =>\n    \"\"\"\n    Update the value associated with the provided key.\n    \"\"\"\n    (let r, let insertion) =\n      try\n        _root.update(H.hash(key), (key, value))?\n      else\n        (_root, false) // should not occur\n      end\n    let s = if insertion then _size + 1 else _size end\n    _create(r, s)\n\n  fun val remove(k: K): HashMap[K, V, H] ? =>\n    \"\"\"\n    Try to remove the provided key from the Map.\n    \"\"\"\n    _create(_root.remove(H.hash(k), k)?, _size - 1)\n\n  fun val get_or_else(k: K, alt: val->V): val->V =>\n    \"\"\"\n    Get the value associated with provided key if present. Otherwise,\n    return the provided alternate value.\n    \"\"\"\n    try\n      apply(k)?\n    else\n      alt\n    end\n\n  fun val contains(k: K): Bool =>\n    \"\"\"\n    Check whether the node contains the provided key.\n    \"\"\"\n    try\n      apply(k)?\n      true\n    else\n      false\n    end\n\n  fun val concat(iter: Iterator[(val->K, val->V)]): HashMap[K, V, H] =>\n    \"\"\"\n    Add the K, V pairs from the given iterator to the map.\n    \"\"\"\n    var m = this\n    for (k, v) in iter do\n      m = m.update(k, v)\n    end\n    m\n\n  fun val keys(): MapKeys[K, V, H] => MapKeys[K, V, H](this)\n\n  fun val values(): MapValues[K, V, H] => MapValues[K, V, H](this)\n\n  fun val pairs(): MapPairs[K, V, H] => MapPairs[K, V, H](this)\n\n  fun _root_node(): _MapNode[K, V, H] => _root\n\nclass MapKeys[K: Any #share, V: Any #share, H: mut.HashFunction[K] val]\n  embed _pairs: MapPairs[K, V, H]\n\n  new create(m: HashMap[K, V, H]) => _pairs = MapPairs[K, V, H](m)\n\n  fun has_next(): Bool => _pairs.has_next()\n\n  fun ref next(): K ? => _pairs.next()?._1\n\nclass MapValues[K: Any #share, V: Any #share, H: mut.HashFunction[K] val]\n  embed _pairs: MapPairs[K, V, H]\n\n  new create(m: HashMap[K, V, H]) => _pairs = MapPairs[K, V, H](m)\n\n  fun has_next(): Bool => _pairs.has_next()\n\n  fun ref next(): val->V ? => _pairs.next()?._2\n\nclass MapPairs[K: Any #share, V: Any #share, H: mut.HashFunction[K] val]\n  embed _path: Array[_MapNode[K, V, H]]\n  embed _idxs: Array[USize]\n  var _i: USize = 0\n  let _size: USize\n  var _ci: USize = 0\n\n  new create(m: HashMap[K, V, H]) =>\n    _size = m.size()\n    _path = Array[_MapNode[K, V, H]]\n    _path.push(m._root_node())\n    _idxs = Array[USize]\n    _idxs.push(0)\n\n  fun has_next(): Bool => _i < _size\n\n  fun ref next(): (K, val->V) ? =>\n    (let n, let i) = _cur()?\n    if i >= n.entries().size() then\n      _backup()?\n      return next()?\n    end\n    match n.entries()(i)?\n    | let l: _MapLeaf[K, V, H] =>\n      _inc_i()?\n      _i = _i + 1\n      l\n    | let sn: _MapNode[K, V, H] =>\n      _push(sn)\n      next()?\n    | let cs: _MapCollisions[K, V, H] =>\n      if _ci < cs.size() then\n        let l = cs(_ci)?\n        _ci = _ci + 1\n        _i = _i + 1\n        l\n      else\n        _ci = 0\n        _inc_i()?\n        next()?\n      end\n    end\n\n  fun ref _push(n: _MapNode[K, V, H]) =>\n    _path.push(n)\n    _idxs.push(0)\n\n  fun ref _backup() ? =>\n    _path.pop()?\n    _idxs.pop()?\n    _inc_i()?\n\n  fun ref _inc_i() ? =>\n    let i = _idxs.size() - 1\n    _idxs(i)? = _idxs(i)? + 1\n\n  fun _cur(): (_MapNode[K, V, H], USize) ? =>\n    let i = _idxs.size() - 1\n    (_path(i)?, _idxs(i)?)",
            "title": "map.pony"
        },
        {
            "location": "/src/collections-persistent/list/",
            "text": "type List[A] is (Cons[A] | Nil[A])\n\"\"\"\nA persistent list with functional transformations.\n\n## Usage\n\n```pony\nuse \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =>\n    try\n      let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8)\n\n      let empty = Lists[U32].empty() // List()\n\n      // prepend() returns a new List, leaving the\n      // old list unchanged\n      let l2 = empty.prepend(3) // List(3)\n      let l3 = l2.prepend(2) // List(2, 3)\n      let l4 = l3.prepend(1) // List(1, 2, 3)\n      let l4_head = l4.head() // 1\n      let l4_tail = l4.tail() // List(2, 3)\n\n      l4_head == 1\n      Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))?\n      Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))?\n\n      let doubled = l4.map[U32]({(x) => x * 2 })\n\n      Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))?\n    end\n```\n\"\"\"\n\nprimitive Lists[A]\n  \"\"\"\n  A primitive containing helper functions for constructing and\n  testing Lists.\n  \"\"\"\n\n  fun empty(): List[A] =>\n    \"\"\"\n    Returns an empty list.\n    \"\"\"\n    Nil[A]\n\n  fun cons(h: val->A, t: List[A]): List[A] =>\n    \"\"\"\n    Returns a list that has h as a head and t as a tail.\n    \"\"\"\n    Cons[A](h, t)\n\n  fun apply(arr: Array[val->A]): List[A] =>\n    \"\"\"\n    Builds a new list from an Array\n    \"\"\"\n    this.from(arr.values())\n\n  fun from(iter: Iterator[val->A]): List[A] =>\n    \"\"\"\n    Builds a new list from an iterator\n    \"\"\"\n    var l: List[A] = Nil[A]\n\n    for i in iter do\n      l = Cons[A](i, l)\n    end\n    l.reverse()\n\n  fun eq[T: Equatable[T] val = A](l1: List[T], l2: List[T]): Bool ? =>\n    \"\"\"\n    Checks whether two lists are equal.\n    \"\"\"\n    if (l1.is_empty() and l2.is_empty()) then\n      true\n    elseif (l1.is_empty() and l2.is_non_empty()) then\n      false\n    elseif (l1.is_non_empty() and l2.is_empty()) then\n      false\n    elseif (l1.head()? != l2.head()?) then\n      false\n    else\n      eq[T](l1.tail()?, l2.tail()?)?\n    end\n\nprimitive Nil[A] is ReadSeq[val->A]\n  \"\"\"\n  The empty list of As.\n  \"\"\"\n\n  fun size(): USize =>\n    \"\"\"\n    Returns the size of the list.\n    \"\"\"\n    0\n\n  fun apply(i: USize): val->A ? =>\n    \"\"\"\n    Returns the i-th element of the sequence. For the empty list this call will\n    always error because any index will be out of bounds.\n    \"\"\"\n    error\n\n  fun values(): Iterator[val->A]^ =>\n    \"\"\"\n    Returns an empty iterator over the elements of the empty list.\n    \"\"\"\n    object ref is Iterator[val->A]\n      fun has_next(): Bool => false\n      fun ref next(): val->A! ? => error\n    end\n\n  fun is_empty(): Bool =>\n    \"\"\"\n    Returns a Bool indicating if the list is empty.\n    \"\"\"\n    true\n\n  fun is_non_empty(): Bool =>\n    \"\"\"\n    Returns a Bool indicating if the list is non-empty.\n    \"\"\"\n    false\n\n  fun head(): val->A ? =>\n    \"\"\"\n    Returns an error, since Nil has no head.\n    \"\"\"\n    error\n\n  fun tail(): List[A] ? =>\n    \"\"\"\n    Returns an error, since Nil has no tail.\n    \"\"\"\n    error\n\n  fun reverse(): Nil[A] =>\n    \"\"\"\n    The reverse of the empty list is the empty list.\n    \"\"\"\n    this\n\n  fun prepend(a: val->A!): Cons[A] =>\n    \"\"\"\n    Builds a new list with an element added to the front of this list.\n    \"\"\"\n    Cons[A](consume a, this)\n\n  fun concat(l: List[A]): List[A] =>\n    \"\"\"\n    The concatenation of any list l with the empty list is l.\n    \"\"\"\n    l\n\n  fun map[B](f: {(val->A): val->B} box): Nil[B] =>\n    \"\"\"\n    Mapping a function from A to B over the empty list yields the\n    empty list of Bs.\n    \"\"\"\n    Nil[B]\n\n  fun flat_map[B](f: {(val->A): List[B]} box): Nil[B] =>\n    \"\"\"\n    Flatmapping a function from A to B over the empty list yields the\n    empty list of Bs.\n    \"\"\"\n    Nil[B]\n\n  fun for_each(f: {(val->A)} box) =>\n    \"\"\"\n    Applying a function to every member of the empty list is a no-op.\n    \"\"\"\n    None\n\n  fun filter(f: {(val->A): Bool} box): Nil[A] =>\n    \"\"\"\n    Filtering the empty list yields the empty list.\n    \"\"\"\n    this\n\n  fun fold[B](f: {(B, val->A): B^} box, acc: B): B =>\n    \"\"\"\n    Folding over the empty list yields the initial accumulator.\n    \"\"\"\n    consume acc\n\n  fun every(f: {(val->A): Bool} box): Bool =>\n    \"\"\"\n    Any predicate is true of every member of the empty list.\n    \"\"\"\n    true\n\n  fun exists(f: {(val->A): Bool} box): Bool =>\n    \"\"\"\n    For any predicate, there is no element that satisfies it in the empty\n    list.\n    \"\"\"\n    false\n\n  fun partition(f: {(val->A): Bool} box): (Nil[A], Nil[A]) =>\n    \"\"\"\n    The only partition of the empty list is two empty lists.\n    \"\"\"\n    (this, this)\n\n  fun drop(n: USize): Nil[A] =>\n    \"\"\"\n    There are no elements to drop from the empty list.\n    \"\"\"\n    this\n\n  fun drop_while(f: {(val->A): Bool} box): Nil[A] =>\n    \"\"\"\n    There are no elements to drop from the empty list.\n    \"\"\"\n    this\n\n  fun take(n: USize): Nil[A] =>\n    \"\"\"\n    There are no elements to take from the empty list.\n    \"\"\"\n    this\n\n  fun take_while(f: {(val->A): Bool} box): Nil[A] =>\n    \"\"\"\n    There are no elements to take from the empty list.\n    \"\"\"\n    this\n\n  fun val contains[T: (A & HasEq[A!] #read) = A](a: val->T): Bool =>\n    false\n\nclass val Cons[A] is ReadSeq[val->A]\n  \"\"\"\n  A list with a head and a tail, where the tail can be empty.\n  \"\"\"\n\n  let _size: USize\n  let _head: val->A\n  let _tail: List[A] val\n\n  new val create(a: val->A, t: List[A]) =>\n    _head = consume a\n    _tail = consume t\n    _size = 1 + _tail.size()\n\n  fun size(): USize =>\n    \"\"\"\n    Returns the size of the list.\n    \"\"\"\n    _size\n\n  fun apply(i: USize): val->A ? =>\n    \"\"\"\n    Returns the i-th element of the list. Errors if the index is out of bounds.\n    \"\"\"\n    match i\n    | 0 => _head\n    else _tail(i - 1)?\n    end\n\n  fun values(): Iterator[val->A]^ =>\n    \"\"\"\n    Returns an iterator over the elements of the list.\n    \"\"\"\n    object is Iterator[val->A]\n      var _list: List[A] box = this\n      fun has_next(): Bool => _list isnt Nil[A]\n      fun ref next(): val->A! ? => (_list = _list.tail()?).head()?\n    end\n\n  fun is_empty(): Bool =>\n    \"\"\"\n    Returns a Bool indicating if the list is empty.\n    \"\"\"\n    false\n\n  fun is_non_empty(): Bool =>\n    \"\"\"\n    Returns a Bool indicating if the list is non-empty.\n    \"\"\"\n    true\n\n  fun head(): val->A =>\n    \"\"\"\n    Returns the head of the list.\n    \"\"\"\n    _head\n\n  fun tail(): List[A] =>\n    \"\"\"\n    Returns the tail of the list.\n    \"\"\"\n    _tail\n\n  fun val reverse(): List[A] =>\n    \"\"\"\n    Builds a new list by reversing the elements in the list.\n    \"\"\"\n    _reverse(this, Nil[A])\n\n  fun val _reverse(l: List[A], acc: List[A]): List[A] =>\n    \"\"\"\n    Private helper for reverse, recursively working on elements.\n    \"\"\"\n    match l\n    | let cons: Cons[A] => _reverse(cons.tail(), acc.prepend(cons.head()))\n    else\n      acc\n    end\n\n  fun val prepend(a: val->A!): Cons[A] =>\n    \"\"\"\n    Builds a new list with an element added to the front of this list.\n    \"\"\"\n    Cons[A](consume a, this)\n\n  fun val concat(l: List[A]): List[A] =>\n    \"\"\"\n    Builds a new list that is the concatenation of this list and the provided\n    list.\n    \"\"\"\n    _concat(l, this.reverse())\n\n  fun val _concat(l: List[A], acc: List[A]): List[A] =>\n    \"\"\"\n    Private helper for concat that recursively builds the new list.\n    \"\"\"\n    match l\n    | let cons: Cons[A] => _concat(cons.tail(), acc.prepend(cons.head()))\n    else\n      acc.reverse()\n    end\n\n  fun val map[B](f: {(val->A): val->B} box): List[B] =>\n    \"\"\"\n    Builds a new list by applying a function to every member of the list.\n    \"\"\"\n    _map[B](this, f, Nil[B])\n\n  fun _map[B](l: List[A], f: {(val->A): val->B} box, acc: List[B]): List[B] =>\n    \"\"\"\n    Private helper for map, recursively applying function to elements.\n    \"\"\"\n    match l\n    | let cons: Cons[A] =>\n      _map[B](cons.tail(), f, acc.prepend(f(cons.head())))\n    else\n      acc.reverse()\n    end\n\n  fun val flat_map[B](f: {(val->A): List[B]} box): List[B] =>\n    \"\"\"\n    Builds a new list by applying a function to every member of the list and\n    using the elements of the resulting lists.\n    \"\"\"\n    _flat_map[B](this, f, Nil[B])\n\n  fun _flat_map[B](l: List[A], f: {(val->A): List[B]} box, acc: List[B]):\n  List[B] =>\n    \"\"\"\n    Private helper for flat_map, recursively working on elements.\n    \"\"\"\n    match l\n    | let cons: Cons[A] =>\n      _flat_map[B](cons.tail(), f, _rev_prepend[B](f(cons.head()), acc))\n    else\n      acc.reverse()\n    end\n\n  fun tag _rev_prepend[B](l: List[B], target: List[B]): List[B] =>\n    \"\"\"\n    Prepends l in reverse order onto target\n    \"\"\"\n    match l\n    | let cns: Cons[B] =>\n      _rev_prepend[B](cns.tail(), target.prepend(cns.head()))\n    else\n      target\n    end\n\n  fun val for_each(f: {(val->A)} box) =>\n    \"\"\"\n    Applies the supplied function to every element of the list in order.\n    \"\"\"\n    _for_each(this, f)\n\n  fun _for_each(l: List[A], f: {(val->A)} box) =>\n    \"\"\"\n    Private helper for for_each, recursively working on elements.\n    \"\"\"\n    match l\n    | let cons: Cons[A] =>\n      f(cons.head())\n      _for_each(cons.tail(), f)\n    end\n\n  fun val filter(f: {(val->A): Bool} box): List[A] =>\n    \"\"\"\n    Builds a new list with those elements that satisfy a provided predicate.\n    \"\"\"\n    _filter(this, f, Nil[A])\n\n  fun _filter(l: List[A], f: {(val->A): Bool} box, acc: List[A]): List[A] =>\n    \"\"\"\n    Private helper for filter, recursively working on elements, keeping those\n    that match the predicate and discarding those that don't.\n    \"\"\"\n    match l\n    | let cons: Cons[A] =>\n      if (f(cons.head())) then\n        _filter(cons.tail(), f, acc.prepend(cons.head()))\n      else\n        _filter(cons.tail(), f, acc)\n      end\n    else\n      acc.reverse()\n    end\n\n  fun val fold[B](f: {(B, val->A): B^} box, acc: B): B =>\n    \"\"\"\n    Folds the elements of the list using the supplied function.\n    \"\"\"\n    _fold[B](this, f, consume acc)\n\n  fun val _fold[B](l: List[A], f: {(B, val->A): B^} box, acc: B): B =>\n    \"\"\"\n    Private helper for fold, recursively working on elements.\n    \"\"\"\n    match l\n    | let cons: Cons[A] =>\n      _fold[B](cons.tail(), f, f(consume acc, cons.head()))\n    else\n      acc\n    end\n\n  fun val every(f: {(val->A): Bool} box): Bool =>\n    \"\"\"\n    Returns true if every element satisfies the provided predicate, false\n    otherwise.\n    \"\"\"\n    _every(this, f)\n\n  fun _every(l: List[A], f: {(val->A): Bool} box): Bool =>\n    \"\"\"\n    Private helper for every, recursively testing predicate on elements,\n    returning false immediately on an element that fails to satisfy the\n    predicate.\n    \"\"\"\n    match l\n    | let cons: Cons[A] =>\n      if (f(cons.head())) then\n        _every(cons.tail(), f)\n      else\n        false\n      end\n    else\n      true\n    end\n\n  fun val exists(f: {(val->A): Bool} box): Bool =>\n    \"\"\"\n    Returns true if at least one element satisfies the provided predicate,\n    false otherwise.\n    \"\"\"\n    _exists(this, f)\n\n  fun _exists(l: List[A], f: {(val->A): Bool} box): Bool =>\n    \"\"\"\n    Private helper for exists, recursively testing predicate on elements,\n    returning true immediately on an element satisfying the predicate.\n    \"\"\"\n    match l\n    | let cons: Cons[A] =>\n      if (f(cons.head())) then\n        true\n      else\n        _exists(cons.tail(), f)\n      end\n    else\n      false\n    end\n\n  fun val partition(f: {(val->A): Bool} box): (List[A], List[A]) =>\n    \"\"\"\n    Builds a pair of lists, the first of which is made up of the elements\n    satisfying the supplied predicate and the second of which is made up of\n    those that do not.\n    \"\"\"\n    var hits: List[A] = Nil[A]\n    var misses: List[A] = Nil[A]\n    var cur: List[A] = this\n    while true do\n      match cur\n      | let cons: Cons[A] =>\n        let next = cons.head()\n        if f(next) then\n          hits = hits.prepend(next)\n        else\n          misses = misses.prepend(next)\n        end\n        cur = cons.tail()\n      else\n        break\n      end\n    end\n    (hits.reverse(), misses.reverse())\n\n  fun val drop(n: USize): List[A] =>\n    \"\"\"\n    Builds a list by dropping the first n elements.\n    \"\"\"\n    var cur: List[A] = this\n    if cur.size() <= n then return Nil[A] end\n    var count = n\n    while count > 0 do\n      match cur\n      | let cons: Cons[A] =>\n        cur = cons.tail()\n        count = count - 1\n      end\n    end\n    cur\n\n  fun val drop_while(f: {(val->A): Bool} box): List[A] =>\n    \"\"\"\n    Builds a list by dropping elements from the front of the list until one\n    fails to satisfy the provided predicate.\n    \"\"\"\n    var cur: List[A] = this\n    while true do\n      match cur\n      | let cons: Cons[A] =>\n        if f(cons.head()) then cur = cons.tail() else break end\n      else\n        return Nil[A]\n      end\n    end\n    cur\n\n  fun val take(n: USize): List[A] =>\n    \"\"\"\n    Builds a list of the first n elements.\n    \"\"\"\n    var cur: List[A] = this\n    if cur.size() <= n then return cur end\n    var count = n\n    var res: List[A] = Nil[A]\n    while count > 0 do\n      match cur\n      | let cons: Cons[A] =>\n        res = res.prepend(cons.head())\n        cur = cons.tail()\n      else\n        return res.reverse()\n      end\n      count = count - 1\n    end\n    res.reverse()\n\n  fun val take_while(f: {(val->A): Bool} box): List[A] =>\n    \"\"\"\n    Builds a list of elements satisfying the provided predicate until one does\n    not.\n    \"\"\"\n    var cur: List[A] = this\n    var res: List[A] = Nil[A]\n    while true do\n      match cur\n      | let cons: Cons[A] =>\n        if f(cons.head()) then\n          res = res.prepend(cons.head())\n          cur = cons.tail()\n        else\n          break\n        end\n      else\n        return res.reverse()\n      end\n    end\n    res.reverse()",
            "title": "list.pony"
        },
        {
            "location": "/src/debug/debug/",
            "text": "\"\"\"\n# Debug package\n\nProvides facilities to create output to either `STDOUT` or `STDERR` that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the `-d` flag to `ponyc` when compiling e.g.:\n\n`ponyc -d`\n\n## Example code\n\n```pony\nactor Main\n  new create(env: Env) =>\n    Debug.out(\"This will only bee seen when configured for debug info\")\n    env.out.print(\"This will always be seen\")\n```\n\"\"\"\nprimitive DebugOut\nprimitive DebugErr\n\ntype DebugStream is (DebugOut | DebugErr)\n\nprimitive Debug\n  \"\"\"\n  This is a debug only print utility.\n  \"\"\"\n  fun apply(\n    msg: (Stringable | ReadSeq[Stringable]),\n    sep: String = \", \",\n    stream: DebugStream = DebugOut)\n  =>\n    \"\"\"\n    If platform is debug configured, print either a single stringable or a\n    sequence of stringables. The default separator is \", \", and the default\n    output stream is stdout.\n    \"\"\"\n    ifdef debug then\n      match msg\n      | let m: Stringable =>\n        _print(m.string(), stream)\n      | let m: ReadSeq[Stringable] =>\n        _print(sep.join(m.values()), stream)\n      end\n    end\n\n  fun out(msg: Stringable = \"\") =>\n    \"\"\"\n    If platform is debug configured, print message to standard output\n    \"\"\"\n    _print(msg.string(), DebugOut)\n\n  fun err(msg: Stringable = \"\") =>\n    \"\"\"\n    If platform is debug configured, print message to standard error\n    \"\"\"\n    _print(msg.string(), DebugErr)\n\n  fun _print(msg: String, stream: DebugStream) =>\n    ifdef debug then\n      @fprintf[I32](_stream(stream), \"%s\\n\".cstring(), msg.cstring())\n    end\n\n  fun _stream(stream: DebugStream): Pointer[U8] =>\n    match stream\n    | DebugOut => @pony_os_stdout[Pointer[U8]]()\n    | DebugErr => @pony_os_stderr[Pointer[U8]]()\n    end",
            "title": "debug.pony"
        },
        {
            "location": "/src/ponytest/unit_test/",
            "text": "trait UnitTest\n  \"\"\"\n  Each unit test class must provide this trait. Simple tests only need to\n  define the name() and apply() functions. The remaining functions specify\n  additional test options.\n  \"\"\"\n\n  fun name(): String\n    \"\"\"\n    Report the test name, which is used when printing test results and on the\n    command line to select tests to run.\n    \"\"\"\n\n  fun exclusion_group(): String =>\n    \"\"\"\n    Report the test exclusion group, returning an empty string for none.\n    The default body returns an empty string.\n    \"\"\"\n    \"\"\n\n  fun ref apply(h: TestHelper) ?\n    \"\"\"\n    Run the test.\n    Raising an error is interpreted as a test failure.\n    \"\"\"\n\n  fun ref timed_out(h: TestHelper) =>\n    \"\"\"\n    Tear down a possibly hanging test.\n    Called when the timeout specified by to long_test() expires.\n    There is no need for this function to call complete(false).\n    tear_down() will still be called after this completes.\n    The default is to do nothing.\n    \"\"\"\n    None\n\n  fun ref tear_down(h: TestHelper) =>\n    \"\"\"\n    Tidy up after the test has completed.\n    Called for each run test, whether that test passed, succeeded or timed out.\n    The default is to do nothing.\n    \"\"\"\n    None\n\n  fun label(): String =>\n    \"\"\"\n    Report the test label, returning an empty string for none.\n    It can be later use to filter tests which we want to run, by labels.\n    \"\"\"\n    \"\"",
            "title": "unit_test.pony"
        },
        {
            "location": "/src/ponytest/test_list/",
            "text": "trait TestList\n  \"\"\"\n  Source of unit tests for a PonyTest object.\n  See package doc string for further information and example use.\n  \"\"\"\n\n  fun tag tests(test: PonyTest)\n    \"\"\"\n    Add all the tests in this suite to the given test object.\n    Typically the implementation of this function will be of the form:\n    ```pony\n    fun tests(test: PonyTest) =>\n      test(_TestClass1)\n      test(_TestClass2)\n      test(_TestClass3)\n    ```\n    \"\"\"",
            "title": "test_list.pony"
        },
        {
            "location": "/src/ponytest/test_helper/",
            "text": "interface ITest\n  fun apply() ?\n\nclass val TestHelper\n  \"\"\"\n  Per unit test class that provides control, logging and assertion functions.\n\n  Each unit test is given a TestHelper when it is run. This is val and so can\n  be passed between methods and actors within the test without restriction.\n\n  The assertion functions check the relevant condition and mark the test as a\n  failure if appropriate. The success or failure of the condition is reported\n  back as a Bool which can be checked if a different code path is needed when\n  that condition fails.\n\n  All assert functions take an optional message argument. This is simply a\n  string that is printed as part of the error message when the condition fails.\n  It is intended to aid identifying what failed.\n  \"\"\"\n\n  let _runner: _TestRunner\n  let env: Env\n    \"\"\"\n    The process environment.\n\n    This is useful for getting the [root authority](builtin-AmbientAuth) in\n    order to access the filesystem (See [files](files--index)) or the network\n    (See [net](net--index)) in your tests.\n    \"\"\"\n\n  new val _create(runner: _TestRunner, env': Env) =>\n    \"\"\"\n    Create a new TestHelper.\n    \"\"\"\n    env = env'\n    _runner = runner\n\n  fun log(msg: String, verbose: Bool = false) =>\n    \"\"\"\n    Log the given message.\n\n    The verbose parameter allows messages to be printed only when the --verbose\n    command line option is used. For example, by default assert failures are\n    logged, but passes are not. With --verbose both passes and fails are\n    reported.\n\n    Logs are printed one test at a time to avoid interleaving log lines from\n    concurrent tests.\n    \"\"\"\n    _runner.log(msg, verbose)\n\n  fun fail(msg: String = \"Test failed\") =>\n    \"\"\"\n    Flag the test as having failed.\n    \"\"\"\n    _runner.fail(msg)\n\n  fun assert_true(actual: Bool, msg: String = \"\", loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the given expression is true.\n    \"\"\"\n    if not actual then\n      fail(_format_loc(loc) + \"Assert true failed. \" + msg)\n      return false\n    end\n    log(_format_loc(loc) + \"Assert true passed. \" + msg, true)\n    true\n\n  fun assert_false(actual: Bool, msg: String = \"\", loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the given expression is false.\n    \"\"\"\n    if actual then\n      fail(_format_loc(loc) + \"Assert false failed. \" + msg)\n      return false\n    end\n    log(_format_loc(loc) + \"Assert false passed. \" + msg, true)\n    true\n\n  fun assert_error(test: ITest box, msg: String = \"\", loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the given test function throws an error when run.\n    \"\"\"\n    try\n      test()?\n      fail(_format_loc(loc) + \"Assert error failed. \" + msg)\n      false\n    else\n      log(_format_loc(loc) + \"Assert error passed. \" + msg, true)\n      true\n    end\n\n  fun assert_no_error(\n    test: ITest box,\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the gived test function does not throw an error when run.\n    \"\"\"\n    try\n      test()?\n      log(_format_loc(loc) + \"Assert no error passed. \" + msg, true)\n      true\n    else\n      fail(_format_loc(loc) + \"Assert no error failed. \" + msg)\n      true\n    end\n\n  fun assert_is[A](\n    expect: A,\n    actual: A,\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the 2 given expressions resolve to the same instance\n    \"\"\"\n    _check_is[A](\"is\", consume expect, consume actual, msg, loc)\n\n  fun _check_is[A](\n    check: String,\n    expect: A,\n    actual: A,\n    msg: String,\n    loc: SourceLoc)\n    : Bool\n  =>\n    \"\"\"\n    Check that the 2 given expressions resolve to the same instance\n    \"\"\"\n    if expect isnt actual then\n      fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg\n        + \" Expected (\" + (digestof expect).string() + \") is (\"\n        + (digestof actual).string() + \")\")\n      return false\n    end\n\n    log(\n      _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg\n        + \" Got (\" + (digestof expect).string() + \") is (\"\n        + (digestof actual).string() + \")\",\n      true)\n    true\n\n  fun assert_eq[A: (Equatable[A] #read & Stringable #read)]\n    (expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc): Bool\n  =>\n    \"\"\"\n    Assert that the 2 given expressions are equal.\n    \"\"\"\n    _check_eq[A](\"eq\", expect, actual, msg, loc)\n\n  fun _check_eq[A: (Equatable[A] #read & Stringable)]\n    (check: String, expect: A, actual: A, msg: String, loc: SourceLoc)\n    : Bool\n  =>\n    \"\"\"\n    Check that the 2 given expressions are equal.\n    \"\"\"\n    if expect != actual then\n      fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg\n        + \" Expected (\" + expect.string() + \") == (\" + actual.string() + \")\")\n      return false\n    end\n\n    log(_format_loc(loc) + \"Assert \" + check + \" passed. \" + msg\n      + \" Got (\" + expect.string() + \") == (\" + actual.string() + \")\", true)\n    true\n\n  fun assert_isnt[A](\n    not_expect: A,\n    actual: A,\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the 2 given expressions resolve to different instances.\n    \"\"\"\n    _check_isnt[A](\"isn't\", consume not_expect, consume actual, msg, loc)\n\n  fun _check_isnt[A](\n    check: String,\n    not_expect: A,\n    actual: A,\n    msg: String,\n    loc: SourceLoc)\n    : Bool\n  =>\n    \"\"\"\n    Check that the 2 given expressions resolve to different instances.\n    \"\"\"\n    if not_expect is actual then\n      fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg\n        + \" Expected (\" + (digestof not_expect).string() + \") isnt (\"\n        + (digestof actual).string() + \")\")\n      return false\n    end\n\n    log(\n      _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg\n        + \" Got (\" + (digestof not_expect).string() + \") isnt (\"\n        + (digestof actual).string() + \")\",\n      true)\n    true\n\n  fun assert_ne[A: (Equatable[A] #read & Stringable #read)]\n    (not_expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc): Bool\n  =>\n    \"\"\"\n    Assert that the 2 given expressions are not equal.\n    \"\"\"\n    _check_ne[A](\"ne\", not_expect, actual, msg, loc)\n\n  fun _check_ne[A: (Equatable[A] #read & Stringable)]\n    (check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc)\n    : Bool\n  =>\n    \"\"\"\n    Check that the 2 given expressions are not equal.\n    \"\"\"\n    if not_expect == actual then\n      fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg\n        + \" Expected (\" + not_expect.string() + \") != (\" + actual.string()\n        + \")\")\n      return false\n    end\n\n    log(\n      _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg\n        + \" Got (\" + not_expect.string() + \") != (\" + actual.string() + \")\",\n      true)\n    true\n\n  fun assert_array_eq[A: (Equatable[A] #read & Stringable #read)](\n    expect: ReadSeq[A],\n    actual: ReadSeq[A],\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the contents of the 2 given ReadSeqs are equal.\n    \"\"\"\n    var ok = true\n\n    if expect.size() != actual.size() then\n      ok = false\n    else\n      try\n        var i: USize = 0\n        while i < expect.size() do\n          if expect(i)? != actual(i)? then\n            ok = false\n            break\n          end\n\n          i = i + 1\n        end\n      else\n        ok = false\n      end\n    end\n\n    if not ok then\n      fail(_format_loc(loc) + \"Assert EQ failed. \" + msg + \" Expected (\"\n        + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\")\n      return false\n    end\n\n    log(\n      _format_loc(loc) + \"Assert EQ passed. \" + msg + \" Got (\"\n        + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\",\n      true)\n    true\n\n  fun assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)](\n    expect: ReadSeq[A],\n    actual: ReadSeq[A],\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the contents of the 2 given ReadSeqs are equal ignoring order.\n    \"\"\"\n    try\n      let missing = Array[box->A]\n      let consumed = Array[Bool].init(false, actual.size())\n      for e in expect.values() do\n        var found = false\n        var i: USize = -1\n        for a in actual.values() do\n          i = i + 1\n          if consumed(i)? then continue end\n          if e == a then\n            consumed.update(i, true)?\n            found = true\n            break\n          end\n        end\n        if not found then\n          missing.push(e)\n        end\n      end\n\n      let extra = Array[box->A]\n      for (i, c) in consumed.pairs() do\n        if not c then extra.push(actual(i)?) end\n      end\n\n      if (extra.size() != 0) or (missing.size() != 0) then\n        fail(\n          _format_loc(loc) + \"Assert EQ_UNORDERED failed. \" + msg\n            + \" Expected (\" + _print_array[A](expect) + \") == (\"\n            + _print_array[A](actual) + \"):\"\n            + \"\\nMissing: \" + _print_array[box->A](missing)\n            + \"\\nExtra: \" + _print_array[box->A](extra))\n        return false\n      end\n      log(\n        _format_loc(loc) + \"Assert EQ_UNORDERED passed. \" + msg + \" Got (\"\n          + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\",\n        true)\n      true\n    else\n      fail(\"Assert EQ_UNORDERED failed from an internal error.\")\n      false\n    end\n\n  fun _format_loc(loc: SourceLoc): String =>\n    loc.file() + \":\" + loc.line().string() + \": \"\n\n  fun _print_array[A: Stringable #read](array: ReadSeq[A]): String =>\n    \"\"\"\n    Generate a printable string of the contents of the given readseq to use in\n    error messages.\n    \"\"\"\n    \"[len=\" + array.size().string() + \": \" + \", \".join(array.values()) + \"]\"\n\n  fun long_test(timeout: U64) =>\n    \"\"\"\n    Indicate that this is a long running test that may continue after the\n    test function exits.\n    Once this function is called, complete() must be called to finish the test,\n    unless a timeout occurs.\n    The timeout is specified in nanseconds.\n    \"\"\"\n    _runner.long_test(timeout)\n\n  fun complete(success: Bool) =>\n    \"\"\"\n    MUST be called by each long test to indicate the test has finished, unless\n    a timeout occurs.\n\n    The \"success\" parameter specifies whether the test succeeded. However if\n    any asserts fail the test will be considered a failure, regardless of the\n    value of this parameter.\n\n    Once this is called tear_down() may be called at any time.\n    \"\"\"\n    _runner.complete(success)\n\n  fun expect_action(name: String) =>\n    \"\"\"\n    Can be called in a long test to set up expectations for one or more actions\n    that, when all completed, will complete the test.\n\n    This pattern is useful for cases where you have multiple things that need\n    to happen to complete your test, but don't want to have to collect them\n    all yourself into a single actor that calls the complete method.\n\n    The order of calls to expect_action don't matter - the actions may be\n    completed in any other order to complete the test.\n    \"\"\"\n    _runner.expect_action(name)\n\n  fun complete_action(name: String) =>\n    \"\"\"\n    MUST be called for each action expectation that was set up in a long test\n    to fulfill the expectations. Any expectations that are still outstanding\n    when the long test timeout runs out will be printed by name when it fails.\n\n    Completing all outstanding actions is enough to finish the test. There's no\n    need to also call the complete method when the actions are finished.\n\n    Calling the complete method will finish the test immediately, without\n    waiting for any outstanding actions to be completed.\n    \"\"\"\n    _runner.complete_action(name, true)\n\n  fun fail_action(name: String) =>\n    \"\"\"\n    Call to fail an action, which will also cause the entire test to fail\n    immediately, without waiting the rest of the outstanding actions.\n\n    The name of the failed action will be included in the failure output.\n\n    Usually the action name should be an expected action set up by a call to\n    expect_action, but failing unexpected actions will also fail the test.\n    \"\"\"\n    _runner.complete_action(name, false)\n\n  fun dispose_when_done(disposable: DisposableActor) =>\n    \"\"\"\n    Pass a disposable actor to be disposed of when the test is complete.\n    The actor will be disposed no matter whether the test succeeds or fails.\n\n    If the test is already tearing down, the actor will be disposed immediately.\n    \"\"\"\n    _runner.dispose_when_done(disposable)",
            "title": "test_helper.pony"
        },
        {
            "location": "/src/ponytest/pony_test/",
            "text": "\"\"\"\n# PonyTest package\n\nThe PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.\n\nTo help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n\n* builtin\n* time\n* collections\n\nEach unit test is a class, with a single test function. By default all tests\nrun concurrently.\n\nEach test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.\n\nWhen any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.\n\n## Example program\n\nTo use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.\n\nThe following is a complete program with 2 trivial tests.\n\n```pony\nuse \"ponytest\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String => \"addition\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String => \"subtraction\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](2, 4 - 2)\n```\n\nThe make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.\n\nMain.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.\n\n## Test names\n\nTests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.\n\nArbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.\n\nYou can skip any tests whose names start with a given string by using the\n`--exclude=[prefix]` command line option.\n\nYou can run only tests whose names start with a given string by using the\n`--only=[prefix]` command line option.\n\n## Aggregation\n\nOften it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.\n\nThis can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages `foo` and `bar`.\n\n```pony\nuse \"ponytest\"\nuse foo = \"foo\"\nuse bar = \"bar\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)\n```\n\nAggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.\n\n## Long tests\n\nSimple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.\n\nLong tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.\n\nThe complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.\n\nSince failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.\n\nOn a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.\n\nNote that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.\n\nTimeouts should not be used as the standard method of detecting if a test has\nfailed.\n\n## Exclusion groups\n\nBy default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.\n\nNo tests that are in the same exclusion group will be run concurrently.\n\nExclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.\n\nThe command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.\n\n## Labels\n\nTest can have label. Labels are used to filter which tests are run, by setting\ncommand line argument `--label=[some custom label]`. It can be used to separate\nunit tests from integration tests.\n\nBy default label is empty. You can set it up by overriding `label(): String`\nmethod in unit test.\n\n```pony\nuse \"ponytest\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String => \"_I8AddTest\"\n  fun label(): String => \"simple\"\n  fun apply(h: TestHelper) =>\n    h.assert_eq[I8](1, 1)\n\n```\n\n## Tear down\n\nEach unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.\n\nThe tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.\n\nWhen a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.\n\nThe test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.\n\n\"\"\"\n\nuse \"time\"\n\nactor PonyTest\n  \"\"\"\n  Main test framework actor that organises tests, collates information and\n  prints results.\n  \"\"\"\n\n  embed _groups: Array[(String, _Group)] = Array[(String, _Group)]\n  embed _records: Array[_TestRecord] = Array[_TestRecord]\n  let _env: Env\n  let _timers: Timers = Timers\n  var _do_nothing: Bool = false\n  var _verbose: Bool = false\n  var _sequential: Bool = false\n  var _no_prog: Bool = false\n  var _list_only: Bool = false\n  var _started: USize = 0\n  var _finished: USize = 0\n  var _any_found: Bool = false\n  var _all_started: Bool = false\n\n  // Filtering options\n  var _exclude: String = \"\"\n  var _label: String = \"\"\n  var _only: String = \"\"\n\n  new create(env: Env, list: TestList tag) =>\n    \"\"\"\n    Create a PonyTest object and use it to run the tests from the given\n    TestList\n    \"\"\"\n    _env = env\n    _process_opts()\n    _groups.push((\"\", _SimultaneousGroup))\n    list.tests(this)\n    _all_tests_applied()\n\n  be apply(test: UnitTest iso) =>\n    \"\"\"\n    Run the given test, subject to our filters and options.\n    \"\"\"\n    if _do_nothing then\n      return\n    end\n\n    var name = test.name()\n\n    // Ignore any tests that satisfy our \"exclude\" filter\n    if (_exclude != \"\") and name.at(_exclude, 0) then\n      return\n    end\n\n    // Ignore any tests that don't satisfy our \"only\" filter\n    if (_only != \"\") and (not name.at(_only, 0)) then\n      return\n    end\n\n    // Ignore tests when label arg is set and test label doesn't match\n    if (_label != \"\") and (_label != test.label()) then\n      return\n    end\n\n    _any_found = true\n\n    if _list_only then\n      // Don't actually run tests, just list them\n      _env.out.print(name)\n      return\n    end\n\n    var index = _records.size()\n    _records.push(_TestRecord(_env, name))\n\n    var group = _find_group(test.exclusion_group())\n    group(_TestRunner(this, index, consume test, group, _verbose, _env,\n      _timers))\n\n  fun ref _find_group(group_name: String): _Group =>\n    \"\"\"\n    Find the group to use for the given group name, subject to the\n    --sequential flag.\n    \"\"\"\n    var name = group_name\n\n    if _sequential then\n      // Use the same group for all tests.\n      name = \"all\"\n    end\n\n    for g in _groups.values() do\n      if g._1 == name then\n        return g._2\n      end\n    end\n\n    // Group doesn't exist yet, make it.\n    // We only need one simultaneous group, which we've already made. All new\n    // groups are exclusive.\n    let g = _ExclusiveGroup\n    _groups.push((name, g))\n    g\n\n  be _test_started(id: USize) =>\n    \"\"\"\n    A test has started running, update status info.\n    The id parameter is the test identifier handed out when we created the test\n    helper.\n    \"\"\"\n    _started = _started + 1\n\n    try\n      if not _no_prog then\n        _env.out.print(\n          _started.string() + \" test\" + _plural(_started)\n            + \" started, \" + _finished.string() + \" complete: \"\n            + _records(id)?.name + \" started\")\n      end\n    end\n\n  be _test_complete(id: USize, pass: Bool, log: Array[String] val) =>\n    \"\"\"\n    A test has completed, restore its result and update our status info.\n    The id parameter is the test identifier handed out when we created the test\n    helper.\n    \"\"\"\n    _finished = _finished + 1\n\n    try\n      _records(id)?._result(pass, log)\n\n      if not _no_prog then\n        _env.out.print(\n          _started.string() + \" test\" + _plural(_started)\n            + \" started, \" + _finished.string() + \" complete: \"\n            + _records(id)?.name + \" complete\")\n      end\n    end\n\n    if _all_started and (_finished == _records.size()) then\n      // All tests have completed\n      _print_report()\n    end\n\n  be _all_tests_applied() =>\n    \"\"\"\n    All our tests have been handed to apply(), setup for finishing\n    \"\"\"\n    if _do_nothing then\n      return\n    end\n\n    if not _any_found then\n      // No tests left after applying our filters\n      _env.out.print(\"No tests found\")\n      return\n    end\n\n    if _list_only then\n      // No tests to run\n      return\n    end\n\n    _all_started = true\n    if _finished == _records.size() then\n      // All tests have completed\n      _print_report()\n    end\n\n  fun ref _process_opts() =>\n    \"\"\"\n    Process our command line options.\n    All command line arguments given must be recognised and make sense.\n    State for specified options is stored in object fields.\n    We don't use the options package because we aren't already dependencies.\n    \"\"\"\n    var exe_name = \"\"\n\n    for arg in _env.args.values() do\n      if exe_name == \"\" then\n        exe_name = arg\n        continue\n      end\n\n      if arg == \"--sequential\" then\n        _sequential = true\n      elseif arg == \"--verbose\" then\n        _verbose = true\n      elseif arg == \"--noprog\" then\n        _no_prog = true\n      elseif arg == \"--list\" then\n        _list_only = true\n      elseif arg.compare_sub(\"--exclude=\", 10) is Equal then\n        _exclude = arg.substring(10)\n      elseif arg.compare_sub(\"--label=\", 8) is Equal then\n        _label = arg.substring(8)\n      elseif arg.compare_sub(\"--only=\", 7) is Equal then\n        _only = arg.substring(7)\n      else\n        _env.out.print(\"Unrecognised argument \\\"\" + arg + \"\\\"\")\n        _env.out.print(\"\")\n        _env.out.print(\"Usage:\")\n        _env.out.print(\"  \" + exe_name + \" [options]\")\n        _env.out.print(\"\")\n        _env.out.print(\"Options:\")\n        _env.out.print(\"  --exclude=prefix  - Don't run tests whose names \"\n          + \"start with the given prefix.\")\n        _env.out.print(\"  --only=prefix     - Only run tests whose names \"\n          + \"start with the given prefix.\")\n        _env.out.print(\"  --verbose         - Show all test output.\")\n        _env.out.print(\"  --sequential      - Run tests sequentially.\")\n        _env.out.print(\"  --noprog          - Do not print progress messages.\")\n        _env.out.print(\"  --list            - List but do not run tests.\")\n        _env.out.print(\"  --label=label     - Only run tests with given label\")\n        _do_nothing = true\n        return\n      end\n    end\n\n  fun _print_report() =>\n    \"\"\"\n    The tests are all complete, print out the results.\n    \"\"\"\n    var pass_count: USize = 0\n    var fail_count: USize = 0\n\n    // First we print the result summary for each test, in the order that they\n    // were given to us.\n    for rec in _records.values() do\n      if rec._report(_verbose) then\n        pass_count = pass_count + 1\n      else\n        fail_count = fail_count + 1\n      end\n    end\n\n    // Next we print the pass / fail stats.\n    _env.out.print(\"----\")\n    _env.out.print(\"---- \" + _records.size().string() + \" test\"\n      + _plural(_records.size()) + \" ran.\")\n    _env.out.print(_Color.green() + \"---- Passed: \" + pass_count.string()\n      + _Color.reset())\n\n    if fail_count == 0 then\n      // Success, nothing failed.\n      return\n    end\n\n    // Not everything passed.\n    _env.out.print(_Color.red() + \"**** FAILED: \" + fail_count.string()\n      + \" test\" + _plural(fail_count) + \", listed below:\" + _Color.reset())\n\n    // Finally print our list of failed tests.\n    for rec in _records.values() do\n      rec._list_failed()\n    end\n\n    _env.exitcode(-1)\n\n  fun _plural(n: USize): String =>\n    \"\"\"\n    Return a \"s\" or an empty string depending on whether the given number is 1.\n    For use when printing possibly plural words, eg \"test\" or \"tests\".\n    \"\"\"\n    if n == 1 then \"\" else \"s\" end",
            "title": "pony_test.pony"
        },
        {
            "location": "/src/random/xorshift/",
            "text": "class XorShift128Plus is Random\n  \"\"\"\n  This is an implementation of xorshift+, as detailed at:\n\n  http://xoroshiro.di.unimi.it\n\n  This should only be used for legacy applications that specifically require\n  XorShift128Plus, otherwise use Rand.\n  \"\"\"\n  var _x: U64\n  var _y: U64\n\n  new create(x: U64 = 5489, y: U64 = 0) =>\n    \"\"\"\n    Create with the specified seed. Returned values are deterministic for a\n    given seed.\n    \"\"\"\n    _x = x\n    _y = y\n    next()\n\n  fun ref next(): U64 =>\n    \"\"\"\n    A random integer in [0, 2^64)\n    \"\"\"\n    var y = _x\n    let x = _y\n    let r = x + y\n    _x = x\n    y = y xor (y << 23)\n    _y = y xor x xor (y >> 18) xor (x >> 5)\n    r",
            "title": "xorshift.pony"
        },
        {
            "location": "/src/random/xoroshiro/",
            "text": "class XorOshiro128Plus is Random\n  \"\"\"\n  This is an implementation of xoroshiro128+, as detailed at:\n\n  http://xoroshiro.di.unimi.it\n\n  This is currently the default Rand implementation.\n  \"\"\"\n  var _x: U64\n  var _y: U64\n\n  new create(x: U64 = 5489, y: U64 = 0) =>\n    \"\"\"\n    Create with the specified seed. Returned values are deterministic for a\n    given seed.\n    \"\"\"\n    _x = x\n    _y = y\n    next()\n\n  fun ref next(): U64 =>\n    \"\"\"\n    A random integer in [0, 2^64)\n    \"\"\"\n    let x = _x\n    var y = _y\n    let r = x + y\n\n    y = x xor y\n    _x = x.rotl(55) xor y xor (y << 14)\n    _y = y.rotl(36)\n    r",
            "title": "xoroshiro.pony"
        },
        {
            "location": "/src/random/random/",
            "text": "\"\"\"\n# Random package\n\nThe Random package provides support generating random numbers. The package\nprovides random number generators you can use in your code, a dice roller and\na trait for implementing your own random number generator.\n\nIf your application does not require a specific generator, use Rand.\n\nSeed values can contain up to 128 bits of randomness in the form of two U64s.\nA common non-cryptographically secure way to seed a generator is with\n`Time.now`.\n\n```pony\nlet rand = Rand\nlet n = rand.next()\n```\n\"\"\"\ntype Rand is XorOshiro128Plus\n\ntrait Random\n  \"\"\"\n  The `Random` trait should be implemented by all random number generators. The\n  only method you need to implement is `fun ref next(): 64`. Once that method\n  has been implemented, the `Random` trait provides default implementations of\n  conversions to other number types.\n  \"\"\"\n  new create(x: U64 = 5489, y: U64 = 0)\n    \"\"\"\n    Create with the specified seed. Returned values are deterministic for a\n    given seed.\n    \"\"\"\n\n  fun tag has_next(): Bool =>\n    \"\"\"\n    If used as an iterator, this always has another value.\n    \"\"\"\n    true\n\n  fun ref next(): U64\n    \"\"\"\n    A random integer in [0, 2^64)\n    \"\"\"\n\n  fun ref u8(): U8 =>\n    \"\"\"\n    A random integer in [0, 2^8)\n    \"\"\"\n    (next() >> 56).u8()\n\n  fun ref u16(): U16 =>\n    \"\"\"\n    A random integer in [0, 2^16)\n    \"\"\"\n    (next() >> 48).u16()\n\n  fun ref u32(): U32 =>\n    \"\"\"\n    A random integer in [0, 2^32)\n    \"\"\"\n    (next() >> 32).u32()\n\n  fun ref u64(): U64 =>\n    \"\"\"\n    A random integer in [0, 2^64)\n    \"\"\"\n    next()\n\n  fun ref u128(): U128 =>\n    \"\"\"\n    A random integer in [0, 2^128)\n    \"\"\"\n    (next().u128() << 64) or next().u128()\n\n  fun ref ulong(): ULong =>\n    \"\"\"\n    A random integer in [0, ULong.max_value()]\n    \"\"\"\n    ifdef ilp32 or llp64 then\n      (next() >> 32).ulong()\n    else\n      next().ulong()\n    end\n\n  fun ref usize(): USize =>\n    \"\"\"\n    A random integer in [0, USize.max_value()]\n    \"\"\"\n    ifdef ilp32 then\n      (next() >> 32).usize()\n    else\n      next().usize()\n    end\n\n  fun ref i8(): I8 =>\n    \"\"\"\n    A random integer in [-2^7, 2^7)\n    \"\"\"\n    u8().i8()\n\n  fun ref i16(): I16 =>\n    \"\"\"\n    A random integer in [-2^15, 2^15)\n    \"\"\"\n    u16().i16()\n\n  fun ref i32(): I32 =>\n    \"\"\"\n    A random integer in [-2^31, 2^31)\n    \"\"\"\n    u32().i32()\n\n  fun ref i64(): I64 =>\n    \"\"\"\n    A random integer in [-2^63, 2^63)\n    \"\"\"\n    u64().i64()\n\n  fun ref i128(): I128 =>\n    \"\"\"\n    A random integer in [-2^127, 2^127)\n    \"\"\"\n    u128().i128()\n\n  fun ref ilong(): ILong =>\n    \"\"\"\n    A random integer in [ILong.min_value(), ILong.max_value()]\n    \"\"\"\n    ulong().ilong()\n\n  fun ref isize(): ISize =>\n    \"\"\"\n    A random integer in [ISize.min_value(), ISize.max_value()]\n    \"\"\"\n    usize().isize()\n\n  fun ref int[N: (Unsigned val & Real[N] val) = U64](n: N): N =>\n    \"\"\"\n    A random integer in [0, n)\n    \"\"\"\n    N.from[F64](real() * n.f64())\n\n  fun ref real(): F64 =>\n    \"\"\"\n    A random number in [0, 1)\n    \"\"\"\n    (next() >> 11).f64() * (F64(1) / 9007199254740992)\n\n  fun ref shuffle[A](array: Array[A]) =>\n    \"\"\"\n    Shuffle the elements of the array into a random order, mutating the array.\n    \"\"\"\n    var i: USize = array.size()\n    try\n      while i > 1 do\n        let ceil = i = i - 1\n        array.swap_elements(i, int[USize](ceil))?\n      end\n    end",
            "title": "random.pony"
        },
        {
            "location": "/src/random/mt/",
            "text": "class MT is Random\n  \"\"\"\n  A Mersenne Twister. This is a non-cryptographic random number generator. This\n  should only be used for legacy applications that require a Mersenne Twister,\n  otherwise use Rand.\n  \"\"\"\n  embed _state: Array[U64]\n  var _index: USize\n\n  new create(x: U64 = 5489, y: U64 = 0) =>\n    \"\"\"\n    Create with the specified seed. Returned values are deterministic for a\n    given seed.\n    \"\"\"\n    _state = Array[U64](_n())\n    _index = _n()\n\n    var seed = x xor y\n\n    _state.push(seed)\n    var i: USize = 1\n\n    while i < _n() do\n      seed = ((seed xor (seed >> 62)) * 6364136223846793005) + i.u64()\n      _state.push(seed)\n      i = i + 1\n    end\n\n  fun ref next(): U64 =>\n    \"\"\"\n    A random integer in [0, 2^64)\n    \"\"\"\n    if _index >= _n() then\n      _populate()\n    end\n\n    try\n      var x = _state(_index)?\n      _index = _index + 1\n\n      x = x xor ((x >> 29) and 0x5555555555555555)\n      x = x xor ((x << 17) and 0x71d67fffeda60000)\n      x = x xor ((x << 37) and 0xfff7eee000000000)\n      x xor (x >> 43)\n    else\n      0\n    end\n\n  fun ref _populate() =>\n    \"\"\"\n    Repopulates the state array.\n    \"\"\"\n    try\n      _index = 0\n      var x = _state(0)?\n      var i: USize = 0\n\n      while i < _m() do\n        x = _lower(i, x)?\n        i = i + 1\n      end\n\n      x = _state(_m())?\n      i = _m()\n\n      while i < _n1() do\n        x = _upper(i, x)?\n        i = i + 1\n      end\n\n      _wrap()?\n    end\n\n  fun tag _n(): USize => 312\n  fun tag _m(): USize => 156\n  fun tag _n1(): USize => _n() - 1\n\n  fun tag _mask(x: U64, y: U64): U64 =>\n    (x and 0xffffffff80000000) or (y and 0x000000007fffffff)\n\n  fun tag _matrix(x: U64): U64 => (x and 1) * 0xb5026f5aa96619e9\n\n  fun tag _mix(x: U64, y: U64): U64 =>\n    let z = _mask(x, y)\n    (z >> 1) xor _matrix(z)\n\n  fun ref _lower(i: USize, x: U64): U64 ? =>\n    let y = _state(i + 1)?\n    _state(i)? = _state(i + _m())? xor _mix(x, y)\n    y\n\n  fun ref _upper(i: USize, x: U64): U64 ? =>\n    let y = _state(i + 1)?\n    _state(i)? = _state(i - _m())? xor _mix(x, y)\n    y\n\n  fun ref _wrap(): U64 ? =>\n    let x = _state(_n1())?\n    let y = _state(0)?\n    _state(_n1())? = _state(_m() - 1)? xor _mix(x, y)\n    y",
            "title": "mt.pony"
        },
        {
            "location": "/src/random/dice/",
            "text": "class Dice\n  \"\"\"\n  A simple dice roller.\n  \"\"\"\n  var r: Random\n\n  new create(from: Random) =>\n    \"\"\"\n    Initialise with a random number generator.\n    \"\"\"\n    r = from\n\n  fun ref apply(count: U64, sides: U64): U64 =>\n    \"\"\"\n    Return the sum of `count` rolls of a die with the given number of `sides`.\n    The die is numbered from 1 to `sides`. For example, count = 2 and\n    sides = 6 will return a value between 2 and 12.\n    \"\"\"\n    var sum = count\n    var i: U64 = 0\n\n    while i < count do\n      sum = sum + r.int(sides)\n      i = i + 1\n    end\n    sum",
            "title": "dice.pony"
        },
        {
            "location": "/src/time/timers/",
            "text": "use \"collections\"\n\nuse @pony_asio_event_create[AsioEventID](\n  owner: AsioEventNotify,\n  fd: U32,\n  flags: U32,\n  nsec: U64,\n  noisy: Bool)\nuse @pony_asio_event_setnsec[U32](event: AsioEventID, nsec: U64)\nuse @pony_asio_event_unsubscribe[None](event: AsioEventID)\nuse @pony_asio_event_destroy[None](event: AsioEventID)\n\nactor Timers\n  \"\"\"\n  A hierarchical set of timing wheels.\n  \"\"\"\n  var _current: U64 = 0\n  let _slop: USize\n  embed _map: MapIs[Timer tag, Timer] = MapIs[Timer tag, Timer]\n  embed _wheel: Array[_TimingWheel] = Array[_TimingWheel](_wheels())\n  embed _pending: List[Timer] = List[Timer]\n  var _event: AsioEventID = AsioEvent.none()\n\n  new create(slop: USize = 20) =>\n    \"\"\"\n    Create a timer handler with the specified number of slop bits. No slop bits\n    means trying for nanosecond resolution. 10 slop bits is approximately\n    microsecond resolution, 20 slop bits is approximately millisecond\n    resolution.\n    \"\"\"\n    _slop = slop\n    _set_time()\n\n    for i in Range(0, _wheels()) do\n      _wheel.push(_TimingWheel(i))\n    end\n\n  be apply(timer: Timer iso) =>\n    \"\"\"\n    Sets a timer. Fire it if need be, schedule it on the right timing wheel,\n    then rearm the timer.\n    \"\"\"\n    let timer': Timer ref = consume timer\n    _map(timer') = timer'\n    timer'._slop(_slop)\n    _fire(timer')\n    _advance()\n\n  be cancel(timer: Timer tag) =>\n    \"\"\"\n    Cancels a timer.\n    \"\"\"\n    try\n      (_, let timer') = _map.remove(timer)?\n      timer'._cancel()\n\n      if (_map.size() == 0) and (not _event.is_null()) then\n        // Unsubscribe an existing event.\n        @pony_asio_event_unsubscribe(_event)\n        _event = AsioEvent.none()\n      end\n    end\n\n  be dispose() =>\n    \"\"\"\n    Dispose of this set of timing wheels.\n    \"\"\"\n    for wheel in _wheel.values() do\n      wheel.clear()\n    end\n    _map.clear()\n\n    if not _event.is_null() then\n      @pony_asio_event_unsubscribe(_event)\n      _event = AsioEvent.none()\n    end\n\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32) =>\n    \"\"\"\n    When the event fires, advance the timing wheels.\n    \"\"\"\n    if AsioEvent.disposable(flags) then\n      @pony_asio_event_destroy(event)\n    elseif event is _event then\n      _advance()\n    end\n\n  fun ref _advance() =>\n    \"\"\"\n    Update the current time, process all the timing wheels, and set the event\n    for the next time we need to advance.\n    \"\"\"\n    let elapsed = _set_time()\n\n    try\n      for i in Range(0, _wheels()) do\n        if not _wheel(i)?.advance(_pending, _current, elapsed) then\n          break\n        end\n      end\n\n      for timer in _pending.values() do\n        _fire(timer)\n      end\n    end\n\n    _pending.clear()\n\n    var nsec = _next()\n\n    if _event.is_null() then\n      if nsec != -1 then\n        // Create a new event.\n        _event =\n          @pony_asio_event_create(this, 0, AsioEvent.timer(), nsec, true)\n      end\n    else\n      if nsec != -1 then\n        // Update an existing event.\n        @pony_asio_event_setnsec(_event, nsec)\n      else\n        // Unsubscribe an existing event.\n        @pony_asio_event_unsubscribe(_event)\n        _event = AsioEvent.none()\n      end\n    end\n\n  fun ref _fire(timer: Timer) =>\n    \"\"\"\n    Fire a timer if necessary, then schedule it on the correct timing wheel\n    based on how long it is until it expires.\n    \"\"\"\n    if not timer._fire(_current) then\n      try\n        _map.remove(timer)?\n      end\n      return\n    end\n\n    try\n      let rem = timer._next() - _current\n      _get_wheel(rem)?.schedule(consume timer)\n    end\n\n  fun _next(): U64 =>\n    \"\"\"\n    Return the next time at which the timing wheels should be advanced. This is\n    adjusted for slop, so it yields nanoseconds. If no events are pending, this\n    returns -1.\n    \"\"\"\n    var next: U64 = -1\n\n    try\n      for i in Range(0, _wheels()) do\n        next = next.min(_wheel(i)?.next(_current))\n      end\n    end\n\n    if next != -1 then\n      next = next << _slop.u64()\n    end\n\n    next\n\n  fun ref _set_time(): U64 =>\n    \"\"\"\n    Set the current time with precision reduced by the slop bits. Return the\n    elapsed time.\n    \"\"\"\n    let previous = _current = Time.nanos() >> _slop.u64()\n    _current - previous\n\n  fun ref _get_wheel(rem: U64): _TimingWheel ? =>\n    \"\"\"\n    Get the hierarchical timing wheel for the given time until expiration.\n    \"\"\"\n    let t = rem.min(_expiration_max())\n    let i = ((t.bitwidth() - t.clz()) - 1).usize() / _bits()\n    _wheel(i)?\n\n  fun tag _expiration_max(): U64 =>\n    \"\"\"\n    Get the maximum time the timing wheels cover. Anything beyond this is\n    scheduled on the last timing wheel.\n    \"\"\"\n    ((1 << (_wheels() * _bits())) - 1).u64()\n\n  fun tag _wheels(): USize => 4\n  fun tag _bits(): USize => 6",
            "title": "timers.pony"
        },
        {
            "location": "/src/time/timer_notify/",
            "text": "interface TimerNotify\n  \"\"\"\n  Notifications for timer.\n  \"\"\"\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    \"\"\"\n    Called with the the number of times the timer has fired since this was last\n    called. Usually, the value of `count` will be 1. If it is not 1, it means\n    that the timer isn't firing on schedule.\n\n    For example, if your timer is set to fire every 10 milliseconds, and\n    `count` is 2, that means it has been between 20-29 milliseconds since the\n    last time your timer fired. Non 1 values for a timer are rare and indicate\n    a system under heavy load.\n\n    Return true to reschedule the timer (if it has an interval), or\n    false to cancel the timer (even if it has an interval).\n    \"\"\"\n    true\n\n  fun ref cancel(timer: Timer) =>\n    \"\"\"\n    Called if the timer is cancelled. This is also called if the notifier\n    returns false from its `apply` method.\n    \"\"\"\n    None",
            "title": "timer_notify.pony"
        },
        {
            "location": "/src/time/timer/",
            "text": "use \"collections\"\n\nclass Timer\n  \"\"\"\n  The `Timer` class represents a timer that fires after an expiration\n  time, and then fires at an interval. When a `Timer` fires, it calls\n  the `apply` method of the `TimerNotify` object that was passed to it\n  when it was created.\n\n  The following example waits 5 seconds and then fires every 2\n  seconds, and when it fires the `TimerNotify` object prints how many\n  times it has been called:\n\n  ```pony\n  use \"time\"\n\n  actor Main\n    new create(env: Env) =>\n      let timers = Timers\n      let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n      timers(consume timer)\n\n  class Notify is TimerNotify\n    let _env: Env\n    var _counter: U32 = 0\n    new iso create(env: Env) =>\n      _env = env\n    fun ref apply(timer: Timer, count: U64): Bool =>\n      _env.out.print(_counter.string())\n      _counter = _counter + 1\n      true\n  ```\n  \"\"\"\n  var _expiration: U64\n  var _interval: U64\n  let _notify: TimerNotify\n  embed _node: ListNode[Timer]\n\n  new iso create(\n    notify: TimerNotify iso,\n    expiration: U64,\n    interval: U64 = 0)\n  =>\n    \"\"\"\n    Create a new timer. The expiration time should be a nanosecond count\n    until the first expiration. The interval should also be in nanoseconds.\n    \"\"\"\n    _expiration = expiration + Time.nanos()\n    _interval = interval\n    _notify = consume notify\n    _node = ListNode[Timer]\n    try _node()? = this end\n\n  new abs(notify: TimerNotify, expiration: (I64, I64), interval: U64 = 0) =>\n    \"\"\"\n    Creates a new timer with an absolute expiration time rather than a relative\n    time. The expiration time is wall-clock adjusted system time.\n    \"\"\"\n    _expiration = _abs_expiration_time(expiration)\n    _interval = interval\n    _notify = notify\n    _node = ListNode[Timer]\n    try _node()? = this end\n\n  fun ref _cancel() =>\n    \"\"\"\n    Remove the timer from any list.\n    \"\"\"\n    _node.remove()\n    _notify.cancel(this)\n\n  fun ref _get_node(): ListNode[Timer] =>\n    \"\"\"\n    Returns the list node pointing to the timer. Used to schedule the timer in\n    a queue.\n    \"\"\"\n    _node\n\n  fun ref _slop(bits: USize) =>\n    \"\"\"\n    Apply slop bits to the expiration time and interval. This reduces the\n    precision by the given number of bits, effectively quantizing time.\n    \"\"\"\n    _expiration = _expiration >> bits.u64()\n\n    if _interval > 0 then\n      _interval = (_interval >> bits.u64()).max(1)\n    end\n\n  fun ref _fire(current: U64): Bool =>\n    \"\"\"\n    A timer is fired if its expiration time is in the past. The notifier is\n    called with a count based on the elapsed time since expiration and the\n    timer interval. The expiration time is set to the next expiration. Returns\n    true if the timer should be rescheduled, false otherwise.\n    \"\"\"\n    let elapsed = current - _expiration\n\n    if elapsed < (1 << 63) then\n      let count = (elapsed / _interval) + 1\n      _expiration = _expiration + (count * _interval)\n\n      if not _notify(this, count) then\n        _notify.cancel(this)\n        return false\n      end\n    end\n\n    (_interval > 0) or ((_expiration - current) < (1 << 63))\n\n  fun _next(): U64 =>\n    \"\"\"\n    Returns the next expiration time.\n    \"\"\"\n    _expiration\n\n  fun tag _abs_expiration_time(wall: (I64, I64)): U64 =>\n    \"\"\"\n    Converts a wall-clock adjusted system time to absolute expiration time\n    \"\"\"\n    let wall_now = Time.now()\n    Time.nanos()\n      + (((wall._1 * 1000000000) + wall._2)\n      - ((wall_now._1 * 1000000000) + wall_now._2)).u64()",
            "title": "timer.pony"
        },
        {
            "location": "/src/time/time/",
            "text": "\"\"\"\n# Time Package\n\nThe Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.\n\"\"\"\n\nuse \"lib:rt\" if linux\n\nuse @clock_gettime[I32](clock: U32, ts: Pointer[(I64, I64)])\n  if lp64 and (linux or bsd)\n\nuse @clock_gettime[I32](clock: U32, ts: Pointer[(I32, I32)])\n  if ilp32 and (linux or bsd)\n\nuse @mach_absolute_time[U64]() if osx\n\ntype _Clock is (_ClockRealtime | _ClockMonotonic)\n\nprimitive _ClockRealtime\n  fun apply(): U32 =>\n    ifdef linux or bsd then\n      0\n    else\n      compile_error \"no clock_gettime realtime clock\"\n    end\n\nprimitive _ClockMonotonic\n  fun apply(): U32 =>\n    ifdef linux then\n      1\n    elseif bsd then\n      4\n    else\n      compile_error \"no clock_gettime monotonic clock\"\n    end\n\nprimitive Time\n  \"\"\"\n  A collection of ways to fetch the current time.\n  \"\"\"\n  fun now(): (I64 /*sec*/, I64 /*nsec*/) =>\n    \"\"\"\n    The wall-clock adjusted system time with nanoseconds.\n    Return: (seconds, nanoseconds)\n    \"\"\"\n    ifdef osx then\n      var ts: (I64, I64) = (0, 0)\n      @gettimeofday[I32](addressof ts, U64(0))\n      (ts._1, ts._2 * 1000)\n    elseif linux or bsd then\n      _clock_gettime(_ClockRealtime)\n    elseif windows then\n      var ft: (U32, U32) = (0, 0)\n      @GetSystemTimeAsFileTime[None](addressof ft)\n      var qft = ft._1.u64() or (ft._2.u64() << 32)\n      var epoch = qft.i64() - 116444736000000000\n      var sec = epoch / 10000000\n      var nsec = (epoch - (sec * 10000000)) * 100\n      (sec, nsec)\n    else\n      compile_error \"unsupported platform\"\n    end\n\n  fun seconds(): I64 =>\n    \"\"\"\n    The wall-clock adjusted system time.\n    \"\"\"\n    @time[I64](U64(0))\n\n  fun millis(): U64 =>\n    \"\"\"\n    Monotonic unadjusted milliseconds.\n    \"\"\"\n    ifdef osx then\n      @mach_absolute_time() / 1000000\n    elseif linux or bsd then\n      var ts = _clock_gettime(_ClockMonotonic)\n      ((ts._1 * 1000) + (ts._2 / 1000000)).u64()\n    elseif windows then\n      (let qpc, let qpf) = _query_performance_counter()\n      (qpc * 1000) / qpf\n    else\n      compile_error \"unsupported platform\"\n    end\n\n  fun micros(): U64 =>\n    \"\"\"\n    Monotonic unadjusted microseconds.\n    \"\"\"\n    ifdef osx then\n      @mach_absolute_time() / 1000\n    elseif linux or bsd then\n      var ts = _clock_gettime(_ClockMonotonic)\n      ((ts._1 * 1000000) + (ts._2 / 1000)).u64()\n    elseif windows then\n      (let qpc, let qpf) = _query_performance_counter()\n      (qpc * 1000000) / qpf\n    else\n      compile_error \"unsupported platform\"\n    end\n\n  fun nanos(): U64 =>\n    \"\"\"\n    Monotonic unadjusted nanoseconds.\n    \"\"\"\n    ifdef osx then\n      @mach_absolute_time()\n    elseif linux or bsd then\n      var ts = _clock_gettime(_ClockMonotonic)\n      ((ts._1 * 1000000000) + ts._2).u64()\n    elseif windows then\n      (let qpc, let qpf) = _query_performance_counter()\n      (qpc * 1000000000) / qpf\n    else\n      compile_error \"unsupported platform\"\n    end\n\n  fun cycles(): U64 =>\n    \"\"\"\n    Processor cycle count. Don't use this for performance timing, as it does\n    not control for out-of-order execution.\n    \"\"\"\n    @\"llvm.readcyclecounter\"[U64]()\n\n  fun perf_begin(): U64 =>\n    \"\"\"\n    Get a cycle count for beginning a performance testing block. This will\n    will prevent instructions from before this call leaking into the block and\n    instructions after this call being executed earlier.\n    \"\"\"\n    ifdef x86 then\n      @\"internal.x86.cpuid\"[(I32, I32, I32, I32)](I32(0))\n      @\"llvm.x86.rdtsc\"[U64]()\n    else\n      compile_error \"perf_begin only supported on x86\"\n    end\n\n  fun perf_end(): U64 =>\n    \"\"\"\n    Get a cycle count for ending a performance testing block. This will\n    will prevent instructions from after this call leaking into the block and\n    instructions before this call being executed later.\n    \"\"\"\n    ifdef x86 then\n      var aux: I32 = 0\n      var ts = @\"internal.x86.rdtscp\"[U64](addressof aux)\n      @\"internal.x86.cpuid\"[(I32, I32, I32, I32)](I32(0))\n      ts\n    else\n      compile_error \"perf_end only supported on x86\"\n    end\n\n  fun _clock_gettime(clock: _Clock): (I64, I64) =>\n    \"\"\"\n    Return a clock time on linux and bsd.\n    \"\"\"\n    ifdef lp64 and (linux or bsd) then\n      var ts: (I64, I64) = (0, 0)\n      @clock_gettime(clock(), addressof ts)\n      ts\n    elseif ilp32 and (linux or bsd) then\n      var ts: (I32, I32) = (0, 0)\n      @clock_gettime(clock(), addressof ts)\n      (ts._1.i64(), ts._2.i64())\n    else\n      compile_error \"no clock_gettime\"\n    end\n\n  fun _query_performance_counter(): (U64 /* qpc */, U64 /* qpf */) =>\n    \"\"\"\n    Return QPC and QPF.\n    \"\"\"\n    ifdef windows then\n      var pf: (U32, U32) = (0, 0)\n      var pc: (U32, U32) = (0, 0)\n      @QueryPerformanceFrequency[U32](addressof pf)\n      @QueryPerformanceCounter[U32](addressof pc)\n      let qpf = pf._1.u64() or (pf._2.u64() << 32)\n      let qpc = pc._1.u64() or (pc._2.u64() << 32)\n      (qpc, qpf)\n    else\n      compile_error \"no QueryPerformanceCounter\"\n    end",
            "title": "time.pony"
        },
        {
            "location": "/src/time/posix_date/",
            "text": "class PosixDate\n  \"\"\"\n  Represents a proleptic Gregorian date and time, without specifying a\n  time zone. The day of month, month, day of week, and day of year are all\n  indexed from 1, i.e. January is 1, Monday is 1.\n  \"\"\"\n  var nsec: I32 = 0\n  var sec: I32 = 0\n  var min: I32 = 0\n  var hour: I32 = 0\n  var day_of_month: I32 = 1\n  var month: I32 = 1\n  var year: I32 = 1970\n  var day_of_week: I32 = 4\n  var day_of_year: I32 = 1\n\n  new create(seconds: I64 = 0, nanoseconds: I64 = 0) =>\n    \"\"\"\n    Create a date from a POSIX time. Negative arguments will be changed to zero.\n    \"\"\"\n    @ponyint_gmtime[None](this,\n      _negative_to_zero(seconds),\n      _negative_to_zero(nanoseconds))\n\n  fun time(): I64 =>\n    \"\"\"\n    Return a POSIX time. Treats the date as UTC.\n    \"\"\"\n    @ponyint_timegm[I64](this)\n\n  fun ref normal() =>\n    \"\"\"\n    Normalise all the fields of the date. For example, if the hour is 24, it is\n    set to 0 and the day is advanced. This allows fields to be changed naively,\n    eg. adding 1000 to hours to advance the time by 1000 hours, and then\n    normalising the date.\n    \"\"\"\n    @ponyint_gmtime[None](this, time(), nsec)\n\n  fun format(fmt: String): String =>\n    \"\"\"\n    Format the time as for strftime.\n    \"\"\"\n    recover\n      String.from_cstring(@ponyint_formattime[Pointer[U8]](this,\n        fmt.cstring()))\n    end\n\n  fun _negative_to_zero(value: I64): I64 =>\n    if value > 0 then\n      value\n    else\n      0\n    end",
            "title": "posix_date.pony"
        },
        {
            "location": "/src/time/nanos/",
            "text": "primitive Nanos\n  \"\"\"\n  Collection of utility functions for converting various durations of time\n  to nanoseconds, for passing to other functions in the time package.\n  \"\"\"\n  fun from_seconds(t: U64): U64 =>\n    t * 1_000_000_000\n\n  fun from_millis(t: U64): U64 =>\n    t * 1_000_000\n\n  fun from_micros(t: U64): U64 =>\n    t * 1_000\n\n  fun from_seconds_f(t: F64): U64 =>\n    (t * 1_000_000_000).trunc().u64()\n\n  fun from_millis_f(t: F64): U64 =>\n    (t * 1_000_000).trunc().u64()\n\n  fun from_micros_f(t: F64): U64 =>\n    (t * 1_000).trunc().u64()\n\n  fun from_wall_clock(wall: (I64, I64)): U64 =>\n    ((wall._1 * 1000000000) + wall._2).u64()",
            "title": "nanos.pony"
        }
    ]
}