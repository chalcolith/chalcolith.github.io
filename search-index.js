var searchIndex = {};
searchIndex['rslogic'] = {"items":[[0,"","rslogic","# Rust Logic",null,null],[0,"goal","","# Logical Goals",null,null],[3,"Fail","rslogic::goal","Evaluating a `Fail` goal always results in zero states.",null,null],[3,"UnifyVal","","Evaluating a `UnifyVal` goal attempts to unify a variable and a value.",null,null],[3,"UnifyVar","","Evaluating a `UnifyVar` goal attempts to unify the variables.",null,null],[3,"Conjunction","","A `Conjunction` goal evaluates its sub-goal `a` using a given state,\nthen evaluates sub-goal `b` using the results.",null,null],[3,"Disjunction","","Evaluating a `Disjunction` goal returns all the possible states of evaluating `a` and `b`.",null,null],[3,"Predicate","","Evaluating a `Predicate` goal returns the given state only if the function returns `true`.",null,null],[5,"fail","","Creates a `Fail` goal.",null,{"inputs":[],"output":{"name":"fail"}}],[5,"unify_val","","Creates a `UnifyVal` goal that attempts to unify the variable and the value.",null,{"inputs":[{"name":"var"},{"name":"t"}],"output":{"name":"unifyval"}}],[5,"unify_vars","","Creates a `UnifyVar` goal that attempts to unify the variables.",null,{"inputs":[{"name":"var"},{"name":"var"}],"output":{"name":"unifyvar"}}],[5,"conj","","Creates a `Conjunction` goal which returns the conjunction (logical AND) of evaluating the two sub-goals.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"conjunction"}}],[5,"disj","","Creates a `Disjunction` goal which returns the disjunction (logical OR) of evaluating the two sub-goals.",null,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"disjunction"}}],[5,"pred","","Creates a `Predicate` goal that filters a set of possible states with the given function.",null,{"inputs":[{"name":"f"}],"output":{"name":"predicate"}}],[8,"Goal","","Evaluate a `Goal` to produce zero or more `State`s, or\ncollections of variable bindings.",null,null],[10,"eval","","",0,{"inputs":[{"name":"goal"},{"name":"state"}],"output":{"name":"possiblestates"}}],[11,"eval","","",1,{"inputs":[{"name":"fail"},{"name":"state"}],"output":{"name":"possiblestates"}}],[11,"eval","","",2,{"inputs":[{"name":"unifyval"},{"name":"state"}],"output":{"name":"possiblestates"}}],[11,"eval","","",3,{"inputs":[{"name":"unifyvar"},{"name":"state"}],"output":{"name":"possiblestates"}}],[11,"eval","","",4,{"inputs":[{"name":"conjunction"},{"name":"state"}],"output":{"name":"possiblestates"}}],[11,"eval","","",5,{"inputs":[{"name":"disjunction"},{"name":"state"}],"output":{"name":"possiblestates"}}],[11,"eval","","",6,{"inputs":[{"name":"predicate"},{"name":"state"}],"output":{"name":"possiblestates"}}],[11,"unify","collections::string","",7,{"inputs":[{"name":"string"},{"name":"string"},{"name":"state"}],"output":{"name":"possiblestates"}}],[0,"state","rslogic","# Logical States",null,null],[3,"Var","rslogic::state","Represents a logical variable.  A variable must be created by calling\n`State::make_var()` before a goal is evaluated (by passing the\nresulting state to a goal).",null,null],[3,"State","","A logical state, containing a collection of variable bindings.",null,null],[6,"PossibleStates","","A collection of possible states.",null,null],[8,"Unif","","Values used in a state must be unifiable.  Unifying two values produces\nzero or more possible states, where variables that may be contained in the\nvalues may be bound in various combinations.",null,null],[10,"unify","","",8,{"inputs":[{"name":"unif"},{"name":"t"},{"name":"state"}],"output":{"name":"possiblestates"}}],[11,"clone","","",9,{"inputs":[{"name":"var"}],"output":{"name":"var"}}],[11,"empty","","Creates an empty state.",10,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"binds_var","","Returns `true` if the variable is bound in the state.",10,{"inputs":[{"name":"state"},{"name":"var"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value bound to the variable in the state,\nor None if the var4iable is not bound.",10,{"inputs":[{"name":"state"},{"name":"var"}],"output":{"name":"option"}}],[11,"unify_val","","Attempts to unify a variable with a value.  If the variable is not bound,\nreturns a new state containing a binding to the value.  If the variable is\nalready bound, returns the unification of the two values.",10,{"inputs":[{"name":"state"},{"name":"var"},{"name":"t"}],"output":{"name":"possiblestates"}}],[11,"unify_var","","Attempts to unify two variables.",10,{"inputs":[{"name":"state"},{"name":"var"},{"name":"var"}],"output":{"name":"possiblestates"}}],[11,"make_var","","Creates a new variable and a new state with which it is usable.",10,null],[11,"clone","","",10,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"clone_from","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":null}]],"paths":[[8,"Goal"],[3,"Fail"],[3,"UnifyVal"],[3,"UnifyVar"],[3,"Conjunction"],[3,"Disjunction"],[3,"Predicate"],[3,"String"],[8,"Unif"],[3,"Var"],[3,"State"]]};
initSearch(searchIndex);
