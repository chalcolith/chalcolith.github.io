{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"buffered--index/","title":"Buffered Package","text":"<p>The Buffered package provides two classes, <code>Writer</code> and <code>Reader</code>, for writing and reading messages using common encodings. These classes are useful when dealing with things like network data and binary file formats.</p>"},{"location":"buffered--index/#example-program","title":"Example program","text":"<pre><code>use \"buffered\"\n\nactor Main\n  new create(env: Env) =&gt;\n    let reader = Reader\n    let writer = Writer\n\n    writer.u32_be(42)\n    writer.f32_be(3.14)\n\n    let b = recover iso Array[U8] end\n\n    for chunk in writer.done().values() do\n      b.append(chunk)\n    end\n\n    reader.append(consume b)\n\n    try\n      env.out.print(reader.u32_be()?.string()) // prints 42\n      env.out.print(reader.f32_be()?.string()) // prints 3.14\n    end\n</code></pre>"},{"location":"buffered--index/#public-types","title":"Public Types","text":"<ul> <li>class Reader</li> <li>class Writer</li> </ul>"},{"location":"buffered-Reader/","title":"Reader","text":"<p>[Source]</p> <p>Store network data and provide a parsing interface.</p> <p><code>Reader</code> provides a way to extract typed data from a sequence of bytes. The <code>Reader</code> manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the <code>Reader</code> using the <code>append</code> method, and typed data is extracted using the getter methods.</p> <p>For example, suppose we have a UDP-based network data protocol where messages consist of the following:</p> <ul> <li><code>list_size</code> - the number of items in the following list of items   as a big-endian 32-bit integer</li> <li>zero or more items of the following data:</li> <li>a big-endian 64-bit floating point number</li> <li>a string that starts with a big-endian 32-bit integer that     specifies the length of the string, followed by a number of     bytes that represent the string</li> </ul> <p>A message would be something like this:</p> <pre><code>[message_length][list_size][float1][string1][float2][string2]...\n</code></pre> <p>The following program uses a <code>Reader</code> to decode a message of this type and print them:</p> <pre><code>use \"buffered\"\nuse \"collections\"\n\nclass Notify is InputNotify\n  let _env: Env\n  new create(env: Env) =&gt;\n    _env = env\n  fun ref apply(data: Array[U8] iso) =&gt;\n    let rb = Reader\n    rb.append(consume data)\n    try\n      while true do\n        let len = rb.i32_be()?\n        let items = rb.i32_be()?.usize()\n        for range in Range(0, items) do\n          let f = rb.f32_be()?\n          let str_len = rb.i32_be()?.usize()\n          let str = String.from_array(rb.block(str_len)?)\n          _env.out.print(\"[(\" + f.string() + \"), (\" + str + \")]\")\n        end\n      end\n    end\n\nactor Main\n  new create(env: Env) =&gt;\n    env.input(recover Notify(env) end, 1024)\n</code></pre> <pre><code>class ref Reader\n</code></pre>"},{"location":"buffered-Reader/#constructors","title":"Constructors","text":""},{"location":"buffered-Reader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: Reader iso^\n</code></pre>"},{"location":"buffered-Reader/#returns","title":"Returns","text":"<ul> <li>Reader iso^</li> </ul>"},{"location":"buffered-Reader/#public-functions","title":"Public Functions","text":""},{"location":"buffered-Reader/#size","title":"size","text":"<p>[Source]</p> <p>Return the number of available bytes.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"buffered-Reader/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"buffered-Reader/#clear","title":"clear","text":"<p>[Source]</p> <p>Discard all pending data.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"buffered-Reader/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Reader/#append","title":"append","text":"<p>[Source]</p> <p>Add a chunk of data.</p> <pre><code>fun ref append(\n  data: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"buffered-Reader/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"buffered-Reader/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Reader/#skip","title":"skip","text":"<p>[Source]</p> <p>Skip n bytes.</p> <pre><code>fun ref skip(\n  n: USize val)\n: None val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_1","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"buffered-Reader/#returns_4","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"buffered-Reader/#block","title":"block","text":"<p>[Source]</p> <p>Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the <code>Reader</code>.</p> <pre><code>fun ref block(\n  len: USize val)\n: Array[U8 val] iso^ ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_2","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"buffered-Reader/#returns_5","title":"Returns","text":"<ul> <li>Array[U8 val] iso^ ?</li> </ul>"},{"location":"buffered-Reader/#read_until","title":"read_until","text":"<p>[Source]</p> <p>Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n.</p> <pre><code>fun ref read_until(\n  separator: U8 val)\n: Array[U8 val] iso^ ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_3","title":"Parameters","text":"<ul> <li>separator: U8 val</li> </ul>"},{"location":"buffered-Reader/#returns_6","title":"Returns","text":"<ul> <li>Array[U8 val] iso^ ?</li> </ul>"},{"location":"buffered-Reader/#line","title":"line","text":"<p>[Source]</p> <p>Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set <code>keep_line_breaks</code> to <code>true</code> to keep the line breaks in the returned line.</p> <pre><code>fun ref line(\n  keep_line_breaks: Bool val = false)\n: String iso^ ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_4","title":"Parameters","text":"<ul> <li>keep_line_breaks: Bool val = false</li> </ul>"},{"location":"buffered-Reader/#returns_7","title":"Returns","text":"<ul> <li>String iso^ ?</li> </ul>"},{"location":"buffered-Reader/#u8","title":"u8","text":"<p>[Source]</p> <p>Get a U8. Raise an error if there isn't enough data.</p> <pre><code>fun ref u8()\n: U8 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_8","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"buffered-Reader/#i8","title":"i8","text":"<p>[Source]</p> <p>Get an I8.</p> <pre><code>fun ref i8()\n: I8 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_9","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"buffered-Reader/#u16_be","title":"u16_be","text":"<p>[Source]</p> <p>Get a big-endian U16.</p> <pre><code>fun ref u16_be()\n: U16 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_10","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"buffered-Reader/#u16_le","title":"u16_le","text":"<p>[Source]</p> <p>Get a little-endian U16.</p> <pre><code>fun ref u16_le()\n: U16 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_11","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"buffered-Reader/#i16_be","title":"i16_be","text":"<p>[Source]</p> <p>Get a big-endian I16.</p> <pre><code>fun ref i16_be()\n: I16 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_12","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"buffered-Reader/#i16_le","title":"i16_le","text":"<p>[Source]</p> <p>Get a little-endian I16.</p> <pre><code>fun ref i16_le()\n: I16 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_13","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"buffered-Reader/#u32_be","title":"u32_be","text":"<p>[Source]</p> <p>Get a big-endian U32.</p> <pre><code>fun ref u32_be()\n: U32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_14","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"buffered-Reader/#u32_le","title":"u32_le","text":"<p>[Source]</p> <p>Get a little-endian U32.</p> <pre><code>fun ref u32_le()\n: U32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_15","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"buffered-Reader/#i32_be","title":"i32_be","text":"<p>[Source]</p> <p>Get a big-endian I32.</p> <pre><code>fun ref i32_be()\n: I32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_16","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"buffered-Reader/#i32_le","title":"i32_le","text":"<p>[Source]</p> <p>Get a little-endian I32.</p> <pre><code>fun ref i32_le()\n: I32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_17","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"buffered-Reader/#u64_be","title":"u64_be","text":"<p>[Source]</p> <p>Get a big-endian U64.</p> <pre><code>fun ref u64_be()\n: U64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_18","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"buffered-Reader/#u64_le","title":"u64_le","text":"<p>[Source]</p> <p>Get a little-endian U64.</p> <pre><code>fun ref u64_le()\n: U64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_19","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"buffered-Reader/#i64_be","title":"i64_be","text":"<p>[Source]</p> <p>Get a big-endian I64.</p> <pre><code>fun ref i64_be()\n: I64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_20","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"buffered-Reader/#i64_le","title":"i64_le","text":"<p>[Source]</p> <p>Get a little-endian I64.</p> <pre><code>fun ref i64_le()\n: I64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_21","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"buffered-Reader/#u128_be","title":"u128_be","text":"<p>[Source]</p> <p>Get a big-endian U128.</p> <pre><code>fun ref u128_be()\n: U128 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_22","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"buffered-Reader/#u128_le","title":"u128_le","text":"<p>[Source]</p> <p>Get a little-endian U128.</p> <pre><code>fun ref u128_le()\n: U128 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_23","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"buffered-Reader/#i128_be","title":"i128_be","text":"<p>[Source]</p> <p>Get a big-endian I129.</p> <pre><code>fun ref i128_be()\n: I128 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_24","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"buffered-Reader/#i128_le","title":"i128_le","text":"<p>[Source]</p> <p>Get a little-endian I128.</p> <pre><code>fun ref i128_le()\n: I128 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_25","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"buffered-Reader/#f32_be","title":"f32_be","text":"<p>[Source]</p> <p>Get a big-endian F32.</p> <pre><code>fun ref f32_be()\n: F32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_26","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"buffered-Reader/#f32_le","title":"f32_le","text":"<p>[Source]</p> <p>Get a little-endian F32.</p> <pre><code>fun ref f32_le()\n: F32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_27","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"buffered-Reader/#f64_be","title":"f64_be","text":"<p>[Source]</p> <p>Get a big-endian F64.</p> <pre><code>fun ref f64_be()\n: F64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_28","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"buffered-Reader/#f64_le","title":"f64_le","text":"<p>[Source]</p> <p>Get a little-endian F64.</p> <pre><code>fun ref f64_le()\n: F64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_29","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u8","title":"peek_u8","text":"<p>[Source]</p> <p>Peek at a U8 at the given offset. Raise an error if there isn't enough data.</p> <pre><code>fun box peek_u8(\n  offset: USize val = 0)\n: U8 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_5","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_30","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i8","title":"peek_i8","text":"<p>[Source]</p> <p>Peek at an I8.</p> <pre><code>fun box peek_i8(\n  offset: USize val = 0)\n: I8 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_6","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_31","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u16_be","title":"peek_u16_be","text":"<p>[Source]</p> <p>Peek at a big-endian U16.</p> <pre><code>fun box peek_u16_be(\n  offset: USize val = 0)\n: U16 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_7","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_32","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u16_le","title":"peek_u16_le","text":"<p>[Source]</p> <p>Peek at a little-endian U16.</p> <pre><code>fun box peek_u16_le(\n  offset: USize val = 0)\n: U16 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_8","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_33","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i16_be","title":"peek_i16_be","text":"<p>[Source]</p> <p>Peek at a big-endian I16.</p> <pre><code>fun box peek_i16_be(\n  offset: USize val = 0)\n: I16 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_9","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_34","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i16_le","title":"peek_i16_le","text":"<p>[Source]</p> <p>Peek at a little-endian I16.</p> <pre><code>fun box peek_i16_le(\n  offset: USize val = 0)\n: I16 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_10","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_35","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u32_be","title":"peek_u32_be","text":"<p>[Source]</p> <p>Peek at a big-endian U32.</p> <pre><code>fun box peek_u32_be(\n  offset: USize val = 0)\n: U32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_11","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_36","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u32_le","title":"peek_u32_le","text":"<p>[Source]</p> <p>Peek at a little-endian U32.</p> <pre><code>fun box peek_u32_le(\n  offset: USize val = 0)\n: U32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_12","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_37","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i32_be","title":"peek_i32_be","text":"<p>[Source]</p> <p>Peek at a big-endian I32.</p> <pre><code>fun box peek_i32_be(\n  offset: USize val = 0)\n: I32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_13","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_38","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i32_le","title":"peek_i32_le","text":"<p>[Source]</p> <p>Peek at a little-endian I32.</p> <pre><code>fun box peek_i32_le(\n  offset: USize val = 0)\n: I32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_14","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_39","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u64_be","title":"peek_u64_be","text":"<p>[Source]</p> <p>Peek at a big-endian U64.</p> <pre><code>fun box peek_u64_be(\n  offset: USize val = 0)\n: U64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_15","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_40","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u64_le","title":"peek_u64_le","text":"<p>[Source]</p> <p>Peek at a little-endian U64.</p> <pre><code>fun box peek_u64_le(\n  offset: USize val = 0)\n: U64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_16","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_41","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i64_be","title":"peek_i64_be","text":"<p>[Source]</p> <p>Peek at a big-endian I64.</p> <pre><code>fun box peek_i64_be(\n  offset: USize val = 0)\n: I64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_17","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_42","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i64_le","title":"peek_i64_le","text":"<p>[Source]</p> <p>Peek at a little-endian I64.</p> <pre><code>fun box peek_i64_le(\n  offset: USize val = 0)\n: I64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_18","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_43","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u128_be","title":"peek_u128_be","text":"<p>[Source]</p> <p>Peek at a big-endian U128.</p> <pre><code>fun box peek_u128_be(\n  offset: USize val = 0)\n: U128 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_19","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_44","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u128_le","title":"peek_u128_le","text":"<p>[Source]</p> <p>Peek at a little-endian U128.</p> <pre><code>fun box peek_u128_le(\n  offset: USize val = 0)\n: U128 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_20","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_45","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i128_be","title":"peek_i128_be","text":"<p>[Source]</p> <p>Peek at a big-endian I129.</p> <pre><code>fun box peek_i128_be(\n  offset: USize val = 0)\n: I128 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_21","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_46","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i128_le","title":"peek_i128_le","text":"<p>[Source]</p> <p>Peek at a little-endian I128.</p> <pre><code>fun box peek_i128_le(\n  offset: USize val = 0)\n: I128 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_22","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_47","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_f32_be","title":"peek_f32_be","text":"<p>[Source]</p> <p>Peek at a big-endian F32.</p> <pre><code>fun box peek_f32_be(\n  offset: USize val = 0)\n: F32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_23","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_48","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_f32_le","title":"peek_f32_le","text":"<p>[Source]</p> <p>Peek at a little-endian F32.</p> <pre><code>fun box peek_f32_le(\n  offset: USize val = 0)\n: F32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_24","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_49","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_f64_be","title":"peek_f64_be","text":"<p>[Source]</p> <p>Peek at a big-endian F64.</p> <pre><code>fun box peek_f64_be(\n  offset: USize val = 0)\n: F64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_25","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_50","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_f64_le","title":"peek_f64_le","text":"<p>[Source]</p> <p>Peek at a little-endian F64.</p> <pre><code>fun box peek_f64_le(\n  offset: USize val = 0)\n: F64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_26","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_51","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"buffered-Writer/","title":"Writer","text":"<p>[Source]</p> <p>A buffer for building messages.</p> <p><code>Writer</code> provides an way to create byte sequences using common data encodings. The <code>Writer</code> manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call <code>done()</code> to get the message's <code>ByteSeq</code>s, and you can then reuse the <code>Writer</code> for creating a new message.</p> <p>For example, suppose we have a TCP-based network data protocol where messages consist of the following:</p> <ul> <li><code>message_length</code> - the number of bytes in the message as a   big-endian 32-bit integer</li> <li><code>list_size</code> - the number of items in the following list of items   as a big-endian 32-bit integer</li> <li>zero or more items of the following data:</li> <li>a big-endian 64-bit floating point number</li> <li>a string that starts with a big-endian 32-bit integer that     specifies the length of the string, followed by a number of     bytes that represent the string</li> </ul> <p>A message would be something like this:</p> <pre><code>[message_length][list_size][float1][string1][float2][string2]...\n</code></pre> <p>The following program uses a write buffer to encode an array of tuples as a message of this type:</p> <pre><code>use \"buffered\"\n\nactor Main\n  new create(env: Env) =&gt;\n    let wb = Writer\n    let messages = [[(F32(3597.82), \"Anderson\"); (F32(-7979.3), \"Graham\")]\n                    [(F32(3.14159), \"Hopper\"); (F32(-83.83), \"Jones\")]]\n    for items in messages.values() do\n      wb.i32_be((items.size() / 2).i32())\n      for (f, s) in items.values() do\n        wb.f32_be(f)\n        wb.i32_be(s.size().i32())\n        wb.write(s.array())\n      end\n      let wb_msg = Writer\n      wb_msg.i32_be(wb.size().i32())\n      wb_msg.writev(wb.done())\n      env.out.writev(wb_msg.done())\n    end\n</code></pre> <pre><code>class ref Writer\n</code></pre>"},{"location":"buffered-Writer/#constructors","title":"Constructors","text":""},{"location":"buffered-Writer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: Writer iso^\n</code></pre>"},{"location":"buffered-Writer/#returns","title":"Returns","text":"<ul> <li>Writer iso^</li> </ul>"},{"location":"buffered-Writer/#public-functions","title":"Public Functions","text":""},{"location":"buffered-Writer/#reserve_chunks","title":"reserve_chunks","text":"<p>[Source]</p> <p>Reserve space for size' chunks.</p> <p>This needs to be recalled after every call to <code>done</code> as <code>done</code> resets the chunks.</p> <pre><code>fun ref reserve_chunks(\n  size': USize val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters","title":"Parameters","text":"<ul> <li>size': USize val</li> </ul>"},{"location":"buffered-Writer/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#reserve_current","title":"reserve_current","text":"<p>[Source]</p> <p>Reserve space for size bytes in <code>_current</code>.</p> <pre><code>fun ref reserve_current(\n  size': USize val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_1","title":"Parameters","text":"<ul> <li>size': USize val</li> </ul>"},{"location":"buffered-Writer/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"buffered-Writer/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"buffered-Writer/#u8","title":"u8","text":"<p>[Source]</p> <p>Write a byte to the buffer.</p> <pre><code>fun ref u8(\n  data: U8 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_2","title":"Parameters","text":"<ul> <li>data: U8 val</li> </ul>"},{"location":"buffered-Writer/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u16_le","title":"u16_le","text":"<p>[Source]</p> <p>Write a U16 to the buffer in little-endian byte order.</p> <pre><code>fun ref u16_le(\n  data: U16 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_3","title":"Parameters","text":"<ul> <li>data: U16 val</li> </ul>"},{"location":"buffered-Writer/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u16_be","title":"u16_be","text":"<p>[Source]</p> <p>Write a U16 to the buffer in big-endian byte order.</p> <pre><code>fun ref u16_be(\n  data: U16 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_4","title":"Parameters","text":"<ul> <li>data: U16 val</li> </ul>"},{"location":"buffered-Writer/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i16_le","title":"i16_le","text":"<p>[Source]</p> <p>Write an I16 to the buffer in little-endian byte order.</p> <pre><code>fun ref i16_le(\n  data: I16 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_5","title":"Parameters","text":"<ul> <li>data: I16 val</li> </ul>"},{"location":"buffered-Writer/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i16_be","title":"i16_be","text":"<p>[Source]</p> <p>Write an I16 to the buffer in big-endian byte order.</p> <pre><code>fun ref i16_be(\n  data: I16 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_6","title":"Parameters","text":"<ul> <li>data: I16 val</li> </ul>"},{"location":"buffered-Writer/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u32_le","title":"u32_le","text":"<p>[Source]</p> <p>Write a U32 to the buffer in little-endian byte order.</p> <pre><code>fun ref u32_le(\n  data: U32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_7","title":"Parameters","text":"<ul> <li>data: U32 val</li> </ul>"},{"location":"buffered-Writer/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u32_be","title":"u32_be","text":"<p>[Source]</p> <p>Write a U32 to the buffer in big-endian byte order.</p> <pre><code>fun ref u32_be(\n  data: U32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_8","title":"Parameters","text":"<ul> <li>data: U32 val</li> </ul>"},{"location":"buffered-Writer/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i32_le","title":"i32_le","text":"<p>[Source]</p> <p>Write an I32 to the buffer in little-endian byte order.</p> <pre><code>fun ref i32_le(\n  data: I32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_9","title":"Parameters","text":"<ul> <li>data: I32 val</li> </ul>"},{"location":"buffered-Writer/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i32_be","title":"i32_be","text":"<p>[Source]</p> <p>Write an I32 to the buffer in big-endian byte order.</p> <pre><code>fun ref i32_be(\n  data: I32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_10","title":"Parameters","text":"<ul> <li>data: I32 val</li> </ul>"},{"location":"buffered-Writer/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#f32_le","title":"f32_le","text":"<p>[Source]</p> <p>Write an F32 to the buffer in little-endian byte order.</p> <pre><code>fun ref f32_le(\n  data: F32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_11","title":"Parameters","text":"<ul> <li>data: F32 val</li> </ul>"},{"location":"buffered-Writer/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#f32_be","title":"f32_be","text":"<p>[Source]</p> <p>Write an F32 to the buffer in big-endian byte order.</p> <pre><code>fun ref f32_be(\n  data: F32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_12","title":"Parameters","text":"<ul> <li>data: F32 val</li> </ul>"},{"location":"buffered-Writer/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u64_le","title":"u64_le","text":"<p>[Source]</p> <p>Write a U64 to the buffer in little-endian byte order.</p> <pre><code>fun ref u64_le(\n  data: U64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_13","title":"Parameters","text":"<ul> <li>data: U64 val</li> </ul>"},{"location":"buffered-Writer/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u64_be","title":"u64_be","text":"<p>[Source]</p> <p>Write a U64 to the buffer in big-endian byte order.</p> <pre><code>fun ref u64_be(\n  data: U64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_14","title":"Parameters","text":"<ul> <li>data: U64 val</li> </ul>"},{"location":"buffered-Writer/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i64_le","title":"i64_le","text":"<p>[Source]</p> <p>Write an I64 to the buffer in little-endian byte order.</p> <pre><code>fun ref i64_le(\n  data: I64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_15","title":"Parameters","text":"<ul> <li>data: I64 val</li> </ul>"},{"location":"buffered-Writer/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i64_be","title":"i64_be","text":"<p>[Source]</p> <p>Write an I64 to the buffer in big-endian byte order.</p> <pre><code>fun ref i64_be(\n  data: I64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_16","title":"Parameters","text":"<ul> <li>data: I64 val</li> </ul>"},{"location":"buffered-Writer/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#f64_le","title":"f64_le","text":"<p>[Source]</p> <p>Write an F64 to the buffer in little-endian byte order.</p> <pre><code>fun ref f64_le(\n  data: F64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_17","title":"Parameters","text":"<ul> <li>data: F64 val</li> </ul>"},{"location":"buffered-Writer/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#f64_be","title":"f64_be","text":"<p>[Source]</p> <p>Write an F64 to the buffer in big-endian byte order.</p> <pre><code>fun ref f64_be(\n  data: F64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_18","title":"Parameters","text":"<ul> <li>data: F64 val</li> </ul>"},{"location":"buffered-Writer/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u128_le","title":"u128_le","text":"<p>[Source]</p> <p>Write a U128 to the buffer in little-endian byte order.</p> <pre><code>fun ref u128_le(\n  data: U128 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_19","title":"Parameters","text":"<ul> <li>data: U128 val</li> </ul>"},{"location":"buffered-Writer/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u128_be","title":"u128_be","text":"<p>[Source]</p> <p>Write a U128 to the buffer in big-endian byte order.</p> <pre><code>fun ref u128_be(\n  data: U128 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_20","title":"Parameters","text":"<ul> <li>data: U128 val</li> </ul>"},{"location":"buffered-Writer/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i128_le","title":"i128_le","text":"<p>[Source]</p> <p>Write an I128 to the buffer in little-endian byte order.</p> <pre><code>fun ref i128_le(\n  data: I128 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_21","title":"Parameters","text":"<ul> <li>data: I128 val</li> </ul>"},{"location":"buffered-Writer/#returns_23","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i128_be","title":"i128_be","text":"<p>[Source]</p> <p>Write an I128 to the buffer in big-endian byte order.</p> <pre><code>fun ref i128_be(\n  data: I128 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_22","title":"Parameters","text":"<ul> <li>data: I128 val</li> </ul>"},{"location":"buffered-Writer/#returns_24","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#write","title":"write","text":"<p>[Source]</p> <p>Write a ByteSeq to the buffer.</p> <pre><code>fun ref write(\n  data: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_23","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"buffered-Writer/#returns_25","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#writev","title":"writev","text":"<p>[Source]</p> <p>Write ByteSeqs to the buffer.</p> <pre><code>fun ref writev(\n  data: ByteSeqIter val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_24","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"buffered-Writer/#returns_26","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#done","title":"done","text":"<p>[Source]</p> <p>Return an array of buffered ByteSeqs and reset the Writer's buffer.</p> <pre><code>fun ref done()\n: Array[(String val | Array[U8 val] val)] iso^\n</code></pre>"},{"location":"buffered-Writer/#returns_27","title":"Returns","text":"<ul> <li>Array[(String val | Array[U8 val] val)] iso^</li> </ul>"},{"location":"builtin--index/","title":"Builtin package","text":"<p>The builtin package is home to the following standard library members:</p> <ol> <li>Types the compiler needs to know exist, such as None.</li> <li>Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32.</li> <li>Any types needed by others in builtin.</li> </ol> <p>The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries.</p>"},{"location":"builtin--index/#public-types","title":"Public Types","text":"<ul> <li>primitive AmbientAuth</li> <li>interface Any</li> <li>class Array</li> <li>class ArrayKeys</li> <li>class ArrayPairs</li> <li>class ArrayValues</li> <li>primitive AsioEvent</li> <li>type AsioEventID</li> <li>trait AsioEventNotify</li> <li>primitive Bool</li> <li>type ByteSeq</li> <li>interface ByteSeqIter</li> <li>interface Comparable</li> <li>type Compare</li> <li>interface DisposableActor</li> <li>primitive DoNotOptimise</li> <li>class Env</li> <li>primitive Equal</li> <li>interface Equatable</li> <li>primitive F32</li> <li>primitive F64</li> <li>type Float</li> <li>trait FloatingPoint</li> <li>primitive Greater</li> <li>interface HasEq</li> <li>primitive I128</li> <li>primitive I16</li> <li>primitive I32</li> <li>primitive I64</li> <li>primitive I8</li> <li>primitive ILong</li> <li>primitive ISize</li> <li>interface InputNotify</li> <li>interface InputStream</li> <li>type Int</li> <li>trait Integer</li> <li>interface Iterator</li> <li>primitive Less</li> <li>primitive None</li> <li>struct NullablePointer</li> <li>type Number</li> <li>interface OutStream</li> <li>primitive Platform</li> <li>struct Pointer</li> <li>interface ReadElement</li> <li>interface ReadSeq</li> <li>trait Real</li> <li>struct RuntimeOptions</li> <li>interface Seq</li> <li>type Signed</li> <li>trait SignedInteger</li> <li>interface SourceLoc</li> <li>actor StdStream</li> <li>actor Stdin</li> <li>class String</li> <li>class StringBytes</li> <li>class StringRunes</li> <li>interface Stringable</li> <li>primitive U128</li> <li>primitive U16</li> <li>primitive U32</li> <li>primitive U64</li> <li>primitive U8</li> <li>primitive ULong</li> <li>primitive USize</li> <li>type Unsigned</li> <li>trait UnsignedInteger</li> </ul>"},{"location":"builtin-AmbientAuth/","title":"AmbientAuth","text":"<p>[Source]</p> <p>This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability.</p> <p>Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root.</p> <p>The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access.</p> <pre><code>primitive val AmbientAuth\n</code></pre>"},{"location":"builtin-AmbientAuth/#public-functions","title":"Public Functions","text":""},{"location":"builtin-AmbientAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AmbientAuth val)\n: Bool val\n</code></pre>"},{"location":"builtin-AmbientAuth/#parameters","title":"Parameters","text":"<ul> <li>that: AmbientAuth val</li> </ul>"},{"location":"builtin-AmbientAuth/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AmbientAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AmbientAuth val)\n: Bool val\n</code></pre>"},{"location":"builtin-AmbientAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: AmbientAuth val</li> </ul>"},{"location":"builtin-AmbientAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Any/","title":"Any","text":"<p>[Source] <pre><code>interface tag Any\n</code></pre></p>"},{"location":"builtin-Array/","title":"Array[A: A]","text":"<p>[Source]</p> <p>Contiguous, resizable memory to store elements of type A.</p>"},{"location":"builtin-Array/#usage","title":"Usage","text":"<p>Creating an Array of String: <pre><code>  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  // array.size() == 3\n  // array.space() &gt;= 3\n</code></pre></p> <p>Creating an empty Array of String, which may hold at least 10 elements before requesting more space: <pre><code>  let array = Array[String](10)\n  // array.size() == 0\n  // array.space() &gt;= 10\n</code></pre></p> <p>Accessing elements can be done via the <code>apply(i: USize): this-&gt;A ?</code> method. The provided index might be out of bounds so <code>apply</code> is partial and has to be called within a try-catch block or inside another partial method: <pre><code>  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  let is_second_element_wobat = try\n    // indexes start from 0, so 1 is the second element\n    array(1)? == \"wombat\"\n  else\n    false\n  end\n</code></pre></p> <p>Adding and removing elements to and from the end of the Array can be done via <code>push</code> and <code>pop</code> methods. You could treat the array as a LIFO stack using those methods: <pre><code>  while (array.size() &gt; 0) do\n    let elem = array.pop()?\n    // do something with element\n  end\n</code></pre></p> <p>Modifying the Array can be done via <code>update</code>, <code>insert</code> and <code>delete</code> methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary.</p> <p>Iterating over the elements of an Array can be done using the <code>values</code> method: <pre><code>  for element in array.values() do\n      // do something with element\n  end\n</code></pre></p>"},{"location":"builtin-Array/#memory-allocation","title":"Memory allocation","text":"<p>Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The <code>space()</code> method returns the number of elements an Array can hold. The <code>size()</code> method returns the number of elements the Array holds.</p> <p>Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size.</p> <p>When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements.</p> <p>Here's a few examples of the space allocated when initialising an Array with various number of elements:</p> size space 0 0 1 8 8 8 9 16 16 16 17 32 <p>Call the <code>compact()</code> method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space.</p> <pre><code>class ref Array[A: A] is\n  Seq[A] ref\n</code></pre>"},{"location":"builtin-Array/#implements","title":"Implements","text":"<ul> <li>Seq[A] ref</li> </ul>"},{"location":"builtin-Array/#constructors","title":"Constructors","text":""},{"location":"builtin-Array/#create","title":"create","text":"<p>[Source]</p> <p>Create an array with zero elements, but space for len elements.</p> <pre><code>new ref create(\n  len: USize val = 0)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#init","title":"init","text":"<p>[Source]</p> <p>Create an array of len elements, all initialised to the given value.</p> <pre><code>new ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_1","title":"Parameters","text":"<ul> <li>from: A^</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_1","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#from_cpointer","title":"from_cpointer","text":"<p>[Source]</p> <p>Create an array from a C-style pointer and length. The contents are not copied. This must be done only with C-FFI functions that return pony_alloc'd memory. If a null pointer is given then an empty array is returned.</p> <pre><code>new ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = 0)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_2","title":"Parameters","text":"<ul> <li>ptr: Pointer[A] ref</li> <li>len: USize val</li> <li>alloc: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns_2","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Array/#cpointer","title":"cpointer","text":"<p>[Source]</p> <p>Return the underlying C-style pointer.</p> <pre><code>fun box cpointer(\n  offset: USize val = 0)\n: Pointer[A] tag\n</code></pre>"},{"location":"builtin-Array/#parameters_3","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns_3","title":"Returns","text":"<ul> <li>Pointer[A] tag</li> </ul>"},{"location":"builtin-Array/#size","title":"size","text":"<p>[Source]</p> <p>The number of elements in the array.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-Array/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Array/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the array.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"builtin-Array/#returns_5","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Array/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically.</p> <pre><code>fun ref reserve(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_4","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#compact","title":"compact","text":"<p>[Source]</p> <p>Try to remove unused space, making it available for garbage collection. The request may be ignored.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#undefinedoptional-b-a-realb-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val","title":"undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers.</p> <pre><code>fun ref undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_5","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#read_u8optional-b-a-realb-val-u8-val","title":"read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U8 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_6","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_9","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-Array/#read_u16optional-b-a-realb-val-u8-val","title":"read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U16 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_7","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_10","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-Array/#read_u32optional-b-a-realb-val-u8-val","title":"read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U32 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_8","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_11","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Array/#read_u64optional-b-a-realb-val-u8-val","title":"read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U64 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_9","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_12","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-Array/#read_u128optional-b-a-realb-val-u8-val","title":"read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U128 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_10","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_13","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-Array/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element, raising an error if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-Array/#parameters_11","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Array/#returns_14","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-Array/#update_u8optional-b-a-realb-val-u8-val","title":"update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U8 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_12","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-Array/#returns_15","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-Array/#update_u16optional-b-a-realb-val-u8-val","title":"update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U16 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_13","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U16 val</li> </ul>"},{"location":"builtin-Array/#returns_16","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-Array/#update_u32optional-b-a-realb-val-u8-val","title":"update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U32 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_14","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U32 val</li> </ul>"},{"location":"builtin-Array/#returns_17","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Array/#update_u64optional-b-a-realb-val-u8-val","title":"update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U64 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_15","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U64 val</li> </ul>"},{"location":"builtin-Array/#returns_18","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-Array/#update_u128optional-b-a-realb-val-u8-val","title":"update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U128 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  offset: USize val,\n  value: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_16","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U128 val</li> </ul>"},{"location":"builtin-Array/#returns_19","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-Array/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th element, raising an error if the index is out of bounds.</p> <pre><code>fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_17","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_20","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#insert","title":"insert","text":"<p>[Source]</p> <p>Insert an element into the array. Elements after this are moved up by one index, extending the array.</p> <p>When inserting right beyond the last element, at index <code>this.size()</code>, the element will be appended, similar to <code>push()</code>, an insert at index <code>0</code> prepends the value to the array. An insert into an index beyond <code>this.size()</code> raises an error.</p> <pre><code>let array = Array[U8](4)              // []\narray.insert(0, 0xDE)?                // prepend: [0xDE]\narray.insert(array.size(), 0xBE)?     // append:  [0xDE; 0xBE]\narray.insert(1, 0xAD)?                // insert:  [0xDE; 0xAD; 0xBE]\narray.insert(array.size() + 1, 0xEF)? // error\n</code></pre> <pre><code>fun ref insert(\n  i: USize val,\n  value: A)\n: None val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_18","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_21","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"builtin-Array/#delete","title":"delete","text":"<p>[Source]</p> <p>Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned.</p> <pre><code>fun ref delete(\n  i: USize val)\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_19","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Array/#returns_22","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing.</p> <pre><code>fun ref truncate(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_20","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_23","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#trim_in_place","title":"trim_in_place","text":"<p>[Source]</p> <p>Trim the array to a portion of itself, covering <code>from</code> until <code>to</code>. Unlike slice, the operation does not allocate a new array nor copy elements.</p> <pre><code>fun ref trim_in_place(\n  from: USize val = 0,\n  to: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_21","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_24","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#trim","title":"trim","text":"<p>[Source]</p> <p>Return a shared portion of this array, covering <code>from</code> until <code>to</code>. Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements.</p> <pre><code>fun val trim(\n  from: USize val = 0,\n  to: USize val = call)\n: Array[A] val\n</code></pre>"},{"location":"builtin-Array/#parameters_22","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_25","title":"Returns","text":"<ul> <li>Array[A] val</li> </ul>"},{"location":"builtin-Array/#chopoptional-b-a-any-send","title":"chop[optional B: (A &amp; Any #send)]","text":"<p>[Source]</p> <p>Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements.</p> <p>The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below:</p> <pre><code>  class Example\n     var other: (Example | None) = None\n\n  let arr: Array[Example] iso = recover\n     let obj1 = Example\n     let obj2 = Example\n     obj1.other = obj2\n     obj2.other = obj1\n     [obj1; obj2]\n  end\n</code></pre> <pre><code>fun iso chop[optional B: (A &amp; Any #send)](\n  split_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)\n</code></pre>"},{"location":"builtin-Array/#parameters_23","title":"Parameters","text":"<ul> <li>split_point: USize val</li> </ul>"},{"location":"builtin-Array/#returns_26","title":"Returns","text":"<ul> <li>(Array[A] iso^ , Array[A] iso^)</li> </ul>"},{"location":"builtin-Array/#unchop","title":"unchop","text":"<p>[Source]</p> <p>Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements.</p> <pre><code>fun iso unchop(\n  b: Array[A] iso)\n: ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)\n</code></pre>"},{"location":"builtin-Array/#parameters_24","title":"Parameters","text":"<ul> <li>b: Array[A] iso</li> </ul>"},{"location":"builtin-Array/#returns_27","title":"Returns","text":"<ul> <li>((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)</li> </ul>"},{"location":"builtin-Array/#copy_fromoptional-b-a-realb-val-u8-val","title":"copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8].</p> <pre><code>fun ref copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  src: Array[U8 val] box,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_25","title":"Parameters","text":"<ul> <li>src: Array[U8 val] box</li> <li>src_idx: USize val</li> <li>dst_idx: USize val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_28","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#copy_to","title":"copy_to","text":"<p>[Source]</p> <p>Copy len elements from this(src_idx) to dst(dst_idx).</p> <pre><code>fun box copy_to(\n  dst: Array[this-&gt;A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_26","title":"Parameters","text":"<ul> <li>dst: Array[this-&gt;A!] ref</li> <li>src_idx: USize val</li> <li>dst_idx: USize val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_29","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove n elements from the array, beginning at index i.</p> <pre><code>fun ref remove(\n  i: USize val,\n  n: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_27","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>n: USize val</li> </ul>"},{"location":"builtin-Array/#returns_30","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the array.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_31","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u8optional-b-a-realb-val-u8-val","title":"push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U8 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_28","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-Array/#returns_32","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u16optional-b-a-realb-val-u8-val","title":"push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U16 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U16 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_29","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"builtin-Array/#returns_33","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u32optional-b-a-realb-val-u8-val","title":"push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U32 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U32 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_30","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-Array/#returns_34","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u64optional-b-a-realb-val-u8-val","title":"push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U64 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U64 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_31","title":"Parameters","text":"<ul> <li>value: U64 val</li> </ul>"},{"location":"builtin-Array/#returns_35","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u128optional-b-a-realb-val-u8-val","title":"push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U128 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\n  value: U128 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_32","title":"Parameters","text":"<ul> <li>value: U128 val</li> </ul>"},{"location":"builtin-Array/#returns_36","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push","title":"push","text":"<p>[Source]</p> <p>Add an element to the end of the array.</p> <pre><code>fun ref push(\n  value: A)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_33","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_37","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove an element from the end of the array. The removed element is returned.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#returns_38","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Add an element to the beginning of the array.</p> <pre><code>fun ref unshift(\n  value: A)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_34","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_39","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#shift","title":"shift","text":"<p>[Source]</p> <p>Remove an element from the beginning of the array. The removed element is returned.</p> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#returns_40","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#append","title":"append","text":"<p>[Source]</p> <p>Append the elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\n  seq: (ReadSeq[A] box &amp; ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_35","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_41","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the end of the array, starting from the given offset.</p> <pre><code>fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_36","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_42","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#find","title":"find","text":"<p>[Source]</p> <p>Find the <code>nth</code> appearance of <code>value</code> from the beginning of the array, starting at <code>offset</code> and examining higher indices, and using the supplied <code>predicate</code> for comparisons. Returns the index of the value, or raise an error if the value isn't present.</p> <p>By default, the search starts at the first element of the array, returns the first instance of <code>value</code> found, and uses object identity for comparison.</p> <pre><code>fun box find(\n  value: A!,\n  offset: USize val = 0,\n  nth: USize val = 0,\n  predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: USize val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_37","title":"Parameters","text":"<ul> <li>value: A!</li> <li>offset: USize val = 0</li> <li>nth: USize val = 0</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_43","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-Array/#contains","title":"contains","text":"<p>[Source]</p> <p>Returns true if the array contains <code>value</code>, false otherwise.</p> <p>The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as <code>{(l, r) =&gt; l == r}</code>.</p> <pre><code>fun box contains(\n  value: A!,\n  predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: Bool val\n</code></pre>"},{"location":"builtin-Array/#parameters_38","title":"Parameters","text":"<ul> <li>value: A!</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_44","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Array/#rfind","title":"rfind","text":"<p>[Source]</p> <p>Find the <code>nth</code> appearance of <code>value</code> from the end of the array, starting at <code>offset</code> and examining lower indices, and using the supplied <code>predicate</code> for comparisons. Returns the index of the value, or raise an error if the value isn't present.</p> <p>By default, the search starts at the last element of the array, returns the first instance of <code>value</code> found, and uses object identity for comparison.</p> <pre><code>fun box rfind(\n  value: A!,\n  offset: USize val = call,\n  nth: USize val = 0,\n  predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: USize val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_39","title":"Parameters","text":"<ul> <li>value: A!</li> <li>offset: USize val = call</li> <li>nth: USize val = 0</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_45","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-Array/#clone","title":"clone","text":"<p>[Source]</p> <p>Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned.</p> <pre><code>fun box clone()\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_46","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#slice","title":"slice","text":"<p>[Source]</p> <p>Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned.</p> <pre><code>fun box slice(\n  from: USize val = 0,\n  to: USize val = call,\n  step: USize val = 1)\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_40","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> <li>step: USize val = 1</li> </ul>"},{"location":"builtin-Array/#returns_47","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#permute","title":"permute","text":"<p>[Source]</p> <p>Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied.</p> <pre><code>fun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this-&gt;A!] ref^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_41","title":"Parameters","text":"<ul> <li>indices: Iterator[USize val] ref</li> </ul>"},{"location":"builtin-Array/#returns_48","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^ ?</li> </ul>"},{"location":"builtin-Array/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied.</p> <pre><code>fun box reverse()\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_49","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#reverse_in_place","title":"reverse_in_place","text":"<p>[Source]</p> <p>Reverse the array in place.</p> <pre><code>fun ref reverse_in_place()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_50","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#swap_elements","title":"swap_elements","text":"<p>[Source]</p> <p>Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised.</p> <pre><code>fun ref swap_elements(\n  i: USize val,\n  j: USize val)\n: None val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_42","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>j: USize val</li> </ul>"},{"location":"builtin-Array/#returns_51","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"builtin-Array/#keys","title":"keys","text":"<p>[Source]</p> <p>Return an iterator over the indices in the array.</p> <pre><code>fun box keys()\n: ArrayKeys[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_52","title":"Returns","text":"<ul> <li>ArrayKeys[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-Array/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values in the array.</p> <pre><code>fun box values()\n: ArrayValues[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_53","title":"Returns","text":"<ul> <li>ArrayValues[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-Array/#pairs","title":"pairs","text":"<p>[Source]</p> <p>Return an iterator over the (index, value) pairs in the array.</p> <pre><code>fun box pairs()\n: ArrayPairs[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_54","title":"Returns","text":"<ul> <li>ArrayPairs[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-ArrayKeys/","title":"ArrayKeys[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref\n</code></pre></p>"},{"location":"builtin-ArrayKeys/#implements","title":"Implements","text":"<ul> <li>Iterator[USize val] ref</li> </ul>"},{"location":"builtin-ArrayKeys/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayKeys/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  array: B)\n: ArrayKeys[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayKeys/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayKeys/#returns","title":"Returns","text":"<ul> <li>ArrayKeys[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayKeys/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayKeys/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: USize val\n</code></pre>"},{"location":"builtin-ArrayKeys/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ArrayPairs/","title":"ArrayPairs[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B-&gt;A)] ref\n</code></pre></p>"},{"location":"builtin-ArrayPairs/#implements","title":"Implements","text":"<ul> <li>Iterator[(USize val , B-&gt;A)] ref</li> </ul>"},{"location":"builtin-ArrayPairs/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayPairs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  array: B)\n: ArrayPairs[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayPairs/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayPairs/#returns","title":"Returns","text":"<ul> <li>ArrayPairs[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayPairs/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayPairs/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: (USize val , B-&gt;A) ?\n</code></pre>"},{"location":"builtin-ArrayPairs/#returns_2","title":"Returns","text":"<ul> <li>(USize val , B-&gt;A) ?</li> </ul>"},{"location":"builtin-ArrayValues/","title":"ArrayValues[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B-&gt;A] ref\n</code></pre></p>"},{"location":"builtin-ArrayValues/#implements","title":"Implements","text":"<ul> <li>Iterator[B-&gt;A] ref</li> </ul>"},{"location":"builtin-ArrayValues/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayValues/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  array: B)\n: ArrayValues[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayValues/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayValues/#returns","title":"Returns","text":"<ul> <li>ArrayValues[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayValues/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayValues/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayValues/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: B-&gt;A ?\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_2","title":"Returns","text":"<ul> <li>B-&gt;A ?</li> </ul>"},{"location":"builtin-ArrayValues/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: ArrayValues[A, B] ref\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_3","title":"Returns","text":"<ul> <li>ArrayValues[A, B] ref</li> </ul>"},{"location":"builtin-AsioEvent/","title":"AsioEvent","text":"<p>[Source]</p> <p>Functions for asynchronous event notification.</p> <pre><code>primitive val AsioEvent\n</code></pre>"},{"location":"builtin-AsioEvent/#constructors","title":"Constructors","text":""},{"location":"builtin-AsioEvent/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AsioEvent val^\n</code></pre>"},{"location":"builtin-AsioEvent/#returns","title":"Returns","text":"<ul> <li>AsioEvent val^</li> </ul>"},{"location":"builtin-AsioEvent/#public-functions","title":"Public Functions","text":""},{"location":"builtin-AsioEvent/#none","title":"none","text":"<p>[Source]</p> <p>An empty event.</p> <pre><code>fun box none()\n: Pointer[AsioEvent val] tag\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_1","title":"Returns","text":"<ul> <li>Pointer[AsioEvent val] tag</li> </ul>"},{"location":"builtin-AsioEvent/#readable","title":"readable","text":"<p>[Source]</p> <p>Returns true if the flags contain the readable flag.</p> <pre><code>fun box readable(\n  flags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#writeable","title":"writeable","text":"<p>[Source]</p> <p>Returns true if the flags contain the writeable flag.</p> <pre><code>fun box writeable(\n  flags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_1","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#disposable","title":"disposable","text":"<p>[Source]</p> <p>Returns true if the event should be disposed of.</p> <pre><code>fun box disposable(\n  flags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_2","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#oneshotable","title":"oneshotable","text":"<p>[Source]</p> <p>Returns true if the flags contain the oneshot flag.</p> <pre><code>fun box oneshotable(\n  flags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_3","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>fun box dispose()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read","title":"read","text":"<p>[Source]</p> <pre><code>fun box read()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#write","title":"write","text":"<p>[Source]</p> <pre><code>fun box write()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#timer","title":"timer","text":"<p>[Source]</p> <pre><code>fun box timer()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#signal","title":"signal","text":"<p>[Source]</p> <pre><code>fun box signal()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read_write","title":"read_write","text":"<p>[Source]</p> <pre><code>fun box read_write()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#oneshot","title":"oneshot","text":"<p>[Source]</p> <pre><code>fun box oneshot()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read_write_oneshot","title":"read_write_oneshot","text":"<p>[Source]</p> <pre><code>fun box read_write_oneshot()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AsioEvent val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_4","title":"Parameters","text":"<ul> <li>that: AsioEvent val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AsioEvent val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_5","title":"Parameters","text":"<ul> <li>that: AsioEvent val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEventID/","title":"AsioEventID","text":"<p>[Source] <pre><code>type AsioEventID is\n  Pointer[AsioEvent val] tag\n</code></pre></p>"},{"location":"builtin-AsioEventID/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Pointer[AsioEvent val] tag</li> </ul>"},{"location":"builtin-AsioEventNotify/","title":"AsioEventNotify","text":"<p>[Source] <pre><code>trait tag AsioEventNotify\n</code></pre></p>"},{"location":"builtin-Bool/","title":"Bool","text":"<p>[Source] <pre><code>primitive val Bool is\n  Stringable box\n</code></pre></p>"},{"location":"builtin-Bool/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> </ul>"},{"location":"builtin-Bool/#constructors","title":"Constructors","text":""},{"location":"builtin-Bool/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: Bool val)\n: Bool val^\n</code></pre>"},{"location":"builtin-Bool/#parameters","title":"Parameters","text":"<ul> <li>from: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns","title":"Returns","text":"<ul> <li>Bool val^</li> </ul>"},{"location":"builtin-Bool/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Bool/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_1","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_2","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_3","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_4","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_5","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Bool/#returns_7","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ByteSeq/","title":"ByteSeq","text":"<p>[Source] <pre><code>type ByteSeq is\n  (String val | Array[U8 val] val)\n</code></pre></p>"},{"location":"builtin-ByteSeq/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-ByteSeqIter/","title":"ByteSeqIter","text":"<p>[Source]</p> <p>Accept an iterable collection of String or Array[U8] val.</p> <pre><code>interface val ByteSeqIter\n</code></pre>"},{"location":"builtin-ByteSeqIter/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ByteSeqIter/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun box values()\n: Iterator[(this-&gt;String box | this-&gt;Array[U8 val] box)] ref\n</code></pre>"},{"location":"builtin-ByteSeqIter/#returns","title":"Returns","text":"<ul> <li>Iterator[(this-&gt;String box | this-&gt;Array[U8 val] box)] ref</li> </ul>"},{"location":"builtin-Comparable/","title":"Comparable[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>interface ref Comparable[A: Comparable[A] #read] is\n  Equatable[A] ref\n</code></pre></p>"},{"location":"builtin-Comparable/#implements","title":"Implements","text":"<ul> <li>Equatable[A] ref</li> </ul>"},{"location":"builtin-Comparable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Comparable/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_1","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_2","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_3","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Comparable/#parameters_4","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_4","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Comparable/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_5","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_6","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Compare/","title":"Compare","text":"<p>[Source] <pre><code>type Compare is\n  (Less val | Equal val | Greater val)\n</code></pre></p>"},{"location":"builtin-Compare/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-DisposableActor/","title":"DisposableActor","text":"<p>[Source]</p> <p>An interface used to asynchronously dispose of an actor.</p> <pre><code>interface tag DisposableActor\n</code></pre>"},{"location":"builtin-DisposableActor/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-DisposableActor/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-DoNotOptimise/","title":"DoNotOptimise","text":"<p>[Source]</p> <p>Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes.</p> <pre><code>primitive val DoNotOptimise\n</code></pre>"},{"location":"builtin-DoNotOptimise/#constructors","title":"Constructors","text":""},{"location":"builtin-DoNotOptimise/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DoNotOptimise val^\n</code></pre>"},{"location":"builtin-DoNotOptimise/#returns","title":"Returns","text":"<ul> <li>DoNotOptimise val^</li> </ul>"},{"location":"builtin-DoNotOptimise/#public-functions","title":"Public Functions","text":""},{"location":"builtin-DoNotOptimise/#applya-a","title":"apply[A: A]","text":"<p>[Source]</p> <p>Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation.</p> <pre><code>fun box apply[A: A](\n  obj: A)\n: None val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters","title":"Parameters","text":"<ul> <li>obj: A</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-DoNotOptimise/#observe","title":"observe","text":"<p>[Source]</p> <p>Prevent the compiler from optimising out writes to an object marked by the apply function.</p> <pre><code>fun box observe()\n: None val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-DoNotOptimise/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DoNotOptimise val)\n: Bool val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters_1","title":"Parameters","text":"<ul> <li>that: DoNotOptimise val</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-DoNotOptimise/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DoNotOptimise val)\n: Bool val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters_2","title":"Parameters","text":"<ul> <li>that: DoNotOptimise val</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Env/","title":"Env","text":"<p>[Source]</p> <p>An environment holds the command line and other values injected into the program by default by the runtime.</p> <pre><code>class val Env\n</code></pre>"},{"location":"builtin-Env/#constructors","title":"Constructors","text":""},{"location":"builtin-Env/#create","title":"create","text":"<p>[Source]</p> <p>Build an artificial environment. A root capability must be supplied.</p> <pre><code>new val create(\n  root': AmbientAuth val,\n  input': InputStream tag,\n  out': OutStream tag,\n  err': OutStream tag,\n  args': Array[String val] val,\n  vars': Array[String val] val,\n  exitcode': {(I32)} val)\n: Env val^\n</code></pre>"},{"location":"builtin-Env/#parameters","title":"Parameters","text":"<ul> <li>root': AmbientAuth val</li> <li>input': InputStream tag</li> <li>out': OutStream tag</li> <li>err': OutStream tag</li> <li>args': Array[String val] val</li> <li>vars': Array[String val] val</li> <li>exitcode': {(I32)} val</li> </ul>"},{"location":"builtin-Env/#returns","title":"Returns","text":"<ul> <li>Env val^</li> </ul>"},{"location":"builtin-Env/#public-fields","title":"Public fields","text":""},{"location":"builtin-Env/#let-root-ambientauth-val","title":"let root: AmbientAuth val","text":"<p>[Source]</p> <p>The root capability.</p>"},{"location":"builtin-Env/#let-input-inputstream-tag","title":"let input: InputStream tag","text":"<p>[Source]</p> <p>Stdin represented as an actor.</p>"},{"location":"builtin-Env/#let-out-outstream-tag","title":"let out: OutStream tag","text":"<p>[Source]</p> <p>Stdout</p>"},{"location":"builtin-Env/#let-err-outstream-tag","title":"let err: OutStream tag","text":"<p>[Source]</p> <p>Stderr</p>"},{"location":"builtin-Env/#let-args-arraystring-val-val","title":"let args: Array[String val] val","text":"<p>[Source]</p> <p>The command line used to start the program.</p>"},{"location":"builtin-Env/#let-vars-arraystring-val-val","title":"let vars: Array[String val] val","text":"<p>[Source]</p> <p>The program's environment variables.</p>"},{"location":"builtin-Env/#let-exitcode-i32-val","title":"let exitcode: {(I32)} val","text":"<p>[Source]</p> <p>Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.</p>"},{"location":"builtin-Equal/","title":"Equal","text":"<p>[Source] <pre><code>primitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Equal/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Equal/#constructors","title":"Constructors","text":""},{"location":"builtin-Equal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Equal val^\n</code></pre>"},{"location":"builtin-Equal/#returns","title":"Returns","text":"<ul> <li>Equal val^</li> </ul>"},{"location":"builtin-Equal/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Equal/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Equal/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Equal/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Equal/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Equal/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equal/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Equal/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Equal/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equatable/","title":"Equatable[A: Equatable[A] #read]","text":"<p>[Source] <pre><code>interface ref Equatable[A: Equatable[A] #read]\n</code></pre></p>"},{"location":"builtin-Equatable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Equatable/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Equatable/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Equatable/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equatable/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Equatable/#parameters_1","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Equatable/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/","title":"F32","text":"<p>[Source] <pre><code>primitive val F32 is\n  FloatingPoint[F32 val] val\n</code></pre></p>"},{"location":"builtin-F32/#implements","title":"Implements","text":"<ul> <li>FloatingPoint[F32 val] val</li> </ul>"},{"location":"builtin-F32/#constructors","title":"Constructors","text":""},{"location":"builtin-F32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: F32 val = 0)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters","title":"Parameters","text":"<ul> <li>value: F32 val = 0</li> </ul>"},{"location":"builtin-F32/#returns","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#pi","title":"pi","text":"<p>[Source]</p> <pre><code>new val pi()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_1","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#e","title":"e","text":"<p>[Source]</p> <pre><code>new val e()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_2","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#from_bits","title":"from_bits","text":"<p>[Source]</p> <pre><code>new val from_bits(\n  i: U32 val)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters_1","title":"Parameters","text":"<ul> <li>i: U32 val</li> </ul>"},{"location":"builtin-F32/#returns_3","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters_2","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-F32/#returns_4","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#min_value","title":"min_value","text":"<p>[Source]</p> <p>Minimum negative value representable.</p> <pre><code>new val min_value()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_5","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#max_value","title":"max_value","text":"<p>[Source]</p> <p>Maximum positive value representable.</p> <pre><code>new val max_value()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_6","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <p>Minimum positive value representable at full precision (ie a normalised number).</p> <pre><code>new val min_normalised()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_7","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#epsilon","title":"epsilon","text":"<p>[Source]</p> <p>Minimum positive value such that (1 + epsilon) != 1.</p> <pre><code>new val epsilon()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_8","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-F32/#bits","title":"bits","text":"<p>[Source]</p> <pre><code>fun box bits()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#radix","title":"radix","text":"<p>[Source]</p> <p>Exponent radix.</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#precision2","title":"precision2","text":"<p>[Source]</p> <p>Mantissa precision in bits.</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#precision10","title":"precision10","text":"<p>[Source]</p> <p>Mantissa precision in decimal digits.</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <p>Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_13","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <p>Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_14","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <p>Maximum exponent value such that (2^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <p>Maximum exponent value such that (10^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_17","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_18","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_19","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_20","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_21","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_3","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_22","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_4","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_23","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_5","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_24","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_6","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_25","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_7","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_26","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_8","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_27","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#finite","title":"finite","text":"<p>[Source]</p> <p>Check whether this number is finite, ie not +/-infinity and not NaN.</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_28","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#infinite","title":"infinite","text":"<p>[Source]</p> <p>Check whether this number is +/-infinity</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_29","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#nan","title":"nan","text":"<p>[Source]</p> <p>Check whether this number is NaN.</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_30","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_9","title":"Parameters","text":"<ul> <li>x: F32 val</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-F32/#returns_31","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (F32 val , U32 val)\n</code></pre>"},{"location":"builtin-F32/#returns_32","title":"Returns","text":"<ul> <li>(F32 val , U32 val)</li> </ul>"},{"location":"builtin-F32/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_33","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_34","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_35","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_36","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_10","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_37","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\n  y: I32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_11","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-F32/#returns_38","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_39","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_40","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_41","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_42","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_43","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_44","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_45","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_46","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_47","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_48","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_49","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_50","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_51","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_52","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_12","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_53","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_54","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_55","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_56","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\n  sign: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_13","title":"Parameters","text":"<ul> <li>sign: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_57","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_58","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_59","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-F32/#returns_60","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-F32/#returns_61","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-F32/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-F32/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F32/#add_unsafe","title":"add_unsafe","text":"<pre><code>fun box add_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_14","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_64","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sub_unsafe","title":"sub_unsafe","text":"<pre><code>fun box sub_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_15","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_65","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mul_unsafe","title":"mul_unsafe","text":"<pre><code>fun box mul_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_16","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_66","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#div_unsafe","title":"div_unsafe","text":"<pre><code>fun box div_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_17","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_67","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#divrem_unsafe","title":"divrem_unsafe","text":"<pre><code>fun box divrem_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)\n</code></pre>"},{"location":"builtin-F32/#parameters_18","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_68","title":"Returns","text":"<ul> <li>(F32 val , F32 val)</li> </ul>"},{"location":"builtin-F32/#rem_unsafe","title":"rem_unsafe","text":"<pre><code>fun box rem_unsafe(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_19","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_69","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#neg_unsafe","title":"neg_unsafe","text":"<pre><code>fun box neg_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_70","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#eq_unsafe","title":"eq_unsafe","text":"<pre><code>fun box eq_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_20","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ne_unsafe","title":"ne_unsafe","text":"<pre><code>fun box ne_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_21","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_72","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#lt_unsafe","title":"lt_unsafe","text":"<pre><code>fun box lt_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_22","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#le_unsafe","title":"le_unsafe","text":"<pre><code>fun box le_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_23","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ge_unsafe","title":"ge_unsafe","text":"<pre><code>fun box ge_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_24","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#gt_unsafe","title":"gt_unsafe","text":"<pre><code>fun box gt_unsafe(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_25","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-F32/#returns_77","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-F32/#add","title":"add","text":"<pre><code>fun box add(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_26","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_78","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sub","title":"sub","text":"<pre><code>fun box sub(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_27","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_79","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mul","title":"mul","text":"<pre><code>fun box mul(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_28","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#div","title":"div","text":"<pre><code>fun box div(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_29","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_81","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#divrem","title":"divrem","text":"<pre><code>fun box divrem(\n  y: F32 val)\n: (F32 val , F32 val)\n</code></pre>"},{"location":"builtin-F32/#parameters_30","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_82","title":"Returns","text":"<ul> <li>(F32 val , F32 val)</li> </ul>"},{"location":"builtin-F32/#rem","title":"rem","text":"<pre><code>fun box rem(\n  y: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_31","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#neg","title":"neg","text":"<pre><code>fun box neg()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_84","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#eq","title":"eq","text":"<pre><code>fun box eq(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_32","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_85","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ne","title":"ne","text":"<pre><code>fun box ne(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_33","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_86","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#lt","title":"lt","text":"<pre><code>fun box lt(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_34","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_87","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#le","title":"le","text":"<pre><code>fun box le(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_35","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_88","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ge","title":"ge","text":"<pre><code>fun box ge(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_36","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_89","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#gt","title":"gt","text":"<pre><code>fun box gt(\n  y: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_37","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_90","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#i8","title":"i8","text":"<pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-F32/#returns_91","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F32/#i16","title":"i16","text":"<pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_92","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#i32","title":"i32","text":"<pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-F32/#returns_93","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F32/#i64","title":"i64","text":"<pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-F32/#returns_94","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F32/#ilong","title":"ilong","text":"<pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-F32/#returns_95","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F32/#isize","title":"isize","text":"<pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-F32/#returns_96","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F32/#u8","title":"u8","text":"<pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_97","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#u16","title":"u16","text":"<pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-F32/#returns_98","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F32/#u32","title":"u32","text":"<pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_99","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#u64","title":"u64","text":"<pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_100","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#ulong","title":"ulong","text":"<pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-F32/#returns_101","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F32/#usize","title":"usize","text":"<pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_102","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#f32_1","title":"f32","text":"<pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_103","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#f64","title":"f64","text":"<pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-F32/#returns_104","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F32/#i8_unsafe","title":"i8_unsafe","text":"<pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-F32/#returns_105","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F32/#i16_unsafe","title":"i16_unsafe","text":"<pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_106","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#i32_unsafe","title":"i32_unsafe","text":"<pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-F32/#returns_107","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F32/#i64_unsafe","title":"i64_unsafe","text":"<pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-F32/#returns_108","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F32/#ilong_unsafe","title":"ilong_unsafe","text":"<pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-F32/#returns_109","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F32/#isize_unsafe","title":"isize_unsafe","text":"<pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-F32/#returns_110","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F32/#u8_unsafe","title":"u8_unsafe","text":"<pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_111","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#u16_unsafe","title":"u16_unsafe","text":"<pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-F32/#returns_112","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F32/#u32_unsafe","title":"u32_unsafe","text":"<pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_113","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#u64_unsafe","title":"u64_unsafe","text":"<pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_114","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#ulong_unsafe","title":"ulong_unsafe","text":"<pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-F32/#returns_115","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F32/#usize_unsafe","title":"usize_unsafe","text":"<pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_116","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#f32_unsafe","title":"f32_unsafe","text":"<pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_117","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#f64_unsafe","title":"f64_unsafe","text":"<pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F32/#returns_118","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-F32/#parameters_38","title":"Parameters","text":"<ul> <li>that: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_119","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-F64/","title":"F64","text":"<p>[Source] <pre><code>primitive val F64 is\n  FloatingPoint[F64 val] val\n</code></pre></p>"},{"location":"builtin-F64/#implements","title":"Implements","text":"<ul> <li>FloatingPoint[F64 val] val</li> </ul>"},{"location":"builtin-F64/#constructors","title":"Constructors","text":""},{"location":"builtin-F64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: F64 val = 0)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters","title":"Parameters","text":"<ul> <li>value: F64 val = 0</li> </ul>"},{"location":"builtin-F64/#returns","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#pi","title":"pi","text":"<p>[Source]</p> <pre><code>new val pi()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_1","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#e","title":"e","text":"<p>[Source]</p> <pre><code>new val e()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_2","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#from_bits","title":"from_bits","text":"<p>[Source]</p> <pre><code>new val from_bits(\n  i: U64 val)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters_1","title":"Parameters","text":"<ul> <li>i: U64 val</li> </ul>"},{"location":"builtin-F64/#returns_3","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters_2","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-F64/#returns_4","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#min_value","title":"min_value","text":"<p>[Source]</p> <p>Minimum negative value representable.</p> <pre><code>new val min_value()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_5","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#max_value","title":"max_value","text":"<p>[Source]</p> <p>Maximum positive value representable.</p> <pre><code>new val max_value()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_6","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <p>Minimum positive value representable at full precision (ie a normalised number).</p> <pre><code>new val min_normalised()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_7","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#epsilon","title":"epsilon","text":"<p>[Source]</p> <p>Minimum positive value such that (1 + epsilon) != 1.</p> <pre><code>new val epsilon()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_8","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-F64/#bits","title":"bits","text":"<p>[Source]</p> <pre><code>fun box bits()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#radix","title":"radix","text":"<p>[Source]</p> <p>Exponent radix.</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#precision2","title":"precision2","text":"<p>[Source]</p> <p>Mantissa precision in bits.</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#precision10","title":"precision10","text":"<p>[Source]</p> <p>Mantissa precision in decimal digits.</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <p>Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_13","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <p>Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_14","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <p>Maximum exponent value such that (2^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <p>Maximum exponent value such that (10^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_17","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_18","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_19","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_3","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_22","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_4","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_23","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_5","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_24","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_6","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_25","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_7","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_26","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_8","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_27","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#finite","title":"finite","text":"<p>[Source]</p> <p>Check whether this number is finite, ie not +/-infinity and not NaN.</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_28","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#infinite","title":"infinite","text":"<p>[Source]</p> <p>Check whether this number is +/-infinity</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_29","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#nan","title":"nan","text":"<p>[Source]</p> <p>Check whether this number is NaN.</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_30","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_9","title":"Parameters","text":"<ul> <li>x: F64 val</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-F64/#returns_31","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (F64 val , U32 val)\n</code></pre>"},{"location":"builtin-F64/#returns_32","title":"Returns","text":"<ul> <li>(F64 val , U32 val)</li> </ul>"},{"location":"builtin-F64/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_33","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_34","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_35","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_36","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_10","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_37","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\n  y: I32 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_11","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-F64/#returns_38","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_39","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_40","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_41","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_42","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_43","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_44","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_45","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_46","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_47","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_48","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_49","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_50","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_51","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_52","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_12","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_53","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_54","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_55","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_56","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\n  sign: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_13","title":"Parameters","text":"<ul> <li>sign: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_57","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_58","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_59","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-F64/#returns_60","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-F64/#returns_61","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-F64/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-F64/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F64/#add_unsafe","title":"add_unsafe","text":"<pre><code>fun box add_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_14","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_64","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sub_unsafe","title":"sub_unsafe","text":"<pre><code>fun box sub_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_15","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_65","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mul_unsafe","title":"mul_unsafe","text":"<pre><code>fun box mul_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_16","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_66","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#div_unsafe","title":"div_unsafe","text":"<pre><code>fun box div_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_17","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_67","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#divrem_unsafe","title":"divrem_unsafe","text":"<pre><code>fun box divrem_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)\n</code></pre>"},{"location":"builtin-F64/#parameters_18","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_68","title":"Returns","text":"<ul> <li>(F64 val , F64 val)</li> </ul>"},{"location":"builtin-F64/#rem_unsafe","title":"rem_unsafe","text":"<pre><code>fun box rem_unsafe(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_19","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_69","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#neg_unsafe","title":"neg_unsafe","text":"<pre><code>fun box neg_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_70","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#eq_unsafe","title":"eq_unsafe","text":"<pre><code>fun box eq_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_20","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ne_unsafe","title":"ne_unsafe","text":"<pre><code>fun box ne_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_21","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_72","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#lt_unsafe","title":"lt_unsafe","text":"<pre><code>fun box lt_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_22","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#le_unsafe","title":"le_unsafe","text":"<pre><code>fun box le_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_23","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ge_unsafe","title":"ge_unsafe","text":"<pre><code>fun box ge_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_24","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#gt_unsafe","title":"gt_unsafe","text":"<pre><code>fun box gt_unsafe(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_25","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-F64/#returns_77","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-F64/#add","title":"add","text":"<pre><code>fun box add(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_26","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_78","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sub","title":"sub","text":"<pre><code>fun box sub(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_27","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_79","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mul","title":"mul","text":"<pre><code>fun box mul(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_28","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_80","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#div","title":"div","text":"<pre><code>fun box div(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_29","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#divrem","title":"divrem","text":"<pre><code>fun box divrem(\n  y: F64 val)\n: (F64 val , F64 val)\n</code></pre>"},{"location":"builtin-F64/#parameters_30","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_82","title":"Returns","text":"<ul> <li>(F64 val , F64 val)</li> </ul>"},{"location":"builtin-F64/#rem","title":"rem","text":"<pre><code>fun box rem(\n  y: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_31","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_83","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#neg","title":"neg","text":"<pre><code>fun box neg()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#eq","title":"eq","text":"<pre><code>fun box eq(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_32","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_85","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ne","title":"ne","text":"<pre><code>fun box ne(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_33","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_86","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#lt","title":"lt","text":"<pre><code>fun box lt(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_34","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_87","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#le","title":"le","text":"<pre><code>fun box le(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_35","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_88","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ge","title":"ge","text":"<pre><code>fun box ge(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_36","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_89","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#gt","title":"gt","text":"<pre><code>fun box gt(\n  y: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_37","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_90","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#i8","title":"i8","text":"<pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-F64/#returns_91","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F64/#i16","title":"i16","text":"<pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_92","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#i32","title":"i32","text":"<pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-F64/#returns_93","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F64/#i64","title":"i64","text":"<pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-F64/#returns_94","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F64/#ilong","title":"ilong","text":"<pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-F64/#returns_95","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F64/#isize","title":"isize","text":"<pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-F64/#returns_96","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F64/#u8","title":"u8","text":"<pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_97","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#u16","title":"u16","text":"<pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-F64/#returns_98","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F64/#u32","title":"u32","text":"<pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-F64/#returns_99","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F64/#u64","title":"u64","text":"<pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_100","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#ulong","title":"ulong","text":"<pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-F64/#returns_101","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F64/#usize","title":"usize","text":"<pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_102","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#f32","title":"f32","text":"<pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-F64/#returns_103","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F64/#f64_1","title":"f64","text":"<pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_104","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#i8_unsafe","title":"i8_unsafe","text":"<pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-F64/#returns_105","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F64/#i16_unsafe","title":"i16_unsafe","text":"<pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_106","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#i32_unsafe","title":"i32_unsafe","text":"<pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-F64/#returns_107","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F64/#i64_unsafe","title":"i64_unsafe","text":"<pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-F64/#returns_108","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F64/#ilong_unsafe","title":"ilong_unsafe","text":"<pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-F64/#returns_109","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F64/#isize_unsafe","title":"isize_unsafe","text":"<pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-F64/#returns_110","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F64/#u8_unsafe","title":"u8_unsafe","text":"<pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_111","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#u16_unsafe","title":"u16_unsafe","text":"<pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-F64/#returns_112","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F64/#u32_unsafe","title":"u32_unsafe","text":"<pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-F64/#returns_113","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F64/#u64_unsafe","title":"u64_unsafe","text":"<pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_114","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#ulong_unsafe","title":"ulong_unsafe","text":"<pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-F64/#returns_115","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F64/#usize_unsafe","title":"usize_unsafe","text":"<pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_116","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#f32_unsafe","title":"f32_unsafe","text":"<pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F64/#returns_117","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F64/#f64_unsafe","title":"f64_unsafe","text":"<pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_118","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-F64/#parameters_38","title":"Parameters","text":"<ul> <li>that: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_119","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Float/","title":"Float","text":"<p>[Source] <pre><code>type Float is\n  (F32 val | F64 val)\n</code></pre></p>"},{"location":"builtin-Float/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(F32 val | F64 val)</li> </ul>"},{"location":"builtin-FloatingPoint/","title":"FloatingPoint[A: FloatingPoint[A] val]","text":"<p>[Source] <pre><code>trait val FloatingPoint[A: FloatingPoint[A] val] is\n  Real[A] val\n</code></pre></p>"},{"location":"builtin-FloatingPoint/#implements","title":"Implements","text":"<ul> <li>Real[A] val</li> </ul>"},{"location":"builtin-FloatingPoint/#constructors","title":"Constructors","text":""},{"location":"builtin-FloatingPoint/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <pre><code>new val min_normalised()\n: FloatingPoint[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns","title":"Returns","text":"<ul> <li>FloatingPoint[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#epsilon","title":"epsilon","text":"<p>[Source]</p> <pre><code>new val epsilon()\n: FloatingPoint[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_1","title":"Returns","text":"<ul> <li>FloatingPoint[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_4","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_5","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#public-functions","title":"Public Functions","text":""},{"location":"builtin-FloatingPoint/#radix","title":"radix","text":"<p>[Source]</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#precision2","title":"precision2","text":"<p>[Source]</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#precision10","title":"precision10","text":"<p>[Source]</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_9","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_10","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box add_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_13","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box sub_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_14","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box mul_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_15","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box div_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_16","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box fld_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box divrem_unsafe(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_18","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-FloatingPoint/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box rem_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box mod_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_21","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#eq_unsafe","title":"eq_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box eq_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_10","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ne_unsafe","title":"ne_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box ne_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_11","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#lt_unsafe","title":"lt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box lt_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_12","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#le_unsafe","title":"le_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box le_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_13","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ge_unsafe","title":"ge_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box ge_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_14","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_26","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#gt_unsafe","title":"gt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box gt_unsafe(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_15","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_27","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_31","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#finite","title":"finite","text":"<p>[Source]</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_33","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#infinite","title":"infinite","text":"<p>[Source]</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_34","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#nan","title":"nan","text":"<p>[Source]</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\n  x: A,\n  exponent: I32 val)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_16","title":"Parameters","text":"<ul> <li>x: A</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_36","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (A , U32 val)\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_37","title":"Returns","text":"<ul> <li>(A , U32 val)</li> </ul>"},{"location":"builtin-FloatingPoint/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_38","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_40","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\n  y: I32 val)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_18","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_43","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_44","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_51","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_55","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_56","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_57","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_58","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_59","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_60","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_61","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\n  sign: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_20","title":"Parameters","text":"<ul> <li>sign: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_62","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_63","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-FloatingPoint/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_64","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_65","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_66","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_67","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_68","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-FloatingPoint/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_69","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_70","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_71","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_72","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_29","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_30","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_31","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_32","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_33","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_77","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_34","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_78","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_79","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_80","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_81","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_82","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_83","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_84","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_85","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_86","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_87","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_88","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-FloatingPoint/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_89","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-FloatingPoint/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_90","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_91","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_92","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_93","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_94","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_95","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-FloatingPoint/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_96","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_97","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_98","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_99","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_100","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_101","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_102","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_103","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_104","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-FloatingPoint/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_105","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-FloatingPoint/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_106","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_107","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_108","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_109","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_110","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_111","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-FloatingPoint/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_112","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_113","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_114","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_37","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_115","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Greater/","title":"Greater","text":"<p>[Source] <pre><code>primitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Greater/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Greater/#constructors","title":"Constructors","text":""},{"location":"builtin-Greater/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Greater val^\n</code></pre>"},{"location":"builtin-Greater/#returns","title":"Returns","text":"<ul> <li>Greater val^</li> </ul>"},{"location":"builtin-Greater/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Greater/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Greater/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Greater/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Greater/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Greater/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Greater/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Greater/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Greater/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-HasEq/","title":"HasEq[A: A]","text":"<p>[Source] <pre><code>interface ref HasEq[A: A]\n</code></pre></p>"},{"location":"builtin-HasEq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-HasEq/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-HasEq/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-HasEq/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/","title":"I128","text":"<p>[Source] <pre><code>primitive val I128 is\n  SignedInteger[I128 val, U128 val] val\n</code></pre></p>"},{"location":"builtin-I128/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I128 val, U128 val] val</li> </ul>"},{"location":"builtin-I128/#constructors","title":"Constructors","text":""},{"location":"builtin-I128/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I128 val)\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#parameters","title":"Parameters","text":"<ul> <li>value: I128 val</li> </ul>"},{"location":"builtin-I128/#returns","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I128/#returns_1","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#returns_2","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#returns_3","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I128/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_4","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_5","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_6","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_9","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_10","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_11","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_12","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_2","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_3","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_4","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_16","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_5","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_17","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_6","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_18","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_7","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_19","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_21","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I128/#returns_22","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I128/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_8","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_23","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I128 val)\n: (I128 val , I128 val)\n</code></pre>"},{"location":"builtin-I128/#parameters_9","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_24","title":"Returns","text":"<ul> <li>(I128 val , I128 val)</li> </ul>"},{"location":"builtin-I128/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_10","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_25","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_11","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_26","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_12","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_27","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)\n</code></pre>"},{"location":"builtin-I128/#parameters_13","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_28","title":"Returns","text":"<ul> <li>(I128 val , I128 val)</li> </ul>"},{"location":"builtin-I128/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_14","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_29","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_15","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_30","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I128/#returns_31","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I128/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I128/#returns_32","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I128/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I128/#returns_33","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I128/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I128/#returns_34","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I128/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_16","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_35","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_17","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_36","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_18","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_37","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_19","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_38","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_20","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_39","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_21","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_40","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_22","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_41","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_23","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_42","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_24","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_43","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_25","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_44","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_26","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_45","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_27","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_46","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I128 val)\n: (I128 val , I128 val) ?\n</code></pre>"},{"location":"builtin-I128/#parameters_28","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_47","title":"Returns","text":"<ul> <li>(I128 val , I128 val) ?</li> </ul>"},{"location":"builtin-I128/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_29","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_48","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_30","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_49","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_31","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_50","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_32","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_51","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_33","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_52","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_34","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_53","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_35","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_54","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_36","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_55","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_56","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_37","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_57","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_38","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_58","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_39","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_59","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_60","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_40","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_61","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_41","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_63","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_42","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_43","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_44","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_45","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_46","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_68","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_47","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I128/#returns_70","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I128/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I128/#returns_71","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I128/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I128/#returns_72","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I128/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I128/#returns_73","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I128/#i128_1","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_74","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I128/#returns_75","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I128/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I128/#returns_76","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I128/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I128/#returns_77","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I128/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I128/#returns_78","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I128/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I128/#returns_79","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I128/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_80","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_81","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I128/#returns_82","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I128/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_83","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I128/#returns_84","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I128/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I128/#returns_85","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I128/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I128/#returns_86","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I128/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I128/#returns_87","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I128/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_88","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I128/#returns_89","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I128/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I128/#returns_90","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I128/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I128/#returns_91","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I128/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I128/#returns_92","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I128/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I128/#returns_93","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I128/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_94","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_95","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I128/#returns_96","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I128/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_97","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I128/#parameters_48","title":"Parameters","text":"<ul> <li>that: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I16/","title":"I16","text":"<p>[Source] <pre><code>primitive val I16 is\n  SignedInteger[I16 val, U16 val] val\n</code></pre></p>"},{"location":"builtin-I16/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I16 val, U16 val] val</li> </ul>"},{"location":"builtin-I16/#constructors","title":"Constructors","text":""},{"location":"builtin-I16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I16 val)\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#parameters","title":"Parameters","text":"<ul> <li>value: I16 val</li> </ul>"},{"location":"builtin-I16/#returns","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I16/#returns_1","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#returns_2","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#returns_3","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I16/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_5","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_6","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_7","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_9","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_10","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_11","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_12","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_2","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_14","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_3","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_4","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_5","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_17","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_6","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_18","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_7","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_19","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_8","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_20","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_9","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_21","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_10","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_22","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_11","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_23","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_12","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_24","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_13","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_25","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_14","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_26","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_15","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_27","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_16","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_28","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_17","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_29","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_18","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_30","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_19","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_31","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I16 val)\n: (I16 val , I16 val) ?\n</code></pre>"},{"location":"builtin-I16/#parameters_20","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_32","title":"Returns","text":"<ul> <li>(I16 val , I16 val) ?</li> </ul>"},{"location":"builtin-I16/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_21","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_33","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_22","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_34","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_23","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_35","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_24","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_36","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_25","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_37","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_26","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_38","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I16/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I16/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_27","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_40","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_28","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_41","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_29","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_42","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_30","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_43","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)\n</code></pre>"},{"location":"builtin-I16/#parameters_31","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_44","title":"Returns","text":"<ul> <li>(I16 val , I16 val)</li> </ul>"},{"location":"builtin-I16/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_32","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_45","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_46","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_33","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_47","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_34","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_48","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_35","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_49","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_50","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_36","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_51","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_37","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_52","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_38","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_53","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_39","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_54","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I16 val)\n: (I16 val , I16 val)\n</code></pre>"},{"location":"builtin-I16/#parameters_40","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_55","title":"Returns","text":"<ul> <li>(I16 val , I16 val)</li> </ul>"},{"location":"builtin-I16/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_41","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_56","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_57","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_42","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_43","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_44","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_45","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_46","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_47","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I16/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I16/#i16_1","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I16/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I16/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I16/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I16/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I16/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I16/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I16/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I16/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I16/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I16/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I16/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I16/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I16/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I16/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I16/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I16/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I16/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I16/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I16/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I16/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I16/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I16/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I16/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I16/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I16/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I16/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I16/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I16/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I16/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I16/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I16/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I16/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I16/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I16/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I16/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I16/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I16/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I16/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I16/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I16/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I16/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I16/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I16/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I16/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I16/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I16/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I16/#parameters_48","title":"Parameters","text":"<ul> <li>that: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I32/","title":"I32","text":"<p>[Source] <pre><code>primitive val I32 is\n  SignedInteger[I32 val, U32 val] val\n</code></pre></p>"},{"location":"builtin-I32/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I32 val, U32 val] val</li> </ul>"},{"location":"builtin-I32/#constructors","title":"Constructors","text":""},{"location":"builtin-I32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I32 val)\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#parameters","title":"Parameters","text":"<ul> <li>value: I32 val</li> </ul>"},{"location":"builtin-I32/#returns","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I32/#returns_1","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#returns_2","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#returns_3","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_5","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_6","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_2","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_14","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_3","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_15","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_4","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_16","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_5","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_17","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_6","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_18","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_7","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_19","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_8","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_20","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_9","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_21","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_10","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_22","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_11","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_23","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_12","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_24","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_13","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_25","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_14","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_26","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_15","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_27","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_16","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_28","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_17","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_29","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_18","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_30","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_19","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_31","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I32 val)\n: (I32 val , I32 val) ?\n</code></pre>"},{"location":"builtin-I32/#parameters_20","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_32","title":"Returns","text":"<ul> <li>(I32 val , I32 val) ?</li> </ul>"},{"location":"builtin-I32/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_21","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_33","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_22","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_34","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_23","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_35","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_24","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_36","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_25","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_37","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_26","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_38","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I32/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I32/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_27","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_40","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_28","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_41","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_29","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_42","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_30","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_43","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)\n</code></pre>"},{"location":"builtin-I32/#parameters_31","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_44","title":"Returns","text":"<ul> <li>(I32 val , I32 val)</li> </ul>"},{"location":"builtin-I32/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_32","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_45","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_46","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_33","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_47","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_34","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_48","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_35","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_49","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_50","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_36","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_51","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_37","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_52","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_38","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_53","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_39","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_54","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I32 val)\n: (I32 val , I32 val)\n</code></pre>"},{"location":"builtin-I32/#parameters_40","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_55","title":"Returns","text":"<ul> <li>(I32 val , I32 val)</li> </ul>"},{"location":"builtin-I32/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_41","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_56","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_57","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_42","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_43","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_44","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_45","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_46","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_47","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I32/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I32/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I32/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I32/#i32_1","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I32/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I32/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I32/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I32/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I32/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I32/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I32/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I32/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I32/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I32/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I32/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I32/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I32/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I32/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I32/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I32/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I32/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I32/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I32/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I32/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I32/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I32/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I32/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I32/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I32/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I32/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I32/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I32/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I32/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I32/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I32/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I32/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I32/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I32/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I32/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I32/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I32/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I32/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I32/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I32/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I32/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I32/#parameters_48","title":"Parameters","text":"<ul> <li>that: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I64/","title":"I64","text":"<p>[Source] <pre><code>primitive val I64 is\n  SignedInteger[I64 val, U64 val] val\n</code></pre></p>"},{"location":"builtin-I64/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I64 val, U64 val] val</li> </ul>"},{"location":"builtin-I64/#constructors","title":"Constructors","text":""},{"location":"builtin-I64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I64 val)\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#parameters","title":"Parameters","text":"<ul> <li>value: I64 val</li> </ul>"},{"location":"builtin-I64/#returns","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I64/#returns_1","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#returns_2","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#returns_3","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_5","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_6","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_2","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_3","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_15","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_4","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_16","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_5","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_17","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_6","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_18","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_7","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_19","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_8","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_21","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_9","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_22","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_10","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_23","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_11","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_24","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_12","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_25","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_13","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_26","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_14","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_27","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_15","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_28","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_16","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_29","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_17","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_30","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_18","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_31","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_19","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_32","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I64 val)\n: (I64 val , I64 val) ?\n</code></pre>"},{"location":"builtin-I64/#parameters_20","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_33","title":"Returns","text":"<ul> <li>(I64 val , I64 val) ?</li> </ul>"},{"location":"builtin-I64/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_21","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_34","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_22","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_35","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_23","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_36","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_24","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_37","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_25","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_38","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_26","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_39","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I64/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I64/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_27","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_41","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_28","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_42","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_29","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_43","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_30","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_44","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)\n</code></pre>"},{"location":"builtin-I64/#parameters_31","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_45","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"builtin-I64/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_32","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_46","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_47","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_33","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_48","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_34","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_49","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_35","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_50","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_51","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_36","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_52","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_37","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_53","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_38","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_54","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_39","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_55","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I64 val)\n: (I64 val , I64 val)\n</code></pre>"},{"location":"builtin-I64/#parameters_40","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_56","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"builtin-I64/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_41","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_57","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_58","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_42","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_43","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_44","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_45","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_46","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_47","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I64/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I64/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I64/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I64/#i64_1","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I64/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I64/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I64/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I64/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I64/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I64/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I64/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I64/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I64/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I64/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I64/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I64/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I64/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I64/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I64/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I64/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I64/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I64/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I64/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I64/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I64/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I64/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I64/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I64/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I64/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I64/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I64/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I64/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I64/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I64/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I64/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I64/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I64/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I64/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I64/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I64/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I64/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I64/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I64/#parameters_48","title":"Parameters","text":"<ul> <li>that: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I8/","title":"I8","text":"<p>[Source] <pre><code>primitive val I8 is\n  SignedInteger[I8 val, U8 val] val\n</code></pre></p>"},{"location":"builtin-I8/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I8 val, U8 val] val</li> </ul>"},{"location":"builtin-I8/#constructors","title":"Constructors","text":""},{"location":"builtin-I8/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: I8 val)\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#parameters","title":"Parameters","text":"<ul> <li>value: I8 val</li> </ul>"},{"location":"builtin-I8/#returns","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I8/#returns_1","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#returns_2","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#returns_3","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I8/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_5","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_6","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_9","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_2","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_14","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_3","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_15","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_4","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_16","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_5","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_17","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_6","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_18","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_7","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_19","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_8","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_20","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_9","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_21","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_10","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_22","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_11","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_23","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_12","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_24","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_13","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_25","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_14","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_26","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_15","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_27","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_16","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_28","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_17","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_29","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_18","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_30","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_19","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_31","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: I8 val)\n: (I8 val , I8 val) ?\n</code></pre>"},{"location":"builtin-I8/#parameters_20","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_32","title":"Returns","text":"<ul> <li>(I8 val , I8 val) ?</li> </ul>"},{"location":"builtin-I8/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_21","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_33","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_22","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_34","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_23","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_35","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_24","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_36","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_25","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_37","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_26","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_38","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I8/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I8/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_27","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_40","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_28","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_41","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_29","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_42","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_30","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_43","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)\n</code></pre>"},{"location":"builtin-I8/#parameters_31","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_44","title":"Returns","text":"<ul> <li>(I8 val , I8 val)</li> </ul>"},{"location":"builtin-I8/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_32","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_45","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_46","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_33","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_47","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_34","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_48","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_35","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_49","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_50","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_36","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_51","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_37","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_52","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_38","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_53","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_39","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_54","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: I8 val)\n: (I8 val , I8 val)\n</code></pre>"},{"location":"builtin-I8/#parameters_40","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_55","title":"Returns","text":"<ul> <li>(I8 val , I8 val)</li> </ul>"},{"location":"builtin-I8/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_41","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_56","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_57","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_42","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_43","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_44","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_45","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_46","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_47","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#i8_1","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I8/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I8/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I8/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I8/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I8/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I8/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I8/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I8/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I8/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I8/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I8/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I8/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I8/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I8/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I8/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I8/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I8/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I8/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I8/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I8/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I8/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I8/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I8/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I8/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I8/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I8/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I8/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I8/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I8/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I8/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I8/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I8/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I8/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I8/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I8/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I8/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I8/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I8/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I8/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I8/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I8/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I8/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I8/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I8/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I8/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I8/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I8/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I8/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I8/#parameters_48","title":"Parameters","text":"<ul> <li>that: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ILong/","title":"ILong","text":"<p>[Source] <pre><code>primitive val ILong is\n  SignedInteger[ILong val, ULong val] val\n</code></pre></p>"},{"location":"builtin-ILong/#implements","title":"Implements","text":"<ul> <li>SignedInteger[ILong val, ULong val] val</li> </ul>"},{"location":"builtin-ILong/#constructors","title":"Constructors","text":""},{"location":"builtin-ILong/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: ILong val)\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#parameters","title":"Parameters","text":"<ul> <li>value: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ILong/#returns_1","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#returns_2","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#returns_3","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ILong/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_4","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_5","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_6","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_7","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <pre><code>fun box clz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_10","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <pre><code>fun box ctz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_11","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_12","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_2","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_14","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_3","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_4","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_5","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_17","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_6","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_18","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_7","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_19","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_8","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_21","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_9","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_22","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_10","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_23","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_11","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_24","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_12","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_25","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_13","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_26","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_14","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_27","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_15","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_28","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_16","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_29","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_17","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_30","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_18","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_31","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_19","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_32","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: ILong val)\n: (ILong val , ILong val) ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_20","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_33","title":"Returns","text":"<ul> <li>(ILong val , ILong val) ?</li> </ul>"},{"location":"builtin-ILong/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_21","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_34","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_22","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_35","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_23","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_36","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_24","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_37","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_25","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_38","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_26","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_39","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ILong/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ILong/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_27","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_41","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_28","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_42","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_29","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_43","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_30","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_44","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_31","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_45","title":"Returns","text":"<ul> <li>(ILong val , ILong val)</li> </ul>"},{"location":"builtin-ILong/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_32","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_46","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_47","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_33","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_48","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_34","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_49","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_35","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_50","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_51","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_36","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_52","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_37","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_53","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_38","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_54","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_39","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_55","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: ILong val)\n: (ILong val , ILong val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_40","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_56","title":"Returns","text":"<ul> <li>(ILong val , ILong val)</li> </ul>"},{"location":"builtin-ILong/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_41","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_57","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_58","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_42","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_43","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_44","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_45","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_46","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_47","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ILong/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ILong/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ILong/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ILong/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ILong/#ilong_1","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ILong/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ILong/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ILong/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ILong/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ILong/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ILong/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ILong/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ILong/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ILong/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ILong/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ILong/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ILong/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ILong/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ILong/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ILong/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ILong/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ILong/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ILong/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ILong/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ILong/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ILong/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_48","title":"Parameters","text":"<ul> <li>that: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ISize/","title":"ISize","text":"<p>[Source] <pre><code>primitive val ISize is\n  SignedInteger[ISize val, USize val] val\n</code></pre></p>"},{"location":"builtin-ISize/#implements","title":"Implements","text":"<ul> <li>SignedInteger[ISize val, USize val] val</li> </ul>"},{"location":"builtin-ISize/#constructors","title":"Constructors","text":""},{"location":"builtin-ISize/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: ISize val)\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#parameters","title":"Parameters","text":"<ul> <li>value: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ISize/#returns_1","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#returns_2","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#returns_3","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ISize/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_5","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_6","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <pre><code>fun box clz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <pre><code>fun box ctz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_12","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_2","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_14","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_3","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_15","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_4","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_5","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_6","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_18","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_7","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_19","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_8","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_20","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_9","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_21","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_10","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_22","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_11","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_23","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_12","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_24","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_13","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_25","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_14","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_26","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_15","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_27","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_16","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_28","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_17","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_29","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_18","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_30","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_19","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_31","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: ISize val)\n: (ISize val , ISize val) ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_20","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_32","title":"Returns","text":"<ul> <li>(ISize val , ISize val) ?</li> </ul>"},{"location":"builtin-ISize/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_21","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_33","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_22","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_34","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_23","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_35","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_24","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_36","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_25","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_37","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_26","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_38","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ISize/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ISize/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_27","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_40","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_28","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_41","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_29","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_42","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_30","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_43","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_31","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_44","title":"Returns","text":"<ul> <li>(ISize val , ISize val)</li> </ul>"},{"location":"builtin-ISize/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_32","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_45","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_46","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_33","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_47","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_34","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_48","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_35","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_49","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_50","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_36","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_51","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_37","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_52","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_38","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_53","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_39","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_54","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: ISize val)\n: (ISize val , ISize val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_40","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_55","title":"Returns","text":"<ul> <li>(ISize val , ISize val)</li> </ul>"},{"location":"builtin-ISize/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_41","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_56","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_57","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_42","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_43","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_44","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_45","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_46","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_47","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ISize/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ISize/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ISize/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ISize/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ISize/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ISize/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ISize/#isize_1","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ISize/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ISize/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ISize/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ISize/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ISize/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ISize/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ISize/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ISize/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ISize/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ISize/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ISize/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ISize/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ISize/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ISize/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ISize/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ISize/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ISize/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ISize/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ISize/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ISize/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ISize/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ISize/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ISize/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_48","title":"Parameters","text":"<ul> <li>that: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-InputNotify/","title":"InputNotify","text":"<p>[Source]</p> <p>Notification for data arriving via an input stream.</p> <pre><code>interface ref InputNotify\n</code></pre>"},{"location":"builtin-InputNotify/#public-functions","title":"Public Functions","text":""},{"location":"builtin-InputNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Called when data is available on the stream.</p> <pre><code>fun ref apply(\n  data: Array[U8 val] iso)\n: None val\n</code></pre>"},{"location":"builtin-InputNotify/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"builtin-InputNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-InputNotify/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Called when no more data will arrive on the stream.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"builtin-InputNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-InputStream/","title":"InputStream","text":"<p>[Source]</p> <p>Asynchronous access to some input stream.</p> <pre><code>interface tag InputStream\n</code></pre>"},{"location":"builtin-InputStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-InputStream/#apply","title":"apply","text":"<p>[Source]</p> <p>Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier.</p> <pre><code>be apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = 32)\n</code></pre>"},{"location":"builtin-InputStream/#parameters","title":"Parameters","text":"<ul> <li>notify: (InputNotify iso | None val)</li> <li>chunk_size: USize val = 32</li> </ul>"},{"location":"builtin-InputStream/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Clear the notifier in order to shut down input.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-Int/","title":"Int","text":"<p>[Source] <pre><code>type Int is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n</code></pre></p>"},{"location":"builtin-Int/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)</li> </ul>"},{"location":"builtin-Integer/","title":"Integer[A: Integer[A] val]","text":"<p>[Source] <pre><code>trait val Integer[A: Integer[A] val] is\n  Real[A] val\n</code></pre></p>"},{"location":"builtin-Integer/#implements","title":"Implements","text":"<ul> <li>Real[A] val</li> </ul>"},{"location":"builtin-Integer/#constructors","title":"Constructors","text":""},{"location":"builtin-Integer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Integer/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-Integer/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Integer/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box add_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box sub_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Integer division, rounded towards zero.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Calculates the quotient of this number and <code>y</code> and the remainder.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Integer/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_8","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Integer/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Calculates the remainder of this number divided by <code>y</code>.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_9","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <p>Floored division, rounded towards negative infinity, as opposed to <code>div</code> which rounds towards zero.</p> <p>Unsafe Operation</p> <p>If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box fld_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <p>Calculates the modulo of this number after floored division by <code>y</code>.</p> <p>Unsafe Operation.</p> <p>If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box mod_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#add_partial","title":"add_partial","text":"<p>[Source]</p> <p>Add y to this number.</p> <p>If the operation overflows this function errors.</p> <pre><code>fun box add_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_12","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <p>Subtract y from this number.</p> <p>If the operation overflows/underflows this function errors.</p> <pre><code>fun box sub_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_13","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <p>Multiply y with this number.</p> <p>If the operation overflows this function errors.</p> <pre><code>fun box mul_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_14","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#div_partial","title":"div_partial","text":"<p>[Source]</p> <p>Divides this number by <code>y</code>, rounds the result towards zero.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box div_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_15","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <p>Calculates the remainder of this number divided by y. The result has the sign of the dividend.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box rem_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_16","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <p>Divides this number by y and calculates the remainder of the operation.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box divrem_partial(\n  y: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_17","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-Integer/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <p>Floored integer division, rounded towards negative infinity.</p> <p>If y is <code>0</code> or the operation overflows, this function errors</p> <pre><code>fun box fld_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_18","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <p>Calculates the modulo of this number and <code>y</code> after floored division (<code>fld</code>). The result has the sign of the divisor.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box mod_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_19","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#addc","title":"addc","text":"<p>[Source]</p> <p>Add <code>y</code> to this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box addc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_21","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#subc","title":"subc","text":"<p>[Source]</p> <p>Subtract <code>y</code> from this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box subc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_22","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#mulc","title":"mulc","text":"<p>[Source]</p> <p>Multiply <code>y</code> with this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box mulc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_23","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#divc","title":"divc","text":"<p>[Source]</p> <p>Divide this integer by <code>y</code> and return the result and a flag indicating overflow or division by zero.</p> <pre><code>fun box divc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_24","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#remc","title":"remc","text":"<p>[Source]</p> <p>Calculate the remainder of this number divided by <code>y</code> and return the result and a flag indicating division by zero or overflow.</p> <p>The result will have the sign of the dividend.</p> <pre><code>fun box remc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_25","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#fldc","title":"fldc","text":"<p>[Source]</p> <p>Divide this integer by <code>y</code> and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero.</p> <pre><code>fun box fldc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_26","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#modc","title":"modc","text":"<p>[Source]</p> <p>Calculate the modulo of this number after floored division by <code>y</code> and return the result and a flag indicating division by zero or overflow.</p> <p>The result will have the sign of the divisor.</p> <pre><code>fun box modc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_27","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_31","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <p>Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183).</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_33","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_34","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_35","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_36","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_37","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Integer/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_38","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Integer/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_40","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_36","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_43","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_37","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_44","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_38","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_45","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_39","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_46","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_40","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_47","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_41","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_48","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_42","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_43","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_51","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_52","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Integer/#returns_53","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Integer/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_54","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Integer/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_55","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Integer/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_56","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Integer/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_57","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Integer/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_58","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Integer/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-Integer/#returns_59","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Integer/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-Integer/#returns_60","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Integer/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_61","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Integer/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_62","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Integer/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_63","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Integer/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_64","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_65","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Integer/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-Integer/#returns_66","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Integer/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_68","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Integer/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_69","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Integer/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_70","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Integer/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_71","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Integer/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_72","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Integer/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_73","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Integer/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_74","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Integer/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-Integer/#returns_75","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Integer/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-Integer/#returns_76","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Integer/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_77","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Integer/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_78","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Integer/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_79","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Integer/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_80","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_81","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Integer/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-Integer/#returns_82","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Integer/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_83","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_84","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Integer/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_85","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Integer/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_44","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_86","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Iterator/","title":"Iterator[A: A]","text":"<p>[Source]</p> <p>Iterators generate a series of values, one value at a time on each call to <code>next()</code>.</p> <p>An Iterator is considered exhausted, once its <code>has_next()</code> method returns <code>false</code>. Thus every call to <code>next()</code> should be preceeded with a call to <code>has_next()</code> to check for exhaustiveness.</p>"},{"location":"builtin-Iterator/#usage","title":"Usage","text":"<p>Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this:</p> <pre><code>while iterator.has_next() do\n  let elem = iterator.next()?\n  // do something with elem\nend\n</code></pre> <p>The <code>For</code>-loop provides a more concise way of iteration:</p> <pre><code>for elem in iterator do\n  // do something with elem\nend\n</code></pre> <p>Iteration using <code>While</code> is more flexible as it allows to continue iterating if a call to <code>next()</code> errors. The <code>For</code>-loop does not allow this.</p>"},{"location":"builtin-Iterator/#implementing-iterators","title":"Implementing Iterators","text":"<p>Iterator implementations need to adhere to the following rules to be considered well-behaved:</p> <ul> <li>If the Iterator is exhausted, <code>has_next()</code> needs to return <code>false</code>.</li> <li>Once <code>has_next()</code> returned <code>false</code> it is not allowed to switch back to <code>true</code>   (Unless the Iterator supports rewinding)</li> <li><code>has_next()</code> does not change its returned value if <code>next()</code> has not been called.   That means, that between two calls to <code>next()</code> any number of calls to <code>has_next()</code>   need to return the same value. (Unless the Iterator supports rewinding)</li> <li>A call to <code>next()</code> erroring does not necessarily denote exhaustiveness.</li> </ul>"},{"location":"builtin-Iterator/#example","title":"Example","text":"<pre><code>// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\n  var _cur: USize\n  var _has_next: Bool = true\n\n  new ref create(from: USize) =&gt;\n    _cur = from\n\n  fun ref has_next(): Bool =&gt;\n    _has_next\n\n  fun ref next(): USize =&gt;\n    let elem = _cur = _cur - 1\n    if elem == 0 then\n      _has_next = false\n    end\n    elem\n</code></pre> <pre><code>interface ref Iterator[A: A]\n</code></pre>"},{"location":"builtin-Iterator/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Iterator/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Returns <code>true</code> if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to <code>next()</code> is a valid part of this iterator.</p> <p>Returns <code>false</code> if this Iterator is exhausted.</p> <p>The behavior of <code>next()</code> after this function returned <code>false</code> is undefined, it might throw an error or return values which are not part of this Iterator.</p> <pre><code>fun ref has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-Iterator/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Iterator/#next","title":"next","text":"<p>[Source]</p> <p>Generate the next value.</p> <p>This might error, which does not necessarily mean that the Iterator is exhausted.</p> <pre><code>fun ref next()\n: A ?\n</code></pre>"},{"location":"builtin-Iterator/#returns_1","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Less/","title":"Less","text":"<p>[Source] <pre><code>primitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Less/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Less/#constructors","title":"Constructors","text":""},{"location":"builtin-Less/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Less val^\n</code></pre>"},{"location":"builtin-Less/#returns","title":"Returns","text":"<ul> <li>Less val^</li> </ul>"},{"location":"builtin-Less/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Less/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Less/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Less/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Less/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Less/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Less/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Less/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Less/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-None/","title":"None","text":"<p>[Source] <pre><code>primitive val None is\n  Stringable box\n</code></pre></p>"},{"location":"builtin-None/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> </ul>"},{"location":"builtin-None/#constructors","title":"Constructors","text":""},{"location":"builtin-None/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: None val^\n</code></pre>"},{"location":"builtin-None/#returns","title":"Returns","text":"<ul> <li>None val^</li> </ul>"},{"location":"builtin-None/#public-functions","title":"Public Functions","text":""},{"location":"builtin-None/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-None/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-None/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: None val)\n: Bool val\n</code></pre>"},{"location":"builtin-None/#parameters","title":"Parameters","text":"<ul> <li>that: None val</li> </ul>"},{"location":"builtin-None/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-None/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: None val)\n: Bool val\n</code></pre>"},{"location":"builtin-None/#parameters_1","title":"Parameters","text":"<ul> <li>that: None val</li> </ul>"},{"location":"builtin-None/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-NullablePointer/","title":"NullablePointer[A: A]","text":"<p>[Source]</p> <p>A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI.</p> <p>An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None).</p> <pre><code>struct ref NullablePointer[A: A]\n</code></pre>"},{"location":"builtin-NullablePointer/#constructors","title":"Constructors","text":""},{"location":"builtin-NullablePointer/#create","title":"create","text":"<p>[Source]</p> <p>This re-encodes the type of <code>that</code> from A to NullablePointer[A], allowing <code>that</code> to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for <code>that</code>.</p> <pre><code>new ref create(\n  that: A)\n: NullablePointer[A] ref^\n</code></pre>"},{"location":"builtin-NullablePointer/#parameters","title":"Parameters","text":"<ul> <li>that: A</li> </ul>"},{"location":"builtin-NullablePointer/#returns","title":"Returns","text":"<ul> <li>NullablePointer[A] ref^</li> </ul>"},{"location":"builtin-NullablePointer/#none","title":"none","text":"<p>[Source]</p> <p>This returns a null pointer typed as a NullablePointer[A].</p> <pre><code>new ref none()\n: NullablePointer[A] ref^\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_1","title":"Returns","text":"<ul> <li>NullablePointer[A] ref^</li> </ul>"},{"location":"builtin-NullablePointer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-NullablePointer/#apply","title":"apply","text":"<p>[Source]</p> <p>This re-encodes the type of <code>this</code> from NullablePointer[A] to A, allowing <code>this</code> to be assigned to a field of variable of type A. If <code>this</code> is a null pointer, an error is raised.</p> <pre><code>fun box apply()\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_2","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-NullablePointer/#is_none","title":"is_none","text":"<p>[Source]</p> <p>Returns true if <code>this</code> is null (ie apply would raise an error).</p> <pre><code>fun box is_none()\n: Bool val\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Number/","title":"Number","text":"<p>[Source] <pre><code>type Number is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)\n</code></pre></p>"},{"location":"builtin-Number/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)</li> </ul>"},{"location":"builtin-OutStream/","title":"OutStream","text":"<p>[Source]</p> <p>Asnychronous access to some output stream.</p> <pre><code>interface tag OutStream\n</code></pre>"},{"location":"builtin-OutStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-OutStream/#print","title":"print","text":"<p>[Source]</p> <p>Print some bytes and insert a newline afterwards.</p> <pre><code>be print(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-OutStream/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-OutStream/#write","title":"write","text":"<p>[Source]</p> <p>Print some bytes without inserting a newline afterwards.</p> <pre><code>be write(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-OutStream/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-OutStream/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>be printv(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-OutStream/#parameters_2","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-OutStream/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>be writev(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-OutStream/#parameters_3","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-OutStream/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush the stream.</p> <pre><code>be flush()\n</code></pre>"},{"location":"builtin-Platform/","title":"Platform","text":"<p>[Source] <pre><code>primitive val Platform\n</code></pre></p>"},{"location":"builtin-Platform/#constructors","title":"Constructors","text":""},{"location":"builtin-Platform/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Platform val^\n</code></pre>"},{"location":"builtin-Platform/#returns","title":"Returns","text":"<ul> <li>Platform val^</li> </ul>"},{"location":"builtin-Platform/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Platform/#bsd","title":"bsd","text":"<p>[Source]</p> <pre><code>fun box bsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#freebsd","title":"freebsd","text":"<p>[Source]</p> <pre><code>fun box freebsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#dragonfly","title":"dragonfly","text":"<p>[Source]</p> <pre><code>fun box dragonfly()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#openbsd","title":"openbsd","text":"<p>[Source]</p> <pre><code>fun box openbsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#linux","title":"linux","text":"<p>[Source]</p> <pre><code>fun box linux()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#osx","title":"osx","text":"<p>[Source]</p> <pre><code>fun box osx()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#posix","title":"posix","text":"<p>[Source]</p> <pre><code>fun box posix()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#windows","title":"windows","text":"<p>[Source]</p> <pre><code>fun box windows()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#x86","title":"x86","text":"<p>[Source]</p> <pre><code>fun box x86()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#arm","title":"arm","text":"<p>[Source]</p> <pre><code>fun box arm()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#riscv","title":"riscv","text":"<p>[Source]</p> <pre><code>fun box riscv()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#lp64","title":"lp64","text":"<p>[Source]</p> <pre><code>fun box lp64()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#llp64","title":"llp64","text":"<p>[Source]</p> <pre><code>fun box llp64()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#ilp32","title":"ilp32","text":"<p>[Source]</p> <pre><code>fun box ilp32()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#bigendian","title":"bigendian","text":"<p>[Source]</p> <pre><code>fun box bigendian()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#littleendian","title":"littleendian","text":"<p>[Source]</p> <pre><code>fun box littleendian()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#native128","title":"native128","text":"<p>[Source]</p> <pre><code>fun box native128()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#debug","title":"debug","text":"<p>[Source]</p> <pre><code>fun box debug()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#runtimestats","title":"runtimestats","text":"<p>[Source]</p> <pre><code>fun box runtimestats()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#runtimestatsmessages","title":"runtimestatsmessages","text":"<p>[Source]</p> <pre><code>fun box runtimestatsmessages()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Platform val)\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#parameters","title":"Parameters","text":"<ul> <li>that: Platform val</li> </ul>"},{"location":"builtin-Platform/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Platform val)\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#parameters_1","title":"Parameters","text":"<ul> <li>that: Platform val</li> </ul>"},{"location":"builtin-Platform/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/","title":"Pointer[A: A]","text":"<p>[Source]</p> <p>A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety.</p> <pre><code>struct ref Pointer[A: A]\n</code></pre>"},{"location":"builtin-Pointer/#constructors","title":"Constructors","text":""},{"location":"builtin-Pointer/#create","title":"create","text":"<p>[Source]</p> <p>A null pointer.</p> <pre><code>new ref create()\n: Pointer[A] ref^\n</code></pre>"},{"location":"builtin-Pointer/#returns","title":"Returns","text":"<ul> <li>Pointer[A] ref^</li> </ul>"},{"location":"builtin-Pointer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Pointer/#offset","title":"offset","text":"<p>[Source]</p> <p>Return a tag pointer to the n-th element.</p> <pre><code>fun tag offset(\n  n: USize val)\n: Pointer[A] tag\n</code></pre>"},{"location":"builtin-Pointer/#parameters","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_1","title":"Returns","text":"<ul> <li>Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#usize","title":"usize","text":"<p>[Source]</p> <p>Convert the pointer into an integer.</p> <pre><code>fun tag usize()\n: USize val\n</code></pre>"},{"location":"builtin-Pointer/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Pointer/#is_null","title":"is_null","text":"<p>[Source]</p> <p>Return true for a null pointer, false for anything else.</p> <pre><code>fun tag is_null()\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#eq","title":"eq","text":"<p>[Source]</p> <p>Return true if this address is that address.</p> <pre><code>fun tag eq(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_1","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#lt","title":"lt","text":"<p>[Source]</p> <p>Return true if this address is less than that address.</p> <pre><code>fun tag lt(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_2","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun tag ne(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_3","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun tag le(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_4","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun tag ge(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_5","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun tag gt(\n  that: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_6","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#hash","title":"hash","text":"<p>[Source]</p> <p>Returns a hash of the address.</p> <pre><code>fun tag hash()\n: USize val\n</code></pre>"},{"location":"builtin-Pointer/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Pointer/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Returns a 64-bit hash of the address.</p> <pre><code>fun tag hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Pointer/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ReadElement/","title":"ReadElement[A: A]","text":"<p>[Source]</p> <p>Used to show that a ReadSeq can return an element of a specific unmodified type.</p> <pre><code>interface box ReadElement[A: A]\n</code></pre>"},{"location":"builtin-ReadElement/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ReadElement/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  i: USize val)\n: A ?\n</code></pre>"},{"location":"builtin-ReadElement/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-ReadElement/#returns","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-ReadSeq/","title":"ReadSeq[A: A]","text":"<p>[Source]</p> <p>The readable interface of a sequence.</p> <pre><code>interface box ReadSeq[A: A]\n</code></pre>"},{"location":"builtin-ReadSeq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ReadSeq/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of elements in the sequence.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-ReadSeq/#returns","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ReadSeq/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this-&gt;A, not A.</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-ReadSeq/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-ReadSeq/#returns_1","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-ReadSeq/#values","title":"values","text":"<p>[Source]</p> <p>Returns an iterator over the elements of the sequence. Note that this iterates over this-&gt;A, not A.</p> <pre><code>fun box values()\n: Iterator[this-&gt;A] ref^\n</code></pre>"},{"location":"builtin-ReadSeq/#returns_2","title":"Returns","text":"<ul> <li>Iterator[this-&gt;A] ref^</li> </ul>"},{"location":"builtin-Real/","title":"Real[A: Real[A] val]","text":"<p>[Source] <pre><code>trait val Real[A: Real[A] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A] ref\n</code></pre></p>"},{"location":"builtin-Real/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> <li>_ArithmeticConvertible val</li> <li>Comparable[A] ref</li> </ul>"},{"location":"builtin-Real/#constructors","title":"Constructors","text":""},{"location":"builtin-Real/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Real/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-Real/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Real/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#div","title":"div","text":"<p>[Source]</p> <p>Integer division, rounded towards zero.</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Real/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_8","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Real/#rem","title":"rem","text":"<p>[Source]</p> <p>Calculate the remainder after integer division, rounded towards zero (<code>div</code>).</p> <p>The result has the sign of the dividend.</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_9","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-Real/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#fld","title":"fld","text":"<p>[Source]</p> <p>Floored integer division, rounded towards negative infinity.</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#mod","title":"mod","text":"<p>[Source]</p> <p>Calculate the modulo after floored integer division, rounded towards negative infinity (<code>fld</code>).</p> <p>The result has the sign of the divisor.</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_12","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_10","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_11","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_12","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_13","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_14","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_15","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_21","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_22","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Real/#returns_23","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Real/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-Real/#returns_24","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Real/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-Real/#returns_25","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Real/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-Real/#returns_26","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Real/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-Real/#returns_27","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Real/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-Real/#returns_28","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Real/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-Real/#returns_29","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Real/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-Real/#returns_30","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Real/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-Real/#returns_31","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Real/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-Real/#returns_32","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Real/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-Real/#returns_33","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Real/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_34","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-Real/#returns_35","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Real/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-Real/#returns_36","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Real/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_37","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-Real/#returns_38","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Real/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-Real/#returns_39","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Real/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-Real/#returns_40","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Real/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-Real/#returns_41","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Real/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-Real/#returns_42","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Real/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-Real/#returns_43","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Real/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-Real/#returns_44","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Real/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-Real/#returns_45","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Real/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-Real/#returns_46","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Real/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-Real/#returns_47","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Real/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-Real/#returns_48","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Real/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-Real/#returns_49","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Real/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_50","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-Real/#returns_51","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Real/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-Real/#returns_52","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Real/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_53","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-Real/#returns_54","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Real/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-Real/#returns_55","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Real/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Real/#parameters_18","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_56","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-RuntimeOptions/","title":"RuntimeOptions","text":"<p>[Source]</p> <p>Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program.</p> <p>The way this is done is by adding the following function to your <code>Main</code> actor:</p> <pre><code>  fun @runtime_override_defaults(rto: RuntimeOptions) =&gt;\n</code></pre> <p>and then overriding the fields of <code>rto</code> (the <code>RuntimeOptions</code> instance) as needed.</p> <p>NOTE: Command line arguments still any values set via       <code>@runtime_override_defaults</code>.</p> <p>The following example overrides the <code>--ponyhelp</code> argument to default it to <code>true</code> instead of <code>false</code> causing the compiled program to always display the Pony runtime help:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    env.out.print(\"Hello, world.\")\n\n  fun @runtime_override_defaults(rto: RuntimeOptions) =&gt;\n    rto.ponyhelp = true\n</code></pre> <pre><code>struct ref RuntimeOptions\n</code></pre>"},{"location":"builtin-RuntimeOptions/#constructors","title":"Constructors","text":""},{"location":"builtin-RuntimeOptions/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: RuntimeOptions iso^\n</code></pre>"},{"location":"builtin-RuntimeOptions/#returns","title":"Returns","text":"<ul> <li>RuntimeOptions iso^</li> </ul>"},{"location":"builtin-RuntimeOptions/#public-fields","title":"Public fields","text":""},{"location":"builtin-RuntimeOptions/#var-ponymaxthreads-u32-val","title":"var ponymaxthreads: U32 val","text":"<p>[Source]</p> <p>Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyminthreads-u32-val","title":"var ponyminthreads: U32 val","text":"<p>[Source]</p> <p>Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoscale-bool-val","title":"var ponynoscale: Bool val","text":"<p>[Source]</p> <p>Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads.</p>"},{"location":"builtin-RuntimeOptions/#var-ponysuspendthreshold-u32-val","title":"var ponysuspendthreshold: U32 val","text":"<p>[Source]</p> <p>Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms.</p>"},{"location":"builtin-RuntimeOptions/#var-ponycdinterval-u32-val","title":"var ponycdinterval: U32 val","text":"<p>[Source]</p> <p>Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms.</p>"},{"location":"builtin-RuntimeOptions/#var-ponygcinitial-usize-val","title":"var ponygcinitial: USize val","text":"<p>[Source]</p> <p>Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14.</p>"},{"location":"builtin-RuntimeOptions/#var-ponygcfactor-f64-val","title":"var ponygcfactor: F64 val","text":"<p>[Source]</p> <p>After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoyield-bool-val","title":"var ponynoyield: Bool val","text":"<p>[Source]</p> <p>Do not yield the CPU when no work is available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoblock-bool-val","title":"var ponynoblock: Bool val","text":"<p>[Source]</p> <p>Do not send block messages to the cycle detector.</p>"},{"location":"builtin-RuntimeOptions/#var-ponypin-bool-val","title":"var ponypin: Bool val","text":"<p>[Source]</p> <p>Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if <code>--ponypinasio</code> is set.</p>"},{"location":"builtin-RuntimeOptions/#var-ponypinasio-bool-val","title":"var ponypinasio: Bool val","text":"<p>[Source]</p> <p>Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires <code>--ponypin</code> to be set to have any effect.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyprintstatsinterval-u32-val","title":"var ponyprintstatsinterval: U32 val","text":"<p>[Source]</p> <p>Print actor stats before an actor is destroyed and print scheduler stats every X seconds. Defaults to -1 (never).</p>"},{"location":"builtin-RuntimeOptions/#var-ponyversion-bool-val","title":"var ponyversion: Bool val","text":"<p>[Source]</p> <p>Print the version of the compiler and exit.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyhelp-bool-val","title":"var ponyhelp: Bool val","text":"<p>[Source]</p> <p>Print the runtime usage options and exit.</p>"},{"location":"builtin-Seq/","title":"Seq[A: A]","text":"<p>[Source]</p> <p>A sequence of elements.</p> <pre><code>interface ref Seq[A: A]\n</code></pre>"},{"location":"builtin-Seq/#constructors","title":"Constructors","text":""},{"location":"builtin-Seq/#create","title":"create","text":"<p>[Source]</p> <p>Create a sequence, reserving space for len elements.</p> <pre><code>new ref create(\n  len: USize val = 0)\n: Seq[A] ref^\n</code></pre>"},{"location":"builtin-Seq/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-Seq/#returns","title":"Returns","text":"<ul> <li>Seq[A] ref^</li> </ul>"},{"location":"builtin-Seq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Seq/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len elements.</p> <pre><code>fun ref reserve(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_1","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of elements in the sequence.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-Seq/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Seq/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the sequence. Raises an error if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-Seq/#parameters_2","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-Seq/#update","title":"update","text":"<p>[Source]</p> <p>Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds.</p> <pre><code>fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#parameters_3","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_4","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#clear","title":"clear","text":"<p>[Source]</p> <p>Removes all elements from the sequence.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-Seq/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#push","title":"push","text":"<p>[Source]</p> <p>Adds an element to the end of the sequence.</p> <pre><code>fun ref push(\n  value: A)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_4","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#pop","title":"pop","text":"<p>[Source]</p> <p>Removes an element from the end of the sequence.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#returns_7","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds an element to the beginning of the sequence.</p> <pre><code>fun ref unshift(\n  value: A)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_5","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes an element from the beginning of the sequence.</p> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#returns_9","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#append","title":"append","text":"<p>[Source]</p> <p>Add len elements to the end of the list, starting from the given offset.</p> <pre><code>fun ref append(\n  seq: (ReadSeq[A] box &amp; ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_6","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Seq/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the end of the list, starting from the given offset.</p> <pre><code>fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_7","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Seq/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing.</p> <pre><code>fun ref truncate(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_8","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#values","title":"values","text":"<p>[Source]</p> <p>Returns an iterator over the elements of the sequence.</p> <pre><code>fun box values()\n: Iterator[this-&gt;A] ref^\n</code></pre>"},{"location":"builtin-Seq/#returns_13","title":"Returns","text":"<ul> <li>Iterator[this-&gt;A] ref^</li> </ul>"},{"location":"builtin-Signed/","title":"Signed","text":"<p>[Source] <pre><code>type Signed is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)\n</code></pre></p>"},{"location":"builtin-Signed/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)</li> </ul>"},{"location":"builtin-SignedInteger/","title":"SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val]","text":"<p>[Source] <pre><code>trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is\n  Integer[A] val\n</code></pre></p>"},{"location":"builtin-SignedInteger/#implements","title":"Implements","text":"<ul> <li>Integer[A] val</li> </ul>"},{"location":"builtin-SignedInteger/#constructors","title":"Constructors","text":""},{"location":"builtin-SignedInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#public-functions","title":"Public Functions","text":""},{"location":"builtin-SignedInteger/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_4","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_2","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_3","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined.</p> <pre><code>fun box shl_unsafe(\n  y: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_4","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shr_unsafe(\n  y: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_5","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_8","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_9","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_10","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_11","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_12","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_13","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_14","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_16","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-SignedInteger/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_18","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_21","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-SignedInteger/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_22","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_23","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_24","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_25","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_26","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_27","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_28","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_29","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_30","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-SignedInteger/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_31","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_32","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_33","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_34","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_35","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_36","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_37","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_38","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_39","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_40","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_43","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_44","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_51","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-SignedInteger/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_37","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_38","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_39","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_55","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_40","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_56","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_41","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_57","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_42","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_43","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_44","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_45","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_46","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_62","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_47","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_63","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-SignedInteger/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-SignedInteger/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-SignedInteger/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-SignedInteger/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-SignedInteger/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-SignedInteger/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-SignedInteger/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-SignedInteger/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-SignedInteger/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-SignedInteger/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-SignedInteger/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-SignedInteger/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-SignedInteger/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-SignedInteger/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-SignedInteger/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-SignedInteger/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-SignedInteger/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-SignedInteger/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-SignedInteger/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-SignedInteger/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-SignedInteger/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_48","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-SourceLoc/","title":"SourceLoc","text":"<p>[Source]</p> <p>Represents a location in a Pony source file, as reported by <code>__loc</code>.</p> <pre><code>interface val SourceLoc\n</code></pre>"},{"location":"builtin-SourceLoc/#public-functions","title":"Public Functions","text":""},{"location":"builtin-SourceLoc/#file","title":"file","text":"<p>[Source]</p> <p>Name and path of source file.</p> <pre><code>fun box file()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#type_name","title":"type_name","text":"<p>[Source]</p> <p>Name of nearest class, actor, primitive, struct, interface, or trait.</p> <pre><code>fun box type_name()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#method_name","title":"method_name","text":"<p>[Source]</p> <p>Name of containing method.</p> <pre><code>fun box method_name()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#line","title":"line","text":"<p>[Source]</p> <p>Line number within file. Line numbers start at 1.</p> <pre><code>fun box line()\n: USize val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SourceLoc/#pos","title":"pos","text":"<p>[Source]</p> <p>Character position on line. Character positions start at 1.</p> <pre><code>fun box pos()\n: USize val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-StdStream/","title":"StdStream","text":"<p>[Source]</p> <p>Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment.</p> <pre><code>actor tag StdStream\n</code></pre>"},{"location":"builtin-StdStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-StdStream/#print","title":"print","text":"<p>[Source]</p> <p>Print some bytes and insert a newline afterwards.</p> <pre><code>be print(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-StdStream/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-StdStream/#write","title":"write","text":"<p>[Source]</p> <p>Print some bytes without inserting a newline afterwards.</p> <pre><code>be write(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-StdStream/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-StdStream/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>be printv(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-StdStream/#parameters_2","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-StdStream/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>be writev(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-StdStream/#parameters_3","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-StdStream/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush any data out to the os (ignoring failures).</p> <pre><code>be flush()\n</code></pre>"},{"location":"builtin-Stdin/","title":"Stdin","text":"<p>[Source]</p> <p>Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment.</p> <p>Reading from stdin is done by registering an <code>InputNotify</code>:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    // do not forget to call `env.input.dispose` at some point\n    env.input(\n      object iso is InputNotify\n        fun ref apply(data: Array[U8] iso) =&gt;\n          env.out.write(String.from_iso_array(consume data))\n\n        fun ref dispose() =&gt;\n          env.out.print(\"Done.\")\n      end,\n      512)\n</code></pre> <p>Note: For reading user input from a terminal, use the term package.</p> <pre><code>actor tag Stdin is\n  AsioEventNotify tag\n</code></pre>"},{"location":"builtin-Stdin/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"builtin-Stdin/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-Stdin/#apply","title":"apply","text":"<p>[Source]</p> <p>Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier.</p> <pre><code>be apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = 32)\n</code></pre>"},{"location":"builtin-Stdin/#parameters","title":"Parameters","text":"<ul> <li>notify: (InputNotify iso | None val)</li> <li>chunk_size: USize val = 32</li> </ul>"},{"location":"builtin-Stdin/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Clear the notifier in order to shut down input.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-String/","title":"String","text":"<p>[Source]</p> <p>A String is an ordered collection of bytes.</p> <p>Strings don't specify an encoding.</p> <p>Example usage of some common String methods:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\") ?\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\") ?\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end\n</code></pre> <pre><code>class val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box\n</code></pre>"},{"location":"builtin-String/#implements","title":"Implements","text":"<ul> <li>Seq[U8 val] ref</li> <li>Comparable[String box] ref</li> <li>Stringable box</li> </ul>"},{"location":"builtin-String/#constructors","title":"Constructors","text":""},{"location":"builtin-String/#create","title":"create","text":"<p>[Source]</p> <p>An empty string. Enough space for len bytes is reserved.</p> <pre><code>new ref create(\n  len: USize val = 0)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_array","title":"from_array","text":"<p>[Source]</p> <p>Create a string from an array, reusing the underlying data pointer.</p> <pre><code>new val from_array(\n  data: Array[U8 val] val)\n: String val^\n</code></pre>"},{"location":"builtin-String/#parameters_1","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"builtin-String/#returns_1","title":"Returns","text":"<ul> <li>String val^</li> </ul>"},{"location":"builtin-String/#from_iso_array","title":"from_iso_array","text":"<p>[Source]</p> <p>Create a string from an array, reusing the underlying data pointer</p> <pre><code>new iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_2","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"builtin-String/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#from_cpointer","title":"from_cpointer","text":"<p>[Source]</p> <p>Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = 0)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_3","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] ref</li> <li>len: USize val</li> <li>alloc: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_3","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_cstring","title":"from_cstring","text":"<p>[Source]</p> <p>Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_4","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] ref</li> </ul>"},{"location":"builtin-String/#returns_4","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#copy_cpointer","title":"copy_cpointer","text":"<p>[Source]</p> <p>Create a string by copying a fixed number of bytes from a pointer.</p> <pre><code>new ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_5","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] box</li> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_5","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#copy_cstring","title":"copy_cstring","text":"<p>[Source]</p> <p>Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_6","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] box</li> </ul>"},{"location":"builtin-String/#returns_6","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_utf32","title":"from_utf32","text":"<p>[Source]</p> <p>Create a UTF-8 string from a single UTF-32 code point.</p> <pre><code>new ref from_utf32(\n  value: U32 val)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_7","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-String/#returns_7","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#public-functions","title":"Public Functions","text":""},{"location":"builtin-String/#push_utf32","title":"push_utf32","text":"<p>[Source]</p> <p>Push a UTF-32 code point.</p> <pre><code>fun ref push_utf32(\n  value: U32 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_8","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-String/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#cpointer","title":"cpointer","text":"<p>[Source]</p> <p>Returns a C compatible pointer to the underlying string allocation.</p> <pre><code>fun box cpointer(\n  offset: USize val = 0)\n: Pointer[U8 val] tag\n</code></pre>"},{"location":"builtin-String/#parameters_9","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_9","title":"Returns","text":"<ul> <li>Pointer[U8 val] tag</li> </ul>"},{"location":"builtin-String/#cstring","title":"cstring","text":"<p>[Source]</p> <p>Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation.</p> <pre><code>fun box cstring()\n: Pointer[U8 val] tag\n</code></pre>"},{"location":"builtin-String/#returns_10","title":"Returns","text":"<ul> <li>Pointer[U8 val] tag</li> </ul>"},{"location":"builtin-String/#array","title":"array","text":"<p>[Source]</p> <p>Returns an Array[U8] that reuses the underlying data pointer.</p> <pre><code>fun val array()\n: Array[U8 val] val\n</code></pre>"},{"location":"builtin-String/#returns_11","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"builtin-String/#iso_array","title":"iso_array","text":"<p>[Source]</p> <p>Returns an Array[U8] iso that reuses the underlying data pointer.</p> <pre><code>fun iso iso_array()\n: Array[U8 val] iso^\n</code></pre>"},{"location":"builtin-String/#returns_12","title":"Returns","text":"<ul> <li>Array[U8 val] iso^</li> </ul>"},{"location":"builtin-String/#size","title":"size","text":"<p>[Source]</p> <p>Returns the length of the string data in bytes.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#codepoints","title":"codepoints","text":"<p>[Source]</p> <p>Returns the number of unicode code points in the string between the two offsets. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun box codepoints(\n  from: ISize val = 0,\n  to: ISize val = call)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_10","title":"Parameters","text":"<ul> <li>from: ISize val = 0</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#space","title":"space","text":"<p>[Source]</p> <p>Returns the space available for data, not including the null terminator.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len bytes. An additional byte will be reserved for the null terminator.</p> <pre><code>fun ref reserve(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_11","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#compact","title":"compact","text":"<p>[Source]</p> <p>Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#recalc","title":"recalc","text":"<p>[Source]</p> <p>Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed.</p> <pre><code>fun ref recalc()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string.</p> <p>Note that memory is not freed by this operation.</p> <pre><code>fun ref truncate(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_12","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#trim_in_place","title":"trim_in_place","text":"<p>[Source]</p> <p>Trim the string to a portion of itself, covering <code>from</code> until <code>to</code>. Unlike slice, the operation does not allocate a new string nor copy elements.</p> <pre><code>fun ref trim_in_place(\n  from: USize val = 0,\n  to: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_13","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#trim","title":"trim","text":"<p>[Source]</p> <p>Return a shared portion of this string, covering <code>from</code> until <code>to</code>. Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun val trim(\n  from: USize val = 0,\n  to: USize val = call)\n: String val\n</code></pre>"},{"location":"builtin-String/#parameters_14","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-String/#chop","title":"chop","text":"<p>[Source]</p> <p>Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun iso chop(\n  split_point: USize val)\n: (String iso^ , String iso^)\n</code></pre>"},{"location":"builtin-String/#parameters_15","title":"Parameters","text":"<ul> <li>split_point: USize val</li> </ul>"},{"location":"builtin-String/#returns_22","title":"Returns","text":"<ul> <li>(String iso^ , String iso^)</li> </ul>"},{"location":"builtin-String/#unchop","title":"unchop","text":"<p>[Source]</p> <p>Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun iso unchop(\n  b: String iso)\n: ((String iso^ , String iso^) | String iso^)\n</code></pre>"},{"location":"builtin-String/#parameters_16","title":"Parameters","text":"<ul> <li>b: String iso</li> </ul>"},{"location":"builtin-String/#returns_23","title":"Returns","text":"<ul> <li>((String iso^ , String iso^) | String iso^)</li> </ul>"},{"location":"builtin-String/#is_null_terminated","title":"is_null_terminated","text":"<p>[Source]</p> <p>Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method.</p> <pre><code>fun box is_null_terminated()\n: Bool val\n</code></pre>"},{"location":"builtin-String/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#utf32","title":"utf32","text":"<p>[Source]</p> <p>Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds.</p> <pre><code>fun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?\n</code></pre>"},{"location":"builtin-String/#parameters_17","title":"Parameters","text":"<ul> <li>offset: ISize val</li> </ul>"},{"location":"builtin-String/#returns_25","title":"Returns","text":"<ul> <li>(U32 val , U8 val) ?</li> </ul>"},{"location":"builtin-String/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th byte. Raise an error if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_18","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-String/#returns_26","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th byte. Raise an error if the index is out of bounds.</p> <pre><code>fun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_19","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_27","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#at_offset","title":"at_offset","text":"<p>[Source]</p> <p>Returns the byte at the given offset. Raise an error if the offset is out of bounds.</p> <pre><code>fun box at_offset(\n  offset: ISize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_20","title":"Parameters","text":"<ul> <li>offset: ISize val</li> </ul>"},{"location":"builtin-String/#returns_28","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#update_offset","title":"update_offset","text":"<p>[Source]</p> <p>Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds.</p> <pre><code>fun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_21","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_29","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#clone","title":"clone","text":"<p>[Source]</p> <p>Returns a copy of the string. The resulting string is null-terminated even if the original is not.</p> <pre><code>fun box clone()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_30","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#repeat_str","title":"repeat_str","text":"<p>[Source]</p> <p>Returns a copy of the string repeated <code>num</code> times with an optional separator added inbetween repeats.</p> <pre><code>fun box repeat_str(\n  num: USize val = 1,\n  sep: String val = \"\")\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_22","title":"Parameters","text":"<ul> <li>num: USize val = 1</li> <li>sep: String val = \"\"</li> </ul>"},{"location":"builtin-String/#returns_31","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#mul","title":"mul","text":"<p>[Source]</p> <p>Returns a copy of the string repeated <code>num</code> times.</p> <pre><code>fun box mul(\n  num: USize val)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_23","title":"Parameters","text":"<ul> <li>num: USize val</li> </ul>"},{"location":"builtin-String/#returns_32","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#find","title":"find","text":"<p>[Source]</p> <p>Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty.</p> <pre><code>fun box find(\n  s: String box,\n  offset: ISize val = 0,\n  nth: USize val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_24","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_33","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#rfind","title":"rfind","text":"<p>[Source]</p> <p>Return the index of n-th instance of <code>s</code> in the string starting from the end. The <code>offset</code> represents the highest index to included in the search. Raise an error if there is no n-th occurrence of <code>s</code> or <code>s</code> is empty.</p> <pre><code>fun box rfind(\n  s: String box,\n  offset: ISize val = call,\n  nth: USize val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_25","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = call</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_34","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#contains","title":"contains","text":"<p>[Source]</p> <p>Returns true if contains s as a substring, false otherwise.</p> <pre><code>fun box contains(\n  s: String box,\n  offset: ISize val = 0,\n  nth: USize val = 0)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_26","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#count","title":"count","text":"<p>[Source]</p> <p>Counts the non-overlapping occurrences of s in the string.</p> <pre><code>fun box count(\n  s: String box,\n  offset: ISize val = 0)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_27","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_36","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#at","title":"at","text":"<p>[Source]</p> <p>Returns true if the substring s is present at the given offset.</p> <pre><code>fun box at(\n  s: String box,\n  offset: ISize val = 0)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_28","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_37","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#delete","title":"delete","text":"<p>[Source]</p> <p>Delete len bytes at the supplied offset, compacting the string in place.</p> <pre><code>fun ref delete(\n  offset: ISize val,\n  len: USize val = 1)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_29","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>len: USize val = 1</li> </ul>"},{"location":"builtin-String/#returns_38","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#substring","title":"substring","text":"<p>[Source]</p> <p>Returns a substring. Index range [<code>from</code> .. <code>to</code>) is half-open. Returns an empty string if nothing is in the range.</p> <p>Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see <code>trim</code> and <code>trim_in_place</code>.</p> <pre><code>fun box substring(\n  from: ISize val,\n  to: ISize val = call)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_30","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#lower","title":"lower","text":"<p>[Source]</p> <p>Returns a lower case version of the string.</p> <pre><code>fun box lower()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#lower_in_place","title":"lower_in_place","text":"<p>[Source]</p> <p>Transforms the string to lower case. Currently only knows ASCII case.</p> <pre><code>fun ref lower_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_41","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#upper","title":"upper","text":"<p>[Source]</p> <p>Returns an upper case version of the string. Currently only knows ASCII case.</p> <pre><code>fun box upper()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#upper_in_place","title":"upper_in_place","text":"<p>[Source]</p> <p>Transforms the string to upper case.</p> <pre><code>fun ref upper_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_43","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Returns a reversed version of the string.</p> <pre><code>fun box reverse()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_44","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#reverse_in_place","title":"reverse_in_place","text":"<p>[Source]</p> <p>Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly.</p> <pre><code>fun ref reverse_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_45","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#push","title":"push","text":"<p>[Source]</p> <p>Add a byte to the end of the string.</p> <pre><code>fun ref push(\n  value: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_31","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_46","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove a byte from the end of the string.</p> <pre><code>fun ref pop()\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#returns_47","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds a byte to the beginning of the string.</p> <pre><code>fun ref unshift(\n  value: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_32","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_48","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes a byte from the beginning of the string.</p> <pre><code>fun ref shift()\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#returns_49","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#append","title":"append","text":"<p>[Source]</p> <p>Append the elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_33","title":"Parameters","text":"<ul> <li>seq: ReadSeq[U8 val] box</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_50","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated bytes to the end of the string, starting from the given offset.</p> <pre><code>fun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_34","title":"Parameters","text":"<ul> <li>iter: Iterator[U8 val] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_51","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#clear","title":"clear","text":"<p>[Source]</p> <p>Truncate the string to zero length.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_52","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#insert","title":"insert","text":"<p>[Source]</p> <p>Returns a version of the string with the given string inserted at the given offset.</p> <pre><code>fun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_35","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>that: String val</li> </ul>"},{"location":"builtin-String/#returns_53","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#insert_in_place","title":"insert_in_place","text":"<p>[Source]</p> <p>Inserts the given string at the given offset. Appends the string if the offset is out of bounds.</p> <pre><code>fun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_36","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_54","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#insert_byte","title":"insert_byte","text":"<p>[Source]</p> <p>Inserts a byte at the given offset. Appends if the offset is out of bounds.</p> <pre><code>fun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_37","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_55","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#cut","title":"cut","text":"<p>[Source]</p> <p>Returns a version of the string with the given range deleted. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun box cut(\n  from: ISize val,\n  to: ISize val = call)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_38","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_56","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#cut_in_place","title":"cut_in_place","text":"<p>[Source]</p> <p>Cuts the given range out of the string. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_39","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_57","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove all instances of s from the string. Returns the count of removed instances.</p> <pre><code>fun ref remove(\n  s: String box)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_40","title":"Parameters","text":"<ul> <li>s: String box</li> </ul>"},{"location":"builtin-String/#returns_58","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#replace","title":"replace","text":"<p>[Source]</p> <p>Replace up to n occurrences of <code>from</code> in <code>this</code> with <code>to</code>. If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences.</p> <pre><code>fun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = 0)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_41","title":"Parameters","text":"<ul> <li>from: String box</li> <li>to: String box</li> <li>n: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_59","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#split_by","title":"split_by","text":"<p>[Source]</p> <p>Split the string into an array of strings that are delimited by <code>delim</code> in the original string. If <code>n &gt; 0</code>, then the split count is limited to n.</p> <p>Example:</p> <pre><code>let original: String = \"&lt;b&gt;&lt;span&gt;Hello!&lt;/span&gt;&lt;/b&gt;\"\nlet delimiter: String = \"&gt;&lt;\"\nlet split_array: Array[String] = original.split_by(delimiter)\nenv.out.print(\"OUTPUT:\")\nfor value in split_array.values() do\n  env.out.print(value)\nend\n\n// OUTPUT:\n// &lt;b\n// span&gt;Hello!&lt;/span\n// b&gt;\n</code></pre> <p>Adjacent delimiters result in a zero length entry in the array. For example, <code>\"1CutCut2\".split_by(\"Cut\") =&gt; [\"1\", \"\", \"2\"]</code>.</p> <p>An empty delimiter results in an array that contains a single element equal to the whole string.</p> <p>If you want to split the string with each individual character of <code>delim</code>, use <code>split</code>.</p> <pre><code>fun box split_by(\n  delim: String val,\n  n: USize val = call)\n: Array[String val] iso^\n</code></pre>"},{"location":"builtin-String/#parameters_42","title":"Parameters","text":"<ul> <li>delim: String val</li> <li>n: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_60","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"builtin-String/#split","title":"split","text":"<p>[Source]</p> <p>Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If <code>n &gt; 0</code>, then the split count is limited to n.</p> <p>Example:</p> <pre><code>let original: String = \"name,job;department\"\nlet delimiter: String = \".,;\"\nlet split_array: Array[String] = original.split(delimiter)\nenv.out.print(\"OUTPUT:\")\nfor value in split_array.values() do\n  env.out.print(value)\nend\n\n// OUTPUT:\n// name\n// job\n// department\n</code></pre> <p>Adjacent delimiters result in a zero length entry in the array. For example, <code>\"1,,2\".split(\",\") =&gt; [\"1\", \"\", \"2\"]</code>.</p> <p>If you want to split the string with the entire delimiter string <code>delim</code>, use <code>split_by</code>.</p> <pre><code>fun box split(\n  delim: String val = \"     \u000b\f\n\",\n  n: USize val = 0)\n: Array[String val] iso^\n</code></pre>"},{"location":"builtin-String/#parameters_43","title":"Parameters","text":"<ul> <li>delim: String val = \"  \u000b\f \"</li> <li>n: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_61","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"builtin-String/#strip","title":"strip","text":"<p>[Source]</p> <p>Remove all leading and trailing characters from the string that are in s.</p> <pre><code>fun ref strip(\n  s: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_44","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_62","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#rstrip","title":"rstrip","text":"<p>[Source]</p> <p>Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed.</p> <pre><code>fun ref rstrip(\n  s: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_45","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_63","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#lstrip","title":"lstrip","text":"<p>[Source]</p> <p>Remove all leading characters within the string that are in s. By default, leading whitespace is removed.</p> <pre><code>fun ref lstrip(\n  s: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_46","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_64","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#add","title":"add","text":"<p>[Source]</p> <p>Return a string that is a concatenation of this and that.</p> <pre><code>fun box add(\n  that: String box)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_47","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_65","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#join","title":"join","text":"<p>[Source]</p> <p>Return a string that is a concatenation of the strings in data, using this as a separator.</p> <pre><code>fun box join(\n  data: Iterator[Stringable box] ref)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_48","title":"Parameters","text":"<ul> <li>data: Iterator[Stringable box] ref</li> </ul>"},{"location":"builtin-String/#returns_66","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#compare","title":"compare","text":"<p>[Source]</p> <p>Lexically compare two strings.</p> <pre><code>fun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-String/#parameters_49","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_67","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-String/#compare_sub","title":"compare_sub","text":"<p>[Source]</p> <p>Lexically compare at most <code>n</code> bytes of the substring of <code>this</code> starting at <code>offset</code> with the substring of <code>that</code> starting at <code>that_offset</code>. The comparison is case sensitive unless <code>ignore_case</code> is <code>true</code>.</p> <p>If the substring of <code>this</code> is a proper prefix of the substring of <code>that</code>, then <code>this</code> is <code>Less</code> than <code>that</code>. Likewise, if <code>that</code> is a proper prefix of <code>this</code>, then <code>this</code> is <code>Greater</code> than <code>that</code>.</p> <p>Both <code>offset</code> and <code>that_offset</code> can be negative, in which case the offsets are computed from the end of the string.</p> <p>If <code>n + offset</code> is greater than the length of <code>this</code>, or <code>n + that_offset</code> is greater than the length of <code>that</code>, then the number of positions compared will be reduced to the length of the longest substring.</p> <p>Needs to be made UTF-8 safe.</p> <pre><code>fun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = 0,\n  that_offset: ISize val = 0,\n  ignore_case: Bool val = false)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-String/#parameters_50","title":"Parameters","text":"<ul> <li>that: String box</li> <li>n: USize val</li> <li>offset: ISize val = 0</li> <li>that_offset: ISize val = 0</li> <li>ignore_case: Bool val = false</li> </ul>"},{"location":"builtin-String/#returns_68","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-String/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if the two strings have the same contents.</p> <pre><code>fun box eq(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_51","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if this is lexically less than that. Needs to be made UTF-8 safe.</p> <pre><code>fun box lt(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_52","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_70","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe.</p> <pre><code>fun box le(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_53","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#offset_to_index","title":"offset_to_index","text":"<p>[Source]</p> <pre><code>fun box offset_to_index(\n  i: ISize val)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_54","title":"Parameters","text":"<ul> <li>i: ISize val</li> </ul>"},{"location":"builtin-String/#returns_72","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#bool","title":"bool","text":"<p>[Source]</p> <pre><code>fun box bool()\n: Bool val ?\n</code></pre>"},{"location":"builtin-String/#returns_73","title":"Returns","text":"<ul> <li>Bool val ?</li> </ul>"},{"location":"builtin-String/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8(\n  base: U8 val = 0)\n: I8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_55","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_74","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-String/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16(\n  base: U8 val = 0)\n: I16 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_56","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_75","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-String/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32(\n  base: U8 val = 0)\n: I32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_57","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_76","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-String/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64(\n  base: U8 val = 0)\n: I64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_58","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_77","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-String/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128(\n  base: U8 val = 0)\n: I128 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_59","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_78","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-String/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong(\n  base: U8 val = 0)\n: ILong val ?\n</code></pre>"},{"location":"builtin-String/#parameters_60","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_79","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-String/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize(\n  base: U8 val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_61","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_80","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8(\n  base: U8 val = 0)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_62","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_81","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16(\n  base: U8 val = 0)\n: U16 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_63","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_82","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-String/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32(\n  base: U8 val = 0)\n: U32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_64","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_83","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-String/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64(\n  base: U8 val = 0)\n: U64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_65","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_84","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-String/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128(\n  base: U8 val = 0)\n: U128 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_66","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_85","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-String/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong(\n  base: U8 val = 0)\n: ULong val ?\n</code></pre>"},{"location":"builtin-String/#parameters_67","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_86","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-String/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize(\n  base: U8 val = 0)\n: USize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_68","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_87","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-String/#read_inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","title":"read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]","text":"<p>[Source]</p> <p>Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored.</p> <pre><code>fun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) &amp; Integer[A] val)](\n  offset: ISize val = 0,\n  base: U8 val = 0)\n: (A , USize val) ?\n</code></pre>"},{"location":"builtin-String/#parameters_69","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_88","title":"Returns","text":"<ul> <li>(A , USize val) ?</li> </ul>"},{"location":"builtin-String/#f32","title":"f32","text":"<p>[Source]</p> <p>Convert this string starting at the given offset to a 32-bit floating point number (F32).</p> <p>This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion.</p> <p>Examples:</p> <pre><code>\"1.5\".f32()? == F32(1.5)\n\"1.19208e-07\".f32()? == F32(1.19208e-07)\n\"NaN\".f32()?.nan() == true\n</code></pre> <pre><code>fun box f32(\n  offset: ISize val = 0)\n: F32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_70","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_89","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"builtin-String/#f64","title":"f64","text":"<p>[Source]</p> <p>Convert this string starting at the given offset to a 64-bit floating point number (F64).</p> <p>This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion.</p> <p>Examples:</p> <pre><code>\"1.5\".f64()? == F64(1.5)\n\"1.19208e-07\".f64()? == F64(1.19208e-07)\n\"Inf\".f64()?.infinite() == true\n</code></pre> <pre><code>fun box f64(\n  offset: ISize val = 0)\n: F64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_71","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_90","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"builtin-String/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_91","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-String/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-String/#string_1","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_93","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the bytes in the string.</p> <pre><code>fun box values()\n: StringBytes ref^\n</code></pre>"},{"location":"builtin-String/#returns_94","title":"Returns","text":"<ul> <li>StringBytes ref^</li> </ul>"},{"location":"builtin-String/#runes","title":"runes","text":"<p>[Source]</p> <p>Return an iterator over the codepoints in the string.</p> <pre><code>fun box runes()\n: StringRunes ref^\n</code></pre>"},{"location":"builtin-String/#returns_95","title":"Returns","text":"<ul> <li>StringRunes ref^</li> </ul>"},{"location":"builtin-String/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_72","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_96","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_73","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_97","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_74","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_98","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-StringBytes/","title":"StringBytes","text":"<p>[Source] <pre><code>class ref StringBytes is\n  Iterator[U8 val] ref\n</code></pre></p>"},{"location":"builtin-StringBytes/#implements","title":"Implements","text":"<ul> <li>Iterator[U8 val] ref</li> </ul>"},{"location":"builtin-StringBytes/#constructors","title":"Constructors","text":""},{"location":"builtin-StringBytes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  string: String box)\n: StringBytes ref^\n</code></pre>"},{"location":"builtin-StringBytes/#parameters","title":"Parameters","text":"<ul> <li>string: String box</li> </ul>"},{"location":"builtin-StringBytes/#returns","title":"Returns","text":"<ul> <li>StringBytes ref^</li> </ul>"},{"location":"builtin-StringBytes/#public-functions","title":"Public Functions","text":""},{"location":"builtin-StringBytes/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-StringBytes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-StringBytes/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U8 val ?\n</code></pre>"},{"location":"builtin-StringBytes/#returns_2","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-StringRunes/","title":"StringRunes","text":"<p>[Source] <pre><code>class ref StringRunes is\n  Iterator[U32 val] ref\n</code></pre></p>"},{"location":"builtin-StringRunes/#implements","title":"Implements","text":"<ul> <li>Iterator[U32 val] ref</li> </ul>"},{"location":"builtin-StringRunes/#constructors","title":"Constructors","text":""},{"location":"builtin-StringRunes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  string: String box)\n: StringRunes ref^\n</code></pre>"},{"location":"builtin-StringRunes/#parameters","title":"Parameters","text":"<ul> <li>string: String box</li> </ul>"},{"location":"builtin-StringRunes/#returns","title":"Returns","text":"<ul> <li>StringRunes ref^</li> </ul>"},{"location":"builtin-StringRunes/#public-functions","title":"Public Functions","text":""},{"location":"builtin-StringRunes/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-StringRunes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-StringRunes/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U32 val ?\n</code></pre>"},{"location":"builtin-StringRunes/#returns_2","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Stringable/","title":"Stringable","text":"<p>[Source]</p> <p>Things that can be turned into a String.</p> <pre><code>interface box Stringable\n</code></pre>"},{"location":"builtin-Stringable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Stringable/#string","title":"string","text":"<p>[Source]</p> <p>Generate a string representation of this object.</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Stringable/#returns","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U128/","title":"U128","text":"<p>[Source] <pre><code>primitive val U128 is\n  UnsignedInteger[U128 val] val\n</code></pre></p>"},{"location":"builtin-U128/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U128 val] val</li> </ul>"},{"location":"builtin-U128/#constructors","title":"Constructors","text":""},{"location":"builtin-U128/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U128 val)\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#parameters","title":"Parameters","text":"<ul> <li>value: U128 val</li> </ul>"},{"location":"builtin-U128/#returns","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U128/#returns_1","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#returns_2","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#returns_3","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U128/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_4","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_5","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_6","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_9","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_10","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_11","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_12","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_13","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_2","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_15","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_3","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_16","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_18","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U128/#returns_19","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U128/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_4","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_20","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U128 val)\n: (U128 val , U128 val)\n</code></pre>"},{"location":"builtin-U128/#parameters_5","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_21","title":"Returns","text":"<ul> <li>(U128 val , U128 val)</li> </ul>"},{"location":"builtin-U128/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_6","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_22","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_7","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_23","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_8","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_24","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)\n</code></pre>"},{"location":"builtin-U128/#parameters_9","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_25","title":"Returns","text":"<ul> <li>(U128 val , U128 val)</li> </ul>"},{"location":"builtin-U128/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_10","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_26","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_11","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_27","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U128/#returns_28","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U128/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U128/#returns_29","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U128/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U128/#returns_30","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U128/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U128/#returns_31","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U128/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_12","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_32","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_13","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_33","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_14","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_34","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_15","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_35","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_16","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_36","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_17","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_37","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_18","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_38","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_19","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_39","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_20","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_40","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_21","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_41","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U128 val)\n: (U128 val , U128 val) ?\n</code></pre>"},{"location":"builtin-U128/#parameters_22","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_42","title":"Returns","text":"<ul> <li>(U128 val , U128 val) ?</li> </ul>"},{"location":"builtin-U128/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_23","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_43","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_24","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_44","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_25","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_45","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_26","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_46","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_27","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_47","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_28","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_48","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_29","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_49","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_30","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_50","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_31","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_51","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_32","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_52","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_33","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_53","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_34","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_54","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_35","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_55","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_36","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_56","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_37","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_57","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_38","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_58","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_59","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_39","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_60","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_40","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_61","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_41","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_62","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_42","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_64","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_43","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_65","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_66","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_44","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_45","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_68","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_46","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_47","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_70","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_48","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_49","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_72","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U128/#returns_73","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U128/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U128/#returns_74","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U128/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U128/#returns_75","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U128/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U128/#returns_76","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U128/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U128/#returns_77","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U128/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U128/#returns_78","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U128/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U128/#returns_79","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U128/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U128/#returns_80","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U128/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U128/#returns_81","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U128/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U128/#returns_82","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U128/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_83","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#u128_1","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_84","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U128/#returns_85","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U128/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_86","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U128/#returns_87","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U128/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U128/#returns_88","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U128/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U128/#returns_89","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U128/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U128/#returns_90","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U128/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U128/#returns_91","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U128/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U128/#returns_92","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U128/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U128/#returns_93","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U128/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U128/#returns_94","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U128/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U128/#returns_95","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U128/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U128/#returns_96","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U128/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_97","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_98","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U128/#returns_99","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U128/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_100","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U128/#parameters_50","title":"Parameters","text":"<ul> <li>that: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U16/","title":"U16","text":"<p>[Source] <pre><code>primitive val U16 is\n  UnsignedInteger[U16 val] val\n</code></pre></p>"},{"location":"builtin-U16/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U16 val] val</li> </ul>"},{"location":"builtin-U16/#constructors","title":"Constructors","text":""},{"location":"builtin-U16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U16 val)\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#parameters","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"builtin-U16/#returns","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U16/#returns_1","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#returns_2","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#returns_3","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U16/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_6","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_7","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_9","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_10","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_11","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_12","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_13","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_2","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_15","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_3","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_16","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_4","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_17","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_5","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_18","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_6","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_19","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_7","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_20","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_8","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_21","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_9","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_22","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_10","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_23","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_11","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_24","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_12","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_25","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_13","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_26","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U16 val)\n: (U16 val , U16 val) ?\n</code></pre>"},{"location":"builtin-U16/#parameters_14","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_27","title":"Returns","text":"<ul> <li>(U16 val , U16 val) ?</li> </ul>"},{"location":"builtin-U16/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_15","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_28","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_16","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_29","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_17","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_30","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_18","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_31","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_19","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_32","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_20","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_33","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_21","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_34","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_22","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_35","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_23","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_36","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_24","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_37","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_25","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_38","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_26","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_39","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_27","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_40","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_28","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_41","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U16/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U16/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_29","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_43","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_30","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_44","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_31","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_45","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_32","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_46","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)\n</code></pre>"},{"location":"builtin-U16/#parameters_33","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_47","title":"Returns","text":"<ul> <li>(U16 val , U16 val)</li> </ul>"},{"location":"builtin-U16/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_34","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_48","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_49","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_35","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_50","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_36","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_51","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_37","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_52","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_53","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_38","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_54","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_39","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_55","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_40","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_56","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_41","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_57","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U16 val)\n: (U16 val , U16 val)\n</code></pre>"},{"location":"builtin-U16/#parameters_42","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_58","title":"Returns","text":"<ul> <li>(U16 val , U16 val)</li> </ul>"},{"location":"builtin-U16/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_43","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_59","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_60","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_44","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_45","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_46","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_47","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_48","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_49","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U16/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U16/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U16/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U16/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U16/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U16/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U16/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U16/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U16/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U16/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U16/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U16/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U16/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U16/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U16/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U16/#u16_1","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U16/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U16/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U16/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U16/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U16/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U16/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U16/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U16/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U16/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U16/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U16/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U16/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U16/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U16/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U16/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U16/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U16/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U16/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U16/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U16/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U16/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U16/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U16/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U16/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U16/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U16/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U16/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U16/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U16/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U16/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U16/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U16/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U16/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U16/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U16/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U16/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U16/#parameters_50","title":"Parameters","text":"<ul> <li>that: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U32/","title":"U32","text":"<p>[Source] <pre><code>primitive val U32 is\n  UnsignedInteger[U32 val] val\n</code></pre></p>"},{"location":"builtin-U32/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U32 val] val</li> </ul>"},{"location":"builtin-U32/#constructors","title":"Constructors","text":""},{"location":"builtin-U32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U32 val)\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#parameters","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-U32/#returns","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U32/#returns_1","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#returns_2","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#returns_3","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U32/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_2","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_15","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_3","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_16","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_4","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_17","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_5","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_18","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_6","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_19","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_7","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_20","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_8","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_21","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_9","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_22","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_10","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_23","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_11","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_24","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_12","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_25","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_13","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_26","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U32 val)\n: (U32 val , U32 val) ?\n</code></pre>"},{"location":"builtin-U32/#parameters_14","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_27","title":"Returns","text":"<ul> <li>(U32 val , U32 val) ?</li> </ul>"},{"location":"builtin-U32/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_15","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_28","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_16","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_29","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_17","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_30","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_18","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_31","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_19","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_32","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_20","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_33","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_21","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_34","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_22","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_35","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_23","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_36","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_24","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_37","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_25","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_38","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_26","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_39","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_27","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_40","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_28","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_41","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U32/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U32/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_29","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_43","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_30","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_44","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_31","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_45","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_32","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_46","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"builtin-U32/#parameters_33","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_47","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"builtin-U32/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_34","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_48","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_49","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_35","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_50","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_36","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_51","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_37","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_52","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_53","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_38","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_54","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_39","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_55","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_40","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_56","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_41","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_57","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"builtin-U32/#parameters_42","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_58","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"builtin-U32/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_43","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_59","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_60","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_44","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_45","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_46","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_47","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_48","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_49","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U32/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U32/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U32/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U32/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U32/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U32/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U32/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U32/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U32/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U32/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U32/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U32/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U32/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U32/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U32/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U32/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U32/#u32_1","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U32/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U32/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U32/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U32/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U32/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U32/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U32/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U32/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U32/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U32/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U32/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U32/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U32/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U32/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U32/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U32/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U32/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U32/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U32/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U32/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U32/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U32/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U32/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U32/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U32/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U32/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U32/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U32/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U32/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U32/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U32/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U32/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U32/#parameters_50","title":"Parameters","text":"<ul> <li>that: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U64/","title":"U64","text":"<p>[Source] <pre><code>primitive val U64 is\n  UnsignedInteger[U64 val] val\n</code></pre></p>"},{"location":"builtin-U64/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U64 val] val</li> </ul>"},{"location":"builtin-U64/#constructors","title":"Constructors","text":""},{"location":"builtin-U64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U64 val)\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#parameters","title":"Parameters","text":"<ul> <li>value: U64 val</li> </ul>"},{"location":"builtin-U64/#returns","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U64/#returns_1","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#returns_2","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#returns_3","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U64/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_13","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_2","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_15","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_3","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_16","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_4","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_18","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_5","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_19","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_6","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_20","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_7","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_21","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_8","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_22","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_9","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_23","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_10","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_24","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_11","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_25","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_12","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_26","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_13","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_27","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U64 val)\n: (U64 val , U64 val) ?\n</code></pre>"},{"location":"builtin-U64/#parameters_14","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_28","title":"Returns","text":"<ul> <li>(U64 val , U64 val) ?</li> </ul>"},{"location":"builtin-U64/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_15","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_29","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_16","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_30","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_17","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_31","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_18","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_32","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_19","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_33","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_20","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_34","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_21","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_35","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_22","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_36","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_23","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_37","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_24","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_38","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_25","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_39","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_26","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_40","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_27","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_41","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_28","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_42","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U64/#returns_43","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U64/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_29","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_44","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_30","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_45","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_31","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_46","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_32","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_47","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)\n</code></pre>"},{"location":"builtin-U64/#parameters_33","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_48","title":"Returns","text":"<ul> <li>(U64 val , U64 val)</li> </ul>"},{"location":"builtin-U64/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_34","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_49","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_50","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_35","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_51","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_36","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_52","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_37","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_53","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_54","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_38","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_55","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_39","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_56","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_40","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_57","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_41","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_58","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U64 val)\n: (U64 val , U64 val)\n</code></pre>"},{"location":"builtin-U64/#parameters_42","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_59","title":"Returns","text":"<ul> <li>(U64 val , U64 val)</li> </ul>"},{"location":"builtin-U64/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_43","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_60","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_61","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_44","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_45","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_46","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_47","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_48","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_49","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U64/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U64/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U64/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U64/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U64/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U64/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U64/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U64/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U64/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U64/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U64/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U64/#u64_1","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U64/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U64/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U64/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U64/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U64/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U64/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U64/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U64/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U64/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U64/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U64/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U64/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U64/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U64/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U64/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U64/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U64/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U64/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U64/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U64/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U64/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U64/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U64/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U64/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U64/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U64/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U64/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U64/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U64/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U64/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U64/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U64/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U64/#parameters_50","title":"Parameters","text":"<ul> <li>that: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U8/","title":"U8","text":"<p>[Source] <pre><code>primitive val U8 is\n  UnsignedInteger[U8 val] val\n</code></pre></p>"},{"location":"builtin-U8/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U8 val] val</li> </ul>"},{"location":"builtin-U8/#constructors","title":"Constructors","text":""},{"location":"builtin-U8/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: U8 val)\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-U8/#returns","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-U8/#returns_1","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#returns_2","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#returns_3","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U8/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_5","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_9","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_13","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_2","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_15","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_3","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_16","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_4","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_17","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_5","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_18","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_6","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_19","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_7","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_20","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_8","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_21","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_9","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_22","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_10","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_23","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_11","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_24","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_12","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_25","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_13","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_26","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: U8 val)\n: (U8 val , U8 val) ?\n</code></pre>"},{"location":"builtin-U8/#parameters_14","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_27","title":"Returns","text":"<ul> <li>(U8 val , U8 val) ?</li> </ul>"},{"location":"builtin-U8/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_15","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_28","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_16","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_29","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_17","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_30","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_18","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_31","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_19","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_32","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_20","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_33","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_21","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_34","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_22","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_35","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_23","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_36","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_24","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_37","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_25","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_38","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_26","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_39","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_27","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_40","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_28","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_41","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U8/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U8/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_29","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_43","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_30","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_44","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_31","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_45","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_32","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_46","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"builtin-U8/#parameters_33","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_47","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"builtin-U8/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_34","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_48","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_49","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_35","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_50","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_36","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_51","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_37","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_52","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_53","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_38","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_54","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_39","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_55","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_40","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_56","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_41","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_57","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: U8 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"builtin-U8/#parameters_42","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_58","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"builtin-U8/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_43","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_59","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_60","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_44","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_45","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_46","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_47","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_48","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_49","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U8/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U8/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U8/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U8/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U8/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U8/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U8/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U8/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U8/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U8/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U8/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U8/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U8/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U8/#u8_1","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U8/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U8/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U8/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U8/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U8/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U8/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U8/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U8/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U8/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U8/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U8/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U8/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U8/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U8/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U8/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U8/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U8/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U8/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U8/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U8/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U8/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U8/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U8/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U8/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U8/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U8/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U8/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U8/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U8/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U8/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U8/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U8/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U8/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U8/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U8/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U8/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U8/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U8/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U8/#parameters_50","title":"Parameters","text":"<ul> <li>that: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ULong/","title":"ULong","text":"<p>[Source] <pre><code>primitive val ULong is\n  UnsignedInteger[ULong val] val\n</code></pre></p>"},{"location":"builtin-ULong/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[ULong val] val</li> </ul>"},{"location":"builtin-ULong/#constructors","title":"Constructors","text":""},{"location":"builtin-ULong/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: ULong val)\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#parameters","title":"Parameters","text":"<ul> <li>value: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ULong/#returns_1","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#returns_2","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#returns_3","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ULong/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_4","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_5","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_6","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_7","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_10","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_11","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_12","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_13","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_2","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_15","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_3","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_16","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_4","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_18","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_5","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_19","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_6","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_20","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_7","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_21","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_8","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_22","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_9","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_23","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_10","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_24","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_11","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_25","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_12","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_26","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_13","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_27","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: ULong val)\n: (ULong val , ULong val) ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_14","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_28","title":"Returns","text":"<ul> <li>(ULong val , ULong val) ?</li> </ul>"},{"location":"builtin-ULong/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_15","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_29","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_16","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_30","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_17","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_31","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_18","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_32","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_19","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_33","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_20","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_34","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_21","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_35","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_22","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_36","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_23","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_37","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_24","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_38","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_25","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_39","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_26","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_40","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_27","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_41","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_28","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_42","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ULong/#returns_43","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ULong/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_29","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_44","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_30","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_45","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_31","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_46","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_32","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_47","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_33","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_48","title":"Returns","text":"<ul> <li>(ULong val , ULong val)</li> </ul>"},{"location":"builtin-ULong/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_34","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_49","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_50","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_35","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_51","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_36","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_52","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_37","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_53","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_54","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_38","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_55","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_39","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_56","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_40","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_57","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_41","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_58","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: ULong val)\n: (ULong val , ULong val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_42","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_59","title":"Returns","text":"<ul> <li>(ULong val , ULong val)</li> </ul>"},{"location":"builtin-ULong/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_43","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_60","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_61","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_44","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_45","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_46","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_47","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_48","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_49","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ULong/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ULong/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ULong/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ULong/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ULong/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ULong/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ULong/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ULong/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ULong/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ULong/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ULong/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ULong/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ULong/#ulong_1","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ULong/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ULong/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ULong/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ULong/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ULong/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ULong/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ULong/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ULong/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ULong/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ULong/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ULong/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ULong/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ULong/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ULong/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ULong/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ULong/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ULong/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_50","title":"Parameters","text":"<ul> <li>that: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-USize/","title":"USize","text":"<p>[Source] <pre><code>primitive val USize is\n  UnsignedInteger[USize val] val\n</code></pre></p>"},{"location":"builtin-USize/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[USize val] val</li> </ul>"},{"location":"builtin-USize/#constructors","title":"Constructors","text":""},{"location":"builtin-USize/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: USize val)\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#parameters","title":"Parameters","text":"<ul> <li>value: USize val</li> </ul>"},{"location":"builtin-USize/#returns","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[A] val)](\n  a: A)\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-USize/#returns_1","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#returns_2","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#returns_3","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#public-functions","title":"Public Functions","text":""},{"location":"builtin-USize/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_5","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_6","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_12","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_2","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_3","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_16","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_4","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_17","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_5","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_18","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_6","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_19","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_7","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_20","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_8","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_21","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_9","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_22","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_10","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_23","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_11","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_24","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_12","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_25","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_13","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_26","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: USize val)\n: (USize val , USize val) ?\n</code></pre>"},{"location":"builtin-USize/#parameters_14","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_27","title":"Returns","text":"<ul> <li>(USize val , USize val) ?</li> </ul>"},{"location":"builtin-USize/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_15","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_28","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_16","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_29","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_17","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_30","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_18","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_31","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_19","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_32","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_20","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_33","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_21","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_34","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_22","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_35","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_23","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_36","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_24","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_37","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_25","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_38","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_26","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_39","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_27","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_40","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_28","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_41","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-USize/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-USize/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_29","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_43","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_30","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_44","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_31","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_45","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_32","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_46","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: USize val)\n: (USize val , USize val)\n</code></pre>"},{"location":"builtin-USize/#parameters_33","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_47","title":"Returns","text":"<ul> <li>(USize val , USize val)</li> </ul>"},{"location":"builtin-USize/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_34","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_48","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_49","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_35","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_50","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_36","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_51","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_37","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_52","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_53","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_38","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_54","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_39","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_55","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_40","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_56","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_41","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_57","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: USize val)\n: (USize val , USize val)\n</code></pre>"},{"location":"builtin-USize/#parameters_42","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_58","title":"Returns","text":"<ul> <li>(USize val , USize val)</li> </ul>"},{"location":"builtin-USize/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_43","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_59","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_60","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_44","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_45","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_46","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_47","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_48","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_49","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-USize/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-USize/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-USize/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-USize/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-USize/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-USize/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-USize/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-USize/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-USize/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-USize/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-USize/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-USize/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-USize/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-USize/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-USize/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-USize/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-USize/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-USize/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-USize/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-USize/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-USize/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-USize/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-USize/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-USize/#usize_1","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-USize/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-USize/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-USize/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-USize/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-USize/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-USize/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-USize/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-USize/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-USize/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-USize/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-USize/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-USize/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-USize/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-USize/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-USize/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-USize/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-USize/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-USize/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-USize/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-USize/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-USize/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-USize/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-USize/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-USize/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-USize/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-USize/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-USize/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-USize/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-USize/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-USize/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-USize/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-USize/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-USize/#parameters_50","title":"Parameters","text":"<ul> <li>that: USize val</li> </ul>"},{"location":"builtin-USize/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Unsigned/","title":"Unsigned","text":"<p>[Source] <pre><code>type Unsigned is\n  (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n</code></pre></p>"},{"location":"builtin-Unsigned/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)</li> </ul>"},{"location":"builtin-UnsignedInteger/","title":"UnsignedInteger[A: UnsignedInteger[A] val]","text":"<p>[Source] <pre><code>trait val UnsignedInteger[A: UnsignedInteger[A] val] is\n  Integer[A] val\n</code></pre></p>"},{"location":"builtin-UnsignedInteger/#implements","title":"Implements","text":"<ul> <li>Integer[A] val</li> </ul>"},{"location":"builtin-UnsignedInteger/#constructors","title":"Constructors","text":""},{"location":"builtin-UnsignedInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) &amp; Real[B] val)](\n  a: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#public-functions","title":"Public Functions","text":""},{"location":"builtin-UnsignedInteger/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_8","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_9","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_12","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_13","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_14","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shl_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_15","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shr_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_16","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_18","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_21","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Count leading zeroes.</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_22","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Count trailing zeroes.</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_23","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_24","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_25","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_26","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-UnsignedInteger/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_27","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_31","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_33","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_34","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_35","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_36","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\n  y: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_37","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\n  y: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_38","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_40","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_41","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_42","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_43","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\n  y: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_44","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_51","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_37","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_38","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_39","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\n  y: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_40","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_55","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_41","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_56","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_57","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_42","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_43","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_44","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_45","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_46","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_47","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_48","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_64","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\n  y: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_49","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_65","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_66","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_67","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_68","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_69","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_70","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_71","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_72","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_73","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_74","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_75","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_76","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_77","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_78","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_79","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_80","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_81","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_82","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_83","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_84","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_85","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_86","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_87","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_88","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_89","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_90","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_91","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_92","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_93","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_94","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_95","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_96","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_97","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_98","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_99","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_50","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_100","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"capsicum--index/","title":"Capsicum package","text":"<p>Access to Capsicum capabilities for UNIX systems -- primarily in use by BSD-based systems.</p>"},{"location":"capsicum--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Cap</li> <li>type CapRights</li> <li>class CapRights0</li> </ul>"},{"location":"capsicum-Cap/","title":"Cap","text":"<p>[Source]</p> <p>The Capsicum rights.</p> <pre><code>primitive val Cap\n</code></pre>"},{"location":"capsicum-Cap/#constructors","title":"Constructors","text":""},{"location":"capsicum-Cap/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Cap val^\n</code></pre>"},{"location":"capsicum-Cap/#returns","title":"Returns","text":"<ul> <li>Cap val^</li> </ul>"},{"location":"capsicum-Cap/#public-functions","title":"Public Functions","text":""},{"location":"capsicum-Cap/#enter","title":"enter","text":"<p>[Source]</p> <p>This places the current process into capability mode, a mode of execution in which processes may only issue system calls operating on file descriptors or reading limited global system state. Access to global name spaces, such as file system or IPC name spaces, is prevented.</p> <pre><code>fun box enter()\n: Bool val\n</code></pre>"},{"location":"capsicum-Cap/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-Cap/#read","title":"read","text":"<p>[Source]</p> <pre><code>fun box read()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#write","title":"write","text":"<p>[Source]</p> <pre><code>fun box write()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#seek_tell","title":"seek_tell","text":"<p>[Source]</p> <pre><code>fun box seek_tell()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#seek","title":"seek","text":"<p>[Source]</p> <pre><code>fun box seek()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pread","title":"pread","text":"<p>[Source]</p> <pre><code>fun box pread()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pwrite","title":"pwrite","text":"<p>[Source]</p> <pre><code>fun box pwrite()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap","title":"mmap","text":"<p>[Source]</p> <pre><code>fun box mmap()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_r","title":"mmap_r","text":"<p>[Source]</p> <pre><code>fun box mmap_r()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_w","title":"mmap_w","text":"<p>[Source]</p> <pre><code>fun box mmap_w()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_x","title":"mmap_x","text":"<p>[Source]</p> <pre><code>fun box mmap_x()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_rw","title":"mmap_rw","text":"<p>[Source]</p> <pre><code>fun box mmap_rw()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_rx","title":"mmap_rx","text":"<p>[Source]</p> <pre><code>fun box mmap_rx()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_13","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_wx","title":"mmap_wx","text":"<p>[Source]</p> <pre><code>fun box mmap_wx()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_14","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_rwx","title":"mmap_rwx","text":"<p>[Source]</p> <pre><code>fun box mmap_rwx()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_15","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#creat","title":"creat","text":"<p>[Source]</p> <pre><code>fun box creat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_16","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fexecve","title":"fexecve","text":"<p>[Source]</p> <pre><code>fun box fexecve()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_17","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fsync","title":"fsync","text":"<p>[Source]</p> <pre><code>fun box fsync()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_18","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#ftruncate","title":"ftruncate","text":"<p>[Source]</p> <pre><code>fun box ftruncate()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_19","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#lookup","title":"lookup","text":"<p>[Source]</p> <pre><code>fun box lookup()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_20","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchdir","title":"fchdir","text":"<p>[Source]</p> <pre><code>fun box fchdir()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_21","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchflags","title":"fchflags","text":"<p>[Source]</p> <pre><code>fun box fchflags()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_22","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#chflagsat","title":"chflagsat","text":"<p>[Source]</p> <pre><code>fun box chflagsat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_23","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchmod","title":"fchmod","text":"<p>[Source]</p> <pre><code>fun box fchmod()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_24","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchmodat","title":"fchmodat","text":"<p>[Source]</p> <pre><code>fun box fchmodat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_25","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchown","title":"fchown","text":"<p>[Source]</p> <pre><code>fun box fchown()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_26","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchownat","title":"fchownat","text":"<p>[Source]</p> <pre><code>fun box fchownat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_27","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fcntl","title":"fcntl","text":"<p>[Source]</p> <pre><code>fun box fcntl()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_28","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#flock","title":"flock","text":"<p>[Source]</p> <pre><code>fun box flock()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_29","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fpathconf","title":"fpathconf","text":"<p>[Source]</p> <pre><code>fun box fpathconf()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_30","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fsck","title":"fsck","text":"<p>[Source]</p> <pre><code>fun box fsck()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_31","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fstat","title":"fstat","text":"<p>[Source]</p> <pre><code>fun box fstat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_32","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fstatat","title":"fstatat","text":"<p>[Source]</p> <pre><code>fun box fstatat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_33","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fstatfs","title":"fstatfs","text":"<p>[Source]</p> <pre><code>fun box fstatfs()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_34","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#futimes","title":"futimes","text":"<p>[Source]</p> <pre><code>fun box futimes()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_35","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#futimesat","title":"futimesat","text":"<p>[Source]</p> <pre><code>fun box futimesat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_36","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#linkat","title":"linkat","text":"<p>[Source]</p> <pre><code>fun box linkat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_37","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mkdirat","title":"mkdirat","text":"<p>[Source]</p> <pre><code>fun box mkdirat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_38","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mkfifoat","title":"mkfifoat","text":"<p>[Source]</p> <pre><code>fun box mkfifoat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_39","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mknodat","title":"mknodat","text":"<p>[Source]</p> <pre><code>fun box mknodat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_40","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#renameat","title":"renameat","text":"<p>[Source]</p> <pre><code>fun box renameat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_41","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#symlinkat","title":"symlinkat","text":"<p>[Source]</p> <pre><code>fun box symlinkat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_42","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#unlinkat","title":"unlinkat","text":"<p>[Source]</p> <pre><code>fun box unlinkat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_43","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#accept","title":"accept","text":"<p>[Source]</p> <pre><code>fun box accept()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_44","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#bind","title":"bind","text":"<p>[Source]</p> <pre><code>fun box bind()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_45","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#connect","title":"connect","text":"<p>[Source]</p> <pre><code>fun box connect()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_46","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#getpeername","title":"getpeername","text":"<p>[Source]</p> <pre><code>fun box getpeername()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_47","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#getsockname","title":"getsockname","text":"<p>[Source]</p> <pre><code>fun box getsockname()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_48","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#getsockopt","title":"getsockopt","text":"<p>[Source]</p> <pre><code>fun box getsockopt()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_49","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#listen","title":"listen","text":"<p>[Source]</p> <pre><code>fun box listen()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_50","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#peeloff","title":"peeloff","text":"<p>[Source]</p> <pre><code>fun box peeloff()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_51","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#recv","title":"recv","text":"<p>[Source]</p> <pre><code>fun box recv()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_52","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#send","title":"send","text":"<p>[Source]</p> <pre><code>fun box send()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_53","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#setsockopt","title":"setsockopt","text":"<p>[Source]</p> <pre><code>fun box setsockopt()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_54","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#shutdown","title":"shutdown","text":"<p>[Source]</p> <pre><code>fun box shutdown()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_55","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#bindat","title":"bindat","text":"<p>[Source]</p> <pre><code>fun box bindat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_56","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#connectat","title":"connectat","text":"<p>[Source]</p> <pre><code>fun box connectat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_57","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sock_client","title":"sock_client","text":"<p>[Source]</p> <pre><code>fun box sock_client()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_58","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sock_server","title":"sock_server","text":"<p>[Source]</p> <pre><code>fun box sock_server()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_59","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mac_get","title":"mac_get","text":"<p>[Source]</p> <pre><code>fun box mac_get()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_60","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mac_set","title":"mac_set","text":"<p>[Source]</p> <pre><code>fun box mac_set()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_61","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sem_getvalue","title":"sem_getvalue","text":"<p>[Source]</p> <pre><code>fun box sem_getvalue()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_62","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sem_post","title":"sem_post","text":"<p>[Source]</p> <pre><code>fun box sem_post()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_63","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sem_wait","title":"sem_wait","text":"<p>[Source]</p> <pre><code>fun box sem_wait()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_64","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#event","title":"event","text":"<p>[Source]</p> <pre><code>fun box event()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#kqueue_event","title":"kqueue_event","text":"<p>[Source]</p> <pre><code>fun box kqueue_event()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_66","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#ioctl","title":"ioctl","text":"<p>[Source]</p> <pre><code>fun box ioctl()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_67","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#ttyhook","title":"ttyhook","text":"<p>[Source]</p> <pre><code>fun box ttyhook()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pdgetpid","title":"pdgetpid","text":"<p>[Source]</p> <pre><code>fun box pdgetpid()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_69","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pdwait","title":"pdwait","text":"<p>[Source]</p> <pre><code>fun box pdwait()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_70","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pdkill","title":"pdkill","text":"<p>[Source]</p> <pre><code>fun box pdkill()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_71","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#exattr_delete","title":"exattr_delete","text":"<p>[Source]</p> <pre><code>fun box exattr_delete()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_72","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#exattr_get","title":"exattr_get","text":"<p>[Source]</p> <pre><code>fun box exattr_get()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_73","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#exattr_list","title":"exattr_list","text":"<p>[Source]</p> <pre><code>fun box exattr_list()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_74","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#exattr_set","title":"exattr_set","text":"<p>[Source]</p> <pre><code>fun box exattr_set()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_75","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#acl_check","title":"acl_check","text":"<p>[Source]</p> <pre><code>fun box acl_check()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#acl_delete","title":"acl_delete","text":"<p>[Source]</p> <pre><code>fun box acl_delete()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_77","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#acl_get","title":"acl_get","text":"<p>[Source]</p> <pre><code>fun box acl_get()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_78","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#acl_set","title":"acl_set","text":"<p>[Source]</p> <pre><code>fun box acl_set()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#kqueue_change","title":"kqueue_change","text":"<p>[Source]</p> <pre><code>fun box kqueue_change()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_80","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#kqueue","title":"kqueue","text":"<p>[Source]</p> <pre><code>fun box kqueue()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_81","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Cap val)\n: Bool val\n</code></pre>"},{"location":"capsicum-Cap/#parameters","title":"Parameters","text":"<ul> <li>that: Cap val</li> </ul>"},{"location":"capsicum-Cap/#returns_82","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-Cap/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Cap val)\n: Bool val\n</code></pre>"},{"location":"capsicum-Cap/#parameters_1","title":"Parameters","text":"<ul> <li>that: Cap val</li> </ul>"},{"location":"capsicum-Cap/#returns_83","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-CapRights/","title":"CapRights","text":"<p>[Source] <pre><code>type CapRights is\n  CapRights0 ref\n</code></pre></p>"},{"location":"capsicum-CapRights/#type-alias-for","title":"Type Alias For","text":"<ul> <li>CapRights0 ref</li> </ul>"},{"location":"capsicum-CapRights0/","title":"CapRights0","text":"<p>[Source]</p> <p>Version 0 of the capsicum cap_rights_t structure.</p> <pre><code>class ref CapRights0\n</code></pre>"},{"location":"capsicum-CapRights0/#constructors","title":"Constructors","text":""},{"location":"capsicum-CapRights0/#create","title":"create","text":"<p>[Source]</p> <p>Initialises with no rights.</p> <pre><code>new ref create()\n: CapRights0 ref^\n</code></pre>"},{"location":"capsicum-CapRights0/#returns","title":"Returns","text":"<ul> <li>CapRights0 ref^</li> </ul>"},{"location":"capsicum-CapRights0/#from","title":"from","text":"<p>[Source]</p> <p>Initialises with the rights from a FileCaps.</p> <pre><code>new ref from(\n  caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box)\n: CapRights0 ref^\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters","title":"Parameters","text":"<ul> <li>caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box</li> </ul>"},{"location":"capsicum-CapRights0/#returns_1","title":"Returns","text":"<ul> <li>CapRights0 ref^</li> </ul>"},{"location":"capsicum-CapRights0/#descriptor","title":"descriptor","text":"<p>[Source]</p> <p>Initialises with the rights on the given file descriptor.</p> <pre><code>new ref descriptor(\n  fd: I32 val)\n: CapRights0 ref^\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_1","title":"Parameters","text":"<ul> <li>fd: I32 val</li> </ul>"},{"location":"capsicum-CapRights0/#returns_2","title":"Returns","text":"<ul> <li>CapRights0 ref^</li> </ul>"},{"location":"capsicum-CapRights0/#public-functions","title":"Public Functions","text":""},{"location":"capsicum-CapRights0/#set","title":"set","text":"<p>[Source]</p> <pre><code>fun ref set(\n  cap: U64 val)\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_2","title":"Parameters","text":"<ul> <li>cap: U64 val</li> </ul>"},{"location":"capsicum-CapRights0/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#unset","title":"unset","text":"<p>[Source]</p> <pre><code>fun ref unset(\n  cap: U64 val)\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_3","title":"Parameters","text":"<ul> <li>cap: U64 val</li> </ul>"},{"location":"capsicum-CapRights0/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#limit","title":"limit","text":"<p>[Source]</p> <p>Limits the fd to the encoded rights.</p> <pre><code>fun box limit(\n  fd: I32 val)\n: Bool val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_4","title":"Parameters","text":"<ul> <li>fd: I32 val</li> </ul>"},{"location":"capsicum-CapRights0/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-CapRights0/#merge","title":"merge","text":"<p>[Source]</p> <p>Merge the rights in that into this.</p> <pre><code>fun ref merge(\n  that: CapRights0 ref)\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_5","title":"Parameters","text":"<ul> <li>that: CapRights0 ref</li> </ul>"},{"location":"capsicum-CapRights0/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the rights in that from this.</p> <pre><code>fun ref remove(\n  that: CapRights0 ref)\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_6","title":"Parameters","text":"<ul> <li>that: CapRights0 ref</li> </ul>"},{"location":"capsicum-CapRights0/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#clear","title":"clear","text":"<p>[Source]</p> <p>Clear all rights.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#contains","title":"contains","text":"<p>[Source]</p> <p>Check that this is a superset of the rights in that.</p> <pre><code>fun box contains(\n  that: CapRights0 ref)\n: Bool val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_7","title":"Parameters","text":"<ul> <li>that: CapRights0 ref</li> </ul>"},{"location":"capsicum-CapRights0/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections--index/","title":"Collections package","text":"<p>The Collections package provides a variety of collection classes,  including map, set, range, heap, ring buffer, list, and flags.</p> <p><code>Map</code> - Hashmap by strutural equality (use <code>MapIs</code> for identity equality).</p> <p><code>Set</code> - A set built on top of <code>Map</code> using structural equility (use <code>SetIs</code> for identity equality).</p> <p><code>Range</code> - Iterate over a range of numbers with optional step size.</p> <p><code>BinaryHeap</code> - A priority queue implemented as a binary heap -- use a <code>BinaryHeapPriority</code> parameter to determine priority.</p> <p><code>RingBuffer</code> - A ring buffer with fixed size.</p> <p><code>List</code> - A doubly linked list.</p> <p><code>Flags</code> - A set of single bit flags (size determined upon creation).</p>"},{"location":"collections--index/#public-types","title":"Public Types","text":"<ul> <li>class BinaryHeap</li> <li>type BinaryHeapPriority</li> <li>interface Flag</li> <li>class Flags</li> <li>primitive HashByteSeq</li> <li>primitive HashEq</li> <li>primitive HashEq64</li> <li>interface HashFunction</li> <li>interface HashFunction64</li> <li>primitive HashIs</li> <li>class HashMap</li> <li>class HashSet</li> <li>interface Hashable</li> <li>interface Hashable64</li> <li>class List</li> <li>class ListNode</li> <li>class ListNodes</li> <li>class ListValues</li> <li>type Map</li> <li>type MapIs</li> <li>class MapKeys</li> <li>class MapPairs</li> <li>class MapValues</li> <li>type MaxHeap</li> <li>primitive MaxHeapPriority</li> <li>type MinHeap</li> <li>primitive MinHeapPriority</li> <li>class Range</li> <li>class Reverse</li> <li>class RingBuffer</li> <li>type Set</li> <li>type SetIs</li> <li>class SetValues</li> <li>primitive Sort</li> </ul>"},{"location":"collections-BinaryHeap/","title":"BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))]","text":"<p>[Source]</p> <p>A priority queue implemented as a binary heap. The <code>BinaryHeapPriority</code> type parameter determines whether this is max-heap or a min-heap.</p> <pre><code>class ref BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))]\n</code></pre>"},{"location":"collections-BinaryHeap/#constructors","title":"Constructors","text":""},{"location":"collections-BinaryHeap/#create","title":"create","text":"<p>[Source]</p> <p>Create an empty heap with space for <code>len</code> elements.</p> <pre><code>new ref create(\n  len: USize val)\n: BinaryHeap[A, P] ref^\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-BinaryHeap/#returns","title":"Returns","text":"<ul> <li>BinaryHeap[A, P] ref^</li> </ul>"},{"location":"collections-BinaryHeap/#public-functions","title":"Public Functions","text":""},{"location":"collections-BinaryHeap/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the heap.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#size","title":"size","text":"<p>[Source]</p> <p>Return the number of elements in the heap.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-BinaryHeap/#peek","title":"peek","text":"<p>[Source]</p> <p>Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned.</p> <pre><code>fun box peek()\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-BinaryHeap/#push","title":"push","text":"<p>[Source]</p> <p>Push an item into the heap.</p> <p>The time complexity of this operation is O(log(n)) with respect to the size of the heap.</p> <pre><code>fun ref push(\n  value: A)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_1","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-BinaryHeap/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned.</p> <p>The time complexity of this operation is O(log(n)) with respect to the size of the heap.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_5","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-BinaryHeap/#append","title":"append","text":"<p>[Source]</p> <p>Append len elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\n  seq: (ReadSeq[A] box &amp; ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_2","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-BinaryHeap/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements, starting from the given offset.</p> <pre><code>fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_3","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-BinaryHeap/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator for the elements in the heap. The order of elements is arbitrary.</p> <pre><code>fun box values()\n: ArrayValues[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_8","title":"Returns","text":"<ul> <li>ArrayValues[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"collections-BinaryHeapPriority/","title":"BinaryHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type BinaryHeapPriority[A: Comparable[A] #read] is\n  (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))\n</code></pre></p>"},{"location":"collections-BinaryHeapPriority/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))</li> </ul>"},{"location":"collections-Flag/","title":"Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]","text":"<p>[Source]</p> <p>A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits.</p> <pre><code>interface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Integer[A] val)]\n</code></pre>"},{"location":"collections-Flag/#public-functions","title":"Public Functions","text":""},{"location":"collections-Flag/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: A\n</code></pre>"},{"location":"collections-Flag/#returns","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"collections-Flags/","title":"Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]","text":"<p>[Source]</p> <p>Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example:</p> <p>primitive SSE   fun value(): U64 =&gt; 1</p> <p>primitive AVX   fun value(): U64 =&gt; 2</p> <p>primitive RDTSCP   fun value(): U64 =&gt; 4</p> <p>type Features is Flags[(SSE | AVX | RDTSCP)]</p> <p>Type parameter B is the underlying field used to store the flags.</p> <pre><code>class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Integer[B] val)] is\n  Comparable[Flags[A, B] box] ref\n</code></pre>"},{"location":"collections-Flags/#implements","title":"Implements","text":"<ul> <li>Comparable[Flags[A, B] box] ref</li> </ul>"},{"location":"collections-Flags/#constructors","title":"Constructors","text":""},{"location":"collections-Flags/#create","title":"create","text":"<p>[Source]</p> <p>Create a Flags instance with an optional initial value. Default is 0 (no flags set).</p> <pre><code>new iso create(\n  value': B = 0)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters","title":"Parameters","text":"<ul> <li>value': B = 0</li> </ul>"},{"location":"collections-Flags/#returns","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#public-functions","title":"Public Functions","text":""},{"location":"collections-Flags/#value","title":"value","text":"<p>[Source]</p> <p>Returns the bit encoding of the set flags.</p> <pre><code>fun box value()\n: B\n</code></pre>"},{"location":"collections-Flags/#returns_1","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-Flags/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns true if the flag is set.</p> <pre><code>fun box apply(\n  flag: A)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_1","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#all","title":"all","text":"<p>[Source]</p> <p>Sets all bits, including undefined flags.</p> <pre><code>fun ref all()\n: None val\n</code></pre>"},{"location":"collections-Flags/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#clear","title":"clear","text":"<p>[Source]</p> <p>Unsets all flags.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-Flags/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#set","title":"set","text":"<p>[Source]</p> <p>Sets the flag.</p> <pre><code>fun ref set(\n  flag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_2","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#unset","title":"unset","text":"<p>[Source]</p> <p>Unsets the flag.</p> <pre><code>fun ref unset(\n  flag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_3","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#flip","title":"flip","text":"<p>[Source]</p> <p>Sets the flag if it is unset, unsets the flag if it is set.</p> <pre><code>fun ref flip(\n  flag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_4","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#union","title":"union","text":"<p>[Source]</p> <p>The union of this and that.</p> <pre><code>fun ref union(\n  that: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_5","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#intersect","title":"intersect","text":"<p>[Source]</p> <p>The intersection of this and that.</p> <pre><code>fun ref intersect(\n  that: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_6","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#difference","title":"difference","text":"<p>[Source]</p> <p>The symmetric difference of this and that.</p> <pre><code>fun ref difference(\n  that: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_7","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#remove","title":"remove","text":"<p>[Source]</p> <p>Unset flags that are set in that.</p> <pre><code>fun ref remove(\n  that: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_8","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#add","title":"add","text":"<p>[Source]</p> <p>This with the flag set.</p> <pre><code>fun box add(\n  flag: A)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_9","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_12","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#sub","title":"sub","text":"<p>[Source]</p> <p>This with the flag unset.</p> <pre><code>fun box sub(\n  flag: A)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_10","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_13","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_or","title":"op_or","text":"<p>[Source]</p> <p>The union of this and that.</p> <pre><code>fun box op_or(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_11","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_14","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_and","title":"op_and","text":"<p>[Source]</p> <p>The intersection of this and that.</p> <pre><code>fun box op_and(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_12","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_15","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_xor","title":"op_xor","text":"<p>[Source]</p> <p>The symmetric difference of this and that.</p> <pre><code>fun box op_xor(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_13","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_16","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#without","title":"without","text":"<p>[Source]</p> <p>The flags in this that are not in that.</p> <pre><code>fun box without(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_14","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_17","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#clone","title":"clone","text":"<p>[Source]</p> <p>Create a clone.</p> <pre><code>fun box clone()\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#returns_18","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if this has the same flags set as that.</p> <pre><code>fun box eq(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_15","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge.</p> <pre><code>fun box lt(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_16","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te.</p> <pre><code>fun box le(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_17","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#gt","title":"gt","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le.</p> <pre><code>fun box gt(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_18","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#ge","title":"ge","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt.</p> <pre><code>fun box ge(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_19","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: Flags[A, B] box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"collections-Flags/#parameters_20","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_24","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections-Flags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_21","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashByteSeq/","title":"HashByteSeq","text":"<p>[Source]</p> <p>Hash and equality functions for arbitrary ByteSeq.</p> <pre><code>primitive val HashByteSeq is\n  HashFunction[(String box | Array[U8 val] box)] val,\n  HashFunction64[(String box | Array[U8 val] box)] val\n</code></pre>"},{"location":"collections-HashByteSeq/#implements","title":"Implements","text":"<ul> <li>HashFunction[(String box | Array[U8 val] box)] val</li> <li>HashFunction64[(String box | Array[U8 val] box)] val</li> </ul>"},{"location":"collections-HashByteSeq/#constructors","title":"Constructors","text":""},{"location":"collections-HashByteSeq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashByteSeq val^\n</code></pre>"},{"location":"collections-HashByteSeq/#returns","title":"Returns","text":"<ul> <li>HashByteSeq val^</li> </ul>"},{"location":"collections-HashByteSeq/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashByteSeq/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash(\n  x: (String box | Array[U8 val] box))\n: USize val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashByteSeq/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64(\n  x: (String box | Array[U8 val] box))\n: U64 val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_1","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashByteSeq/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_2","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> <li>y: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashByteSeq/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashByteSeq val)\n: Bool val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_3","title":"Parameters","text":"<ul> <li>that: HashByteSeq val</li> </ul>"},{"location":"collections-HashByteSeq/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq/","title":"HashEq[A: (Hashable #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>primitive val HashEq[A: (Hashable #read &amp; Equatable[A] #read)] is\n  HashFunction[A] val\n</code></pre></p>"},{"location":"collections-HashEq/#implements","title":"Implements","text":"<ul> <li>HashFunction[A] val</li> </ul>"},{"location":"collections-HashEq/#constructors","title":"Constructors","text":""},{"location":"collections-HashEq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashEq[A] val^\n</code></pre>"},{"location":"collections-HashEq/#returns","title":"Returns","text":"<ul> <li>HashEq[A] val^</li> </ul>"},{"location":"collections-HashEq/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashEq/#hash","title":"hash","text":"<p>[Source]</p> <p>Use the hash function from the type parameter.</p> <pre><code>fun box hash(\n  x: box-&gt;A)\n: USize val\n</code></pre>"},{"location":"collections-HashEq/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> </ul>"},{"location":"collections-HashEq/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashEq/#eq","title":"eq","text":"<p>[Source]</p> <p>Use the structural equality function from the type parameter.</p> <pre><code>fun box eq(\n  x: box-&gt;A,\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> <li>y: box-&gt;A</li> </ul>"},{"location":"collections-HashEq/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashEq[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq/#parameters_2","title":"Parameters","text":"<ul> <li>that: HashEq[A] val</li> </ul>"},{"location":"collections-HashEq/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq64/","title":"HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>primitive val HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)] is\n  HashFunction64[A] val\n</code></pre></p>"},{"location":"collections-HashEq64/#implements","title":"Implements","text":"<ul> <li>HashFunction64[A] val</li> </ul>"},{"location":"collections-HashEq64/#constructors","title":"Constructors","text":""},{"location":"collections-HashEq64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashEq64[A] val^\n</code></pre>"},{"location":"collections-HashEq64/#returns","title":"Returns","text":"<ul> <li>HashEq64[A] val^</li> </ul>"},{"location":"collections-HashEq64/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashEq64/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Use the hash function from the type parameter.</p> <pre><code>fun box hash64(\n  x: box-&gt;A)\n: U64 val\n</code></pre>"},{"location":"collections-HashEq64/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> </ul>"},{"location":"collections-HashEq64/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashEq64/#eq","title":"eq","text":"<p>[Source]</p> <p>Use the structural equality function from the type parameter.</p> <pre><code>fun box eq(\n  x: box-&gt;A,\n  y: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq64/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> <li>y: box-&gt;A</li> </ul>"},{"location":"collections-HashEq64/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashEq64[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq64/#parameters_2","title":"Parameters","text":"<ul> <li>that: HashEq64[A] val</li> </ul>"},{"location":"collections-HashEq64/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashFunction/","title":"HashFunction[A: A]","text":"<p>[Source]</p> <p>A pluggable hash function.</p> <pre><code>interface val HashFunction[A: A]\n</code></pre>"},{"location":"collections-HashFunction/#constructors","title":"Constructors","text":""},{"location":"collections-HashFunction/#create","title":"create","text":"<p>[Source]</p> <p>Data structures create instances internally. Use a primitive if possible.</p> <pre><code>new val create()\n: HashFunction[A] val^\n</code></pre>"},{"location":"collections-HashFunction/#returns","title":"Returns","text":"<ul> <li>HashFunction[A] val^</li> </ul>"},{"location":"collections-HashFunction/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashFunction/#hash","title":"hash","text":"<p>[Source]</p> <p>Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them.</p> <pre><code>fun box hash(\n  x: box-&gt;A!)\n: USize val\n</code></pre>"},{"location":"collections-HashFunction/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashFunction/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys.</p> <pre><code>fun box eq(\n  x: box-&gt;A!,\n  y: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashFunction/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashFunction64/","title":"HashFunction64[A: A]","text":"<p>[Source]</p> <p>A pluggable hash function with 64-bit hashes.</p> <pre><code>interface val HashFunction64[A: A]\n</code></pre>"},{"location":"collections-HashFunction64/#constructors","title":"Constructors","text":""},{"location":"collections-HashFunction64/#create","title":"create","text":"<p>[Source]</p> <p>Data structures create instances internally. Use a primitive if possible.</p> <pre><code>new val create()\n: HashFunction64[A] val^\n</code></pre>"},{"location":"collections-HashFunction64/#returns","title":"Returns","text":"<ul> <li>HashFunction64[A] val^</li> </ul>"},{"location":"collections-HashFunction64/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashFunction64/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them.</p> <pre><code>fun box hash64(\n  x: box-&gt;A!)\n: U64 val\n</code></pre>"},{"location":"collections-HashFunction64/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction64/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashFunction64/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys.</p> <pre><code>fun box eq(\n  x: box-&gt;A!,\n  y: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashFunction64/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction64/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashIs/","title":"HashIs[A: A]","text":"<p>[Source] <pre><code>primitive val HashIs[A: A] is\n  HashFunction[A] val,\n  HashFunction64[A] val\n</code></pre></p>"},{"location":"collections-HashIs/#implements","title":"Implements","text":"<ul> <li>HashFunction[A] val</li> <li>HashFunction64[A] val</li> </ul>"},{"location":"collections-HashIs/#constructors","title":"Constructors","text":""},{"location":"collections-HashIs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashIs[A] val^\n</code></pre>"},{"location":"collections-HashIs/#returns","title":"Returns","text":"<ul> <li>HashIs[A] val^</li> </ul>"},{"location":"collections-HashIs/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashIs/#hash","title":"hash","text":"<p>[Source]</p> <p>Hash the identity rather than the contents.</p> <pre><code>fun box hash(\n  x: box-&gt;A!)\n: USize val\n</code></pre>"},{"location":"collections-HashIs/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashIs/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Hash the identity rather than the contents.</p> <pre><code>fun box hash64(\n  x: box-&gt;A!)\n: U64 val\n</code></pre>"},{"location":"collections-HashIs/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashIs/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality by identity rather than structurally.</p> <pre><code>fun box eq(\n  x: box-&gt;A!,\n  y: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashIs/#parameters_2","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashIs/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashIs[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashIs/#parameters_3","title":"Parameters","text":"<ul> <li>that: HashIs[A] val</li> </ul>"},{"location":"collections-HashIs/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashMap/","title":"HashMap[K: K, V: V, H: HashFunction[K] val]","text":"<p>[Source]</p> <p>A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps.</p> <pre><code>class ref HashMap[K: K, V: V, H: HashFunction[K] val]\n</code></pre>"},{"location":"collections-HashMap/#constructors","title":"Constructors","text":""},{"location":"collections-HashMap/#create","title":"create","text":"<p>[Source]</p> <p>Create an array with space for prealloc elements without triggering a resize. Defaults to 6.</p> <pre><code>new ref create(\n  prealloc: USize val = 6)\n: HashMap[K, V, H] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters","title":"Parameters","text":"<ul> <li>prealloc: USize val = 6</li> </ul>"},{"location":"collections-HashMap/#returns","title":"Returns","text":"<ul> <li>HashMap[K, V, H] ref^</li> </ul>"},{"location":"collections-HashMap/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashMap/#size","title":"size","text":"<p>[Source]</p> <p>The number of items in the map.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-HashMap/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashMap/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the map. Resize will happen when size / space &gt;= 0.75.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-HashMap/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashMap/#apply","title":"apply","text":"<p>[Source]</p> <p>Gets a value from the map. Raises an error if no such item exists.</p> <pre><code>fun box apply(\n  key: box-&gt;K!)\n: this-&gt;V ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_1","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;V ?</li> </ul>"},{"location":"collections-HashMap/#update","title":"update","text":"<p>[Source]</p> <p>Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize.</p> <pre><code>fun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)\n</code></pre>"},{"location":"collections-HashMap/#parameters_2","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_4","title":"Returns","text":"<ul> <li>(V^ | None val)</li> </ul>"},{"location":"collections-HashMap/#upsert","title":"upsert","text":"<p>[Source]</p> <p>Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function.</p> <p>As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call</p> <p>m.upsert(\"test\", 4, {(current, provided) =&gt; current + provided })</p> <p>This changes the value associated with \"test\" to 6.</p> <p>If we have not yet added the key \"new-key\" to the map and we call</p> <p>m.upsert(\"new-key\", 4, {(current, provided) =&gt; current + provided })</p> <p>then \"new-key\" is added to the map with a value of 4.</p> <p>Returns the value that we set the key to</p> <pre><code>fun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H] box)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_3","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> <li>f: {(V, V): V^}[K, V, H] box</li> </ul>"},{"location":"collections-HashMap/#returns_5","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#insert","title":"insert","text":"<p>[Source]</p> <p>Set a value in the map. Returns the new value, allowing reuse.</p> <pre><code>fun ref insert(\n  key: K,\n  value: V)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_4","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_6","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#insert_if_absent","title":"insert_if_absent","text":"<p>[Source]</p> <p>Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like:</p> <pre><code>if not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend\n</code></pre> <p>Returns the value, the same as <code>insert</code>, allowing 'insert_if_absent' to be used as a drop-in replacement for <code>insert</code>.</p> <pre><code>fun ref insert_if_absent(\n  key: K,\n  value: V)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_5","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_7","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#remove","title":"remove","text":"<p>[Source]</p> <p>Delete a value from the map and return it. Raises an error if there was no value for the given key.</p> <pre><code>fun ref remove(\n  key: box-&gt;K!)\n: (K^ , V^) ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_6","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_8","title":"Returns","text":"<ul> <li>(K^ , V^) ?</li> </ul>"},{"location":"collections-HashMap/#get_or_else","title":"get_or_else","text":"<p>[Source]</p> <p>Get the value associated with provided key if present. Otherwise, return the provided alternate value.</p> <pre><code>fun box get_or_else(\n  key: box-&gt;K!,\n  alt: this-&gt;V)\n: this-&gt;V\n</code></pre>"},{"location":"collections-HashMap/#parameters_7","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> <li>alt: this-&gt;V</li> </ul>"},{"location":"collections-HashMap/#returns_9","title":"Returns","text":"<ul> <li>this-&gt;V</li> </ul>"},{"location":"collections-HashMap/#contains","title":"contains","text":"<p>[Source]</p> <p>Checks whether the map contains the key k</p> <pre><code>fun box contains(\n  k: box-&gt;K!)\n: Bool val\n</code></pre>"},{"location":"collections-HashMap/#parameters_8","title":"Parameters","text":"<ul> <li>k: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashMap/#concat","title":"concat","text":"<p>[Source]</p> <p>Add K, V pairs from the iterator to the map.</p> <pre><code>fun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val\n</code></pre>"},{"location":"collections-HashMap/#parameters_9","title":"Parameters","text":"<ul> <li>iter: Iterator[(K^ , V^)] ref</li> </ul>"},{"location":"collections-HashMap/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#addoptional-h2-hashfunctionthis-k-val","title":"add[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>This with the new (key, value) mapping.</p> <pre><code>fun box add[optional H2: HashFunction[this-&gt;K!] val](\n  key: this-&gt;K!,\n  value: this-&gt;V!)\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters_10","title":"Parameters","text":"<ul> <li>key: this-&gt;K!</li> <li>value: this-&gt;V!</li> </ul>"},{"location":"collections-HashMap/#returns_12","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#suboptional-h2-hashfunctionthis-k-val","title":"sub[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>This without the given key.</p> <pre><code>fun box sub[optional H2: HashFunction[this-&gt;K!] val](\n  key: this-&gt;K!)\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters_11","title":"Parameters","text":"<ul> <li>key: this-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_13","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#next_index","title":"next_index","text":"<p>[Source]</p> <p>Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index.</p> <pre><code>fun box next_index(\n  prev: USize val = call)\n: USize val ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_12","title":"Parameters","text":"<ul> <li>prev: USize val = call</li> </ul>"},{"location":"collections-HashMap/#returns_14","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-HashMap/#index","title":"index","text":"<p>[Source]</p> <p>Returns the key and value at a given index. Raise an error if the index is not populated.</p> <pre><code>fun box index(\n  i: USize val)\n: (this-&gt;K , this-&gt;V) ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_13","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-HashMap/#returns_15","title":"Returns","text":"<ul> <li>(this-&gt;K , this-&gt;V) ?</li> </ul>"},{"location":"collections-HashMap/#compact","title":"compact","text":"<p>[Source]</p> <p>Minimise the memory used for the map.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"collections-HashMap/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#cloneoptional-h2-hashfunctionthis-k-val","title":"clone[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation.</p> <pre><code>fun box clone[optional H2: HashFunction[this-&gt;K!] val]()\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_17","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all entries.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-HashMap/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#keys","title":"keys","text":"<p>[Source]</p> <p>Return an iterator over the keys.</p> <pre><code>fun box keys()\n: MapKeys[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_19","title":"Returns","text":"<ul> <li>MapKeys[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashMap/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values.</p> <pre><code>fun box values()\n: MapValues[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_20","title":"Returns","text":"<ul> <li>MapValues[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashMap/#pairs","title":"pairs","text":"<p>[Source]</p> <p>Return an iterator over the keys and values.</p> <pre><code>fun box pairs()\n: MapPairs[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_21","title":"Returns","text":"<ul> <li>MapPairs[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashSet/","title":"HashSet[A: A, H: HashFunction[A!] val]","text":"<p>[Source]</p> <p>A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself</p> <pre><code>class ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H] box] ref\n</code></pre>"},{"location":"collections-HashSet/#implements","title":"Implements","text":"<ul> <li>Comparable[HashSet[A, H] box] ref</li> </ul>"},{"location":"collections-HashSet/#constructors","title":"Constructors","text":""},{"location":"collections-HashSet/#create","title":"create","text":"<p>[Source]</p> <p>Defaults to a prealloc of 8.</p> <pre><code>new ref create(\n  prealloc: USize val = 8)\n: HashSet[A, H] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters","title":"Parameters","text":"<ul> <li>prealloc: USize val = 8</li> </ul>"},{"location":"collections-HashSet/#returns","title":"Returns","text":"<ul> <li>HashSet[A, H] ref^</li> </ul>"},{"location":"collections-HashSet/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashSet/#size","title":"size","text":"<p>[Source]</p> <p>The number of items in the set.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-HashSet/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashSet/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the set.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-HashSet/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashSet/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the value if its in the set, otherwise raise an error.</p> <pre><code>fun box apply(\n  value: box-&gt;A!)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_1","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-HashSet/#contains","title":"contains","text":"<p>[Source]</p> <p>Checks whether the set contains the value.</p> <pre><code>fun box contains(\n  value: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_2","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the set.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-HashSet/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#set","title":"set","text":"<p>[Source]</p> <p>Add a value to the set.</p> <pre><code>fun ref set(\n  value: A)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_3","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-HashSet/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#unset","title":"unset","text":"<p>[Source]</p> <p>Remove a value from the set.</p> <pre><code>fun ref unset(\n  value: box-&gt;A!)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_4","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#extract","title":"extract","text":"<p>[Source]</p> <p>Remove a value from the set and return it. Raises an error if the value wasn't in the set.</p> <pre><code>fun ref extract(\n  value: box-&gt;A!)\n: A^ ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_5","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_8","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-HashSet/#union","title":"union","text":"<p>[Source]</p> <p>Add everything in that to the set.</p> <pre><code>fun ref union(\n  that: Iterator[A^] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_6","title":"Parameters","text":"<ul> <li>that: Iterator[A^] ref</li> </ul>"},{"location":"collections-HashSet/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#intersectoptional-k-hashfunctionbox-a-val","title":"intersect[optional K: HashFunction[box-&gt;A!] val]","text":"<p>[Source]</p> <p>Remove everything that isn't in that.</p> <pre><code>fun ref intersect[optional K: HashFunction[box-&gt;A!] val](\n  that: HashSet[box-&gt;A!, K] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_7","title":"Parameters","text":"<ul> <li>that: HashSet[box-&gt;A!, K] ref</li> </ul>"},{"location":"collections-HashSet/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#difference","title":"difference","text":"<p>[Source]</p> <p>Remove elements in this which are also in that. Add elements in that which are not in this.</p> <pre><code>fun ref difference(\n  that: Iterator[A^] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_8","title":"Parameters","text":"<ul> <li>that: Iterator[A^] ref</li> </ul>"},{"location":"collections-HashSet/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove everything that is in that.</p> <pre><code>fun ref remove(\n  that: Iterator[box-&gt;A!] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_9","title":"Parameters","text":"<ul> <li>that: Iterator[box-&gt;A!] ref</li> </ul>"},{"location":"collections-HashSet/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#addoptional-k-hashfunctionthis-a-val","title":"add[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Add a value to the set.</p> <pre><code>fun box add[optional K: HashFunction[this-&gt;A!] val](\n  value: this-&gt;A!)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_10","title":"Parameters","text":"<ul> <li>value: this-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_13","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#suboptional-k-hashfunctionthis-a-val","title":"sub[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Remove a value from the set.</p> <pre><code>fun box sub[optional K: HashFunction[this-&gt;A!] val](\n  value: box-&gt;this-&gt;A!)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_11","title":"Parameters","text":"<ul> <li>value: box-&gt;this-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_14","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_oroptional-k-hashfunctionthis-a-val","title":"op_or[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements of both this and that.</p> <pre><code>fun box op_or[optional K: HashFunction[this-&gt;A!] val](\n  that: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_12","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_15","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_andoptional-k-hashfunctionthis-a-val","title":"op_and[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements that are in both this and that.</p> <pre><code>fun box op_and[optional K: HashFunction[this-&gt;A!] val](\n  that: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_13","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_16","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_xoroptional-k-hashfunctionthis-a-val","title":"op_xor[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements that are in either set but not both.</p> <pre><code>fun box op_xor[optional K: HashFunction[this-&gt;A!] val](\n  that: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_14","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_17","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#withoutoptional-k-hashfunctionthis-a-val","title":"without[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements of this that are not in that.</p> <pre><code>fun box without[optional K: HashFunction[this-&gt;A!] val](\n  that: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_15","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_18","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#cloneoptional-k-hashfunctionthis-a-val","title":"clone[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a clone. The element type may be different due to aliasing and viewpoint adaptation.</p> <pre><code>fun box clone[optional K: HashFunction[this-&gt;A!] val]()\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#returns_19","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if the sets contain the same elements.</p> <pre><code>fun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_16","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#ne","title":"ne","text":"<p>[Source]</p> <p>Returns false if the sets contain the same elements.</p> <pre><code>fun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_17","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if every element in this is also in that, and this has fewer elements than that.</p> <pre><code>fun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_18","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if every element in this is also in that.</p> <pre><code>fun box le(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_19","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#gt","title":"gt","text":"<p>[Source]</p> <p>Returns true if every element in that is also in this, and this has more elements than that.</p> <pre><code>fun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_20","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#ge","title":"ge","text":"<p>[Source]</p> <p>Returns true if every element in that is also in this.</p> <pre><code>fun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_21","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#next_index","title":"next_index","text":"<p>[Source]</p> <p>Given an index, return the next index that has a populated value. Raise an error if there is no next populated index.</p> <pre><code>fun box next_index(\n  prev: USize val = call)\n: USize val ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_22","title":"Parameters","text":"<ul> <li>prev: USize val = call</li> </ul>"},{"location":"collections-HashSet/#returns_26","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-HashSet/#index","title":"index","text":"<p>[Source]</p> <p>Returns the value at a given index. Raise an error if the index is not populated.</p> <pre><code>fun box index(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_23","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-HashSet/#returns_27","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-HashSet/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values.</p> <pre><code>fun box values()\n: SetValues[A, H, this-&gt;HashSet[A, H] ref] ref^\n</code></pre>"},{"location":"collections-HashSet/#returns_28","title":"Returns","text":"<ul> <li>SetValues[A, H, this-&gt;HashSet[A, H] ref] ref^</li> </ul>"},{"location":"collections-HashSet/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"collections-HashSet/#parameters_24","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_29","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections-Hashable/","title":"Hashable","text":"<p>[Source]</p> <p>Anything with a hash method is hashable.</p> <pre><code>interface ref Hashable\n</code></pre>"},{"location":"collections-Hashable/#public-functions","title":"Public Functions","text":""},{"location":"collections-Hashable/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"collections-Hashable/#returns","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-Hashable64/","title":"Hashable64","text":"<p>[Source]</p> <p>A version of Hashable that returns 64-bit hashes on every platform.</p> <pre><code>interface ref Hashable64\n</code></pre>"},{"location":"collections-Hashable64/#public-functions","title":"Public Functions","text":""},{"location":"collections-Hashable64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"collections-Hashable64/#returns","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-List/","title":"List[A: A]","text":"<p>[Source]</p> <p>A doubly linked list.</p> <p>The following is paraphrased from Wikipedia.</p> <p>A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes (implemented in Pony via the collections.ListNode class). Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the List in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders.</p> <p>As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc.</p>"},{"location":"collections-List/#example-program","title":"Example program","text":"<p>There are a lot of functions in List. The following code picks out a few common examples.</p> <p>It outputs:</p> <pre><code>A new empty list has 0 nodes.\nAdding one node to our empty list means it now has a size of 1.\nThe first (index 0) node has the value: A single String\nA list created by appending our second single-node list onto our first has size: 2\nThe List nodes of our first list are now:\n  A single String\n  Another String\nAppend *moves* the nodes from the second list so that now has 0 nodes.\nA list created from an array of three strings has size: 3\n  First\n  Second\n  Third\nMapping over our three-node list produces a new list of size: 3\nEach node-value in the resulting list is now far more exciting:\n  First BOOM!\n  Second BOOM!\n  Third BOOM!\nFiltering our three-node list produces a new list of size: 2\n  Second BOOM!\n  Third BOOM!\nThe size of our first partitioned list (matches predicate): 1\nThe size of our second partitioned list (doesn't match predicate): 1\nOur matching partition elements are:\n  Second BOOM!\n</code></pre> <pre><code>  use \"collections\"\n\n  actor Main\n    new create(env:Env) =&gt;\n\n      // Create a new empty List of type String\n      let my_list = List[String]()\n\n      env.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0\n\n      // Push a String literal onto our empty List\n      my_list.push(\"A single String\")\n      env.out.print(\"Adding one node to our empty list means it now has a size of \"\n                    + my_list.size().string() + \".\") // 1\n\n      // Get the first element of our List\n      try env.out.print(\"The first (index 0) node has the value: \"\n                        + my_list.index(0)?()?.string()) end // A single String\n\n      // Create a second List from a single String literal\n      let my_second_list = List[String].unit(\"Another String\")\n\n      // Append the second List to the first\n      my_list.append_list(my_second_list)\n      env.out.print(\"A list created by appending our second single-node list onto our first has size: \"\n                    + my_list.size().string()) // 2\n      env.out.print(\"The List nodes of our first list are now:\")\n      for n in my_list.values() do\n        env.out.print(\"\\t\" + n.string())\n      end\n      // NOTE: this _moves_ the elements so second_list consequently ends up empty\n      env.out.print(\"Append *moves* the nodes from the second list so that now has \"\n                    + my_second_list.size().string() + \" nodes.\") // 0\n\n      // Create a third List from a Seq(ence)\n      // (In this case a literal array of Strings)\n      let my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"])\n      env.out.print(\"A list created from an array of three strings has size: \"\n                    + my_third_list.size().string()) // 3\n      for n in my_third_list.values() do\n        env.out.print(\"\\t\" + n.string())\n      end\n\n      // Map over the third List, concatenating some \"BOOM!'s\" into a new List\n      let new_list = my_third_list.map[String]({ (n) =&gt; n + \" BOOM!\" })\n      env.out.print(\"Mapping over our three-node list produces a new list of size: \"\n                    + new_list.size().string()) // 3\n      env.out.print(\"Each node-value in the resulting list is now far more exciting:\")\n      for n in new_list.values() do\n        env.out.print(\"\\t\" + n.string())\n      end\n\n      // Filter the new list to extract 2 elements\n      let filtered_list = new_list.filter({ (n) =&gt; n.string().contains(\"d BOOM!\") })\n      env.out.print(\"Filtering our three-node list produces a new list of size: \"\n                        + filtered_list.size().string()) // 2\n      for n in filtered_list.values() do\n        env.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM!\n      end\n\n      // Partition the filtered list\n      let partitioned_lists = filtered_list.partition({ (n) =&gt; n.string().contains(\"Second\") })\n      env.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string())        // 1\n      env.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string())  // 1\n      env.out.print(\"Our matching partition elements are:\")\n      for n in partitioned_lists._1.values() do\n        env.out.print(\"\\t\" + n.string()) // Second BOOM!\n      end\n</code></pre> <pre><code>class ref List[A: A] is\n  Seq[A] ref\n</code></pre>"},{"location":"collections-List/#implements","title":"Implements","text":"<ul> <li>Seq[A] ref</li> </ul>"},{"location":"collections-List/#constructors","title":"Constructors","text":""},{"location":"collections-List/#create","title":"create","text":"<p>[Source]</p> <p>Always creates an empty list with 0 nodes, <code>len</code> is ignored.</p> <p>Required method for <code>List</code> to satisfy the <code>Seq</code> interface. <pre><code>let my_list = List[String]\n</code></pre></p> <pre><code>new ref create(\n  len: USize val = 0)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"collections-List/#returns","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#unit","title":"unit","text":"<p>[Source]</p> <p>Creates a list with 1 node of element.</p> <pre><code>let my_list = List[String].unit(\"element\")\n</code></pre> <pre><code>new ref unit(\n  a: A)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_1","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#from","title":"from","text":"<p>[Source]</p> <p>Creates a list equivalent to the provided Array (both node number and order are preserved).</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\n</code></pre> <pre><code>new ref from(\n  seq: Array[A^] ref)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters_2","title":"Parameters","text":"<ul> <li>seq: Array[A^] ref</li> </ul>"},{"location":"collections-List/#returns_2","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#public-functions","title":"Public Functions","text":""},{"location":"collections-List/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Do nothing</p> <p>Required method for <code>List</code> to satisfy the <code>Seq</code> interface.</p> <pre><code>fun ref reserve(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_3","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-List/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of items in the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.size() // 3\n</code></pre> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-List/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-List/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element, raising an error if the index is out of bounds.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.apply(1)? end // \"b\"\n</code></pre> <pre><code>fun box apply(\n  i: USize val = 0)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-List/#parameters_4","title":"Parameters","text":"<ul> <li>i: USize val = 0</li> </ul>"},{"location":"collections-List/#returns_5","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-List/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th element, raising an error if the index is out of bounds, and returning the previous value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.update(1, \"z\")? end // Returns \"b\" and List now contains [\"a\"; \"z\"; \"c\"]\n</code></pre> <pre><code>fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n</code></pre>"},{"location":"collections-List/#parameters_5","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"collections-List/#returns_6","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#index","title":"index","text":"<p>[Source]</p> <p>Gets the i-th node, raising an error if the index is out of bounds.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.index(0)? end // Returns a ListNode[String] containing \"a\"\n</code></pre> <pre><code>fun box index(\n  i: USize val)\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#parameters_6","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-List/#returns_7","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the i-th node, raising an error if the index is out of bounds, and returning the removed node.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.remove(0)? end // Returns a ListNode[String] containing \"a\" and List now contains [\"b\"; \"c\"]\n</code></pre> <pre><code>fun ref remove(\n  i: USize val)\n: ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#parameters_7","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-List/#returns_8","title":"Returns","text":"<ul> <li>ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#clear","title":"clear","text":"<p>[Source]</p> <p>Empties the list.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-List/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#head","title":"head","text":"<p>[Source]</p> <p>Show the head of the list, raising an error if the head is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.head()? end // Returns a ListNode[String] containing \"a\"\n</code></pre> <pre><code>fun box head()\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#returns_10","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#tail","title":"tail","text":"<p>[Source]</p> <p>Show the tail of the list, raising an error if the tail is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.tail()? end // Returns a ListNode[String] containing \"c\"\n</code></pre> <pre><code>fun box tail()\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#returns_11","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#prepend_node","title":"prepend_node","text":"<p>[Source]</p> <p>Adds a node to the head of the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet new_head = ListNode[String](\"0\")\nmy_list.prepend_node(new_head) // [\"0\", \"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun ref prepend_node(\n  node: ListNode[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_8","title":"Parameters","text":"<ul> <li>node: ListNode[A] ref</li> </ul>"},{"location":"collections-List/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#append_node","title":"append_node","text":"<p>[Source]</p> <p>Adds a node to the tail of the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet new_tail = ListNode[String](\"0\")\nmy_list.append_node(new_head) // [\"a\"; \"b\"; \"c\", \"0\"]\n</code></pre> <pre><code>fun ref append_node(\n  node: ListNode[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_9","title":"Parameters","text":"<ul> <li>node: ListNode[A] ref</li> </ul>"},{"location":"collections-List/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#append_list","title":"append_list","text":"<p>[Source]</p> <p>Empties the provided List by appending all elements onto the receiving List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.append_list(other_list)  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is empty\n</code></pre> <pre><code>fun ref append_list(\n  that: List[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_10","title":"Parameters","text":"<ul> <li>that: List[A] ref</li> </ul>"},{"location":"collections-List/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#prepend_list","title":"prepend_list","text":"<p>[Source]</p> <p>Empties the provided List by prepending all elements onto the receiving List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.prepend_list(other_list)  // my_list is [\"d\"; \"e\"; \"f\"; \"a\"; \"b\"; \"c\"], other_list is empty\n</code></pre> <pre><code>fun ref prepend_list(\n  that: List[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_11","title":"Parameters","text":"<ul> <li>that: List[A] ref</li> </ul>"},{"location":"collections-List/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#push","title":"push","text":"<p>[Source]</p> <p>Adds a new tail value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.push(\"d\")  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"]\n</code></pre> <pre><code>fun ref push(\n  a: A)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_12","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#pop","title":"pop","text":"<p>[Source]</p> <p>Removes the tail value, raising an error if the tail is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.pop() end  // Returns \"c\" and my_list is [\"a\"; \"b\"]\n</code></pre> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-List/#returns_17","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds a new head value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.unshift(\"d\")  // my_list is [\"d\"; \"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun ref unshift(\n  a: A)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_13","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes the head value, raising an error if the head is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.shift() end  // Returns \"a\" and my_list is [\"b\"; \"c\"]\n</code></pre> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"collections-List/#returns_19","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#append","title":"append","text":"<p>[Source]</p> <p>Append len elements from a sequence, starting from the given offset.</p> <p>When len is -1, all elements of sequence are pushed.</p> <p>Does not remove elements from sequence.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.append(other_list)  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is unchanged\n</code></pre> <pre><code>fun ref append(\n  seq: (ReadSeq[A] box &amp; ReadElement[A^] box),\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_14","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-List/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the tail of the list, starting from the given offset.</p> <p>When len is -1, all elements of iterator are pushed.</p> <p>Does not remove elements from iterator.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.concat(other_list.values())  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is unchanged\n</code></pre> <pre><code>fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = 0,\n  len: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_15","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-List/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Pop tail elements until the list is len size. If the list is already smaller than len, do nothing.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.truncate(1)  // my_list is [\"a\"]\n</code></pre> <pre><code>fun ref truncate(\n  len: USize val)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_16","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-List/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#clone","title":"clone","text":"<p>[Source]</p> <p>Clone all elements into a new List.</p> <p>Note: elements are not copied, an additional reference to each element is created in the new List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.clone()  // my_list is [\"a\"; \"b\"; \"c\"], other_list is [\"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun box clone()\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#returns_23","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#mapb-b","title":"map[B: B]","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by applying a function to every element of the <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.map[String]( {(s: String): String =&gt; \"m: \" + s } )  // other_list is [\"m: a\"; \"m: b\"; \"m: c\"]\n</code></pre> <pre><code>fun box map[B: B](\n  f: {(this-&gt;A!): B^}[A, B] box)\n: List[B] ref^\n</code></pre>"},{"location":"collections-List/#parameters_17","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): B^}[A, B] box</li> </ul>"},{"location":"collections-List/#returns_24","title":"Returns","text":"<ul> <li>List[B] ref^</li> </ul>"},{"location":"collections-List/#flat_mapb-b","title":"flat_map[B: B]","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by applying a function to every element of the <code>List</code>,  producing a new <code>List</code> for each element, then flattened into a single <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.flat_map[String]( {(s: String): List[String] =&gt; List[String].from( [\"m\"; s] )} )  // other_list is [\"m\"; \"a\"; \"m\"; \"b\"; \"m\"; c\"]\n</code></pre> <pre><code>fun box flat_map[B: B](\n  f: {(this-&gt;A!): List[B]}[A, B] box)\n: List[B] ref^\n</code></pre>"},{"location":"collections-List/#parameters_18","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): List[B]}[A, B] box</li> </ul>"},{"location":"collections-List/#returns_25","title":"Returns","text":"<ul> <li>List[B] ref^</li> </ul>"},{"location":"collections-List/#filter","title":"filter","text":"<p>[Source]</p> <p>Builds a new <code>List</code> with those elements that satisfy the predicate.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.filter( {(s: String): Bool =&gt; s == \"b\" } )  // other_list is [\"b\"]\n</code></pre> <pre><code>fun box filter(\n  f: {(this-&gt;A!): Bool}[A] box)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_19","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_26","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#foldb-b","title":"fold[B: B]","text":"<p>[Source]</p> <p>Folds the elements of the <code>List</code> using the supplied function.</p> <p>On the first iteration, the <code>B</code> argument in <code>f</code> is the value <code>acc</code>,  on the second iteration <code>B</code> is the result of the first iteration, on the third iteration <code>B</code> is the result of the second iteration, and so on.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet folded = my_list.fold[String]( {(str: String, s: String): String =&gt; str + s }, \"z\")  // \"zabc\"\n</code></pre> <pre><code>fun box fold[B: B](\n  f: {(B!, this-&gt;A!): B^}[A, B] box,\n  acc: B)\n: B\n</code></pre>"},{"location":"collections-List/#parameters_20","title":"Parameters","text":"<ul> <li>f: {(B!, this-&gt;A!): B^}[A, B] box</li> <li>acc: B</li> </ul>"},{"location":"collections-List/#returns_27","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-List/#every","title":"every","text":"<p>[Source]</p> <p>Returns <code>true</code> if every element satisfies the predicate, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet all_z = my_list.every( {(s: String): Bool =&gt; s == \"z\"} ) // false\n</code></pre> <pre><code>fun box every(\n  f: {(this-&gt;A!): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_21","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_28","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#exists","title":"exists","text":"<p>[Source]</p> <p>Returns <code>true</code> if at least one element satisfies the predicate, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet b_exists = my_list.exists( {(s: String): Bool =&gt; s == \"b\"} ) // true\n</code></pre> <pre><code>fun box exists(\n  f: {(this-&gt;A!): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_22","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_29","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#partition","title":"partition","text":"<p>[Source]</p> <p>Builds a pair of <code>List</code>s, the first of which is made up of the elements satisfying the predicate and the second of which is made up of those that do not.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\n(let lt_b, let gt_b) = my_list.partition( {(s: String): Bool =&gt; s &lt; \"b\"} )  // lt_b is [\"a\"], while gt_b is [\"b\"; \"c\"]\n</code></pre> <pre><code>fun box partition(\n  f: {(this-&gt;A!): Bool}[A] box)\n: (List[this-&gt;A!] ref^ , List[this-&gt;A!] ref^)\n</code></pre>"},{"location":"collections-List/#parameters_23","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_30","title":"Returns","text":"<ul> <li>(List[this-&gt;A!] ref^ , List[this-&gt;A!] ref^)</li> </ul>"},{"location":"collections-List/#drop","title":"drop","text":"<p>[Source]</p> <p>Builds a <code>List</code> by dropping the first <code>n</code> elements.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.drop(1)  // [\"b\"; \"c\"]\n</code></pre> <pre><code>fun box drop(\n  n: USize val)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_24","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-List/#returns_31","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#take","title":"take","text":"<p>[Source]</p> <p>Builds a <code>List</code> by keeping the first <code>n</code> elements.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.drop(1)  // [\"a\"]\n</code></pre> <pre><code>fun box take(\n  n: USize val)\n: List[this-&gt;A!] ref\n</code></pre>"},{"location":"collections-List/#parameters_25","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-List/#returns_32","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref</li> </ul>"},{"location":"collections-List/#take_while","title":"take_while","text":"<p>[Source]</p> <p>Builds a <code>List</code> of elements satisfying the predicate, stopping at the first <code>false</code> return.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.take_while( {(s: String): Bool =&gt; s &lt; \"b\"} )  // [\"a\"]\n</code></pre> <pre><code>fun box take_while(\n  f: {(this-&gt;A!): Bool}[A] box)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_26","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_33","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by reversing the elements in the <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.reverse() // [\"c\"; \"b\"; \"a\"]\n</code></pre> <pre><code>fun box reverse()\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#returns_34","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#containsoptional-b-a-haseqa-read","title":"contains[optional B: (A &amp; HasEq[A!] #read)]","text":"<p>[Source]</p> <p>Returns <code>true</code> if the <code>List</code> contains the provided element, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet contains_b = my_list.contains[String](\"b\") // true\n</code></pre> <pre><code>fun box contains[optional B: (A &amp; HasEq[A!] #read)](\n  a: box-&gt;B)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_27","title":"Parameters","text":"<ul> <li>a: box-&gt;B</li> </ul>"},{"location":"collections-List/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#nodes","title":"nodes","text":"<p>[Source]</p> <p>Return an iterator on the nodes in the <code>List</code> in forward order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet nodes = my_list.nodes()  // node with \"a\" is before node with \"c\"\n</code></pre> <pre><code>fun box nodes()\n: ListNodes[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_36","title":"Returns","text":"<ul> <li>ListNodes[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#rnodes","title":"rnodes","text":"<p>[Source]</p> <p>Return an iterator on the nodes in the <code>List</code> in reverse order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet rnodes = my_list.rnodes()  // node with \"c\" is before node with \"a\"\n</code></pre> <pre><code>fun box rnodes()\n: ListNodes[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_37","title":"Returns","text":"<ul> <li>ListNodes[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator on the values in the <code>List</code> in forward order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet values = my_list.values()  // value \"a\" is before value \"c\"\n</code></pre> <pre><code>fun box values()\n: ListValues[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_38","title":"Returns","text":"<ul> <li>ListValues[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#rvalues","title":"rvalues","text":"<p>[Source]</p> <p>Return an iterator on the values in the <code>List</code> in reverse order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet rvalues = my_list.rvalues()  // value \"c\" is before value \"a\"\n</code></pre> <pre><code>fun box rvalues()\n: ListValues[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_39","title":"Returns","text":"<ul> <li>ListValues[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-ListNode/","title":"ListNode[A: A]","text":"<p>[Source]</p> <p>A node in a doubly linked list.</p> <p>See Pony collections.List class for usage examples.</p> <p>Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the List in which it resides.</p> <p>As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode.</p> <p>Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions.  The Ponylang collections.List class is the correct way to create these. Do not attempt to create a Linked List using only ListNodes.</p>"},{"location":"collections-ListNode/#example-program","title":"Example program","text":"<p>The functions which are illustrated below are only those which operate on an individual ListNode.</p> <p>It outputs:</p> <p>My node has the item value: My Node item   My node has the updated item value: My updated Node item   Popped the item from the ListNode   The ListNode has no (None) item.</p> <pre><code>  use \"collections\"\n  actor Main\n    new create(env:Env) =&gt;\n\n      // Create a new ListNode of type String\n      let my_list_node = ListNode[String](\"My Node item\")\n      try \n        env.out.print(\"My node has the item value: \"\n                      + my_list_node.apply()?) // My Node item\n      end\n\n      // Update the item contained in the ListNode\n      try\n        my_list_node.update(\"My updated Node item\")?\n        env.out.print(\"My node has the updated item value: \"\n                      + my_list_node.apply()?) // My updated Node item\n      end\n      // Pop the item from the ListNode\n      try\n        my_list_node.pop()?\n        env.out.print(\"Popped the item from the ListNode\")\n        my_list_node.apply()? // This will error as the item is now None\n      else\n        env.out.print(\"The ListNode has no (None) item.\")\n      end\n</code></pre> <pre><code>class ref ListNode[A: A]\n</code></pre>"},{"location":"collections-ListNode/#constructors","title":"Constructors","text":""},{"location":"collections-ListNode/#create","title":"create","text":"<p>[Source]</p> <p>Create a node. Initially, it is not in any list.</p> <pre><code>new ref create(\n  item: (A | None val) = reference)\n: ListNode[A] ref^\n</code></pre>"},{"location":"collections-ListNode/#parameters","title":"Parameters","text":"<ul> <li>item: (A | None val) = reference</li> </ul>"},{"location":"collections-ListNode/#returns","title":"Returns","text":"<ul> <li>ListNode[A] ref^</li> </ul>"},{"location":"collections-ListNode/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListNode/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the item, if we have one, otherwise raise an error.</p> <pre><code>fun box apply()\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-ListNode/#returns_1","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-ListNode/#update","title":"update","text":"<p>[Source]</p> <p>Replace the item and return the previous one. Raise an error if we have no previous value.</p> <pre><code>fun ref update(\n  value: (A | None val))\n: A^ ?\n</code></pre>"},{"location":"collections-ListNode/#parameters_1","title":"Parameters","text":"<ul> <li>value: (A | None val)</li> </ul>"},{"location":"collections-ListNode/#returns_2","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-ListNode/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove the item from the node, if we have one, otherwise raise an error.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-ListNode/#returns_3","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-ListNode/#prepend","title":"prepend","text":"<p>[Source]</p> <p>Prepend a node to this one. If <code>that</code> is already in a list, it is removed before it is prepended. Returns true if <code>that</code> was removed from another list. If the ListNode is not contained within a List the prepend will fail.</p> <pre><code>fun ref prepend(\n  that: ListNode[A] ref)\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#parameters_2","title":"Parameters","text":"<ul> <li>that: ListNode[A] ref</li> </ul>"},{"location":"collections-ListNode/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#append","title":"append","text":"<p>[Source]</p> <p>Append a node to this one. If <code>that</code> is already in a list, it is removed before it is appended. Returns true if <code>that</code> was removed from another list.</p> <p>If the ListNode is not contained within a List the append will fail.</p> <pre><code>fun ref append(\n  that: ListNode[A] ref)\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#parameters_3","title":"Parameters","text":"<ul> <li>that: ListNode[A] ref</li> </ul>"},{"location":"collections-ListNode/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove a node from a list.</p> <p>The ListNode must be contained within a List for this to succeed.</p> <pre><code>fun ref remove()\n: None val\n</code></pre>"},{"location":"collections-ListNode/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-ListNode/#has_prev","title":"has_prev","text":"<p>[Source]</p> <p>Return true if there is a previous node.</p> <pre><code>fun box has_prev()\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Return true if there is a next node.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#prev","title":"prev","text":"<p>[Source]</p> <p>Return the previous node.</p> <pre><code>fun box prev()\n: (this-&gt;ListNode[A] ref | None val)\n</code></pre>"},{"location":"collections-ListNode/#returns_9","title":"Returns","text":"<ul> <li>(this-&gt;ListNode[A] ref | None val)</li> </ul>"},{"location":"collections-ListNode/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node.</p> <pre><code>fun box next()\n: (this-&gt;ListNode[A] ref | None val)\n</code></pre>"},{"location":"collections-ListNode/#returns_10","title":"Returns","text":"<ul> <li>(this-&gt;ListNode[A] ref | None val)</li> </ul>"},{"location":"collections-ListNodes/","title":"ListNodes[A: A, N: ListNode[A] #read]","text":"<p>[Source]</p> <p>Iterate over the nodes in a <code>List</code>.</p> <pre><code>class ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N] ref\n</code></pre>"},{"location":"collections-ListNodes/#implements","title":"Implements","text":"<ul> <li>Iterator[N] ref</li> </ul>"},{"location":"collections-ListNodes/#constructors","title":"Constructors","text":""},{"location":"collections-ListNodes/#create","title":"create","text":"<p>[Source]</p> <p>Build the iterator over nodes.</p> <p><code>reverse</code> of <code>false</code> iterates forward, while <code>reverse</code> of <code>true</code> iterates in reverse.</p> <pre><code>new ref create(\n  head: (N | None val),\n  reverse: Bool val = false)\n: ListNodes[A, N] ref^\n</code></pre>"},{"location":"collections-ListNodes/#parameters","title":"Parameters","text":"<ul> <li>head: (N | None val)</li> <li>reverse: Bool val = false</li> </ul>"},{"location":"collections-ListNodes/#returns","title":"Returns","text":"<ul> <li>ListNodes[A, N] ref^</li> </ul>"},{"location":"collections-ListNodes/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListNodes/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Indicates whether there are any nodes remaining in the iterator.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListNodes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNodes/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node in the iterator, advancing the iterator by one element.</p> <p>Order of return is determined by <code>reverse</code> argument during creation.</p> <pre><code>fun ref next()\n: N ?\n</code></pre>"},{"location":"collections-ListNodes/#returns_2","title":"Returns","text":"<ul> <li>N ?</li> </ul>"},{"location":"collections-ListValues/","title":"ListValues[A: A, N: ListNode[A] #read]","text":"<p>[Source]</p> <p>Iterate over the values in a <code>List</code>.</p> <pre><code>class ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N-&gt;A] ref\n</code></pre>"},{"location":"collections-ListValues/#implements","title":"Implements","text":"<ul> <li>Iterator[N-&gt;A] ref</li> </ul>"},{"location":"collections-ListValues/#constructors","title":"Constructors","text":""},{"location":"collections-ListValues/#create","title":"create","text":"<p>[Source]</p> <p>Build the iterator over values.</p> <p><code>reverse</code> of <code>false</code> iterates forward, while <code>reverse</code> of <code>true</code> iterates in reverse.</p> <pre><code>new ref create(\n  head: (N | None val),\n  reverse: Bool val = false)\n: ListValues[A, N] ref^\n</code></pre>"},{"location":"collections-ListValues/#parameters","title":"Parameters","text":"<ul> <li>head: (N | None val)</li> <li>reverse: Bool val = false</li> </ul>"},{"location":"collections-ListValues/#returns","title":"Returns","text":"<ul> <li>ListValues[A, N] ref^</li> </ul>"},{"location":"collections-ListValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Indicates whether there are any values remaining in the iterator.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListValues/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node in the iterator, advancing the iterator by one element.</p> <p>Order of return is determined by <code>reverse</code> argument during creation.</p> <pre><code>fun ref next()\n: N-&gt;A ?\n</code></pre>"},{"location":"collections-ListValues/#returns_2","title":"Returns","text":"<ul> <li>N-&gt;A ?</li> </ul>"},{"location":"collections-Map/","title":"Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]","text":"<p>[Source]</p> <p>This is a map that uses structural equality on the key.</p> <pre><code>type Map[K: (Hashable #read &amp; Equatable[K] #read), V: V] is\n  HashMap[K, V, HashEq[K] val] ref\n</code></pre>"},{"location":"collections-Map/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashEq[K] val] ref</li> </ul>"},{"location":"collections-MapIs/","title":"MapIs[K: K, V: V]","text":"<p>[Source]</p> <p>This is a map that uses identity comparison on the key.</p> <pre><code>type MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref\n</code></pre>"},{"location":"collections-MapIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashIs[K] val] ref</li> </ul>"},{"location":"collections-MapKeys/","title":"MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the keys in a map.</p> <pre><code>class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M-&gt;K] ref\n</code></pre>"},{"location":"collections-MapKeys/#implements","title":"Implements","text":"<ul> <li>Iterator[M-&gt;K] ref</li> </ul>"},{"location":"collections-MapKeys/#constructors","title":"Constructors","text":""},{"location":"collections-MapKeys/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\n  map: M)\n: MapKeys[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapKeys/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapKeys/#returns","title":"Returns","text":"<ul> <li>MapKeys[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapKeys/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapKeys/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys.</p> <pre><code>fun ref next()\n: M-&gt;K ?\n</code></pre>"},{"location":"collections-MapKeys/#returns_2","title":"Returns","text":"<ul> <li>M-&gt;K ?</li> </ul>"},{"location":"collections-MapPairs/","title":"MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the keys and values in a map.</p> <pre><code>class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M-&gt;K , M-&gt;V)] ref\n</code></pre>"},{"location":"collections-MapPairs/#implements","title":"Implements","text":"<ul> <li>Iterator[(M-&gt;K , M-&gt;V)] ref</li> </ul>"},{"location":"collections-MapPairs/#constructors","title":"Constructors","text":""},{"location":"collections-MapPairs/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\n  map: M)\n: MapPairs[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapPairs/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapPairs/#returns","title":"Returns","text":"<ul> <li>MapPairs[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapPairs/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapPairs/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries.</p> <pre><code>fun ref next()\n: (M-&gt;K , M-&gt;V) ?\n</code></pre>"},{"location":"collections-MapPairs/#returns_2","title":"Returns","text":"<ul> <li>(M-&gt;K , M-&gt;V) ?</li> </ul>"},{"location":"collections-MapValues/","title":"MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the values in a map.</p> <pre><code>class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M-&gt;V] ref\n</code></pre>"},{"location":"collections-MapValues/#implements","title":"Implements","text":"<ul> <li>Iterator[M-&gt;V] ref</li> </ul>"},{"location":"collections-MapValues/#constructors","title":"Constructors","text":""},{"location":"collections-MapValues/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\n  map: M)\n: MapValues[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapValues/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapValues/#returns","title":"Returns","text":"<ul> <li>MapValues[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapValues/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values.</p> <pre><code>fun ref next()\n: M-&gt;V ?\n</code></pre>"},{"location":"collections-MapValues/#returns_2","title":"Returns","text":"<ul> <li>M-&gt;V ?</li> </ul>"},{"location":"collections-MaxHeap/","title":"MaxHeap[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type MaxHeap[A: Comparable[A] #read] is\n  BinaryHeap[A, MaxHeapPriority[A] val] ref\n</code></pre></p>"},{"location":"collections-MaxHeap/#type-alias-for","title":"Type Alias For","text":"<ul> <li>BinaryHeap[A, MaxHeapPriority[A] val] ref</li> </ul>"},{"location":"collections-MaxHeapPriority/","title":"MaxHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>primitive val MaxHeapPriority[A: Comparable[A] #read] is\n  _BinaryHeapPriority[A] val\n</code></pre></p>"},{"location":"collections-MaxHeapPriority/#implements","title":"Implements","text":"<ul> <li>_BinaryHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#constructors","title":"Constructors","text":""},{"location":"collections-MaxHeapPriority/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MaxHeapPriority[A] val^\n</code></pre>"},{"location":"collections-MaxHeapPriority/#returns","title":"Returns","text":"<ul> <li>MaxHeapPriority[A] val^</li> </ul>"},{"location":"collections-MaxHeapPriority/#public-functions","title":"Public Functions","text":""},{"location":"collections-MaxHeapPriority/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  x: A,\n  y: A)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters","title":"Parameters","text":"<ul> <li>x: A</li> <li>y: A</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MaxHeapPriority/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: MaxHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters_1","title":"Parameters","text":"<ul> <li>that: MaxHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MaxHeapPriority/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: MaxHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters_2","title":"Parameters","text":"<ul> <li>that: MaxHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeap/","title":"MinHeap[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type MinHeap[A: Comparable[A] #read] is\n  BinaryHeap[A, MinHeapPriority[A] val] ref\n</code></pre></p>"},{"location":"collections-MinHeap/#type-alias-for","title":"Type Alias For","text":"<ul> <li>BinaryHeap[A, MinHeapPriority[A] val] ref</li> </ul>"},{"location":"collections-MinHeapPriority/","title":"MinHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>primitive val MinHeapPriority[A: Comparable[A] #read] is\n  _BinaryHeapPriority[A] val\n</code></pre></p>"},{"location":"collections-MinHeapPriority/#implements","title":"Implements","text":"<ul> <li>_BinaryHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#constructors","title":"Constructors","text":""},{"location":"collections-MinHeapPriority/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MinHeapPriority[A] val^\n</code></pre>"},{"location":"collections-MinHeapPriority/#returns","title":"Returns","text":"<ul> <li>MinHeapPriority[A] val^</li> </ul>"},{"location":"collections-MinHeapPriority/#public-functions","title":"Public Functions","text":""},{"location":"collections-MinHeapPriority/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  x: A,\n  y: A)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters","title":"Parameters","text":"<ul> <li>x: A</li> <li>y: A</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeapPriority/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: MinHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters_1","title":"Parameters","text":"<ul> <li>that: MinHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeapPriority/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: MinHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters_2","title":"Parameters","text":"<ul> <li>that: MinHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/","title":"Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Produces <code>[min, max)</code> with a step of <code>inc</code> for any <code>Number</code> type.</p> <pre><code>// iterating with for-loop\nfor i in Range(0, 10) do\n  env.out.print(i.string())\nend\n\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\n  try\n    handle_u8(range.next()?)\n  end\nend\n</code></pre> <p>Supports <code>min</code> being smaller than <code>max</code> with negative <code>inc</code> but only for signed integer types and floats:</p> <pre><code>var previous = 11\nfor left in Range[I64](10, -5, -1) do\n  if not (left &lt; previous) then\n    error\n  end\n  previous = left\nend\n</code></pre> <p>If <code>inc</code> is nonzero, but cannot produce progress towards <code>max</code> because of its sign, the <code>Range</code> is considered empty and will not produce any iterations. The <code>Range</code> is also empty if either <code>min</code> equals <code>max</code>, independent of the value of <code>inc</code>, or if <code>inc</code> is zero.</p> <pre><code>let empty_range1 = Range(0, 10, -1)\nlet empty_range2 = Range(0, 10, 0)\nlet empty_range3 = Range(10, 10)\nempty_range1.is_empty() == true\nempty_range2.is_empty() == true\nempty_range3.is_empty() == true\n</code></pre> <p>Note that when using unsigned integers, a negative literal wraps around so while <code>Range[ISize](0, 10, -1)</code> is empty as above, <code>Range[USize](0, 10, -1)</code> produces a single value of <code>min</code> or <code>[0]</code> here.</p> <p>When using <code>Range</code> with floating point types (<code>F32</code> and <code>F64</code>) <code>inc</code> steps &lt; 1.0 are possible. If any arguments contains NaN, the <code>Range</code> is considered empty. It is also empty if the lower bound <code>min</code> or the step <code>inc</code> are +Inf or -Inf. However, if only the upper bound <code>max</code> is +Inf or -Inf and the step parameter <code>inc</code> has the same sign, then the <code>Range</code> is considered infinite and will iterate indefinitely.</p> <pre><code>let p_inf: F64 = F64.max_value() + F64.max_value()\nlet n_inf: F64 = -p_inf\nlet nan: F64 = F64(0) / F64(0)\n\nlet infinite_range1 = Range[F64](0, p_inf, 1)\nlet infinite_range2 = Range[F64](0, n_inf, -1_000_000)\ninfinite_range1.is_infinite() == true\ninfinite_range2.is_infinite() == true\n\nfor i in Range[F64](0.5, 100, nan) do\n  // will not be executed as `inc` is nan\nend\nfor i in Range[F64](0.5, 100, p_inf) do\n  // will not be executed as `inc` is +Inf\nend\n</code></pre> <pre><code>class ref Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n</code></pre>"},{"location":"collections-Range/#implements","title":"Implements","text":"<ul> <li>Iterator[A] ref</li> </ul>"},{"location":"collections-Range/#constructors","title":"Constructors","text":""},{"location":"collections-Range/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  min: A,\n  max: A,\n  inc: A = 1)\n: Range[A] ref^\n</code></pre>"},{"location":"collections-Range/#parameters","title":"Parameters","text":"<ul> <li>min: A</li> <li>max: A</li> <li>inc: A = 1</li> </ul>"},{"location":"collections-Range/#returns","title":"Returns","text":"<ul> <li>Range[A] ref^</li> </ul>"},{"location":"collections-Range/#public-functions","title":"Public Functions","text":""},{"location":"collections-Range/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: A ?\n</code></pre>"},{"location":"collections-Range/#returns_2","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"collections-Range/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: None val\n</code></pre>"},{"location":"collections-Range/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Range/#is_infinite","title":"is_infinite","text":"<p>[Source]</p> <pre><code>fun box is_infinite()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/#is_empty","title":"is_empty","text":"<p>[Source]</p> <pre><code>fun box is_empty()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Reverse/","title":"Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Produces a decreasing range [max, min] with step <code>dec</code>, for any <code>Number</code> type. (i.e. the reverse of <code>Range</code>)</p> <p>Example program: </p> <p><pre><code>use \"collections\"\nactor Main\n  new create(env: Env) =&gt;\n    for e in Reverse(10, 2, 2) do\n      env.out.print(e.string())\n    end \n</code></pre> Which outputs:  <pre><code>10\n8\n6\n4\n2\n</code></pre></p> <p>If <code>dec</code> is 0, produces an infinite series of <code>max</code>.</p> <p>If <code>dec</code> is negative, produces a range with <code>max</code> as the only value.</p> <pre><code>class ref Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n</code></pre>"},{"location":"collections-Reverse/#implements","title":"Implements","text":"<ul> <li>Iterator[A] ref</li> </ul>"},{"location":"collections-Reverse/#constructors","title":"Constructors","text":""},{"location":"collections-Reverse/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  max: A,\n  min: A,\n  dec: A = 1)\n: Reverse[A] ref^\n</code></pre>"},{"location":"collections-Reverse/#parameters","title":"Parameters","text":"<ul> <li>max: A</li> <li>min: A</li> <li>dec: A = 1</li> </ul>"},{"location":"collections-Reverse/#returns","title":"Returns","text":"<ul> <li>Reverse[A] ref^</li> </ul>"},{"location":"collections-Reverse/#public-functions","title":"Public Functions","text":""},{"location":"collections-Reverse/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-Reverse/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Reverse/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: A\n</code></pre>"},{"location":"collections-Reverse/#returns_2","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"collections-Reverse/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: None val\n</code></pre>"},{"location":"collections-Reverse/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-RingBuffer/","title":"RingBuffer[A: A]","text":"<p>[Source]</p> <p>A ring buffer.</p> <pre><code>class ref RingBuffer[A: A]\n</code></pre>"},{"location":"collections-RingBuffer/#constructors","title":"Constructors","text":""},{"location":"collections-RingBuffer/#create","title":"create","text":"<p>[Source]</p> <p>Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2.</p> <pre><code>new ref create(\n  len: USize val)\n: RingBuffer[A] ref^\n</code></pre>"},{"location":"collections-RingBuffer/#parameters","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-RingBuffer/#returns","title":"Returns","text":"<ul> <li>RingBuffer[A] ref^</li> </ul>"},{"location":"collections-RingBuffer/#public-functions","title":"Public Functions","text":""},{"location":"collections-RingBuffer/#head","title":"head","text":"<p>[Source]</p> <p>The first read that will succeed. If nothing has been written to the ring, this will raise an error.</p> <pre><code>fun box head()\n: USize val ?\n</code></pre>"},{"location":"collections-RingBuffer/#returns_1","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-RingBuffer/#size","title":"size","text":"<p>[Source]</p> <p>The number of elements that have been added to the ring.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-RingBuffer/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the ring.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-RingBuffer/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error.</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-RingBuffer/#parameters_1","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-RingBuffer/#returns_4","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-RingBuffer/#push","title":"push","text":"<p>[Source]</p> <p>Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped.</p> <pre><code>fun ref push(\n  value: A)\n: Bool val\n</code></pre>"},{"location":"collections-RingBuffer/#parameters_2","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-RingBuffer/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-RingBuffer/#clear","title":"clear","text":"<p>[Source]</p> <p>Clear the queue.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Set/","title":"Set[A: (Hashable #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>type Set[A: (Hashable #read &amp; Equatable[A] #read)] is\n  HashSet[A, HashEq[A] val] ref\n</code></pre></p>"},{"location":"collections-Set/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashEq[A] val] ref</li> </ul>"},{"location":"collections-SetIs/","title":"SetIs[A: A]","text":"<p>[Source] <pre><code>type SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref\n</code></pre></p>"},{"location":"collections-SetIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashIs[A!] val] ref</li> </ul>"},{"location":"collections-SetValues/","title":"SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]","text":"<p>[Source]</p> <p>An iterator over the values in a set.</p> <pre><code>class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S-&gt;A] ref\n</code></pre>"},{"location":"collections-SetValues/#implements","title":"Implements","text":"<ul> <li>Iterator[S-&gt;A] ref</li> </ul>"},{"location":"collections-SetValues/#constructors","title":"Constructors","text":""},{"location":"collections-SetValues/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given set.</p> <pre><code>new ref create(\n  set: S)\n: SetValues[A, H, S] ref^\n</code></pre>"},{"location":"collections-SetValues/#parameters","title":"Parameters","text":"<ul> <li>set: S</li> </ul>"},{"location":"collections-SetValues/#returns","title":"Returns","text":"<ul> <li>SetValues[A, H, S] ref^</li> </ul>"},{"location":"collections-SetValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-SetValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the set.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-SetValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-SetValues/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values.</p> <pre><code>fun ref next()\n: S-&gt;A ?\n</code></pre>"},{"location":"collections-SetValues/#returns_2","title":"Returns","text":"<ul> <li>S-&gt;A ?</li> </ul>"},{"location":"collections-Sort/","title":"Sort[A: Seq[B] ref, B: Comparable[B] #read]","text":"<p>[Source]</p> <p>Implementation of dual-pivot quicksort.  It operates in-place on the provided Seq, using  a small amount of additional memory. The nature of the element-realation is expressed via  the supplied comparator.</p> <p>(The following is paraphrased from Wikipedia.)</p> <p>Quicksort is a common implementation of a sort algorithm which can sort items of any type  for which a \"less-than\" relation (formally, a total order) is defined. </p> <p>On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case,  it makes O(n2) comparisons, though this behavior is rare.  Multi-pivot implementations  (of which dual-pivot is one) make efficient use of modern processor caches.</p>"},{"location":"collections-Sort/#example-program","title":"Example program","text":"<p>The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"),  and sorts it in place alphabetically using the default String Comparator.</p> <p>It outputs:</p> <p>first second third</p> <pre><code>use \"collections\"\n\nactor Main \n  new create(env:Env) =&gt; \n    let array = [ \"third\"; \"second\"; \"first\" ]\n    let sorted_array = Sort[Array[String], String](array)\n    for e in sorted_array.values() do\n      env.out.print(e) // prints \"first \\n second \\n third\"\n    end\n</code></pre> <pre><code>primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]\n</code></pre>"},{"location":"collections-Sort/#constructors","title":"Constructors","text":""},{"location":"collections-Sort/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Sort[A, B] val^\n</code></pre>"},{"location":"collections-Sort/#returns","title":"Returns","text":"<ul> <li>Sort[A, B] val^</li> </ul>"},{"location":"collections-Sort/#public-functions","title":"Public Functions","text":""},{"location":"collections-Sort/#apply","title":"apply","text":"<p>[Source]</p> <p>Sort the given seq.</p> <pre><code>fun box apply(\n  a: A)\n: A^\n</code></pre>"},{"location":"collections-Sort/#parameters","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-Sort/#returns_1","title":"Returns","text":"<ul> <li>A^</li> </ul>"},{"location":"collections-Sort/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Sort[A, B] val)\n: Bool val\n</code></pre>"},{"location":"collections-Sort/#parameters_1","title":"Parameters","text":"<ul> <li>that: Sort[A, B] val</li> </ul>"},{"location":"collections-Sort/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Sort/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Sort[A, B] val)\n: Bool val\n</code></pre>"},{"location":"collections-Sort/#parameters_2","title":"Parameters","text":"<ul> <li>that: Sort[A, B] val</li> </ul>"},{"location":"collections-Sort/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent--index/","title":"Persistent Collections Package","text":"<p><code>List</code> - A persistent list with functional transformations.</p> <p><code>Map</code> - A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju.</p> <p><code>Set</code> - A persistent set implemented as a persistent map of an alias of a type to itself.</p> <p><code>Vec</code> - A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell.</p>"},{"location":"collections-persistent--index/#public-types","title":"Public Types","text":"<ul> <li>class Cons</li> <li>class HashMap</li> <li>class HashSet</li> <li>type List</li> <li>primitive Lists</li> <li>type Map</li> <li>type MapIs</li> <li>class MapKeys</li> <li>class MapPairs</li> <li>class MapValues</li> <li>primitive Nil</li> <li>type Set</li> <li>type SetIs</li> <li>class Vec</li> <li>class VecKeys</li> <li>class VecPairs</li> <li>class VecValues</li> </ul>"},{"location":"collections-persistent-Cons/","title":"Cons[A: A]","text":"<p>[Source]</p> <p>A list with a head and a tail, where the tail can be empty.</p> <pre><code>class val Cons[A: A] is\n  ReadSeq[val-&gt;A] box\n</code></pre>"},{"location":"collections-persistent-Cons/#implements","title":"Implements","text":"<ul> <li>ReadSeq[val-&gt;A] box</li> </ul>"},{"location":"collections-persistent-Cons/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-Cons/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  a: val-&gt;A,\n  t: (Cons[A] val | Nil[A] val))\n: Cons[A] val^\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters","title":"Parameters","text":"<ul> <li>a: val-&gt;A</li> <li>t: (Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#returns","title":"Returns","text":"<ul> <li>Cons[A] val^</li> </ul>"},{"location":"collections-persistent-Cons/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-Cons/#size","title":"size","text":"<p>[Source]</p> <p>Returns the size of the list.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-Cons/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the list. Errors if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_1","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-persistent-Cons/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-Cons/#values","title":"values","text":"<p>[Source]</p> <p>Returns an iterator over the elements of the list.</p> <pre><code>fun box values()\n: Iterator[val-&gt;A] ref^\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_3","title":"Returns","text":"<ul> <li>Iterator[val-&gt;A] ref^</li> </ul>"},{"location":"collections-persistent-Cons/#is_empty","title":"is_empty","text":"<p>[Source]</p> <p>Returns a Bool indicating if the list is empty.</p> <pre><code>fun box is_empty()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Cons/#is_non_empty","title":"is_non_empty","text":"<p>[Source]</p> <p>Returns a Bool indicating if the list is non-empty.</p> <pre><code>fun box is_non_empty()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Cons/#head","title":"head","text":"<p>[Source]</p> <p>Returns the head of the list.</p> <pre><code>fun box head()\n: val-&gt;A\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_6","title":"Returns","text":"<ul> <li>val-&gt;A</li> </ul>"},{"location":"collections-persistent-Cons/#tail","title":"tail","text":"<p>[Source]</p> <p>Returns the tail of the list.</p> <pre><code>fun box tail()\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_7","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Builds a new list by reversing the elements in the list.</p> <pre><code>fun val reverse()\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#returns_8","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#prepend","title":"prepend","text":"<p>[Source]</p> <p>Builds a new list with an element added to the front of this list.</p> <pre><code>fun val prepend(\n  a: val-&gt;A!)\n: Cons[A] val\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_2","title":"Parameters","text":"<ul> <li>a: val-&gt;A!</li> </ul>"},{"location":"collections-persistent-Cons/#returns_9","title":"Returns","text":"<ul> <li>Cons[A] val</li> </ul>"},{"location":"collections-persistent-Cons/#concat","title":"concat","text":"<p>[Source]</p> <p>Builds a new list that is the concatenation of this list and the provided list.</p> <pre><code>fun val concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_3","title":"Parameters","text":"<ul> <li>l: (Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#returns_10","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#mapb-b","title":"map[B: B]","text":"<p>[Source]</p> <p>Builds a new list by applying a function to every member of the list.</p> <pre><code>fun val map[B: B](\n  f: {(val-&gt;A): val-&gt;B}[A, B] box)\n: (Cons[B] val | Nil[B] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_4","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): val-&gt;B}[A, B] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_11","title":"Returns","text":"<ul> <li>(Cons[B] val | Nil[B] val)</li> </ul>"},{"location":"collections-persistent-Cons/#flat_mapb-b","title":"flat_map[B: B]","text":"<p>[Source]</p> <p>Builds a new list by applying a function to every member of the list and using the elements of the resulting lists.</p> <pre><code>fun val flat_map[B: B](\n  f: {(val-&gt;A): List[B]}[A, B] box)\n: (Cons[B] val | Nil[B] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_5","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): List[B]}[A, B] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_12","title":"Returns","text":"<ul> <li>(Cons[B] val | Nil[B] val)</li> </ul>"},{"location":"collections-persistent-Cons/#for_each","title":"for_each","text":"<p>[Source]</p> <p>Applies the supplied function to every element of the list in order.</p> <pre><code>fun val for_each(\n  f: {(val-&gt;A)}[A] box)\n: None val\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_6","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A)}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-persistent-Cons/#filter","title":"filter","text":"<p>[Source]</p> <p>Builds a new list with those elements that satisfy a provided predicate.</p> <pre><code>fun val filter(\n  f: {(val-&gt;A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_7","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_14","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#foldb-b","title":"fold[B: B]","text":"<p>[Source]</p> <p>Folds the elements of the list using the supplied function.</p> <pre><code>fun val fold[B: B](\n  f: {(B, val-&gt;A): B^}[A, B] box,\n  acc: B)\n: B\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_8","title":"Parameters","text":"<ul> <li>f: {(B, val-&gt;A): B^}[A, B] box</li> <li>acc: B</li> </ul>"},{"location":"collections-persistent-Cons/#returns_15","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-persistent-Cons/#every","title":"every","text":"<p>[Source]</p> <p>Returns true if every element satisfies the provided predicate, false otherwise.</p> <pre><code>fun val every(\n  f: {(val-&gt;A): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_9","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Cons/#exists","title":"exists","text":"<p>[Source]</p> <p>Returns true if at least one element satisfies the provided predicate, false otherwise.</p> <pre><code>fun val exists(\n  f: {(val-&gt;A): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_10","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Cons/#partition","title":"partition","text":"<p>[Source]</p> <p>Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not.</p> <pre><code>fun val partition(\n  f: {(val-&gt;A): Bool}[A] box)\n: ((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_11","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_18","title":"Returns","text":"<ul> <li>((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))</li> </ul>"},{"location":"collections-persistent-Cons/#drop","title":"drop","text":"<p>[Source]</p> <p>Builds a list by dropping the first n elements.</p> <pre><code>fun val drop(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_12","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Cons/#returns_19","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#drop_while","title":"drop_while","text":"<p>[Source]</p> <p>Builds a list by dropping elements from the front of the list until one fails to satisfy the provided predicate.</p> <pre><code>fun val drop_while(\n  f: {(val-&gt;A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_13","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_20","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#take","title":"take","text":"<p>[Source]</p> <p>Builds a list of the first n elements.</p> <pre><code>fun val take(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_14","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Cons/#returns_21","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Cons/#take_while","title":"take_while","text":"<p>[Source]</p> <p>Builds a list of elements satisfying the provided predicate until one does not.</p> <pre><code>fun val take_while(\n  f: {(val-&gt;A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Cons/#parameters_15","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Cons/#returns_22","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-HashMap/","title":"HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]","text":"<p>[Source]</p> <p>A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju</p>"},{"location":"collections-persistent-HashMap/#usage","title":"Usage","text":"<pre><code>use \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =&gt;\n    try\n      let m1 = Map[String, U32] // {}\n      // Update returns a new map with the provided key set\n      // to the provided value. The old map is unchanged.\n      let m2 = m1(\"a\") = 5 // {a: 5}\n      let m3 = m2(\"b\") = 10 // {a: 5, b: 10}\n      let m4 = m3.remove(\"a\")? // {b: 10}\n      // You can create a new map from key value pairs.\n      let m5 = Map[String, U32].concat([(\"a\", 2); (\"b\", 3)].values()) // {a: 2, b: 3}\n    end\n</code></pre> <pre><code>class val HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]\n</code></pre>"},{"location":"collections-persistent-HashMap/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-HashMap/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashMap[K, V, H] val^\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val^</li> </ul>"},{"location":"collections-persistent-HashMap/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-HashMap/#apply","title":"apply","text":"<p>[Source]</p> <p>Attempt to get the value corresponding to k.</p> <pre><code>fun val apply(\n  k: K)\n: val-&gt;V ?\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters","title":"Parameters","text":"<ul> <li>k: K</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_1","title":"Returns","text":"<ul> <li>val-&gt;V ?</li> </ul>"},{"location":"collections-persistent-HashMap/#size","title":"size","text":"<p>[Source]</p> <p>Return the amount of key-value pairs in the Map.</p> <pre><code>fun val size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-HashMap/#update","title":"update","text":"<p>[Source]</p> <p>Update the value associated with the provided key.</p> <pre><code>fun val update(\n  key: K,\n  value: val-&gt;V)\n: HashMap[K, V, H] val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_1","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: val-&gt;V</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_3","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-HashMap/#remove","title":"remove","text":"<p>[Source]</p> <p>Try to remove the provided key from the Map.</p> <pre><code>fun val remove(\n  k: K)\n: HashMap[K, V, H] val ?\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_2","title":"Parameters","text":"<ul> <li>k: K</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_4","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val ?</li> </ul>"},{"location":"collections-persistent-HashMap/#get_or_else","title":"get_or_else","text":"<p>[Source]</p> <p>Get the value associated with provided key if present. Otherwise, return the provided alternate value.</p> <pre><code>fun val get_or_else(\n  k: K,\n  alt: val-&gt;V)\n: val-&gt;V\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_3","title":"Parameters","text":"<ul> <li>k: K</li> <li>alt: val-&gt;V</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_5","title":"Returns","text":"<ul> <li>val-&gt;V</li> </ul>"},{"location":"collections-persistent-HashMap/#contains","title":"contains","text":"<p>[Source]</p> <p>Check whether the node contains the provided key.</p> <pre><code>fun val contains(\n  k: K)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_4","title":"Parameters","text":"<ul> <li>k: K</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashMap/#concat","title":"concat","text":"<p>[Source]</p> <p>Add the K, V pairs from the given iterator to the map.</p> <pre><code>fun val concat(\n  iter: Iterator[(val-&gt;K , val-&gt;V)] ref)\n: HashMap[K, V, H] val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_5","title":"Parameters","text":"<ul> <li>iter: Iterator[(val-&gt;K , val-&gt;V)] ref</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_7","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-HashMap/#add","title":"add","text":"<p>[Source]</p> <p>Return this Map with the given (key, value) mapping.</p> <pre><code>fun val add(\n  key: K,\n  value: val-&gt;V)\n: HashMap[K, V, H] val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_6","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: val-&gt;V</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_8","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-HashMap/#sub","title":"sub","text":"<p>[Source]</p> <p>Return this Map without the given key.</p> <pre><code>fun val sub(\n  key: K)\n: HashMap[K, V, H] val\n</code></pre>"},{"location":"collections-persistent-HashMap/#parameters_7","title":"Parameters","text":"<ul> <li>key: K</li> </ul>"},{"location":"collections-persistent-HashMap/#returns_9","title":"Returns","text":"<ul> <li>HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-HashMap/#keys","title":"keys","text":"<p>[Source]</p> <pre><code>fun val keys()\n: MapKeys[K, V, H] ref\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns_10","title":"Returns","text":"<ul> <li>MapKeys[K, V, H] ref</li> </ul>"},{"location":"collections-persistent-HashMap/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun val values()\n: MapValues[K, V, H] ref\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns_11","title":"Returns","text":"<ul> <li>MapValues[K, V, H] ref</li> </ul>"},{"location":"collections-persistent-HashMap/#pairs","title":"pairs","text":"<p>[Source]</p> <pre><code>fun val pairs()\n: MapPairs[K, V, H] ref\n</code></pre>"},{"location":"collections-persistent-HashMap/#returns_12","title":"Returns","text":"<ul> <li>MapPairs[K, V, H] ref</li> </ul>"},{"location":"collections-persistent-HashSet/","title":"HashSet[A: Any #share, H: HashFunction[A] val]","text":"<p>[Source]</p> <p>A set, built on top of persistent Map. This is implemented as map of an alias of a type to itself.</p> <pre><code>class val HashSet[A: Any #share, H: HashFunction[A] val] is\n  Comparable[HashSet[A, H] box] ref\n</code></pre>"},{"location":"collections-persistent-HashSet/#implements","title":"Implements","text":"<ul> <li>Comparable[HashSet[A, H] box] ref</li> </ul>"},{"location":"collections-persistent-HashSet/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-HashSet/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashSet[A, H] val^\n</code></pre>"},{"location":"collections-persistent-HashSet/#returns","title":"Returns","text":"<ul> <li>HashSet[A, H] val^</li> </ul>"},{"location":"collections-persistent-HashSet/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-HashSet/#size","title":"size","text":"<p>[Source]</p> <p>Return the number of elements in the set.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-HashSet/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-HashSet/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the value if it is in the set, otherwise raise an error.</p> <pre><code>fun box apply(\n  value: val-&gt;A)\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-HashSet/#contains","title":"contains","text":"<p>[Source]</p> <p>Check whether the set contains the value.</p> <pre><code>fun box contains(\n  value: val-&gt;A)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_1","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#add","title":"add","text":"<p>[Source]</p> <p>Return a set with the value added.</p> <pre><code>fun val add(\n  value: val-&gt;A)\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_2","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_4","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#sub","title":"sub","text":"<p>[Source]</p> <p>Return a set with the value removed.</p> <pre><code>fun val sub(\n  value: val-&gt;A)\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_3","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_5","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#op_or","title":"op_or","text":"<p>[Source]</p> <p>Return a set with the elements of both this and that.</p> <pre><code>fun val op_or(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_4","title":"Parameters","text":"<ul> <li>that: (HashSet[A, H] val | Iterator[A] ref)</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_6","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#op_and","title":"op_and","text":"<p>[Source]</p> <p>Return a set with the elements that are in both this and that.</p> <pre><code>fun val op_and(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_5","title":"Parameters","text":"<ul> <li>that: (HashSet[A, H] val | Iterator[A] ref)</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_7","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#op_xor","title":"op_xor","text":"<p>[Source]</p> <p>Return a set with elements that are in either this or that, but not both.</p> <pre><code>fun val op_xor(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_6","title":"Parameters","text":"<ul> <li>that: (HashSet[A, H] val | Iterator[A] ref)</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_8","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#without","title":"without","text":"<p>[Source]</p> <p>Return a set with the elements of this that are not in that.</p> <pre><code>fun val without(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_7","title":"Parameters","text":"<ul> <li>that: (HashSet[A, H] val | Iterator[A] ref)</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_9","title":"Returns","text":"<ul> <li>HashSet[A, H] val</li> </ul>"},{"location":"collections-persistent-HashSet/#eq","title":"eq","text":"<p>[Source]</p> <p>Return true if this and that contain the same elements.</p> <pre><code>fun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_8","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#lt","title":"lt","text":"<p>[Source]</p> <p>Return true if every element in this is also in that, and this has fewer elements than that.</p> <pre><code>fun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_9","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#le","title":"le","text":"<p>[Source]</p> <p>Return true if every element in this is also in that.</p> <pre><code>fun box le(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_10","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#gt","title":"gt","text":"<p>[Source]</p> <p>Return true if every element in that is also in this, and this has more elements than that.</p> <pre><code>fun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_11","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#ge","title":"ge","text":"<p>[Source]</p> <p>Return true if every element in that is also in this.</p> <pre><code>fun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_12","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-HashSet/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values in the set.</p> <pre><code>fun box values()\n: Iterator[A] ref^\n</code></pre>"},{"location":"collections-persistent-HashSet/#returns_15","title":"Returns","text":"<ul> <li>Iterator[A] ref^</li> </ul>"},{"location":"collections-persistent-HashSet/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_13","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_16","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections-persistent-HashSet/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-HashSet/#parameters_14","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-persistent-HashSet/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-List/","title":"List[A: A]","text":"<p>[Source]</p> <p>A persistent list with functional transformations.</p>"},{"location":"collections-persistent-List/#usage","title":"Usage","text":"<pre><code>use \"collections/persistent\"\n\nactor Main\n  new create(env: Env) =&gt;\n    try\n      let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8)\n\n      let empty = Lists[U32].empty() // List()\n\n      // prepend() returns a new List, leaving the\n      // old list unchanged\n      let l2 = empty.prepend(3) // List(3)\n      let l3 = l2.prepend(2) // List(2, 3)\n      let l4 = l3.prepend(1) // List(1, 2, 3)\n      let l4_head = l4.head() // 1\n      let l4_tail = l4.tail() // List(2, 3)\n\n      l4_head == 1\n      Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))?\n      Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))?\n\n      let doubled = l4.map[U32]({(x) =&gt; x * 2 })\n\n      Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))?\n    end\n</code></pre> <pre><code>type List[A: A] is\n  (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-List/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/","title":"Lists[A: A]","text":"<p>[Source]</p> <p>A primitive containing helper functions for constructing and testing Lists.</p> <pre><code>primitive val Lists[A: A]\n</code></pre>"},{"location":"collections-persistent-Lists/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-Lists/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Lists[A] val^\n</code></pre>"},{"location":"collections-persistent-Lists/#returns","title":"Returns","text":"<ul> <li>Lists[A] val^</li> </ul>"},{"location":"collections-persistent-Lists/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-Lists/#empty","title":"empty","text":"<p>[Source]</p> <p>Returns an empty list.</p> <pre><code>fun box empty()\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Lists/#returns_1","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#cons","title":"cons","text":"<p>[Source]</p> <p>Returns a list that has h as a head and t as a tail.</p> <pre><code>fun box cons(\n  h: val-&gt;A,\n  t: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters","title":"Parameters","text":"<ul> <li>h: val-&gt;A</li> <li>t: (Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#returns_2","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#apply","title":"apply","text":"<p>[Source]</p> <p>Builds a new list from an Array</p> <pre><code>fun box apply(\n  arr: Array[val-&gt;A] ref)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters_1","title":"Parameters","text":"<ul> <li>arr: Array[val-&gt;A] ref</li> </ul>"},{"location":"collections-persistent-Lists/#returns_3","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#from","title":"from","text":"<p>[Source]</p> <p>Builds a new list from an iterator</p> <pre><code>fun box from(\n  iter: Iterator[val-&gt;A] ref)\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters_2","title":"Parameters","text":"<ul> <li>iter: Iterator[val-&gt;A] ref</li> </ul>"},{"location":"collections-persistent-Lists/#returns_4","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Lists/#eqoptional-t-equatablet-val","title":"eq[optional T: Equatable[T] val]","text":"<p>[Source]</p> <p>Checks whether two lists are equal.</p> <pre><code>fun box eq[optional T: Equatable[T] val](\n  l1: (Cons[T] val | Nil[T] val),\n  l2: (Cons[T] val | Nil[T] val))\n: Bool val ?\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters_3","title":"Parameters","text":"<ul> <li>l1: (Cons[T] val | Nil[T] val)</li> <li>l2: (Cons[T] val | Nil[T] val)</li> </ul>"},{"location":"collections-persistent-Lists/#returns_5","title":"Returns","text":"<ul> <li>Bool val ?</li> </ul>"},{"location":"collections-persistent-Lists/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Lists[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Lists/#parameters_4","title":"Parameters","text":"<ul> <li>that: Lists[A] val</li> </ul>"},{"location":"collections-persistent-Lists/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Map/","title":"Map[K: (Hashable val &amp; Equatable[K]), V: Any #share]","text":"<p>[Source]</p> <p>A map that uses structural equality on the key.</p> <pre><code>type Map[K: (Hashable val &amp; Equatable[K]), V: Any #share] is\n  HashMap[K, V, HashEq[K] val] val\n</code></pre>"},{"location":"collections-persistent-Map/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashEq[K] val] val</li> </ul>"},{"location":"collections-persistent-MapIs/","title":"MapIs[K: Any #share, V: Any #share]","text":"<p>[Source]</p> <p>A map that uses identity comparison on the key.</p> <pre><code>type MapIs[K: Any #share, V: Any #share] is\n  HashMap[K, V, HashIs[K] val] val\n</code></pre>"},{"location":"collections-persistent-MapIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashIs[K] val] val</li> </ul>"},{"location":"collections-persistent-MapKeys/","title":"MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]","text":"<p>[Source] <pre><code>class ref MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]\n</code></pre></p>"},{"location":"collections-persistent-MapKeys/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-MapKeys/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  m: HashMap[K, V, H] val)\n: MapKeys[K, V, H] ref^\n</code></pre>"},{"location":"collections-persistent-MapKeys/#parameters","title":"Parameters","text":"<ul> <li>m: HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-MapKeys/#returns","title":"Returns","text":"<ul> <li>MapKeys[K, V, H] ref^</li> </ul>"},{"location":"collections-persistent-MapKeys/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-MapKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-MapKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-MapKeys/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: K ?\n</code></pre>"},{"location":"collections-persistent-MapKeys/#returns_2","title":"Returns","text":"<ul> <li>K ?</li> </ul>"},{"location":"collections-persistent-MapPairs/","title":"MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]","text":"<p>[Source] <pre><code>class ref MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]\n</code></pre></p>"},{"location":"collections-persistent-MapPairs/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-MapPairs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  m: HashMap[K, V, H] val)\n: MapPairs[K, V, H] ref^\n</code></pre>"},{"location":"collections-persistent-MapPairs/#parameters","title":"Parameters","text":"<ul> <li>m: HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-MapPairs/#returns","title":"Returns","text":"<ul> <li>MapPairs[K, V, H] ref^</li> </ul>"},{"location":"collections-persistent-MapPairs/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-MapPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-MapPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-MapPairs/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: (K , V) ?\n</code></pre>"},{"location":"collections-persistent-MapPairs/#returns_2","title":"Returns","text":"<ul> <li>(K , V) ?</li> </ul>"},{"location":"collections-persistent-MapValues/","title":"MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]","text":"<p>[Source] <pre><code>class ref MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]\n</code></pre></p>"},{"location":"collections-persistent-MapValues/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-MapValues/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  m: HashMap[K, V, H] val)\n: MapValues[K, V, H] ref^\n</code></pre>"},{"location":"collections-persistent-MapValues/#parameters","title":"Parameters","text":"<ul> <li>m: HashMap[K, V, H] val</li> </ul>"},{"location":"collections-persistent-MapValues/#returns","title":"Returns","text":"<ul> <li>MapValues[K, V, H] ref^</li> </ul>"},{"location":"collections-persistent-MapValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-MapValues/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-MapValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-MapValues/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: val-&gt;V ?\n</code></pre>"},{"location":"collections-persistent-MapValues/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;V ?</li> </ul>"},{"location":"collections-persistent-Nil/","title":"Nil[A: A]","text":"<p>[Source]</p> <p>The empty list of As.</p> <pre><code>primitive val Nil[A: A] is\n  ReadSeq[val-&gt;A] box\n</code></pre>"},{"location":"collections-persistent-Nil/#implements","title":"Implements","text":"<ul> <li>ReadSeq[val-&gt;A] box</li> </ul>"},{"location":"collections-persistent-Nil/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-Nil/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Nil[A] val^\n</code></pre>"},{"location":"collections-persistent-Nil/#returns","title":"Returns","text":"<ul> <li>Nil[A] val^</li> </ul>"},{"location":"collections-persistent-Nil/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-Nil/#size","title":"size","text":"<p>[Source]</p> <p>Returns the size of the list.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-Nil/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the sequence. For the empty list this call will always error because any index will be out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-Nil/#values","title":"values","text":"<p>[Source]</p> <p>Returns an empty iterator over the elements of the empty list.</p> <pre><code>fun box values()\n: Iterator[val-&gt;A] ref^\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_3","title":"Returns","text":"<ul> <li>Iterator[val-&gt;A] ref^</li> </ul>"},{"location":"collections-persistent-Nil/#is_empty","title":"is_empty","text":"<p>[Source]</p> <p>Returns a Bool indicating if the list is empty.</p> <pre><code>fun box is_empty()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#is_non_empty","title":"is_non_empty","text":"<p>[Source]</p> <p>Returns a Bool indicating if the list is non-empty.</p> <pre><code>fun box is_non_empty()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#head","title":"head","text":"<p>[Source]</p> <p>Returns an error, since Nil has no head.</p> <pre><code>fun box head()\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_6","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-Nil/#tail","title":"tail","text":"<p>[Source]</p> <p>Returns an error, since Nil has no tail.</p> <pre><code>fun box tail()\n: (Cons[A] val | Nil[A] val) ?\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_7","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val) ?</li> </ul>"},{"location":"collections-persistent-Nil/#reverse","title":"reverse","text":"<p>[Source]</p> <p>The reverse of the empty list is the empty list.</p> <pre><code>fun box reverse()\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#returns_8","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#prepend","title":"prepend","text":"<p>[Source]</p> <p>Builds a new list with an element added to the front of this list.</p> <pre><code>fun box prepend(\n  a: val-&gt;A!)\n: Cons[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_1","title":"Parameters","text":"<ul> <li>a: val-&gt;A!</li> </ul>"},{"location":"collections-persistent-Nil/#returns_9","title":"Returns","text":"<ul> <li>Cons[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#concat","title":"concat","text":"<p>[Source]</p> <p>The concatenation of any list l with the empty list is l.</p> <pre><code>fun box concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_2","title":"Parameters","text":"<ul> <li>l: (Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Nil/#returns_10","title":"Returns","text":"<ul> <li>(Cons[A] val | Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Nil/#mapb-b","title":"map[B: B]","text":"<p>[Source]</p> <p>Mapping a function from A to B over the empty list yields the empty list of Bs.</p> <pre><code>fun box map[B: B](\n  f: {(val-&gt;A): val-&gt;B}[A, B] box)\n: Nil[B] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_3","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): val-&gt;B}[A, B] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_11","title":"Returns","text":"<ul> <li>Nil[B] val</li> </ul>"},{"location":"collections-persistent-Nil/#flat_mapb-b","title":"flat_map[B: B]","text":"<p>[Source]</p> <p>Flatmapping a function from A to B over the empty list yields the empty list of Bs.</p> <pre><code>fun box flat_map[B: B](\n  f: {(val-&gt;A): List[B]}[A, B] box)\n: Nil[B] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_4","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): List[B]}[A, B] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_12","title":"Returns","text":"<ul> <li>Nil[B] val</li> </ul>"},{"location":"collections-persistent-Nil/#for_each","title":"for_each","text":"<p>[Source]</p> <p>Applying a function to every member of the empty list is a no-op.</p> <pre><code>fun box for_each(\n  f: {(val-&gt;A)}[A] box)\n: None val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_5","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A)}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-persistent-Nil/#filter","title":"filter","text":"<p>[Source]</p> <p>Filtering the empty list yields the empty list.</p> <pre><code>fun box filter(\n  f: {(val-&gt;A): Bool}[A] box)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_6","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_14","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#foldb-b","title":"fold[B: B]","text":"<p>[Source]</p> <p>Folding over the empty list yields the initial accumulator.</p> <pre><code>fun box fold[B: B](\n  f: {(B, val-&gt;A): B^}[A, B] box,\n  acc: B)\n: B\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_7","title":"Parameters","text":"<ul> <li>f: {(B, val-&gt;A): B^}[A, B] box</li> <li>acc: B</li> </ul>"},{"location":"collections-persistent-Nil/#returns_15","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-persistent-Nil/#every","title":"every","text":"<p>[Source]</p> <p>Any predicate is true of every member of the empty list.</p> <pre><code>fun box every(\n  f: {(val-&gt;A): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_8","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#exists","title":"exists","text":"<p>[Source]</p> <p>For any predicate, there is no element that satisfies it in the empty list.</p> <pre><code>fun box exists(\n  f: {(val-&gt;A): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_9","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#partition","title":"partition","text":"<p>[Source]</p> <p>The only partition of the empty list is two empty lists.</p> <pre><code>fun box partition(\n  f: {(val-&gt;A): Bool}[A] box)\n: (Nil[A] val , Nil[A] val)\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_10","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_18","title":"Returns","text":"<ul> <li>(Nil[A] val , Nil[A] val)</li> </ul>"},{"location":"collections-persistent-Nil/#drop","title":"drop","text":"<p>[Source]</p> <p>There are no elements to drop from the empty list.</p> <pre><code>fun box drop(\n  n: USize val)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_11","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_19","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#drop_while","title":"drop_while","text":"<p>[Source]</p> <p>There are no elements to drop from the empty list.</p> <pre><code>fun box drop_while(\n  f: {(val-&gt;A): Bool}[A] box)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_12","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_20","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#take","title":"take","text":"<p>[Source]</p> <p>There are no elements to take from the empty list.</p> <pre><code>fun box take(\n  n: USize val)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_13","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_21","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#take_while","title":"take_while","text":"<p>[Source]</p> <p>There are no elements to take from the empty list.</p> <pre><code>fun box take_while(\n  f: {(val-&gt;A): Bool}[A] box)\n: Nil[A] val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_14","title":"Parameters","text":"<ul> <li>f: {(val-&gt;A): Bool}[A] box</li> </ul>"},{"location":"collections-persistent-Nil/#returns_22","title":"Returns","text":"<ul> <li>Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#containsoptional-t-a-haseqa-read","title":"contains[optional T: (A &amp; HasEq[A!] #read)]","text":"<p>[Source]</p> <pre><code>fun val contains[optional T: (A &amp; HasEq[A!] #read)](\n  a: val-&gt;T)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_15","title":"Parameters","text":"<ul> <li>a: val-&gt;T</li> </ul>"},{"location":"collections-persistent-Nil/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Nil[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_16","title":"Parameters","text":"<ul> <li>that: Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Nil/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Nil[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Nil/#parameters_17","title":"Parameters","text":"<ul> <li>that: Nil[A] val</li> </ul>"},{"location":"collections-persistent-Nil/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Set/","title":"Set[A: (Hashable val &amp; Equatable[A])]","text":"<p>[Source] <pre><code>type Set[A: (Hashable val &amp; Equatable[A])] is\n  HashSet[A, HashEq[A] val] val\n</code></pre></p>"},{"location":"collections-persistent-Set/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashEq[A] val] val</li> </ul>"},{"location":"collections-persistent-SetIs/","title":"SetIs[A: Any #share]","text":"<p>[Source] <pre><code>type SetIs[A: Any #share] is\n  HashSet[A, HashIs[A] val] val\n</code></pre></p>"},{"location":"collections-persistent-SetIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashIs[A] val] val</li> </ul>"},{"location":"collections-persistent-Vec/","title":"Vec[A: Any #share]","text":"<p>[Source]</p> <p>A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell.</p> <pre><code>class val Vec[A: Any #share]\n</code></pre>"},{"location":"collections-persistent-Vec/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-Vec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Vec[A] val^\n</code></pre>"},{"location":"collections-persistent-Vec/#returns","title":"Returns","text":"<ul> <li>Vec[A] val^</li> </ul>"},{"location":"collections-persistent-Vec/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-Vec/#size","title":"size","text":"<p>[Source]</p> <p>Return the amount of values in the vector.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-persistent-Vec/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element, raising an error if the index is out of bounds.</p> <pre><code>fun box apply(\n  i: USize val)\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-persistent-Vec/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"collections-persistent-Vec/#update","title":"update","text":"<p>[Source]</p> <p>Return a vector with the i-th element changed, raising an error if the index is out of bounds.</p> <pre><code>fun val update(\n  i: USize val,\n  value: val-&gt;A)\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_1","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-Vec/#returns_3","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#insert","title":"insert","text":"<p>[Source]</p> <p>Return a vector with an element inserted. Elements after this are moved up by one index, extending the vector. An out of bounds index raises an error.</p> <pre><code>fun val insert(\n  i: USize val,\n  value: val-&gt;A)\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_2","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-Vec/#returns_4","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#delete","title":"delete","text":"<p>[Source]</p> <p>Return a vector with an element deleted. Elements after this are moved down by one index, compacting the vector. An out of bounds index raises an error.</p> <pre><code>fun val delete(\n  i: USize val)\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_3","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-persistent-Vec/#returns_5","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#remove","title":"remove","text":"<p>[Source]</p> <p>Return a vector with n elements removed, beginning at index i.</p> <pre><code>fun val remove(\n  i: USize val,\n  n: USize val)\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_4","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>n: USize val</li> </ul>"},{"location":"collections-persistent-Vec/#returns_6","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#push","title":"push","text":"<p>[Source]</p> <p>Return a vector with the value added to the end.</p> <pre><code>fun val push(\n  value: val-&gt;A)\n: Vec[A] val\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_5","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> </ul>"},{"location":"collections-persistent-Vec/#returns_7","title":"Returns","text":"<ul> <li>Vec[A] val</li> </ul>"},{"location":"collections-persistent-Vec/#pop","title":"pop","text":"<p>[Source]</p> <p>Return a vector with the value at the end removed.</p> <pre><code>fun val pop()\n: Vec[A] val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_8","title":"Returns","text":"<ul> <li>Vec[A] val ?</li> </ul>"},{"location":"collections-persistent-Vec/#concat","title":"concat","text":"<p>[Source]</p> <p>Return a vector with the values of the given iterator added to the end.</p> <pre><code>fun val concat(\n  iter: Iterator[val-&gt;A] ref)\n: Vec[A] val\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_6","title":"Parameters","text":"<ul> <li>iter: Iterator[val-&gt;A] ref</li> </ul>"},{"location":"collections-persistent-Vec/#returns_9","title":"Returns","text":"<ul> <li>Vec[A] val</li> </ul>"},{"location":"collections-persistent-Vec/#find","title":"find","text":"<p>[Source]</p> <p>Find the <code>nth</code> appearance of <code>value</code> from the beginning of the vector, starting at <code>offset</code> and examining higher indices, and using the supplied <code>predicate</code> for comparisons. Returns the index of the value, or raise an error if the value isn't present.</p> <p>By default, the search starts at the first element of the vector, returns the first instance of <code>value</code> found, and uses object identity for comparison.</p> <pre><code>fun val find(\n  value: val-&gt;A,\n  offset: USize val = 0,\n  nth: USize val = 0,\n  predicate: {(A, A): Bool}[A] val = lambda)\n: USize val ?\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_7","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> <li>offset: USize val = 0</li> <li>nth: USize val = 0</li> <li>predicate: {(A, A): Bool}[A] val = lambda</li> </ul>"},{"location":"collections-persistent-Vec/#returns_10","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-persistent-Vec/#contains","title":"contains","text":"<p>[Source]</p> <p>Returns true if the vector contains <code>value</code>, false otherwise.</p> <pre><code>fun val contains(\n  value: val-&gt;A,\n  predicate: {(A, A): Bool}[A] val = lambda)\n: Bool val\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_8","title":"Parameters","text":"<ul> <li>value: val-&gt;A</li> <li>predicate: {(A, A): Bool}[A] val = lambda</li> </ul>"},{"location":"collections-persistent-Vec/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-Vec/#slice","title":"slice","text":"<p>[Source]</p> <p>Return a vector that is a clone of a portion of this vector. The range is exclusive and saturated.</p> <pre><code>fun val slice(\n  from: USize val = 0,\n  to: USize val = call,\n  step: USize val = 1)\n: Vec[A] val\n</code></pre>"},{"location":"collections-persistent-Vec/#parameters_9","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> <li>step: USize val = 1</li> </ul>"},{"location":"collections-persistent-Vec/#returns_12","title":"Returns","text":"<ul> <li>Vec[A] val</li> </ul>"},{"location":"collections-persistent-Vec/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Return a vector with the elements in reverse order.</p> <pre><code>fun val reverse()\n: Vec[A] val\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_13","title":"Returns","text":"<ul> <li>Vec[A] val</li> </ul>"},{"location":"collections-persistent-Vec/#keys","title":"keys","text":"<p>[Source]</p> <p>Return an iterator over the indices in the vector.</p> <pre><code>fun val keys()\n: VecKeys[A] ref^\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_14","title":"Returns","text":"<ul> <li>VecKeys[A] ref^</li> </ul>"},{"location":"collections-persistent-Vec/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values in the vector.</p> <pre><code>fun val values()\n: VecValues[A] ref^\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_15","title":"Returns","text":"<ul> <li>VecValues[A] ref^</li> </ul>"},{"location":"collections-persistent-Vec/#pairs","title":"pairs","text":"<p>[Source]</p> <p>Return an iterator over the (index, value) pairs in the vector.</p> <pre><code>fun val pairs()\n: VecPairs[A] ref^\n</code></pre>"},{"location":"collections-persistent-Vec/#returns_16","title":"Returns","text":"<ul> <li>VecPairs[A] ref^</li> </ul>"},{"location":"collections-persistent-VecKeys/","title":"VecKeys[A: Any #share]","text":"<p>[Source] <pre><code>class ref VecKeys[A: Any #share]\n</code></pre></p>"},{"location":"collections-persistent-VecKeys/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-VecKeys/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  v: Vec[A] val)\n: VecKeys[A] ref^\n</code></pre>"},{"location":"collections-persistent-VecKeys/#parameters","title":"Parameters","text":"<ul> <li>v: Vec[A] val</li> </ul>"},{"location":"collections-persistent-VecKeys/#returns","title":"Returns","text":"<ul> <li>VecKeys[A] ref^</li> </ul>"},{"location":"collections-persistent-VecKeys/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-VecKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-VecKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-VecKeys/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: USize val ?\n</code></pre>"},{"location":"collections-persistent-VecKeys/#returns_2","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-persistent-VecPairs/","title":"VecPairs[A: Any #share]","text":"<p>[Source] <pre><code>class ref VecPairs[A: Any #share]\n</code></pre></p>"},{"location":"collections-persistent-VecPairs/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-VecPairs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  v: Vec[A] val)\n: VecPairs[A] ref^\n</code></pre>"},{"location":"collections-persistent-VecPairs/#parameters","title":"Parameters","text":"<ul> <li>v: Vec[A] val</li> </ul>"},{"location":"collections-persistent-VecPairs/#returns","title":"Returns","text":"<ul> <li>VecPairs[A] ref^</li> </ul>"},{"location":"collections-persistent-VecPairs/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-VecPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-VecPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-VecPairs/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: (USize val , A) ?\n</code></pre>"},{"location":"collections-persistent-VecPairs/#returns_2","title":"Returns","text":"<ul> <li>(USize val , A) ?</li> </ul>"},{"location":"collections-persistent-VecValues/","title":"VecValues[A: Any #share]","text":"<p>[Source] <pre><code>class ref VecValues[A: Any #share]\n</code></pre></p>"},{"location":"collections-persistent-VecValues/#constructors","title":"Constructors","text":""},{"location":"collections-persistent-VecValues/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  v: Vec[A] val)\n: VecValues[A] ref^\n</code></pre>"},{"location":"collections-persistent-VecValues/#parameters","title":"Parameters","text":"<ul> <li>v: Vec[A] val</li> </ul>"},{"location":"collections-persistent-VecValues/#returns","title":"Returns","text":"<ul> <li>VecValues[A] ref^</li> </ul>"},{"location":"collections-persistent-VecValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-persistent-VecValues/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-persistent-VecValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-persistent-VecValues/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: val-&gt;A ?\n</code></pre>"},{"location":"collections-persistent-VecValues/#returns_2","title":"Returns","text":"<ul> <li>val-&gt;A ?</li> </ul>"},{"location":"debug--index/","title":"Debug package","text":"<p>Provides facilities to create output to either <code>STDOUT</code> or <code>STDERR</code> that will only appear when the platform is debug configured. To create a binary with debug configured, pass the <code>-d</code> flag to <code>ponyc</code> when compiling e.g.:</p> <p><code>ponyc -d</code></p>"},{"location":"debug--index/#example-code","title":"Example code","text":"<pre><code>use \"debug\"\n\nactor Main\n  new create(env: Env) =&gt;\n    Debug.out(\"This will only be seen when configured for debug info\")\n    env.out.print(\"This will always be seen\")\n</code></pre>"},{"location":"debug--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Debug</li> <li>primitive DebugErr</li> <li>primitive DebugOut</li> <li>type DebugStream</li> </ul>"},{"location":"debug-Debug/","title":"Debug","text":"<p>[Source]</p> <p>This is a debug only print utility.</p> <pre><code>primitive val Debug\n</code></pre>"},{"location":"debug-Debug/#constructors","title":"Constructors","text":""},{"location":"debug-Debug/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Debug val^\n</code></pre>"},{"location":"debug-Debug/#returns","title":"Returns","text":"<ul> <li>Debug val^</li> </ul>"},{"location":"debug-Debug/#public-functions","title":"Public Functions","text":""},{"location":"debug-Debug/#apply","title":"apply","text":"<p>[Source]</p> <p>If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout.</p> <pre><code>fun box apply(\n  msg: (Stringable box | ReadSeq[Stringable box] box),\n  sep: String val = \", \",\n  stream: (DebugOut val | DebugErr val) = reference)\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters","title":"Parameters","text":"<ul> <li>msg: (Stringable box | ReadSeq[Stringable box] box)</li> <li>sep: String val = \", \"</li> <li>stream: (DebugOut val | DebugErr val) = reference</li> </ul>"},{"location":"debug-Debug/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#out","title":"out","text":"<p>[Source]</p> <p>If platform is debug configured, print message to standard output</p> <pre><code>fun box out(\n  msg: Stringable box = \"\")\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters_1","title":"Parameters","text":"<ul> <li>msg: Stringable box = \"\"</li> </ul>"},{"location":"debug-Debug/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#err","title":"err","text":"<p>[Source]</p> <p>If platform is debug configured, print message to standard error</p> <pre><code>fun box err(\n  msg: Stringable box = \"\")\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters_2","title":"Parameters","text":"<ul> <li>msg: Stringable box = \"\"</li> </ul>"},{"location":"debug-Debug/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Debug val)\n: Bool val\n</code></pre>"},{"location":"debug-Debug/#parameters_3","title":"Parameters","text":"<ul> <li>that: Debug val</li> </ul>"},{"location":"debug-Debug/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-Debug/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Debug val)\n: Bool val\n</code></pre>"},{"location":"debug-Debug/#parameters_4","title":"Parameters","text":"<ul> <li>that: Debug val</li> </ul>"},{"location":"debug-Debug/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugErr/","title":"DebugErr","text":"<p>[Source] <pre><code>primitive val DebugErr\n</code></pre></p>"},{"location":"debug-DebugErr/#constructors","title":"Constructors","text":""},{"location":"debug-DebugErr/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DebugErr val^\n</code></pre>"},{"location":"debug-DebugErr/#returns","title":"Returns","text":"<ul> <li>DebugErr val^</li> </ul>"},{"location":"debug-DebugErr/#public-functions","title":"Public Functions","text":""},{"location":"debug-DebugErr/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DebugErr val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugErr/#parameters","title":"Parameters","text":"<ul> <li>that: DebugErr val</li> </ul>"},{"location":"debug-DebugErr/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugErr/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DebugErr val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugErr/#parameters_1","title":"Parameters","text":"<ul> <li>that: DebugErr val</li> </ul>"},{"location":"debug-DebugErr/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugOut/","title":"DebugOut","text":"<p>[Source] <pre><code>primitive val DebugOut\n</code></pre></p>"},{"location":"debug-DebugOut/#constructors","title":"Constructors","text":""},{"location":"debug-DebugOut/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DebugOut val^\n</code></pre>"},{"location":"debug-DebugOut/#returns","title":"Returns","text":"<ul> <li>DebugOut val^</li> </ul>"},{"location":"debug-DebugOut/#public-functions","title":"Public Functions","text":""},{"location":"debug-DebugOut/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DebugOut val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugOut/#parameters","title":"Parameters","text":"<ul> <li>that: DebugOut val</li> </ul>"},{"location":"debug-DebugOut/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugOut/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DebugOut val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugOut/#parameters_1","title":"Parameters","text":"<ul> <li>that: DebugOut val</li> </ul>"},{"location":"debug-DebugOut/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugStream/","title":"DebugStream","text":"<p>[Source] <pre><code>type DebugStream is\n  (DebugOut val | DebugErr val)\n</code></pre></p>"},{"location":"debug-DebugStream/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(DebugOut val | DebugErr val)</li> </ul>"},{"location":"eohippus--index/","title":"Package","text":"<p>Eohippus is a collection of Pony packages and tools for dealing with Pony code.</p>"},{"location":"eohippus--index/#ast","title":"AST","text":"<p>Classes that implement an abstract syntax tree for Pony code.</p>"},{"location":"eohippus--index/#json","title":"JSON","text":"<p>Basic JSON functionality specialized for the needs of the project.</p>"},{"location":"eohippus--index/#linter","title":"Linter","text":"<p>Functionality for detecting and fixing formatting issues in Pony code.</p>"},{"location":"eohippus--index/#parser","title":"Parser","text":"<p>Implements a Kiuatan parser for the Pony language that produces an AST.</p>"},{"location":"eohippus--index/#server","title":"Server","text":"<p>A Language Server Protocol implementation for Pony.</p>"},{"location":"eohippus--index/#types","title":"Types","text":"<p>Contains classes that represent type information in the AST.</p>"},{"location":"eohippus--index/#public-types","title":"Public Types","text":"<ul> <li>primitive ErrorMsg</li> <li>class Queue</li> <li>primitive StringUtil</li> <li>primitive Version</li> </ul>"},{"location":"eohippus-ErrorMsg/","title":"ErrorMsg","text":"<p>[Source]</p> <p>The source of truth for error messages.</p> <pre><code>primitive val ErrorMsg\n</code></pre>"},{"location":"eohippus-ErrorMsg/#constructors","title":"Constructors","text":""},{"location":"eohippus-ErrorMsg/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ErrorMsg val^\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns","title":"Returns","text":"<ul> <li>ErrorMsg val^</li> </ul>"},{"location":"eohippus-ErrorMsg/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ErrorMsg/#internal_ast_node_not_bound","title":"internal_ast_node_not_bound","text":"<p>[Source]</p> <pre><code>fun tag internal_ast_node_not_bound(\n  name: String val)\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#parameters","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#internal_ast_pass_clone","title":"internal_ast_pass_clone","text":"<p>[Source]</p> <pre><code>fun tag internal_ast_pass_clone()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#expression_block_empty","title":"expression_block_empty","text":"<p>[Source]</p> <pre><code>fun tag expression_block_empty()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#literal_integer_hex_empty","title":"literal_integer_hex_empty","text":"<p>[Source]</p> <pre><code>fun tag literal_integer_hex_empty()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#literal_integer_bin_empty","title":"literal_integer_bin_empty","text":"<p>[Source]</p> <pre><code>fun tag literal_integer_bin_empty()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#literal_char_empty","title":"literal_char_empty","text":"<p>[Source]</p> <pre><code>fun tag literal_char_empty()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#literal_char_unterminated","title":"literal_char_unterminated","text":"<p>[Source]</p> <pre><code>fun tag literal_char_unterminated()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#literal_string_unterminated","title":"literal_string_unterminated","text":"<p>[Source]</p> <pre><code>fun tag literal_string_unterminated()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#literal_char_escape_invalid","title":"literal_char_escape_invalid","text":"<p>[Source]</p> <pre><code>fun tag literal_char_escape_invalid()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#literal_char_unicode_invalid","title":"literal_char_unicode_invalid","text":"<p>[Source]</p> <pre><code>fun tag literal_char_unicode_invalid()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#exp_object_unterminated","title":"exp_object_unterminated","text":"<p>[Source]</p> <pre><code>fun tag exp_object_unterminated()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#src_file_docstring_multiple","title":"src_file_docstring_multiple","text":"<p>[Source]</p> <pre><code>fun tag src_file_docstring_multiple()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#src_file_expected_docstring_using_or_typedef","title":"src_file_expected_docstring_using_or_typedef","text":"<p>[Source]</p> <pre><code>fun tag src_file_expected_docstring_using_or_typedef()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#src_file_expected_using_or_typedef","title":"src_file_expected_using_or_typedef","text":"<p>[Source]</p> <pre><code>fun tag src_file_expected_using_or_typedef()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#src_file_expected_typedef","title":"src_file_expected_typedef","text":"<p>[Source]</p> <pre><code>fun tag src_file_expected_typedef()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_15","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#src_file_expected_field_or_method","title":"src_file_expected_field_or_method","text":"<p>[Source]</p> <pre><code>fun tag src_file_expected_field_or_method()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_16","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#src_file_expected_method","title":"src_file_expected_method","text":"<p>[Source]</p> <pre><code>fun tag src_file_expected_method()\n: String val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#returns_17","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ErrorMsg/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ErrorMsg val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#parameters_1","title":"Parameters","text":"<ul> <li>that: ErrorMsg val</li> </ul>"},{"location":"eohippus-ErrorMsg/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ErrorMsg/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ErrorMsg val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ErrorMsg/#parameters_2","title":"Parameters","text":"<ul> <li>that: ErrorMsg val</li> </ul>"},{"location":"eohippus-ErrorMsg/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-Queue/","title":"Queue[A: A]","text":"<p>[Source] <pre><code>class ref Queue[A: A]\n</code></pre></p>"},{"location":"eohippus-Queue/#constructors","title":"Constructors","text":""},{"location":"eohippus-Queue/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  space': USize val = 0)\n: Queue[A] ref^\n</code></pre>"},{"location":"eohippus-Queue/#parameters","title":"Parameters","text":"<ul> <li>space': USize val = 0</li> </ul>"},{"location":"eohippus-Queue/#returns","title":"Returns","text":"<ul> <li>Queue[A] ref^</li> </ul>"},{"location":"eohippus-Queue/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-Queue/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"eohippus-Queue/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-Queue/#space","title":"space","text":"<p>[Source]</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"eohippus-Queue/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-Queue/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  i: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"eohippus-Queue/#parameters_1","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"eohippus-Queue/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"eohippus-Queue/#shift","title":"shift","text":"<p>[Source]</p> <pre><code>fun ref shift()\n: A ?\n</code></pre>"},{"location":"eohippus-Queue/#returns_4","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"eohippus-Queue/#push","title":"push","text":"<p>[Source]</p> <pre><code>fun ref push(\n  value: A)\n: None val\n</code></pre>"},{"location":"eohippus-Queue/#parameters_2","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"eohippus-Queue/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-StringUtil/","title":"StringUtil","text":"<p>[Source] <pre><code>primitive val StringUtil\n</code></pre></p>"},{"location":"eohippus-StringUtil/#constructors","title":"Constructors","text":""},{"location":"eohippus-StringUtil/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: StringUtil val^\n</code></pre>"},{"location":"eohippus-StringUtil/#returns","title":"Returns","text":"<ul> <li>StringUtil val^</li> </ul>"},{"location":"eohippus-StringUtil/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-StringUtil/#is_ws","title":"is_ws","text":"<p>[Source]</p> <pre><code>fun box is_ws(\n  ch: U8 val)\n: Bool val\n</code></pre>"},{"location":"eohippus-StringUtil/#parameters","title":"Parameters","text":"<ul> <li>ch: U8 val</li> </ul>"},{"location":"eohippus-StringUtil/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-StringUtil/#escape","title":"escape","text":"<p>[Source]</p> <p>Returns an \"escaped\" version of a string.\"</p> <pre><code>fun box escape(\n  orig: String box)\n: String iso^\n</code></pre>"},{"location":"eohippus-StringUtil/#parameters_1","title":"Parameters","text":"<ul> <li>orig: String box</li> </ul>"},{"location":"eohippus-StringUtil/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-StringUtil/#url_encode","title":"url_encode","text":"<p>[Source]</p> <pre><code>fun box url_encode(\n  str: String box)\n: String val\n</code></pre>"},{"location":"eohippus-StringUtil/#parameters_2","title":"Parameters","text":"<ul> <li>str: String box</li> </ul>"},{"location":"eohippus-StringUtil/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-StringUtil/#url_decode","title":"url_decode","text":"<p>[Source]</p> <pre><code>fun box url_decode(\n  str: String val)\n: String val\n</code></pre>"},{"location":"eohippus-StringUtil/#parameters_3","title":"Parameters","text":"<ul> <li>str: String val</li> </ul>"},{"location":"eohippus-StringUtil/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-StringUtil/#get_client_uri","title":"get_client_uri","text":"<p>[Source]</p> <pre><code>fun box get_client_uri(\n  path: String val)\n: String val\n</code></pre>"},{"location":"eohippus-StringUtil/#parameters_4","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"eohippus-StringUtil/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-StringUtil/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: StringUtil val)\n: Bool val\n</code></pre>"},{"location":"eohippus-StringUtil/#parameters_5","title":"Parameters","text":"<ul> <li>that: StringUtil val</li> </ul>"},{"location":"eohippus-StringUtil/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-StringUtil/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: StringUtil val)\n: Bool val\n</code></pre>"},{"location":"eohippus-StringUtil/#parameters_6","title":"Parameters","text":"<ul> <li>that: StringUtil val</li> </ul>"},{"location":"eohippus-StringUtil/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-Version/","title":"Version","text":"<p>[Source] <pre><code>primitive val Version\n</code></pre></p>"},{"location":"eohippus-Version/#constructors","title":"Constructors","text":""},{"location":"eohippus-Version/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Version val^\n</code></pre>"},{"location":"eohippus-Version/#returns","title":"Returns","text":"<ul> <li>Version val^</li> </ul>"},{"location":"eohippus-Version/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-Version/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"eohippus-Version/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-Version/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Version val)\n: Bool val\n</code></pre>"},{"location":"eohippus-Version/#parameters","title":"Parameters","text":"<ul> <li>that: Version val</li> </ul>"},{"location":"eohippus-Version/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-Version/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Version val)\n: Bool val\n</code></pre>"},{"location":"eohippus-Version/#parameters_1","title":"Parameters","text":"<ul> <li>that: Version val</li> </ul>"},{"location":"eohippus-Version/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer--index/","title":"Package","text":"<p>No package doc string provided for eohippus/analyzer.</p>"},{"location":"eohippus-analyzer--index/#public-types","title":"Public Types","text":"<ul> <li>primitive AnalysisError</li> <li>primitive AnalysisLinting</li> <li>primitive AnalysisParsing</li> <li>primitive AnalysisScoping</li> <li>primitive AnalysisStart</li> <li>primitive AnalysisUpToDate</li> <li>primitive AnalyzeError</li> <li>primitive AnalyzeHint</li> <li>primitive AnalyzeInfo</li> <li>type AnalyzeSeverity</li> <li>primitive AnalyzeWarning</li> <li>interface Analyzer</li> <li>class AnalyzerError</li> <li>interface AnalyzerNotify</li> <li>interface AnalyzerRequestNotify</li> <li>primitive BlockScope</li> <li>primitive ClassScope</li> <li>actor EohippusAnalyzer</li> <li>primitive FileScope</li> <li>primitive MethodScope</li> <li>primitive PackageScope</li> <li>primitive ParseScopeJson</li> <li>primitive QualifierScope</li> <li>class Scope</li> <li>type ScopeItem</li> <li>type ScopeKind</li> <li>class ScopeState</li> <li>class ScopeVisitor</li> <li>actor Scoper</li> <li>class SrcFileItem</li> <li>type SrcItem</li> <li>type SrcItemState</li> <li>class SrcPackageItem</li> <li>type SrcRange</li> </ul>"},{"location":"eohippus-analyzer-AnalysisError/","title":"AnalysisError","text":"<p>[Source] <pre><code>primitive val AnalysisError\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalysisError/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalysisError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalysisError val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisError/#returns","title":"Returns","text":"<ul> <li>AnalysisError val^</li> </ul>"},{"location":"eohippus-analyzer-AnalysisError/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalysisError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: USize val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisError/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalysisError val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisError/#parameters","title":"Parameters","text":"<ul> <li>that: AnalysisError val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisError/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalysisError val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisError/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalysisError val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisLinting/","title":"AnalysisLinting","text":"<p>[Source] <pre><code>primitive val AnalysisLinting\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalysisLinting/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalysisLinting/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalysisLinting val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisLinting/#returns","title":"Returns","text":"<ul> <li>AnalysisLinting val^</li> </ul>"},{"location":"eohippus-analyzer-AnalysisLinting/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalysisLinting/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: USize val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisLinting/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisLinting/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalysisLinting val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisLinting/#parameters","title":"Parameters","text":"<ul> <li>that: AnalysisLinting val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisLinting/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisLinting/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalysisLinting val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisLinting/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalysisLinting val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisLinting/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisParsing/","title":"AnalysisParsing","text":"<p>[Source] <pre><code>primitive val AnalysisParsing\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalysisParsing/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalysisParsing/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalysisParsing val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisParsing/#returns","title":"Returns","text":"<ul> <li>AnalysisParsing val^</li> </ul>"},{"location":"eohippus-analyzer-AnalysisParsing/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalysisParsing/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: USize val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisParsing/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisParsing/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalysisParsing val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisParsing/#parameters","title":"Parameters","text":"<ul> <li>that: AnalysisParsing val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisParsing/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisParsing/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalysisParsing val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisParsing/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalysisParsing val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisParsing/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisScoping/","title":"AnalysisScoping","text":"<p>[Source] <pre><code>primitive val AnalysisScoping\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalysisScoping/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalysisScoping/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalysisScoping val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisScoping/#returns","title":"Returns","text":"<ul> <li>AnalysisScoping val^</li> </ul>"},{"location":"eohippus-analyzer-AnalysisScoping/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalysisScoping/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: USize val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisScoping/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisScoping/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalysisScoping val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisScoping/#parameters","title":"Parameters","text":"<ul> <li>that: AnalysisScoping val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisScoping/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisScoping/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalysisScoping val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisScoping/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalysisScoping val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisScoping/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisStart/","title":"AnalysisStart","text":"<p>[Source] <pre><code>primitive val AnalysisStart\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalysisStart/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalysisStart/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalysisStart val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisStart/#returns","title":"Returns","text":"<ul> <li>AnalysisStart val^</li> </ul>"},{"location":"eohippus-analyzer-AnalysisStart/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalysisStart/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: USize val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisStart/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisStart/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalysisStart val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisStart/#parameters","title":"Parameters","text":"<ul> <li>that: AnalysisStart val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisStart/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisStart/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalysisStart val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisStart/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalysisStart val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisStart/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisUpToDate/","title":"AnalysisUpToDate","text":"<p>[Source] <pre><code>primitive val AnalysisUpToDate\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalysisUpToDate/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalysisUpToDate val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#returns","title":"Returns","text":"<ul> <li>AnalysisUpToDate val^</li> </ul>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalysisUpToDate/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: USize val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalysisUpToDate val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#parameters","title":"Parameters","text":"<ul> <li>that: AnalysisUpToDate val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalysisUpToDate val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalysisUpToDate val</li> </ul>"},{"location":"eohippus-analyzer-AnalysisUpToDate/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeError/","title":"AnalyzeError","text":"<p>[Source] <pre><code>primitive val AnalyzeError\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalyzeError/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalyzeError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalyzeError val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeError/#returns","title":"Returns","text":"<ul> <li>AnalyzeError val^</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeError/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalyzeError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalyzeError val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeError/#parameters","title":"Parameters","text":"<ul> <li>that: AnalyzeError val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeError/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalyzeError val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeError/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalyzeError val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeError/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeHint/","title":"AnalyzeHint","text":"<p>[Source] <pre><code>primitive val AnalyzeHint\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalyzeHint/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalyzeHint/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalyzeHint val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeHint/#returns","title":"Returns","text":"<ul> <li>AnalyzeHint val^</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeHint/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalyzeHint/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalyzeHint val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeHint/#parameters","title":"Parameters","text":"<ul> <li>that: AnalyzeHint val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeHint/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeHint/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalyzeHint val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeHint/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalyzeHint val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeHint/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeInfo/","title":"AnalyzeInfo","text":"<p>[Source] <pre><code>primitive val AnalyzeInfo\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalyzeInfo/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalyzeInfo/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalyzeInfo val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeInfo/#returns","title":"Returns","text":"<ul> <li>AnalyzeInfo val^</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeInfo/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalyzeInfo/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalyzeInfo val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeInfo/#parameters","title":"Parameters","text":"<ul> <li>that: AnalyzeInfo val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeInfo/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeInfo/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalyzeInfo val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeInfo/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalyzeInfo val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeInfo/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeSeverity/","title":"AnalyzeSeverity","text":"<p>[Source] <pre><code>type AnalyzeSeverity is\n  (AnalyzeError val | AnalyzeWarning val | AnalyzeInfo val | AnalyzeHint val)\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalyzeSeverity/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(AnalyzeError val | AnalyzeWarning val | AnalyzeInfo val | AnalyzeHint val)</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeWarning/","title":"AnalyzeWarning","text":"<p>[Source] <pre><code>primitive val AnalyzeWarning\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalyzeWarning/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalyzeWarning/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AnalyzeWarning val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeWarning/#returns","title":"Returns","text":"<ul> <li>AnalyzeWarning val^</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeWarning/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-AnalyzeWarning/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AnalyzeWarning val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeWarning/#parameters","title":"Parameters","text":"<ul> <li>that: AnalyzeWarning val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeWarning/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeWarning/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AnalyzeWarning val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzeWarning/#parameters_1","title":"Parameters","text":"<ul> <li>that: AnalyzeWarning val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzeWarning/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-Analyzer/","title":"Analyzer","text":"<p>[Source] <pre><code>interface tag Analyzer\n</code></pre></p>"},{"location":"eohippus-analyzer-Analyzer/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-analyzer-Analyzer/#open_file","title":"open_file","text":"<p>[Source]</p> <pre><code>be open_file(\n  task_id: USize val,\n  canonical_path: String val,\n  parse: Parser[U8 val, Data val, Node val] tag)\n</code></pre>"},{"location":"eohippus-analyzer-Analyzer/#parameters","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>parse: Parser[U8 val, Data val, Node val] tag</li> </ul>"},{"location":"eohippus-analyzer-Analyzer/#update_file","title":"update_file","text":"<p>[Source]</p> <pre><code>be update_file(\n  task_id: USize val,\n  canonical_path: String val,\n  parse: Parser[U8 val, Data val, Node val] tag)\n</code></pre>"},{"location":"eohippus-analyzer-Analyzer/#parameters_1","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>parse: Parser[U8 val, Data val, Node val] tag</li> </ul>"},{"location":"eohippus-analyzer-Analyzer/#close_file","title":"close_file","text":"<p>[Source]</p> <pre><code>be close_file(\n  task_id: USize val,\n  canonical_path: String val)\n</code></pre>"},{"location":"eohippus-analyzer-Analyzer/#parameters_2","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> </ul>"},{"location":"eohippus-analyzer-Analyzer/#request_info","title":"request_info","text":"<p>[Source]</p> <pre><code>be request_info(\n  task_id: USize val,\n  canonical_path: String val,\n  notify: AnalyzerRequestNotify tag)\n</code></pre>"},{"location":"eohippus-analyzer-Analyzer/#parameters_3","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>notify: AnalyzerRequestNotify tag</li> </ul>"},{"location":"eohippus-analyzer-Analyzer/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzerError/","title":"AnalyzerError","text":"<p>[Source] <pre><code>class val AnalyzerError\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalyzerError/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-AnalyzerError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  canonical_path': String val,\n  severity': (AnalyzeError val | AnalyzeWarning val | AnalyzeInfo val | \n    AnalyzeHint val),\n  message': String val,\n  line': USize val = 0,\n  column': USize val = 0,\n  next_line': USize val = 0,\n  next_column': USize val = 0)\n: AnalyzerError val^\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzerError/#parameters","title":"Parameters","text":"<ul> <li>canonical_path': String val</li> <li>severity': (AnalyzeError val | AnalyzeWarning val | AnalyzeInfo val |      AnalyzeHint val)</li> <li>message': String val</li> <li>line': USize val = 0</li> <li>column': USize val = 0</li> <li>next_line': USize val = 0</li> <li>next_column': USize val = 0</li> </ul>"},{"location":"eohippus-analyzer-AnalyzerError/#returns","title":"Returns","text":"<ul> <li>AnalyzerError val^</li> </ul>"},{"location":"eohippus-analyzer-AnalyzerError/#public-fields","title":"Public fields","text":""},{"location":"eohippus-analyzer-AnalyzerError/#let-canonical_path-string-val","title":"let canonical_path: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-AnalyzerError/#let-severity-analyzeerror-val-analyzewarning-val-analyzeinfo-val-analyzehint-val","title":"let severity: (AnalyzeError val | AnalyzeWarning val | AnalyzeInfo val | AnalyzeHint val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-AnalyzerError/#let-message-string-val","title":"let message: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-AnalyzerError/#let-line-usize-val","title":"let line: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-AnalyzerError/#let-column-usize-val","title":"let column: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-AnalyzerError/#let-next_line-usize-val","title":"let next_line: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-AnalyzerError/#let-next_column-usize-val","title":"let next_column: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-AnalyzerNotify/","title":"AnalyzerNotify","text":"<p>[Source] <pre><code>interface tag AnalyzerNotify\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalyzerNotify/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-analyzer-AnalyzerNotify/#parsed_file","title":"parsed_file","text":"<p>[Source]</p> <pre><code>be parsed_file(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_name: String val,\n  syntax_tree: Node val,\n  line_beginnings: ReadSeq[Loc[U8 val] val] val)\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzerNotify/#parameters","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_name: String val</li> <li>syntax_tree: Node val</li> <li>line_beginnings: ReadSeq[Loc[U8 val] val] val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzerNotify/#analyzed_workspace","title":"analyzed_workspace","text":"<p>[Source]</p> <pre><code>be analyzed_workspace(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  workspace_errors: ReadSeq[AnalyzerError val] val,\n  parse_errors: ReadSeq[AnalyzerError val] val,\n  lint_errors: ReadSeq[AnalyzerError val] val,\n  analyze_errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzerNotify/#parameters_1","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>workspace_errors: ReadSeq[AnalyzerError val] val</li> <li>parse_errors: ReadSeq[AnalyzerError val] val</li> <li>lint_errors: ReadSeq[AnalyzerError val] val</li> <li>analyze_errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzerNotify/#analyzed_file","title":"analyzed_file","text":"<p>[Source]</p> <pre><code>be analyzed_file(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_path: String val,\n  syntax_tree: (Node val | None val),\n  file_scope: (Scope val | None val),\n  parse_errors: ReadSeq[AnalyzerError val] val,\n  lint_errors: ReadSeq[AnalyzerError val] val,\n  analyze_errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzerNotify/#parameters_2","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>syntax_tree: (Node val | None val)</li> <li>file_scope: (Scope val | None val)</li> <li>parse_errors: ReadSeq[AnalyzerError val] val</li> <li>lint_errors: ReadSeq[AnalyzerError val] val</li> <li>analyze_errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzerNotify/#analyze_failed","title":"analyze_failed","text":"<p>[Source]</p> <pre><code>be analyze_failed(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_path: String val,\n  errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzerNotify/#parameters_3","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzerRequestNotify/","title":"AnalyzerRequestNotify","text":"<p>[Source] <pre><code>interface tag AnalyzerRequestNotify\n</code></pre></p>"},{"location":"eohippus-analyzer-AnalyzerRequestNotify/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-analyzer-AnalyzerRequestNotify/#request_succeeded","title":"request_succeeded","text":"<p>[Source]</p> <pre><code>be request_succeeded(\n  task_id: USize val,\n  canonical_path: String val,\n  syntax_tree: (Node val | None val),\n  nodes_by_index: HashMap[USize val, Node val, HashEq[USize val] val] val,\n  scope: Scope val)\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzerRequestNotify/#parameters","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>syntax_tree: (Node val | None val)</li> <li>nodes_by_index: HashMap[USize val, Node val, HashEq[USize val] val] val</li> <li>scope: Scope val</li> </ul>"},{"location":"eohippus-analyzer-AnalyzerRequestNotify/#request_failed","title":"request_failed","text":"<p>[Source]</p> <pre><code>be request_failed(\n  task_id: USize val,\n  canonical_path: String val,\n  message: String val)\n</code></pre>"},{"location":"eohippus-analyzer-AnalyzerRequestNotify/#parameters_1","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>message: String val</li> </ul>"},{"location":"eohippus-analyzer-BlockScope/","title":"BlockScope","text":"<p>[Source] <pre><code>primitive val BlockScope\n</code></pre></p>"},{"location":"eohippus-analyzer-BlockScope/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-BlockScope/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BlockScope val^\n</code></pre>"},{"location":"eohippus-analyzer-BlockScope/#returns","title":"Returns","text":"<ul> <li>BlockScope val^</li> </ul>"},{"location":"eohippus-analyzer-BlockScope/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-BlockScope/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: BlockScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-BlockScope/#parameters","title":"Parameters","text":"<ul> <li>that: BlockScope val</li> </ul>"},{"location":"eohippus-analyzer-BlockScope/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-BlockScope/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: BlockScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-BlockScope/#parameters_1","title":"Parameters","text":"<ul> <li>that: BlockScope val</li> </ul>"},{"location":"eohippus-analyzer-BlockScope/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-ClassScope/","title":"ClassScope","text":"<p>[Source] <pre><code>primitive val ClassScope\n</code></pre></p>"},{"location":"eohippus-analyzer-ClassScope/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-ClassScope/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ClassScope val^\n</code></pre>"},{"location":"eohippus-analyzer-ClassScope/#returns","title":"Returns","text":"<ul> <li>ClassScope val^</li> </ul>"},{"location":"eohippus-analyzer-ClassScope/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-ClassScope/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ClassScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-ClassScope/#parameters","title":"Parameters","text":"<ul> <li>that: ClassScope val</li> </ul>"},{"location":"eohippus-analyzer-ClassScope/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-ClassScope/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ClassScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-ClassScope/#parameters_1","title":"Parameters","text":"<ul> <li>that: ClassScope val</li> </ul>"},{"location":"eohippus-analyzer-ClassScope/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/","title":"EohippusAnalyzer","text":"<p>[Source] <pre><code>actor tag EohippusAnalyzer is\n  Analyzer tag\n</code></pre></p>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#implements","title":"Implements","text":"<ul> <li>Analyzer tag</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-EohippusAnalyzer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  log: Logger[String val] val,\n  auth: FileAuth val,\n  grammar: NamedRule[U8 val, Data val, Node val] val,\n  workspace: (FilePath val | None val),\n  storage_path: (FilePath val | None val),\n  pony_path: ReadSeq[FilePath val] val,\n  ponyc_executable: (FilePath val | None val),\n  pony_packages_path: (FilePath val | None val),\n  notify: AnalyzerNotify tag)\n: EohippusAnalyzer tag^\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>auth: FileAuth val</li> <li>grammar: NamedRule[U8 val, Data val, Node val] val</li> <li>workspace: (FilePath val | None val)</li> <li>storage_path: (FilePath val | None val)</li> <li>pony_path: ReadSeq[FilePath val] val</li> <li>ponyc_executable: (FilePath val | None val)</li> <li>pony_packages_path: (FilePath val | None val)</li> <li>notify: AnalyzerNotify tag</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#returns","title":"Returns","text":"<ul> <li>EohippusAnalyzer tag^</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-analyzer-EohippusAnalyzer/#analyze","title":"analyze","text":"<p>[Source]</p> <pre><code>be analyze(\n  task_id: USize val,\n  canonical_path: String val,\n  extra_paths: Array[String val] val)\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#parameters_1","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>extra_paths: Array[String val] val</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#open_file","title":"open_file","text":"<p>[Source]</p> <pre><code>be open_file(\n  task_id: USize val,\n  canonical_path: String val,\n  parse: Parser[U8 val, Data val, Node val] tag)\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#parameters_2","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>parse: Parser[U8 val, Data val, Node val] tag</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#update_file","title":"update_file","text":"<p>[Source]</p> <pre><code>be update_file(\n  task_id: USize val,\n  canonical_path: String val,\n  parse: Parser[U8 val, Data val, Node val] tag)\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#parameters_3","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>parse: Parser[U8 val, Data val, Node val] tag</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#close_file","title":"close_file","text":"<p>[Source]</p> <pre><code>be close_file(\n  task_id: USize val,\n  canonical_path: String val)\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#parameters_4","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#request_info","title":"request_info","text":"<p>[Source]</p> <pre><code>be request_info(\n  task_id: USize val,\n  canonical_path: String val,\n  notify: AnalyzerRequestNotify tag)\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#parameters_5","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>notify: AnalyzerRequestNotify tag</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#scoped_file","title":"scoped_file","text":"<p>[Source]</p> <pre><code>be scoped_file(\n  task_id: USize val,\n  canonical_path: String val,\n  syntax_tree: Node val,\n  scope: Scope val)\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#parameters_6","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>syntax_tree: Node val</li> <li>scope: Scope val</li> </ul>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#scope_failed","title":"scope_failed","text":"<p>[Source]</p> <pre><code>be scope_failed(\n  task_id: USize val,\n  canonical_path: String val,\n  errors: ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-analyzer-EohippusAnalyzer/#parameters_7","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>errors: ReadSeq[(Node val , String val)] val</li> </ul>"},{"location":"eohippus-analyzer-FileScope/","title":"FileScope","text":"<p>[Source] <pre><code>primitive val FileScope\n</code></pre></p>"},{"location":"eohippus-analyzer-FileScope/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-FileScope/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileScope val^\n</code></pre>"},{"location":"eohippus-analyzer-FileScope/#returns","title":"Returns","text":"<ul> <li>FileScope val^</li> </ul>"},{"location":"eohippus-analyzer-FileScope/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-FileScope/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-FileScope/#parameters","title":"Parameters","text":"<ul> <li>that: FileScope val</li> </ul>"},{"location":"eohippus-analyzer-FileScope/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-FileScope/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-FileScope/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileScope val</li> </ul>"},{"location":"eohippus-analyzer-FileScope/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-MethodScope/","title":"MethodScope","text":"<p>[Source] <pre><code>primitive val MethodScope\n</code></pre></p>"},{"location":"eohippus-analyzer-MethodScope/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-MethodScope/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MethodScope val^\n</code></pre>"},{"location":"eohippus-analyzer-MethodScope/#returns","title":"Returns","text":"<ul> <li>MethodScope val^</li> </ul>"},{"location":"eohippus-analyzer-MethodScope/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-MethodScope/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: MethodScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-MethodScope/#parameters","title":"Parameters","text":"<ul> <li>that: MethodScope val</li> </ul>"},{"location":"eohippus-analyzer-MethodScope/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-MethodScope/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: MethodScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-MethodScope/#parameters_1","title":"Parameters","text":"<ul> <li>that: MethodScope val</li> </ul>"},{"location":"eohippus-analyzer-MethodScope/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-PackageScope/","title":"PackageScope","text":"<p>[Source] <pre><code>primitive val PackageScope\n</code></pre></p>"},{"location":"eohippus-analyzer-PackageScope/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-PackageScope/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PackageScope val^\n</code></pre>"},{"location":"eohippus-analyzer-PackageScope/#returns","title":"Returns","text":"<ul> <li>PackageScope val^</li> </ul>"},{"location":"eohippus-analyzer-PackageScope/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-PackageScope/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: PackageScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-PackageScope/#parameters","title":"Parameters","text":"<ul> <li>that: PackageScope val</li> </ul>"},{"location":"eohippus-analyzer-PackageScope/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-PackageScope/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: PackageScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-PackageScope/#parameters_1","title":"Parameters","text":"<ul> <li>that: PackageScope val</li> </ul>"},{"location":"eohippus-analyzer-PackageScope/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-ParseScopeJson/","title":"ParseScopeJson","text":"<p>[Source] <pre><code>primitive val ParseScopeJson\n</code></pre></p>"},{"location":"eohippus-analyzer-ParseScopeJson/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-ParseScopeJson/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseScopeJson val^\n</code></pre>"},{"location":"eohippus-analyzer-ParseScopeJson/#returns","title":"Returns","text":"<ul> <li>ParseScopeJson val^</li> </ul>"},{"location":"eohippus-analyzer-ParseScopeJson/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-ParseScopeJson/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  scope_item: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val),\n  parent: (Scope ref | None val))\n: (Scope ref | String val)\n</code></pre>"},{"location":"eohippus-analyzer-ParseScopeJson/#parameters","title":"Parameters","text":"<ul> <li>scope_item: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> <li>parent: (Scope ref | None val)</li> </ul>"},{"location":"eohippus-analyzer-ParseScopeJson/#returns_1","title":"Returns","text":"<ul> <li>(Scope ref | String val)</li> </ul>"},{"location":"eohippus-analyzer-ParseScopeJson/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseScopeJson val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-ParseScopeJson/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseScopeJson val</li> </ul>"},{"location":"eohippus-analyzer-ParseScopeJson/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-ParseScopeJson/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseScopeJson val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-ParseScopeJson/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseScopeJson val</li> </ul>"},{"location":"eohippus-analyzer-ParseScopeJson/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-QualifierScope/","title":"QualifierScope","text":"<p>[Source] <pre><code>primitive val QualifierScope\n</code></pre></p>"},{"location":"eohippus-analyzer-QualifierScope/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-QualifierScope/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: QualifierScope val^\n</code></pre>"},{"location":"eohippus-analyzer-QualifierScope/#returns","title":"Returns","text":"<ul> <li>QualifierScope val^</li> </ul>"},{"location":"eohippus-analyzer-QualifierScope/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-QualifierScope/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: QualifierScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-QualifierScope/#parameters","title":"Parameters","text":"<ul> <li>that: QualifierScope val</li> </ul>"},{"location":"eohippus-analyzer-QualifierScope/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-QualifierScope/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: QualifierScope val)\n: Bool val\n</code></pre>"},{"location":"eohippus-analyzer-QualifierScope/#parameters_1","title":"Parameters","text":"<ul> <li>that: QualifierScope val</li> </ul>"},{"location":"eohippus-analyzer-QualifierScope/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-analyzer-Scope/","title":"Scope","text":"<p>[Source] <pre><code>class val Scope\n</code></pre></p>"},{"location":"eohippus-analyzer-Scope/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-Scope/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  kind': (PackageScope val | FileScope val | ClassScope val | \n    MethodScope val | BlockScope val | QualifierScope val),\n  name': String val,\n  canonical_path': String val,\n  range': (USize val , USize val , USize val , \n    USize val),\n  index': USize val,\n  parent': (Scope box | None val) = reference)\n: Scope ref^\n</code></pre>"},{"location":"eohippus-analyzer-Scope/#parameters","title":"Parameters","text":"<ul> <li>kind': (PackageScope val | FileScope val | ClassScope val |      MethodScope val | BlockScope val | QualifierScope val)</li> <li>name': String val</li> <li>canonical_path': String val</li> <li>range': (USize val , USize val , USize val ,      USize val)</li> <li>index': USize val</li> <li>parent': (Scope box | None val) = reference</li> </ul>"},{"location":"eohippus-analyzer-Scope/#returns","title":"Returns","text":"<ul> <li>Scope ref^</li> </ul>"},{"location":"eohippus-analyzer-Scope/#public-fields","title":"Public fields","text":""},{"location":"eohippus-analyzer-Scope/#let-kind-packagescope-val-filescope-val-classscope-val-methodscope-val-blockscope-val-qualifierscope-val","title":"let kind: (PackageScope val | FileScope val | ClassScope val | MethodScope val | BlockScope val | QualifierScope val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#let-name-string-val","title":"let name: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#let-canonical_path-string-val","title":"let canonical_path: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#var-range-usize-val-usize-val-usize-val-usize-val","title":"var range: (USize val , USize val , USize val , USize val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#let-index-usize-val","title":"let index: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#var-parent-scope-box-none-val","title":"var parent: (Scope box | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#let-imports-arrayusize-val-string-val-string-val-ref","title":"let imports: Array[(USize val , String val , String val)] ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#let-definitions-hashmapstring-val-arrayusize-val-string-val-string-val-ref-hasheqstring-val-val-ref","title":"let definitions: HashMap[String val, Array[(USize val , String val , String val)] ref, HashEq[String val] val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#let-children-arrayscope-box-ref","title":"let children: Array[Scope box] ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-Scope/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-Scope/#get_child_range","title":"get_child_range","text":"<p>[Source]</p> <pre><code>fun box get_child_range()\n: (USize val , USize val , USize val , \n    USize val)\n</code></pre>"},{"location":"eohippus-analyzer-Scope/#returns_1","title":"Returns","text":"<ul> <li>(USize val , USize val , USize val ,      USize val)</li> </ul>"},{"location":"eohippus-analyzer-Scope/#add_import","title":"add_import","text":"<p>[Source]</p> <pre><code>fun ref add_import(\n  node_index: USize val,\n  identifier: String val,\n  path: String val)\n: None val\n</code></pre>"},{"location":"eohippus-analyzer-Scope/#parameters_1","title":"Parameters","text":"<ul> <li>node_index: USize val</li> <li>identifier: String val</li> <li>path: String val</li> </ul>"},{"location":"eohippus-analyzer-Scope/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-analyzer-Scope/#add_definition","title":"add_definition","text":"<p>[Source]</p> <pre><code>fun ref add_definition(\n  node_index: USize val,\n  identifier: String val,\n  docs: (ReadSeq[NodeWith[DocString val] val] val | String val))\n: None val\n</code></pre>"},{"location":"eohippus-analyzer-Scope/#parameters_2","title":"Parameters","text":"<ul> <li>node_index: USize val</li> <li>identifier: String val</li> <li>docs: (ReadSeq[NodeWith[DocString val] val] val | String val)</li> </ul>"},{"location":"eohippus-analyzer-Scope/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-analyzer-Scope/#add_child","title":"add_child","text":"<p>[Source]</p> <pre><code>fun ref add_child(\n  child: Scope box)\n: None val\n</code></pre>"},{"location":"eohippus-analyzer-Scope/#parameters_3","title":"Parameters","text":"<ul> <li>child: Scope box</li> </ul>"},{"location":"eohippus-analyzer-Scope/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-analyzer-Scope/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun box get_json()\n: Object box\n</code></pre>"},{"location":"eohippus-analyzer-Scope/#returns_5","title":"Returns","text":"<ul> <li>Object box</li> </ul>"},{"location":"eohippus-analyzer-ScopeItem/","title":"ScopeItem","text":"<p>[Source]</p> <p>Node index, identifier, path/docstring</p> <pre><code>type ScopeItem is\n  (USize val , String val , String val)\n</code></pre>"},{"location":"eohippus-analyzer-ScopeItem/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(USize val , String val , String val)</li> </ul>"},{"location":"eohippus-analyzer-ScopeKind/","title":"ScopeKind","text":"<p>[Source] <pre><code>type ScopeKind is\n  (PackageScope val | FileScope val | ClassScope val | MethodScope val | BlockScope val | QualifierScope val)\n</code></pre></p>"},{"location":"eohippus-analyzer-ScopeKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(PackageScope val | FileScope val | ClassScope val | MethodScope val | BlockScope val | QualifierScope val)</li> </ul>"},{"location":"eohippus-analyzer-ScopeState/","title":"ScopeState","text":"<p>[Source] <pre><code>class ref ScopeState\n</code></pre></p>"},{"location":"eohippus-analyzer-ScopeState/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-ScopeState/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  scope': Scope ref)\n: ScopeState ref^\n</code></pre>"},{"location":"eohippus-analyzer-ScopeState/#parameters","title":"Parameters","text":"<ul> <li>scope': Scope ref</li> </ul>"},{"location":"eohippus-analyzer-ScopeState/#returns","title":"Returns","text":"<ul> <li>ScopeState ref^</li> </ul>"},{"location":"eohippus-analyzer-ScopeState/#public-fields","title":"Public fields","text":""},{"location":"eohippus-analyzer-ScopeState/#let-node_scope-scope-ref","title":"let node_scope: Scope ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-ScopeState/#var-cur_scope-scope-ref","title":"var cur_scope: Scope ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-ScopeVisitor/","title":"ScopeVisitor","text":"<p>[Source] <pre><code>class ref ScopeVisitor is\n  Visitor[ScopeState ref] ref\n</code></pre></p>"},{"location":"eohippus-analyzer-ScopeVisitor/#implements","title":"Implements","text":"<ul> <li>Visitor[ScopeState ref] ref</li> </ul>"},{"location":"eohippus-analyzer-ScopeVisitor/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-ScopeVisitor/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  canonical_path: String val,\n  node_indices: HashMap[Node val, USize val, HashIs[Node val] val] val)\n: ScopeVisitor ref^\n</code></pre>"},{"location":"eohippus-analyzer-ScopeVisitor/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>canonical_path: String val</li> <li>node_indices: HashMap[Node val, USize val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-analyzer-ScopeVisitor/#returns","title":"Returns","text":"<ul> <li>ScopeVisitor ref^</li> </ul>"},{"location":"eohippus-analyzer-ScopeVisitor/#public-fields","title":"Public fields","text":""},{"location":"eohippus-analyzer-ScopeVisitor/#let-file_scope-scope-ref","title":"let file_scope: Scope ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-ScopeVisitor/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-ScopeVisitor/#visit_pre","title":"visit_pre","text":"<p>[Source]</p> <pre><code>fun ref visit_pre(\n  parent_state: ScopeState ref,\n  node: Node val,\n  path: (Cons[Node val] val | Nil[Node val] val),\n  errors: Array[(Node val , String val)] iso)\n: (ScopeState ref , Array[(Node val , String val)] iso^)\n</code></pre>"},{"location":"eohippus-analyzer-ScopeVisitor/#parameters_1","title":"Parameters","text":"<ul> <li>parent_state: ScopeState ref</li> <li>node: Node val</li> <li>path: (Cons[Node val] val | Nil[Node val] val)</li> <li>errors: Array[(Node val , String val)] iso</li> </ul>"},{"location":"eohippus-analyzer-ScopeVisitor/#returns_1","title":"Returns","text":"<ul> <li>(ScopeState ref , Array[(Node val , String val)] iso^)</li> </ul>"},{"location":"eohippus-analyzer-ScopeVisitor/#visit_post","title":"visit_post","text":"<p>[Source]</p> <pre><code>fun ref visit_post(\n  node_state: ScopeState ref,\n  node: Node val,\n  path: (Cons[Node val] val | Nil[Node val] val),\n  errors: Array[(Node val , String val)] iso,\n  child_states: (ReadSeq[ScopeState ref] box | None val),\n  new_children: (ReadSeq[Node val] val | None val),\n  update_map: (HashMap[Node val, Node val, HashIs[Node val] val] val | None val))\n: (ScopeState ref , (Node val | None val) , Array[(Node val , String val)] iso^)\n</code></pre>"},{"location":"eohippus-analyzer-ScopeVisitor/#parameters_2","title":"Parameters","text":"<ul> <li>node_state: ScopeState ref</li> <li>node: Node val</li> <li>path: (Cons[Node val] val | Nil[Node val] val)</li> <li>errors: Array[(Node val , String val)] iso</li> <li>child_states: (ReadSeq[ScopeState ref] box | None val)</li> <li>new_children: (ReadSeq[Node val] val | None val)</li> <li>update_map: (HashMap[Node val, Node val, HashIs[Node val] val] val | None val)</li> </ul>"},{"location":"eohippus-analyzer-ScopeVisitor/#returns_2","title":"Returns","text":"<ul> <li>(ScopeState ref , (Node val | None val) , Array[(Node val , String val)] iso^)</li> </ul>"},{"location":"eohippus-analyzer-Scoper/","title":"Scoper","text":"<p>[Source] <pre><code>actor tag Scoper\n</code></pre></p>"},{"location":"eohippus-analyzer-Scoper/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-Scoper/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  log: Logger[String val] val,\n  notify: _ScoperNotify tag)\n: Scoper tag^\n</code></pre>"},{"location":"eohippus-analyzer-Scoper/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>notify: _ScoperNotify tag</li> </ul>"},{"location":"eohippus-analyzer-Scoper/#returns","title":"Returns","text":"<ul> <li>Scoper tag^</li> </ul>"},{"location":"eohippus-analyzer-Scoper/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-analyzer-Scoper/#scope_syntax_tree","title":"scope_syntax_tree","text":"<p>[Source]</p> <pre><code>be scope_syntax_tree(\n  task_id: USize val,\n  canonical_path: String val,\n  syntax_tree: Node val,\n  node_indices: HashMap[Node val, USize val, HashIs[Node val] val] val)\n</code></pre>"},{"location":"eohippus-analyzer-Scoper/#parameters_1","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>syntax_tree: Node val</li> <li>node_indices: HashMap[Node val, USize val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-analyzer-SrcFileItem/","title":"SrcFileItem","text":"<p>[Source] <pre><code>class ref SrcFileItem\n</code></pre></p>"},{"location":"eohippus-analyzer-SrcFileItem/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-SrcFileItem/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  canonical_path': String val)\n: SrcFileItem ref^\n</code></pre>"},{"location":"eohippus-analyzer-SrcFileItem/#parameters","title":"Parameters","text":"<ul> <li>canonical_path': String val</li> </ul>"},{"location":"eohippus-analyzer-SrcFileItem/#returns","title":"Returns","text":"<ul> <li>SrcFileItem ref^</li> </ul>"},{"location":"eohippus-analyzer-SrcFileItem/#public-fields","title":"Public fields","text":""},{"location":"eohippus-analyzer-SrcFileItem/#let-canonical_path-string-val","title":"let canonical_path: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-storage_prefix-string-val","title":"var storage_prefix: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-parent_package-srcpackageitem-ref-none-val","title":"var parent_package: (SrcPackageItem ref | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#let-dependencies-arraysrcfileitem-ref-srcpackageitem-ref-ref","title":"let dependencies: Array[(SrcFileItem ref | SrcPackageItem ref)] ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-task_id-usize-val","title":"var task_id: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-state-analysisstart-val-analysisparsing-val-analysisscoping-val-analysislinting-val-analysisuptodate-val-analysiserror-val","title":"var state: (AnalysisStart val | AnalysisParsing val | AnalysisScoping val | AnalysisLinting val | AnalysisUpToDate val | AnalysisError val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-is_open-bool-val","title":"var is_open: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-schedule-i64-val-i64-val","title":"var schedule: (I64 val , I64 val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-parse-parseru8-val-data-val-node-val-tag-none-val","title":"var parse: (Parser[U8 val, Data val, Node val] tag | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-syntax_tree-node-val-none-val","title":"var syntax_tree: (Node val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-scope-scope-val-none-val","title":"var scope: (Scope val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-node_indices-hashmapnode-val-usize-val-hashisnode-val-val-val","title":"var node_indices: HashMap[Node val, USize val, HashIs[Node val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-nodes_by_index-hashmapusize-val-node-val-hashequsize-val-val-val","title":"var nodes_by_index: HashMap[USize val, Node val, HashEq[USize val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-scope_indices-hashmapscope-val-usize-val-hashisscope-val-val-val","title":"var scope_indices: HashMap[Scope val, USize val, HashIs[Scope val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#var-scopes_by_index-hashmapusize-val-scope-val-hashequsize-val-val-val","title":"var scopes_by_index: HashMap[USize val, Scope val, HashEq[USize val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcFileItem/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-SrcFileItem/#path","title":"path","text":"<p>[Source]</p> <pre><code>fun box path()\n: String val\n</code></pre>"},{"location":"eohippus-analyzer-SrcFileItem/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-analyzer-SrcFileItem/#state_value","title":"state_value","text":"<p>[Source]</p> <pre><code>fun box state_value()\n: USize val\n</code></pre>"},{"location":"eohippus-analyzer-SrcFileItem/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-analyzer-SrcFileItem/#make_indices","title":"make_indices","text":"<p>[Source]</p> <pre><code>fun ref make_indices()\n: None val\n</code></pre>"},{"location":"eohippus-analyzer-SrcFileItem/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-analyzer-SrcItem/","title":"SrcItem","text":"<p>[Source] <pre><code>type SrcItem is\n  (SrcFileItem ref | SrcPackageItem ref)\n</code></pre></p>"},{"location":"eohippus-analyzer-SrcItem/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(SrcFileItem ref | SrcPackageItem ref)</li> </ul>"},{"location":"eohippus-analyzer-SrcItemState/","title":"SrcItemState","text":"<p>[Source] <pre><code>type SrcItemState is\n  (AnalysisStart val | AnalysisParsing val | AnalysisScoping val | AnalysisLinting val | AnalysisUpToDate val | AnalysisError val)\n</code></pre></p>"},{"location":"eohippus-analyzer-SrcItemState/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(AnalysisStart val | AnalysisParsing val | AnalysisScoping val | AnalysisLinting val | AnalysisUpToDate val | AnalysisError val)</li> </ul>"},{"location":"eohippus-analyzer-SrcPackageItem/","title":"SrcPackageItem","text":"<p>[Source] <pre><code>class ref SrcPackageItem\n</code></pre></p>"},{"location":"eohippus-analyzer-SrcPackageItem/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-SrcPackageItem/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  canonical_path': String val)\n: SrcPackageItem ref^\n</code></pre>"},{"location":"eohippus-analyzer-SrcPackageItem/#parameters","title":"Parameters","text":"<ul> <li>canonical_path': String val</li> </ul>"},{"location":"eohippus-analyzer-SrcPackageItem/#returns","title":"Returns","text":"<ul> <li>SrcPackageItem ref^</li> </ul>"},{"location":"eohippus-analyzer-SrcPackageItem/#public-fields","title":"Public fields","text":""},{"location":"eohippus-analyzer-SrcPackageItem/#let-canonical_path-string-val","title":"let canonical_path: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcPackageItem/#var-storage_prefix-string-val","title":"var storage_prefix: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcPackageItem/#var-is_workspace-bool-val","title":"var is_workspace: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcPackageItem/#var-parent_package-srcpackageitem-ref-none-val","title":"var parent_package: (SrcPackageItem ref | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcPackageItem/#let-dependencies-arraysrcfileitem-ref-srcpackageitem-ref-ref","title":"let dependencies: Array[(SrcFileItem ref | SrcPackageItem ref)] ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcPackageItem/#var-task_id-usize-val","title":"var task_id: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcPackageItem/#var-state-analysisstart-val-analysisparsing-val-analysisscoping-val-analysislinting-val-analysisuptodate-val-analysiserror-val","title":"var state: (AnalysisStart val | AnalysisParsing val | AnalysisScoping val | AnalysisLinting val | AnalysisUpToDate val | AnalysisError val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-SrcPackageItem/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-analyzer-SrcPackageItem/#path","title":"path","text":"<p>[Source]</p> <pre><code>fun box path()\n: String val\n</code></pre>"},{"location":"eohippus-analyzer-SrcPackageItem/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-analyzer-SrcPackageItem/#state_value","title":"state_value","text":"<p>[Source]</p> <pre><code>fun box state_value()\n: USize val\n</code></pre>"},{"location":"eohippus-analyzer-SrcPackageItem/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-analyzer-SrcRange/","title":"SrcRange","text":"<p>[Source]</p> <p>Line, Column, Next line, Next column</p> <pre><code>type SrcRange is\n  (USize val , USize val , USize val , USize val)\n</code></pre>"},{"location":"eohippus-analyzer-SrcRange/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(USize val , USize val , USize val , USize val)</li> </ul>"},{"location":"eohippus-analyzer-tasks--index/","title":"Package","text":"<p>No package doc string provided for eohippus/analyzer/tasks.</p>"},{"location":"eohippus-analyzer-tasks--index/#public-types","title":"Public Types","text":"<ul> <li>actor FindDefinition</li> <li>interface FindDefinitionNotify</li> <li>class SearchFileItem</li> </ul>"},{"location":"eohippus-analyzer-tasks-FindDefinition/","title":"FindDefinition","text":"<p>[Source] <pre><code>actor tag FindDefinition is\n  AnalyzerRequestNotify tag\n</code></pre></p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#implements","title":"Implements","text":"<ul> <li>AnalyzerRequestNotify tag</li> </ul>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-tasks-FindDefinition/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  log': Logger[String val] val,\n  analyzer': Analyzer tag,\n  task_id': USize val,\n  canonical_path': String val,\n  line': USize val,\n  column': USize val,\n  notify': FindDefinitionNotify tag)\n: FindDefinition tag^\n</code></pre>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#parameters","title":"Parameters","text":"<ul> <li>log': Logger[String val] val</li> <li>analyzer': Analyzer tag</li> <li>task_id': USize val</li> <li>canonical_path': String val</li> <li>line': USize val</li> <li>column': USize val</li> <li>notify': FindDefinitionNotify tag</li> </ul>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#returns","title":"Returns","text":"<ul> <li>FindDefinition tag^</li> </ul>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#public-fields","title":"Public fields","text":""},{"location":"eohippus-analyzer-tasks-FindDefinition/#let-log-loggerstring-val-val","title":"let log: Logger[String val] val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#let-analyzer-analyzer-tag","title":"let analyzer: Analyzer tag","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#let-task_id-usize-val","title":"let task_id: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#let-canonical_path-string-val","title":"let canonical_path: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#let-line-usize-val","title":"let line: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#let-column-usize-val","title":"let column: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#let-notify-finddefinitionnotify-tag","title":"let notify: FindDefinitionNotify tag","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#var-span-string-val","title":"var span: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#let-paths_to_search-arraystring-val-searchfileitem-ref-none-val-ref","title":"let paths_to_search: Array[(String val , (SearchFileItem ref | None val))] ref","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#var-finished-bool-val","title":"var finished: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-analyzer-tasks-FindDefinition/#request_succeeded","title":"request_succeeded","text":"<p>[Source]</p> <pre><code>be request_succeeded(\n  task_id': USize val,\n  canonical_path': String val,\n  syntax_tree': (Node val | None val),\n  nodes_by_index': HashMap[USize val, Node val, HashEq[USize val] val] val,\n  scope': Scope val)\n</code></pre>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#parameters_1","title":"Parameters","text":"<ul> <li>task_id': USize val</li> <li>canonical_path': String val</li> <li>syntax_tree': (Node val | None val)</li> <li>nodes_by_index': HashMap[USize val, Node val, HashEq[USize val] val] val</li> <li>scope': Scope val</li> </ul>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#request_failed","title":"request_failed","text":"<p>[Source]</p> <pre><code>be request_failed(\n  task_id': USize val,\n  canonical_path': String val,\n  message': String val)\n</code></pre>"},{"location":"eohippus-analyzer-tasks-FindDefinition/#parameters_2","title":"Parameters","text":"<ul> <li>task_id': USize val</li> <li>canonical_path': String val</li> <li>message': String val</li> </ul>"},{"location":"eohippus-analyzer-tasks-FindDefinitionNotify/","title":"FindDefinitionNotify","text":"<p>[Source] <pre><code>interface tag FindDefinitionNotify\n</code></pre></p>"},{"location":"eohippus-analyzer-tasks-FindDefinitionNotify/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-analyzer-tasks-FindDefinitionNotify/#definition_found","title":"definition_found","text":"<p>[Source]</p> <pre><code>be definition_found(\n  task_id: USize val,\n  canonical_path: String val,\n  range: (USize val , USize val , USize val , \n    USize val))\n</code></pre>"},{"location":"eohippus-analyzer-tasks-FindDefinitionNotify/#parameters","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>range: (USize val , USize val , USize val ,      USize val)</li> </ul>"},{"location":"eohippus-analyzer-tasks-FindDefinitionNotify/#definition_failed","title":"definition_failed","text":"<p>[Source]</p> <pre><code>be definition_failed(\n  task_id: USize val,\n  message: String val)\n</code></pre>"},{"location":"eohippus-analyzer-tasks-FindDefinitionNotify/#parameters_1","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>message: String val</li> </ul>"},{"location":"eohippus-analyzer-tasks-SearchFileItem/","title":"SearchFileItem","text":"<p>[Source] <pre><code>class ref SearchFileItem\n</code></pre></p>"},{"location":"eohippus-analyzer-tasks-SearchFileItem/#constructors","title":"Constructors","text":""},{"location":"eohippus-analyzer-tasks-SearchFileItem/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  canonical_path': String val,\n  syntax_tree': (Node val | None val),\n  nodes_by_index': HashMap[USize val, Node val, HashEq[USize val] val] val,\n  scope': Scope val)\n: SearchFileItem ref^\n</code></pre>"},{"location":"eohippus-analyzer-tasks-SearchFileItem/#parameters","title":"Parameters","text":"<ul> <li>canonical_path': String val</li> <li>syntax_tree': (Node val | None val)</li> <li>nodes_by_index': HashMap[USize val, Node val, HashEq[USize val] val] val</li> <li>scope': Scope val</li> </ul>"},{"location":"eohippus-analyzer-tasks-SearchFileItem/#returns","title":"Returns","text":"<ul> <li>SearchFileItem ref^</li> </ul>"},{"location":"eohippus-analyzer-tasks-SearchFileItem/#public-fields","title":"Public fields","text":""},{"location":"eohippus-analyzer-tasks-SearchFileItem/#let-canonical_path-string-val","title":"let canonical_path: String val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-SearchFileItem/#let-syntax_tree-node-val-none-val","title":"let syntax_tree: (Node val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-SearchFileItem/#let-nodes_by_index-hashmapusize-val-node-val-hashequsize-val-val-val","title":"let nodes_by_index: HashMap[USize val, Node val, HashEq[USize val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-analyzer-tasks-SearchFileItem/#let-scope-scope-val","title":"let scope: Scope val","text":"<p>[Source]</p>"},{"location":"eohippus-ast--index/","title":"Package","text":"<p>This package provides an abstract syntax tree for Pony code.</p> <p>The AST is built from NodeWith objects that contain semantic information about their children.</p> <p>A Pony source file is represented by a node with SrcFile data.</p>"},{"location":"eohippus-ast--index/#public-types","title":"Public Types","text":"<ul> <li>class Annotation</li> <li>primitive BinaryInteger</li> <li>class CallArgs</li> <li>primitive CharEscaped</li> <li>primitive CharLiteral</li> <li>type CharLiteralKind</li> <li>primitive CharUnicode</li> <li>type ChildUpdateMap</li> <li>primitive DecimalInteger</li> <li>primitive Desugared</li> <li>class DocString</li> <li>primitive EndOfFileTrivia</li> <li>primitive EndOfLineTrivia</li> <li>class ErrorSection</li> <li>class ExpArray</li> <li>class ExpAtom</li> <li>class ExpCall</li> <li>class ExpConsume</li> <li>class ExpDecl</li> <li>class ExpFfi</li> <li>class ExpFor</li> <li>class ExpGeneric</li> <li>class ExpHash</li> <li>class ExpIf</li> <li>class ExpJump</li> <li>class ExpLambda</li> <li>class ExpMatch</li> <li>class ExpObject</li> <li>class ExpOperation</li> <li>class ExpRecover</li> <li>class ExpRepeat</li> <li>class ExpSequence</li> <li>class ExpTry</li> <li>class ExpTuple</li> <li>class ExpWhile</li> <li>class ExpWith</li> <li>type Expression</li> <li>primitive HexadecimalInteger</li> <li>class Identifier</li> <li>class IfCondition</li> <li>primitive IfDef</li> <li>primitive IfExp</li> <li>type IfKind</li> <li>primitive IfType</li> <li>primitive Inherited</li> <li>class Keyword</li> <li>primitive Keywords</li> <li>primitive LineCommentTrivia</li> <li>class LiteralBool</li> <li>class LiteralChar</li> <li>class LiteralFloat</li> <li>class LiteralInteger</li> <li>type LiteralIntegerKind</li> <li>class LiteralString</li> <li>class MatchCase</li> <li>class MethodParam</li> <li>class MethodParams</li> <li>primitive NestedCommentTrivia</li> <li>trait Node</li> <li>trait NodeData</li> <li>trait NodeDataWithValue</li> <li>type NodeSeq</li> <li>type NodeSeqWith</li> <li>class NodeWith</li> <li>primitive ParseAnnotation</li> <li>primitive ParseCallArgs</li> <li>primitive ParseDocString</li> <li>primitive ParseErrorSection</li> <li>primitive ParseExpArray</li> <li>primitive ParseExpAtom</li> <li>primitive ParseExpCall</li> <li>primitive ParseExpConsume</li> <li>primitive ParseExpDecl</li> <li>primitive ParseExpFfi</li> <li>primitive ParseExpFor</li> <li>primitive ParseExpGeneric</li> <li>primitive ParseExpHash</li> <li>primitive ParseExpIf</li> <li>primitive ParseExpJump</li> <li>primitive ParseExpLambda</li> <li>primitive ParseExpMatch</li> <li>primitive ParseExpObject</li> <li>primitive ParseExpOperation</li> <li>primitive ParseExpRecover</li> <li>primitive ParseExpRepeat</li> <li>primitive ParseExpSequence</li> <li>primitive ParseExpTry</li> <li>primitive ParseExpTuple</li> <li>primitive ParseExpWhile</li> <li>primitive ParseExpWith</li> <li>primitive ParseIdentifier</li> <li>primitive ParseIfCondition</li> <li>primitive ParseKeyword</li> <li>primitive ParseLiteralBool</li> <li>primitive ParseLiteralChar</li> <li>primitive ParseLiteralFloat</li> <li>primitive ParseLiteralInteger</li> <li>primitive ParseLiteralString</li> <li>primitive ParseMatchCase</li> <li>primitive ParseMethodParam</li> <li>primitive ParseMethodParams</li> <li>primitive ParseNode</li> <li>primitive ParseSpan</li> <li>primitive ParseSrcFile</li> <li>primitive ParseToken</li> <li>primitive ParseTrivia</li> <li>primitive ParseTuplePattern</li> <li>primitive ParseTypeArgs</li> <li>primitive ParseTypeArrow</li> <li>primitive ParseTypeAtom</li> <li>primitive ParseTypeInfix</li> <li>primitive ParseTypeLambda</li> <li>primitive ParseTypeNominal</li> <li>primitive ParseTypeParam</li> <li>primitive ParseTypeParams</li> <li>primitive ParseTypeTuple</li> <li>primitive ParseTypedefAlias</li> <li>primitive ParseTypedefClass</li> <li>primitive ParseTypedefField</li> <li>primitive ParseTypedefMembers</li> <li>primitive ParseTypedefMethod</li> <li>primitive ParseTypedefPrimitive</li> <li>primitive ParseUsingFFI</li> <li>primitive ParseUsingPony</li> <li>primitive ParseWithElement</li> <li>type Path</li> <li>primitive Reified</li> <li>class Span</li> <li>type SrcDerivation</li> <li>class SrcFile</li> <li>class SrcInfo</li> <li>primitive StringLiteral</li> <li>type StringLiteralKind</li> <li>primitive StringTripleQuote</li> <li>primitive SyntaxTree</li> <li>class Token</li> <li>primitive Tokens</li> <li>type TraverseError</li> <li>class Trivia</li> <li>type TriviaKind</li> <li>class TuplePattern</li> <li>class TypeArgs</li> <li>class TypeArrow</li> <li>class TypeAtom</li> <li>class TypeInfix</li> <li>class TypeLambda</li> <li>class TypeNominal</li> <li>class TypeParam</li> <li>class TypeParams</li> <li>class TypeTuple</li> <li>type TypeType</li> <li>type Typedef</li> <li>class TypedefAlias</li> <li>class TypedefClass</li> <li>class TypedefField</li> <li>class TypedefMembers</li> <li>class TypedefMethod</li> <li>class TypedefPrimitive</li> <li>type Using</li> <li>class UsingFFI</li> <li>class UsingPony</li> <li>interface Visitor</li> <li>primitive WhiteSpaceTrivia</li> <li>class WithElement</li> </ul>"},{"location":"eohippus-ast-Annotation/","title":"Annotation","text":"<p>[Source]</p> <p>Contains a list of identifiers.</p> <pre><code>class val Annotation is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-Annotation/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Annotation/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Annotation/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  identifiers': ReadSeq[NodeWith[Identifier val] val] val)\n: Annotation val^\n</code></pre>"},{"location":"eohippus-ast-Annotation/#parameters","title":"Parameters","text":"<ul> <li>identifiers': ReadSeq[NodeWith[Identifier val] val] val</li> </ul>"},{"location":"eohippus-ast-Annotation/#returns","title":"Returns","text":"<ul> <li>Annotation val^</li> </ul>"},{"location":"eohippus-ast-Annotation/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-Annotation/#let-identifiers-readseqnodewithidentifier-val-val-val","title":"let identifiers: ReadSeq[NodeWith[Identifier val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-Annotation/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Annotation/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-Annotation/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-Annotation/#returns_1","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Annotation/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Annotation/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Annotation/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-Annotation/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-Annotation/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-BinaryInteger/","title":"BinaryInteger","text":"<p>[Source] <pre><code>primitive val BinaryInteger\n</code></pre></p>"},{"location":"eohippus-ast-BinaryInteger/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-BinaryInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BinaryInteger val^\n</code></pre>"},{"location":"eohippus-ast-BinaryInteger/#returns","title":"Returns","text":"<ul> <li>BinaryInteger val^</li> </ul>"},{"location":"eohippus-ast-BinaryInteger/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-BinaryInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: BinaryInteger val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-BinaryInteger/#parameters","title":"Parameters","text":"<ul> <li>that: BinaryInteger val</li> </ul>"},{"location":"eohippus-ast-BinaryInteger/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-BinaryInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: BinaryInteger val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-BinaryInteger/#parameters_1","title":"Parameters","text":"<ul> <li>that: BinaryInteger val</li> </ul>"},{"location":"eohippus-ast-BinaryInteger/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-CallArgs/","title":"CallArgs","text":"<p>[Source]</p> <p>The arguments (actual parameters) of a method call. - <code>pos</code>: positional arguments. - <code>named</code>: named arguments (should all be assignment expressions).</p> <pre><code>class val CallArgs is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-CallArgs/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-CallArgs/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-CallArgs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  pos': ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val,\n  named': ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val)\n: CallArgs val^\n</code></pre>"},{"location":"eohippus-ast-CallArgs/#parameters","title":"Parameters","text":"<ul> <li>pos': ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val</li> <li>named': ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val</li> </ul>"},{"location":"eohippus-ast-CallArgs/#returns","title":"Returns","text":"<ul> <li>CallArgs val^</li> </ul>"},{"location":"eohippus-ast-CallArgs/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-CallArgs/#let-pos-readseqnodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-val","title":"let pos: ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-CallArgs/#let-named-readseqnodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-val","title":"let named: ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-CallArgs/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-CallArgs/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-CallArgs/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-CallArgs/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-CallArgs/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-CallArgs/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-CallArgs/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-CallArgs/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-CallArgs/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-CharEscaped/","title":"CharEscaped","text":"<p>[Source] <pre><code>primitive val CharEscaped\n</code></pre></p>"},{"location":"eohippus-ast-CharEscaped/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-CharEscaped/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CharEscaped val^\n</code></pre>"},{"location":"eohippus-ast-CharEscaped/#returns","title":"Returns","text":"<ul> <li>CharEscaped val^</li> </ul>"},{"location":"eohippus-ast-CharEscaped/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-CharEscaped/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: CharEscaped val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-CharEscaped/#parameters","title":"Parameters","text":"<ul> <li>that: CharEscaped val</li> </ul>"},{"location":"eohippus-ast-CharEscaped/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-CharEscaped/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: CharEscaped val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-CharEscaped/#parameters_1","title":"Parameters","text":"<ul> <li>that: CharEscaped val</li> </ul>"},{"location":"eohippus-ast-CharEscaped/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-CharLiteral/","title":"CharLiteral","text":"<p>[Source] <pre><code>primitive val CharLiteral\n</code></pre></p>"},{"location":"eohippus-ast-CharLiteral/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-CharLiteral/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CharLiteral val^\n</code></pre>"},{"location":"eohippus-ast-CharLiteral/#returns","title":"Returns","text":"<ul> <li>CharLiteral val^</li> </ul>"},{"location":"eohippus-ast-CharLiteral/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-CharLiteral/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: CharLiteral val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-CharLiteral/#parameters","title":"Parameters","text":"<ul> <li>that: CharLiteral val</li> </ul>"},{"location":"eohippus-ast-CharLiteral/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-CharLiteral/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: CharLiteral val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-CharLiteral/#parameters_1","title":"Parameters","text":"<ul> <li>that: CharLiteral val</li> </ul>"},{"location":"eohippus-ast-CharLiteral/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-CharLiteralKind/","title":"CharLiteralKind","text":"<p>[Source] <pre><code>type CharLiteralKind is\n  (CharLiteral val | CharEscaped val | CharUnicode val)\n</code></pre></p>"},{"location":"eohippus-ast-CharLiteralKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(CharLiteral val | CharEscaped val | CharUnicode val)</li> </ul>"},{"location":"eohippus-ast-CharUnicode/","title":"CharUnicode","text":"<p>[Source] <pre><code>primitive val CharUnicode\n</code></pre></p>"},{"location":"eohippus-ast-CharUnicode/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-CharUnicode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CharUnicode val^\n</code></pre>"},{"location":"eohippus-ast-CharUnicode/#returns","title":"Returns","text":"<ul> <li>CharUnicode val^</li> </ul>"},{"location":"eohippus-ast-CharUnicode/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-CharUnicode/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: CharUnicode val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-CharUnicode/#parameters","title":"Parameters","text":"<ul> <li>that: CharUnicode val</li> </ul>"},{"location":"eohippus-ast-CharUnicode/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-CharUnicode/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: CharUnicode val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-CharUnicode/#parameters_1","title":"Parameters","text":"<ul> <li>that: CharUnicode val</li> </ul>"},{"location":"eohippus-ast-CharUnicode/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ChildUpdateMap/","title":"ChildUpdateMap","text":"<p>[Source] <pre><code>type ChildUpdateMap is\n  HashMap[Node val, Node val, HashIs[Node val] val] val\n</code></pre></p>"},{"location":"eohippus-ast-ChildUpdateMap/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-DecimalInteger/","title":"DecimalInteger","text":"<p>[Source] <pre><code>primitive val DecimalInteger\n</code></pre></p>"},{"location":"eohippus-ast-DecimalInteger/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-DecimalInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DecimalInteger val^\n</code></pre>"},{"location":"eohippus-ast-DecimalInteger/#returns","title":"Returns","text":"<ul> <li>DecimalInteger val^</li> </ul>"},{"location":"eohippus-ast-DecimalInteger/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-DecimalInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DecimalInteger val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-DecimalInteger/#parameters","title":"Parameters","text":"<ul> <li>that: DecimalInteger val</li> </ul>"},{"location":"eohippus-ast-DecimalInteger/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-DecimalInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DecimalInteger val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-DecimalInteger/#parameters_1","title":"Parameters","text":"<ul> <li>that: DecimalInteger val</li> </ul>"},{"location":"eohippus-ast-DecimalInteger/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Desugared/","title":"Desugared","text":"<p>[Source] <pre><code>primitive val Desugared\n</code></pre></p>"},{"location":"eohippus-ast-Desugared/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Desugared/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Desugared val^\n</code></pre>"},{"location":"eohippus-ast-Desugared/#returns","title":"Returns","text":"<ul> <li>Desugared val^</li> </ul>"},{"location":"eohippus-ast-Desugared/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Desugared/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Desugared val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Desugared/#parameters","title":"Parameters","text":"<ul> <li>that: Desugared val</li> </ul>"},{"location":"eohippus-ast-Desugared/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Desugared/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Desugared val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Desugared/#parameters_1","title":"Parameters","text":"<ul> <li>that: Desugared val</li> </ul>"},{"location":"eohippus-ast-Desugared/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-DocString/","title":"DocString","text":"<p>[Source]</p> <p>Represents a doc string.</p> <pre><code>class val DocString is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-DocString/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-DocString/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-DocString/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  string': NodeWith[LiteralString val] val)\n: DocString val^\n</code></pre>"},{"location":"eohippus-ast-DocString/#parameters","title":"Parameters","text":"<ul> <li>string': NodeWith[LiteralString val] val</li> </ul>"},{"location":"eohippus-ast-DocString/#returns","title":"Returns","text":"<ul> <li>DocString val^</li> </ul>"},{"location":"eohippus-ast-DocString/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-DocString/#let-string-nodewithliteralstring-val-val","title":"let string: NodeWith[LiteralString val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-DocString/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-DocString/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-DocString/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-DocString/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-DocString/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-DocString/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-DocString/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-DocString/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-DocString/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-EndOfFileTrivia/","title":"EndOfFileTrivia","text":"<p>[Source] <pre><code>primitive val EndOfFileTrivia\n</code></pre></p>"},{"location":"eohippus-ast-EndOfFileTrivia/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-EndOfFileTrivia/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EndOfFileTrivia val^\n</code></pre>"},{"location":"eohippus-ast-EndOfFileTrivia/#returns","title":"Returns","text":"<ul> <li>EndOfFileTrivia val^</li> </ul>"},{"location":"eohippus-ast-EndOfFileTrivia/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-EndOfFileTrivia/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: EndOfFileTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-EndOfFileTrivia/#parameters","title":"Parameters","text":"<ul> <li>that: EndOfFileTrivia val</li> </ul>"},{"location":"eohippus-ast-EndOfFileTrivia/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-EndOfFileTrivia/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: EndOfFileTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-EndOfFileTrivia/#parameters_1","title":"Parameters","text":"<ul> <li>that: EndOfFileTrivia val</li> </ul>"},{"location":"eohippus-ast-EndOfFileTrivia/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-EndOfLineTrivia/","title":"EndOfLineTrivia","text":"<p>[Source] <pre><code>primitive val EndOfLineTrivia\n</code></pre></p>"},{"location":"eohippus-ast-EndOfLineTrivia/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-EndOfLineTrivia/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EndOfLineTrivia val^\n</code></pre>"},{"location":"eohippus-ast-EndOfLineTrivia/#returns","title":"Returns","text":"<ul> <li>EndOfLineTrivia val^</li> </ul>"},{"location":"eohippus-ast-EndOfLineTrivia/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-EndOfLineTrivia/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: EndOfLineTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-EndOfLineTrivia/#parameters","title":"Parameters","text":"<ul> <li>that: EndOfLineTrivia val</li> </ul>"},{"location":"eohippus-ast-EndOfLineTrivia/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-EndOfLineTrivia/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: EndOfLineTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-EndOfLineTrivia/#parameters_1","title":"Parameters","text":"<ul> <li>that: EndOfLineTrivia val</li> </ul>"},{"location":"eohippus-ast-EndOfLineTrivia/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ErrorSection/","title":"ErrorSection","text":"<p>[Source]</p> <p>Error sections are used to represent spans in the code where parsing has failed for some reason.  There is limited support for resuming parsing after an error section.</p> <pre><code>class val ErrorSection is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ErrorSection/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ErrorSection/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ErrorSection/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  message': String val)\n: ErrorSection val^\n</code></pre>"},{"location":"eohippus-ast-ErrorSection/#parameters","title":"Parameters","text":"<ul> <li>message': String val</li> </ul>"},{"location":"eohippus-ast-ErrorSection/#returns","title":"Returns","text":"<ul> <li>ErrorSection val^</li> </ul>"},{"location":"eohippus-ast-ErrorSection/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ErrorSection/#let-message-string-val","title":"let message: String val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ErrorSection/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ErrorSection/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ErrorSection/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ErrorSection/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ErrorSection/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ErrorSection/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ErrorSection/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ErrorSection/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ErrorSection/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpArray/","title":"ExpArray","text":"<p>[Source]</p> <p>An array literal. - <code>array_type</code>: the explicit type of the array elements, if any. - <code>body</code>: will usually be an <code>ExpSequence</code>.</p> <pre><code>class val ExpArray is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpArray/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpArray/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpArray/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  array_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val)\n: ExpArray val^\n</code></pre>"},{"location":"eohippus-ast-ExpArray/#parameters","title":"Parameters","text":"<ul> <li>array_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> </ul>"},{"location":"eohippus-ast-ExpArray/#returns","title":"Returns","text":"<ul> <li>ExpArray val^</li> </ul>"},{"location":"eohippus-ast-ExpArray/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpArray/#let-array_type-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let array_type: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpArray/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpArray/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpArray/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpArray/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpArray/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpArray/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpArray/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpArray/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpArray/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpArray/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpAtom/","title":"ExpAtom","text":"<p>[Source]</p> <p>A simple expression; can contain an identifier, a literal, a parenthesized expression or a control structure.</p> <pre><code>class val ExpAtom is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpAtom/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpAtom/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpAtom/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  body': Node val)\n: ExpAtom val^\n</code></pre>"},{"location":"eohippus-ast-ExpAtom/#parameters","title":"Parameters","text":"<ul> <li>body': Node val</li> </ul>"},{"location":"eohippus-ast-ExpAtom/#returns","title":"Returns","text":"<ul> <li>ExpAtom val^</li> </ul>"},{"location":"eohippus-ast-ExpAtom/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpAtom/#let-body-node-val","title":"let body: Node val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpAtom/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpAtom/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpAtom/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpAtom/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpAtom/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpAtom/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpAtom/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpAtom/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpAtom/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpCall/","title":"ExpCall","text":"<p>[Source]</p> <p>A method call. - <code>lhs</code>: the callee. - <code>args</code>: arguments. - <code>partial</code>: whether or not the call is partial.</p> <pre><code>class val ExpCall is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpCall/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpCall/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpCall/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  lhs': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  args': NodeWith[CallArgs val] val,\n  partial': Bool val)\n: ExpCall val^\n</code></pre>"},{"location":"eohippus-ast-ExpCall/#parameters","title":"Parameters","text":"<ul> <li>lhs': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>args': NodeWith[CallArgs val] val</li> <li>partial': Bool val</li> </ul>"},{"location":"eohippus-ast-ExpCall/#returns","title":"Returns","text":"<ul> <li>ExpCall val^</li> </ul>"},{"location":"eohippus-ast-ExpCall/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpCall/#let-lhs-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let lhs: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpCall/#let-args-nodewithcallargs-val-val","title":"let args: NodeWith[CallArgs val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpCall/#let-partial-bool-val","title":"let partial: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpCall/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpCall/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpCall/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpCall/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpCall/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpCall/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpCall/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpCall/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpCall/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpConsume/","title":"ExpConsume","text":"<p>[Source]</p> <p>A consume expression.</p> <pre><code>class val ExpConsume is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpConsume/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpConsume/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpConsume/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  cap': (NodeWith[Keyword val] val | None val),\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val)\n: ExpConsume val^\n</code></pre>"},{"location":"eohippus-ast-ExpConsume/#parameters","title":"Parameters","text":"<ul> <li>cap': (NodeWith[Keyword val] val | None val)</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> </ul>"},{"location":"eohippus-ast-ExpConsume/#returns","title":"Returns","text":"<ul> <li>ExpConsume val^</li> </ul>"},{"location":"eohippus-ast-ExpConsume/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpConsume/#let-cap-nodewithkeyword-val-val-none-val","title":"let cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpConsume/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpConsume/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpConsume/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpConsume/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpConsume/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpConsume/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpConsume/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpConsume/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpConsume/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpConsume/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpDecl/","title":"ExpDecl","text":"<p>[Source]</p> <p>An alias declaration.  Usually the LHS of an assignment expression. - <code>kind</code>: <code>let</code> or <code>var</code>. - <code>identifier</code>: the name of the binding. - <code>decl_type</code>: the type, if any.</p> <pre><code>class val ExpDecl is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpDecl/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpDecl/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpDecl/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  kind': NodeWith[Keyword val] val,\n  identifier': NodeWith[Identifier val] val,\n  decl_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val))\n: ExpDecl val^\n</code></pre>"},{"location":"eohippus-ast-ExpDecl/#parameters","title":"Parameters","text":"<ul> <li>kind': NodeWith[Keyword val] val</li> <li>identifier': NodeWith[Identifier val] val</li> <li>decl_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpDecl/#returns","title":"Returns","text":"<ul> <li>ExpDecl val^</li> </ul>"},{"location":"eohippus-ast-ExpDecl/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpDecl/#let-kind-nodewithkeyword-val-val","title":"let kind: NodeWith[Keyword val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpDecl/#let-identifier-nodewithidentifier-val-val","title":"let identifier: NodeWith[Identifier val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpDecl/#let-decl_type-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let decl_type: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpDecl/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpDecl/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpDecl/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpDecl/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpDecl/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpDecl/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpDecl/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpDecl/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpDecl/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpFfi/","title":"ExpFfi","text":"<p>[Source]</p> <p>An FFI call.</p> <pre><code>class val ExpFfi is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpFfi/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpFfi/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpFfi/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  identifier': (NodeWith[Identifier val] val | NodeWith[LiteralString val] val),\n  type_args': (NodeWith[TypeArgs val] val | None val),\n  call_args': NodeWith[CallArgs val] val,\n  partial': Bool val)\n: ExpFfi val^\n</code></pre>"},{"location":"eohippus-ast-ExpFfi/#parameters","title":"Parameters","text":"<ul> <li>identifier': (NodeWith[Identifier val] val | NodeWith[LiteralString val] val)</li> <li>type_args': (NodeWith[TypeArgs val] val | None val)</li> <li>call_args': NodeWith[CallArgs val] val</li> <li>partial': Bool val</li> </ul>"},{"location":"eohippus-ast-ExpFfi/#returns","title":"Returns","text":"<ul> <li>ExpFfi val^</li> </ul>"},{"location":"eohippus-ast-ExpFfi/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpFfi/#let-identifier-nodewithidentifier-val-val-nodewithliteralstring-val-val","title":"let identifier: (NodeWith[Identifier val] val | NodeWith[LiteralString val] val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpFfi/#let-type_args-nodewithtypeargs-val-val-none-val","title":"let type_args: (NodeWith[TypeArgs val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpFfi/#let-call_args-nodewithcallargs-val-val","title":"let call_args: NodeWith[CallArgs val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpFfi/#let-partial-bool-val","title":"let partial: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpFfi/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpFfi/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpFfi/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpFfi/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpFfi/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpFfi/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpFfi/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpFfi/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpFfi/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpFor/","title":"ExpFor","text":"<p>[Source]</p> <p>A <code>for</code> loop.</p> <pre><code>class val ExpFor is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpFor/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpFor/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpFor/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  pattern': NodeWith[TuplePattern val] val,\n  sequence': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: ExpFor val^\n</code></pre>"},{"location":"eohippus-ast-ExpFor/#parameters","title":"Parameters","text":"<ul> <li>pattern': NodeWith[TuplePattern val] val</li> <li>sequence': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpFor/#returns","title":"Returns","text":"<ul> <li>ExpFor val^</li> </ul>"},{"location":"eohippus-ast-ExpFor/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpFor/#let-pattern-nodewithtuplepattern-val-val","title":"let pattern: NodeWith[TuplePattern val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpFor/#let-sequence-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let sequence: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpFor/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpFor/#let-else_block-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let else_block: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpFor/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpFor/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpFor/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpFor/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpFor/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpFor/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpFor/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpFor/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpFor/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpGeneric/","title":"ExpGeneric","text":"<p>[Source]</p> <p>An expression with type arguments.</p> <pre><code>class val ExpGeneric is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpGeneric/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpGeneric/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpGeneric/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  lhs': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  type_args': NodeWith[TypeArgs val] val)\n: ExpGeneric val^\n</code></pre>"},{"location":"eohippus-ast-ExpGeneric/#parameters","title":"Parameters","text":"<ul> <li>lhs': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>type_args': NodeWith[TypeArgs val] val</li> </ul>"},{"location":"eohippus-ast-ExpGeneric/#returns","title":"Returns","text":"<ul> <li>ExpGeneric val^</li> </ul>"},{"location":"eohippus-ast-ExpGeneric/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpGeneric/#let-lhs-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let lhs: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpGeneric/#let-type_args-nodewithtypeargs-val-val","title":"let type_args: NodeWith[TypeArgs val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpGeneric/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpGeneric/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpGeneric/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpGeneric/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpGeneric/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpGeneric/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpGeneric/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpGeneric/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpGeneric/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpHash/","title":"ExpHash","text":"<p>[Source]</p> <p>A compile-time expression.</p> <pre><code>class val ExpHash is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpHash/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpHash/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpHash/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  rhs': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val)\n: ExpHash val^\n</code></pre>"},{"location":"eohippus-ast-ExpHash/#parameters","title":"Parameters","text":"<ul> <li>rhs': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> </ul>"},{"location":"eohippus-ast-ExpHash/#returns","title":"Returns","text":"<ul> <li>ExpHash val^</li> </ul>"},{"location":"eohippus-ast-ExpHash/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpHash/#let-rhs-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let rhs: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpHash/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpHash/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpHash/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpHash/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpHash/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpHash/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpHash/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpHash/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpHash/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpIf/","title":"ExpIf","text":"<p>[Source]</p> <p>An <code>if</code> expression. - <code>kind</code>: <code>if</code>, <code>ifdef</code>, or <code>iftype</code>.</p> <pre><code>class val ExpIf is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpIf/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpIf/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpIf/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  kind': (IfExp val | IfDef val | IfType val),\n  conditions': ReadSeq[NodeWith[IfCondition val] val] val,\n  else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: ExpIf val^\n</code></pre>"},{"location":"eohippus-ast-ExpIf/#parameters","title":"Parameters","text":"<ul> <li>kind': (IfExp val | IfDef val | IfType val)</li> <li>conditions': ReadSeq[NodeWith[IfCondition val] val] val</li> <li>else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpIf/#returns","title":"Returns","text":"<ul> <li>ExpIf val^</li> </ul>"},{"location":"eohippus-ast-ExpIf/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpIf/#let-kind-ifexp-val-ifdef-val-iftype-val","title":"let kind: (IfExp val | IfDef val | IfType val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpIf/#let-conditions-readseqnodewithifcondition-val-val-val","title":"let conditions: ReadSeq[NodeWith[IfCondition val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpIf/#let-else_block-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let else_block: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpIf/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpIf/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpIf/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpIf/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpIf/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpIf/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpIf/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpIf/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpIf/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpJump/","title":"ExpJump","text":"<p>[Source]</p> <p>A jump. - <code>keyword</code>: <code>return</code>, <code>break</code>, <code>continue</code>, <code>error</code>, <code>compile_intrinsic</code>   or <code>compile_error</code>.</p> <pre><code>class val ExpJump is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpJump/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpJump/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpJump/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  keyword': NodeWith[Keyword val] val,\n  rhs': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: ExpJump val^\n</code></pre>"},{"location":"eohippus-ast-ExpJump/#parameters","title":"Parameters","text":"<ul> <li>keyword': NodeWith[Keyword val] val</li> <li>rhs': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpJump/#returns","title":"Returns","text":"<ul> <li>ExpJump val^</li> </ul>"},{"location":"eohippus-ast-ExpJump/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpJump/#let-keyword-nodewithkeyword-val-val","title":"let keyword: NodeWith[Keyword val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpJump/#let-rhs-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let rhs: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpJump/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpJump/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpJump/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpJump/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpJump/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpJump/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpJump/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpJump/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpJump/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpLambda/","title":"ExpLambda","text":"<p>[Source]</p> <p>A lambda function.</p> <pre><code>class val ExpLambda is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpLambda/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpLambda/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpLambda/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  bare': Bool val,\n  this_cap': (NodeWith[Keyword val] val | None val),\n  identifier': (NodeWith[Identifier val] val | None val),\n  type_params': (NodeWith[TypeParams val] val | None val),\n  params': NodeWith[MethodParams val] val,\n  captures': (NodeWith[MethodParams val] val | None val),\n  ret_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  partial': Bool val,\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  ref_cap': (NodeWith[Keyword val] val | None val))\n: ExpLambda val^\n</code></pre>"},{"location":"eohippus-ast-ExpLambda/#parameters","title":"Parameters","text":"<ul> <li>bare': Bool val</li> <li>this_cap': (NodeWith[Keyword val] val | None val)</li> <li>identifier': (NodeWith[Identifier val] val | None val)</li> <li>type_params': (NodeWith[TypeParams val] val | None val)</li> <li>params': NodeWith[MethodParams val] val</li> <li>captures': (NodeWith[MethodParams val] val | None val)</li> <li>ret_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>partial': Bool val</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>ref_cap': (NodeWith[Keyword val] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpLambda/#returns","title":"Returns","text":"<ul> <li>ExpLambda val^</li> </ul>"},{"location":"eohippus-ast-ExpLambda/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpLambda/#let-bare-bool-val","title":"let bare: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-this_cap-nodewithkeyword-val-val-none-val","title":"let this_cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-identifier-nodewithidentifier-val-val-none-val","title":"let identifier: (NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-type_params-nodewithtypeparams-val-val-none-val","title":"let type_params: (NodeWith[TypeParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-params-nodewithmethodparams-val-val","title":"let params: NodeWith[MethodParams val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-captures-nodewithmethodparams-val-val-none-val","title":"let captures: (NodeWith[MethodParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-ret_type-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let ret_type: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-partial-bool-val","title":"let partial: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#let-ref_cap-nodewithkeyword-val-val-none-val","title":"let ref_cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpLambda/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpLambda/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpLambda/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpLambda/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpLambda/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpLambda/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpLambda/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpLambda/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpLambda/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpMatch/","title":"ExpMatch","text":"<p>[Source]</p> <p>A <code>match</code> expression.</p> <pre><code>class val ExpMatch is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpMatch/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpMatch/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpMatch/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  expression': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  cases': ReadSeq[NodeWith[MatchCase val] val] val,\n  else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: ExpMatch val^\n</code></pre>"},{"location":"eohippus-ast-ExpMatch/#parameters","title":"Parameters","text":"<ul> <li>expression': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>cases': ReadSeq[NodeWith[MatchCase val] val] val</li> <li>else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpMatch/#returns","title":"Returns","text":"<ul> <li>ExpMatch val^</li> </ul>"},{"location":"eohippus-ast-ExpMatch/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpMatch/#let-expression-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let expression: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpMatch/#let-cases-readseqnodewithmatchcase-val-val-val","title":"let cases: ReadSeq[NodeWith[MatchCase val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpMatch/#let-else_block-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let else_block: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpMatch/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpMatch/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpMatch/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpMatch/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpMatch/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpMatch/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpMatch/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpMatch/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpMatch/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpObject/","title":"ExpObject","text":"<p>[Source]</p> <p>An object literal.</p> <pre><code>class val ExpObject is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpObject/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpObject/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpObject/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  cap': (NodeWith[Keyword val] val | None val),\n  constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  members': NodeWith[TypedefMembers val] val)\n: ExpObject val^\n</code></pre>"},{"location":"eohippus-ast-ExpObject/#parameters","title":"Parameters","text":"<ul> <li>cap': (NodeWith[Keyword val] val | None val)</li> <li>constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>members': NodeWith[TypedefMembers val] val</li> </ul>"},{"location":"eohippus-ast-ExpObject/#returns","title":"Returns","text":"<ul> <li>ExpObject val^</li> </ul>"},{"location":"eohippus-ast-ExpObject/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpObject/#let-cap-nodewithkeyword-val-val-none-val","title":"let cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpObject/#let-constraint-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let constraint: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpObject/#let-members-nodewithtypedefmembers-val-val","title":"let members: NodeWith[TypedefMembers val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpObject/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpObject/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpObject/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpObject/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpObject/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpObject/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpObject/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpObject/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpObject/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpOperation/","title":"ExpOperation","text":"<p>[Source]</p> <p>A binary infix operation expression, or a unary prefix operation.</p> <pre><code>class val ExpOperation is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpOperation/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpOperation/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpOperation/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  lhs': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | NodeWith[Identifier val] val | \n    None val),\n  op': (NodeWith[Keyword val] val | NodeWith[Token val] val),\n  rhs': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | NodeWith[Identifier val] val),\n  partial': Bool val = false)\n: ExpOperation val^\n</code></pre>"},{"location":"eohippus-ast-ExpOperation/#parameters","title":"Parameters","text":"<ul> <li>lhs': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | NodeWith[Identifier val] val |      None val)</li> <li>op': (NodeWith[Keyword val] val | NodeWith[Token val] val)</li> <li>rhs': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | NodeWith[Identifier val] val)</li> <li>partial': Bool val = false</li> </ul>"},{"location":"eohippus-ast-ExpOperation/#returns","title":"Returns","text":"<ul> <li>ExpOperation val^</li> </ul>"},{"location":"eohippus-ast-ExpOperation/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpOperation/#let-lhs-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-nodewithidentifier-val-val-none-val","title":"let lhs: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpOperation/#let-op-nodewithkeyword-val-val-nodewithtoken-val-val","title":"let op: (NodeWith[Keyword val] val | NodeWith[Token val] val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpOperation/#let-rhs-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-nodewithidentifier-val-val","title":"let rhs: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | NodeWith[Identifier val] val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpOperation/#let-partial-bool-val","title":"let partial: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpOperation/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpOperation/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpOperation/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpOperation/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpOperation/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpOperation/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpOperation/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpOperation/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpOperation/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpRecover/","title":"ExpRecover","text":"<p>[Source]</p> <p>A <code>recover</code> block.</p> <pre><code>class val ExpRecover is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpRecover/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpRecover/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpRecover/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  cap': (NodeWith[Keyword val] val | None val),\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val)\n: ExpRecover val^\n</code></pre>"},{"location":"eohippus-ast-ExpRecover/#parameters","title":"Parameters","text":"<ul> <li>cap': (NodeWith[Keyword val] val | None val)</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> </ul>"},{"location":"eohippus-ast-ExpRecover/#returns","title":"Returns","text":"<ul> <li>ExpRecover val^</li> </ul>"},{"location":"eohippus-ast-ExpRecover/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpRecover/#let-cap-nodewithkeyword-val-val-none-val","title":"let cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpRecover/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpRecover/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpRecover/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpRecover/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpRecover/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpRecover/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpRecover/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpRecover/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpRecover/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpRecover/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpRepeat/","title":"ExpRepeat","text":"<p>[Source]</p> <p>A <code>repeat</code> expression.</p> <pre><code>class val ExpRepeat is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpRepeat/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpRepeat/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpRepeat/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  condition': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: ExpRepeat val^\n</code></pre>"},{"location":"eohippus-ast-ExpRepeat/#parameters","title":"Parameters","text":"<ul> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>condition': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpRepeat/#returns","title":"Returns","text":"<ul> <li>ExpRepeat val^</li> </ul>"},{"location":"eohippus-ast-ExpRepeat/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpRepeat/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpRepeat/#let-condition-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let condition: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpRepeat/#let-else_block-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let else_block: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpRepeat/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpRepeat/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpRepeat/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpRepeat/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpRepeat/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpRepeat/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpRepeat/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpRepeat/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpRepeat/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpSequence/","title":"ExpSequence","text":"<p>[Source]</p> <p>A sequence of expressions, possibly separated by semicolons.</p> <pre><code>class val ExpSequence is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpSequence/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpSequence/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpSequence/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  expressions': ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val)\n: ExpSequence val^\n</code></pre>"},{"location":"eohippus-ast-ExpSequence/#parameters","title":"Parameters","text":"<ul> <li>expressions': ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val</li> </ul>"},{"location":"eohippus-ast-ExpSequence/#returns","title":"Returns","text":"<ul> <li>ExpSequence val^</li> </ul>"},{"location":"eohippus-ast-ExpSequence/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpSequence/#let-expressions-readseqnodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-val","title":"let expressions: ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpSequence/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpSequence/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpSequence/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpSequence/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpSequence/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpSequence/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpSequence/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpSequence/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpSequence/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpTry/","title":"ExpTry","text":"<p>[Source]</p> <p>A <code>try</code> block.</p> <pre><code>class val ExpTry is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpTry/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpTry/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpTry/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  body': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val),\n  else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: ExpTry val^\n</code></pre>"},{"location":"eohippus-ast-ExpTry/#parameters","title":"Parameters","text":"<ul> <li>body': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> <li>else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpTry/#returns","title":"Returns","text":"<ul> <li>ExpTry val^</li> </ul>"},{"location":"eohippus-ast-ExpTry/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpTry/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let body: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpTry/#let-else_block-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let else_block: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpTry/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpTry/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpTry/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpTry/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpTry/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpTry/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpTry/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpTry/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpTry/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpTuple/","title":"ExpTuple","text":"<p>[Source]</p> <p>A tuple expression.</p> <pre><code>class val ExpTuple is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpTuple/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpTuple/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpTuple/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  sequences': ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val)\n: ExpTuple val^\n</code></pre>"},{"location":"eohippus-ast-ExpTuple/#parameters","title":"Parameters","text":"<ul> <li>sequences': ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val</li> </ul>"},{"location":"eohippus-ast-ExpTuple/#returns","title":"Returns","text":"<ul> <li>ExpTuple val^</li> </ul>"},{"location":"eohippus-ast-ExpTuple/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpTuple/#let-sequences-readseqnodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-val","title":"let sequences: ReadSeq[NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpTuple/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpTuple/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpTuple/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpTuple/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpTuple/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpTuple/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpTuple/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpTuple/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpTuple/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpWhile/","title":"ExpWhile","text":"<p>[Source]</p> <p>A <code>while</code> loop.</p> <pre><code>class val ExpWhile is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpWhile/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpWhile/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpWhile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  condition': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: ExpWhile val^\n</code></pre>"},{"location":"eohippus-ast-ExpWhile/#parameters","title":"Parameters","text":"<ul> <li>condition': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>else_block': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-ExpWhile/#returns","title":"Returns","text":"<ul> <li>ExpWhile val^</li> </ul>"},{"location":"eohippus-ast-ExpWhile/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpWhile/#let-condition-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let condition: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpWhile/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpWhile/#let-else_block-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let else_block: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpWhile/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpWhile/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpWhile/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpWhile/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpWhile/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpWhile/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpWhile/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpWhile/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpWhile/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-ExpWith/","title":"ExpWith","text":"<p>[Source]</p> <p>A <code>with</code> block.</p> <pre><code>class val ExpWith is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpWith/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpWith/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ExpWith/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  elements': ReadSeq[NodeWith[WithElement val] val] val,\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val)\n: ExpWith val^\n</code></pre>"},{"location":"eohippus-ast-ExpWith/#parameters","title":"Parameters","text":"<ul> <li>elements': ReadSeq[NodeWith[WithElement val] val] val</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> </ul>"},{"location":"eohippus-ast-ExpWith/#returns","title":"Returns","text":"<ul> <li>ExpWith val^</li> </ul>"},{"location":"eohippus-ast-ExpWith/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-ExpWith/#let-elements-readseqnodewithwithelement-val-val-val","title":"let elements: ReadSeq[NodeWith[WithElement val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpWith/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-ExpWith/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ExpWith/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ExpWith/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ExpWith/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-ExpWith/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-ExpWith/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-ExpWith/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-ExpWith/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-ExpWith/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-Expression/","title":"Expression","text":"<p>[Source] <pre><code>type Expression is\n  (ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)\n</code></pre></p>"},{"location":"eohippus-ast-Expression/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)</li> </ul>"},{"location":"eohippus-ast-HexadecimalInteger/","title":"HexadecimalInteger","text":"<p>[Source] <pre><code>primitive val HexadecimalInteger\n</code></pre></p>"},{"location":"eohippus-ast-HexadecimalInteger/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-HexadecimalInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HexadecimalInteger val^\n</code></pre>"},{"location":"eohippus-ast-HexadecimalInteger/#returns","title":"Returns","text":"<ul> <li>HexadecimalInteger val^</li> </ul>"},{"location":"eohippus-ast-HexadecimalInteger/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-HexadecimalInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: HexadecimalInteger val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-HexadecimalInteger/#parameters","title":"Parameters","text":"<ul> <li>that: HexadecimalInteger val</li> </ul>"},{"location":"eohippus-ast-HexadecimalInteger/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-HexadecimalInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: HexadecimalInteger val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-HexadecimalInteger/#parameters_1","title":"Parameters","text":"<ul> <li>that: HexadecimalInteger val</li> </ul>"},{"location":"eohippus-ast-HexadecimalInteger/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Identifier/","title":"Identifier","text":"<p>[Source] <pre><code>class val Identifier is\n  NodeData val\n</code></pre></p>"},{"location":"eohippus-ast-Identifier/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Identifier/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Identifier/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  string': String val)\n: Identifier val^\n</code></pre>"},{"location":"eohippus-ast-Identifier/#parameters","title":"Parameters","text":"<ul> <li>string': String val</li> </ul>"},{"location":"eohippus-ast-Identifier/#returns","title":"Returns","text":"<ul> <li>Identifier val^</li> </ul>"},{"location":"eohippus-ast-Identifier/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-Identifier/#let-string-string-val","title":"let string: String val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-Identifier/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Identifier/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Identifier/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Identifier/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-Identifier/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-Identifier/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Identifier/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-Identifier/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-Identifier/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-IfCondition/","title":"IfCondition","text":"<p>[Source]</p> <p>A condition and then-block in an <code>if</code> expression (i.e. the initial <code>if</code> and <code>then</code> block; or subsequent <code>elseif</code> and <code>then</code> blocks).</p> <pre><code>class val IfCondition is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-IfCondition/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-IfCondition/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-IfCondition/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  if_true': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  then_block': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val)\n: IfCondition val^\n</code></pre>"},{"location":"eohippus-ast-IfCondition/#parameters","title":"Parameters","text":"<ul> <li>if_true': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>then_block': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> </ul>"},{"location":"eohippus-ast-IfCondition/#returns","title":"Returns","text":"<ul> <li>IfCondition val^</li> </ul>"},{"location":"eohippus-ast-IfCondition/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-IfCondition/#let-if_true-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let if_true: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-IfCondition/#let-then_block-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let then_block: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-IfCondition/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-IfCondition/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-IfCondition/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-IfCondition/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-IfCondition/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-IfCondition/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-IfCondition/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-IfCondition/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-IfCondition/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-IfDef/","title":"IfDef","text":"<p>[Source] <pre><code>primitive val IfDef\n</code></pre></p>"},{"location":"eohippus-ast-IfDef/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-IfDef/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IfDef val^\n</code></pre>"},{"location":"eohippus-ast-IfDef/#returns","title":"Returns","text":"<ul> <li>IfDef val^</li> </ul>"},{"location":"eohippus-ast-IfDef/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-IfDef/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: IfDef val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-IfDef/#parameters","title":"Parameters","text":"<ul> <li>that: IfDef val</li> </ul>"},{"location":"eohippus-ast-IfDef/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-IfDef/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: IfDef val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-IfDef/#parameters_1","title":"Parameters","text":"<ul> <li>that: IfDef val</li> </ul>"},{"location":"eohippus-ast-IfDef/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-IfExp/","title":"IfExp","text":"<p>[Source] <pre><code>primitive val IfExp\n</code></pre></p>"},{"location":"eohippus-ast-IfExp/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-IfExp/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IfExp val^\n</code></pre>"},{"location":"eohippus-ast-IfExp/#returns","title":"Returns","text":"<ul> <li>IfExp val^</li> </ul>"},{"location":"eohippus-ast-IfExp/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-IfExp/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: IfExp val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-IfExp/#parameters","title":"Parameters","text":"<ul> <li>that: IfExp val</li> </ul>"},{"location":"eohippus-ast-IfExp/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-IfExp/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: IfExp val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-IfExp/#parameters_1","title":"Parameters","text":"<ul> <li>that: IfExp val</li> </ul>"},{"location":"eohippus-ast-IfExp/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-IfKind/","title":"IfKind","text":"<p>[Source] <pre><code>type IfKind is\n  (IfExp val | IfDef val | IfType val)\n</code></pre></p>"},{"location":"eohippus-ast-IfKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(IfExp val | IfDef val | IfType val)</li> </ul>"},{"location":"eohippus-ast-IfType/","title":"IfType","text":"<p>[Source] <pre><code>primitive val IfType\n</code></pre></p>"},{"location":"eohippus-ast-IfType/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-IfType/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IfType val^\n</code></pre>"},{"location":"eohippus-ast-IfType/#returns","title":"Returns","text":"<ul> <li>IfType val^</li> </ul>"},{"location":"eohippus-ast-IfType/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-IfType/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: IfType val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-IfType/#parameters","title":"Parameters","text":"<ul> <li>that: IfType val</li> </ul>"},{"location":"eohippus-ast-IfType/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-IfType/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: IfType val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-IfType/#parameters_1","title":"Parameters","text":"<ul> <li>that: IfType val</li> </ul>"},{"location":"eohippus-ast-IfType/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Inherited/","title":"Inherited","text":"<p>[Source] <pre><code>primitive val Inherited\n</code></pre></p>"},{"location":"eohippus-ast-Inherited/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Inherited/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Inherited val^\n</code></pre>"},{"location":"eohippus-ast-Inherited/#returns","title":"Returns","text":"<ul> <li>Inherited val^</li> </ul>"},{"location":"eohippus-ast-Inherited/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Inherited/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Inherited val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Inherited/#parameters","title":"Parameters","text":"<ul> <li>that: Inherited val</li> </ul>"},{"location":"eohippus-ast-Inherited/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Inherited/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Inherited val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Inherited/#parameters_1","title":"Parameters","text":"<ul> <li>that: Inherited val</li> </ul>"},{"location":"eohippus-ast-Inherited/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Keyword/","title":"Keyword","text":"<p>[Source] <pre><code>class val Keyword is\n  NodeData val\n</code></pre></p>"},{"location":"eohippus-ast-Keyword/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Keyword/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Keyword/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  string': String val)\n: Keyword val^\n</code></pre>"},{"location":"eohippus-ast-Keyword/#parameters","title":"Parameters","text":"<ul> <li>string': String val</li> </ul>"},{"location":"eohippus-ast-Keyword/#returns","title":"Returns","text":"<ul> <li>Keyword val^</li> </ul>"},{"location":"eohippus-ast-Keyword/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-Keyword/#let-string-string-val","title":"let string: String val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-Keyword/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Keyword/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keyword/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keyword/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-Keyword/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-Keyword/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Keyword/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-Keyword/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-Keyword/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-Keywords/","title":"Keywords","text":"<p>[Source]</p> <p>The source of truth for the string values of keywords.</p> <pre><code>primitive val Keywords\n</code></pre>"},{"location":"eohippus-ast-Keywords/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Keywords/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Keywords val^\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns","title":"Returns","text":"<ul> <li>Keywords val^</li> </ul>"},{"location":"eohippus-ast-Keywords/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Keywords/#kwd_actor","title":"kwd_actor","text":"<p>[Source]</p> <pre><code>fun box kwd_actor()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_addressof","title":"kwd_addressof","text":"<p>[Source]</p> <pre><code>fun box kwd_addressof()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_and","title":"kwd_and","text":"<p>[Source]</p> <pre><code>fun box kwd_and()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_as","title":"kwd_as","text":"<p>[Source]</p> <pre><code>fun box kwd_as()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_be","title":"kwd_be","text":"<p>[Source]</p> <pre><code>fun box kwd_be()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_box","title":"kwd_box","text":"<p>[Source]</p> <pre><code>fun box kwd_box()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_break","title":"kwd_break","text":"<p>[Source]</p> <pre><code>fun box kwd_break()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_class","title":"kwd_class","text":"<p>[Source]</p> <pre><code>fun box kwd_class()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_compile_error","title":"kwd_compile_error","text":"<p>[Source]</p> <pre><code>fun box kwd_compile_error()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_compile_intrinsic","title":"kwd_compile_intrinsic","text":"<p>[Source]</p> <pre><code>fun box kwd_compile_intrinsic()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_consume","title":"kwd_consume","text":"<p>[Source]</p> <pre><code>fun box kwd_consume()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_continue","title":"kwd_continue","text":"<p>[Source]</p> <pre><code>fun box kwd_continue()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_digestof","title":"kwd_digestof","text":"<p>[Source]</p> <pre><code>fun box kwd_digestof()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_do","title":"kwd_do","text":"<p>[Source]</p> <pre><code>fun box kwd_do()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_else","title":"kwd_else","text":"<p>[Source]</p> <pre><code>fun box kwd_else()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_15","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_elseif","title":"kwd_elseif","text":"<p>[Source]</p> <pre><code>fun box kwd_elseif()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_16","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_embed","title":"kwd_embed","text":"<p>[Source]</p> <pre><code>fun box kwd_embed()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_17","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_end","title":"kwd_end","text":"<p>[Source]</p> <pre><code>fun box kwd_end()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_18","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_error","title":"kwd_error","text":"<p>[Source]</p> <pre><code>fun box kwd_error()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_19","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_false","title":"kwd_false","text":"<p>[Source]</p> <pre><code>fun box kwd_false()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_20","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_for","title":"kwd_for","text":"<p>[Source]</p> <pre><code>fun box kwd_for()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_fun","title":"kwd_fun","text":"<p>[Source]</p> <pre><code>fun box kwd_fun()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_22","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_hash_alias","title":"kwd_hash_alias","text":"<p>[Source]</p> <pre><code>fun box kwd_hash_alias()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_23","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_hash_any","title":"kwd_hash_any","text":"<p>[Source]</p> <pre><code>fun box kwd_hash_any()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_24","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_hash_read","title":"kwd_hash_read","text":"<p>[Source]</p> <pre><code>fun box kwd_hash_read()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_25","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_hash_send","title":"kwd_hash_send","text":"<p>[Source]</p> <pre><code>fun box kwd_hash_send()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_26","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_hash_share","title":"kwd_hash_share","text":"<p>[Source]</p> <pre><code>fun box kwd_hash_share()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_27","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_if","title":"kwd_if","text":"<p>[Source]</p> <pre><code>fun box kwd_if()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_28","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_ifdef","title":"kwd_ifdef","text":"<p>[Source]</p> <pre><code>fun box kwd_ifdef()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_29","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_iftype","title":"kwd_iftype","text":"<p>[Source]</p> <pre><code>fun box kwd_iftype()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_30","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_in","title":"kwd_in","text":"<p>[Source]</p> <pre><code>fun box kwd_in()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_31","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_interface","title":"kwd_interface","text":"<p>[Source]</p> <pre><code>fun box kwd_interface()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_32","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_is","title":"kwd_is","text":"<p>[Source]</p> <pre><code>fun box kwd_is()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_33","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_iso","title":"kwd_iso","text":"<p>[Source]</p> <pre><code>fun box kwd_iso()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_34","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_let","title":"kwd_let","text":"<p>[Source]</p> <pre><code>fun box kwd_let()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_35","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_loc","title":"kwd_loc","text":"<p>[Source]</p> <pre><code>fun box kwd_loc()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_36","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_match","title":"kwd_match","text":"<p>[Source]</p> <pre><code>fun box kwd_match()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_37","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_new","title":"kwd_new","text":"<p>[Source]</p> <pre><code>fun box kwd_new()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_38","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_not","title":"kwd_not","text":"<p>[Source]</p> <pre><code>fun box kwd_not()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_39","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_object","title":"kwd_object","text":"<p>[Source]</p> <pre><code>fun box kwd_object()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_40","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_or","title":"kwd_or","text":"<p>[Source]</p> <pre><code>fun box kwd_or()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_41","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_primitive","title":"kwd_primitive","text":"<p>[Source]</p> <pre><code>fun box kwd_primitive()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_42","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_ref","title":"kwd_ref","text":"<p>[Source]</p> <pre><code>fun box kwd_ref()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_43","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_recover","title":"kwd_recover","text":"<p>[Source]</p> <pre><code>fun box kwd_recover()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_44","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_repeat","title":"kwd_repeat","text":"<p>[Source]</p> <pre><code>fun box kwd_repeat()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_45","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_return","title":"kwd_return","text":"<p>[Source]</p> <pre><code>fun box kwd_return()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_46","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_struct","title":"kwd_struct","text":"<p>[Source]</p> <pre><code>fun box kwd_struct()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_47","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_tag","title":"kwd_tag","text":"<p>[Source]</p> <pre><code>fun box kwd_tag()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_48","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_then","title":"kwd_then","text":"<p>[Source]</p> <pre><code>fun box kwd_then()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_49","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_this","title":"kwd_this","text":"<p>[Source]</p> <pre><code>fun box kwd_this()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_50","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_trait","title":"kwd_trait","text":"<p>[Source]</p> <pre><code>fun box kwd_trait()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_51","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_trn","title":"kwd_trn","text":"<p>[Source]</p> <pre><code>fun box kwd_trn()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_52","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_true","title":"kwd_true","text":"<p>[Source]</p> <pre><code>fun box kwd_true()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_53","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_try","title":"kwd_try","text":"<p>[Source]</p> <pre><code>fun box kwd_try()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_54","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_type","title":"kwd_type","text":"<p>[Source]</p> <pre><code>fun box kwd_type()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_55","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_until","title":"kwd_until","text":"<p>[Source]</p> <pre><code>fun box kwd_until()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_56","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_use","title":"kwd_use","text":"<p>[Source]</p> <pre><code>fun box kwd_use()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_57","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_val","title":"kwd_val","text":"<p>[Source]</p> <pre><code>fun box kwd_val()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_58","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_var","title":"kwd_var","text":"<p>[Source]</p> <pre><code>fun box kwd_var()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_59","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_where","title":"kwd_where","text":"<p>[Source]</p> <pre><code>fun box kwd_where()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_60","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_while","title":"kwd_while","text":"<p>[Source]</p> <pre><code>fun box kwd_while()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_61","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_with","title":"kwd_with","text":"<p>[Source]</p> <pre><code>fun box kwd_with()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_62","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#kwd_xor","title":"kwd_xor","text":"<p>[Source]</p> <pre><code>fun box kwd_xor()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#returns_63","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Keywords/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Keywords val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#parameters","title":"Parameters","text":"<ul> <li>that: Keywords val</li> </ul>"},{"location":"eohippus-ast-Keywords/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Keywords/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Keywords val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Keywords/#parameters_1","title":"Parameters","text":"<ul> <li>that: Keywords val</li> </ul>"},{"location":"eohippus-ast-Keywords/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-LineCommentTrivia/","title":"LineCommentTrivia","text":"<p>[Source] <pre><code>primitive val LineCommentTrivia\n</code></pre></p>"},{"location":"eohippus-ast-LineCommentTrivia/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-LineCommentTrivia/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: LineCommentTrivia val^\n</code></pre>"},{"location":"eohippus-ast-LineCommentTrivia/#returns","title":"Returns","text":"<ul> <li>LineCommentTrivia val^</li> </ul>"},{"location":"eohippus-ast-LineCommentTrivia/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-LineCommentTrivia/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: LineCommentTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-LineCommentTrivia/#parameters","title":"Parameters","text":"<ul> <li>that: LineCommentTrivia val</li> </ul>"},{"location":"eohippus-ast-LineCommentTrivia/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-LineCommentTrivia/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: LineCommentTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-LineCommentTrivia/#parameters_1","title":"Parameters","text":"<ul> <li>that: LineCommentTrivia val</li> </ul>"},{"location":"eohippus-ast-LineCommentTrivia/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-LiteralBool/","title":"LiteralBool","text":"<p>[Source] <pre><code>class val LiteralBool is\n  NodeDataWithValue[LiteralBool val, Bool val] val\n</code></pre></p>"},{"location":"eohippus-ast-LiteralBool/#implements","title":"Implements","text":"<ul> <li>NodeDataWithValue[LiteralBool val, Bool val] val</li> </ul>"},{"location":"eohippus-ast-LiteralBool/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-LiteralBool/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value': Bool val)\n: LiteralBool val^\n</code></pre>"},{"location":"eohippus-ast-LiteralBool/#parameters","title":"Parameters","text":"<ul> <li>value': Bool val</li> </ul>"},{"location":"eohippus-ast-LiteralBool/#returns","title":"Returns","text":"<ul> <li>LiteralBool val^</li> </ul>"},{"location":"eohippus-ast-LiteralBool/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-LiteralBool/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-LiteralBool/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-LiteralBool/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-LiteralBool/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-LiteralBool/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-LiteralBool/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-LiteralBool/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-LiteralBool/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-LiteralBool/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-LiteralBool/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-LiteralChar/","title":"LiteralChar","text":"<p>[Source]</p> <p>A character literal. - <code>kind</code>: either a single character 'x' or a standard escaped character, or   a Unicode escaped character.</p> <pre><code>class val LiteralChar is\n  NodeDataWithValue[LiteralChar val, U32 val] val\n</code></pre>"},{"location":"eohippus-ast-LiteralChar/#implements","title":"Implements","text":"<ul> <li>NodeDataWithValue[LiteralChar val, U32 val] val</li> </ul>"},{"location":"eohippus-ast-LiteralChar/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-LiteralChar/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  kind': (CharLiteral val | CharEscaped val | CharUnicode val),\n  value': U32 val)\n: LiteralChar val^\n</code></pre>"},{"location":"eohippus-ast-LiteralChar/#parameters","title":"Parameters","text":"<ul> <li>kind': (CharLiteral val | CharEscaped val | CharUnicode val)</li> <li>value': U32 val</li> </ul>"},{"location":"eohippus-ast-LiteralChar/#returns","title":"Returns","text":"<ul> <li>LiteralChar val^</li> </ul>"},{"location":"eohippus-ast-LiteralChar/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-LiteralChar/#let-kind-charliteral-val-charescaped-val-charunicode-val","title":"let kind: (CharLiteral val | CharEscaped val | CharUnicode val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-LiteralChar/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-LiteralChar/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-LiteralChar/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-LiteralChar/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-LiteralChar/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-LiteralChar/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-LiteralChar/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-LiteralChar/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-LiteralChar/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-LiteralChar/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"eohippus-ast-LiteralChar/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/","title":"LiteralFloat","text":"<p>[Source] <pre><code>class val LiteralFloat is\n  NodeDataWithValue[LiteralFloat val, F64 val] val\n</code></pre></p>"},{"location":"eohippus-ast-LiteralFloat/#implements","title":"Implements","text":"<ul> <li>NodeDataWithValue[LiteralFloat val, F64 val] val</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-LiteralFloat/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value': F64 val)\n: LiteralFloat val^\n</code></pre>"},{"location":"eohippus-ast-LiteralFloat/#parameters","title":"Parameters","text":"<ul> <li>value': F64 val</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/#returns","title":"Returns","text":"<ul> <li>LiteralFloat val^</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-LiteralFloat/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-LiteralFloat/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-LiteralFloat/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-LiteralFloat/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-LiteralFloat/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: F64 val\n</code></pre>"},{"location":"eohippus-ast-LiteralFloat/#returns_4","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/","title":"LiteralInteger","text":"<p>[Source] <pre><code>class val LiteralInteger is\n  NodeDataWithValue[LiteralInteger val, U128 val] val\n</code></pre></p>"},{"location":"eohippus-ast-LiteralInteger/#implements","title":"Implements","text":"<ul> <li>NodeDataWithValue[LiteralInteger val, U128 val] val</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-LiteralInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value': U128 val,\n  kind': (DecimalInteger val | HexadecimalInteger val | BinaryInteger val))\n: LiteralInteger val^\n</code></pre>"},{"location":"eohippus-ast-LiteralInteger/#parameters","title":"Parameters","text":"<ul> <li>value': U128 val</li> <li>kind': (DecimalInteger val | HexadecimalInteger val | BinaryInteger val)</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/#returns","title":"Returns","text":"<ul> <li>LiteralInteger val^</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-LiteralInteger/#let-kind-decimalinteger-val-hexadecimalinteger-val-binaryinteger-val","title":"let kind: (DecimalInteger val | HexadecimalInteger val | BinaryInteger val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-LiteralInteger/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-LiteralInteger/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-LiteralInteger/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-LiteralInteger/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-LiteralInteger/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-LiteralInteger/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U128 val\n</code></pre>"},{"location":"eohippus-ast-LiteralInteger/#returns_4","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"eohippus-ast-LiteralIntegerKind/","title":"LiteralIntegerKind","text":"<p>[Source] <pre><code>type LiteralIntegerKind is\n  (DecimalInteger val | HexadecimalInteger val | BinaryInteger val)\n</code></pre></p>"},{"location":"eohippus-ast-LiteralIntegerKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(DecimalInteger val | HexadecimalInteger val | BinaryInteger val)</li> </ul>"},{"location":"eohippus-ast-LiteralString/","title":"LiteralString","text":"<p>[Source] <pre><code>class val LiteralString is\n  NodeDataWithValue[LiteralString val, String val] val\n</code></pre></p>"},{"location":"eohippus-ast-LiteralString/#implements","title":"Implements","text":"<ul> <li>NodeDataWithValue[LiteralString val, String val] val</li> </ul>"},{"location":"eohippus-ast-LiteralString/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-LiteralString/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  value': String val,\n  kind': (StringLiteral val | StringTripleQuote val))\n: LiteralString val^\n</code></pre>"},{"location":"eohippus-ast-LiteralString/#parameters","title":"Parameters","text":"<ul> <li>value': String val</li> <li>kind': (StringLiteral val | StringTripleQuote val)</li> </ul>"},{"location":"eohippus-ast-LiteralString/#returns","title":"Returns","text":"<ul> <li>LiteralString val^</li> </ul>"},{"location":"eohippus-ast-LiteralString/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-LiteralString/#let-kind-stringliteral-val-stringtriplequote-val","title":"let kind: (StringLiteral val | StringTripleQuote val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-LiteralString/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-LiteralString/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-LiteralString/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-LiteralString/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-LiteralString/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-LiteralString/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-LiteralString/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-LiteralString/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-LiteralString/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-LiteralString/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: String val\n</code></pre>"},{"location":"eohippus-ast-LiteralString/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-MatchCase/","title":"MatchCase","text":"<p>[Source]</p> <p>A case in a <code>match</code> expression.</p> <pre><code>class val MatchCase is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-MatchCase/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-MatchCase/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-MatchCase/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  pattern': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val,\n  condition': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val),\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val)\n: MatchCase val^\n</code></pre>"},{"location":"eohippus-ast-MatchCase/#parameters","title":"Parameters","text":"<ul> <li>pattern': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> <li>condition': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> </ul>"},{"location":"eohippus-ast-MatchCase/#returns","title":"Returns","text":"<ul> <li>MatchCase val^</li> </ul>"},{"location":"eohippus-ast-MatchCase/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-MatchCase/#let-pattern-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let pattern: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-MatchCase/#let-condition-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let condition: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-MatchCase/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-MatchCase/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-MatchCase/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-MatchCase/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-MatchCase/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-MatchCase/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-MatchCase/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-MatchCase/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-MatchCase/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-MatchCase/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-MethodParam/","title":"MethodParam","text":"<p>[Source] <pre><code>class val MethodParam is\n  NodeData val\n</code></pre></p>"},{"location":"eohippus-ast-MethodParam/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-MethodParam/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-MethodParam/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  identifier': NodeWith[Identifier val] val,\n  constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  initializer': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: MethodParam val^\n</code></pre>"},{"location":"eohippus-ast-MethodParam/#parameters","title":"Parameters","text":"<ul> <li>identifier': NodeWith[Identifier val] val</li> <li>constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>initializer': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-MethodParam/#returns","title":"Returns","text":"<ul> <li>MethodParam val^</li> </ul>"},{"location":"eohippus-ast-MethodParam/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-MethodParam/#let-identifier-nodewithidentifier-val-val","title":"let identifier: NodeWith[Identifier val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-MethodParam/#let-constraint-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let constraint: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-MethodParam/#let-initializer-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let initializer: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-MethodParam/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-MethodParam/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-MethodParam/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-MethodParam/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-MethodParam/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-MethodParam/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-MethodParam/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-MethodParam/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-MethodParam/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-MethodParams/","title":"MethodParams","text":"<p>[Source]</p> <p>Method parameters (formal parameters).</p> <pre><code>class val MethodParams is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-MethodParams/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-MethodParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-MethodParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  params': ReadSeq[NodeWith[MethodParam val] val] val)\n: MethodParams val^\n</code></pre>"},{"location":"eohippus-ast-MethodParams/#parameters","title":"Parameters","text":"<ul> <li>params': ReadSeq[NodeWith[MethodParam val] val] val</li> </ul>"},{"location":"eohippus-ast-MethodParams/#returns","title":"Returns","text":"<ul> <li>MethodParams val^</li> </ul>"},{"location":"eohippus-ast-MethodParams/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-MethodParams/#let-params-readseqnodewithmethodparam-val-val-val","title":"let params: ReadSeq[NodeWith[MethodParam val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-MethodParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-MethodParams/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-MethodParams/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-MethodParams/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-MethodParams/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-MethodParams/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-MethodParams/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-MethodParams/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-MethodParams/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-NestedCommentTrivia/","title":"NestedCommentTrivia","text":"<p>[Source] <pre><code>primitive val NestedCommentTrivia\n</code></pre></p>"},{"location":"eohippus-ast-NestedCommentTrivia/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-NestedCommentTrivia/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: NestedCommentTrivia val^\n</code></pre>"},{"location":"eohippus-ast-NestedCommentTrivia/#returns","title":"Returns","text":"<ul> <li>NestedCommentTrivia val^</li> </ul>"},{"location":"eohippus-ast-NestedCommentTrivia/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-NestedCommentTrivia/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: NestedCommentTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-NestedCommentTrivia/#parameters","title":"Parameters","text":"<ul> <li>that: NestedCommentTrivia val</li> </ul>"},{"location":"eohippus-ast-NestedCommentTrivia/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-NestedCommentTrivia/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: NestedCommentTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-NestedCommentTrivia/#parameters_1","title":"Parameters","text":"<ul> <li>that: NestedCommentTrivia val</li> </ul>"},{"location":"eohippus-ast-NestedCommentTrivia/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Node/","title":"Node","text":"<p>[Source]</p> <p>An AST node.</p> <pre><code>trait val Node\n</code></pre>"},{"location":"eohippus-ast-Node/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Node/#clone","title":"clone","text":"<p>[Source]</p> <p>Used to clone the node with certain updated properties during AST transformation.</p> <pre><code>fun val clone(\n  src_info': (SrcInfo val | None val) = reference,\n  new_children': (ReadSeq[Node val] val | None val) = reference,\n  update_map': (HashMap[Node val, Node val, HashIs[Node val] val] val | None val) = reference,\n  annotation': (NodeWith[Annotation val] val | None val) = reference,\n  doc_strings': (ReadSeq[NodeWith[DocString val] val] val | None val) = reference,\n  pre_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference,\n  post_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference,\n  ast_type': (AstType val | None val) = reference,\n  scope_index': (USize val | None val) = reference)\n: Node val\n</code></pre>"},{"location":"eohippus-ast-Node/#parameters","title":"Parameters","text":"<ul> <li>src_info': (SrcInfo val | None val) = reference</li> <li>new_children': (ReadSeq[Node val] val | None val) = reference</li> <li>update_map': (HashMap[Node val, Node val, HashIs[Node val] val] val | None val) = reference</li> <li>annotation': (NodeWith[Annotation val] val | None val) = reference</li> <li>doc_strings': (ReadSeq[NodeWith[DocString val] val] val | None val) = reference</li> <li>pre_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference</li> <li>post_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference</li> <li>ast_type': (AstType val | None val) = reference</li> <li>scope_index': (USize val | None val) = reference</li> </ul>"},{"location":"eohippus-ast-Node/#returns","title":"Returns","text":"<ul> <li>Node val</li> </ul>"},{"location":"eohippus-ast-Node/#name","title":"name","text":"<p>[Source]</p> <p>An informative identifier for the kind of data the node stores.</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Node/#src_info","title":"src_info","text":"<p>[Source]</p> <p>Source location information.</p> <pre><code>fun box src_info()\n: SrcInfo val\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_2","title":"Returns","text":"<ul> <li>SrcInfo val</li> </ul>"},{"location":"eohippus-ast-Node/#children","title":"children","text":"<p>[Source]</p> <pre><code>fun box children()\n: ReadSeq[Node val] val\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_3","title":"Returns","text":"<ul> <li>ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-Node/#annotation","title":"annotation","text":"<p>[Source]</p> <pre><code>fun box annotation()\n: (NodeWith[Annotation val] val | None val)\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_4","title":"Returns","text":"<ul> <li>(NodeWith[Annotation val] val | None val)</li> </ul>"},{"location":"eohippus-ast-Node/#doc_strings","title":"doc_strings","text":"<p>[Source]</p> <pre><code>fun box doc_strings()\n: ReadSeq[NodeWith[DocString val] val] val\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_5","title":"Returns","text":"<ul> <li>ReadSeq[NodeWith[DocString val] val] val</li> </ul>"},{"location":"eohippus-ast-Node/#pre_trivia","title":"pre_trivia","text":"<p>[Source]</p> <pre><code>fun box pre_trivia()\n: ReadSeq[NodeWith[Trivia val] val] val\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_6","title":"Returns","text":"<ul> <li>ReadSeq[NodeWith[Trivia val] val] val</li> </ul>"},{"location":"eohippus-ast-Node/#post_trivia","title":"post_trivia","text":"<p>[Source]</p> <pre><code>fun box post_trivia()\n: ReadSeq[NodeWith[Trivia val] val] val\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_7","title":"Returns","text":"<ul> <li>ReadSeq[NodeWith[Trivia val] val] val</li> </ul>"},{"location":"eohippus-ast-Node/#ast_type","title":"ast_type","text":"<p>[Source]</p> <p>The resolved type of the node.</p> <pre><code>fun box ast_type()\n: (AstType val | None val)\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_8","title":"Returns","text":"<ul> <li>(AstType val | None val)</li> </ul>"},{"location":"eohippus-ast-Node/#scope_index","title":"scope_index","text":"<p>[Source]</p> <pre><code>fun box scope_index()\n: (USize val | None val)\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_9","title":"Returns","text":"<ul> <li>(USize val | None val)</li> </ul>"},{"location":"eohippus-ast-Node/#get_json","title":"get_json","text":"<p>[Source]</p> <p>Get a JSON representation of the node.</p> <pre><code>fun box get_json()\n: Object box\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_10","title":"Returns","text":"<ul> <li>Object box</li> </ul>"},{"location":"eohippus-ast-Node/#mapd-nodedata-val","title":"map[D: NodeData val]","text":"<p>[Source]</p> <pre><code>fun box map[D: NodeData val](\n  seq: ReadSeq[NodeWith[D] val] val,\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: ReadSeq[NodeWith[D] val] val\n</code></pre>"},{"location":"eohippus-ast-Node/#parameters_1","title":"Parameters","text":"<ul> <li>seq: ReadSeq[NodeWith[D] val] val</li> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-Node/#returns_11","title":"Returns","text":"<ul> <li>ReadSeq[NodeWith[D] val] val</li> </ul>"},{"location":"eohippus-ast-Node/#child_ref","title":"child_ref","text":"<p>[Source]</p> <pre><code>fun box child_ref(\n  child: Node val)\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-ast-Node/#parameters_2","title":"Parameters","text":"<ul> <li>child: Node val</li> </ul>"},{"location":"eohippus-ast-Node/#returns_12","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-ast-Node/#child_refs","title":"child_refs","text":"<p>[Source]</p> <pre><code>fun box child_refs(\n  childs: ReadSeq[Node val] val)\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-ast-Node/#parameters_3","title":"Parameters","text":"<ul> <li>childs: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-Node/#returns_13","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-ast-Node/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"eohippus-ast-Node/#returns_14","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-ast-NodeData/","title":"NodeData","text":"<p>[Source]</p> <p>Contains strongly-typed data for various AST nodes.</p> <pre><code>trait val NodeData\n</code></pre>"},{"location":"eohippus-ast-NodeData/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-NodeData/#name","title":"name","text":"<p>[Source]</p> <p>An informative identifier for the type of data the AST node holds.</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-NodeData/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-NodeData/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <p>Add properties to the JSON representation of the AST node.</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-NodeData/#parameters","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-NodeData/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-NodeData/#clone","title":"clone","text":"<p>[Source]</p> <p>Clone the strongly-typed data during a syntax tree transformation.</p> <pre><code>fun val clone(\n  update_map: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-NodeData/#parameters_1","title":"Parameters","text":"<ul> <li>update_map: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-NodeData/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-NodeDataWithValue/","title":"NodeDataWithValue[D: NodeData val, V: Any val]","text":"<p>[Source]</p> <p>The literal value of an AST node (i.e. a boolean or numeric literal).</p> <pre><code>trait val NodeDataWithValue[D: NodeData val, V: Any val] is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-NodeDataWithValue/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-NodeDataWithValue/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-NodeDataWithValue/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: V\n</code></pre>"},{"location":"eohippus-ast-NodeDataWithValue/#returns","title":"Returns","text":"<ul> <li>V</li> </ul>"},{"location":"eohippus-ast-NodeDataWithValue/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-NodeDataWithValue/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-NodeDataWithValue/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-NodeDataWithValue/#parameters","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-NodeDataWithValue/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-NodeDataWithValue/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  update_map: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-NodeDataWithValue/#parameters_1","title":"Parameters","text":"<ul> <li>update_map: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-NodeDataWithValue/#returns_3","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-NodeSeq/","title":"NodeSeq","text":"<p>[Source]</p> <p>A sequence of AST nodes.</p> <pre><code>type NodeSeq is\n  ReadSeq[Node val] val\n</code></pre>"},{"location":"eohippus-ast-NodeSeq/#type-alias-for","title":"Type Alias For","text":"<ul> <li>ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-NodeSeqWith/","title":"NodeSeqWith[D: NodeData val]","text":"<p>[Source]</p> <p>A sequence of AST nodes with a given node data type.</p> <pre><code>type NodeSeqWith[D: NodeData val] is\n  ReadSeq[NodeWith[D] val] val\n</code></pre>"},{"location":"eohippus-ast-NodeSeqWith/#type-alias-for","title":"Type Alias For","text":"<ul> <li>ReadSeq[NodeWith[D] val] val</li> </ul>"},{"location":"eohippus-ast-NodeWith/","title":"NodeWith[D: NodeData val]","text":"<p>[Source]</p> <p>An AST node with specific semantic data.</p> <pre><code>class val NodeWith[D: NodeData val] is\n  Node val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#implements","title":"Implements","text":"<ul> <li>Node val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-NodeWith/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  src_info': SrcInfo val,\n  children': ReadSeq[Node val] val,\n  data': D,\n  annotation': (NodeWith[Annotation val] val | None val) = reference,\n  doc_strings': ReadSeq[NodeWith[DocString val] val] val = array,\n  pre_trivia': ReadSeq[NodeWith[Trivia val] val] val = array,\n  post_trivia': ReadSeq[NodeWith[Trivia val] val] val = array,\n  ast_type': (AstType val | None val) = reference,\n  scope_index': (USize val | None val) = reference)\n: NodeWith[D] val^\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#parameters","title":"Parameters","text":"<ul> <li>src_info': SrcInfo val</li> <li>children': ReadSeq[Node val] val</li> <li>data': D</li> <li>annotation': (NodeWith[Annotation val] val | None val) = reference</li> <li>doc_strings': ReadSeq[NodeWith[DocString val] val] val = array</li> <li>pre_trivia': ReadSeq[NodeWith[Trivia val] val] val = array</li> <li>post_trivia': ReadSeq[NodeWith[Trivia val] val] val = array</li> <li>ast_type': (AstType val | None val) = reference</li> <li>scope_index': (USize val | None val) = reference</li> </ul>"},{"location":"eohippus-ast-NodeWith/#returns","title":"Returns","text":"<ul> <li>NodeWith[D] val^</li> </ul>"},{"location":"eohippus-ast-NodeWith/#from","title":"from","text":"<p>[Source]</p> <pre><code>new val from(\n  orig: NodeWith[D] val,\n  src_info': (SrcInfo val | None val) = reference,\n  children': (ReadSeq[Node val] val | None val) = reference,\n  data': (D | None val) = reference,\n  annotation': (NodeWith[Annotation val] val | None val) = reference,\n  doc_strings': (ReadSeq[NodeWith[DocString val] val] val | None val) = reference,\n  pre_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference,\n  post_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference,\n  ast_type': (AstType val | None val) = reference,\n  scope_index': (USize val | None val) = reference)\n: NodeWith[D] val^\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#parameters_1","title":"Parameters","text":"<ul> <li>orig: NodeWith[D] val</li> <li>src_info': (SrcInfo val | None val) = reference</li> <li>children': (ReadSeq[Node val] val | None val) = reference</li> <li>data': (D | None val) = reference</li> <li>annotation': (NodeWith[Annotation val] val | None val) = reference</li> <li>doc_strings': (ReadSeq[NodeWith[DocString val] val] val | None val) = reference</li> <li>pre_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference</li> <li>post_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference</li> <li>ast_type': (AstType val | None val) = reference</li> <li>scope_index': (USize val | None val) = reference</li> </ul>"},{"location":"eohippus-ast-NodeWith/#returns_1","title":"Returns","text":"<ul> <li>NodeWith[D] val^</li> </ul>"},{"location":"eohippus-ast-NodeWith/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-NodeWith/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  src_info': (SrcInfo val | None val) = reference,\n  new_children': (ReadSeq[Node val] val | None val) = reference,\n  update_map': (HashMap[Node val, Node val, HashIs[Node val] val] val | None val) = reference,\n  annotation': (NodeWith[Annotation val] val | None val) = reference,\n  doc_strings': (ReadSeq[NodeWith[DocString val] val] val | None val) = reference,\n  pre_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference,\n  post_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference,\n  ast_type': (AstType val | None val) = reference,\n  scope_index': (USize val | None val) = reference)\n: Node val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#parameters_2","title":"Parameters","text":"<ul> <li>src_info': (SrcInfo val | None val) = reference</li> <li>new_children': (ReadSeq[Node val] val | None val) = reference</li> <li>update_map': (HashMap[Node val, Node val, HashIs[Node val] val] val | None val) = reference</li> <li>annotation': (NodeWith[Annotation val] val | None val) = reference</li> <li>doc_strings': (ReadSeq[NodeWith[DocString val] val] val | None val) = reference</li> <li>pre_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference</li> <li>post_trivia': (ReadSeq[NodeWith[Trivia val] val] val | None val) = reference</li> <li>ast_type': (AstType val | None val) = reference</li> <li>scope_index': (USize val | None val) = reference</li> </ul>"},{"location":"eohippus-ast-NodeWith/#returns_2","title":"Returns","text":"<ul> <li>Node val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#name","title":"name","text":"<p>[Source]</p> <p>The kind of data that is stored in this node.</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#src_info","title":"src_info","text":"<p>[Source]</p> <p>Source file information for this node.</p> <pre><code>fun box src_info()\n: SrcInfo val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_4","title":"Returns","text":"<ul> <li>SrcInfo val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#children","title":"children","text":"<p>[Source]</p> <p>The complete list of children of this node.</p> <pre><code>fun box children()\n: ReadSeq[Node val] val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_5","title":"Returns","text":"<ul> <li>ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#data","title":"data","text":"<p>[Source]</p> <p>Semantic data associated with this node.  Node references in <code>data</code> must reference nodes in <code>children</code>.</p> <pre><code>fun box data()\n: D\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_6","title":"Returns","text":"<ul> <li>D</li> </ul>"},{"location":"eohippus-ast-NodeWith/#doc_strings","title":"doc_strings","text":"<p>[Source]</p> <p>Zero or more doc strings associated with this node.  Must be references to nodes in <code>children</code>.</p> <pre><code>fun box doc_strings()\n: ReadSeq[NodeWith[DocString val] val] val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_7","title":"Returns","text":"<ul> <li>ReadSeq[NodeWith[DocString val] val] val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#annotation","title":"annotation","text":"<p>[Source]</p> <p>The node's annotation, if any. Must be a reference to a node in <code>children</code>.</p> <pre><code>fun box annotation()\n: (NodeWith[Annotation val] val | None val)\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_8","title":"Returns","text":"<ul> <li>(NodeWith[Annotation val] val | None val)</li> </ul>"},{"location":"eohippus-ast-NodeWith/#pre_trivia","title":"pre_trivia","text":"<p>[Source]</p> <p>Trivia (whitespace, comments) that appears before the significant content of this node. Likely only appears in <code>SrcFile</code>. Must be references to nodes in <code>children</code>.</p> <pre><code>fun box pre_trivia()\n: ReadSeq[NodeWith[Trivia val] val] val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_9","title":"Returns","text":"<ul> <li>ReadSeq[NodeWith[Trivia val] val] val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#post_trivia","title":"post_trivia","text":"<p>[Source]</p> <p>Trivia (whitespace, comments) that appears after the significant content of this node. Must be references to nodes in <code>children</code>.</p> <pre><code>fun box post_trivia()\n: ReadSeq[NodeWith[Trivia val] val] val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_10","title":"Returns","text":"<ul> <li>ReadSeq[NodeWith[Trivia val] val] val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#ast_type","title":"ast_type","text":"<p>[Source]</p> <p>The resolved type of this node, if any.</p> <pre><code>fun box ast_type()\n: (AstType val | None val)\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_11","title":"Returns","text":"<ul> <li>(AstType val | None val)</li> </ul>"},{"location":"eohippus-ast-NodeWith/#scope_index","title":"scope_index","text":"<p>[Source]</p> <pre><code>fun box scope_index()\n: (USize val | None val)\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_12","title":"Returns","text":"<ul> <li>(USize val | None val)</li> </ul>"},{"location":"eohippus-ast-NodeWith/#get_json","title":"get_json","text":"<p>[Source]</p> <p>Get a JSON representation of the node.</p> <pre><code>fun box get_json()\n: Object box\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_13","title":"Returns","text":"<ul> <li>Object box</li> </ul>"},{"location":"eohippus-ast-NodeWith/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#returns_14","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-ast-NodeWith/#mapd-nodedata-val","title":"map[D: NodeData val]","text":"<p>[Source]</p> <pre><code>fun box map[D: NodeData val](\n  seq: ReadSeq[NodeWith[D] val] val,\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: ReadSeq[NodeWith[D] val] val\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#parameters_3","title":"Parameters","text":"<ul> <li>seq: ReadSeq[NodeWith[D] val] val</li> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#returns_15","title":"Returns","text":"<ul> <li>ReadSeq[NodeWith[D] val] val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#child_ref","title":"child_ref","text":"<p>[Source]</p> <pre><code>fun box child_ref(\n  child: Node val)\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#parameters_4","title":"Parameters","text":"<ul> <li>child: Node val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#returns_16","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-ast-NodeWith/#child_refs","title":"child_refs","text":"<p>[Source]</p> <pre><code>fun box child_refs(\n  childs: ReadSeq[Node val] val)\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-ast-NodeWith/#parameters_5","title":"Parameters","text":"<ul> <li>childs: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-NodeWith/#returns_17","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-ast-ParseAnnotation/","title":"ParseAnnotation","text":"<p>[Source] <pre><code>primitive val ParseAnnotation\n</code></pre></p>"},{"location":"eohippus-ast-ParseAnnotation/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseAnnotation/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseAnnotation val^\n</code></pre>"},{"location":"eohippus-ast-ParseAnnotation/#returns","title":"Returns","text":"<ul> <li>ParseAnnotation val^</li> </ul>"},{"location":"eohippus-ast-ParseAnnotation/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseAnnotation/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (Annotation val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseAnnotation/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseAnnotation/#returns_1","title":"Returns","text":"<ul> <li>(Annotation val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseAnnotation/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseAnnotation val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseAnnotation/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseAnnotation val</li> </ul>"},{"location":"eohippus-ast-ParseAnnotation/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseAnnotation/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseAnnotation val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseAnnotation/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseAnnotation val</li> </ul>"},{"location":"eohippus-ast-ParseAnnotation/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseCallArgs/","title":"ParseCallArgs","text":"<p>[Source] <pre><code>primitive val ParseCallArgs\n</code></pre></p>"},{"location":"eohippus-ast-ParseCallArgs/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseCallArgs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseCallArgs val^\n</code></pre>"},{"location":"eohippus-ast-ParseCallArgs/#returns","title":"Returns","text":"<ul> <li>ParseCallArgs val^</li> </ul>"},{"location":"eohippus-ast-ParseCallArgs/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseCallArgs/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (CallArgs val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseCallArgs/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseCallArgs/#returns_1","title":"Returns","text":"<ul> <li>(CallArgs val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseCallArgs/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseCallArgs val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseCallArgs/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseCallArgs val</li> </ul>"},{"location":"eohippus-ast-ParseCallArgs/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseCallArgs/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseCallArgs val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseCallArgs/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseCallArgs val</li> </ul>"},{"location":"eohippus-ast-ParseCallArgs/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseDocString/","title":"ParseDocString","text":"<p>[Source] <pre><code>primitive val ParseDocString\n</code></pre></p>"},{"location":"eohippus-ast-ParseDocString/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseDocString/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseDocString val^\n</code></pre>"},{"location":"eohippus-ast-ParseDocString/#returns","title":"Returns","text":"<ul> <li>ParseDocString val^</li> </ul>"},{"location":"eohippus-ast-ParseDocString/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseDocString/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (DocString val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseDocString/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseDocString/#returns_1","title":"Returns","text":"<ul> <li>(DocString val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseDocString/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseDocString val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseDocString/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseDocString val</li> </ul>"},{"location":"eohippus-ast-ParseDocString/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseDocString/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseDocString val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseDocString/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseDocString val</li> </ul>"},{"location":"eohippus-ast-ParseDocString/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseErrorSection/","title":"ParseErrorSection","text":"<p>[Source] <pre><code>primitive val ParseErrorSection\n</code></pre></p>"},{"location":"eohippus-ast-ParseErrorSection/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseErrorSection/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseErrorSection val^\n</code></pre>"},{"location":"eohippus-ast-ParseErrorSection/#returns","title":"Returns","text":"<ul> <li>ParseErrorSection val^</li> </ul>"},{"location":"eohippus-ast-ParseErrorSection/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseErrorSection/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ErrorSection val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseErrorSection/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseErrorSection/#returns_1","title":"Returns","text":"<ul> <li>(ErrorSection val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseErrorSection/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseErrorSection val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseErrorSection/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseErrorSection val</li> </ul>"},{"location":"eohippus-ast-ParseErrorSection/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseErrorSection/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseErrorSection val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseErrorSection/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseErrorSection val</li> </ul>"},{"location":"eohippus-ast-ParseErrorSection/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpArray/","title":"ParseExpArray","text":"<p>[Source] <pre><code>primitive val ParseExpArray\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpArray/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpArray/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpArray val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpArray/#returns","title":"Returns","text":"<ul> <li>ParseExpArray val^</li> </ul>"},{"location":"eohippus-ast-ParseExpArray/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpArray/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpArray val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpArray/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpArray/#returns_1","title":"Returns","text":"<ul> <li>(ExpArray val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpArray/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpArray val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpArray/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpArray val</li> </ul>"},{"location":"eohippus-ast-ParseExpArray/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpArray/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpArray val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpArray/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpArray val</li> </ul>"},{"location":"eohippus-ast-ParseExpArray/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpAtom/","title":"ParseExpAtom","text":"<p>[Source] <pre><code>primitive val ParseExpAtom\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpAtom/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpAtom/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpAtom val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpAtom/#returns","title":"Returns","text":"<ul> <li>ParseExpAtom val^</li> </ul>"},{"location":"eohippus-ast-ParseExpAtom/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpAtom/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpAtom val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpAtom/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpAtom/#returns_1","title":"Returns","text":"<ul> <li>(ExpAtom val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpAtom/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpAtom val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpAtom/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpAtom val</li> </ul>"},{"location":"eohippus-ast-ParseExpAtom/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpAtom/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpAtom val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpAtom/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpAtom val</li> </ul>"},{"location":"eohippus-ast-ParseExpAtom/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpCall/","title":"ParseExpCall","text":"<p>[Source] <pre><code>primitive val ParseExpCall\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpCall/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpCall/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpCall val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpCall/#returns","title":"Returns","text":"<ul> <li>ParseExpCall val^</li> </ul>"},{"location":"eohippus-ast-ParseExpCall/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpCall/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpCall val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpCall/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpCall/#returns_1","title":"Returns","text":"<ul> <li>(ExpCall val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpCall/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpCall val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpCall/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpCall val</li> </ul>"},{"location":"eohippus-ast-ParseExpCall/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpCall/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpCall val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpCall/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpCall val</li> </ul>"},{"location":"eohippus-ast-ParseExpCall/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpConsume/","title":"ParseExpConsume","text":"<p>[Source] <pre><code>primitive val ParseExpConsume\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpConsume/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpConsume/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpConsume val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpConsume/#returns","title":"Returns","text":"<ul> <li>ParseExpConsume val^</li> </ul>"},{"location":"eohippus-ast-ParseExpConsume/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpConsume/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpConsume val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpConsume/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpConsume/#returns_1","title":"Returns","text":"<ul> <li>(ExpConsume val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpConsume/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpConsume val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpConsume/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpConsume val</li> </ul>"},{"location":"eohippus-ast-ParseExpConsume/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpConsume/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpConsume val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpConsume/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpConsume val</li> </ul>"},{"location":"eohippus-ast-ParseExpConsume/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpDecl/","title":"ParseExpDecl","text":"<p>[Source] <pre><code>primitive val ParseExpDecl\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpDecl/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpDecl/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpDecl val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpDecl/#returns","title":"Returns","text":"<ul> <li>ParseExpDecl val^</li> </ul>"},{"location":"eohippus-ast-ParseExpDecl/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpDecl/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpDecl val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpDecl/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpDecl/#returns_1","title":"Returns","text":"<ul> <li>(ExpDecl val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpDecl/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpDecl val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpDecl/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpDecl val</li> </ul>"},{"location":"eohippus-ast-ParseExpDecl/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpDecl/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpDecl val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpDecl/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpDecl val</li> </ul>"},{"location":"eohippus-ast-ParseExpDecl/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpFfi/","title":"ParseExpFfi","text":"<p>[Source] <pre><code>primitive val ParseExpFfi\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpFfi/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpFfi/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpFfi val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpFfi/#returns","title":"Returns","text":"<ul> <li>ParseExpFfi val^</li> </ul>"},{"location":"eohippus-ast-ParseExpFfi/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpFfi/#help_id","title":"help_id","text":"<p>[Source]</p> <pre><code>fun box help_id()\n: String val\n</code></pre>"},{"location":"eohippus-ast-ParseExpFfi/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-ParseExpFfi/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpFfi val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpFfi/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpFfi/#returns_2","title":"Returns","text":"<ul> <li>(ExpFfi val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpFfi/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpFfi val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpFfi/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpFfi val</li> </ul>"},{"location":"eohippus-ast-ParseExpFfi/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpFfi/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpFfi val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpFfi/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpFfi val</li> </ul>"},{"location":"eohippus-ast-ParseExpFfi/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpFor/","title":"ParseExpFor","text":"<p>[Source] <pre><code>primitive val ParseExpFor\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpFor/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpFor/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpFor val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpFor/#returns","title":"Returns","text":"<ul> <li>ParseExpFor val^</li> </ul>"},{"location":"eohippus-ast-ParseExpFor/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpFor/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpFor val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpFor/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpFor/#returns_1","title":"Returns","text":"<ul> <li>(ExpFor val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpFor/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpFor val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpFor/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpFor val</li> </ul>"},{"location":"eohippus-ast-ParseExpFor/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpFor/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpFor val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpFor/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpFor val</li> </ul>"},{"location":"eohippus-ast-ParseExpFor/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpGeneric/","title":"ParseExpGeneric","text":"<p>[Source] <pre><code>primitive val ParseExpGeneric\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpGeneric/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpGeneric/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpGeneric val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpGeneric/#returns","title":"Returns","text":"<ul> <li>ParseExpGeneric val^</li> </ul>"},{"location":"eohippus-ast-ParseExpGeneric/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpGeneric/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpGeneric val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpGeneric/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpGeneric/#returns_1","title":"Returns","text":"<ul> <li>(ExpGeneric val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpGeneric/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpGeneric val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpGeneric/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpGeneric val</li> </ul>"},{"location":"eohippus-ast-ParseExpGeneric/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpGeneric/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpGeneric val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpGeneric/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpGeneric val</li> </ul>"},{"location":"eohippus-ast-ParseExpGeneric/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpHash/","title":"ParseExpHash","text":"<p>[Source] <pre><code>primitive val ParseExpHash\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpHash/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpHash/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpHash val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpHash/#returns","title":"Returns","text":"<ul> <li>ParseExpHash val^</li> </ul>"},{"location":"eohippus-ast-ParseExpHash/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpHash/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpHash val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpHash/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpHash/#returns_1","title":"Returns","text":"<ul> <li>(ExpHash val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpHash/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpHash val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpHash/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpHash val</li> </ul>"},{"location":"eohippus-ast-ParseExpHash/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpHash/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpHash val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpHash/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpHash val</li> </ul>"},{"location":"eohippus-ast-ParseExpHash/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpIf/","title":"ParseExpIf","text":"<p>[Source] <pre><code>primitive val ParseExpIf\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpIf/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpIf/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpIf val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpIf/#returns","title":"Returns","text":"<ul> <li>ParseExpIf val^</li> </ul>"},{"location":"eohippus-ast-ParseExpIf/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpIf/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpIf val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpIf/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpIf/#returns_1","title":"Returns","text":"<ul> <li>(ExpIf val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpIf/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpIf val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpIf/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpIf val</li> </ul>"},{"location":"eohippus-ast-ParseExpIf/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpIf/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpIf val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpIf/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpIf val</li> </ul>"},{"location":"eohippus-ast-ParseExpIf/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpJump/","title":"ParseExpJump","text":"<p>[Source] <pre><code>primitive val ParseExpJump\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpJump/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpJump/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpJump val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpJump/#returns","title":"Returns","text":"<ul> <li>ParseExpJump val^</li> </ul>"},{"location":"eohippus-ast-ParseExpJump/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpJump/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpJump val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpJump/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpJump/#returns_1","title":"Returns","text":"<ul> <li>(ExpJump val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpJump/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpJump val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpJump/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpJump val</li> </ul>"},{"location":"eohippus-ast-ParseExpJump/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpJump/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpJump val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpJump/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpJump val</li> </ul>"},{"location":"eohippus-ast-ParseExpJump/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpLambda/","title":"ParseExpLambda","text":"<p>[Source] <pre><code>primitive val ParseExpLambda\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpLambda/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpLambda/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpLambda val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpLambda/#returns","title":"Returns","text":"<ul> <li>ParseExpLambda val^</li> </ul>"},{"location":"eohippus-ast-ParseExpLambda/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpLambda/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpLambda val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpLambda/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpLambda/#returns_1","title":"Returns","text":"<ul> <li>(ExpLambda val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpLambda/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpLambda val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpLambda/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpLambda val</li> </ul>"},{"location":"eohippus-ast-ParseExpLambda/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpLambda/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpLambda val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpLambda/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpLambda val</li> </ul>"},{"location":"eohippus-ast-ParseExpLambda/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpMatch/","title":"ParseExpMatch","text":"<p>[Source] <pre><code>primitive val ParseExpMatch\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpMatch/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpMatch/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpMatch val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpMatch/#returns","title":"Returns","text":"<ul> <li>ParseExpMatch val^</li> </ul>"},{"location":"eohippus-ast-ParseExpMatch/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpMatch/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpMatch val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpMatch/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpMatch/#returns_1","title":"Returns","text":"<ul> <li>(ExpMatch val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpMatch/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpMatch val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpMatch/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpMatch val</li> </ul>"},{"location":"eohippus-ast-ParseExpMatch/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpMatch/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpMatch val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpMatch/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpMatch val</li> </ul>"},{"location":"eohippus-ast-ParseExpMatch/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpObject/","title":"ParseExpObject","text":"<p>[Source] <pre><code>primitive val ParseExpObject\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpObject/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpObject/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpObject val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpObject/#returns","title":"Returns","text":"<ul> <li>ParseExpObject val^</li> </ul>"},{"location":"eohippus-ast-ParseExpObject/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpObject/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpObject val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpObject/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpObject/#returns_1","title":"Returns","text":"<ul> <li>(ExpObject val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpObject/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpObject val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpObject/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpObject val</li> </ul>"},{"location":"eohippus-ast-ParseExpObject/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpObject/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpObject val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpObject/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpObject val</li> </ul>"},{"location":"eohippus-ast-ParseExpObject/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpOperation/","title":"ParseExpOperation","text":"<p>[Source] <pre><code>primitive val ParseExpOperation\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpOperation/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpOperation/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpOperation val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpOperation/#returns","title":"Returns","text":"<ul> <li>ParseExpOperation val^</li> </ul>"},{"location":"eohippus-ast-ParseExpOperation/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpOperation/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpOperation val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpOperation/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpOperation/#returns_1","title":"Returns","text":"<ul> <li>(ExpOperation val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpOperation/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpOperation val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpOperation/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpOperation val</li> </ul>"},{"location":"eohippus-ast-ParseExpOperation/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpOperation/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpOperation val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpOperation/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpOperation val</li> </ul>"},{"location":"eohippus-ast-ParseExpOperation/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpRecover/","title":"ParseExpRecover","text":"<p>[Source] <pre><code>primitive val ParseExpRecover\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpRecover/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpRecover/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpRecover val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpRecover/#returns","title":"Returns","text":"<ul> <li>ParseExpRecover val^</li> </ul>"},{"location":"eohippus-ast-ParseExpRecover/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpRecover/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpRecover val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpRecover/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpRecover/#returns_1","title":"Returns","text":"<ul> <li>(ExpRecover val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpRecover/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpRecover val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpRecover/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpRecover val</li> </ul>"},{"location":"eohippus-ast-ParseExpRecover/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpRecover/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpRecover val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpRecover/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpRecover val</li> </ul>"},{"location":"eohippus-ast-ParseExpRecover/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpRepeat/","title":"ParseExpRepeat","text":"<p>[Source] <pre><code>primitive val ParseExpRepeat\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpRepeat/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpRepeat/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpRepeat val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpRepeat/#returns","title":"Returns","text":"<ul> <li>ParseExpRepeat val^</li> </ul>"},{"location":"eohippus-ast-ParseExpRepeat/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpRepeat/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpRepeat val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpRepeat/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpRepeat/#returns_1","title":"Returns","text":"<ul> <li>(ExpRepeat val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpRepeat/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpRepeat val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpRepeat/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpRepeat val</li> </ul>"},{"location":"eohippus-ast-ParseExpRepeat/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpRepeat/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpRepeat val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpRepeat/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpRepeat val</li> </ul>"},{"location":"eohippus-ast-ParseExpRepeat/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpSequence/","title":"ParseExpSequence","text":"<p>[Source] <pre><code>primitive val ParseExpSequence\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpSequence/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpSequence/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpSequence val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpSequence/#returns","title":"Returns","text":"<ul> <li>ParseExpSequence val^</li> </ul>"},{"location":"eohippus-ast-ParseExpSequence/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpSequence/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpSequence val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpSequence/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpSequence/#returns_1","title":"Returns","text":"<ul> <li>(ExpSequence val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpSequence/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpSequence val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpSequence/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpSequence val</li> </ul>"},{"location":"eohippus-ast-ParseExpSequence/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpSequence/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpSequence val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpSequence/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpSequence val</li> </ul>"},{"location":"eohippus-ast-ParseExpSequence/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpTry/","title":"ParseExpTry","text":"<p>[Source] <pre><code>primitive val ParseExpTry\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpTry/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpTry/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpTry val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpTry/#returns","title":"Returns","text":"<ul> <li>ParseExpTry val^</li> </ul>"},{"location":"eohippus-ast-ParseExpTry/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpTry/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpTry val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpTry/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpTry/#returns_1","title":"Returns","text":"<ul> <li>(ExpTry val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpTry/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpTry val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpTry/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpTry val</li> </ul>"},{"location":"eohippus-ast-ParseExpTry/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpTry/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpTry val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpTry/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpTry val</li> </ul>"},{"location":"eohippus-ast-ParseExpTry/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpTuple/","title":"ParseExpTuple","text":"<p>[Source] <pre><code>primitive val ParseExpTuple\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpTuple/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpTuple/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpTuple val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpTuple/#returns","title":"Returns","text":"<ul> <li>ParseExpTuple val^</li> </ul>"},{"location":"eohippus-ast-ParseExpTuple/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpTuple/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpTuple val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpTuple/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpTuple/#returns_1","title":"Returns","text":"<ul> <li>(ExpTuple val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpTuple/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpTuple val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpTuple/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpTuple val</li> </ul>"},{"location":"eohippus-ast-ParseExpTuple/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpTuple/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpTuple val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpTuple/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpTuple val</li> </ul>"},{"location":"eohippus-ast-ParseExpTuple/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpWhile/","title":"ParseExpWhile","text":"<p>[Source] <pre><code>primitive val ParseExpWhile\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpWhile/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpWhile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpWhile val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpWhile/#returns","title":"Returns","text":"<ul> <li>ParseExpWhile val^</li> </ul>"},{"location":"eohippus-ast-ParseExpWhile/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpWhile/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpWhile val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpWhile/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpWhile/#returns_1","title":"Returns","text":"<ul> <li>(ExpWhile val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpWhile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpWhile val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpWhile/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpWhile val</li> </ul>"},{"location":"eohippus-ast-ParseExpWhile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpWhile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpWhile val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpWhile/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpWhile val</li> </ul>"},{"location":"eohippus-ast-ParseExpWhile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpWith/","title":"ParseExpWith","text":"<p>[Source] <pre><code>primitive val ParseExpWith\n</code></pre></p>"},{"location":"eohippus-ast-ParseExpWith/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseExpWith/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseExpWith val^\n</code></pre>"},{"location":"eohippus-ast-ParseExpWith/#returns","title":"Returns","text":"<ul> <li>ParseExpWith val^</li> </ul>"},{"location":"eohippus-ast-ParseExpWith/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseExpWith/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (ExpWith val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseExpWith/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseExpWith/#returns_1","title":"Returns","text":"<ul> <li>(ExpWith val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseExpWith/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseExpWith val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpWith/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseExpWith val</li> </ul>"},{"location":"eohippus-ast-ParseExpWith/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseExpWith/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseExpWith val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseExpWith/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseExpWith val</li> </ul>"},{"location":"eohippus-ast-ParseExpWith/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseIdentifier/","title":"ParseIdentifier","text":"<p>[Source] <pre><code>primitive val ParseIdentifier\n</code></pre></p>"},{"location":"eohippus-ast-ParseIdentifier/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseIdentifier/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseIdentifier val^\n</code></pre>"},{"location":"eohippus-ast-ParseIdentifier/#returns","title":"Returns","text":"<ul> <li>ParseIdentifier val^</li> </ul>"},{"location":"eohippus-ast-ParseIdentifier/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseIdentifier/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (Identifier val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseIdentifier/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseIdentifier/#returns_1","title":"Returns","text":"<ul> <li>(Identifier val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseIdentifier/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseIdentifier val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseIdentifier/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseIdentifier val</li> </ul>"},{"location":"eohippus-ast-ParseIdentifier/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseIdentifier/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseIdentifier val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseIdentifier/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseIdentifier val</li> </ul>"},{"location":"eohippus-ast-ParseIdentifier/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseIfCondition/","title":"ParseIfCondition","text":"<p>[Source] <pre><code>primitive val ParseIfCondition\n</code></pre></p>"},{"location":"eohippus-ast-ParseIfCondition/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseIfCondition/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseIfCondition val^\n</code></pre>"},{"location":"eohippus-ast-ParseIfCondition/#returns","title":"Returns","text":"<ul> <li>ParseIfCondition val^</li> </ul>"},{"location":"eohippus-ast-ParseIfCondition/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseIfCondition/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (IfCondition val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseIfCondition/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseIfCondition/#returns_1","title":"Returns","text":"<ul> <li>(IfCondition val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseIfCondition/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseIfCondition val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseIfCondition/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseIfCondition val</li> </ul>"},{"location":"eohippus-ast-ParseIfCondition/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseIfCondition/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseIfCondition val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseIfCondition/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseIfCondition val</li> </ul>"},{"location":"eohippus-ast-ParseIfCondition/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseKeyword/","title":"ParseKeyword","text":"<p>[Source] <pre><code>primitive val ParseKeyword\n</code></pre></p>"},{"location":"eohippus-ast-ParseKeyword/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseKeyword/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseKeyword val^\n</code></pre>"},{"location":"eohippus-ast-ParseKeyword/#returns","title":"Returns","text":"<ul> <li>ParseKeyword val^</li> </ul>"},{"location":"eohippus-ast-ParseKeyword/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseKeyword/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (Keyword val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseKeyword/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseKeyword/#returns_1","title":"Returns","text":"<ul> <li>(Keyword val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseKeyword/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseKeyword val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseKeyword/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseKeyword val</li> </ul>"},{"location":"eohippus-ast-ParseKeyword/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseKeyword/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseKeyword val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseKeyword/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseKeyword val</li> </ul>"},{"location":"eohippus-ast-ParseKeyword/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralBool/","title":"ParseLiteralBool","text":"<p>[Source] <pre><code>primitive val ParseLiteralBool\n</code></pre></p>"},{"location":"eohippus-ast-ParseLiteralBool/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseLiteralBool/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseLiteralBool val^\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralBool/#returns","title":"Returns","text":"<ul> <li>ParseLiteralBool val^</li> </ul>"},{"location":"eohippus-ast-ParseLiteralBool/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseLiteralBool/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (LiteralBool val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralBool/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralBool/#returns_1","title":"Returns","text":"<ul> <li>(LiteralBool val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseLiteralBool/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseLiteralBool val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralBool/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseLiteralBool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralBool/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralBool/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseLiteralBool val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralBool/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseLiteralBool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralBool/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralChar/","title":"ParseLiteralChar","text":"<p>[Source] <pre><code>primitive val ParseLiteralChar\n</code></pre></p>"},{"location":"eohippus-ast-ParseLiteralChar/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseLiteralChar/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseLiteralChar val^\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralChar/#returns","title":"Returns","text":"<ul> <li>ParseLiteralChar val^</li> </ul>"},{"location":"eohippus-ast-ParseLiteralChar/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseLiteralChar/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (LiteralChar val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralChar/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralChar/#returns_1","title":"Returns","text":"<ul> <li>(LiteralChar val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseLiteralChar/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseLiteralChar val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralChar/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseLiteralChar val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralChar/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralChar/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseLiteralChar val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralChar/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseLiteralChar val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralChar/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralFloat/","title":"ParseLiteralFloat","text":"<p>[Source] <pre><code>primitive val ParseLiteralFloat\n</code></pre></p>"},{"location":"eohippus-ast-ParseLiteralFloat/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseLiteralFloat/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseLiteralFloat val^\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralFloat/#returns","title":"Returns","text":"<ul> <li>ParseLiteralFloat val^</li> </ul>"},{"location":"eohippus-ast-ParseLiteralFloat/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseLiteralFloat/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (LiteralFloat val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralFloat/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralFloat/#returns_1","title":"Returns","text":"<ul> <li>(LiteralFloat val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseLiteralFloat/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseLiteralFloat val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralFloat/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseLiteralFloat val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralFloat/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralFloat/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseLiteralFloat val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralFloat/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseLiteralFloat val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralFloat/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralInteger/","title":"ParseLiteralInteger","text":"<p>[Source] <pre><code>primitive val ParseLiteralInteger\n</code></pre></p>"},{"location":"eohippus-ast-ParseLiteralInteger/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseLiteralInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseLiteralInteger val^\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralInteger/#returns","title":"Returns","text":"<ul> <li>ParseLiteralInteger val^</li> </ul>"},{"location":"eohippus-ast-ParseLiteralInteger/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseLiteralInteger/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (LiteralInteger val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralInteger/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralInteger/#returns_1","title":"Returns","text":"<ul> <li>(LiteralInteger val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseLiteralInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseLiteralInteger val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralInteger/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseLiteralInteger val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralInteger/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseLiteralInteger val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralInteger/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseLiteralInteger val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralInteger/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralString/","title":"ParseLiteralString","text":"<p>[Source] <pre><code>primitive val ParseLiteralString\n</code></pre></p>"},{"location":"eohippus-ast-ParseLiteralString/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseLiteralString/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseLiteralString val^\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralString/#returns","title":"Returns","text":"<ul> <li>ParseLiteralString val^</li> </ul>"},{"location":"eohippus-ast-ParseLiteralString/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseLiteralString/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (LiteralString val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralString/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralString/#returns_1","title":"Returns","text":"<ul> <li>(LiteralString val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseLiteralString/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseLiteralString val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralString/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseLiteralString val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralString/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralString/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseLiteralString val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseLiteralString/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseLiteralString val</li> </ul>"},{"location":"eohippus-ast-ParseLiteralString/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseMatchCase/","title":"ParseMatchCase","text":"<p>[Source] <pre><code>primitive val ParseMatchCase\n</code></pre></p>"},{"location":"eohippus-ast-ParseMatchCase/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseMatchCase/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseMatchCase val^\n</code></pre>"},{"location":"eohippus-ast-ParseMatchCase/#returns","title":"Returns","text":"<ul> <li>ParseMatchCase val^</li> </ul>"},{"location":"eohippus-ast-ParseMatchCase/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseMatchCase/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (MatchCase val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseMatchCase/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseMatchCase/#returns_1","title":"Returns","text":"<ul> <li>(MatchCase val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseMatchCase/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseMatchCase val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseMatchCase/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseMatchCase val</li> </ul>"},{"location":"eohippus-ast-ParseMatchCase/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseMatchCase/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseMatchCase val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseMatchCase/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseMatchCase val</li> </ul>"},{"location":"eohippus-ast-ParseMatchCase/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParam/","title":"ParseMethodParam","text":"<p>[Source] <pre><code>primitive val ParseMethodParam\n</code></pre></p>"},{"location":"eohippus-ast-ParseMethodParam/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseMethodParam/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseMethodParam val^\n</code></pre>"},{"location":"eohippus-ast-ParseMethodParam/#returns","title":"Returns","text":"<ul> <li>ParseMethodParam val^</li> </ul>"},{"location":"eohippus-ast-ParseMethodParam/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseMethodParam/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (MethodParam val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseMethodParam/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParam/#returns_1","title":"Returns","text":"<ul> <li>(MethodParam val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseMethodParam/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseMethodParam val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseMethodParam/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseMethodParam val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParam/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParam/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseMethodParam val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseMethodParam/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseMethodParam val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParam/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParams/","title":"ParseMethodParams","text":"<p>[Source] <pre><code>primitive val ParseMethodParams\n</code></pre></p>"},{"location":"eohippus-ast-ParseMethodParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseMethodParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseMethodParams val^\n</code></pre>"},{"location":"eohippus-ast-ParseMethodParams/#returns","title":"Returns","text":"<ul> <li>ParseMethodParams val^</li> </ul>"},{"location":"eohippus-ast-ParseMethodParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseMethodParams/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (MethodParams val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseMethodParams/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParams/#returns_1","title":"Returns","text":"<ul> <li>(MethodParams val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseMethodParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseMethodParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseMethodParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseMethodParams val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseMethodParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseMethodParams/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseMethodParams val</li> </ul>"},{"location":"eohippus-ast-ParseMethodParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseNode/","title":"ParseNode","text":"<p>[Source] <pre><code>primitive val ParseNode\n</code></pre></p>"},{"location":"eohippus-ast-ParseNode/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseNode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseNode val^\n</code></pre>"},{"location":"eohippus-ast-ParseNode/#returns","title":"Returns","text":"<ul> <li>ParseNode val^</li> </ul>"},{"location":"eohippus-ast-ParseNode/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseNode/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  locator: String val,\n  obj: Object box)\n: (Node val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseNode/#parameters","title":"Parameters","text":"<ul> <li>locator: String val</li> <li>obj: Object box</li> </ul>"},{"location":"eohippus-ast-ParseNode/#returns_1","title":"Returns","text":"<ul> <li>(Node val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseNode/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseNode val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseNode/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseNode val</li> </ul>"},{"location":"eohippus-ast-ParseNode/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseNode/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseNode val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseNode/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseNode val</li> </ul>"},{"location":"eohippus-ast-ParseNode/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseSpan/","title":"ParseSpan","text":"<p>[Source] <pre><code>primitive val ParseSpan\n</code></pre></p>"},{"location":"eohippus-ast-ParseSpan/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseSpan/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseSpan val^\n</code></pre>"},{"location":"eohippus-ast-ParseSpan/#returns","title":"Returns","text":"<ul> <li>ParseSpan val^</li> </ul>"},{"location":"eohippus-ast-ParseSpan/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseSpan/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (Span val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseSpan/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseSpan/#returns_1","title":"Returns","text":"<ul> <li>(Span val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseSpan/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseSpan val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseSpan/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseSpan val</li> </ul>"},{"location":"eohippus-ast-ParseSpan/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseSpan/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseSpan val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseSpan/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseSpan val</li> </ul>"},{"location":"eohippus-ast-ParseSpan/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseSrcFile/","title":"ParseSrcFile","text":"<p>[Source] <pre><code>primitive val ParseSrcFile\n</code></pre></p>"},{"location":"eohippus-ast-ParseSrcFile/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseSrcFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseSrcFile val^\n</code></pre>"},{"location":"eohippus-ast-ParseSrcFile/#returns","title":"Returns","text":"<ul> <li>ParseSrcFile val^</li> </ul>"},{"location":"eohippus-ast-ParseSrcFile/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseSrcFile/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (SrcFile val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseSrcFile/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseSrcFile/#returns_1","title":"Returns","text":"<ul> <li>(SrcFile val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseSrcFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseSrcFile val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseSrcFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseSrcFile val</li> </ul>"},{"location":"eohippus-ast-ParseSrcFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseSrcFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseSrcFile val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseSrcFile/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseSrcFile val</li> </ul>"},{"location":"eohippus-ast-ParseSrcFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseToken/","title":"ParseToken","text":"<p>[Source] <pre><code>primitive val ParseToken\n</code></pre></p>"},{"location":"eohippus-ast-ParseToken/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseToken/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseToken val^\n</code></pre>"},{"location":"eohippus-ast-ParseToken/#returns","title":"Returns","text":"<ul> <li>ParseToken val^</li> </ul>"},{"location":"eohippus-ast-ParseToken/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseToken/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (Token val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseToken/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseToken/#returns_1","title":"Returns","text":"<ul> <li>(Token val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseToken/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseToken val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseToken/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseToken val</li> </ul>"},{"location":"eohippus-ast-ParseToken/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseToken/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseToken val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseToken/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseToken val</li> </ul>"},{"location":"eohippus-ast-ParseToken/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTrivia/","title":"ParseTrivia","text":"<p>[Source] <pre><code>primitive val ParseTrivia\n</code></pre></p>"},{"location":"eohippus-ast-ParseTrivia/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTrivia/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTrivia val^\n</code></pre>"},{"location":"eohippus-ast-ParseTrivia/#returns","title":"Returns","text":"<ul> <li>ParseTrivia val^</li> </ul>"},{"location":"eohippus-ast-ParseTrivia/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTrivia/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (Trivia val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTrivia/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTrivia/#returns_1","title":"Returns","text":"<ul> <li>(Trivia val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTrivia/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTrivia/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTrivia val</li> </ul>"},{"location":"eohippus-ast-ParseTrivia/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTrivia/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTrivia/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTrivia val</li> </ul>"},{"location":"eohippus-ast-ParseTrivia/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTuplePattern/","title":"ParseTuplePattern","text":"<p>[Source] <pre><code>primitive val ParseTuplePattern\n</code></pre></p>"},{"location":"eohippus-ast-ParseTuplePattern/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTuplePattern/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTuplePattern val^\n</code></pre>"},{"location":"eohippus-ast-ParseTuplePattern/#returns","title":"Returns","text":"<ul> <li>ParseTuplePattern val^</li> </ul>"},{"location":"eohippus-ast-ParseTuplePattern/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTuplePattern/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TuplePattern val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTuplePattern/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTuplePattern/#returns_1","title":"Returns","text":"<ul> <li>(TuplePattern val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTuplePattern/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTuplePattern val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTuplePattern/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTuplePattern val</li> </ul>"},{"location":"eohippus-ast-ParseTuplePattern/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTuplePattern/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTuplePattern val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTuplePattern/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTuplePattern val</li> </ul>"},{"location":"eohippus-ast-ParseTuplePattern/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArgs/","title":"ParseTypeArgs","text":"<p>[Source] <pre><code>primitive val ParseTypeArgs\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeArgs/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeArgs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeArgs val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeArgs/#returns","title":"Returns","text":"<ul> <li>ParseTypeArgs val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeArgs/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeArgs/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeArgs val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeArgs/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArgs/#returns_1","title":"Returns","text":"<ul> <li>(TypeArgs val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeArgs/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeArgs val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeArgs/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeArgs val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArgs/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArgs/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeArgs val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeArgs/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeArgs val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArgs/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArrow/","title":"ParseTypeArrow","text":"<p>[Source] <pre><code>primitive val ParseTypeArrow\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeArrow/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeArrow/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeArrow val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeArrow/#returns","title":"Returns","text":"<ul> <li>ParseTypeArrow val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeArrow/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeArrow/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeArrow val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeArrow/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArrow/#returns_1","title":"Returns","text":"<ul> <li>(TypeArrow val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeArrow/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeArrow val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeArrow/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeArrow val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArrow/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArrow/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeArrow val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeArrow/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeArrow val</li> </ul>"},{"location":"eohippus-ast-ParseTypeArrow/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeAtom/","title":"ParseTypeAtom","text":"<p>[Source] <pre><code>primitive val ParseTypeAtom\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeAtom/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeAtom/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeAtom val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeAtom/#returns","title":"Returns","text":"<ul> <li>ParseTypeAtom val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeAtom/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeAtom/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeAtom val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeAtom/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeAtom/#returns_1","title":"Returns","text":"<ul> <li>(TypeAtom val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeAtom/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeAtom val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeAtom/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeAtom val</li> </ul>"},{"location":"eohippus-ast-ParseTypeAtom/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeAtom/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeAtom val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeAtom/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeAtom val</li> </ul>"},{"location":"eohippus-ast-ParseTypeAtom/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeInfix/","title":"ParseTypeInfix","text":"<p>[Source] <pre><code>primitive val ParseTypeInfix\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeInfix/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeInfix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeInfix val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeInfix/#returns","title":"Returns","text":"<ul> <li>ParseTypeInfix val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeInfix/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeInfix/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeInfix val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeInfix/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeInfix/#returns_1","title":"Returns","text":"<ul> <li>(TypeInfix val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeInfix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeInfix val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeInfix/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeInfix val</li> </ul>"},{"location":"eohippus-ast-ParseTypeInfix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeInfix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeInfix val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeInfix/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeInfix val</li> </ul>"},{"location":"eohippus-ast-ParseTypeInfix/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeLambda/","title":"ParseTypeLambda","text":"<p>[Source] <pre><code>primitive val ParseTypeLambda\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeLambda/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeLambda/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeLambda val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeLambda/#returns","title":"Returns","text":"<ul> <li>ParseTypeLambda val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeLambda/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeLambda/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeLambda val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeLambda/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeLambda/#returns_1","title":"Returns","text":"<ul> <li>(TypeLambda val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeLambda/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeLambda val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeLambda/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeLambda val</li> </ul>"},{"location":"eohippus-ast-ParseTypeLambda/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeLambda/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeLambda val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeLambda/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeLambda val</li> </ul>"},{"location":"eohippus-ast-ParseTypeLambda/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeNominal/","title":"ParseTypeNominal","text":"<p>[Source] <pre><code>primitive val ParseTypeNominal\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeNominal/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeNominal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeNominal val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeNominal/#returns","title":"Returns","text":"<ul> <li>ParseTypeNominal val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeNominal/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeNominal/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeNominal val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeNominal/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeNominal/#returns_1","title":"Returns","text":"<ul> <li>(TypeNominal val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeNominal/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeNominal val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeNominal/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeNominal val</li> </ul>"},{"location":"eohippus-ast-ParseTypeNominal/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeNominal/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeNominal val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeNominal/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeNominal val</li> </ul>"},{"location":"eohippus-ast-ParseTypeNominal/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParam/","title":"ParseTypeParam","text":"<p>[Source] <pre><code>primitive val ParseTypeParam\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeParam/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeParam/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeParam val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeParam/#returns","title":"Returns","text":"<ul> <li>ParseTypeParam val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeParam/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeParam/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeParam val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeParam/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParam/#returns_1","title":"Returns","text":"<ul> <li>(TypeParam val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeParam/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeParam val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeParam/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeParam val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParam/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParam/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeParam val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeParam/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeParam val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParam/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParams/","title":"ParseTypeParams","text":"<p>[Source] <pre><code>primitive val ParseTypeParams\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeParams val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeParams/#returns","title":"Returns","text":"<ul> <li>ParseTypeParams val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeParams/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeParams val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeParams/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParams/#returns_1","title":"Returns","text":"<ul> <li>(TypeParams val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeParams val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeParams/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeParams val</li> </ul>"},{"location":"eohippus-ast-ParseTypeParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeTuple/","title":"ParseTypeTuple","text":"<p>[Source] <pre><code>primitive val ParseTypeTuple\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypeTuple/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypeTuple/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypeTuple val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypeTuple/#returns","title":"Returns","text":"<ul> <li>ParseTypeTuple val^</li> </ul>"},{"location":"eohippus-ast-ParseTypeTuple/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypeTuple/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypeTuple val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypeTuple/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypeTuple/#returns_1","title":"Returns","text":"<ul> <li>(TypeTuple val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypeTuple/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypeTuple val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeTuple/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypeTuple val</li> </ul>"},{"location":"eohippus-ast-ParseTypeTuple/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypeTuple/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypeTuple val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypeTuple/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypeTuple val</li> </ul>"},{"location":"eohippus-ast-ParseTypeTuple/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefAlias/","title":"ParseTypedefAlias","text":"<p>[Source] <pre><code>primitive val ParseTypedefAlias\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypedefAlias/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypedefAlias/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypedefAlias val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefAlias/#returns","title":"Returns","text":"<ul> <li>ParseTypedefAlias val^</li> </ul>"},{"location":"eohippus-ast-ParseTypedefAlias/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypedefAlias/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypedefAlias val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefAlias/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefAlias/#returns_1","title":"Returns","text":"<ul> <li>(TypedefAlias val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypedefAlias/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypedefAlias val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefAlias/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypedefAlias val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefAlias/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefAlias/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypedefAlias val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefAlias/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypedefAlias val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefAlias/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefClass/","title":"ParseTypedefClass","text":"<p>[Source] <pre><code>primitive val ParseTypedefClass\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypedefClass/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypedefClass/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypedefClass val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefClass/#returns","title":"Returns","text":"<ul> <li>ParseTypedefClass val^</li> </ul>"},{"location":"eohippus-ast-ParseTypedefClass/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypedefClass/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypedefClass val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefClass/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefClass/#returns_1","title":"Returns","text":"<ul> <li>(TypedefClass val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypedefClass/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypedefClass val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefClass/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypedefClass val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefClass/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefClass/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypedefClass val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefClass/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypedefClass val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefClass/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefField/","title":"ParseTypedefField","text":"<p>[Source] <pre><code>primitive val ParseTypedefField\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypedefField/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypedefField/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypedefField val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefField/#returns","title":"Returns","text":"<ul> <li>ParseTypedefField val^</li> </ul>"},{"location":"eohippus-ast-ParseTypedefField/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypedefField/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypedefField val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefField/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefField/#returns_1","title":"Returns","text":"<ul> <li>(TypedefField val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypedefField/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypedefField val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefField/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypedefField val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefField/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefField/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypedefField val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefField/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypedefField val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefField/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMembers/","title":"ParseTypedefMembers","text":"<p>[Source] <pre><code>primitive val ParseTypedefMembers\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypedefMembers/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypedefMembers/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypedefMembers val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefMembers/#returns","title":"Returns","text":"<ul> <li>ParseTypedefMembers val^</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMembers/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypedefMembers/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypedefMembers val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefMembers/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMembers/#returns_1","title":"Returns","text":"<ul> <li>(TypedefMembers val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMembers/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypedefMembers val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefMembers/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypedefMembers val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMembers/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMembers/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypedefMembers val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefMembers/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypedefMembers val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMembers/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMethod/","title":"ParseTypedefMethod","text":"<p>[Source] <pre><code>primitive val ParseTypedefMethod\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypedefMethod/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypedefMethod/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypedefMethod val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefMethod/#returns","title":"Returns","text":"<ul> <li>ParseTypedefMethod val^</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMethod/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypedefMethod/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypedefMethod val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefMethod/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMethod/#returns_1","title":"Returns","text":"<ul> <li>(TypedefMethod val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMethod/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypedefMethod val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefMethod/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypedefMethod val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMethod/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMethod/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypedefMethod val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefMethod/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypedefMethod val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefMethod/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefPrimitive/","title":"ParseTypedefPrimitive","text":"<p>[Source] <pre><code>primitive val ParseTypedefPrimitive\n</code></pre></p>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseTypedefPrimitive/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTypedefPrimitive val^\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#returns","title":"Returns","text":"<ul> <li>ParseTypedefPrimitive val^</li> </ul>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseTypedefPrimitive/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (TypedefPrimitive val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#returns_1","title":"Returns","text":"<ul> <li>(TypedefPrimitive val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTypedefPrimitive val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTypedefPrimitive val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTypedefPrimitive val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTypedefPrimitive val</li> </ul>"},{"location":"eohippus-ast-ParseTypedefPrimitive/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseUsingFFI/","title":"ParseUsingFFI","text":"<p>[Source] <pre><code>primitive val ParseUsingFFI\n</code></pre></p>"},{"location":"eohippus-ast-ParseUsingFFI/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseUsingFFI/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseUsingFFI val^\n</code></pre>"},{"location":"eohippus-ast-ParseUsingFFI/#returns","title":"Returns","text":"<ul> <li>ParseUsingFFI val^</li> </ul>"},{"location":"eohippus-ast-ParseUsingFFI/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseUsingFFI/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (UsingFFI val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseUsingFFI/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseUsingFFI/#returns_1","title":"Returns","text":"<ul> <li>(UsingFFI val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseUsingFFI/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseUsingFFI val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseUsingFFI/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseUsingFFI val</li> </ul>"},{"location":"eohippus-ast-ParseUsingFFI/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseUsingFFI/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseUsingFFI val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseUsingFFI/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseUsingFFI val</li> </ul>"},{"location":"eohippus-ast-ParseUsingFFI/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseUsingPony/","title":"ParseUsingPony","text":"<p>[Source] <pre><code>primitive val ParseUsingPony\n</code></pre></p>"},{"location":"eohippus-ast-ParseUsingPony/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseUsingPony/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseUsingPony val^\n</code></pre>"},{"location":"eohippus-ast-ParseUsingPony/#returns","title":"Returns","text":"<ul> <li>ParseUsingPony val^</li> </ul>"},{"location":"eohippus-ast-ParseUsingPony/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseUsingPony/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (UsingPony val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseUsingPony/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseUsingPony/#returns_1","title":"Returns","text":"<ul> <li>(UsingPony val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseUsingPony/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseUsingPony val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseUsingPony/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseUsingPony val</li> </ul>"},{"location":"eohippus-ast-ParseUsingPony/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseUsingPony/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseUsingPony val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseUsingPony/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseUsingPony val</li> </ul>"},{"location":"eohippus-ast-ParseUsingPony/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseWithElement/","title":"ParseWithElement","text":"<p>[Source] <pre><code>primitive val ParseWithElement\n</code></pre></p>"},{"location":"eohippus-ast-ParseWithElement/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-ParseWithElement/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseWithElement val^\n</code></pre>"},{"location":"eohippus-ast-ParseWithElement/#returns","title":"Returns","text":"<ul> <li>ParseWithElement val^</li> </ul>"},{"location":"eohippus-ast-ParseWithElement/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-ParseWithElement/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box,\n  children: ReadSeq[Node val] val)\n: (WithElement val | String val)\n</code></pre>"},{"location":"eohippus-ast-ParseWithElement/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> <li>children: ReadSeq[Node val] val</li> </ul>"},{"location":"eohippus-ast-ParseWithElement/#returns_1","title":"Returns","text":"<ul> <li>(WithElement val | String val)</li> </ul>"},{"location":"eohippus-ast-ParseWithElement/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseWithElement val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseWithElement/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseWithElement val</li> </ul>"},{"location":"eohippus-ast-ParseWithElement/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-ParseWithElement/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseWithElement val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-ParseWithElement/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseWithElement val</li> </ul>"},{"location":"eohippus-ast-ParseWithElement/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Path/","title":"Path","text":"<p>[Source] <pre><code>type Path is\n  (Cons[Node val] val | Nil[Node val] val)\n</code></pre></p>"},{"location":"eohippus-ast-Path/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Cons[Node val] val | Nil[Node val] val)</li> </ul>"},{"location":"eohippus-ast-Reified/","title":"Reified","text":"<p>[Source] <pre><code>primitive val Reified\n</code></pre></p>"},{"location":"eohippus-ast-Reified/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Reified/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Reified val^\n</code></pre>"},{"location":"eohippus-ast-Reified/#returns","title":"Returns","text":"<ul> <li>Reified val^</li> </ul>"},{"location":"eohippus-ast-Reified/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Reified/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Reified val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Reified/#parameters","title":"Parameters","text":"<ul> <li>that: Reified val</li> </ul>"},{"location":"eohippus-ast-Reified/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Reified/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Reified val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Reified/#parameters_1","title":"Parameters","text":"<ul> <li>that: Reified val</li> </ul>"},{"location":"eohippus-ast-Reified/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Span/","title":"Span","text":"<p>[Source]</p> <p>A span of source code without further semantic meaning.</p> <pre><code>class val Span is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-Span/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Span/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Span/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: Span ref^\n</code></pre>"},{"location":"eohippus-ast-Span/#returns","title":"Returns","text":"<ul> <li>Span ref^</li> </ul>"},{"location":"eohippus-ast-Span/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Span/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Span/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Span/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-Span/#parameters","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-Span/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Span/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-Span/#parameters_1","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-Span/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-SrcDerivation/","title":"SrcDerivation","text":"<p>[Source] <pre><code>type SrcDerivation is\n  (Inherited val | Reified val | Desugared val)\n</code></pre></p>"},{"location":"eohippus-ast-SrcDerivation/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Inherited val | Reified val | Desugared val)</li> </ul>"},{"location":"eohippus-ast-SrcFile/","title":"SrcFile","text":"<p>[Source]</p> <p>A Pony source file.</p> <pre><code>class val SrcFile is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-SrcFile/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-SrcFile/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-SrcFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  locator': String val,\n  usings': ReadSeq[NodeWith[(UsingPony val | UsingFFI val)] val] val,\n  type_defs': ReadSeq[NodeWith[(TypedefPrimitive val | TypedefAlias val | TypedefClass val)] val] val)\n: SrcFile val^\n</code></pre>"},{"location":"eohippus-ast-SrcFile/#parameters","title":"Parameters","text":"<ul> <li>locator': String val</li> <li>usings': ReadSeq[NodeWith[(UsingPony val | UsingFFI val)] val] val</li> <li>type_defs': ReadSeq[NodeWith[(TypedefPrimitive val | TypedefAlias val | TypedefClass val)] val] val</li> </ul>"},{"location":"eohippus-ast-SrcFile/#returns","title":"Returns","text":"<ul> <li>SrcFile val^</li> </ul>"},{"location":"eohippus-ast-SrcFile/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-SrcFile/#let-locator-string-val","title":"let locator: String val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcFile/#let-usings-readseqnodewithusingpony-val-usingffi-val-val-val","title":"let usings: ReadSeq[NodeWith[(UsingPony val | UsingFFI val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcFile/#let-type_defs-readseqnodewithtypedefprimitive-val-typedefalias-val-typedefclass-val-val-val","title":"let type_defs: ReadSeq[NodeWith[(TypedefPrimitive val | TypedefAlias val | TypedefClass val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcFile/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-SrcFile/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-SrcFile/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-SrcFile/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-SrcFile/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-SrcFile/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-SrcFile/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-SrcFile/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-SrcFile/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-SrcInfo/","title":"SrcInfo","text":"<p>[Source]</p> <p>Source file span information. <code>locator</code>: an identifier for a source file or other source of code. <code>start</code>: the start location of the span. <code>next</code>: the location immediately after the span. <code>derived_from</code>: how this span is derived from original source.</p> <pre><code>class val SrcInfo is\n  Equatable[SrcInfo val] ref\n</code></pre>"},{"location":"eohippus-ast-SrcInfo/#implements","title":"Implements","text":"<ul> <li>Equatable[SrcInfo val] ref</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-SrcInfo/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  locator': String val,\n  start': (Loc[U8 val] val | None val) = reference,\n  next': (Loc[U8 val] val | None val) = reference,\n  line': (USize val | None val) = reference,\n  column': (USize val | None val) = reference,\n  next_line': (USize val | None val) = reference,\n  next_column': (USize val | None val) = reference,\n  derived_from': (((Inherited val | Reified val | Desugared val) , Node val) | None val) = reference)\n: SrcInfo val^\n</code></pre>"},{"location":"eohippus-ast-SrcInfo/#parameters","title":"Parameters","text":"<ul> <li>locator': String val</li> <li>start': (Loc[U8 val] val | None val) = reference</li> <li>next': (Loc[U8 val] val | None val) = reference</li> <li>line': (USize val | None val) = reference</li> <li>column': (USize val | None val) = reference</li> <li>next_line': (USize val | None val) = reference</li> <li>next_column': (USize val | None val) = reference</li> <li>derived_from': (((Inherited val | Reified val | Desugared val) , Node val) | None val) = reference</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#returns","title":"Returns","text":"<ul> <li>SrcInfo val^</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#from","title":"from","text":"<p>[Source]</p> <pre><code>new val from(\n  orig: SrcInfo val,\n  locator': (String val | None val) = reference,\n  start': (Loc[U8 val] val | None val) = reference,\n  next': (Loc[U8 val] val | None val) = reference,\n  line': (USize val | None val) = reference,\n  column': (USize val | None val) = reference,\n  next_line': (USize val | None val) = reference,\n  next_column': (USize val | None val) = reference,\n  derived_from': (((Inherited val | Reified val | Desugared val) , Node val) | None val) = reference)\n: SrcInfo val^\n</code></pre>"},{"location":"eohippus-ast-SrcInfo/#parameters_1","title":"Parameters","text":"<ul> <li>orig: SrcInfo val</li> <li>locator': (String val | None val) = reference</li> <li>start': (Loc[U8 val] val | None val) = reference</li> <li>next': (Loc[U8 val] val | None val) = reference</li> <li>line': (USize val | None val) = reference</li> <li>column': (USize val | None val) = reference</li> <li>next_line': (USize val | None val) = reference</li> <li>next_column': (USize val | None val) = reference</li> <li>derived_from': (((Inherited val | Reified val | Desugared val) , Node val) | None val) = reference</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#returns_1","title":"Returns","text":"<ul> <li>SrcInfo val^</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-SrcInfo/#let-locator-string-val","title":"let locator: String val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcInfo/#let-start-locu8-val-val-none-val","title":"let start: (Loc[U8 val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcInfo/#let-next-locu8-val-val-none-val","title":"let next: (Loc[U8 val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcInfo/#let-line-usize-val-none-val","title":"let line: (USize val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcInfo/#let-column-usize-val-none-val","title":"let column: (USize val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcInfo/#let-next_line-usize-val-none-val","title":"let next_line: (USize val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcInfo/#let-next_column-usize-val-none-val","title":"let next_column: (USize val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcInfo/#let-derived_from-inherited-val-reified-val-desugared-val-node-val-none-val","title":"let derived_from: (((Inherited val | Reified val | Desugared val) , Node val) | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-SrcInfo/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-SrcInfo/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  other: SrcInfo val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-SrcInfo/#parameters_2","title":"Parameters","text":"<ul> <li>other: SrcInfo val</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  other: SrcInfo val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-SrcInfo/#parameters_3","title":"Parameters","text":"<ul> <li>other: SrcInfo val</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#length","title":"length","text":"<p>[Source]</p> <pre><code>fun box length()\n: USize val\n</code></pre>"},{"location":"eohippus-ast-SrcInfo/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#literal_source","title":"literal_source","text":"<p>[Source]</p> <pre><code>fun box literal_source(\n  post: (ReadSeq[Node val] val | None val) = reference)\n: String val\n</code></pre>"},{"location":"eohippus-ast-SrcInfo/#parameters_4","title":"Parameters","text":"<ul> <li>post: (ReadSeq[Node val] val | None val) = reference</li> </ul>"},{"location":"eohippus-ast-SrcInfo/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-StringLiteral/","title":"StringLiteral","text":"<p>[Source] <pre><code>primitive val StringLiteral\n</code></pre></p>"},{"location":"eohippus-ast-StringLiteral/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-StringLiteral/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: StringLiteral val^\n</code></pre>"},{"location":"eohippus-ast-StringLiteral/#returns","title":"Returns","text":"<ul> <li>StringLiteral val^</li> </ul>"},{"location":"eohippus-ast-StringLiteral/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-StringLiteral/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: StringLiteral val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-StringLiteral/#parameters","title":"Parameters","text":"<ul> <li>that: StringLiteral val</li> </ul>"},{"location":"eohippus-ast-StringLiteral/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-StringLiteral/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: StringLiteral val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-StringLiteral/#parameters_1","title":"Parameters","text":"<ul> <li>that: StringLiteral val</li> </ul>"},{"location":"eohippus-ast-StringLiteral/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-StringLiteralKind/","title":"StringLiteralKind","text":"<p>[Source] <pre><code>type StringLiteralKind is\n  (StringLiteral val | StringTripleQuote val)\n</code></pre></p>"},{"location":"eohippus-ast-StringLiteralKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(StringLiteral val | StringTripleQuote val)</li> </ul>"},{"location":"eohippus-ast-StringTripleQuote/","title":"StringTripleQuote","text":"<p>[Source] <pre><code>primitive val StringTripleQuote\n</code></pre></p>"},{"location":"eohippus-ast-StringTripleQuote/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-StringTripleQuote/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: StringTripleQuote val^\n</code></pre>"},{"location":"eohippus-ast-StringTripleQuote/#returns","title":"Returns","text":"<ul> <li>StringTripleQuote val^</li> </ul>"},{"location":"eohippus-ast-StringTripleQuote/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-StringTripleQuote/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: StringTripleQuote val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-StringTripleQuote/#parameters","title":"Parameters","text":"<ul> <li>that: StringTripleQuote val</li> </ul>"},{"location":"eohippus-ast-StringTripleQuote/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-StringTripleQuote/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: StringTripleQuote val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-StringTripleQuote/#parameters_1","title":"Parameters","text":"<ul> <li>that: StringTripleQuote val</li> </ul>"},{"location":"eohippus-ast-StringTripleQuote/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/","title":"SyntaxTree","text":"<p>[Source] <pre><code>primitive val SyntaxTree\n</code></pre></p>"},{"location":"eohippus-ast-SyntaxTree/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-SyntaxTree/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SyntaxTree val^\n</code></pre>"},{"location":"eohippus-ast-SyntaxTree/#returns","title":"Returns","text":"<ul> <li>SyntaxTree val^</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-SyntaxTree/#traverses-any-read","title":"traverse[S: Any #read]","text":"<p>[Source]</p> <pre><code>fun box traverse[S: Any #read](\n  visitor: Visitor[S] ref,\n  initial_state: S,\n  node: Node val)\n: (Node val , ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-ast-SyntaxTree/#parameters","title":"Parameters","text":"<ul> <li>visitor: Visitor[S] ref</li> <li>initial_state: S</li> <li>node: Node val</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/#returns_1","title":"Returns","text":"<ul> <li>(Node val , ReadSeq[(Node val , String val)] val)</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/#add_line_info","title":"add_line_info","text":"<p>[Source]</p> <pre><code>fun box add_line_info(\n  node: Node val)\n: (Node val , Array[Loc[U8 val] val] val , ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-ast-SyntaxTree/#parameters_1","title":"Parameters","text":"<ul> <li>node: Node val</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/#returns_2","title":"Returns","text":"<ul> <li>(Node val , Array[Loc[U8 val] val] val , ReadSeq[(Node val , String val)] val)</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: SyntaxTree val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-SyntaxTree/#parameters_2","title":"Parameters","text":"<ul> <li>that: SyntaxTree val</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: SyntaxTree val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-SyntaxTree/#parameters_3","title":"Parameters","text":"<ul> <li>that: SyntaxTree val</li> </ul>"},{"location":"eohippus-ast-SyntaxTree/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Token/","title":"Token","text":"<p>[Source] <pre><code>class val Token is\n  NodeData val\n</code></pre></p>"},{"location":"eohippus-ast-Token/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Token/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Token/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  string': String val)\n: Token val^\n</code></pre>"},{"location":"eohippus-ast-Token/#parameters","title":"Parameters","text":"<ul> <li>string': String val</li> </ul>"},{"location":"eohippus-ast-Token/#returns","title":"Returns","text":"<ul> <li>Token val^</li> </ul>"},{"location":"eohippus-ast-Token/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-Token/#let-string-string-val","title":"let string: String val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-Token/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Token/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Token/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Token/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-Token/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-Token/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Token/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-Token/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-Token/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-Tokens/","title":"Tokens","text":"<p>[Source]</p> <p>The source of truth for non-alphabetic source tokens.</p> <pre><code>primitive val Tokens\n</code></pre>"},{"location":"eohippus-ast-Tokens/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Tokens/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Tokens val^\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns","title":"Returns","text":"<ul> <li>Tokens val^</li> </ul>"},{"location":"eohippus-ast-Tokens/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Tokens/#amp","title":"amp","text":"<p>[Source]</p> <pre><code>fun box amp()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#arrow","title":"arrow","text":"<p>[Source]</p> <pre><code>fun box arrow()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#at","title":"at","text":"<p>[Source]</p> <pre><code>fun box at()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#backslash","title":"backslash","text":"<p>[Source]</p> <pre><code>fun box backslash()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#bang","title":"bang","text":"<p>[Source]</p> <pre><code>fun box bang()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#bang_equal","title":"bang_equal","text":"<p>[Source]</p> <pre><code>fun box bang_equal()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#bang_equal_tilde","title":"bang_equal_tilde","text":"<p>[Source]</p> <pre><code>fun box bang_equal_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#bar","title":"bar","text":"<p>[Source]</p> <pre><code>fun box bar()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#chain","title":"chain","text":"<p>[Source]</p> <pre><code>fun box chain()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#close_curly","title":"close_curly","text":"<p>[Source]</p> <pre><code>fun box close_curly()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#close_paren","title":"close_paren","text":"<p>[Source]</p> <pre><code>fun box close_paren()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#close_square","title":"close_square","text":"<p>[Source]</p> <pre><code>fun box close_square()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#colon","title":"colon","text":"<p>[Source]</p> <pre><code>fun box colon()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#comma","title":"comma","text":"<p>[Source]</p> <pre><code>fun box comma()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#decimal_point","title":"decimal_point","text":"<p>[Source]</p> <pre><code>fun box decimal_point()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_15","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#dot","title":"dot","text":"<p>[Source]</p> <pre><code>fun box dot()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_16","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#double_quote","title":"double_quote","text":"<p>[Source]</p> <pre><code>fun box double_quote()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_17","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#ellipsis","title":"ellipsis","text":"<p>[Source]</p> <pre><code>fun box ellipsis()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_18","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#equals","title":"equals","text":"<p>[Source]</p> <pre><code>fun box equals()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_19","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#equal_arrow","title":"equal_arrow","text":"<p>[Source]</p> <pre><code>fun box equal_arrow()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_20","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#equal_equal","title":"equal_equal","text":"<p>[Source]</p> <pre><code>fun box equal_equal()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#equal_equal_tilde","title":"equal_equal_tilde","text":"<p>[Source]</p> <pre><code>fun box equal_equal_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_22","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#greater","title":"greater","text":"<p>[Source]</p> <pre><code>fun box greater()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_23","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#greater_equal","title":"greater_equal","text":"<p>[Source]</p> <pre><code>fun box greater_equal()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_24","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#greater_equal_tilde","title":"greater_equal_tilde","text":"<p>[Source]</p> <pre><code>fun box greater_equal_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_25","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#greater_tilde","title":"greater_tilde","text":"<p>[Source]</p> <pre><code>fun box greater_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_26","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_27","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#hat","title":"hat","text":"<p>[Source]</p> <pre><code>fun box hat()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_28","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#less","title":"less","text":"<p>[Source]</p> <pre><code>fun box less()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_29","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#less_equal","title":"less_equal","text":"<p>[Source]</p> <pre><code>fun box less_equal()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_30","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#less_equal_tilde","title":"less_equal_tilde","text":"<p>[Source]</p> <pre><code>fun box less_equal_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_31","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#less_tilde","title":"less_tilde","text":"<p>[Source]</p> <pre><code>fun box less_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_32","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#minus","title":"minus","text":"<p>[Source]</p> <pre><code>fun box minus()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_33","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#minus_tilde","title":"minus_tilde","text":"<p>[Source]</p> <pre><code>fun box minus_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_34","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#open_curly","title":"open_curly","text":"<p>[Source]</p> <pre><code>fun box open_curly()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_35","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#open_paren","title":"open_paren","text":"<p>[Source]</p> <pre><code>fun box open_paren()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_36","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#open_square","title":"open_square","text":"<p>[Source]</p> <pre><code>fun box open_square()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_37","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#percent","title":"percent","text":"<p>[Source]</p> <pre><code>fun box percent()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_38","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#percent_percent","title":"percent_percent","text":"<p>[Source]</p> <pre><code>fun box percent_percent()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_39","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#percent_percent_tilde","title":"percent_percent_tilde","text":"<p>[Source]</p> <pre><code>fun box percent_percent_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_40","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#percent_tilde","title":"percent_tilde","text":"<p>[Source]</p> <pre><code>fun box percent_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_41","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#plus","title":"plus","text":"<p>[Source]</p> <pre><code>fun box plus()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_42","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#plus_tilde","title":"plus_tilde","text":"<p>[Source]</p> <pre><code>fun box plus_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_43","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#ques","title":"ques","text":"<p>[Source]</p> <pre><code>fun box ques()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_44","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#semicolon","title":"semicolon","text":"<p>[Source]</p> <pre><code>fun box semicolon()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_45","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#shift_left","title":"shift_left","text":"<p>[Source]</p> <pre><code>fun box shift_left()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_46","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#shift_left_tilde","title":"shift_left_tilde","text":"<p>[Source]</p> <pre><code>fun box shift_left_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_47","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#shift_right","title":"shift_right","text":"<p>[Source]</p> <pre><code>fun box shift_right()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_48","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#shift_right_tilde","title":"shift_right_tilde","text":"<p>[Source]</p> <pre><code>fun box shift_right_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_49","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#single_quote","title":"single_quote","text":"<p>[Source]</p> <pre><code>fun box single_quote()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_50","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#slash","title":"slash","text":"<p>[Source]</p> <pre><code>fun box slash()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_51","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#slash_tilde","title":"slash_tilde","text":"<p>[Source]</p> <pre><code>fun box slash_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_52","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#star","title":"star","text":"<p>[Source]</p> <pre><code>fun box star()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_53","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#star_tilde","title":"star_tilde","text":"<p>[Source]</p> <pre><code>fun box star_tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_54","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#subtype","title":"subtype","text":"<p>[Source]</p> <pre><code>fun box subtype()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_55","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#tilde","title":"tilde","text":"<p>[Source]</p> <pre><code>fun box tilde()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_56","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#triple_double_quote","title":"triple_double_quote","text":"<p>[Source]</p> <pre><code>fun box triple_double_quote()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_57","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#underscore","title":"underscore","text":"<p>[Source]</p> <pre><code>fun box underscore()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#returns_58","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Tokens/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Tokens val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#parameters","title":"Parameters","text":"<ul> <li>that: Tokens val</li> </ul>"},{"location":"eohippus-ast-Tokens/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-Tokens/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Tokens val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-Tokens/#parameters_1","title":"Parameters","text":"<ul> <li>that: Tokens val</li> </ul>"},{"location":"eohippus-ast-Tokens/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-TraverseError/","title":"TraverseError","text":"<p>[Source] <pre><code>type TraverseError is\n  (Node val , String val)\n</code></pre></p>"},{"location":"eohippus-ast-TraverseError/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Node val , String val)</li> </ul>"},{"location":"eohippus-ast-Trivia/","title":"Trivia","text":"<p>[Source]</p> <p>Contains comments and white space.</p> <pre><code>class val Trivia is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-Trivia/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Trivia/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-Trivia/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  kind': (LineCommentTrivia val | NestedCommentTrivia val | WhiteSpaceTrivia val | \n    EndOfLineTrivia val | EndOfFileTrivia val),\n  string': String val)\n: Trivia val^\n</code></pre>"},{"location":"eohippus-ast-Trivia/#parameters","title":"Parameters","text":"<ul> <li>kind': (LineCommentTrivia val | NestedCommentTrivia val | WhiteSpaceTrivia val |      EndOfLineTrivia val | EndOfFileTrivia val)</li> <li>string': String val</li> </ul>"},{"location":"eohippus-ast-Trivia/#returns","title":"Returns","text":"<ul> <li>Trivia val^</li> </ul>"},{"location":"eohippus-ast-Trivia/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-Trivia/#let-kind-linecommenttrivia-val-nestedcommenttrivia-val-whitespacetrivia-val-endoflinetrivia-val-endoffiletrivia-val","title":"let kind: (LineCommentTrivia val | NestedCommentTrivia val | WhiteSpaceTrivia val | EndOfLineTrivia val | EndOfFileTrivia val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-Trivia/#let-string-string-val","title":"let string: String val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-Trivia/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Trivia/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-Trivia/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-Trivia/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-Trivia/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-Trivia/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-Trivia/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-Trivia/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-Trivia/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TriviaKind/","title":"TriviaKind","text":"<p>[Source] <pre><code>type TriviaKind is\n  (LineCommentTrivia val | NestedCommentTrivia val | WhiteSpaceTrivia val | EndOfLineTrivia val | EndOfFileTrivia val)\n</code></pre></p>"},{"location":"eohippus-ast-TriviaKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(LineCommentTrivia val | NestedCommentTrivia val | WhiteSpaceTrivia val | EndOfLineTrivia val | EndOfFileTrivia val)</li> </ul>"},{"location":"eohippus-ast-TuplePattern/","title":"TuplePattern","text":"<p>[Source]</p> <p>A matching pattern for (possible) tuples.</p> <pre><code>class val TuplePattern is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TuplePattern/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TuplePattern/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TuplePattern/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  elements': ReadSeq[(NodeWith[Identifier val] val | NodeWith[TuplePattern val] val)] val)\n: TuplePattern val^\n</code></pre>"},{"location":"eohippus-ast-TuplePattern/#parameters","title":"Parameters","text":"<ul> <li>elements': ReadSeq[(NodeWith[Identifier val] val | NodeWith[TuplePattern val] val)] val</li> </ul>"},{"location":"eohippus-ast-TuplePattern/#returns","title":"Returns","text":"<ul> <li>TuplePattern val^</li> </ul>"},{"location":"eohippus-ast-TuplePattern/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TuplePattern/#let-elements-readseqnodewithidentifier-val-val-nodewithtuplepattern-val-val-val","title":"let elements: ReadSeq[(NodeWith[Identifier val] val | NodeWith[TuplePattern val] val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TuplePattern/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TuplePattern/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TuplePattern/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TuplePattern/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TuplePattern/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TuplePattern/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TuplePattern/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TuplePattern/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TuplePattern/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeArgs/","title":"TypeArgs","text":"<p>[Source]</p> <p>Type arguments in expressions.</p> <pre><code>class val TypeArgs is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeArgs/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeArgs/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeArgs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  types': ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val)\n: TypeArgs val^\n</code></pre>"},{"location":"eohippus-ast-TypeArgs/#parameters","title":"Parameters","text":"<ul> <li>types': ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val</li> </ul>"},{"location":"eohippus-ast-TypeArgs/#returns","title":"Returns","text":"<ul> <li>TypeArgs val^</li> </ul>"},{"location":"eohippus-ast-TypeArgs/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeArgs/#let-types-readseqnodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-val","title":"let types: ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeArgs/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeArgs/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeArgs/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeArgs/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeArgs/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeArgs/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeArgs/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeArgs/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeArgs/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeArrow/","title":"TypeArrow","text":"<p>[Source]</p> <p>A top-level type (possibly with an arrow).</p> <pre><code>class val TypeArrow is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeArrow/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeArrow/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeArrow/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  lhs': Node val,\n  rhs': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val))\n: TypeArrow val^\n</code></pre>"},{"location":"eohippus-ast-TypeArrow/#parameters","title":"Parameters","text":"<ul> <li>lhs': Node val</li> <li>rhs': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypeArrow/#returns","title":"Returns","text":"<ul> <li>TypeArrow val^</li> </ul>"},{"location":"eohippus-ast-TypeArrow/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeArrow/#let-lhs-node-val","title":"let lhs: Node val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeArrow/#let-rhs-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let rhs: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeArrow/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeArrow/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeArrow/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeArrow/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeArrow/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeArrow/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeArrow/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeArrow/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeArrow/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeAtom/","title":"TypeAtom","text":"<p>[Source]</p> <p>A basic type (usually an identifier).</p> <pre><code>class val TypeAtom is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeAtom/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeAtom/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeAtom/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  body': Node val)\n: TypeAtom val^\n</code></pre>"},{"location":"eohippus-ast-TypeAtom/#parameters","title":"Parameters","text":"<ul> <li>body': Node val</li> </ul>"},{"location":"eohippus-ast-TypeAtom/#returns","title":"Returns","text":"<ul> <li>TypeAtom val^</li> </ul>"},{"location":"eohippus-ast-TypeAtom/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeAtom/#let-body-node-val","title":"let body: Node val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeAtom/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeAtom/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeAtom/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeAtom/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeAtom/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeAtom/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeAtom/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeAtom/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeAtom/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeInfix/","title":"TypeInfix","text":"<p>[Source]</p> <p>An algebraic type expression. - <code>op</code>: <code>&amp;</code> or <code>|</code>.</p> <pre><code>class val TypeInfix is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeInfix/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeInfix/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeInfix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  types': ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val,\n  op': (NodeWith[Token val] val | None val))\n: TypeInfix val^\n</code></pre>"},{"location":"eohippus-ast-TypeInfix/#parameters","title":"Parameters","text":"<ul> <li>types': ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val</li> <li>op': (NodeWith[Token val] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypeInfix/#returns","title":"Returns","text":"<ul> <li>TypeInfix val^</li> </ul>"},{"location":"eohippus-ast-TypeInfix/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeInfix/#let-types-readseqnodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-val","title":"let types: ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeInfix/#let-op-nodewithtoken-val-val-none-val","title":"let op: (NodeWith[Token val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeInfix/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeInfix/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeInfix/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeInfix/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeInfix/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeInfix/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeInfix/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeInfix/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeInfix/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeLambda/","title":"TypeLambda","text":"<p>[Source]</p> <p>The type of a lambda function.</p> <pre><code>class val TypeLambda is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeLambda/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeLambda/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeLambda/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  bare': Bool val,\n  cap': (NodeWith[Keyword val] val | None val),\n  identifier': (NodeWith[Identifier val] val | None val),\n  type_params': (NodeWith[TypeParams val] val | None val),\n  param_types': ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val,\n  return_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  partial': Bool val,\n  rcap': (NodeWith[Keyword val] val | None val),\n  reph': (NodeWith[Token val] val | None val))\n: TypeLambda val^\n</code></pre>"},{"location":"eohippus-ast-TypeLambda/#parameters","title":"Parameters","text":"<ul> <li>bare': Bool val</li> <li>cap': (NodeWith[Keyword val] val | None val)</li> <li>identifier': (NodeWith[Identifier val] val | None val)</li> <li>type_params': (NodeWith[TypeParams val] val | None val)</li> <li>param_types': ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val</li> <li>return_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>partial': Bool val</li> <li>rcap': (NodeWith[Keyword val] val | None val)</li> <li>reph': (NodeWith[Token val] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypeLambda/#returns","title":"Returns","text":"<ul> <li>TypeLambda val^</li> </ul>"},{"location":"eohippus-ast-TypeLambda/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeLambda/#let-bare-bool-val","title":"let bare: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#let-cap-nodewithkeyword-val-val-none-val","title":"let cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#let-identifier-nodewithidentifier-val-val-none-val","title":"let identifier: (NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#let-type_params-nodewithtypeparams-val-val-none-val","title":"let type_params: (NodeWith[TypeParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#let-param_types-readseqnodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-val","title":"let param_types: ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#let-return_type-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let return_type: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#let-partial-bool-val","title":"let partial: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#let-rcap-nodewithkeyword-val-val-none-val","title":"let rcap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#let-reph-nodewithtoken-val-val-none-val","title":"let reph: (NodeWith[Token val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeLambda/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeLambda/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeLambda/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeLambda/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeLambda/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeLambda/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeLambda/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeLambda/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeLambda/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeNominal/","title":"TypeNominal","text":"<p>[Source]</p> <p>A (possibly qualified) named type, with optional type parameters.</p> <pre><code>class val TypeNominal is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeNominal/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeNominal/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeNominal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  lhs': (NodeWith[Identifier val] val | None val),\n  rhs': NodeWith[Identifier val] val,\n  params': (NodeWith[TypeParams val] val | None val),\n  cap': (NodeWith[Keyword val] val | None val),\n  eph': (NodeWith[Token val] val | None val))\n: TypeNominal val^\n</code></pre>"},{"location":"eohippus-ast-TypeNominal/#parameters","title":"Parameters","text":"<ul> <li>lhs': (NodeWith[Identifier val] val | None val)</li> <li>rhs': NodeWith[Identifier val] val</li> <li>params': (NodeWith[TypeParams val] val | None val)</li> <li>cap': (NodeWith[Keyword val] val | None val)</li> <li>eph': (NodeWith[Token val] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypeNominal/#returns","title":"Returns","text":"<ul> <li>TypeNominal val^</li> </ul>"},{"location":"eohippus-ast-TypeNominal/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeNominal/#let-lhs-nodewithidentifier-val-val-none-val","title":"let lhs: (NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeNominal/#let-rhs-nodewithidentifier-val-val","title":"let rhs: NodeWith[Identifier val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeNominal/#let-params-nodewithtypeparams-val-val-none-val","title":"let params: (NodeWith[TypeParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeNominal/#let-cap-nodewithkeyword-val-val-none-val","title":"let cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeNominal/#let-eph-nodewithtoken-val-val-none-val","title":"let eph: (NodeWith[Token val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeNominal/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeNominal/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeNominal/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeNominal/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeNominal/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeNominal/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeNominal/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeNominal/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeNominal/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeParam/","title":"TypeParam","text":"<p>[Source] <pre><code>class val TypeParam is\n  NodeData val\n</code></pre></p>"},{"location":"eohippus-ast-TypeParam/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeParam/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeParam/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  identifier': (NodeWith[Identifier val] val | None val),\n  constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  initializer': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val))\n: TypeParam val^\n</code></pre>"},{"location":"eohippus-ast-TypeParam/#parameters","title":"Parameters","text":"<ul> <li>identifier': (NodeWith[Identifier val] val | None val)</li> <li>constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>initializer': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypeParam/#returns","title":"Returns","text":"<ul> <li>TypeParam val^</li> </ul>"},{"location":"eohippus-ast-TypeParam/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeParam/#let-identifier-nodewithidentifier-val-val-none-val","title":"let identifier: (NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeParam/#let-constraint-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let constraint: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeParam/#let-initializer-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let initializer: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeParam/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeParam/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeParam/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeParam/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeParam/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeParam/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeParam/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeParam/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeParam/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeParams/","title":"TypeParams","text":"<p>[Source]</p> <p>Type parameters.</p> <pre><code>class val TypeParams is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeParams/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  params': ReadSeq[NodeWith[TypeParam val] val] val)\n: TypeParams val^\n</code></pre>"},{"location":"eohippus-ast-TypeParams/#parameters","title":"Parameters","text":"<ul> <li>params': ReadSeq[NodeWith[TypeParam val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeParams/#returns","title":"Returns","text":"<ul> <li>TypeParams val^</li> </ul>"},{"location":"eohippus-ast-TypeParams/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeParams/#let-params-readseqnodewithtypeparam-val-val-val","title":"let params: ReadSeq[NodeWith[TypeParam val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeParams/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeParams/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeParams/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeParams/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeParams/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeParams/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeParams/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeParams/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeTuple/","title":"TypeTuple","text":"<p>[Source]</p> <p>A tuple type.</p> <pre><code>class val TypeTuple is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeTuple/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeTuple/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypeTuple/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  types': ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val)\n: TypeTuple val^\n</code></pre>"},{"location":"eohippus-ast-TypeTuple/#parameters","title":"Parameters","text":"<ul> <li>types': ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val</li> </ul>"},{"location":"eohippus-ast-TypeTuple/#returns","title":"Returns","text":"<ul> <li>TypeTuple val^</li> </ul>"},{"location":"eohippus-ast-TypeTuple/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypeTuple/#let-types-readseqnodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-val","title":"let types: ReadSeq[NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypeTuple/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypeTuple/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypeTuple/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypeTuple/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypeTuple/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypeTuple/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypeTuple/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypeTuple/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypeTuple/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypeType/","title":"TypeType","text":"<p>[Source]</p> <p>The reason for using <code>TypeType</code> and <code>type_type</code> is that <code>type</code> is a reserved word in Pony.</p> <pre><code>type TypeType is\n  (TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)\n</code></pre>"},{"location":"eohippus-ast-TypeType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)</li> </ul>"},{"location":"eohippus-ast-Typedef/","title":"Typedef","text":"<p>[Source] <pre><code>type Typedef is\n  (TypedefPrimitive val | TypedefAlias val | TypedefClass val)\n</code></pre></p>"},{"location":"eohippus-ast-Typedef/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(TypedefPrimitive val | TypedefAlias val | TypedefClass val)</li> </ul>"},{"location":"eohippus-ast-TypedefAlias/","title":"TypedefAlias","text":"<p>[Source]</p> <p>A type alias.</p> <pre><code>class val TypedefAlias is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefAlias/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefAlias/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypedefAlias/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  identifier': NodeWith[Identifier val] val,\n  type_params': (NodeWith[TypeParams val] val | None val),\n  type_type': NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val)\n: TypedefAlias val^\n</code></pre>"},{"location":"eohippus-ast-TypedefAlias/#parameters","title":"Parameters","text":"<ul> <li>identifier': NodeWith[Identifier val] val</li> <li>type_params': (NodeWith[TypeParams val] val | None val)</li> <li>type_type': NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val</li> </ul>"},{"location":"eohippus-ast-TypedefAlias/#returns","title":"Returns","text":"<ul> <li>TypedefAlias val^</li> </ul>"},{"location":"eohippus-ast-TypedefAlias/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypedefAlias/#let-identifier-nodewithidentifier-val-val","title":"let identifier: NodeWith[Identifier val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefAlias/#let-type_params-nodewithtypeparams-val-val-none-val","title":"let type_params: (NodeWith[TypeParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefAlias/#let-type_type-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val","title":"let type_type: NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefAlias/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypedefAlias/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypedefAlias/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypedefAlias/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefAlias/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypedefAlias/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefAlias/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypedefAlias/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypedefAlias/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypedefClass/","title":"TypedefClass","text":"<p>[Source]</p> <p>A class-like type definition (a <code>trait</code>, <code>interface</code>, <code>class</code>, <code>struct</code> or <code>actor</code>).</p> <pre><code>class val TypedefClass is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefClass/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefClass/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypedefClass/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  kind': NodeWith[Keyword val] val,\n  raw': Bool val,\n  cap': (NodeWith[Keyword val] val | None val),\n  identifier': NodeWith[Identifier val] val,\n  type_params': (NodeWith[TypeParams val] val | None val),\n  constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  members': (NodeWith[TypedefMembers val] val | None val))\n: TypedefClass val^\n</code></pre>"},{"location":"eohippus-ast-TypedefClass/#parameters","title":"Parameters","text":"<ul> <li>kind': NodeWith[Keyword val] val</li> <li>raw': Bool val</li> <li>cap': (NodeWith[Keyword val] val | None val)</li> <li>identifier': NodeWith[Identifier val] val</li> <li>type_params': (NodeWith[TypeParams val] val | None val)</li> <li>constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>members': (NodeWith[TypedefMembers val] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypedefClass/#returns","title":"Returns","text":"<ul> <li>TypedefClass val^</li> </ul>"},{"location":"eohippus-ast-TypedefClass/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypedefClass/#let-kind-nodewithkeyword-val-val","title":"let kind: NodeWith[Keyword val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefClass/#let-raw-bool-val","title":"let raw: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefClass/#let-cap-nodewithkeyword-val-val-none-val","title":"let cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefClass/#let-identifier-nodewithidentifier-val-val","title":"let identifier: NodeWith[Identifier val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefClass/#let-type_params-nodewithtypeparams-val-val-none-val","title":"let type_params: (NodeWith[TypeParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefClass/#let-constraint-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let constraint: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefClass/#let-members-nodewithtypedefmembers-val-val-none-val","title":"let members: (NodeWith[TypedefMembers val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefClass/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypedefClass/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypedefClass/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypedefClass/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefClass/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypedefClass/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefClass/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypedefClass/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypedefClass/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypedefField/","title":"TypedefField","text":"<p>[Source]</p> <p>A field definition. - <code>kind</code>: <code>let</code>, <code>var</code>, or <code>embed</code>.</p> <pre><code>class val TypedefField is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefField/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefField/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypedefField/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  kind': NodeWith[Keyword val] val,\n  identifier': NodeWith[Identifier val] val,\n  type_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  initializer': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: TypedefField val^\n</code></pre>"},{"location":"eohippus-ast-TypedefField/#parameters","title":"Parameters","text":"<ul> <li>kind': NodeWith[Keyword val] val</li> <li>identifier': NodeWith[Identifier val] val</li> <li>type_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>initializer': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypedefField/#returns","title":"Returns","text":"<ul> <li>TypedefField val^</li> </ul>"},{"location":"eohippus-ast-TypedefField/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypedefField/#let-kind-nodewithkeyword-val-val","title":"let kind: NodeWith[Keyword val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefField/#let-identifier-nodewithidentifier-val-val","title":"let identifier: NodeWith[Identifier val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefField/#let-type_type-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let type_type: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefField/#let-initializer-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let initializer: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefField/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypedefField/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypedefField/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypedefField/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefField/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypedefField/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefField/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypedefField/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypedefField/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypedefMembers/","title":"TypedefMembers","text":"<p>[Source]</p> <p>The members of a class-like type.</p> <pre><code>class val TypedefMembers is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefMembers/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefMembers/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypedefMembers/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  fields': ReadSeq[NodeWith[TypedefField val] val] val,\n  methods': ReadSeq[NodeWith[TypedefMethod val] val] val)\n: TypedefMembers val^\n</code></pre>"},{"location":"eohippus-ast-TypedefMembers/#parameters","title":"Parameters","text":"<ul> <li>fields': ReadSeq[NodeWith[TypedefField val] val] val</li> <li>methods': ReadSeq[NodeWith[TypedefMethod val] val] val</li> </ul>"},{"location":"eohippus-ast-TypedefMembers/#returns","title":"Returns","text":"<ul> <li>TypedefMembers val^</li> </ul>"},{"location":"eohippus-ast-TypedefMembers/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypedefMembers/#let-fields-readseqnodewithtypedeffield-val-val-val","title":"let fields: ReadSeq[NodeWith[TypedefField val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMembers/#let-methods-readseqnodewithtypedefmethod-val-val-val","title":"let methods: ReadSeq[NodeWith[TypedefMethod val] val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMembers/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypedefMembers/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypedefMembers/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypedefMembers/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefMembers/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypedefMembers/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefMembers/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypedefMembers/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypedefMembers/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypedefMethod/","title":"TypedefMethod","text":"<p>[Source]</p> <p>A method definition.</p> <pre><code>class val TypedefMethod is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefMethod/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefMethod/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypedefMethod/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  kind': NodeWith[Keyword val] val,\n  cap': (NodeWith[Keyword val] val | None val),\n  raw': Bool val,\n  identifier': NodeWith[Identifier val] val,\n  type_params': (NodeWith[TypeParams val] val | None val),\n  params': (NodeWith[MethodParams val] val | None val),\n  return_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  partial': Bool val,\n  body': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val))\n: TypedefMethod val^\n</code></pre>"},{"location":"eohippus-ast-TypedefMethod/#parameters","title":"Parameters","text":"<ul> <li>kind': NodeWith[Keyword val] val</li> <li>cap': (NodeWith[Keyword val] val | None val)</li> <li>raw': Bool val</li> <li>identifier': NodeWith[Identifier val] val</li> <li>type_params': (NodeWith[TypeParams val] val | None val)</li> <li>params': (NodeWith[MethodParams val] val | None val)</li> <li>return_type': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>partial': Bool val</li> <li>body': (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypedefMethod/#returns","title":"Returns","text":"<ul> <li>TypedefMethod val^</li> </ul>"},{"location":"eohippus-ast-TypedefMethod/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypedefMethod/#let-kind-nodewithkeyword-val-val","title":"let kind: NodeWith[Keyword val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#let-cap-nodewithkeyword-val-val-none-val","title":"let cap: (NodeWith[Keyword val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#let-raw-bool-val","title":"let raw: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#let-identifier-nodewithidentifier-val-val","title":"let identifier: NodeWith[Identifier val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#let-type_params-nodewithtypeparams-val-val-none-val","title":"let type_params: (NodeWith[TypeParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#let-params-nodewithmethodparams-val-val-none-val","title":"let params: (NodeWith[MethodParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#let-return_type-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let return_type: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#let-partial-bool-val","title":"let partial: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val-none-val","title":"let body: (NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefMethod/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypedefMethod/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypedefMethod/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypedefMethod/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefMethod/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypedefMethod/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefMethod/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypedefMethod/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypedefMethod/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-TypedefPrimitive/","title":"TypedefPrimitive","text":"<p>[Source]</p> <p>A primitive type declaration.</p> <pre><code>class val TypedefPrimitive is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefPrimitive/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefPrimitive/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-TypedefPrimitive/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  identifier': NodeWith[Identifier val] val,\n  type_params': (NodeWith[TypeParams val] val | None val),\n  constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val),\n  members': (NodeWith[TypedefMembers val] val | None val))\n: TypedefPrimitive val^\n</code></pre>"},{"location":"eohippus-ast-TypedefPrimitive/#parameters","title":"Parameters","text":"<ul> <li>identifier': NodeWith[Identifier val] val</li> <li>type_params': (NodeWith[TypeParams val] val | None val)</li> <li>constraint': (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)</li> <li>members': (NodeWith[TypedefMembers val] val | None val)</li> </ul>"},{"location":"eohippus-ast-TypedefPrimitive/#returns","title":"Returns","text":"<ul> <li>TypedefPrimitive val^</li> </ul>"},{"location":"eohippus-ast-TypedefPrimitive/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-TypedefPrimitive/#let-identifier-nodewithidentifier-val-val","title":"let identifier: NodeWith[Identifier val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefPrimitive/#let-type_params-nodewithtypeparams-val-val-none-val","title":"let type_params: (NodeWith[TypeParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefPrimitive/#let-constraint-nodewithtypearrow-val-typeatom-val-typetuple-val-typeinfix-val-typenominal-val-typelambda-val-val-none-val","title":"let constraint: (NodeWith[(TypeArrow val | TypeAtom val | TypeTuple val | TypeInfix val | TypeNominal val | TypeLambda val)] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefPrimitive/#let-members-nodewithtypedefmembers-val-val-none-val","title":"let members: (NodeWith[TypedefMembers val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-TypedefPrimitive/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-TypedefPrimitive/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-TypedefPrimitive/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-TypedefPrimitive/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-TypedefPrimitive/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-TypedefPrimitive/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-TypedefPrimitive/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-TypedefPrimitive/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-TypedefPrimitive/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-Using/","title":"Using","text":"<p>[Source] <pre><code>type Using is\n  (UsingPony val | UsingFFI val)\n</code></pre></p>"},{"location":"eohippus-ast-Using/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(UsingPony val | UsingFFI val)</li> </ul>"},{"location":"eohippus-ast-UsingFFI/","title":"UsingFFI","text":"<p>[Source]</p> <p>A <code>using</code> statement referencing an extern FFI function.</p> <pre><code>class val UsingFFI is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-UsingFFI/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-UsingFFI/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-UsingFFI/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  identifier': (NodeWith[Identifier val] val | None val),\n  fun_name': (NodeWith[Identifier val] val | NodeWith[LiteralString val] val),\n  type_args': NodeWith[TypeArgs val] val,\n  params': (NodeWith[MethodParams val] val | None val),\n  varargs': Bool val,\n  partial': Bool val,\n  def_true': Bool val,\n  define': (NodeWith[Identifier val] val | None val))\n: UsingFFI val^\n</code></pre>"},{"location":"eohippus-ast-UsingFFI/#parameters","title":"Parameters","text":"<ul> <li>identifier': (NodeWith[Identifier val] val | None val)</li> <li>fun_name': (NodeWith[Identifier val] val | NodeWith[LiteralString val] val)</li> <li>type_args': NodeWith[TypeArgs val] val</li> <li>params': (NodeWith[MethodParams val] val | None val)</li> <li>varargs': Bool val</li> <li>partial': Bool val</li> <li>def_true': Bool val</li> <li>define': (NodeWith[Identifier val] val | None val)</li> </ul>"},{"location":"eohippus-ast-UsingFFI/#returns","title":"Returns","text":"<ul> <li>UsingFFI val^</li> </ul>"},{"location":"eohippus-ast-UsingFFI/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-UsingFFI/#let-identifier-nodewithidentifier-val-val-none-val","title":"let identifier: (NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingFFI/#let-fun_name-nodewithidentifier-val-val-nodewithliteralstring-val-val","title":"let fun_name: (NodeWith[Identifier val] val | NodeWith[LiteralString val] val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingFFI/#let-type_args-nodewithtypeargs-val-val","title":"let type_args: NodeWith[TypeArgs val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingFFI/#let-params-nodewithmethodparams-val-val-none-val","title":"let params: (NodeWith[MethodParams val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingFFI/#let-varargs-bool-val","title":"let varargs: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingFFI/#let-partial-bool-val","title":"let partial: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingFFI/#let-def_true-bool-val","title":"let def_true: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingFFI/#let-define-nodewithidentifier-val-val-none-val","title":"let define: (NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingFFI/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-UsingFFI/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-UsingFFI/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-UsingFFI/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-UsingFFI/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-UsingFFI/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-UsingFFI/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-UsingFFI/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-UsingFFI/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-UsingPony/","title":"UsingPony","text":"<p>[Source]</p> <p>A <code>using</code> statement referencing a Pony package.</p> <pre><code>class val UsingPony is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-UsingPony/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-UsingPony/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-UsingPony/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  identifier': (NodeWith[Identifier val] val | None val),\n  path': NodeWith[LiteralString val] val,\n  def_true': Bool val,\n  define': (NodeWith[Identifier val] val | None val))\n: UsingPony val^\n</code></pre>"},{"location":"eohippus-ast-UsingPony/#parameters","title":"Parameters","text":"<ul> <li>identifier': (NodeWith[Identifier val] val | None val)</li> <li>path': NodeWith[LiteralString val] val</li> <li>def_true': Bool val</li> <li>define': (NodeWith[Identifier val] val | None val)</li> </ul>"},{"location":"eohippus-ast-UsingPony/#returns","title":"Returns","text":"<ul> <li>UsingPony val^</li> </ul>"},{"location":"eohippus-ast-UsingPony/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-UsingPony/#let-identifier-nodewithidentifier-val-val-none-val","title":"let identifier: (NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingPony/#let-path-nodewithliteralstring-val-val","title":"let path: NodeWith[LiteralString val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingPony/#let-def_true-bool-val","title":"let def_true: Bool val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingPony/#let-define-nodewithidentifier-val-val-none-val","title":"let define: (NodeWith[Identifier val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-ast-UsingPony/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-UsingPony/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-UsingPony/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-UsingPony/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-UsingPony/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-UsingPony/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-UsingPony/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-UsingPony/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-UsingPony/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-ast-Visitor/","title":"Visitor[State: Any #read]","text":"<p>[Source]</p> <p>Used to effect transformations of an AST, using <code>SyntaxTree.traverse()</code>.</p> <p>AST trees are immutable.  We get a transformed tree by traversing the old tree and returning a new one (re-using unmodified nodes as necessary).</p> <p>Traversal happens in the following fashion:</p> <ul> <li>For a node (starting with the root):</li> <li>Call <code>visit_pre()</code> on the visitor with a parent state; this returns an     intermediate state (if some data needs to be saved for later).</li> <li>Build a list of new node children by calling <code>traverse()</code> on each old     child, passing the the intermediate state.</li> <li>Call <code>visit_post()</code> with the intermediate state,     the list of child states (returned from each child's <code>visit_post()</code>),     the new children, and a map from old to new children.     <code>visit_post()</code> then returns the intermediate state and the new node.</li> </ul> <pre><code>interface ref Visitor[State: Any #read]\n</code></pre>"},{"location":"eohippus-ast-Visitor/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-Visitor/#visit_pre","title":"visit_pre","text":"<p>[Source]</p> <p>Returns an intermediate state value for use when constructing the new node.</p> <pre><code>fun ref visit_pre(\n  parent_state: State,\n  node: Node val,\n  path: (Cons[Node val] val | Nil[Node val] val),\n  errors: Array[(Node val , String val)] iso)\n: (State , Array[(Node val , String val)] iso^)\n</code></pre>"},{"location":"eohippus-ast-Visitor/#parameters","title":"Parameters","text":"<ul> <li>parent_state: State</li> <li>node: Node val</li> <li>path: (Cons[Node val] val | Nil[Node val] val)</li> <li>errors: Array[(Node val , String val)] iso</li> </ul>"},{"location":"eohippus-ast-Visitor/#returns","title":"Returns","text":"<ul> <li>(State , Array[(Node val , String val)] iso^)</li> </ul>"},{"location":"eohippus-ast-Visitor/#visit_post","title":"visit_post","text":"<p>[Source]</p> <p>Returns a new node constructed from the \"pre\" state (the intermediate state) that was returned by <code>visit_pre()</code>, and the new children.</p> <p>Even if no other processing is needed, make sure to clone the node if <code>new_children</code> and <code>update_map</code> exist.</p> <pre><code>fun ref visit_post(\n  node_state: State,\n  node: Node val,\n  path: (Cons[Node val] val | Nil[Node val] val),\n  errors: Array[(Node val , String val)] iso,\n  child_states: (ReadSeq[State] box | None val),\n  new_children: (ReadSeq[Node val] val | None val),\n  update_map: (HashMap[Node val, Node val, HashIs[Node val] val] val | None val))\n: (State , (Node val | None val) , Array[(Node val , String val)] iso^)\n</code></pre>"},{"location":"eohippus-ast-Visitor/#parameters_1","title":"Parameters","text":"<ul> <li>node_state: State</li> <li>node: Node val</li> <li>path: (Cons[Node val] val | Nil[Node val] val)</li> <li>errors: Array[(Node val , String val)] iso</li> <li>child_states: (ReadSeq[State] box | None val)</li> <li>new_children: (ReadSeq[Node val] val | None val)</li> <li>update_map: (HashMap[Node val, Node val, HashIs[Node val] val] val | None val)</li> </ul>"},{"location":"eohippus-ast-Visitor/#returns_1","title":"Returns","text":"<ul> <li>(State , (Node val | None val) , Array[(Node val , String val)] iso^)</li> </ul>"},{"location":"eohippus-ast-WhiteSpaceTrivia/","title":"WhiteSpaceTrivia","text":"<p>[Source] <pre><code>primitive val WhiteSpaceTrivia\n</code></pre></p>"},{"location":"eohippus-ast-WhiteSpaceTrivia/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-WhiteSpaceTrivia/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: WhiteSpaceTrivia val^\n</code></pre>"},{"location":"eohippus-ast-WhiteSpaceTrivia/#returns","title":"Returns","text":"<ul> <li>WhiteSpaceTrivia val^</li> </ul>"},{"location":"eohippus-ast-WhiteSpaceTrivia/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-WhiteSpaceTrivia/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: WhiteSpaceTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-WhiteSpaceTrivia/#parameters","title":"Parameters","text":"<ul> <li>that: WhiteSpaceTrivia val</li> </ul>"},{"location":"eohippus-ast-WhiteSpaceTrivia/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-WhiteSpaceTrivia/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: WhiteSpaceTrivia val)\n: Bool val\n</code></pre>"},{"location":"eohippus-ast-WhiteSpaceTrivia/#parameters_1","title":"Parameters","text":"<ul> <li>that: WhiteSpaceTrivia val</li> </ul>"},{"location":"eohippus-ast-WhiteSpaceTrivia/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-ast-WithElement/","title":"WithElement","text":"<p>[Source]</p> <p>An arm of a <code>with</code> expression.</p> <pre><code>class val WithElement is\n  NodeData val\n</code></pre>"},{"location":"eohippus-ast-WithElement/#implements","title":"Implements","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-WithElement/#constructors","title":"Constructors","text":""},{"location":"eohippus-ast-WithElement/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  pattern': NodeWith[TuplePattern val] val,\n  body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val)\n: WithElement val^\n</code></pre>"},{"location":"eohippus-ast-WithElement/#parameters","title":"Parameters","text":"<ul> <li>pattern': NodeWith[TuplePattern val] val</li> <li>body': NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val</li> </ul>"},{"location":"eohippus-ast-WithElement/#returns","title":"Returns","text":"<ul> <li>WithElement val^</li> </ul>"},{"location":"eohippus-ast-WithElement/#public-fields","title":"Public fields","text":""},{"location":"eohippus-ast-WithElement/#let-pattern-nodewithtuplepattern-val-val","title":"let pattern: NodeWith[TuplePattern val] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-WithElement/#let-body-nodewithexpsequence-val-expoperation-val-expjump-val-expif-val-expgeneric-val-expcall-val-expatom-val-exphash-val-exptuple-val-exprecover-val-exptry-val-exparray-val-expconsume-val-expwhile-val-exprepeat-val-expfor-val-expmatch-val-expdecl-val-expwith-val-expffi-val-explambda-val-expobject-val-val","title":"let body: NodeWith[(ExpSequence val | ExpOperation val | ExpJump val | ExpIf val | ExpGeneric val | ExpCall val | ExpAtom val | ExpHash val | ExpTuple val | ExpRecover val | ExpTry val | ExpArray val | ExpConsume val | ExpWhile val | ExpRepeat val | ExpFor val | ExpMatch val | ExpDecl val | ExpWith val | ExpFfi val | ExpLambda val | ExpObject val)] val","text":"<p>[Source]</p>"},{"location":"eohippus-ast-WithElement/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-ast-WithElement/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-ast-WithElement/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-ast-WithElement/#clone","title":"clone","text":"<p>[Source]</p> <pre><code>fun val clone(\n  updates: HashMap[Node val, Node val, HashIs[Node val] val] val)\n: NodeData val\n</code></pre>"},{"location":"eohippus-ast-WithElement/#parameters_1","title":"Parameters","text":"<ul> <li>updates: HashMap[Node val, Node val, HashIs[Node val] val] val</li> </ul>"},{"location":"eohippus-ast-WithElement/#returns_2","title":"Returns","text":"<ul> <li>NodeData val</li> </ul>"},{"location":"eohippus-ast-WithElement/#add_json_props","title":"add_json_props","text":"<p>[Source]</p> <pre><code>fun box add_json_props(\n  node: Node box,\n  props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref)\n: None val\n</code></pre>"},{"location":"eohippus-ast-WithElement/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node box</li> <li>props: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-ast-WithElement/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-json--index/","title":"Package","text":"<p>No package doc string provided for eohippus/json.</p>"},{"location":"eohippus-json--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Clone</li> <li>type Item</li> <li>primitive Null</li> <li>class Object</li> <li>primitive Parse</li> <li>class ParseError</li> <li>class Parser</li> <li>class Sequence</li> <li>primitive Subsumes</li> </ul>"},{"location":"eohippus-json-Clone/","title":"Clone","text":"<p>[Source] <pre><code>primitive val Clone\n</code></pre></p>"},{"location":"eohippus-json-Clone/#constructors","title":"Constructors","text":""},{"location":"eohippus-json-Clone/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Clone val^\n</code></pre>"},{"location":"eohippus-json-Clone/#returns","title":"Returns","text":"<ul> <li>Clone val^</li> </ul>"},{"location":"eohippus-json-Clone/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-json-Clone/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  item: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val))\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-json-Clone/#parameters","title":"Parameters","text":"<ul> <li>item: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-json-Clone/#returns_1","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-json-Clone/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Clone val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Clone/#parameters_1","title":"Parameters","text":"<ul> <li>that: Clone val</li> </ul>"},{"location":"eohippus-json-Clone/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-Clone/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Clone val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Clone/#parameters_2","title":"Parameters","text":"<ul> <li>that: Clone val</li> </ul>"},{"location":"eohippus-json-Clone/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-Item/","title":"Item","text":"<p>[Source] <pre><code>type Item is\n  (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val)\n</code></pre></p>"},{"location":"eohippus-json-Item/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val)</li> </ul>"},{"location":"eohippus-json-Null/","title":"Null","text":"<p>[Source] <pre><code>primitive val Null\n</code></pre></p>"},{"location":"eohippus-json-Null/#constructors","title":"Constructors","text":""},{"location":"eohippus-json-Null/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Null val^\n</code></pre>"},{"location":"eohippus-json-Null/#returns","title":"Returns","text":"<ul> <li>Null val^</li> </ul>"},{"location":"eohippus-json-Null/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-json-Null/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"eohippus-json-Null/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-json-Null/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Null val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Null/#parameters","title":"Parameters","text":"<ul> <li>that: Null val</li> </ul>"},{"location":"eohippus-json-Null/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-Null/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Null val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Null/#parameters_1","title":"Parameters","text":"<ul> <li>that: Null val</li> </ul>"},{"location":"eohippus-json-Null/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-Object/","title":"Object","text":"<p>[Source] <pre><code>class box Object\n</code></pre></p>"},{"location":"eohippus-json-Object/#constructors","title":"Constructors","text":""},{"location":"eohippus-json-Object/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  items: ReadSeq[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] box = qualify)\n: Object ref^\n</code></pre>"},{"location":"eohippus-json-Object/#parameters","title":"Parameters","text":"<ul> <li>items: ReadSeq[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] box = qualify</li> </ul>"},{"location":"eohippus-json-Object/#returns","title":"Returns","text":"<ul> <li>Object ref^</li> </ul>"},{"location":"eohippus-json-Object/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-json-Object/#contains","title":"contains","text":"<p>[Source]</p> <pre><code>fun box contains(\n  key: (String val | USize val))\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Object/#parameters_1","title":"Parameters","text":"<ul> <li>key: (String val | USize val)</li> </ul>"},{"location":"eohippus-json-Object/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-Object/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  key: String val)\n: (this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | \n    I128 val | F64 val | Bool val | \n    Null val) ?\n</code></pre>"},{"location":"eohippus-json-Object/#parameters_2","title":"Parameters","text":"<ul> <li>key: String val</li> </ul>"},{"location":"eohippus-json-Object/#returns_2","title":"Returns","text":"<ul> <li>(this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box |      I128 val | F64 val | Bool val |      Null val) ?</li> </ul>"},{"location":"eohippus-json-Object/#update","title":"update","text":"<p>[Source]</p> <pre><code>fun ref update(\n  key: String val,\n  value: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val))\n: None val\n</code></pre>"},{"location":"eohippus-json-Object/#parameters_3","title":"Parameters","text":"<ul> <li>key: String val</li> <li>value: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-json-Object/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-json-Object/#pairs","title":"pairs","text":"<p>[Source]</p> <pre><code>fun box pairs()\n: Iterator[(String val , (this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | I128 val | F64 val | Bool val | Null val))] ref\n</code></pre>"},{"location":"eohippus-json-Object/#returns_4","title":"Returns","text":"<ul> <li>Iterator[(String val , (this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-json-Object/#get_string","title":"get_string","text":"<p>[Source]</p> <pre><code>fun box get_string(\n  pretty: Bool val,\n  indent: String val = \"\")\n: String iso^\n</code></pre>"},{"location":"eohippus-json-Object/#parameters_4","title":"Parameters","text":"<ul> <li>pretty: Bool val</li> <li>indent: String val = \"\"</li> </ul>"},{"location":"eohippus-json-Object/#returns_5","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-json-Object/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"eohippus-json-Object/#returns_6","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-json-Parse/","title":"Parse","text":"<p>[Source] <pre><code>primitive val Parse\n</code></pre></p>"},{"location":"eohippus-json-Parse/#constructors","title":"Constructors","text":""},{"location":"eohippus-json-Parse/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Parse val^\n</code></pre>"},{"location":"eohippus-json-Parse/#returns","title":"Returns","text":"<ul> <li>Parse val^</li> </ul>"},{"location":"eohippus-json-Parse/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-json-Parse/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  str: String val)\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val | ParseError val)\n</code></pre>"},{"location":"eohippus-json-Parse/#parameters","title":"Parameters","text":"<ul> <li>str: String val</li> </ul>"},{"location":"eohippus-json-Parse/#returns_1","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val | ParseError val)</li> </ul>"},{"location":"eohippus-json-Parse/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Parse val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Parse/#parameters_1","title":"Parameters","text":"<ul> <li>that: Parse val</li> </ul>"},{"location":"eohippus-json-Parse/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-Parse/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Parse val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Parse/#parameters_2","title":"Parameters","text":"<ul> <li>that: Parse val</li> </ul>"},{"location":"eohippus-json-Parse/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-ParseError/","title":"ParseError","text":"<p>[Source] <pre><code>class val ParseError\n</code></pre></p>"},{"location":"eohippus-json-ParseError/#constructors","title":"Constructors","text":""},{"location":"eohippus-json-ParseError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  index': USize val,\n  message': String val)\n: ParseError val^\n</code></pre>"},{"location":"eohippus-json-ParseError/#parameters","title":"Parameters","text":"<ul> <li>index': USize val</li> <li>message': String val</li> </ul>"},{"location":"eohippus-json-ParseError/#returns","title":"Returns","text":"<ul> <li>ParseError val^</li> </ul>"},{"location":"eohippus-json-ParseError/#public-fields","title":"Public fields","text":""},{"location":"eohippus-json-ParseError/#let-index-usize-val","title":"let index: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-json-ParseError/#let-message-string-val","title":"let message: String val","text":"<p>[Source]</p>"},{"location":"eohippus-json-Parser/","title":"Parser","text":"<p>[Source] <pre><code>class ref Parser\n</code></pre></p>"},{"location":"eohippus-json-Parser/#constructors","title":"Constructors","text":""},{"location":"eohippus-json-Parser/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: Parser ref^\n</code></pre>"},{"location":"eohippus-json-Parser/#returns","title":"Returns","text":"<ul> <li>Parser ref^</li> </ul>"},{"location":"eohippus-json-Parser/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-json-Parser/#reset","title":"reset","text":"<p>[Source]</p> <pre><code>fun ref reset()\n: None val\n</code></pre>"},{"location":"eohippus-json-Parser/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-json-Parser/#parse_seq","title":"parse_seq","text":"<p>[Source]</p> <pre><code>fun ref parse_seq(\n  seq: ReadSeq[U8 val] box,\n  items: Seq[(Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val)] ref,\n  errors: Seq[ParseError val] ref)\n: None val\n</code></pre>"},{"location":"eohippus-json-Parser/#parameters","title":"Parameters","text":"<ul> <li>seq: ReadSeq[U8 val] box</li> <li>items: Seq[(Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val)] ref</li> <li>errors: Seq[ParseError val] ref</li> </ul>"},{"location":"eohippus-json-Parser/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-json-Parser/#parse_char","title":"parse_char","text":"<p>[Source]</p> <pre><code>fun ref parse_char(\n  ch: U8 val)\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val | ParseError val | None val)\n</code></pre>"},{"location":"eohippus-json-Parser/#parameters_1","title":"Parameters","text":"<ul> <li>ch: U8 val</li> </ul>"},{"location":"eohippus-json-Parser/#returns_3","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val | ParseError val | None val)</li> </ul>"},{"location":"eohippus-json-Sequence/","title":"Sequence","text":"<p>[Source] <pre><code>class box Sequence\n</code></pre></p>"},{"location":"eohippus-json-Sequence/#constructors","title":"Constructors","text":""},{"location":"eohippus-json-Sequence/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  items: ReadSeq[(this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | I128 val | F64 val | Bool val | Null val)] box = qualify)\n: Sequence ref^\n</code></pre>"},{"location":"eohippus-json-Sequence/#parameters","title":"Parameters","text":"<ul> <li>items: ReadSeq[(this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | I128 val | F64 val | Bool val | Null val)] box = qualify</li> </ul>"},{"location":"eohippus-json-Sequence/#returns","title":"Returns","text":"<ul> <li>Sequence ref^</li> </ul>"},{"location":"eohippus-json-Sequence/#from_iter","title":"from_iter","text":"<p>[Source]</p> <pre><code>new ref from_iter(\n  items: Iterator[(this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | I128 val | F64 val | Bool val | Null val)] ref)\n: Sequence ref^\n</code></pre>"},{"location":"eohippus-json-Sequence/#parameters_1","title":"Parameters","text":"<ul> <li>items: Iterator[(this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | I128 val | F64 val | Bool val | Null val)] ref</li> </ul>"},{"location":"eohippus-json-Sequence/#returns_1","title":"Returns","text":"<ul> <li>Sequence ref^</li> </ul>"},{"location":"eohippus-json-Sequence/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-json-Sequence/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"eohippus-json-Sequence/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-json-Sequence/#contains","title":"contains","text":"<p>[Source]</p> <pre><code>fun box contains(\n  key: USize val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Sequence/#parameters_2","title":"Parameters","text":"<ul> <li>key: USize val</li> </ul>"},{"location":"eohippus-json-Sequence/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-Sequence/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  i: USize val)\n: (this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | \n    I128 val | F64 val | Bool val | \n    Null val) ?\n</code></pre>"},{"location":"eohippus-json-Sequence/#parameters_3","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"eohippus-json-Sequence/#returns_4","title":"Returns","text":"<ul> <li>(this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box |      I128 val | F64 val | Bool val |      Null val) ?</li> </ul>"},{"location":"eohippus-json-Sequence/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun box values()\n: Iterator[(this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | I128 val | F64 val | Bool val | Null val)] ref\n</code></pre>"},{"location":"eohippus-json-Sequence/#returns_5","title":"Returns","text":"<ul> <li>Iterator[(this-&gt;Object box | this-&gt;Sequence box | this-&gt;String box | I128 val | F64 val | Bool val | Null val)] ref</li> </ul>"},{"location":"eohippus-json-Sequence/#update","title":"update","text":"<p>[Source]</p> <pre><code>fun ref update(\n  i: USize val,\n  value: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val))\n: None val ?\n</code></pre>"},{"location":"eohippus-json-Sequence/#parameters_4","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-json-Sequence/#returns_6","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"eohippus-json-Sequence/#push","title":"push","text":"<p>[Source]</p> <pre><code>fun ref push(\n  item: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val))\n: None val\n</code></pre>"},{"location":"eohippus-json-Sequence/#parameters_5","title":"Parameters","text":"<ul> <li>item: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-json-Sequence/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-json-Sequence/#get_string","title":"get_string","text":"<p>[Source]</p> <pre><code>fun box get_string(\n  pretty: Bool val,\n  indent: String val)\n: String iso^\n</code></pre>"},{"location":"eohippus-json-Sequence/#parameters_6","title":"Parameters","text":"<ul> <li>pretty: Bool val</li> <li>indent: String val</li> </ul>"},{"location":"eohippus-json-Sequence/#returns_8","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-json-Sequence/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"eohippus-json-Sequence/#returns_9","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-json-Subsumes/","title":"Subsumes","text":"<p>[Source] <pre><code>primitive val Subsumes\n</code></pre></p>"},{"location":"eohippus-json-Subsumes/#constructors","title":"Constructors","text":""},{"location":"eohippus-json-Subsumes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Subsumes val^\n</code></pre>"},{"location":"eohippus-json-Subsumes/#returns","title":"Returns","text":"<ul> <li>Subsumes val^</li> </ul>"},{"location":"eohippus-json-Subsumes/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-json-Subsumes/#apply","title":"apply","text":"<p>[Source]</p> <p><code>a</code> subsumes <code>b</code> if <code>b</code> contains at least everything in <code>a</code>.</p> <pre><code>fun box apply(\n  a: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val),\n  b: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val),\n  p: String val = \"/\")\n: (Bool val , String val)\n</code></pre>"},{"location":"eohippus-json-Subsumes/#parameters","title":"Parameters","text":"<ul> <li>a: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> <li>b: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> <li>p: String val = \"/\"</li> </ul>"},{"location":"eohippus-json-Subsumes/#returns_1","title":"Returns","text":"<ul> <li>(Bool val , String val)</li> </ul>"},{"location":"eohippus-json-Subsumes/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Subsumes val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Subsumes/#parameters_1","title":"Parameters","text":"<ul> <li>that: Subsumes val</li> </ul>"},{"location":"eohippus-json-Subsumes/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-json-Subsumes/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Subsumes val)\n: Bool val\n</code></pre>"},{"location":"eohippus-json-Subsumes/#parameters_2","title":"Parameters","text":"<ul> <li>that: Subsumes val</li> </ul>"},{"location":"eohippus-json-Subsumes/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter--index/","title":"Package","text":"<p>No package doc string provided for eohippus/linter.</p>"},{"location":"eohippus-linter--index/#public-types","title":"Public Types","text":"<ul> <li>type Config</li> <li>primitive ConfigKey</li> <li>primitive EditorConfig</li> <li>class Issue</li> <li>actor Linter</li> <li>interface LinterNotify</li> <li>trait Rule</li> </ul>"},{"location":"eohippus-linter-Config/","title":"Config","text":"<p>[Source] <pre><code>type Config is\n  HashMap[String val, String val, HashEq[String val] val] ref\n</code></pre></p>"},{"location":"eohippus-linter-Config/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] ref</li> </ul>"},{"location":"eohippus-linter-ConfigKey/","title":"ConfigKey","text":"<p>[Source] <pre><code>primitive val ConfigKey\n</code></pre></p>"},{"location":"eohippus-linter-ConfigKey/#constructors","title":"Constructors","text":""},{"location":"eohippus-linter-ConfigKey/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConfigKey val^\n</code></pre>"},{"location":"eohippus-linter-ConfigKey/#returns","title":"Returns","text":"<ul> <li>ConfigKey val^</li> </ul>"},{"location":"eohippus-linter-ConfigKey/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-linter-ConfigKey/#trim_trailing_whitespace","title":"trim_trailing_whitespace","text":"<p>[Source]</p> <pre><code>fun tag trim_trailing_whitespace()\n: String val\n</code></pre>"},{"location":"eohippus-linter-ConfigKey/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-linter-ConfigKey/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ConfigKey val)\n: Bool val\n</code></pre>"},{"location":"eohippus-linter-ConfigKey/#parameters","title":"Parameters","text":"<ul> <li>that: ConfigKey val</li> </ul>"},{"location":"eohippus-linter-ConfigKey/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter-ConfigKey/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ConfigKey val)\n: Bool val\n</code></pre>"},{"location":"eohippus-linter-ConfigKey/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConfigKey val</li> </ul>"},{"location":"eohippus-linter-ConfigKey/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter-EditorConfig/","title":"EditorConfig","text":"<p>[Source] <pre><code>primitive val EditorConfig\n</code></pre></p>"},{"location":"eohippus-linter-EditorConfig/#constructors","title":"Constructors","text":""},{"location":"eohippus-linter-EditorConfig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EditorConfig val^\n</code></pre>"},{"location":"eohippus-linter-EditorConfig/#returns","title":"Returns","text":"<ul> <li>EditorConfig val^</li> </ul>"},{"location":"eohippus-linter-EditorConfig/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-linter-EditorConfig/#read","title":"read","text":"<p>[Source]</p> <pre><code>fun box read(\n  path: FilePath val)\n: (HashMap[String val, String val, HashEq[String val] val] val | String val)\n</code></pre>"},{"location":"eohippus-linter-EditorConfig/#parameters","title":"Parameters","text":"<ul> <li>path: FilePath val</li> </ul>"},{"location":"eohippus-linter-EditorConfig/#returns_1","title":"Returns","text":"<ul> <li>(HashMap[String val, String val, HashEq[String val] val] val | String val)</li> </ul>"},{"location":"eohippus-linter-EditorConfig/#default","title":"default","text":"<p>[Source]</p> <pre><code>fun box default()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"eohippus-linter-EditorConfig/#returns_2","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"eohippus-linter-EditorConfig/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: EditorConfig val)\n: Bool val\n</code></pre>"},{"location":"eohippus-linter-EditorConfig/#parameters_1","title":"Parameters","text":"<ul> <li>that: EditorConfig val</li> </ul>"},{"location":"eohippus-linter-EditorConfig/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter-EditorConfig/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: EditorConfig val)\n: Bool val\n</code></pre>"},{"location":"eohippus-linter-EditorConfig/#parameters_2","title":"Parameters","text":"<ul> <li>that: EditorConfig val</li> </ul>"},{"location":"eohippus-linter-EditorConfig/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter-Issue/","title":"Issue","text":"<p>[Source] <pre><code>class val Issue\n</code></pre></p>"},{"location":"eohippus-linter-Issue/#constructors","title":"Constructors","text":""},{"location":"eohippus-linter-Issue/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  rule': Rule val,\n  start': (Cons[Node val] val | Nil[Node val] val),\n  next': (Cons[Node val] val | Nil[Node val] val))\n: Issue val^\n</code></pre>"},{"location":"eohippus-linter-Issue/#parameters","title":"Parameters","text":"<ul> <li>rule': Rule val</li> <li>start': (Cons[Node val] val | Nil[Node val] val)</li> <li>next': (Cons[Node val] val | Nil[Node val] val)</li> </ul>"},{"location":"eohippus-linter-Issue/#returns","title":"Returns","text":"<ul> <li>Issue val^</li> </ul>"},{"location":"eohippus-linter-Issue/#public-fields","title":"Public fields","text":""},{"location":"eohippus-linter-Issue/#let-rule-rule-val","title":"let rule: Rule val","text":"<p>[Source]</p>"},{"location":"eohippus-linter-Issue/#let-start-consnode-val-val-nilnode-val-val","title":"let start: (Cons[Node val] val | Nil[Node val] val)","text":"<p>[Source]</p> <p>A path from the current (first) node to the root.</p>"},{"location":"eohippus-linter-Issue/#let-next-consnode-val-val-nilnode-val-val","title":"let next: (Cons[Node val] val | Nil[Node val] val)","text":"<p>[Source]</p> <p>A path from the next node to the root.</p>"},{"location":"eohippus-linter-Issue/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-linter-Issue/#match_start","title":"match_start","text":"<p>[Source]</p> <pre><code>fun val match_start(\n  node: Node val)\n: Bool val\n</code></pre>"},{"location":"eohippus-linter-Issue/#parameters_1","title":"Parameters","text":"<ul> <li>node: Node val</li> </ul>"},{"location":"eohippus-linter-Issue/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter-Issue/#match_next","title":"match_next","text":"<p>[Source]</p> <pre><code>fun val match_next(\n  node: Node val)\n: Bool val\n</code></pre>"},{"location":"eohippus-linter-Issue/#parameters_2","title":"Parameters","text":"<ul> <li>node: Node val</li> </ul>"},{"location":"eohippus-linter-Issue/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter-Linter/","title":"Linter","text":"<p>[Source]</p> <p>Provides the ability to lint and fix eohippus ASTs.</p> <pre><code>actor tag Linter\n</code></pre>"},{"location":"eohippus-linter-Linter/#constructors","title":"Constructors","text":""},{"location":"eohippus-linter-Linter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  config': HashMap[String val, String val, HashEq[String val] val] val,\n  notify': LinterNotify tag)\n: Linter tag^\n</code></pre>"},{"location":"eohippus-linter-Linter/#parameters","title":"Parameters","text":"<ul> <li>config': HashMap[String val, String val, HashEq[String val] val] val</li> <li>notify': LinterNotify tag</li> </ul>"},{"location":"eohippus-linter-Linter/#returns","title":"Returns","text":"<ul> <li>Linter tag^</li> </ul>"},{"location":"eohippus-linter-Linter/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-linter-Linter/#lint","title":"lint","text":"<p>[Source]</p> <pre><code>be lint(\n  task_id: USize val,\n  tree: Node val)\n</code></pre>"},{"location":"eohippus-linter-Linter/#parameters_1","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>tree: Node val</li> </ul>"},{"location":"eohippus-linter-Linter/#fix","title":"fix","text":"<p>[Source]</p> <pre><code>be fix(\n  task_id: USize val,\n  tree: Node val,\n  issues: ReadSeq[Issue val] val)\n</code></pre>"},{"location":"eohippus-linter-Linter/#parameters_2","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>tree: Node val</li> <li>issues: ReadSeq[Issue val] val</li> </ul>"},{"location":"eohippus-linter-LinterNotify/","title":"LinterNotify","text":"<p>[Source] <pre><code>interface tag LinterNotify\n</code></pre></p>"},{"location":"eohippus-linter-LinterNotify/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-linter-LinterNotify/#lint_completed","title":"lint_completed","text":"<p>[Source]</p> <pre><code>be lint_completed(\n  linter: Linter tag,\n  task_id: USize val,\n  tree: Node val,\n  issues: ReadSeq[Issue val] val,\n  errors: ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-linter-LinterNotify/#parameters","title":"Parameters","text":"<ul> <li>linter: Linter tag</li> <li>task_id: USize val</li> <li>tree: Node val</li> <li>issues: ReadSeq[Issue val] val</li> <li>errors: ReadSeq[(Node val , String val)] val</li> </ul>"},{"location":"eohippus-linter-LinterNotify/#fix_completed","title":"fix_completed","text":"<p>[Source]</p> <pre><code>be fix_completed(\n  linter: Linter tag,\n  task_id: USize val,\n  tree: Node val,\n  issues: ReadSeq[Issue val] val,\n  errors: ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-linter-LinterNotify/#parameters_1","title":"Parameters","text":"<ul> <li>linter: Linter tag</li> <li>task_id: USize val</li> <li>tree: Node val</li> <li>issues: ReadSeq[Issue val] val</li> <li>errors: ReadSeq[(Node val , String val)] val</li> </ul>"},{"location":"eohippus-linter-LinterNotify/#linter_failed","title":"linter_failed","text":"<p>[Source]</p> <pre><code>be linter_failed(\n  task_id: USize val,\n  message: String val)\n</code></pre>"},{"location":"eohippus-linter-LinterNotify/#parameters_2","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>message: String val</li> </ul>"},{"location":"eohippus-linter-Rule/","title":"Rule","text":"<p>[Source] <pre><code>trait val Rule\n</code></pre></p>"},{"location":"eohippus-linter-Rule/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-linter-Rule/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun val name()\n: String val\n</code></pre>"},{"location":"eohippus-linter-Rule/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-linter-Rule/#message","title":"message","text":"<p>[Source]</p> <p>An informative message for issues found by this rule</p> <pre><code>fun val message()\n: String val\n</code></pre>"},{"location":"eohippus-linter-Rule/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-linter-Rule/#should_apply","title":"should_apply","text":"<p>[Source]</p> <pre><code>fun val should_apply(\n  config: HashMap[String val, String val, HashEq[String val] val] val)\n: Bool val\n</code></pre>"},{"location":"eohippus-linter-Rule/#parameters","title":"Parameters","text":"<ul> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"eohippus-linter-Rule/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter-Rule/#analyze","title":"analyze","text":"<p>[Source]</p> <pre><code>fun val analyze(\n  tree: Node val,\n  issues: Seq[Issue val] iso)\n: (Node val , Seq[Issue val] iso^ , ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-linter-Rule/#parameters_1","title":"Parameters","text":"<ul> <li>tree: Node val</li> <li>issues: Seq[Issue val] iso</li> </ul>"},{"location":"eohippus-linter-Rule/#returns_3","title":"Returns","text":"<ul> <li>(Node val , Seq[Issue val] iso^ , ReadSeq[(Node val , String val)] val)</li> </ul>"},{"location":"eohippus-linter-Rule/#fix","title":"fix","text":"<p>[Source]</p> <p>Returns the result of fixing zero or more of the given issues, plus the unfixed issues.</p> <pre><code>fun val fix(\n  tree: Node val,\n  issues: ReadSeq[Issue val] val)\n: (Node val , ReadSeq[Issue val] val , ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-linter-Rule/#parameters_2","title":"Parameters","text":"<ul> <li>tree: Node val</li> <li>issues: ReadSeq[Issue val] val</li> </ul>"},{"location":"eohippus-linter-Rule/#returns_4","title":"Returns","text":"<ul> <li>(Node val , ReadSeq[Issue val] val , ReadSeq[(Node val , String val)] val)</li> </ul>"},{"location":"eohippus-linter-rules--index/","title":"Package","text":"<p>No package doc string provided for eohippus/linter/rules.</p>"},{"location":"eohippus-linter-rules--index/#public-types","title":"Public Types","text":"<ul> <li>class TrimTrailingWhitespace</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/","title":"TrimTrailingWhitespace","text":"<p>[Source] <pre><code>class val TrimTrailingWhitespace is\n  Rule val\n</code></pre></p>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#implements","title":"Implements","text":"<ul> <li>Rule val</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#constructors","title":"Constructors","text":""},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: TrimTrailingWhitespace iso^\n</code></pre>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#returns","title":"Returns","text":"<ul> <li>TrimTrailingWhitespace iso^</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun val name()\n: String val\n</code></pre>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#message","title":"message","text":"<p>[Source]</p> <pre><code>fun val message()\n: String val\n</code></pre>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#should_apply","title":"should_apply","text":"<p>[Source]</p> <pre><code>fun val should_apply(\n  config: HashMap[String val, String val, HashEq[String val] val] val)\n: Bool val\n</code></pre>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#parameters","title":"Parameters","text":"<ul> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#analyze","title":"analyze","text":"<p>[Source]</p> <pre><code>fun val analyze(\n  tree: Node val,\n  issues: Seq[Issue val] iso)\n: (Node val , Seq[Issue val] iso^ , ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#parameters_1","title":"Parameters","text":"<ul> <li>tree: Node val</li> <li>issues: Seq[Issue val] iso</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#returns_4","title":"Returns","text":"<ul> <li>(Node val , Seq[Issue val] iso^ , ReadSeq[(Node val , String val)] val)</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#fix","title":"fix","text":"<p>[Source]</p> <pre><code>fun val fix(\n  tree: Node val,\n  issues: ReadSeq[Issue val] val)\n: (Node val , ReadSeq[Issue val] val , ReadSeq[(Node val , String val)] val)\n</code></pre>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#parameters_2","title":"Parameters","text":"<ul> <li>tree: Node val</li> <li>issues: ReadSeq[Issue val] val</li> </ul>"},{"location":"eohippus-linter-rules-TrimTrailingWhitespace/#returns_5","title":"Returns","text":"<ul> <li>(Node val , ReadSeq[Issue val] val , ReadSeq[(Node val , String val)] val)</li> </ul>"},{"location":"eohippus-parser--index/","title":"Package","text":"<p>Implements a Kiuatan PEG packrat grammar for the Pony language.</p> <p>The grammar is built using the Builder object.</p>"},{"location":"eohippus-parser--index/#public-types","title":"Public Types","text":"<ul> <li>type Action</li> <li>type Bind</li> <li>type Bindings</li> <li>class Builder</li> <li>type Conj</li> <li>class Context</li> <li>class Data</li> <li>type Disj</li> <li>type Error</li> <li>class ExpressionBuilder</li> <li>type Failure</li> <li>class KeywordBuilder</li> <li>type Literal</li> <li>class LiteralBuilder</li> <li>type Loc</li> <li>type Locator</li> <li>type Look</li> <li>type NamedRule</li> <li>type Neg</li> <li>class OperatorBuilder</li> <li>type Parser</li> <li>primitive Plus</li> <li>primitive Ques</li> <li>type Result</li> <li>type RuleNode</li> <li>type RuleNodeWithBody</li> <li>type RuleNodeWithChildren</li> <li>type Segment</li> <li>type Single</li> <li>class SrcFileBuilder</li> <li>type Star</li> <li>type Success</li> <li>class TokenBuilder</li> <li>class TriviaBuilder</li> <li>class TypeBuilder</li> <li>class TypedefBuilder</li> <li>type Variable</li> </ul>"},{"location":"eohippus-parser-Action/","title":"Action","text":"<p>[Source] <pre><code>type Action is\n  Action[U8 val, Data val, Node val] val\n</code></pre></p>"},{"location":"eohippus-parser-Action/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Action[U8 val, Data val, Node val] val</li> </ul>"},{"location":"eohippus-parser-Bind/","title":"Bind","text":"<p>[Source] <pre><code>type Bind is\n  Bind[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Bind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Bind[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Bindings/","title":"Bindings","text":"<p>[Source] <pre><code>type Bindings is\n  Bindings[U8 val, Data val, Node val] val\n</code></pre></p>"},{"location":"eohippus-parser-Bindings/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Bindings[U8 val, Data val, Node val] val</li> </ul>"},{"location":"eohippus-parser-Builder/","title":"Builder","text":"<p>[Source]</p> <p>Builds a Kiuatan grammar for the Pony language.</p> <pre><code>class ref Builder\n</code></pre>"},{"location":"eohippus-parser-Builder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-Builder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  context: Context val)\n: Builder ref^\n</code></pre>"},{"location":"eohippus-parser-Builder/#parameters","title":"Parameters","text":"<ul> <li>context: Context val</li> </ul>"},{"location":"eohippus-parser-Builder/#returns","title":"Returns","text":"<ul> <li>Builder ref^</li> </ul>"},{"location":"eohippus-parser-Builder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-Builder/#let-trivia-triviabuilder-ref","title":"let trivia: TriviaBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Builder/#let-token-tokenbuilder-ref","title":"let token: TokenBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Builder/#let-keyword-keywordbuilder-ref","title":"let keyword: KeywordBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Builder/#let-operator-operatorbuilder-ref","title":"let operator: OperatorBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Builder/#let-literal-literalbuilder-ref","title":"let literal: LiteralBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Builder/#let-type_type-typebuilder-ref","title":"let type_type: TypeBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Builder/#let-expression-expressionbuilder-ref","title":"let expression: ExpressionBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Builder/#let-typedef-typedefbuilder-ref","title":"let typedef: TypedefBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Builder/#let-src_file-srcfilebuilder-ref","title":"let src_file: SrcFileBuilder ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Conj/","title":"Conj","text":"<p>[Source] <pre><code>type Conj is\n  Conj[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Conj/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Conj[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Context/","title":"Context","text":"<p>[Source] <pre><code>class val Context\n</code></pre></p>"},{"location":"eohippus-parser-Context/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-Context/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  packages': ReadSeq[AstPackage val] val)\n: Context val^\n</code></pre>"},{"location":"eohippus-parser-Context/#parameters","title":"Parameters","text":"<ul> <li>packages': ReadSeq[AstPackage val] val</li> </ul>"},{"location":"eohippus-parser-Context/#returns","title":"Returns","text":"<ul> <li>Context val^</li> </ul>"},{"location":"eohippus-parser-Context/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-parser-Context/#builtin","title":"builtin","text":"<p>[Source]</p> <pre><code>fun box builtin()\n: BuiltinAstPackage val\n</code></pre>"},{"location":"eohippus-parser-Context/#returns_1","title":"Returns","text":"<ul> <li>BuiltinAstPackage val</li> </ul>"},{"location":"eohippus-parser-Context/#other_packages","title":"other_packages","text":"<p>[Source]</p> <pre><code>fun box other_packages()\n: ReadSeq[AstPackage val] box\n</code></pre>"},{"location":"eohippus-parser-Context/#returns_2","title":"Returns","text":"<ul> <li>ReadSeq[AstPackage val] box</li> </ul>"},{"location":"eohippus-parser-Context/#all_packages","title":"all_packages","text":"<p>[Source]</p> <pre><code>fun box all_packages()\n: ReadSeq[AstPackage val] box\n</code></pre>"},{"location":"eohippus-parser-Context/#returns_3","title":"Returns","text":"<ul> <li>ReadSeq[AstPackage val] box</li> </ul>"},{"location":"eohippus-parser-Data/","title":"Data","text":"<p>[Source] <pre><code>class val Data\n</code></pre></p>"},{"location":"eohippus-parser-Data/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-Data/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  locator': String val)\n: Data val^\n</code></pre>"},{"location":"eohippus-parser-Data/#parameters","title":"Parameters","text":"<ul> <li>locator': String val</li> </ul>"},{"location":"eohippus-parser-Data/#returns","title":"Returns","text":"<ul> <li>Data val^</li> </ul>"},{"location":"eohippus-parser-Data/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-Data/#let-locator-string-val","title":"let locator: String val","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Disj/","title":"Disj","text":"<p>[Source] <pre><code>type Disj is\n  Disj[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Disj/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Disj[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Error/","title":"Error","text":"<p>[Source] <pre><code>type Error is\n  Error[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Error/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Error[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-ExpressionBuilder/","title":"ExpressionBuilder","text":"<p>[Source] <pre><code>class ref ExpressionBuilder\n</code></pre></p>"},{"location":"eohippus-parser-ExpressionBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-ExpressionBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  context: Context val,\n  trivia: TriviaBuilder ref,\n  token: TokenBuilder ref,\n  keyword: KeywordBuilder ref,\n  operator: OperatorBuilder ref,\n  literal: LiteralBuilder ref,\n  type_type: TypeBuilder ref,\n  method_params: NamedRule[U8 val, Data val, Node val] ref,\n  typedef_members: NamedRule[U8 val, Data val, Node val] ref)\n: ExpressionBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-ExpressionBuilder/#parameters","title":"Parameters","text":"<ul> <li>context: Context val</li> <li>trivia: TriviaBuilder ref</li> <li>token: TokenBuilder ref</li> <li>keyword: KeywordBuilder ref</li> <li>operator: OperatorBuilder ref</li> <li>literal: LiteralBuilder ref</li> <li>type_type: TypeBuilder ref</li> <li>method_params: NamedRule[U8 val, Data val, Node val] ref</li> <li>typedef_members: NamedRule[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-ExpressionBuilder/#returns","title":"Returns","text":"<ul> <li>ExpressionBuilder ref^</li> </ul>"},{"location":"eohippus-parser-ExpressionBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-ExpressionBuilder/#let-annotation-namedruleu8-val-data-val-node-val-ref","title":"let annotation: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-ExpressionBuilder/#let-item-namedruleu8-val-data-val-node-val-ref","title":"let item: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-ExpressionBuilder/#let-infix-namedruleu8-val-data-val-node-val-ref","title":"let infix: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-ExpressionBuilder/#let-seq-namedruleu8-val-data-val-node-val-ref","title":"let seq: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-ExpressionBuilder/#let-tuple_pattern-namedruleu8-val-data-val-node-val-ref","title":"let tuple_pattern: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Failure/","title":"Failure","text":"<p>[Source] <pre><code>type Failure is\n  Failure[U8 val, Data val, Node val] val\n</code></pre></p>"},{"location":"eohippus-parser-Failure/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Failure[U8 val, Data val, Node val] val</li> </ul>"},{"location":"eohippus-parser-KeywordBuilder/","title":"KeywordBuilder","text":"<p>[Source] <pre><code>class ref KeywordBuilder\n</code></pre></p>"},{"location":"eohippus-parser-KeywordBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-KeywordBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  context: Context val,\n  trivia: TriviaBuilder ref)\n: KeywordBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-KeywordBuilder/#parameters","title":"Parameters","text":"<ul> <li>context: Context val</li> <li>trivia: TriviaBuilder ref</li> </ul>"},{"location":"eohippus-parser-KeywordBuilder/#returns","title":"Returns","text":"<ul> <li>KeywordBuilder ref^</li> </ul>"},{"location":"eohippus-parser-KeywordBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-KeywordBuilder/#let-kwd-namedruleu8-val-data-val-node-val-ref","title":"let kwd: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-KeywordBuilder/#let-not_kwd-namedruleu8-val-data-val-node-val-ref","title":"let not_kwd: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-KeywordBuilder/#let-cap-namedruleu8-val-data-val-node-val-ref","title":"let cap: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-KeywordBuilder/#let-gencap-namedruleu8-val-data-val-node-val-ref","title":"let gencap: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-KeywordBuilder/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-parser-KeywordBuilder/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  str: String val)\n: NamedRule[U8 val, Data val, Node val] box\n</code></pre>"},{"location":"eohippus-parser-KeywordBuilder/#parameters_1","title":"Parameters","text":"<ul> <li>str: String val</li> </ul>"},{"location":"eohippus-parser-KeywordBuilder/#returns_1","title":"Returns","text":"<ul> <li>NamedRule[U8 val, Data val, Node val] box</li> </ul>"},{"location":"eohippus-parser-Literal/","title":"Literal","text":"<p>[Source] <pre><code>type Literal is\n  Literal[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Literal/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Literal[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-LiteralBuilder/","title":"LiteralBuilder","text":"<p>[Source] <pre><code>class ref LiteralBuilder\n</code></pre></p>"},{"location":"eohippus-parser-LiteralBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-LiteralBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  context: Context val,\n  trivia: TriviaBuilder ref,\n  token: TokenBuilder ref,\n  keyword: KeywordBuilder ref)\n: LiteralBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-LiteralBuilder/#parameters","title":"Parameters","text":"<ul> <li>context: Context val</li> <li>trivia: TriviaBuilder ref</li> <li>token: TokenBuilder ref</li> <li>keyword: KeywordBuilder ref</li> </ul>"},{"location":"eohippus-parser-LiteralBuilder/#returns","title":"Returns","text":"<ul> <li>LiteralBuilder ref^</li> </ul>"},{"location":"eohippus-parser-LiteralBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-LiteralBuilder/#let-literal-namedruleu8-val-data-val-node-val-ref","title":"let literal: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-bool-namedruleu8-val-data-val-node-val-ref","title":"let bool: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-integer-namedruleu8-val-data-val-node-val-ref","title":"let integer: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-integer_dec-namedruleu8-val-data-val-node-val-ref","title":"let integer_dec: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-integer_hex-namedruleu8-val-data-val-node-val-ref","title":"let integer_hex: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-integer_bin-namedruleu8-val-data-val-node-val-ref","title":"let integer_bin: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-float-namedruleu8-val-data-val-node-val-ref","title":"let float: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-char-namedruleu8-val-data-val-node-val-ref","title":"let char: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-char_escape-namedruleu8-val-data-val-node-val-ref","title":"let char_escape: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-char_unicode-namedruleu8-val-data-val-node-val-ref","title":"let char_unicode: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-string-namedruleu8-val-data-val-node-val-ref","title":"let string: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-string_regular-namedruleu8-val-data-val-node-val-ref","title":"let string_regular: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-LiteralBuilder/#let-string_triple-namedruleu8-val-data-val-node-val-ref","title":"let string_triple: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Loc/","title":"Loc","text":"<p>[Source] <pre><code>type Loc is\n  Loc[U8 val] val\n</code></pre></p>"},{"location":"eohippus-parser-Loc/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Loc[U8 val] val</li> </ul>"},{"location":"eohippus-parser-Locator/","title":"Locator","text":"<p>[Source] <pre><code>type Locator is\n  String val\n</code></pre></p>"},{"location":"eohippus-parser-Locator/#type-alias-for","title":"Type Alias For","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-parser-Look/","title":"Look","text":"<p>[Source] <pre><code>type Look is\n  Look[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Look/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Look[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-NamedRule/","title":"NamedRule","text":"<p>[Source] <pre><code>type NamedRule is\n  NamedRule[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-NamedRule/#type-alias-for","title":"Type Alias For","text":"<ul> <li>NamedRule[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Neg/","title":"Neg","text":"<p>[Source] <pre><code>type Neg is\n  Neg[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Neg/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Neg[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-OperatorBuilder/","title":"OperatorBuilder","text":"<p>[Source] <pre><code>class ref OperatorBuilder\n</code></pre></p>"},{"location":"eohippus-parser-OperatorBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-OperatorBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  trivia: TriviaBuilder ref,\n  token: TokenBuilder ref,\n  keyword: KeywordBuilder ref)\n: OperatorBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-OperatorBuilder/#parameters","title":"Parameters","text":"<ul> <li>trivia: TriviaBuilder ref</li> <li>token: TokenBuilder ref</li> <li>keyword: KeywordBuilder ref</li> </ul>"},{"location":"eohippus-parser-OperatorBuilder/#returns","title":"Returns","text":"<ul> <li>OperatorBuilder ref^</li> </ul>"},{"location":"eohippus-parser-OperatorBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-OperatorBuilder/#let-prefix_op-namedruleu8-val-data-val-node-val-ref","title":"let prefix_op: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-OperatorBuilder/#let-binary_op-namedruleu8-val-data-val-node-val-ref","title":"let binary_op: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-OperatorBuilder/#let-postfix_op-namedruleu8-val-data-val-node-val-ref","title":"let postfix_op: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-Parser/","title":"Parser","text":"<p>[Source] <pre><code>type Parser is\n  Parser[U8 val, Data val, Node val] tag\n</code></pre></p>"},{"location":"eohippus-parser-Parser/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Parser[U8 val, Data val, Node val] tag</li> </ul>"},{"location":"eohippus-parser-Plus/","title":"Plus","text":"<p>[Source] <pre><code>primitive val Plus\n</code></pre></p>"},{"location":"eohippus-parser-Plus/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-Plus/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Plus val^\n</code></pre>"},{"location":"eohippus-parser-Plus/#returns","title":"Returns","text":"<ul> <li>Plus val^</li> </ul>"},{"location":"eohippus-parser-Plus/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-parser-Plus/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  body: RuleNode[U8 val, Data val, Node val] box,\n  action: (Action[U8 val, Data val, Node val] val | None val) = reference)\n: RuleNode[U8 val, Data val, Node val] ref\n</code></pre>"},{"location":"eohippus-parser-Plus/#parameters","title":"Parameters","text":"<ul> <li>body: RuleNode[U8 val, Data val, Node val] box</li> <li>action: (Action[U8 val, Data val, Node val] val | None val) = reference</li> </ul>"},{"location":"eohippus-parser-Plus/#returns_1","title":"Returns","text":"<ul> <li>RuleNode[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Plus/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Plus val)\n: Bool val\n</code></pre>"},{"location":"eohippus-parser-Plus/#parameters_1","title":"Parameters","text":"<ul> <li>that: Plus val</li> </ul>"},{"location":"eohippus-parser-Plus/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-parser-Plus/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Plus val)\n: Bool val\n</code></pre>"},{"location":"eohippus-parser-Plus/#parameters_2","title":"Parameters","text":"<ul> <li>that: Plus val</li> </ul>"},{"location":"eohippus-parser-Plus/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-parser-Ques/","title":"Ques","text":"<p>[Source] <pre><code>primitive val Ques\n</code></pre></p>"},{"location":"eohippus-parser-Ques/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-Ques/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Ques val^\n</code></pre>"},{"location":"eohippus-parser-Ques/#returns","title":"Returns","text":"<ul> <li>Ques val^</li> </ul>"},{"location":"eohippus-parser-Ques/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-parser-Ques/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  body: RuleNode[U8 val, Data val, Node val] box,\n  action: (Action[U8 val, Data val, Node val] val | None val) = reference)\n: RuleNode[U8 val, Data val, Node val] ref\n</code></pre>"},{"location":"eohippus-parser-Ques/#parameters","title":"Parameters","text":"<ul> <li>body: RuleNode[U8 val, Data val, Node val] box</li> <li>action: (Action[U8 val, Data val, Node val] val | None val) = reference</li> </ul>"},{"location":"eohippus-parser-Ques/#returns_1","title":"Returns","text":"<ul> <li>RuleNode[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Ques/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Ques val)\n: Bool val\n</code></pre>"},{"location":"eohippus-parser-Ques/#parameters_1","title":"Parameters","text":"<ul> <li>that: Ques val</li> </ul>"},{"location":"eohippus-parser-Ques/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-parser-Ques/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Ques val)\n: Bool val\n</code></pre>"},{"location":"eohippus-parser-Ques/#parameters_2","title":"Parameters","text":"<ul> <li>that: Ques val</li> </ul>"},{"location":"eohippus-parser-Ques/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-parser-Result/","title":"Result","text":"<p>[Source] <pre><code>type Result is\n  (Success[U8 val, Data val, Node val] val | Failure[U8 val, Data val, Node val] val)\n</code></pre></p>"},{"location":"eohippus-parser-Result/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Success[U8 val, Data val, Node val] val | Failure[U8 val, Data val, Node val] val)</li> </ul>"},{"location":"eohippus-parser-RuleNode/","title":"RuleNode","text":"<p>[Source] <pre><code>type RuleNode is\n  RuleNode[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-RuleNode/#type-alias-for","title":"Type Alias For","text":"<ul> <li>RuleNode[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-RuleNodeWithBody/","title":"RuleNodeWithBody","text":"<p>[Source] <pre><code>type RuleNodeWithBody is\n  RuleNodeWithBody[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-RuleNodeWithBody/#type-alias-for","title":"Type Alias For","text":"<ul> <li>RuleNodeWithBody[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-RuleNodeWithChildren/","title":"RuleNodeWithChildren","text":"<p>[Source] <pre><code>type RuleNodeWithChildren is\n  RuleNodeWithChildren[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-RuleNodeWithChildren/#type-alias-for","title":"Type Alias For","text":"<ul> <li>RuleNodeWithChildren[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Segment/","title":"Segment","text":"<p>[Source] <pre><code>type Segment is\n  ReadSeq[U8 val] val\n</code></pre></p>"},{"location":"eohippus-parser-Segment/#type-alias-for","title":"Type Alias For","text":"<ul> <li>ReadSeq[U8 val] val</li> </ul>"},{"location":"eohippus-parser-Single/","title":"Single","text":"<p>[Source] <pre><code>type Single is\n  Single[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Single/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Single[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-SrcFileBuilder/","title":"SrcFileBuilder","text":"<p>[Source] <pre><code>class ref SrcFileBuilder\n</code></pre></p>"},{"location":"eohippus-parser-SrcFileBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-SrcFileBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  trivia: TriviaBuilder ref,\n  token: TokenBuilder ref,\n  keyword: KeywordBuilder ref,\n  literal: LiteralBuilder ref,\n  type_type: TypeBuilder ref,\n  expression: ExpressionBuilder ref,\n  typedef: TypedefBuilder ref)\n: SrcFileBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-SrcFileBuilder/#parameters","title":"Parameters","text":"<ul> <li>trivia: TriviaBuilder ref</li> <li>token: TokenBuilder ref</li> <li>keyword: KeywordBuilder ref</li> <li>literal: LiteralBuilder ref</li> <li>type_type: TypeBuilder ref</li> <li>expression: ExpressionBuilder ref</li> <li>typedef: TypedefBuilder ref</li> </ul>"},{"location":"eohippus-parser-SrcFileBuilder/#returns","title":"Returns","text":"<ul> <li>SrcFileBuilder ref^</li> </ul>"},{"location":"eohippus-parser-SrcFileBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-SrcFileBuilder/#let-src_file-namedruleu8-val-data-val-node-val-ref","title":"let src_file: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-SrcFileBuilder/#let-using-namedruleu8-val-data-val-node-val-ref","title":"let using: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-SrcFileBuilder/#let-using_pony-namedruleu8-val-data-val-node-val-ref","title":"let using_pony: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-SrcFileBuilder/#let-using_ffi-namedruleu8-val-data-val-node-val-ref","title":"let using_ffi: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-SrcFileBuilder/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-parser-SrcFileBuilder/#err_sec","title":"err_sec","text":"<p>[Source]</p> <pre><code>fun ref err_sec(\n  allowed: ReadSeq[NamedRule[U8 val, Data val, Node val] ref] box,\n  message: String val)\n: RuleNode[U8 val, Data val, Node val] ref\n</code></pre>"},{"location":"eohippus-parser-SrcFileBuilder/#parameters_1","title":"Parameters","text":"<ul> <li>allowed: ReadSeq[NamedRule[U8 val, Data val, Node val] ref] box</li> <li>message: String val</li> </ul>"},{"location":"eohippus-parser-SrcFileBuilder/#returns_1","title":"Returns","text":"<ul> <li>RuleNode[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Star/","title":"Star","text":"<p>[Source] <pre><code>type Star is\n  Star[U8 val, Data val, Node val] ref\n</code></pre></p>"},{"location":"eohippus-parser-Star/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Star[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Success/","title":"Success","text":"<p>[Source] <pre><code>type Success is\n  Success[U8 val, Data val, Node val] val\n</code></pre></p>"},{"location":"eohippus-parser-Success/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Success[U8 val, Data val, Node val] val</li> </ul>"},{"location":"eohippus-parser-TokenBuilder/","title":"TokenBuilder","text":"<p>[Source] <pre><code>class ref TokenBuilder\n</code></pre></p>"},{"location":"eohippus-parser-TokenBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-TokenBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  context: Context val,\n  trivia: TriviaBuilder ref)\n: TokenBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-TokenBuilder/#parameters","title":"Parameters","text":"<ul> <li>context: Context val</li> <li>trivia: TriviaBuilder ref</li> </ul>"},{"location":"eohippus-parser-TokenBuilder/#returns","title":"Returns","text":"<ul> <li>TokenBuilder ref^</li> </ul>"},{"location":"eohippus-parser-TokenBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-TokenBuilder/#let-identifier-namedruleu8-val-data-val-node-val-ref","title":"let identifier: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TokenBuilder/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-parser-TokenBuilder/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  str: String val)\n: NamedRule[U8 val, Data val, Node val] box\n</code></pre>"},{"location":"eohippus-parser-TokenBuilder/#parameters_1","title":"Parameters","text":"<ul> <li>str: String val</li> </ul>"},{"location":"eohippus-parser-TokenBuilder/#returns_1","title":"Returns","text":"<ul> <li>NamedRule[U8 val, Data val, Node val] box</li> </ul>"},{"location":"eohippus-parser-TriviaBuilder/","title":"TriviaBuilder","text":"<p>[Source] <pre><code>class ref TriviaBuilder\n</code></pre></p>"},{"location":"eohippus-parser-TriviaBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-TriviaBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  context: Context val)\n: TriviaBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-TriviaBuilder/#parameters","title":"Parameters","text":"<ul> <li>context: Context val</li> </ul>"},{"location":"eohippus-parser-TriviaBuilder/#returns","title":"Returns","text":"<ul> <li>TriviaBuilder ref^</li> </ul>"},{"location":"eohippus-parser-TriviaBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-TriviaBuilder/#let-trivia-namedruleu8-val-data-val-node-val-ref","title":"let trivia: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TriviaBuilder/#let-comment-namedruleu8-val-data-val-node-val-ref","title":"let comment: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TriviaBuilder/#let-comment_line-namedruleu8-val-data-val-node-val-ref","title":"let comment_line: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TriviaBuilder/#let-comment_nested-namedruleu8-val-data-val-node-val-ref","title":"let comment_nested: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TriviaBuilder/#let-ws-namedruleu8-val-data-val-node-val-ref","title":"let ws: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TriviaBuilder/#let-eol-namedruleu8-val-data-val-node-val-ref","title":"let eol: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TriviaBuilder/#let-dol-namedruleu8-val-data-val-node-val-ref","title":"let dol: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TriviaBuilder/#let-eof-namedruleu8-val-data-val-node-val-ref","title":"let eof: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/","title":"TypeBuilder","text":"<p>[Source] <pre><code>class ref TypeBuilder\n</code></pre></p>"},{"location":"eohippus-parser-TypeBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-TypeBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  context: Context val,\n  token: TokenBuilder ref,\n  keyword: KeywordBuilder ref)\n: TypeBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-TypeBuilder/#parameters","title":"Parameters","text":"<ul> <li>context: Context val</li> <li>token: TokenBuilder ref</li> <li>keyword: KeywordBuilder ref</li> </ul>"},{"location":"eohippus-parser-TypeBuilder/#returns","title":"Returns","text":"<ul> <li>TypeBuilder ref^</li> </ul>"},{"location":"eohippus-parser-TypeBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-TypeBuilder/#let-args-namedruleu8-val-data-val-node-val-ref","title":"let args: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/#let-arrow-namedruleu8-val-data-val-node-val-ref","title":"let arrow: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/#let-atom-namedruleu8-val-data-val-node-val-ref","title":"let atom: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/#let-infix-namedruleu8-val-data-val-node-val-ref","title":"let infix: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/#let-lambda-namedruleu8-val-data-val-node-val-ref","title":"let lambda: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/#let-nominal-namedruleu8-val-data-val-node-val-ref","title":"let nominal: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/#let-param-namedruleu8-val-data-val-node-val-ref","title":"let param: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/#let-params-namedruleu8-val-data-val-node-val-ref","title":"let params: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypeBuilder/#let-tuple-namedruleu8-val-data-val-node-val-ref","title":"let tuple: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/","title":"TypedefBuilder","text":"<p>[Source] <pre><code>class ref TypedefBuilder\n</code></pre></p>"},{"location":"eohippus-parser-TypedefBuilder/#constructors","title":"Constructors","text":""},{"location":"eohippus-parser-TypedefBuilder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  trivia: TriviaBuilder ref,\n  token: TokenBuilder ref,\n  keyword: KeywordBuilder ref,\n  literal: LiteralBuilder ref,\n  type_type: TypeBuilder ref,\n  expression: ExpressionBuilder ref,\n  method_params': NamedRule[U8 val, Data val, Node val] ref,\n  typedef_members': NamedRule[U8 val, Data val, Node val] ref)\n: TypedefBuilder ref^\n</code></pre>"},{"location":"eohippus-parser-TypedefBuilder/#parameters","title":"Parameters","text":"<ul> <li>trivia: TriviaBuilder ref</li> <li>token: TokenBuilder ref</li> <li>keyword: KeywordBuilder ref</li> <li>literal: LiteralBuilder ref</li> <li>type_type: TypeBuilder ref</li> <li>expression: ExpressionBuilder ref</li> <li>method_params': NamedRule[U8 val, Data val, Node val] ref</li> <li>typedef_members': NamedRule[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-TypedefBuilder/#returns","title":"Returns","text":"<ul> <li>TypedefBuilder ref^</li> </ul>"},{"location":"eohippus-parser-TypedefBuilder/#public-fields","title":"Public fields","text":""},{"location":"eohippus-parser-TypedefBuilder/#let-doc_string-namedruleu8-val-data-val-node-val-ref","title":"let doc_string: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#let-method_params-namedruleu8-val-data-val-node-val-ref","title":"let method_params: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#let-members-namedruleu8-val-data-val-node-val-ref","title":"let members: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#let-field-namedruleu8-val-data-val-node-val-ref","title":"let field: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#let-method-namedruleu8-val-data-val-node-val-ref","title":"let method: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#let-typedef-namedruleu8-val-data-val-node-val-ref","title":"let typedef: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#let-typedef_primitive-namedruleu8-val-data-val-node-val-ref","title":"let typedef_primitive: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#let-typedef_alias-namedruleu8-val-data-val-node-val-ref","title":"let typedef_alias: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#let-typedef_class-namedruleu8-val-data-val-node-val-ref","title":"let typedef_class: NamedRule[U8 val, Data val, Node val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-parser-TypedefBuilder/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-parser-TypedefBuilder/#error_section","title":"error_section","text":"<p>[Source]</p> <pre><code>fun box error_section(\n  allowed: ReadSeq[NamedRule[U8 val, Data val, Node val] box] box,\n  message: String val)\n: RuleNode[U8 val, Data val, Node val] ref\n</code></pre>"},{"location":"eohippus-parser-TypedefBuilder/#parameters_1","title":"Parameters","text":"<ul> <li>allowed: ReadSeq[NamedRule[U8 val, Data val, Node val] box] box</li> <li>message: String val</li> </ul>"},{"location":"eohippus-parser-TypedefBuilder/#returns_1","title":"Returns","text":"<ul> <li>RuleNode[U8 val, Data val, Node val] ref</li> </ul>"},{"location":"eohippus-parser-Variable/","title":"Variable","text":"<p>[Source] <pre><code>type Variable is\n  Variable val\n</code></pre></p>"},{"location":"eohippus-parser-Variable/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Variable val</li> </ul>"},{"location":"eohippus-server--index/","title":"Package","text":"<p>No package doc string provided for eohippus/server.</p>"},{"location":"eohippus-server--index/#public-types","title":"Public Types","text":"<ul> <li>class ClientData</li> <li>class EohippusLogFormatter</li> <li>actor EohippusServer</li> <li>interface Server</li> <li>class ServerConfig</li> <li>primitive ServerExiting</li> <li>primitive ServerInitialized</li> <li>primitive ServerInitializing</li> <li>primitive ServerNotConnected</li> <li>primitive ServerNotInitialized</li> <li>interface ServerNotify</li> <li>primitive ServerShuttingDown</li> <li>type ServerState</li> <li>primitive ServerUtils</li> <li>class SrcFileInfo</li> <li>class SrcFiles</li> <li>class WorkspaceInfo</li> <li>class Workspaces</li> </ul>"},{"location":"eohippus-server-ClientData/","title":"ClientData","text":"<p>[Source] <pre><code>class ref ClientData\n</code></pre></p>"},{"location":"eohippus-server-ClientData/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ClientData/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: ClientData iso^\n</code></pre>"},{"location":"eohippus-server-ClientData/#returns","title":"Returns","text":"<ul> <li>ClientData iso^</li> </ul>"},{"location":"eohippus-server-ClientData/#public-fields","title":"Public fields","text":""},{"location":"eohippus-server-ClientData/#var-capabilities-clientcapabilities-val-none-val","title":"var capabilities: (ClientCapabilities val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-server-ClientData/#var-workspacefolders-arrayworkspacefolder-val-val-none-val","title":"var workspaceFolders: (Array[WorkspaceFolder val] val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-server-ClientData/#var-rooturi-string-val-none-val","title":"var rootUri: (String val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-server-ClientData/#var-rootpath-string-val-none-val","title":"var rootPath: (String val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-server-ClientData/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ClientData/#text_document_publish_diagnostics","title":"text_document_publish_diagnostics","text":"<p>[Source]</p> <pre><code>fun box text_document_publish_diagnostics()\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ClientData/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-EohippusLogFormatter/","title":"EohippusLogFormatter","text":"<p>[Source] <pre><code>class ref EohippusLogFormatter is\n  LogFormatter val\n</code></pre></p>"},{"location":"eohippus-server-EohippusLogFormatter/#implements","title":"Implements","text":"<ul> <li>LogFormatter val</li> </ul>"},{"location":"eohippus-server-EohippusLogFormatter/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-EohippusLogFormatter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: EohippusLogFormatter iso^\n</code></pre>"},{"location":"eohippus-server-EohippusLogFormatter/#returns","title":"Returns","text":"<ul> <li>EohippusLogFormatter iso^</li> </ul>"},{"location":"eohippus-server-EohippusLogFormatter/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-EohippusLogFormatter/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  message: String val,\n  loc: SourceLoc val)\n: String val\n</code></pre>"},{"location":"eohippus-server-EohippusLogFormatter/#parameters","title":"Parameters","text":"<ul> <li>message: String val</li> <li>loc: SourceLoc val</li> </ul>"},{"location":"eohippus-server-EohippusLogFormatter/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-EohippusServer/","title":"EohippusServer","text":"<p>[Source] <pre><code>actor tag EohippusServer is\n  Server tag\n</code></pre></p>"},{"location":"eohippus-server-EohippusServer/#implements","title":"Implements","text":"<ul> <li>Server tag</li> </ul>"},{"location":"eohippus-server-EohippusServer/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-EohippusServer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  env: Env val,\n  log: Logger[String val] val,\n  config: ServerConfig val,\n  notify: (ServerNotify iso | None val) = reference,\n  rpc_handler: (Handler tag | None val) = reference)\n: EohippusServer tag^\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>log: Logger[String val] val</li> <li>config: ServerConfig val</li> <li>notify: (ServerNotify iso | None val) = reference</li> <li>rpc_handler: (Handler tag | None val) = reference</li> </ul>"},{"location":"eohippus-server-EohippusServer/#returns","title":"Returns","text":"<ul> <li>EohippusServer tag^</li> </ul>"},{"location":"eohippus-server-EohippusServer/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-server-EohippusServer/#set_notify","title":"set_notify","text":"<p>[Source]</p> <pre><code>be set_notify(\n  notify: ServerNotify iso)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_1","title":"Parameters","text":"<ul> <li>notify: ServerNotify iso</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notify_listening","title":"notify_listening","text":"<p>[Source]</p> <pre><code>be notify_listening()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#notify_connected","title":"notify_connected","text":"<p>[Source]</p> <pre><code>be notify_connected()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#notify_errored","title":"notify_errored","text":"<p>[Source]</p> <pre><code>be notify_errored()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#notify_initializing","title":"notify_initializing","text":"<p>[Source]</p> <pre><code>be notify_initializing()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#notify_initialized","title":"notify_initialized","text":"<p>[Source]</p> <pre><code>be notify_initialized()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#notify_received_request","title":"notify_received_request","text":"<p>[Source]</p> <pre><code>be notify_received_request(\n  id: (I128 val | String val | None val),\n  method: String val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_2","title":"Parameters","text":"<ul> <li>id: (I128 val | String val | None val)</li> <li>method: String val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notify_received_notification","title":"notify_received_notification","text":"<p>[Source]</p> <pre><code>be notify_received_notification(\n  method: String val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_3","title":"Parameters","text":"<ul> <li>method: String val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notify_sent_error","title":"notify_sent_error","text":"<p>[Source]</p> <pre><code>be notify_sent_error(\n  id: (I128 val | String val | None val),\n  code: I128 val,\n  message: String val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_4","title":"Parameters","text":"<ul> <li>id: (I128 val | String val | None val)</li> <li>code: I128 val</li> <li>message: String val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notify_disconnected","title":"notify_disconnected","text":"<p>[Source]</p> <pre><code>be notify_disconnected()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#notify_shutting_down","title":"notify_shutting_down","text":"<p>[Source]</p> <pre><code>be notify_shutting_down()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#notify_exiting","title":"notify_exiting","text":"<p>[Source]</p> <pre><code>be notify_exiting(\n  code: I32 val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_5","title":"Parameters","text":"<ul> <li>code: I32 val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#set_rpc_handler","title":"set_rpc_handler","text":"<p>[Source]</p> <pre><code>be set_rpc_handler(\n  rpc_handler: Handler tag)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_6","title":"Parameters","text":"<ul> <li>rpc_handler: Handler tag</li> </ul>"},{"location":"eohippus-server-EohippusServer/#rpc_listening","title":"rpc_listening","text":"<p>[Source]</p> <pre><code>be rpc_listening()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#rpc_connected","title":"rpc_connected","text":"<p>[Source]</p> <pre><code>be rpc_connected()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#rpc_error","title":"rpc_error","text":"<p>[Source]</p> <pre><code>be rpc_error()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#rpc_closed","title":"rpc_closed","text":"<p>[Source]</p> <pre><code>be rpc_closed()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#exit","title":"exit","text":"<p>[Source]</p> <pre><code>be exit()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#request_initialize","title":"request_initialize","text":"<p>[Source]</p> <pre><code>be request_initialize(\n  message: RequestMessage val,\n  params: InitializeParams val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_7","title":"Parameters","text":"<ul> <li>message: RequestMessage val</li> <li>params: InitializeParams val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#request_shutdown","title":"request_shutdown","text":"<p>[Source]</p> <pre><code>be request_shutdown(\n  message: RequestMessage val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_8","title":"Parameters","text":"<ul> <li>message: RequestMessage val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notification_initialized","title":"notification_initialized","text":"<p>[Source]</p> <pre><code>be notification_initialized()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#notification_set_trace","title":"notification_set_trace","text":"<p>[Source]</p> <pre><code>be notification_set_trace(\n  params: SetTraceParams val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_9","title":"Parameters","text":"<ul> <li>params: SetTraceParams val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notification_did_open_text_document","title":"notification_did_open_text_document","text":"<p>[Source]</p> <pre><code>be notification_did_open_text_document(\n  params: DidOpenTextDocumentParams val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_10","title":"Parameters","text":"<ul> <li>params: DidOpenTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notification_did_change_text_document","title":"notification_did_change_text_document","text":"<p>[Source]</p> <pre><code>be notification_did_change_text_document(\n  params: DidChangeTextDocumentParams val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_11","title":"Parameters","text":"<ul> <li>params: DidChangeTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notification_did_close_text_document","title":"notification_did_close_text_document","text":"<p>[Source]</p> <pre><code>be notification_did_close_text_document(\n  params: DidCloseTextDocumentParams val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_12","title":"Parameters","text":"<ul> <li>params: DidCloseTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#request_definition","title":"request_definition","text":"<p>[Source]</p> <pre><code>be request_definition(\n  request_id: String val,\n  params: DefinitionParams val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_13","title":"Parameters","text":"<ul> <li>request_id: String val</li> <li>params: DefinitionParams val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#notification_exit","title":"notification_exit","text":"<p>[Source]</p> <pre><code>be notification_exit()\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#set_client_data","title":"set_client_data","text":"<p>[Source]</p> <pre><code>be set_client_data(\n  capabilities: ClientCapabilities val,\n  workspaceFolders: (Array[WorkspaceFolder val] val | None val),\n  rootUri: (String val | None val),\n  rootPath: (String val | None val))\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_14","title":"Parameters","text":"<ul> <li>capabilities: ClientCapabilities val</li> <li>workspaceFolders: (Array[WorkspaceFolder val] val | None val)</li> <li>rootUri: (String val | None val)</li> <li>rootPath: (String val | None val)</li> </ul>"},{"location":"eohippus-server-EohippusServer/#open_workspace","title":"open_workspace","text":"<p>[Source]</p> <pre><code>be open_workspace(\n  name: String val,\n  client_uri: String val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_15","title":"Parameters","text":"<ul> <li>name: String val</li> <li>client_uri: String val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#parsed_file","title":"parsed_file","text":"<p>[Source]</p> <pre><code>be parsed_file(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_path: String val,\n  syntax_tree: Node val,\n  line_beginnings: ReadSeq[Loc[U8 val] val] val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_16","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>syntax_tree: Node val</li> <li>line_beginnings: ReadSeq[Loc[U8 val] val] val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#analyzed_workspace","title":"analyzed_workspace","text":"<p>[Source]</p> <pre><code>be analyzed_workspace(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  workspace_errors: ReadSeq[AnalyzerError val] val,\n  parse_errors: ReadSeq[AnalyzerError val] val,\n  lint_errors: ReadSeq[AnalyzerError val] val,\n  analyze_errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_17","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>workspace_errors: ReadSeq[AnalyzerError val] val</li> <li>parse_errors: ReadSeq[AnalyzerError val] val</li> <li>lint_errors: ReadSeq[AnalyzerError val] val</li> <li>analyze_errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#analyzed_file","title":"analyzed_file","text":"<p>[Source]</p> <pre><code>be analyzed_file(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_path: String val,\n  syntax_tree: (Node val | None val),\n  file_scope: (Scope val | None val),\n  parse_errors: ReadSeq[AnalyzerError val] val,\n  lint_errors: ReadSeq[AnalyzerError val] val,\n  analyze_errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_18","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>syntax_tree: (Node val | None val)</li> <li>file_scope: (Scope val | None val)</li> <li>parse_errors: ReadSeq[AnalyzerError val] val</li> <li>lint_errors: ReadSeq[AnalyzerError val] val</li> <li>analyze_errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#analyze_failed","title":"analyze_failed","text":"<p>[Source]</p> <pre><code>be analyze_failed(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_path: String val,\n  errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_19","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-server-EohippusServer/#definition_found","title":"definition_found","text":"<p>[Source]</p> <pre><code>be definition_found(\n  task_id: USize val,\n  canonical_path: String val,\n  range: (USize val , USize val , USize val , \n    USize val))\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_20","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>range: (USize val , USize val , USize val ,      USize val)</li> </ul>"},{"location":"eohippus-server-EohippusServer/#definition_failed","title":"definition_failed","text":"<p>[Source]</p> <pre><code>be definition_failed(\n  task_id: USize val,\n  message: String val)\n</code></pre>"},{"location":"eohippus-server-EohippusServer/#parameters_21","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>message: String val</li> </ul>"},{"location":"eohippus-server-Server/","title":"Server","text":"<p>[Source] <pre><code>interface tag Server is\n  AnalyzerNotify tag,\n  FindDefinitionNotify tag\n</code></pre></p>"},{"location":"eohippus-server-Server/#implements","title":"Implements","text":"<ul> <li>AnalyzerNotify tag</li> <li>FindDefinitionNotify tag</li> </ul>"},{"location":"eohippus-server-Server/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-server-Server/#set_rpc_handler","title":"set_rpc_handler","text":"<p>[Source]</p> <pre><code>be set_rpc_handler(\n  rpc_handler: Handler tag)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters","title":"Parameters","text":"<ul> <li>rpc_handler: Handler tag</li> </ul>"},{"location":"eohippus-server-Server/#rpc_listening","title":"rpc_listening","text":"<p>[Source]</p> <pre><code>be rpc_listening()\n</code></pre>"},{"location":"eohippus-server-Server/#rpc_connected","title":"rpc_connected","text":"<p>[Source]</p> <pre><code>be rpc_connected()\n</code></pre>"},{"location":"eohippus-server-Server/#rpc_error","title":"rpc_error","text":"<p>[Source]</p> <pre><code>be rpc_error()\n</code></pre>"},{"location":"eohippus-server-Server/#rpc_closed","title":"rpc_closed","text":"<p>[Source]</p> <pre><code>be rpc_closed()\n</code></pre>"},{"location":"eohippus-server-Server/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"eohippus-server-Server/#exit","title":"exit","text":"<p>[Source]</p> <pre><code>be exit()\n</code></pre>"},{"location":"eohippus-server-Server/#notify_listening","title":"notify_listening","text":"<p>[Source]</p> <pre><code>be notify_listening()\n</code></pre>"},{"location":"eohippus-server-Server/#notify_connected","title":"notify_connected","text":"<p>[Source]</p> <pre><code>be notify_connected()\n</code></pre>"},{"location":"eohippus-server-Server/#notify_errored","title":"notify_errored","text":"<p>[Source]</p> <pre><code>be notify_errored()\n</code></pre>"},{"location":"eohippus-server-Server/#notify_initializing","title":"notify_initializing","text":"<p>[Source]</p> <pre><code>be notify_initializing()\n</code></pre>"},{"location":"eohippus-server-Server/#notify_initialized","title":"notify_initialized","text":"<p>[Source]</p> <pre><code>be notify_initialized()\n</code></pre>"},{"location":"eohippus-server-Server/#notify_received_request","title":"notify_received_request","text":"<p>[Source]</p> <pre><code>be notify_received_request(\n  id: (I128 val | String val | None val),\n  method: String val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_1","title":"Parameters","text":"<ul> <li>id: (I128 val | String val | None val)</li> <li>method: String val</li> </ul>"},{"location":"eohippus-server-Server/#notify_received_notification","title":"notify_received_notification","text":"<p>[Source]</p> <pre><code>be notify_received_notification(\n  method: String val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_2","title":"Parameters","text":"<ul> <li>method: String val</li> </ul>"},{"location":"eohippus-server-Server/#notify_sent_error","title":"notify_sent_error","text":"<p>[Source]</p> <pre><code>be notify_sent_error(\n  id: (I128 val | String val | None val),\n  code: I128 val,\n  message: String val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_3","title":"Parameters","text":"<ul> <li>id: (I128 val | String val | None val)</li> <li>code: I128 val</li> <li>message: String val</li> </ul>"},{"location":"eohippus-server-Server/#notify_disconnected","title":"notify_disconnected","text":"<p>[Source]</p> <pre><code>be notify_disconnected()\n</code></pre>"},{"location":"eohippus-server-Server/#notify_shutting_down","title":"notify_shutting_down","text":"<p>[Source]</p> <pre><code>be notify_shutting_down()\n</code></pre>"},{"location":"eohippus-server-Server/#notify_exiting","title":"notify_exiting","text":"<p>[Source]</p> <pre><code>be notify_exiting(\n  code: I32 val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_4","title":"Parameters","text":"<ul> <li>code: I32 val</li> </ul>"},{"location":"eohippus-server-Server/#request_initialize","title":"request_initialize","text":"<p>[Source]</p> <pre><code>be request_initialize(\n  message: RequestMessage val,\n  params: InitializeParams val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_5","title":"Parameters","text":"<ul> <li>message: RequestMessage val</li> <li>params: InitializeParams val</li> </ul>"},{"location":"eohippus-server-Server/#notification_initialized","title":"notification_initialized","text":"<p>[Source]</p> <pre><code>be notification_initialized()\n</code></pre>"},{"location":"eohippus-server-Server/#notification_set_trace","title":"notification_set_trace","text":"<p>[Source]</p> <pre><code>be notification_set_trace(\n  params: SetTraceParams val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_6","title":"Parameters","text":"<ul> <li>params: SetTraceParams val</li> </ul>"},{"location":"eohippus-server-Server/#notification_did_open_text_document","title":"notification_did_open_text_document","text":"<p>[Source]</p> <pre><code>be notification_did_open_text_document(\n  params: DidOpenTextDocumentParams val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_7","title":"Parameters","text":"<ul> <li>params: DidOpenTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-Server/#notification_did_change_text_document","title":"notification_did_change_text_document","text":"<p>[Source]</p> <pre><code>be notification_did_change_text_document(\n  params: DidChangeTextDocumentParams val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_8","title":"Parameters","text":"<ul> <li>params: DidChangeTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-Server/#notification_did_close_text_document","title":"notification_did_close_text_document","text":"<p>[Source]</p> <pre><code>be notification_did_close_text_document(\n  params: DidCloseTextDocumentParams val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_9","title":"Parameters","text":"<ul> <li>params: DidCloseTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-Server/#request_definition","title":"request_definition","text":"<p>[Source]</p> <pre><code>be request_definition(\n  request_id: String val,\n  params: DefinitionParams val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_10","title":"Parameters","text":"<ul> <li>request_id: String val</li> <li>params: DefinitionParams val</li> </ul>"},{"location":"eohippus-server-Server/#request_shutdown","title":"request_shutdown","text":"<p>[Source]</p> <pre><code>be request_shutdown(\n  message: RequestMessage val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_11","title":"Parameters","text":"<ul> <li>message: RequestMessage val</li> </ul>"},{"location":"eohippus-server-Server/#notification_exit","title":"notification_exit","text":"<p>[Source]</p> <pre><code>be notification_exit()\n</code></pre>"},{"location":"eohippus-server-Server/#set_client_data","title":"set_client_data","text":"<p>[Source]</p> <pre><code>be set_client_data(\n  capabilities: ClientCapabilities val,\n  workspaceFolders: (Array[WorkspaceFolder val] val | None val),\n  rootUri: (String val | None val),\n  rootPath: (String val | None val))\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_12","title":"Parameters","text":"<ul> <li>capabilities: ClientCapabilities val</li> <li>workspaceFolders: (Array[WorkspaceFolder val] val | None val)</li> <li>rootUri: (String val | None val)</li> <li>rootPath: (String val | None val)</li> </ul>"},{"location":"eohippus-server-Server/#open_workspace","title":"open_workspace","text":"<p>[Source]</p> <pre><code>be open_workspace(\n  name: String val,\n  client_uri: String val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_13","title":"Parameters","text":"<ul> <li>name: String val</li> <li>client_uri: String val</li> </ul>"},{"location":"eohippus-server-Server/#parsed_file","title":"parsed_file","text":"<p>[Source]</p> <pre><code>be parsed_file(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_name: String val,\n  syntax_tree: Node val,\n  line_beginnings: ReadSeq[Loc[U8 val] val] val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_14","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_name: String val</li> <li>syntax_tree: Node val</li> <li>line_beginnings: ReadSeq[Loc[U8 val] val] val</li> </ul>"},{"location":"eohippus-server-Server/#analyzed_workspace","title":"analyzed_workspace","text":"<p>[Source]</p> <pre><code>be analyzed_workspace(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  workspace_errors: ReadSeq[AnalyzerError val] val,\n  parse_errors: ReadSeq[AnalyzerError val] val,\n  lint_errors: ReadSeq[AnalyzerError val] val,\n  analyze_errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_15","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>workspace_errors: ReadSeq[AnalyzerError val] val</li> <li>parse_errors: ReadSeq[AnalyzerError val] val</li> <li>lint_errors: ReadSeq[AnalyzerError val] val</li> <li>analyze_errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-server-Server/#analyzed_file","title":"analyzed_file","text":"<p>[Source]</p> <pre><code>be analyzed_file(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_path: String val,\n  syntax_tree: (Node val | None val),\n  file_scope: (Scope val | None val),\n  parse_errors: ReadSeq[AnalyzerError val] val,\n  lint_errors: ReadSeq[AnalyzerError val] val,\n  analyze_errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_16","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>syntax_tree: (Node val | None val)</li> <li>file_scope: (Scope val | None val)</li> <li>parse_errors: ReadSeq[AnalyzerError val] val</li> <li>lint_errors: ReadSeq[AnalyzerError val] val</li> <li>analyze_errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-server-Server/#analyze_failed","title":"analyze_failed","text":"<p>[Source]</p> <pre><code>be analyze_failed(\n  analyze: Analyzer tag,\n  task_id: USize val,\n  canonical_path: String val,\n  errors: ReadSeq[AnalyzerError val] val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_17","title":"Parameters","text":"<ul> <li>analyze: Analyzer tag</li> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>errors: ReadSeq[AnalyzerError val] val</li> </ul>"},{"location":"eohippus-server-Server/#definition_found","title":"definition_found","text":"<p>[Source]</p> <pre><code>be definition_found(\n  task_id: USize val,\n  canonical_path: String val,\n  range: (USize val , USize val , USize val , \n    USize val))\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_18","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>canonical_path: String val</li> <li>range: (USize val , USize val , USize val ,      USize val)</li> </ul>"},{"location":"eohippus-server-Server/#definition_failed","title":"definition_failed","text":"<p>[Source]</p> <pre><code>be definition_failed(\n  task_id: USize val,\n  message: String val)\n</code></pre>"},{"location":"eohippus-server-Server/#parameters_19","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>message: String val</li> </ul>"},{"location":"eohippus-server-ServerConfig/","title":"ServerConfig","text":"<p>[Source] <pre><code>class val ServerConfig\n</code></pre></p>"},{"location":"eohippus-server-ServerConfig/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ServerConfig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  ponyc_executable': (String val | None val))\n: ServerConfig ref^\n</code></pre>"},{"location":"eohippus-server-ServerConfig/#parameters","title":"Parameters","text":"<ul> <li>ponyc_executable': (String val | None val)</li> </ul>"},{"location":"eohippus-server-ServerConfig/#returns","title":"Returns","text":"<ul> <li>ServerConfig ref^</li> </ul>"},{"location":"eohippus-server-ServerConfig/#public-fields","title":"Public fields","text":""},{"location":"eohippus-server-ServerConfig/#let-ponyc_executable-string-val-none-val","title":"let ponyc_executable: (String val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-server-ServerExiting/","title":"ServerExiting","text":"<p>[Source] <pre><code>primitive val ServerExiting\n</code></pre></p>"},{"location":"eohippus-server-ServerExiting/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ServerExiting/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ServerExiting val^\n</code></pre>"},{"location":"eohippus-server-ServerExiting/#returns","title":"Returns","text":"<ul> <li>ServerExiting val^</li> </ul>"},{"location":"eohippus-server-ServerExiting/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ServerExiting/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ServerExiting val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerExiting/#parameters","title":"Parameters","text":"<ul> <li>that: ServerExiting val</li> </ul>"},{"location":"eohippus-server-ServerExiting/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerExiting/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ServerExiting val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerExiting/#parameters_1","title":"Parameters","text":"<ul> <li>that: ServerExiting val</li> </ul>"},{"location":"eohippus-server-ServerExiting/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerInitialized/","title":"ServerInitialized","text":"<p>[Source] <pre><code>primitive val ServerInitialized\n</code></pre></p>"},{"location":"eohippus-server-ServerInitialized/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ServerInitialized/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ServerInitialized val^\n</code></pre>"},{"location":"eohippus-server-ServerInitialized/#returns","title":"Returns","text":"<ul> <li>ServerInitialized val^</li> </ul>"},{"location":"eohippus-server-ServerInitialized/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ServerInitialized/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ServerInitialized val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerInitialized/#parameters","title":"Parameters","text":"<ul> <li>that: ServerInitialized val</li> </ul>"},{"location":"eohippus-server-ServerInitialized/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerInitialized/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ServerInitialized val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerInitialized/#parameters_1","title":"Parameters","text":"<ul> <li>that: ServerInitialized val</li> </ul>"},{"location":"eohippus-server-ServerInitialized/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerInitializing/","title":"ServerInitializing","text":"<p>[Source] <pre><code>primitive val ServerInitializing\n</code></pre></p>"},{"location":"eohippus-server-ServerInitializing/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ServerInitializing/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ServerInitializing val^\n</code></pre>"},{"location":"eohippus-server-ServerInitializing/#returns","title":"Returns","text":"<ul> <li>ServerInitializing val^</li> </ul>"},{"location":"eohippus-server-ServerInitializing/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ServerInitializing/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ServerInitializing val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerInitializing/#parameters","title":"Parameters","text":"<ul> <li>that: ServerInitializing val</li> </ul>"},{"location":"eohippus-server-ServerInitializing/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerInitializing/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ServerInitializing val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerInitializing/#parameters_1","title":"Parameters","text":"<ul> <li>that: ServerInitializing val</li> </ul>"},{"location":"eohippus-server-ServerInitializing/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerNotConnected/","title":"ServerNotConnected","text":"<p>[Source] <pre><code>primitive val ServerNotConnected\n</code></pre></p>"},{"location":"eohippus-server-ServerNotConnected/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ServerNotConnected/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ServerNotConnected val^\n</code></pre>"},{"location":"eohippus-server-ServerNotConnected/#returns","title":"Returns","text":"<ul> <li>ServerNotConnected val^</li> </ul>"},{"location":"eohippus-server-ServerNotConnected/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ServerNotConnected/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ServerNotConnected val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerNotConnected/#parameters","title":"Parameters","text":"<ul> <li>that: ServerNotConnected val</li> </ul>"},{"location":"eohippus-server-ServerNotConnected/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerNotConnected/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ServerNotConnected val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerNotConnected/#parameters_1","title":"Parameters","text":"<ul> <li>that: ServerNotConnected val</li> </ul>"},{"location":"eohippus-server-ServerNotConnected/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerNotInitialized/","title":"ServerNotInitialized","text":"<p>[Source] <pre><code>primitive val ServerNotInitialized\n</code></pre></p>"},{"location":"eohippus-server-ServerNotInitialized/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ServerNotInitialized/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ServerNotInitialized val^\n</code></pre>"},{"location":"eohippus-server-ServerNotInitialized/#returns","title":"Returns","text":"<ul> <li>ServerNotInitialized val^</li> </ul>"},{"location":"eohippus-server-ServerNotInitialized/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ServerNotInitialized/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ServerNotInitialized val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerNotInitialized/#parameters","title":"Parameters","text":"<ul> <li>that: ServerNotInitialized val</li> </ul>"},{"location":"eohippus-server-ServerNotInitialized/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerNotInitialized/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ServerNotInitialized val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerNotInitialized/#parameters_1","title":"Parameters","text":"<ul> <li>that: ServerNotInitialized val</li> </ul>"},{"location":"eohippus-server-ServerNotInitialized/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerNotify/","title":"ServerNotify","text":"<p>[Source] <pre><code>interface ref ServerNotify\n</code></pre></p>"},{"location":"eohippus-server-ServerNotify/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ServerNotify/#listening","title":"listening","text":"<p>[Source]</p> <pre><code>fun ref listening(\n  server: Server tag)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters","title":"Parameters","text":"<ul> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#connected","title":"connected","text":"<p>[Source]</p> <pre><code>fun ref connected(\n  server: Server tag)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_1","title":"Parameters","text":"<ul> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#errored","title":"errored","text":"<p>[Source]</p> <pre><code>fun ref errored(\n  server: Server tag)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_2","title":"Parameters","text":"<ul> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#initializing","title":"initializing","text":"<p>[Source]</p> <pre><code>fun ref initializing(\n  server: Server tag)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_3","title":"Parameters","text":"<ul> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#initialized","title":"initialized","text":"<p>[Source]</p> <pre><code>fun ref initialized(\n  server: Server tag)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_4","title":"Parameters","text":"<ul> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#received_request","title":"received_request","text":"<p>[Source]</p> <pre><code>fun ref received_request(\n  server: Server tag,\n  id: (I128 val | String val | None val),\n  method: String val)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_5","title":"Parameters","text":"<ul> <li>server: Server tag</li> <li>id: (I128 val | String val | None val)</li> <li>method: String val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#received_notification","title":"received_notification","text":"<p>[Source]</p> <pre><code>fun ref received_notification(\n  server: Server tag,\n  method: String val)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_6","title":"Parameters","text":"<ul> <li>server: Server tag</li> <li>method: String val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#sent_error","title":"sent_error","text":"<p>[Source]</p> <pre><code>fun ref sent_error(\n  server: Server tag,\n  id: (I128 val | String val | None val),\n  code: I128 val,\n  message: String val)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_7","title":"Parameters","text":"<ul> <li>server: Server tag</li> <li>id: (I128 val | String val | None val)</li> <li>code: I128 val</li> <li>message: String val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#disconnected","title":"disconnected","text":"<p>[Source]</p> <pre><code>fun ref disconnected(\n  server: Server tag)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_8","title":"Parameters","text":"<ul> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#shutting_down","title":"shutting_down","text":"<p>[Source]</p> <pre><code>fun ref shutting_down(\n  server: Server tag)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_9","title":"Parameters","text":"<ul> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#exiting","title":"exiting","text":"<p>[Source]</p> <pre><code>fun ref exiting(\n  code: I32 val)\n: None val\n</code></pre>"},{"location":"eohippus-server-ServerNotify/#parameters_10","title":"Parameters","text":"<ul> <li>code: I32 val</li> </ul>"},{"location":"eohippus-server-ServerNotify/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-ServerShuttingDown/","title":"ServerShuttingDown","text":"<p>[Source] <pre><code>primitive val ServerShuttingDown\n</code></pre></p>"},{"location":"eohippus-server-ServerShuttingDown/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ServerShuttingDown/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ServerShuttingDown val^\n</code></pre>"},{"location":"eohippus-server-ServerShuttingDown/#returns","title":"Returns","text":"<ul> <li>ServerShuttingDown val^</li> </ul>"},{"location":"eohippus-server-ServerShuttingDown/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ServerShuttingDown/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ServerShuttingDown val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerShuttingDown/#parameters","title":"Parameters","text":"<ul> <li>that: ServerShuttingDown val</li> </ul>"},{"location":"eohippus-server-ServerShuttingDown/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerShuttingDown/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ServerShuttingDown val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerShuttingDown/#parameters_1","title":"Parameters","text":"<ul> <li>that: ServerShuttingDown val</li> </ul>"},{"location":"eohippus-server-ServerShuttingDown/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerState/","title":"ServerState","text":"<p>[Source] <pre><code>type ServerState is\n  (ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | ServerInitialized val | ServerShuttingDown val | ServerExiting val)\n</code></pre></p>"},{"location":"eohippus-server-ServerState/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | ServerInitialized val | ServerShuttingDown val | ServerExiting val)</li> </ul>"},{"location":"eohippus-server-ServerUtils/","title":"ServerUtils","text":"<p>[Source] <pre><code>primitive val ServerUtils\n</code></pre></p>"},{"location":"eohippus-server-ServerUtils/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-ServerUtils/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ServerUtils val^\n</code></pre>"},{"location":"eohippus-server-ServerUtils/#returns","title":"Returns","text":"<ul> <li>ServerUtils val^</li> </ul>"},{"location":"eohippus-server-ServerUtils/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-ServerUtils/#get_pony_path","title":"get_pony_path","text":"<p>[Source]</p> <pre><code>fun box get_pony_path(\n  env: Env val)\n: ReadSeq[FilePath val] val\n</code></pre>"},{"location":"eohippus-server-ServerUtils/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"eohippus-server-ServerUtils/#returns_1","title":"Returns","text":"<ul> <li>ReadSeq[FilePath val] val</li> </ul>"},{"location":"eohippus-server-ServerUtils/#find_ponyc","title":"find_ponyc","text":"<p>[Source]</p> <pre><code>fun box find_ponyc(\n  env: Env val)\n: (FilePath val | None val)\n</code></pre>"},{"location":"eohippus-server-ServerUtils/#parameters_1","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"eohippus-server-ServerUtils/#returns_2","title":"Returns","text":"<ul> <li>(FilePath val | None val)</li> </ul>"},{"location":"eohippus-server-ServerUtils/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ServerUtils val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerUtils/#parameters_2","title":"Parameters","text":"<ul> <li>that: ServerUtils val</li> </ul>"},{"location":"eohippus-server-ServerUtils/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-ServerUtils/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ServerUtils val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-ServerUtils/#parameters_3","title":"Parameters","text":"<ul> <li>that: ServerUtils val</li> </ul>"},{"location":"eohippus-server-ServerUtils/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-SrcFileInfo/","title":"SrcFileInfo","text":"<p>[Source] <pre><code>class ref SrcFileInfo\n</code></pre></p>"},{"location":"eohippus-server-SrcFileInfo/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-SrcFileInfo/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  auth: FileAuth val,\n  server: Server tag,\n  client_uri': String val)\n: SrcFileInfo ref^\n</code></pre>"},{"location":"eohippus-server-SrcFileInfo/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>auth: FileAuth val</li> <li>server: Server tag</li> <li>client_uri': String val</li> </ul>"},{"location":"eohippus-server-SrcFileInfo/#returns","title":"Returns","text":"<ul> <li>SrcFileInfo ref^</li> </ul>"},{"location":"eohippus-server-SrcFileInfo/#public-fields","title":"Public fields","text":""},{"location":"eohippus-server-SrcFileInfo/#let-client_uri-string-val","title":"let client_uri: String val","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFileInfo/#let-canonical_path-filepath-val","title":"let canonical_path: FilePath val","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFileInfo/#var-client_version-i128-val","title":"var client_version: I128 val","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFileInfo/#var-analyze_task_id-usize-val","title":"var analyze_task_id: USize val","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFileInfo/#var-segments-arraystring-val-ref","title":"var segments: Array[String val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFileInfo/#var-parse-parseru8-val-data-val-node-val-tag-none-val","title":"var parse: (Parser[U8 val, Data val, Node val] tag | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFileInfo/#var-syntax_tree-node-val-none-val","title":"var syntax_tree: (Node val | None val)","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFileInfo/#let-line_beginnings-arrayusize-val-usize-val-ref","title":"let line_beginnings: Array[(USize val , USize val)] ref","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFileInfo/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-SrcFileInfo/#did_open","title":"did_open","text":"<p>[Source]</p> <pre><code>fun ref did_open(\n  task_id: USize val,\n  version: I128 val,\n  text: String val)\n: Parser[U8 val, Data val, Node val] tag\n</code></pre>"},{"location":"eohippus-server-SrcFileInfo/#parameters_1","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>version: I128 val</li> <li>text: String val</li> </ul>"},{"location":"eohippus-server-SrcFileInfo/#returns_1","title":"Returns","text":"<ul> <li>Parser[U8 val, Data val, Node val] tag</li> </ul>"},{"location":"eohippus-server-SrcFileInfo/#did_change","title":"did_change","text":"<p>[Source]</p> <pre><code>fun ref did_change(\n  task_id: USize val,\n  document: VersionedTextDocumentIdentifier val,\n  changes: Array[TextDocumentContentChangeEvent val] val)\n: None val\n</code></pre>"},{"location":"eohippus-server-SrcFileInfo/#parameters_2","title":"Parameters","text":"<ul> <li>task_id: USize val</li> <li>document: VersionedTextDocumentIdentifier val</li> <li>changes: Array[TextDocumentContentChangeEvent val] val</li> </ul>"},{"location":"eohippus-server-SrcFileInfo/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-SrcFileInfo/#set_line_beginnings","title":"set_line_beginnings","text":"<p>[Source]</p> <pre><code>fun ref set_line_beginnings(\n  line_begin_locs: ReadSeq[Loc[U8 val] val] box)\n: None val\n</code></pre>"},{"location":"eohippus-server-SrcFileInfo/#parameters_3","title":"Parameters","text":"<ul> <li>line_begin_locs: ReadSeq[Loc[U8 val] val] box</li> </ul>"},{"location":"eohippus-server-SrcFileInfo/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-SrcFiles/","title":"SrcFiles","text":"<p>[Source] <pre><code>class ref SrcFiles\n</code></pre></p>"},{"location":"eohippus-server-SrcFiles/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-SrcFiles/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: SrcFiles iso^\n</code></pre>"},{"location":"eohippus-server-SrcFiles/#returns","title":"Returns","text":"<ul> <li>SrcFiles iso^</li> </ul>"},{"location":"eohippus-server-SrcFiles/#public-fields","title":"Public fields","text":""},{"location":"eohippus-server-SrcFiles/#let-by_client_uri-hashmapstring-val-srcfileinfo-ref-hasheqstring-val-val-ref","title":"let by_client_uri: HashMap[String val, SrcFileInfo ref, HashEq[String val] val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-server-SrcFiles/#let-by_canonical_path-hashmapstring-val-srcfileinfo-ref-hasheqstring-val-val-ref","title":"let by_canonical_path: HashMap[String val, SrcFileInfo ref, HashEq[String val] val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-server-WorkspaceInfo/","title":"WorkspaceInfo","text":"<p>[Source] <pre><code>class ref WorkspaceInfo\n</code></pre></p>"},{"location":"eohippus-server-WorkspaceInfo/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-WorkspaceInfo/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  name': String val,\n  client_uri': String val,\n  canonical_path': String val,\n  server': Server tag,\n  analyze': Analyzer tag)\n: WorkspaceInfo ref^\n</code></pre>"},{"location":"eohippus-server-WorkspaceInfo/#parameters","title":"Parameters","text":"<ul> <li>name': String val</li> <li>client_uri': String val</li> <li>canonical_path': String val</li> <li>server': Server tag</li> <li>analyze': Analyzer tag</li> </ul>"},{"location":"eohippus-server-WorkspaceInfo/#returns","title":"Returns","text":"<ul> <li>WorkspaceInfo ref^</li> </ul>"},{"location":"eohippus-server-WorkspaceInfo/#public-fields","title":"Public fields","text":""},{"location":"eohippus-server-WorkspaceInfo/#let-name-string-val","title":"let name: String val","text":"<p>[Source]</p>"},{"location":"eohippus-server-WorkspaceInfo/#let-client_uri-string-val","title":"let client_uri: String val","text":"<p>[Source]</p>"},{"location":"eohippus-server-WorkspaceInfo/#let-canonical_path-string-val","title":"let canonical_path: String val","text":"<p>[Source]</p>"},{"location":"eohippus-server-WorkspaceInfo/#let-server-server-tag","title":"let server: Server tag","text":"<p>[Source]</p>"},{"location":"eohippus-server-WorkspaceInfo/#let-analyze-analyzer-tag","title":"let analyze: Analyzer tag","text":"<p>[Source]</p>"},{"location":"eohippus-server-WorkspaceInfo/#let-errors-hashmapstring-val-arrayanalyzererror-val-ref-hasheqstring-val-val-ref","title":"let errors: HashMap[String val, Array[AnalyzerError val] ref, HashEq[String val] val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-server-Workspaces/","title":"Workspaces","text":"<p>[Source] <pre><code>class ref Workspaces\n</code></pre></p>"},{"location":"eohippus-server-Workspaces/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-Workspaces/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  server: Server tag,\n  grammar: NamedRule[U8 val, Data val, Node val] val)\n: Workspaces ref^\n</code></pre>"},{"location":"eohippus-server-Workspaces/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>server: Server tag</li> <li>grammar: NamedRule[U8 val, Data val, Node val] val</li> </ul>"},{"location":"eohippus-server-Workspaces/#returns","title":"Returns","text":"<ul> <li>Workspaces ref^</li> </ul>"},{"location":"eohippus-server-Workspaces/#public-fields","title":"Public fields","text":""},{"location":"eohippus-server-Workspaces/#let-by_client_uri-hashmapstring-val-workspaceinfo-ref-hasheqstring-val-val-ref","title":"let by_client_uri: HashMap[String val, WorkspaceInfo ref, HashEq[String val] val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-server-Workspaces/#let-by_canonical_path-hashmapstring-val-workspaceinfo-ref-hasheqstring-val-val-ref","title":"let by_canonical_path: HashMap[String val, WorkspaceInfo ref, HashEq[String val] val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-server-Workspaces/#let-by_analyzer-hashmapanalyzer-tag-workspaceinfo-ref-hashisanalyzer-tag-val-ref","title":"let by_analyzer: HashMap[Analyzer tag, WorkspaceInfo ref, HashIs[Analyzer tag] val] ref","text":"<p>[Source]</p>"},{"location":"eohippus-server-Workspaces/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-Workspaces/#get_workspace","title":"get_workspace","text":"<p>[Source]</p> <pre><code>fun ref get_workspace(\n  auth: FileAuth val,\n  config: ServerConfig val,\n  canonical_path: String val)\n: WorkspaceInfo ref\n</code></pre>"},{"location":"eohippus-server-Workspaces/#parameters_1","title":"Parameters","text":"<ul> <li>auth: FileAuth val</li> <li>config: ServerConfig val</li> <li>canonical_path: String val</li> </ul>"},{"location":"eohippus-server-Workspaces/#returns_1","title":"Returns","text":"<ul> <li>WorkspaceInfo ref</li> </ul>"},{"location":"eohippus-server-handlers--index/","title":"Package","text":"<p>No package doc string provided for eohippus/server/handlers.</p>"},{"location":"eohippus-server-handlers--index/#public-types","title":"Public Types","text":"<ul> <li>class Initialize</li> <li>class Shutdown</li> </ul>"},{"location":"eohippus-server-handlers-Initialize/","title":"Initialize","text":"<p>[Source] <pre><code>class ref Initialize\n</code></pre></p>"},{"location":"eohippus-server-handlers-Initialize/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-handlers-Initialize/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  server: Server tag)\n: Initialize ref^\n</code></pre>"},{"location":"eohippus-server-handlers-Initialize/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-handlers-Initialize/#returns","title":"Returns","text":"<ul> <li>Initialize ref^</li> </ul>"},{"location":"eohippus-server-handlers-Initialize/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-handlers-Initialize/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  server_state: (ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | \n    ServerInitialized val | ServerShuttingDown val | ServerExiting val),\n  rpc_handler: Handler tag,\n  message: RequestMessage val,\n  params: InitializeParams val)\n: ((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | \n    ServerInitialized val | ServerShuttingDown val | ServerExiting val | \n    None val) , (I32 val | None val))\n</code></pre>"},{"location":"eohippus-server-handlers-Initialize/#parameters_1","title":"Parameters","text":"<ul> <li>server_state: (ServerNotConnected val | ServerNotInitialized val | ServerInitializing val |      ServerInitialized val | ServerShuttingDown val | ServerExiting val)</li> <li>rpc_handler: Handler tag</li> <li>message: RequestMessage val</li> <li>params: InitializeParams val</li> </ul>"},{"location":"eohippus-server-handlers-Initialize/#returns_1","title":"Returns","text":"<ul> <li>((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val |      ServerInitialized val | ServerShuttingDown val | ServerExiting val |      None val) , (I32 val | None val))</li> </ul>"},{"location":"eohippus-server-handlers-Shutdown/","title":"Shutdown","text":"<p>[Source] <pre><code>class ref Shutdown\n</code></pre></p>"},{"location":"eohippus-server-handlers-Shutdown/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-handlers-Shutdown/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  server: Server tag)\n: Shutdown ref^\n</code></pre>"},{"location":"eohippus-server-handlers-Shutdown/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>server: Server tag</li> </ul>"},{"location":"eohippus-server-handlers-Shutdown/#returns","title":"Returns","text":"<ul> <li>Shutdown ref^</li> </ul>"},{"location":"eohippus-server-handlers-Shutdown/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-handlers-Shutdown/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  server_state: (ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | \n    ServerInitialized val | ServerShuttingDown val | ServerExiting val),\n  rpc_handler: Handler tag,\n  message: RequestMessage val)\n: ((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | \n    ServerInitialized val | ServerShuttingDown val | ServerExiting val | \n    None val) , (I32 val | None val))\n</code></pre>"},{"location":"eohippus-server-handlers-Shutdown/#parameters_1","title":"Parameters","text":"<ul> <li>server_state: (ServerNotConnected val | ServerNotInitialized val | ServerInitializing val |      ServerInitialized val | ServerShuttingDown val | ServerExiting val)</li> <li>rpc_handler: Handler tag</li> <li>message: RequestMessage val</li> </ul>"},{"location":"eohippus-server-handlers-Shutdown/#returns_1","title":"Returns","text":"<ul> <li>((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val |      ServerInitialized val | ServerShuttingDown val | ServerExiting val |      None val) , (I32 val | None val))</li> </ul>"},{"location":"eohippus-server-handlers-text_document--index/","title":"Package","text":"<p>No package doc string provided for eohippus/server/handlers/text_document.</p>"},{"location":"eohippus-server-handlers-text_document--index/#public-types","title":"Public Types","text":"<ul> <li>class Definition</li> <li>class DidChange</li> <li>class DidClose</li> <li>class DidOpen</li> </ul>"},{"location":"eohippus-server-handlers-text_document-Definition/","title":"Definition","text":"<p>[Source] <pre><code>class ref Definition\n</code></pre></p>"},{"location":"eohippus-server-handlers-text_document-Definition/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-handlers-text_document-Definition/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  config: ServerConfig val)\n: Definition ref^\n</code></pre>"},{"location":"eohippus-server-handlers-text_document-Definition/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>config: ServerConfig val</li> </ul>"},{"location":"eohippus-server-handlers-text_document-Definition/#returns","title":"Returns","text":"<ul> <li>Definition ref^</li> </ul>"},{"location":"eohippus-server-handlers-text_document-Definition/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-handlers-text_document-Definition/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  auth: FileAuth val,\n  workspaces: Workspaces ref,\n  task_id: USize val,\n  params: DefinitionParams val,\n  canonical_path: String val)\n: ((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | \n    ServerInitialized val | ServerShuttingDown val | ServerExiting val | \n    None val) , (I32 val | None val))\n</code></pre>"},{"location":"eohippus-server-handlers-text_document-Definition/#parameters_1","title":"Parameters","text":"<ul> <li>auth: FileAuth val</li> <li>workspaces: Workspaces ref</li> <li>task_id: USize val</li> <li>params: DefinitionParams val</li> <li>canonical_path: String val</li> </ul>"},{"location":"eohippus-server-handlers-text_document-Definition/#returns_1","title":"Returns","text":"<ul> <li>((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val |      ServerInitialized val | ServerShuttingDown val | ServerExiting val |      None val) , (I32 val | None val))</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidChange/","title":"DidChange","text":"<p>[Source] <pre><code>class ref DidChange\n</code></pre></p>"},{"location":"eohippus-server-handlers-text_document-DidChange/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-handlers-text_document-DidChange/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  config: ServerConfig val)\n: DidChange ref^\n</code></pre>"},{"location":"eohippus-server-handlers-text_document-DidChange/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>config: ServerConfig val</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidChange/#returns","title":"Returns","text":"<ul> <li>DidChange ref^</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidChange/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-handlers-text_document-DidChange/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  auth: FileAuth val,\n  workspaces: Workspaces ref,\n  src_files: SrcFiles ref,\n  task_id: USize val,\n  params: DidChangeTextDocumentParams val)\n: ((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | \n    ServerInitialized val | ServerShuttingDown val | ServerExiting val | \n    None val) , (I32 val | None val))\n</code></pre>"},{"location":"eohippus-server-handlers-text_document-DidChange/#parameters_1","title":"Parameters","text":"<ul> <li>auth: FileAuth val</li> <li>workspaces: Workspaces ref</li> <li>src_files: SrcFiles ref</li> <li>task_id: USize val</li> <li>params: DidChangeTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidChange/#returns_1","title":"Returns","text":"<ul> <li>((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val |      ServerInitialized val | ServerShuttingDown val | ServerExiting val |      None val) , (I32 val | None val))</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidClose/","title":"DidClose","text":"<p>[Source] <pre><code>class ref DidClose\n</code></pre></p>"},{"location":"eohippus-server-handlers-text_document-DidClose/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-handlers-text_document-DidClose/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  config: ServerConfig val)\n: DidClose ref^\n</code></pre>"},{"location":"eohippus-server-handlers-text_document-DidClose/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>config: ServerConfig val</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidClose/#returns","title":"Returns","text":"<ul> <li>DidClose ref^</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidClose/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-handlers-text_document-DidClose/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  auth: FileAuth val,\n  workspaces: Workspaces ref,\n  src_files: SrcFiles ref,\n  task_id: USize val,\n  params: DidCloseTextDocumentParams val)\n: ((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | \n    ServerInitialized val | ServerShuttingDown val | ServerExiting val | \n    None val) , (I32 val | None val))\n</code></pre>"},{"location":"eohippus-server-handlers-text_document-DidClose/#parameters_1","title":"Parameters","text":"<ul> <li>auth: FileAuth val</li> <li>workspaces: Workspaces ref</li> <li>src_files: SrcFiles ref</li> <li>task_id: USize val</li> <li>params: DidCloseTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidClose/#returns_1","title":"Returns","text":"<ul> <li>((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val |      ServerInitialized val | ServerShuttingDown val | ServerExiting val |      None val) , (I32 val | None val))</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidOpen/","title":"DidOpen","text":"<p>[Source] <pre><code>class ref DidOpen\n</code></pre></p>"},{"location":"eohippus-server-handlers-text_document-DidOpen/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-handlers-text_document-DidOpen/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  server: Server tag,\n  config: ServerConfig val)\n: DidOpen ref^\n</code></pre>"},{"location":"eohippus-server-handlers-text_document-DidOpen/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>server: Server tag</li> <li>config: ServerConfig val</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidOpen/#returns","title":"Returns","text":"<ul> <li>DidOpen ref^</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidOpen/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-handlers-text_document-DidOpen/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  auth: FileAuth val,\n  workspaces: Workspaces ref,\n  src_files: SrcFiles ref,\n  task_id: USize val,\n  params: DidOpenTextDocumentParams val)\n: ((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val | \n    ServerInitialized val | ServerShuttingDown val | ServerExiting val | \n    None val) , (I32 val | None val))\n</code></pre>"},{"location":"eohippus-server-handlers-text_document-DidOpen/#parameters_1","title":"Parameters","text":"<ul> <li>auth: FileAuth val</li> <li>workspaces: Workspaces ref</li> <li>src_files: SrcFiles ref</li> <li>task_id: USize val</li> <li>params: DidOpenTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-handlers-text_document-DidOpen/#returns_1","title":"Returns","text":"<ul> <li>((ServerNotConnected val | ServerNotInitialized val | ServerInitializing val |      ServerInitialized val | ServerShuttingDown val | ServerExiting val |      None val) , (I32 val | None val))</li> </ul>"},{"location":"eohippus-server-rpc-data--index/","title":"Package","text":"<p>No package doc string provided for eohippus/server/rpc/data.</p>"},{"location":"eohippus-server-rpc-data--index/#public-types","title":"Public Types","text":"<ul> <li>interface ClientInfo</li> <li>interface CodeDescription</li> <li>interface DefinitionParams</li> <li>interface Diagnostic</li> <li>primitive DiagnosticError</li> <li>primitive DiagnosticHint</li> <li>primitive DiagnosticInformation</li> <li>interface DiagnosticRelatedInformation</li> <li>type DiagnosticSeverity</li> <li>type DiagnosticTag</li> <li>primitive DiagnosticTagDeprecated</li> <li>primitive DiagnosticTagUnnecessary</li> <li>primitive DiagnosticWarning</li> <li>interface DidChangeTextDocumentParams</li> <li>interface DidCloseTextDocumentParams</li> <li>interface DidOpenTextDocumentParams</li> <li>interface DocumentFilter</li> <li>type DocumentSelector</li> <li>type DocumentUri</li> <li>primitive FailureHandlingAbort</li> <li>type FailureHandlingKind</li> <li>primitive FailureHandlingTextOnlyTransactional</li> <li>primitive FailureHandlingTransactional</li> <li>primitive FailureHandlingUndo</li> <li>trait InitializeParams</li> <li>interface InitializeResult</li> <li>interface Location</li> <li>interface Message</li> <li>interface Notification</li> <li>interface NotificationParams</li> <li>primitive ParseClientInfo</li> <li>primitive ParseDefinitionParams</li> <li>primitive ParseDidChangeTextDocumentParams</li> <li>primitive ParseDidCloseTextDocumentParams</li> <li>primitive ParseDidOpenTextDocumentParams</li> <li>primitive ParseFailureHandlingKind</li> <li>primitive ParseInitializeParams</li> <li>primitive ParsePosition</li> <li>primitive ParsePositionEncodingKind</li> <li>primitive ParseRange</li> <li>primitive ParseResourceOperationKind</li> <li>primitive ParseSetTraceParams</li> <li>primitive ParseTextDocumentContentChangeEvent</li> <li>primitive ParseTextDocumentIdentifier</li> <li>primitive ParseTextDocumentItem</li> <li>primitive ParseTraceValue</li> <li>primitive ParseVersionedTextDocumentIdentifier</li> <li>primitive ParseWorkspaceFolder</li> <li>interface PartialResultParams</li> <li>interface Position</li> <li>type PositionEncodingKind</li> <li>primitive PositionEncodingKindJson</li> <li>primitive PositionEncodingUtf16</li> <li>primitive PositionEncodingUtf32</li> <li>primitive PositionEncodingUtf8</li> <li>type ProgressToken</li> <li>interface PublishDiagnosticsParams</li> <li>interface Range</li> <li>interface RequestMessage</li> <li>interface RequestParams</li> <li>primitive ResourceOperationCreate</li> <li>primitive ResourceOperationDelete</li> <li>type ResourceOperationKind</li> <li>primitive ResourceOperationRename</li> <li>interface ResponseError</li> <li>interface ResponseMessage</li> <li>interface ResultData</li> <li>interface SendData</li> <li>interface ServerInfo</li> <li>interface SetTraceParams</li> <li>interface StaticRegistrationOptions</li> <li>interface TextDocumentContentChangeEvent</li> <li>interface TextDocumentIdentifier</li> <li>interface TextDocumentItem</li> <li>interface TextDocumentPositionParams</li> <li>primitive TraceMessages</li> <li>primitive TraceOff</li> <li>type TraceValue</li> <li>primitive TraceVerbose</li> <li>type Uri</li> <li>interface VersionedTextDocumentIdentifier</li> <li>interface WorkDoneProgressParams</li> <li>type WorkDoneToken</li> <li>interface WorkspaceFolder</li> </ul>"},{"location":"eohippus-server-rpc-data-..--index/","title":"Package","text":"<p>No package doc string provided for eohippus/server/rpc/data/...</p>"},{"location":"eohippus-server-rpc-data-..--index/#public-types","title":"Public Types","text":"<ul> <li>interface Channel</li> <li>actor DummyHandler</li> <li>actor EohippusHandler</li> <li>primitive ErrorCode</li> <li>interface Handler</li> <li>primitive JsonRpc</li> <li>class StreamChannel</li> <li>class TcpChannel</li> <li>class TcpChannelConnectionNotify</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Channel/","title":"Channel","text":"<p>[Source] <pre><code>interface ref Channel\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-Channel/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-Channel/#write","title":"write","text":"<p>[Source]</p> <pre><code>fun ref write(\n  data: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Channel/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Channel/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Channel/#flush","title":"flush","text":"<p>[Source]</p> <pre><code>fun ref flush()\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Channel/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Channel/#close","title":"close","text":"<p>[Source]</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Channel/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/","title":"DummyHandler","text":"<p>[Source] <pre><code>actor tag DummyHandler is\n  Handler tag\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#implements","title":"Implements","text":"<ul> <li>Handler tag</li> </ul>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-DummyHandler/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  log: Logger[String val] val)\n: DummyHandler tag^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#returns","title":"Returns","text":"<ul> <li>DummyHandler tag^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-server-rpc-data-..-DummyHandler/#close","title":"close","text":"<p>[Source]</p> <pre><code>be close()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#listening","title":"listening","text":"<p>[Source]</p> <pre><code>be listening()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#connected","title":"connected","text":"<p>[Source]</p> <pre><code>be connected()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#connect_failed","title":"connect_failed","text":"<p>[Source]</p> <pre><code>be connect_failed()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#data_received","title":"data_received","text":"<p>[Source]</p> <pre><code>be data_received(\n  data: Array[U8 val] iso)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#parameters_1","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#notify","title":"notify","text":"<p>[Source]</p> <pre><code>be notify(\n  method: String val,\n  params: NotificationParams val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#parameters_2","title":"Parameters","text":"<ul> <li>method: String val</li> <li>params: NotificationParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#respond","title":"respond","text":"<p>[Source]</p> <pre><code>be respond(\n  msg: ResponseMessage val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#parameters_3","title":"Parameters","text":"<ul> <li>msg: ResponseMessage val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#respond_error","title":"respond_error","text":"<p>[Source]</p> <pre><code>be respond_error(\n  msg_id: (I128 val | String val | None val),\n  code: I128 val,\n  message: String val,\n  data: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val | None val) = reference)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#parameters_4","title":"Parameters","text":"<ul> <li>msg_id: (I128 val | String val | None val)</li> <li>code: I128 val</li> <li>message: String val</li> <li>data: (Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val | None val) = reference</li> </ul>"},{"location":"eohippus-server-rpc-data-..-DummyHandler/#closed","title":"closed","text":"<p>[Source]</p> <pre><code>be closed()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/","title":"EohippusHandler","text":"<p>[Source] <pre><code>actor tag EohippusHandler is\n  Handler tag\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#implements","title":"Implements","text":"<ul> <li>Handler tag</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#from_streams","title":"from_streams","text":"<p>[Source]</p> <pre><code>new tag from_streams(\n  log: Logger[String val] val,\n  server: Server tag,\n  input: InputStream tag,\n  output: OutStream tag)\n: EohippusHandler tag^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>server: Server tag</li> <li>input: InputStream tag</li> <li>output: OutStream tag</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#returns","title":"Returns","text":"<ul> <li>EohippusHandler tag^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#from_tcp","title":"from_tcp","text":"<p>[Source]</p> <pre><code>new tag from_tcp(\n  log: Logger[String val] val,\n  server: Server tag,\n  auth: TCPConnectAuth val,\n  host: String val,\n  service: String val)\n: EohippusHandler tag^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#parameters_1","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>server: Server tag</li> <li>auth: TCPConnectAuth val</li> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#returns_1","title":"Returns","text":"<ul> <li>EohippusHandler tag^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#close","title":"close","text":"<p>[Source]</p> <pre><code>be close()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#listening","title":"listening","text":"<p>[Source]</p> <pre><code>be listening()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#connected","title":"connected","text":"<p>[Source]</p> <pre><code>be connected()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#connect_failed","title":"connect_failed","text":"<p>[Source]</p> <pre><code>be connect_failed()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#data_received","title":"data_received","text":"<p>[Source]</p> <pre><code>be data_received(\n  buf: Array[U8 val] iso)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#parameters_2","title":"Parameters","text":"<ul> <li>buf: Array[U8 val] iso</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#notify","title":"notify","text":"<p>[Source]</p> <pre><code>be notify(\n  method: String val,\n  params: NotificationParams val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#parameters_3","title":"Parameters","text":"<ul> <li>method: String val</li> <li>params: NotificationParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#respond","title":"respond","text":"<p>[Source]</p> <pre><code>be respond(\n  msg: ResponseMessage val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#parameters_4","title":"Parameters","text":"<ul> <li>msg: ResponseMessage val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#respond_error","title":"respond_error","text":"<p>[Source]</p> <pre><code>be respond_error(\n  msg_id: (I128 val | String val | None val),\n  code: I128 val,\n  message: String val,\n  data: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val | None val) = reference)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#parameters_5","title":"Parameters","text":"<ul> <li>msg_id: (I128 val | String val | None val)</li> <li>code: I128 val</li> <li>message: String val</li> <li>data: (Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val | None val) = reference</li> </ul>"},{"location":"eohippus-server-rpc-data-..-EohippusHandler/#closed","title":"closed","text":"<p>[Source]</p> <pre><code>be closed()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/","title":"ErrorCode","text":"<p>[Source] <pre><code>primitive val ErrorCode\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-ErrorCode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ErrorCode val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns","title":"Returns","text":"<ul> <li>ErrorCode val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-ErrorCode/#parse_error","title":"parse_error","text":"<p>[Source]</p> <pre><code>fun box parse_error()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_1","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#invalid_request","title":"invalid_request","text":"<p>[Source]</p> <pre><code>fun box invalid_request()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_2","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#method_not_found","title":"method_not_found","text":"<p>[Source]</p> <pre><code>fun box method_not_found()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_3","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#invalid_params","title":"invalid_params","text":"<p>[Source]</p> <pre><code>fun box invalid_params()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_4","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#internal_error","title":"internal_error","text":"<p>[Source]</p> <pre><code>fun box internal_error()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_5","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#server_not_initialized","title":"server_not_initialized","text":"<p>[Source]</p> <pre><code>fun box server_not_initialized()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_6","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#unknown_error_code","title":"unknown_error_code","text":"<p>[Source]</p> <pre><code>fun box unknown_error_code()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_7","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#request_failed","title":"request_failed","text":"<p>[Source]</p> <pre><code>fun box request_failed()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_8","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#server_cancelled","title":"server_cancelled","text":"<p>[Source]</p> <pre><code>fun box server_cancelled()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_9","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#content_modified","title":"content_modified","text":"<p>[Source]</p> <pre><code>fun box content_modified()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_10","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#request_cancelled","title":"request_cancelled","text":"<p>[Source]</p> <pre><code>fun box request_cancelled()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_11","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ErrorCode val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#parameters","title":"Parameters","text":"<ul> <li>that: ErrorCode val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ErrorCode val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#parameters_1","title":"Parameters","text":"<ul> <li>that: ErrorCode val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-ErrorCode/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Handler/","title":"Handler","text":"<p>[Source] <pre><code>interface tag Handler\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-Handler/#public-behaviours","title":"Public Behaviours","text":""},{"location":"eohippus-server-rpc-data-..-Handler/#close","title":"close","text":"<p>[Source]</p> <pre><code>be close()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Handler/#listening","title":"listening","text":"<p>[Source]</p> <pre><code>be listening()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Handler/#connected","title":"connected","text":"<p>[Source]</p> <pre><code>be connected()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Handler/#connect_failed","title":"connect_failed","text":"<p>[Source]</p> <pre><code>be connect_failed()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Handler/#data_received","title":"data_received","text":"<p>[Source]</p> <pre><code>be data_received(\n  data: Array[U8 val] iso)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Handler/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Handler/#notify","title":"notify","text":"<p>[Source]</p> <pre><code>be notify(\n  method: String val,\n  params: NotificationParams val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Handler/#parameters_1","title":"Parameters","text":"<ul> <li>method: String val</li> <li>params: NotificationParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Handler/#respond","title":"respond","text":"<p>[Source]</p> <pre><code>be respond(\n  msg: ResponseMessage val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Handler/#parameters_2","title":"Parameters","text":"<ul> <li>msg: ResponseMessage val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Handler/#respond_error","title":"respond_error","text":"<p>[Source]</p> <pre><code>be respond_error(\n  msg_id: (I128 val | String val | None val),\n  code: I128 val,\n  message: String val,\n  data: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val | None val) = reference)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-Handler/#parameters_3","title":"Parameters","text":"<ul> <li>msg_id: (I128 val | String val | None val)</li> <li>code: I128 val</li> <li>message: String val</li> <li>data: (Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val | None val) = reference</li> </ul>"},{"location":"eohippus-server-rpc-data-..-Handler/#closed","title":"closed","text":"<p>[Source]</p> <pre><code>be closed()\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/","title":"JsonRpc","text":"<p>[Source] <pre><code>primitive val JsonRpc\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-JsonRpc/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: JsonRpc val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#returns","title":"Returns","text":"<ul> <li>JsonRpc val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-JsonRpc/#version","title":"version","text":"<p>[Source]</p> <pre><code>fun box version()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#mime_type","title":"mime_type","text":"<p>[Source]</p> <pre><code>fun box mime_type()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#charset","title":"charset","text":"<p>[Source]</p> <pre><code>fun box charset()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: JsonRpc val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#parameters","title":"Parameters","text":"<ul> <li>that: JsonRpc val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: JsonRpc val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#parameters_1","title":"Parameters","text":"<ul> <li>that: JsonRpc val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-JsonRpc/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/","title":"StreamChannel","text":"<p>[Source] <pre><code>class ref StreamChannel is\n  Channel ref\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#implements","title":"Implements","text":"<ul> <li>Channel ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-StreamChannel/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  input: InputStream tag,\n  output: OutStream tag,\n  rpc_handler: Handler tag)\n: StreamChannel ref^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>input: InputStream tag</li> <li>output: OutStream tag</li> <li>rpc_handler: Handler tag</li> </ul>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#returns","title":"Returns","text":"<ul> <li>StreamChannel ref^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-StreamChannel/#write","title":"write","text":"<p>[Source]</p> <pre><code>fun ref write(\n  data: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#flush","title":"flush","text":"<p>[Source]</p> <pre><code>fun ref flush()\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#close","title":"close","text":"<p>[Source]</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-StreamChannel/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/","title":"TcpChannel","text":"<p>[Source] <pre><code>class ref TcpChannel is\n  Channel ref\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#implements","title":"Implements","text":"<ul> <li>Channel ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-TcpChannel/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  auth: TCPConnectAuth val,\n  host: String val,\n  service: String val,\n  rpc_handler: Handler tag)\n: TcpChannel ref^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>auth: TCPConnectAuth val</li> <li>host: String val</li> <li>service: String val</li> <li>rpc_handler: Handler tag</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#returns","title":"Returns","text":"<ul> <li>TcpChannel ref^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-TcpChannel/#write","title":"write","text":"<p>[Source]</p> <pre><code>fun ref write(\n  data: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#flush","title":"flush","text":"<p>[Source]</p> <pre><code>fun ref flush()\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#close","title":"close","text":"<p>[Source]</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannel/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/","title":"TcpChannelConnectionNotify","text":"<p>[Source] <pre><code>class ref TcpChannelConnectionNotify is\n  TCPConnectionNotify ref\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#implements","title":"Implements","text":"<ul> <li>TCPConnectionNotify ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  log: Logger[String val] val,\n  rpc_handler: Handler tag)\n: TcpChannelConnectionNotify ref^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters","title":"Parameters","text":"<ul> <li>log: Logger[String val] val</li> <li>rpc_handler: Handler tag</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns","title":"Returns","text":"<ul> <li>TcpChannelConnectionNotify ref^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#connecting","title":"connecting","text":"<p>[Source]</p> <pre><code>fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_1","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>count: U32 val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#connected","title":"connected","text":"<p>[Source]</p> <pre><code>fun ref connected(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_2","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#connect_failed","title":"connect_failed","text":"<p>[Source]</p> <pre><code>fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_3","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#auth_failed","title":"auth_failed","text":"<p>[Source]</p> <pre><code>fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_4","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#received","title":"received","text":"<p>[Source]</p> <pre><code>fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_5","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: Array[U8 val] iso</li> <li>times: USize val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#closed","title":"closed","text":"<p>[Source]</p> <pre><code>fun ref closed(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_6","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#accepted","title":"accepted","text":"<pre><code>fun ref accepted(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_7","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#proxy_via","title":"proxy_via","text":"<pre><code>fun ref proxy_via(\n  host: String val,\n  service: String val)\n: (String val , String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_8","title":"Parameters","text":"<ul> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_8","title":"Returns","text":"<ul> <li>(String val , String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#sent","title":"sent","text":"<pre><code>fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_9","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_9","title":"Returns","text":"<ul> <li>(String val | Array[U8 val] val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#sentv","title":"sentv","text":"<pre><code>fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_10","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: ByteSeqIter val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_10","title":"Returns","text":"<ul> <li>ByteSeqIter val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#expect","title":"expect","text":"<pre><code>fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_11","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>qty: USize val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#throttled","title":"throttled","text":"<pre><code>fun ref throttled(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_12","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#unthrottled","title":"unthrottled","text":"<pre><code>fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#parameters_13","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"eohippus-server-rpc-data-..-TcpChannelConnectionNotify/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities--index/","title":"Package","text":"<p>No package doc string provided for eohippus/server/rpc/data/../data/client_capabilities.</p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities--index/#public-types","title":"Public Types","text":"<ul> <li>interface ChangeAnnotationSupportClientCapability</li> <li>interface ClientCapabilities</li> <li>interface DefinitionClientCapabilities</li> <li>interface GeneralClientCapabilities</li> <li>interface MarkdownClientCapabilities</li> <li>primitive ParseChangeAnnotationSupportClientCapability</li> <li>primitive ParseClientCapabilities</li> <li>primitive ParseDefinitionClientCapabilities</li> <li>primitive ParseGeneralClientCapabilities</li> <li>primitive ParseMarkdownClientCapabilities</li> <li>primitive ParsePublishDiagnosticsClientCapabilities</li> <li>primitive ParseRegularExpressionsClientCapabilities</li> <li>primitive ParseStaleRequestSupport</li> <li>primitive ParseTagSupport</li> <li>primitive ParseTextDocumentClientCapabilities</li> <li>primitive ParseWorkspaceClientCapabilities</li> <li>primitive ParseWorkspaceEditClientCapabilities</li> <li>interface PublishDiagnosticsClientCapabilities</li> <li>interface RegularExpressionsClientCapabilities</li> <li>interface StaleRequestSupport</li> <li>interface TagSupport</li> <li>interface TextDocumentClientCapabilities</li> <li>interface WorkspaceClientCapabilities</li> <li>interface WorkspaceEditClientCapabilities</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ChangeAnnotationSupportClientCapability/","title":"ChangeAnnotationSupportClientCapability","text":"<p>[Source] <pre><code>interface val ChangeAnnotationSupportClientCapability\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ChangeAnnotationSupportClientCapability/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ChangeAnnotationSupportClientCapability/#groupsonlabel","title":"groupsOnLabel","text":"<p>[Source]</p> <pre><code>fun val groupsOnLabel()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ChangeAnnotationSupportClientCapability/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/","title":"ClientCapabilities","text":"<p>[Source] <pre><code>interface val ClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#workspace","title":"workspace","text":"<p>[Source]</p> <pre><code>fun val workspace()\n: (WorkspaceClientCapabilities val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#returns","title":"Returns","text":"<ul> <li>(WorkspaceClientCapabilities val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#textdocument","title":"textDocument","text":"<p>[Source]</p> <pre><code>fun val textDocument()\n: (TextDocumentClientCapabilities val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(TextDocumentClientCapabilities val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#general","title":"general","text":"<p>[Source]</p> <pre><code>fun val general()\n: (GeneralClientCapabilities val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>(GeneralClientCapabilities val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#experimental","title":"experimental","text":"<p>[Source]</p> <pre><code>fun val experimental()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-DefinitionClientCapabilities/","title":"DefinitionClientCapabilities","text":"<p>[Source] <pre><code>interface val DefinitionClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-DefinitionClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-DefinitionClientCapabilities/#dynamicregistration","title":"dynamicRegistration","text":"<p>[Source]</p> <pre><code>fun val dynamicRegistration()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-DefinitionClientCapabilities/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-DefinitionClientCapabilities/#linksupport","title":"linkSupport","text":"<p>[Source]</p> <pre><code>fun val linkSupport()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-DefinitionClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/","title":"GeneralClientCapabilities","text":"<p>[Source] <pre><code>interface val GeneralClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#stalerequestsupport","title":"staleRequestSupport","text":"<p>[Source]</p> <pre><code>fun val staleRequestSupport()\n: (StaleRequestSupport val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#returns","title":"Returns","text":"<ul> <li>(StaleRequestSupport val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#regularexpressions","title":"regularExpressions","text":"<p>[Source]</p> <pre><code>fun val regularExpressions()\n: (RegularExpressionsClientCapabilities val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(RegularExpressionsClientCapabilities val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#markdown","title":"markdown","text":"<p>[Source]</p> <pre><code>fun val markdown()\n: (MarkdownClientCapabilities val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>(MarkdownClientCapabilities val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#positionencodings","title":"positionEncodings","text":"<p>[Source]</p> <pre><code>fun val positionEncodings()\n: (Array[(PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val)] val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-GeneralClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>(Array[(PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val)] val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-MarkdownClientCapabilities/","title":"MarkdownClientCapabilities","text":"<p>[Source] <pre><code>interface val MarkdownClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-MarkdownClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-MarkdownClientCapabilities/#parser","title":"parser","text":"<p>[Source]</p> <pre><code>fun val parser()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-MarkdownClientCapabilities/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-MarkdownClientCapabilities/#version","title":"version","text":"<p>[Source]</p> <pre><code>fun val version()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-MarkdownClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-MarkdownClientCapabilities/#allowedtags","title":"allowedTags","text":"<p>[Source]</p> <pre><code>fun val allowedTags()\n: (Array[String val] val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-MarkdownClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>(Array[String val] val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/","title":"ParseChangeAnnotationSupportClientCapability","text":"<p>[Source] <pre><code>primitive val ParseChangeAnnotationSupportClientCapability\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseChangeAnnotationSupportClientCapability val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#returns","title":"Returns","text":"<ul> <li>ParseChangeAnnotationSupportClientCapability val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box)\n: (ChangeAnnotationSupportClientCapability val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#returns_1","title":"Returns","text":"<ul> <li>(ChangeAnnotationSupportClientCapability val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseChangeAnnotationSupportClientCapability val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseChangeAnnotationSupportClientCapability val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseChangeAnnotationSupportClientCapability val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseChangeAnnotationSupportClientCapability val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseChangeAnnotationSupportClientCapability/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/","title":"ParseClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParseClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParseClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (ClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(ClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/","title":"ParseDefinitionClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParseDefinitionClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseDefinitionClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParseDefinitionClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (DefinitionClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(DefinitionClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseDefinitionClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseDefinitionClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseDefinitionClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseDefinitionClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseDefinitionClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/","title":"ParseGeneralClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParseGeneralClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseGeneralClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParseGeneralClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (GeneralClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(GeneralClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseGeneralClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseGeneralClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseGeneralClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseGeneralClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseGeneralClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/","title":"ParseMarkdownClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParseMarkdownClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseMarkdownClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParseMarkdownClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (MarkdownClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(MarkdownClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseMarkdownClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseMarkdownClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseMarkdownClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseMarkdownClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseMarkdownClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/","title":"ParsePublishDiagnosticsClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParsePublishDiagnosticsClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParsePublishDiagnosticsClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParsePublishDiagnosticsClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (PublishDiagnosticsClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(PublishDiagnosticsClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParsePublishDiagnosticsClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParsePublishDiagnosticsClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParsePublishDiagnosticsClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParsePublishDiagnosticsClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParsePublishDiagnosticsClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/","title":"ParseRegularExpressionsClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParseRegularExpressionsClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseRegularExpressionsClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParseRegularExpressionsClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (RegularExpressionsClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(RegularExpressionsClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseRegularExpressionsClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseRegularExpressionsClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseRegularExpressionsClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseRegularExpressionsClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseRegularExpressionsClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/","title":"ParseStaleRequestSupport","text":"<p>[Source] <pre><code>primitive val ParseStaleRequestSupport\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseStaleRequestSupport val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#returns","title":"Returns","text":"<ul> <li>ParseStaleRequestSupport val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box)\n: (StaleRequestSupport val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#returns_1","title":"Returns","text":"<ul> <li>(StaleRequestSupport val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseStaleRequestSupport val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseStaleRequestSupport val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseStaleRequestSupport val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseStaleRequestSupport val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseStaleRequestSupport/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/","title":"ParseTagSupport","text":"<p>[Source] <pre><code>primitive val ParseTagSupport\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTagSupport val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#returns","title":"Returns","text":"<ul> <li>ParseTagSupport val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (TagSupport val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#returns_1","title":"Returns","text":"<ul> <li>(TagSupport val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTagSupport val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTagSupport val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTagSupport val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTagSupport val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTagSupport/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/","title":"ParseTextDocumentClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParseTextDocumentClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTextDocumentClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParseTextDocumentClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (TextDocumentClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(TextDocumentClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTextDocumentClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTextDocumentClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTextDocumentClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTextDocumentClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseTextDocumentClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/","title":"ParseWorkspaceClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParseWorkspaceClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseWorkspaceClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParseWorkspaceClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box)\n: (WorkspaceClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(WorkspaceClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseWorkspaceClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseWorkspaceClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseWorkspaceClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseWorkspaceClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/","title":"ParseWorkspaceEditClientCapabilities","text":"<p>[Source] <pre><code>primitive val ParseWorkspaceEditClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseWorkspaceEditClientCapabilities val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#returns","title":"Returns","text":"<ul> <li>ParseWorkspaceEditClientCapabilities val^</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object box)\n: (WorkspaceEditClientCapabilities val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#parameters","title":"Parameters","text":"<ul> <li>obj: Object box</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(WorkspaceEditClientCapabilities val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseWorkspaceEditClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseWorkspaceEditClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseWorkspaceEditClientCapabilities val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseWorkspaceEditClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-ParseWorkspaceEditClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/","title":"PublishDiagnosticsClientCapabilities","text":"<p>[Source] <pre><code>interface val PublishDiagnosticsClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#relatedinformation","title":"relatedInformation","text":"<p>[Source]</p> <pre><code>fun val relatedInformation()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#tagsupport","title":"tagSupport","text":"<p>[Source]</p> <pre><code>fun val tagSupport()\n: (TagSupport val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(TagSupport val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#versionsupport","title":"versionSupport","text":"<p>[Source]</p> <pre><code>fun val versionSupport()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#returns_2","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#codedescriptionsupport","title":"codeDescriptionSupport","text":"<p>[Source]</p> <pre><code>fun val codeDescriptionSupport()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#returns_3","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#datasupport","title":"dataSupport","text":"<p>[Source]</p> <pre><code>fun val dataSupport()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-PublishDiagnosticsClientCapabilities/#returns_4","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-RegularExpressionsClientCapabilities/","title":"RegularExpressionsClientCapabilities","text":"<p>[Source] <pre><code>interface val RegularExpressionsClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-RegularExpressionsClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-RegularExpressionsClientCapabilities/#engine","title":"engine","text":"<p>[Source]</p> <pre><code>fun val engine()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-RegularExpressionsClientCapabilities/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-RegularExpressionsClientCapabilities/#version","title":"version","text":"<p>[Source]</p> <pre><code>fun val version()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-RegularExpressionsClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-StaleRequestSupport/","title":"StaleRequestSupport","text":"<p>[Source] <pre><code>interface val StaleRequestSupport\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-StaleRequestSupport/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-StaleRequestSupport/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>fun val cancel()\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-StaleRequestSupport/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-StaleRequestSupport/#retryoncontentmodified","title":"retryOnContentModified","text":"<p>[Source]</p> <pre><code>fun val retryOnContentModified()\n: Array[String val] val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-StaleRequestSupport/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TagSupport/","title":"TagSupport","text":"<p>[Source] <pre><code>interface val TagSupport\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TagSupport/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TagSupport/#valueset","title":"valueSet","text":"<p>[Source]</p> <pre><code>fun val valueSet()\n: Array[(DiagnosticTagUnnecessary val | DiagnosticTagDeprecated val)] val\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TagSupport/#returns","title":"Returns","text":"<ul> <li>Array[(DiagnosticTagUnnecessary val | DiagnosticTagDeprecated val)] val</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TextDocumentClientCapabilities/","title":"TextDocumentClientCapabilities","text":"<p>[Source] <pre><code>interface val TextDocumentClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TextDocumentClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TextDocumentClientCapabilities/#definition","title":"definition","text":"<p>[Source]</p> <pre><code>fun val definition()\n: (DefinitionClientCapabilities val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TextDocumentClientCapabilities/#returns","title":"Returns","text":"<ul> <li>(DefinitionClientCapabilities val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TextDocumentClientCapabilities/#publishdiagnostics","title":"publishDiagnostics","text":"<p>[Source]</p> <pre><code>fun val publishDiagnostics()\n: (PublishDiagnosticsClientCapabilities val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-TextDocumentClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(PublishDiagnosticsClientCapabilities val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceClientCapabilities/","title":"WorkspaceClientCapabilities","text":"<p>[Source] <pre><code>interface val WorkspaceClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceClientCapabilities/#applyedit","title":"applyEdit","text":"<p>[Source]</p> <pre><code>fun val applyEdit()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceClientCapabilities/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceClientCapabilities/#workspaceedit","title":"workspaceEdit","text":"<p>[Source]</p> <pre><code>fun val workspaceEdit()\n: (WorkspaceEditClientCapabilities val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(WorkspaceEditClientCapabilities val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceEditClientCapabilities/","title":"WorkspaceEditClientCapabilities","text":"<p>[Source] <pre><code>interface val WorkspaceEditClientCapabilities\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceEditClientCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceEditClientCapabilities/#documentchanges","title":"documentChanges","text":"<p>[Source]</p> <pre><code>fun val documentChanges()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceEditClientCapabilities/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceEditClientCapabilities/#resourceoperations","title":"resourceOperations","text":"<p>[Source]</p> <pre><code>fun val resourceOperations()\n: (Array[(ResourceOperationCreate val | ResourceOperationRename val | ResourceOperationDelete val)] val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-..-data-client_capabilities-WorkspaceEditClientCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(Array[(ResourceOperationCreate val | ResourceOperationRename val | ResourceOperationDelete val)] val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ClientInfo/","title":"ClientInfo","text":"<p>[Source] <pre><code>interface val ClientInfo\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ClientInfo/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ClientInfo/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun val name()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ClientInfo/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-ClientInfo/#version","title":"version","text":"<p>[Source]</p> <pre><code>fun val version()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ClientInfo/#returns_1","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-CodeDescription/","title":"CodeDescription","text":"<p>[Source] <pre><code>interface val CodeDescription\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-CodeDescription/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-CodeDescription/#href","title":"href","text":"<p>[Source]</p> <pre><code>fun val href()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-CodeDescription/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-CodeDescription/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-CodeDescription/#returns_1","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DefinitionParams/","title":"DefinitionParams","text":"<p>[Source] <pre><code>interface val DefinitionParams is\n  TextDocumentPositionParams val,\n  WorkDoneProgressParams val,\n  PartialResultParams val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#implements","title":"Implements","text":"<ul> <li>TextDocumentPositionParams val</li> <li>WorkDoneProgressParams val</li> <li>PartialResultParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DefinitionParams/#textdocument","title":"textDocument","text":"<pre><code>fun val textDocument()\n: TextDocumentIdentifier val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#returns","title":"Returns","text":"<ul> <li>TextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#position","title":"position","text":"<pre><code>fun val position()\n: Position val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#returns_1","title":"Returns","text":"<ul> <li>Position val</li> </ul>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#workdonetoken","title":"workDoneToken","text":"<pre><code>fun val workDoneToken()\n: (I128 val | String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#returns_2","title":"Returns","text":"<ul> <li>(I128 val | String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#partialresulttoken","title":"partialResultToken","text":"<pre><code>fun val partialResultToken()\n: (I128 val | String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-DefinitionParams/#returns_3","title":"Returns","text":"<ul> <li>(I128 val | String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/","title":"Diagnostic","text":"<p>[Source] <pre><code>interface val Diagnostic\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-Diagnostic/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-Diagnostic/#range","title":"range","text":"<p>[Source]</p> <pre><code>fun val range()\n: Range val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns","title":"Returns","text":"<ul> <li>Range val</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#severity","title":"severity","text":"<p>[Source]</p> <pre><code>fun val severity()\n: (DiagnosticError val | DiagnosticWarning val | DiagnosticInformation val | \n    DiagnosticHint val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_1","title":"Returns","text":"<ul> <li>(DiagnosticError val | DiagnosticWarning val | DiagnosticInformation val |      DiagnosticHint val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#code","title":"code","text":"<p>[Source]</p> <pre><code>fun val code()\n: (I128 val | String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_2","title":"Returns","text":"<ul> <li>(I128 val | String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#codedescription","title":"codeDescription","text":"<p>[Source]</p> <pre><code>fun val codeDescription()\n: (CodeDescription val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_3","title":"Returns","text":"<ul> <li>(CodeDescription val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#source","title":"source","text":"<p>[Source]</p> <pre><code>fun val source()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_4","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#message","title":"message","text":"<p>[Source]</p> <pre><code>fun val message()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#tags","title":"tags","text":"<p>[Source]</p> <pre><code>fun val tags()\n: (Array[(DiagnosticTagUnnecessary val | DiagnosticTagDeprecated val)] val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_6","title":"Returns","text":"<ul> <li>(Array[(DiagnosticTagUnnecessary val | DiagnosticTagDeprecated val)] val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#relatedinformation","title":"relatedInformation","text":"<p>[Source]</p> <pre><code>fun val relatedInformation()\n: (Array[DiagnosticRelatedInformation val] val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_7","title":"Returns","text":"<ul> <li>(Array[DiagnosticRelatedInformation val] val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#data","title":"data","text":"<p>[Source]</p> <pre><code>fun val data()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_8","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Diagnostic/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Diagnostic/#returns_9","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticError/","title":"DiagnosticError","text":"<p>[Source] <pre><code>primitive val DiagnosticError\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-DiagnosticError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DiagnosticError val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#returns","title":"Returns","text":"<ul> <li>DiagnosticError val^</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DiagnosticError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#returns_1","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DiagnosticError val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#parameters","title":"Parameters","text":"<ul> <li>that: DiagnosticError val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DiagnosticError val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#parameters_1","title":"Parameters","text":"<ul> <li>that: DiagnosticError val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/","title":"DiagnosticHint","text":"<p>[Source] <pre><code>primitive val DiagnosticHint\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-DiagnosticHint/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DiagnosticHint val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#returns","title":"Returns","text":"<ul> <li>DiagnosticHint val^</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DiagnosticHint/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#returns_1","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DiagnosticHint val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#parameters","title":"Parameters","text":"<ul> <li>that: DiagnosticHint val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DiagnosticHint val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#parameters_1","title":"Parameters","text":"<ul> <li>that: DiagnosticHint val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticHint/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/","title":"DiagnosticInformation","text":"<p>[Source] <pre><code>primitive val DiagnosticInformation\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DiagnosticInformation val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#returns","title":"Returns","text":"<ul> <li>DiagnosticInformation val^</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#returns_1","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DiagnosticInformation val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#parameters","title":"Parameters","text":"<ul> <li>that: DiagnosticInformation val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DiagnosticInformation val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#parameters_1","title":"Parameters","text":"<ul> <li>that: DiagnosticInformation val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticInformation/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticRelatedInformation/","title":"DiagnosticRelatedInformation","text":"<p>[Source] <pre><code>interface val DiagnosticRelatedInformation\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticRelatedInformation/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DiagnosticRelatedInformation/#location","title":"location","text":"<p>[Source]</p> <pre><code>fun val location()\n: Location val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticRelatedInformation/#returns","title":"Returns","text":"<ul> <li>Location val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticRelatedInformation/#message","title":"message","text":"<p>[Source]</p> <pre><code>fun val message()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticRelatedInformation/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticRelatedInformation/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticRelatedInformation/#returns_2","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticSeverity/","title":"DiagnosticSeverity","text":"<p>[Source] <pre><code>type DiagnosticSeverity is\n  (DiagnosticError val | DiagnosticWarning val | DiagnosticInformation val | DiagnosticHint val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticSeverity/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(DiagnosticError val | DiagnosticWarning val | DiagnosticInformation val | DiagnosticHint val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTag/","title":"DiagnosticTag","text":"<p>[Source] <pre><code>type DiagnosticTag is\n  (DiagnosticTagUnnecessary val | DiagnosticTagDeprecated val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticTag/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(DiagnosticTagUnnecessary val | DiagnosticTagDeprecated val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/","title":"DiagnosticTagDeprecated","text":"<p>[Source] <pre><code>primitive val DiagnosticTagDeprecated\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DiagnosticTagDeprecated val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#returns","title":"Returns","text":"<ul> <li>DiagnosticTagDeprecated val^</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#returns_1","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DiagnosticTagDeprecated val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#parameters","title":"Parameters","text":"<ul> <li>that: DiagnosticTagDeprecated val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DiagnosticTagDeprecated val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#parameters_1","title":"Parameters","text":"<ul> <li>that: DiagnosticTagDeprecated val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagDeprecated/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/","title":"DiagnosticTagUnnecessary","text":"<p>[Source] <pre><code>primitive val DiagnosticTagUnnecessary\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DiagnosticTagUnnecessary val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#returns","title":"Returns","text":"<ul> <li>DiagnosticTagUnnecessary val^</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#returns_1","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DiagnosticTagUnnecessary val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#parameters","title":"Parameters","text":"<ul> <li>that: DiagnosticTagUnnecessary val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DiagnosticTagUnnecessary val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#parameters_1","title":"Parameters","text":"<ul> <li>that: DiagnosticTagUnnecessary val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticTagUnnecessary/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/","title":"DiagnosticWarning","text":"<p>[Source] <pre><code>primitive val DiagnosticWarning\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DiagnosticWarning val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#returns","title":"Returns","text":"<ul> <li>DiagnosticWarning val^</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#returns_1","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DiagnosticWarning val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#parameters","title":"Parameters","text":"<ul> <li>that: DiagnosticWarning val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DiagnosticWarning val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#parameters_1","title":"Parameters","text":"<ul> <li>that: DiagnosticWarning val</li> </ul>"},{"location":"eohippus-server-rpc-data-DiagnosticWarning/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-DidChangeTextDocumentParams/","title":"DidChangeTextDocumentParams","text":"<p>[Source] <pre><code>interface val DidChangeTextDocumentParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DidChangeTextDocumentParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DidChangeTextDocumentParams/#textdocument","title":"textDocument","text":"<p>[Source]</p> <pre><code>fun val textDocument()\n: VersionedTextDocumentIdentifier val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DidChangeTextDocumentParams/#returns","title":"Returns","text":"<ul> <li>VersionedTextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-DidChangeTextDocumentParams/#contentchanges","title":"contentChanges","text":"<p>[Source]</p> <pre><code>fun val contentChanges()\n: Array[TextDocumentContentChangeEvent val] val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DidChangeTextDocumentParams/#returns_1","title":"Returns","text":"<ul> <li>Array[TextDocumentContentChangeEvent val] val</li> </ul>"},{"location":"eohippus-server-rpc-data-DidCloseTextDocumentParams/","title":"DidCloseTextDocumentParams","text":"<p>[Source] <pre><code>interface val DidCloseTextDocumentParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DidCloseTextDocumentParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DidCloseTextDocumentParams/#textdocument","title":"textDocument","text":"<p>[Source]</p> <pre><code>fun val textDocument()\n: TextDocumentIdentifier val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DidCloseTextDocumentParams/#returns","title":"Returns","text":"<ul> <li>TextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-DidOpenTextDocumentParams/","title":"DidOpenTextDocumentParams","text":"<p>[Source] <pre><code>interface val DidOpenTextDocumentParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DidOpenTextDocumentParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DidOpenTextDocumentParams/#textdocument","title":"textDocument","text":"<p>[Source]</p> <pre><code>fun val textDocument()\n: TextDocumentItem val\n</code></pre>"},{"location":"eohippus-server-rpc-data-DidOpenTextDocumentParams/#returns","title":"Returns","text":"<ul> <li>TextDocumentItem val</li> </ul>"},{"location":"eohippus-server-rpc-data-DocumentFilter/","title":"DocumentFilter","text":"<p>[Source] <pre><code>interface val DocumentFilter is\n  SendData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#implements","title":"Implements","text":"<ul> <li>SendData val</li> </ul>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-DocumentFilter/#language","title":"language","text":"<p>[Source]</p> <pre><code>fun val language()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#returns","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#scheme","title":"scheme","text":"<p>[Source]</p> <pre><code>fun val scheme()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#returns_1","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#pattern","title":"pattern","text":"<p>[Source]</p> <pre><code>fun val pattern()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#returns_2","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-DocumentFilter/#returns_3","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-DocumentSelector/","title":"DocumentSelector","text":"<p>[Source] <pre><code>type DocumentSelector is\n  Seq[DocumentFilter val] ref\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DocumentSelector/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Seq[DocumentFilter val] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-DocumentUri/","title":"DocumentUri","text":"<p>[Source] <pre><code>type DocumentUri is\n  String val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-DocumentUri/#type-alias-for","title":"Type Alias For","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/","title":"FailureHandlingAbort","text":"<p>[Source] <pre><code>primitive val FailureHandlingAbort\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FailureHandlingAbort val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#returns","title":"Returns","text":"<ul> <li>FailureHandlingAbort val^</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FailureHandlingAbort val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#parameters","title":"Parameters","text":"<ul> <li>that: FailureHandlingAbort val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FailureHandlingAbort val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#parameters_1","title":"Parameters","text":"<ul> <li>that: FailureHandlingAbort val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingAbort/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingKind/","title":"FailureHandlingKind","text":"<p>[Source] <pre><code>type FailureHandlingKind is\n  (FailureHandlingAbort val | FailureHandlingTransactional val | FailureHandlingTextOnlyTransactional val | FailureHandlingUndo val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-FailureHandlingKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(FailureHandlingAbort val | FailureHandlingTransactional val | FailureHandlingTextOnlyTransactional val | FailureHandlingUndo val)</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/","title":"FailureHandlingTextOnlyTransactional","text":"<p>[Source] <pre><code>primitive val FailureHandlingTextOnlyTransactional\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FailureHandlingTextOnlyTransactional val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#returns","title":"Returns","text":"<ul> <li>FailureHandlingTextOnlyTransactional val^</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FailureHandlingTextOnlyTransactional val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#parameters","title":"Parameters","text":"<ul> <li>that: FailureHandlingTextOnlyTransactional val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FailureHandlingTextOnlyTransactional val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#parameters_1","title":"Parameters","text":"<ul> <li>that: FailureHandlingTextOnlyTransactional val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTextOnlyTransactional/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/","title":"FailureHandlingTransactional","text":"<p>[Source] <pre><code>primitive val FailureHandlingTransactional\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FailureHandlingTransactional val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#returns","title":"Returns","text":"<ul> <li>FailureHandlingTransactional val^</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FailureHandlingTransactional val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#parameters","title":"Parameters","text":"<ul> <li>that: FailureHandlingTransactional val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FailureHandlingTransactional val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#parameters_1","title":"Parameters","text":"<ul> <li>that: FailureHandlingTransactional val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingTransactional/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/","title":"FailureHandlingUndo","text":"<p>[Source] <pre><code>primitive val FailureHandlingUndo\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FailureHandlingUndo val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#returns","title":"Returns","text":"<ul> <li>FailureHandlingUndo val^</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FailureHandlingUndo val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#parameters","title":"Parameters","text":"<ul> <li>that: FailureHandlingUndo val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FailureHandlingUndo val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#parameters_1","title":"Parameters","text":"<ul> <li>that: FailureHandlingUndo val</li> </ul>"},{"location":"eohippus-server-rpc-data-FailureHandlingUndo/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/","title":"InitializeParams","text":"<p>[Source] <pre><code>trait val InitializeParams is\n  WorkDoneProgressParams val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-InitializeParams/#implements","title":"Implements","text":"<ul> <li>WorkDoneProgressParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-InitializeParams/#processid","title":"processId","text":"<p>[Source]</p> <pre><code>fun val processId()\n: (I128 val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns","title":"Returns","text":"<ul> <li>(I128 val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#clientinfo","title":"clientInfo","text":"<p>[Source]</p> <pre><code>fun val clientInfo()\n: (ClientInfo val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_1","title":"Returns","text":"<ul> <li>(ClientInfo val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#locale","title":"locale","text":"<p>[Source]</p> <pre><code>fun val locale()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_2","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#rootpath","title":"rootPath","text":"<p>[Source]</p> <pre><code>fun val rootPath()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_3","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#rooturi","title":"rootUri","text":"<p>[Source]</p> <pre><code>fun val rootUri()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_4","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#initializationoptions","title":"initializationOptions","text":"<p>[Source]</p> <pre><code>fun val initializationOptions()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_5","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#capabilities","title":"capabilities","text":"<p>[Source]</p> <pre><code>fun val capabilities()\n: ClientCapabilities val\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_6","title":"Returns","text":"<ul> <li>ClientCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#trace","title":"trace","text":"<p>[Source]</p> <pre><code>fun val trace()\n: (TraceOff val | TraceMessages val | TraceVerbose val | \n    None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_7","title":"Returns","text":"<ul> <li>(TraceOff val | TraceMessages val | TraceVerbose val |      None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#workspacefolders","title":"workspaceFolders","text":"<p>[Source]</p> <pre><code>fun val workspaceFolders()\n: (Array[WorkspaceFolder val] val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_8","title":"Returns","text":"<ul> <li>(Array[WorkspaceFolder val] val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeParams/#workdonetoken","title":"workDoneToken","text":"<pre><code>fun val workDoneToken()\n: (I128 val | String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeParams/#returns_9","title":"Returns","text":"<ul> <li>(I128 val | String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeResult/","title":"InitializeResult","text":"<p>[Source] <pre><code>interface val InitializeResult is\n  ResultData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-InitializeResult/#implements","title":"Implements","text":"<ul> <li>ResultData val</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeResult/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-InitializeResult/#capabilities","title":"capabilities","text":"<p>[Source]</p> <pre><code>fun val capabilities()\n: ServerCapabilities val\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeResult/#returns","title":"Returns","text":"<ul> <li>ServerCapabilities val</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeResult/#serverinfo","title":"serverInfo","text":"<p>[Source]</p> <pre><code>fun val serverInfo()\n: (ServerInfo val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeResult/#returns_1","title":"Returns","text":"<ul> <li>(ServerInfo val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-InitializeResult/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-InitializeResult/#returns_2","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Location/","title":"Location","text":"<p>[Source] <pre><code>interface val Location\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-Location/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-Location/#uri","title":"uri","text":"<p>[Source]</p> <pre><code>fun val uri()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Location/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-Location/#range","title":"range","text":"<p>[Source]</p> <pre><code>fun val range()\n: Range val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Location/#returns_1","title":"Returns","text":"<ul> <li>Range val</li> </ul>"},{"location":"eohippus-server-rpc-data-Location/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Location/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Message/","title":"Message","text":"<p>[Source] <pre><code>interface val Message\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-Message/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-Message/#jsonrpc","title":"jsonrpc","text":"<p>[Source]</p> <pre><code>fun val jsonrpc()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Message/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-Notification/","title":"Notification","text":"<p>[Source] <pre><code>interface val Notification is\n  Message val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-Notification/#implements","title":"Implements","text":"<ul> <li>Message val</li> </ul>"},{"location":"eohippus-server-rpc-data-Notification/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-Notification/#method","title":"method","text":"<p>[Source]</p> <pre><code>fun val method()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Notification/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-Notification/#params","title":"params","text":"<p>[Source]</p> <pre><code>fun val params()\n: NotificationParams val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Notification/#returns_1","title":"Returns","text":"<ul> <li>NotificationParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-Notification/#jsonrpc","title":"jsonrpc","text":"<p>[Source]</p> <pre><code>fun val jsonrpc()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Notification/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-NotificationParams/","title":"NotificationParams","text":"<p>[Source] <pre><code>interface val NotificationParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-NotificationParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-NotificationParams/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-NotificationParams/#returns","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/","title":"ParseClientInfo","text":"<p>[Source] <pre><code>primitive val ParseClientInfo\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseClientInfo/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseClientInfo val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#returns","title":"Returns","text":"<ul> <li>ParseClientInfo val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseClientInfo/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (ClientInfo val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#returns_1","title":"Returns","text":"<ul> <li>(ClientInfo val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseClientInfo val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseClientInfo val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseClientInfo val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseClientInfo val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseClientInfo/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/","title":"ParseDefinitionParams","text":"<p>[Source] <pre><code>primitive val ParseDefinitionParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseDefinitionParams val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#returns","title":"Returns","text":"<ul> <li>ParseDefinitionParams val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (DefinitionParams val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#returns_1","title":"Returns","text":"<ul> <li>(DefinitionParams val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseDefinitionParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseDefinitionParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseDefinitionParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseDefinitionParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDefinitionParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/","title":"ParseDidChangeTextDocumentParams","text":"<p>[Source] <pre><code>primitive val ParseDidChangeTextDocumentParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseDidChangeTextDocumentParams val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#returns","title":"Returns","text":"<ul> <li>ParseDidChangeTextDocumentParams val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (DidChangeTextDocumentParams val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#returns_1","title":"Returns","text":"<ul> <li>(DidChangeTextDocumentParams val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseDidChangeTextDocumentParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseDidChangeTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseDidChangeTextDocumentParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseDidChangeTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidChangeTextDocumentParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/","title":"ParseDidCloseTextDocumentParams","text":"<p>[Source] <pre><code>primitive val ParseDidCloseTextDocumentParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseDidCloseTextDocumentParams val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#returns","title":"Returns","text":"<ul> <li>ParseDidCloseTextDocumentParams val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (DidCloseTextDocumentParams val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#returns_1","title":"Returns","text":"<ul> <li>(DidCloseTextDocumentParams val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseDidCloseTextDocumentParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseDidCloseTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseDidCloseTextDocumentParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseDidCloseTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidCloseTextDocumentParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/","title":"ParseDidOpenTextDocumentParams","text":"<p>[Source] <pre><code>primitive val ParseDidOpenTextDocumentParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseDidOpenTextDocumentParams val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#returns","title":"Returns","text":"<ul> <li>ParseDidOpenTextDocumentParams val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (DidOpenTextDocumentParams val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#returns_1","title":"Returns","text":"<ul> <li>(DidOpenTextDocumentParams val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseDidOpenTextDocumentParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseDidOpenTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseDidOpenTextDocumentParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseDidOpenTextDocumentParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseDidOpenTextDocumentParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/","title":"ParseFailureHandlingKind","text":"<p>[Source] <pre><code>primitive val ParseFailureHandlingKind\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseFailureHandlingKind val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#returns","title":"Returns","text":"<ul> <li>ParseFailureHandlingKind val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  item: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val))\n: (FailureHandlingAbort val | FailureHandlingTransactional val | FailureHandlingTextOnlyTransactional val | \n    FailureHandlingUndo val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#parameters","title":"Parameters","text":"<ul> <li>item: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#returns_1","title":"Returns","text":"<ul> <li>(FailureHandlingAbort val | FailureHandlingTransactional val | FailureHandlingTextOnlyTransactional val |      FailureHandlingUndo val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseFailureHandlingKind val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseFailureHandlingKind val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseFailureHandlingKind val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseFailureHandlingKind val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseFailureHandlingKind/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/","title":"ParseInitializeParams","text":"<p>[Source] <pre><code>primitive val ParseInitializeParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseInitializeParams val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#returns","title":"Returns","text":"<ul> <li>ParseInitializeParams val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (InitializeParams val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#returns_1","title":"Returns","text":"<ul> <li>(InitializeParams val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseInitializeParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseInitializeParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseInitializeParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseInitializeParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseInitializeParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePosition/","title":"ParsePosition","text":"<p>[Source] <pre><code>primitive val ParsePosition\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParsePosition/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParsePosition/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParsePosition val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParsePosition/#returns","title":"Returns","text":"<ul> <li>ParsePosition val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePosition/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParsePosition/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (Position val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParsePosition/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePosition/#returns_1","title":"Returns","text":"<ul> <li>(Position val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePosition/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParsePosition val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParsePosition/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParsePosition val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePosition/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePosition/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParsePosition val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParsePosition/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParsePosition val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePosition/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/","title":"ParsePositionEncodingKind","text":"<p>[Source] <pre><code>primitive val ParsePositionEncodingKind\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParsePositionEncodingKind val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#returns","title":"Returns","text":"<ul> <li>ParsePositionEncodingKind val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  item: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val))\n: (PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val | \n    String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#parameters","title":"Parameters","text":"<ul> <li>item: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#returns_1","title":"Returns","text":"<ul> <li>(PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val |      String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParsePositionEncodingKind val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParsePositionEncodingKind val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParsePositionEncodingKind val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParsePositionEncodingKind val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParsePositionEncodingKind/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseRange/","title":"ParseRange","text":"<p>[Source] <pre><code>primitive val ParseRange\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseRange/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseRange/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseRange val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseRange/#returns","title":"Returns","text":"<ul> <li>ParseRange val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseRange/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseRange/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (Range val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseRange/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseRange/#returns_1","title":"Returns","text":"<ul> <li>(Range val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseRange/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseRange val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseRange/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseRange val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseRange/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseRange/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseRange val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseRange/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseRange val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseRange/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/","title":"ParseResourceOperationKind","text":"<p>[Source] <pre><code>primitive val ParseResourceOperationKind\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseResourceOperationKind val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#returns","title":"Returns","text":"<ul> <li>ParseResourceOperationKind val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  item: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val))\n: (ResourceOperationCreate val | ResourceOperationRename val | ResourceOperationDelete val | \n    String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#parameters","title":"Parameters","text":"<ul> <li>item: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#returns_1","title":"Returns","text":"<ul> <li>(ResourceOperationCreate val | ResourceOperationRename val | ResourceOperationDelete val |      String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseResourceOperationKind val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseResourceOperationKind val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseResourceOperationKind val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseResourceOperationKind val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseResourceOperationKind/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/","title":"ParseSetTraceParams","text":"<p>[Source] <pre><code>primitive val ParseSetTraceParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseSetTraceParams val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#returns","title":"Returns","text":"<ul> <li>ParseSetTraceParams val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (SetTraceParams val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#returns_1","title":"Returns","text":"<ul> <li>(SetTraceParams val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseSetTraceParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseSetTraceParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseSetTraceParams val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseSetTraceParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseSetTraceParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/","title":"ParseTextDocumentContentChangeEvent","text":"<p>[Source] <pre><code>primitive val ParseTextDocumentContentChangeEvent\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTextDocumentContentChangeEvent val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#returns","title":"Returns","text":"<ul> <li>ParseTextDocumentContentChangeEvent val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (TextDocumentContentChangeEvent val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#returns_1","title":"Returns","text":"<ul> <li>(TextDocumentContentChangeEvent val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTextDocumentContentChangeEvent val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTextDocumentContentChangeEvent val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTextDocumentContentChangeEvent val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTextDocumentContentChangeEvent val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentContentChangeEvent/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/","title":"ParseTextDocumentIdentifier","text":"<p>[Source] <pre><code>primitive val ParseTextDocumentIdentifier\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTextDocumentIdentifier val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#returns","title":"Returns","text":"<ul> <li>ParseTextDocumentIdentifier val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (TextDocumentIdentifier val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#returns_1","title":"Returns","text":"<ul> <li>(TextDocumentIdentifier val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTextDocumentIdentifier val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTextDocumentIdentifier val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentIdentifier/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/","title":"ParseTextDocumentItem","text":"<p>[Source] <pre><code>primitive val ParseTextDocumentItem\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTextDocumentItem val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#returns","title":"Returns","text":"<ul> <li>ParseTextDocumentItem val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (TextDocumentItem val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#returns_1","title":"Returns","text":"<ul> <li>(TextDocumentItem val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTextDocumentItem val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTextDocumentItem val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTextDocumentItem val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTextDocumentItem val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTextDocumentItem/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/","title":"ParseTraceValue","text":"<p>[Source] <pre><code>primitive val ParseTraceValue\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseTraceValue/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseTraceValue val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#returns","title":"Returns","text":"<ul> <li>ParseTraceValue val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseTraceValue/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  item: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val))\n: (TraceOff val | TraceMessages val | TraceVerbose val | \n    String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#parameters","title":"Parameters","text":"<ul> <li>item: (Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#returns_1","title":"Returns","text":"<ul> <li>(TraceOff val | TraceMessages val | TraceVerbose val |      String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseTraceValue val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseTraceValue val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseTraceValue val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseTraceValue val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseTraceValue/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/","title":"ParseVersionedTextDocumentIdentifier","text":"<p>[Source] <pre><code>primitive val ParseVersionedTextDocumentIdentifier\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseVersionedTextDocumentIdentifier val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#returns","title":"Returns","text":"<ul> <li>ParseVersionedTextDocumentIdentifier val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (VersionedTextDocumentIdentifier val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#returns_1","title":"Returns","text":"<ul> <li>(VersionedTextDocumentIdentifier val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseVersionedTextDocumentIdentifier val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseVersionedTextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseVersionedTextDocumentIdentifier val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseVersionedTextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseVersionedTextDocumentIdentifier/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/","title":"ParseWorkspaceFolder","text":"<p>[Source] <pre><code>primitive val ParseWorkspaceFolder\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ParseWorkspaceFolder val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#returns","title":"Returns","text":"<ul> <li>ParseWorkspaceFolder val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  obj: Object val)\n: (WorkspaceFolder val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#parameters","title":"Parameters","text":"<ul> <li>obj: Object val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#returns_1","title":"Returns","text":"<ul> <li>(WorkspaceFolder val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ParseWorkspaceFolder val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#parameters_1","title":"Parameters","text":"<ul> <li>that: ParseWorkspaceFolder val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ParseWorkspaceFolder val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#parameters_2","title":"Parameters","text":"<ul> <li>that: ParseWorkspaceFolder val</li> </ul>"},{"location":"eohippus-server-rpc-data-ParseWorkspaceFolder/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-PartialResultParams/","title":"PartialResultParams","text":"<p>[Source] <pre><code>interface val PartialResultParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-PartialResultParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-PartialResultParams/#partialresulttoken","title":"partialResultToken","text":"<p>[Source]</p> <pre><code>fun val partialResultToken()\n: (I128 val | String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-PartialResultParams/#returns","title":"Returns","text":"<ul> <li>(I128 val | String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Position/","title":"Position","text":"<p>[Source] <pre><code>interface val Position\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-Position/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-Position/#line","title":"line","text":"<p>[Source]</p> <pre><code>fun val line()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Position/#returns","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-Position/#character","title":"character","text":"<p>[Source]</p> <pre><code>fun val character()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Position/#returns_1","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-Position/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Position/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingKind/","title":"PositionEncodingKind","text":"<p>[Source] <pre><code>type PositionEncodingKind is\n  (PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-PositionEncodingKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val)</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/","title":"PositionEncodingKindJson","text":"<p>[Source] <pre><code>primitive val PositionEncodingKindJson\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PositionEncodingKindJson val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#returns","title":"Returns","text":"<ul> <li>PositionEncodingKindJson val^</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  pek: (PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val | \n    None val))\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#parameters","title":"Parameters","text":"<ul> <li>pek: (PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val |      None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#returns_1","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: PositionEncodingKindJson val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#parameters_1","title":"Parameters","text":"<ul> <li>that: PositionEncodingKindJson val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: PositionEncodingKindJson val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#parameters_2","title":"Parameters","text":"<ul> <li>that: PositionEncodingKindJson val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingKindJson/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/","title":"PositionEncodingUtf16","text":"<p>[Source] <pre><code>primitive val PositionEncodingUtf16\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PositionEncodingUtf16 val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#returns","title":"Returns","text":"<ul> <li>PositionEncodingUtf16 val^</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: PositionEncodingUtf16 val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#parameters","title":"Parameters","text":"<ul> <li>that: PositionEncodingUtf16 val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: PositionEncodingUtf16 val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#parameters_1","title":"Parameters","text":"<ul> <li>that: PositionEncodingUtf16 val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf16/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/","title":"PositionEncodingUtf32","text":"<p>[Source] <pre><code>primitive val PositionEncodingUtf32\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PositionEncodingUtf32 val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#returns","title":"Returns","text":"<ul> <li>PositionEncodingUtf32 val^</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: PositionEncodingUtf32 val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#parameters","title":"Parameters","text":"<ul> <li>that: PositionEncodingUtf32 val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: PositionEncodingUtf32 val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#parameters_1","title":"Parameters","text":"<ul> <li>that: PositionEncodingUtf32 val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf32/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/","title":"PositionEncodingUtf8","text":"<p>[Source] <pre><code>primitive val PositionEncodingUtf8\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PositionEncodingUtf8 val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#returns","title":"Returns","text":"<ul> <li>PositionEncodingUtf8 val^</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: PositionEncodingUtf8 val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#parameters","title":"Parameters","text":"<ul> <li>that: PositionEncodingUtf8 val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: PositionEncodingUtf8 val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#parameters_1","title":"Parameters","text":"<ul> <li>that: PositionEncodingUtf8 val</li> </ul>"},{"location":"eohippus-server-rpc-data-PositionEncodingUtf8/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ProgressToken/","title":"ProgressToken","text":"<p>[Source] <pre><code>type ProgressToken is\n  (I128 val | String val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ProgressToken/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I128 val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/","title":"PublishDiagnosticsParams","text":"<p>[Source] <pre><code>interface val PublishDiagnosticsParams is\n  NotificationParams val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#implements","title":"Implements","text":"<ul> <li>NotificationParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#uri","title":"uri","text":"<p>[Source]</p> <pre><code>fun val uri()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#version","title":"version","text":"<p>[Source]</p> <pre><code>fun val version()\n: (I128 val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#returns_1","title":"Returns","text":"<ul> <li>(I128 val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#diagnostics","title":"diagnostics","text":"<p>[Source]</p> <pre><code>fun val diagnostics()\n: Array[Diagnostic val] val\n</code></pre>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#returns_2","title":"Returns","text":"<ul> <li>Array[Diagnostic val] val</li> </ul>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-PublishDiagnosticsParams/#returns_3","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-Range/","title":"Range","text":"<p>[Source] <pre><code>interface val Range\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-Range/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-Range/#start","title":"start","text":"<p>[Source]</p> <pre><code>fun val start()\n: Position val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Range/#returns","title":"Returns","text":"<ul> <li>Position val</li> </ul>"},{"location":"eohippus-server-rpc-data-Range/#endd","title":"endd","text":"<p>[Source]</p> <pre><code>fun val endd()\n: Position val\n</code></pre>"},{"location":"eohippus-server-rpc-data-Range/#returns_1","title":"Returns","text":"<ul> <li>Position val</li> </ul>"},{"location":"eohippus-server-rpc-data-Range/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-Range/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-RequestMessage/","title":"RequestMessage","text":"<p>[Source] <pre><code>interface val RequestMessage is\n  Message val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-RequestMessage/#implements","title":"Implements","text":"<ul> <li>Message val</li> </ul>"},{"location":"eohippus-server-rpc-data-RequestMessage/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-RequestMessage/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun val id()\n: (I128 val | String val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-RequestMessage/#returns","title":"Returns","text":"<ul> <li>(I128 val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-RequestMessage/#method","title":"method","text":"<p>[Source]</p> <pre><code>fun val method()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-RequestMessage/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-RequestMessage/#jsonrpc","title":"jsonrpc","text":"<p>[Source]</p> <pre><code>fun val jsonrpc()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-RequestMessage/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-RequestParams/","title":"RequestParams","text":"<p>[Source] <pre><code>interface val RequestParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/","title":"ResourceOperationCreate","text":"<p>[Source] <pre><code>primitive val ResourceOperationCreate\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ResourceOperationCreate val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#returns","title":"Returns","text":"<ul> <li>ResourceOperationCreate val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ResourceOperationCreate val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#parameters","title":"Parameters","text":"<ul> <li>that: ResourceOperationCreate val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ResourceOperationCreate val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#parameters_1","title":"Parameters","text":"<ul> <li>that: ResourceOperationCreate val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationCreate/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/","title":"ResourceOperationDelete","text":"<p>[Source] <pre><code>primitive val ResourceOperationDelete\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ResourceOperationDelete val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#returns","title":"Returns","text":"<ul> <li>ResourceOperationDelete val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ResourceOperationDelete val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#parameters","title":"Parameters","text":"<ul> <li>that: ResourceOperationDelete val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ResourceOperationDelete val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#parameters_1","title":"Parameters","text":"<ul> <li>that: ResourceOperationDelete val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationDelete/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationKind/","title":"ResourceOperationKind","text":"<p>[Source] <pre><code>type ResourceOperationKind is\n  (ResourceOperationCreate val | ResourceOperationRename val | ResourceOperationDelete val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ResourceOperationKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ResourceOperationCreate val | ResourceOperationRename val | ResourceOperationDelete val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/","title":"ResourceOperationRename","text":"<p>[Source] <pre><code>primitive val ResourceOperationRename\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ResourceOperationRename val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#returns","title":"Returns","text":"<ul> <li>ResourceOperationRename val^</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ResourceOperationRename val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#parameters","title":"Parameters","text":"<ul> <li>that: ResourceOperationRename val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ResourceOperationRename val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#parameters_1","title":"Parameters","text":"<ul> <li>that: ResourceOperationRename val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResourceOperationRename/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResponseError/","title":"ResponseError","text":"<p>[Source] <pre><code>interface val ResponseError\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ResponseError/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ResponseError/#code","title":"code","text":"<p>[Source]</p> <pre><code>fun val code()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResponseError/#returns","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResponseError/#message","title":"message","text":"<p>[Source]</p> <pre><code>fun val message()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResponseError/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResponseError/#data","title":"data","text":"<p>[Source]</p> <pre><code>fun val data()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResponseError/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ResponseMessage/","title":"ResponseMessage","text":"<p>[Source] <pre><code>interface val ResponseMessage is\n  Message val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#implements","title":"Implements","text":"<ul> <li>Message val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ResponseMessage/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun val id()\n: (I128 val | String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#returns","title":"Returns","text":"<ul> <li>(I128 val | String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#result","title":"result","text":"<p>[Source]</p> <pre><code>fun val result()\n: (ResultData val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#returns_1","title":"Returns","text":"<ul> <li>(ResultData val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#err","title":"err","text":"<p>[Source]</p> <pre><code>fun val err()\n: (ResponseError val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#returns_2","title":"Returns","text":"<ul> <li>(ResponseError val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#jsonrpc","title":"jsonrpc","text":"<p>[Source]</p> <pre><code>fun val jsonrpc()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResponseMessage/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResultData/","title":"ResultData","text":"<p>[Source] <pre><code>interface val ResultData is\n  SendData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ResultData/#implements","title":"Implements","text":"<ul> <li>SendData val</li> </ul>"},{"location":"eohippus-server-rpc-data-ResultData/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ResultData/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ResultData/#returns","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-SendData/","title":"SendData","text":"<p>[Source] <pre><code>interface val SendData\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-SendData/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-SendData/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-SendData/#returns","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ServerInfo/","title":"ServerInfo","text":"<p>[Source] <pre><code>interface val ServerInfo is\n  ResultData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-ServerInfo/#implements","title":"Implements","text":"<ul> <li>ResultData val</li> </ul>"},{"location":"eohippus-server-rpc-data-ServerInfo/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-ServerInfo/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun val name()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-ServerInfo/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-ServerInfo/#version","title":"version","text":"<p>[Source]</p> <pre><code>fun val version()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ServerInfo/#returns_1","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-ServerInfo/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object val | Sequence val | String val | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-ServerInfo/#returns_2","title":"Returns","text":"<ul> <li>(Object val | Sequence val | String val |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-SetTraceParams/","title":"SetTraceParams","text":"<p>[Source] <pre><code>interface val SetTraceParams\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-SetTraceParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-SetTraceParams/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun val value()\n: (TraceOff val | TraceMessages val | TraceVerbose val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-SetTraceParams/#returns","title":"Returns","text":"<ul> <li>(TraceOff val | TraceMessages val | TraceVerbose val)</li> </ul>"},{"location":"eohippus-server-rpc-data-StaticRegistrationOptions/","title":"StaticRegistrationOptions","text":"<p>[Source] <pre><code>interface val StaticRegistrationOptions\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-StaticRegistrationOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-StaticRegistrationOptions/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun val id()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-StaticRegistrationOptions/#returns","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentContentChangeEvent/","title":"TextDocumentContentChangeEvent","text":"<p>[Source] <pre><code>interface val TextDocumentContentChangeEvent\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-TextDocumentContentChangeEvent/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-TextDocumentContentChangeEvent/#range","title":"range","text":"<p>[Source]</p> <pre><code>fun val range()\n: (Range val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentContentChangeEvent/#returns","title":"Returns","text":"<ul> <li>(Range val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentContentChangeEvent/#rangelength","title":"rangeLength","text":"<p>[Source]</p> <pre><code>fun val rangeLength()\n: (I128 val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentContentChangeEvent/#returns_1","title":"Returns","text":"<ul> <li>(I128 val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentContentChangeEvent/#text","title":"text","text":"<p>[Source]</p> <pre><code>fun val text()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentContentChangeEvent/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentIdentifier/","title":"TextDocumentIdentifier","text":"<p>[Source] <pre><code>interface val TextDocumentIdentifier\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-TextDocumentIdentifier/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-TextDocumentIdentifier/#uri","title":"uri","text":"<p>[Source]</p> <pre><code>fun val uri()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentIdentifier/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/","title":"TextDocumentItem","text":"<p>[Source] <pre><code>interface val TextDocumentItem\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-TextDocumentItem/#uri","title":"uri","text":"<p>[Source]</p> <pre><code>fun val uri()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/#languageid","title":"languageId","text":"<p>[Source]</p> <pre><code>fun val languageId()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/#version","title":"version","text":"<p>[Source]</p> <pre><code>fun val version()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/#returns_2","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/#text","title":"text","text":"<p>[Source]</p> <pre><code>fun val text()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentItem/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentPositionParams/","title":"TextDocumentPositionParams","text":"<p>[Source] <pre><code>interface val TextDocumentPositionParams is\n  RequestParams val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-TextDocumentPositionParams/#implements","title":"Implements","text":"<ul> <li>RequestParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentPositionParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-TextDocumentPositionParams/#textdocument","title":"textDocument","text":"<p>[Source]</p> <pre><code>fun val textDocument()\n: TextDocumentIdentifier val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentPositionParams/#returns","title":"Returns","text":"<ul> <li>TextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-TextDocumentPositionParams/#position","title":"position","text":"<p>[Source]</p> <pre><code>fun val position()\n: Position val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TextDocumentPositionParams/#returns_1","title":"Returns","text":"<ul> <li>Position val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceMessages/","title":"TraceMessages","text":"<p>[Source] <pre><code>primitive val TraceMessages\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-TraceMessages/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-TraceMessages/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TraceMessages val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceMessages/#returns","title":"Returns","text":"<ul> <li>TraceMessages val^</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceMessages/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-TraceMessages/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TraceMessages val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceMessages/#parameters","title":"Parameters","text":"<ul> <li>that: TraceMessages val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceMessages/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceMessages/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TraceMessages val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceMessages/#parameters_1","title":"Parameters","text":"<ul> <li>that: TraceMessages val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceMessages/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceOff/","title":"TraceOff","text":"<p>[Source] <pre><code>primitive val TraceOff\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-TraceOff/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-TraceOff/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TraceOff val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceOff/#returns","title":"Returns","text":"<ul> <li>TraceOff val^</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceOff/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-TraceOff/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TraceOff val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceOff/#parameters","title":"Parameters","text":"<ul> <li>that: TraceOff val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceOff/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceOff/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TraceOff val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceOff/#parameters_1","title":"Parameters","text":"<ul> <li>that: TraceOff val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceOff/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceValue/","title":"TraceValue","text":"<p>[Source] <pre><code>type TraceValue is\n  (TraceOff val | TraceMessages val | TraceVerbose val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-TraceValue/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(TraceOff val | TraceMessages val | TraceVerbose val)</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceVerbose/","title":"TraceVerbose","text":"<p>[Source] <pre><code>primitive val TraceVerbose\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-TraceVerbose/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-TraceVerbose/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TraceVerbose val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceVerbose/#returns","title":"Returns","text":"<ul> <li>TraceVerbose val^</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceVerbose/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-TraceVerbose/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TraceVerbose val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceVerbose/#parameters","title":"Parameters","text":"<ul> <li>that: TraceVerbose val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceVerbose/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceVerbose/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TraceVerbose val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-TraceVerbose/#parameters_1","title":"Parameters","text":"<ul> <li>that: TraceVerbose val</li> </ul>"},{"location":"eohippus-server-rpc-data-TraceVerbose/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-Uri/","title":"Uri","text":"<p>[Source] <pre><code>type Uri is\n  String val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-Uri/#type-alias-for","title":"Type Alias For","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-VersionedTextDocumentIdentifier/","title":"VersionedTextDocumentIdentifier","text":"<p>[Source] <pre><code>interface val VersionedTextDocumentIdentifier is\n  TextDocumentIdentifier val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-VersionedTextDocumentIdentifier/#implements","title":"Implements","text":"<ul> <li>TextDocumentIdentifier val</li> </ul>"},{"location":"eohippus-server-rpc-data-VersionedTextDocumentIdentifier/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-VersionedTextDocumentIdentifier/#version","title":"version","text":"<p>[Source]</p> <pre><code>fun val version()\n: I128 val\n</code></pre>"},{"location":"eohippus-server-rpc-data-VersionedTextDocumentIdentifier/#returns","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"eohippus-server-rpc-data-VersionedTextDocumentIdentifier/#uri","title":"uri","text":"<p>[Source]</p> <pre><code>fun val uri()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-VersionedTextDocumentIdentifier/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-WorkDoneProgressParams/","title":"WorkDoneProgressParams","text":"<p>[Source] <pre><code>interface val WorkDoneProgressParams is\n  RequestParams val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-WorkDoneProgressParams/#implements","title":"Implements","text":"<ul> <li>RequestParams val</li> </ul>"},{"location":"eohippus-server-rpc-data-WorkDoneProgressParams/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-WorkDoneProgressParams/#workdonetoken","title":"workDoneToken","text":"<p>[Source]</p> <pre><code>fun val workDoneToken()\n: (I128 val | String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-WorkDoneProgressParams/#returns","title":"Returns","text":"<ul> <li>(I128 val | String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-WorkDoneToken/","title":"WorkDoneToken","text":"<p>[Source] <pre><code>type WorkDoneToken is\n  (I128 val | String val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-WorkDoneToken/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I128 val | String val)</li> </ul>"},{"location":"eohippus-server-rpc-data-WorkspaceFolder/","title":"WorkspaceFolder","text":"<p>[Source] <pre><code>interface val WorkspaceFolder\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-WorkspaceFolder/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-WorkspaceFolder/#uri","title":"uri","text":"<p>[Source]</p> <pre><code>fun val uri()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-WorkspaceFolder/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-WorkspaceFolder/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun val name()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-WorkspaceFolder/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities--index/","title":"Package","text":"<p>No package doc string provided for eohippus/server/rpc/data/server_capabilities.</p>"},{"location":"eohippus-server-rpc-data-server_capabilities--index/#public-types","title":"Public Types","text":"<ul> <li>interface DefinitionOptions</li> <li>interface NotebookCell</li> <li>interface NotebookDocumentFilter</li> <li>interface NotebookDocumentSyncOptions</li> <li>interface NotebookDocumentSyncRegistrationOptions</li> <li>interface NotebookSelectorData</li> <li>primitive SemanticModifiers</li> <li>primitive SemanticTokens</li> <li>interface SemanticTokensFullOptions</li> <li>interface SemanticTokensLegend</li> <li>interface SemanticTokensOptions</li> <li>interface SemanticTokensRegistrationOptions</li> <li>interface ServerCapabilities</li> <li>interface TextDocumentRegistrationOptions</li> <li>primitive TextDocumentSyncFull</li> <li>primitive TextDocumentSyncIncremental</li> <li>type TextDocumentSyncKind</li> <li>primitive TextDocumentSyncKindJson</li> <li>primitive TextDocumentSyncNone</li> <li>interface TextDocumentSyncOptions</li> <li>interface WorkDoneProgressOptions</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/","title":"DefinitionOptions","text":"<p>[Source] <pre><code>interface val DefinitionOptions is\n  WorkDoneProgressOptions val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/#implements","title":"Implements","text":"<ul> <li>WorkDoneProgressOptions val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/#workdoneprogress","title":"workDoneProgress","text":"<pre><code>fun val workDoneProgress()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/#get_json_props","title":"get_json_props","text":"<pre><code>fun val get_json_props()\n: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/#returns_1","title":"Returns","text":"<ul> <li>Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/#get_json","title":"get_json","text":"<pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-DefinitionOptions/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookCell/","title":"NotebookCell","text":"<p>[Source] <pre><code>interface val NotebookCell is\n  SendData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookCell/#implements","title":"Implements","text":"<ul> <li>SendData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookCell/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookCell/#language","title":"language","text":"<p>[Source]</p> <pre><code>fun val language()\n: String val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookCell/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookCell/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookCell/#returns_1","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/","title":"NotebookDocumentFilter","text":"<p>[Source] <pre><code>interface val NotebookDocumentFilter is\n  SendData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#implements","title":"Implements","text":"<ul> <li>SendData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#notebooktype","title":"notebookType","text":"<p>[Source]</p> <pre><code>fun val notebookType()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#returns","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#scheme","title":"scheme","text":"<p>[Source]</p> <pre><code>fun val scheme()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#returns_1","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#pattern","title":"pattern","text":"<p>[Source]</p> <pre><code>fun val pattern()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#returns_2","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentFilter/#returns_3","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/","title":"NotebookDocumentSyncOptions","text":"<p>[Source] <pre><code>interface val NotebookDocumentSyncOptions is\n  SendData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#implements","title":"Implements","text":"<ul> <li>SendData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#notebookselector","title":"notebookSelector","text":"<p>[Source]</p> <pre><code>fun val notebookSelector()\n: Array[NotebookSelectorData val] ref\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#returns","title":"Returns","text":"<ul> <li>Array[NotebookSelectorData val] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#save","title":"save","text":"<p>[Source]</p> <pre><code>fun val save()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#returns_1","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#get_json_props","title":"get_json_props","text":"<p>[Source]</p> <pre><code>fun val get_json_props()\n: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#returns_2","title":"Returns","text":"<ul> <li>Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncOptions/#returns_3","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/","title":"NotebookDocumentSyncRegistrationOptions","text":"<p>[Source] <pre><code>interface val NotebookDocumentSyncRegistrationOptions is\n  NotebookDocumentSyncOptions val,\n  StaticRegistrationOptions val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#implements","title":"Implements","text":"<ul> <li>NotebookDocumentSyncOptions val</li> <li>StaticRegistrationOptions val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#returns","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#notebookselector","title":"notebookSelector","text":"<p>[Source]</p> <pre><code>fun val notebookSelector()\n: Array[NotebookSelectorData val] ref\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#returns_1","title":"Returns","text":"<ul> <li>Array[NotebookSelectorData val] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#save","title":"save","text":"<p>[Source]</p> <pre><code>fun val save()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#returns_2","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#get_json_props","title":"get_json_props","text":"<p>[Source]</p> <pre><code>fun val get_json_props()\n: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#returns_3","title":"Returns","text":"<ul> <li>Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun val id()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookDocumentSyncRegistrationOptions/#returns_4","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/","title":"NotebookSelectorData","text":"<p>[Source] <pre><code>interface val NotebookSelectorData is\n  SendData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/#implements","title":"Implements","text":"<ul> <li>SendData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/#notebook","title":"notebook","text":"<p>[Source]</p> <pre><code>fun val notebook()\n: (String val | NotebookDocumentFilter val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/#returns","title":"Returns","text":"<ul> <li>(String val | NotebookDocumentFilter val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/#cells","title":"cells","text":"<p>[Source]</p> <pre><code>fun val cells()\n: (Array[NotebookCell val] ref | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/#returns_1","title":"Returns","text":"<ul> <li>(Array[NotebookCell val] ref | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-NotebookSelectorData/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/","title":"SemanticModifiers","text":"<p>[Source] <pre><code>primitive val SemanticModifiers\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SemanticModifiers val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#returns","title":"Returns","text":"<ul> <li>SemanticModifiers val^</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: Array[String val] val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: SemanticModifiers val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#parameters","title":"Parameters","text":"<ul> <li>that: SemanticModifiers val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: SemanticModifiers val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#parameters_1","title":"Parameters","text":"<ul> <li>that: SemanticModifiers val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticModifiers/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/","title":"SemanticTokens","text":"<p>[Source] <pre><code>primitive val SemanticTokens\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SemanticTokens val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#returns","title":"Returns","text":"<ul> <li>SemanticTokens val^</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: Array[String val] val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: SemanticTokens val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#parameters","title":"Parameters","text":"<ul> <li>that: SemanticTokens val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: SemanticTokens val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#parameters_1","title":"Parameters","text":"<ul> <li>that: SemanticTokens val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokens/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensFullOptions/","title":"SemanticTokensFullOptions","text":"<p>[Source] <pre><code>interface val SemanticTokensFullOptions\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensFullOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensFullOptions/#delta","title":"delta","text":"<p>[Source]</p> <pre><code>fun val delta()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensFullOptions/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensFullOptions/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensFullOptions/#returns_1","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensLegend/","title":"SemanticTokensLegend","text":"<p>[Source] <pre><code>interface val SemanticTokensLegend\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensLegend/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensLegend/#tokentypes","title":"tokenTypes","text":"<p>[Source]</p> <pre><code>fun val tokenTypes()\n: Array[String val] val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensLegend/#returns","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensLegend/#tokenmodifiers","title":"tokenModifiers","text":"<p>[Source]</p> <pre><code>fun val tokenModifiers()\n: Array[String val] val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensLegend/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensLegend/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensLegend/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/","title":"SemanticTokensOptions","text":"<p>[Source] <pre><code>interface val SemanticTokensOptions is\n  WorkDoneProgressOptions val,\n  ResultData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#implements","title":"Implements","text":"<ul> <li>WorkDoneProgressOptions val</li> <li>ResultData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#legend","title":"legend","text":"<p>[Source]</p> <pre><code>fun val legend()\n: SemanticTokensLegend val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#returns","title":"Returns","text":"<ul> <li>SemanticTokensLegend val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#range","title":"range","text":"<p>[Source]</p> <pre><code>fun val range()\n: (Bool val | Object box | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#returns_1","title":"Returns","text":"<ul> <li>(Bool val | Object box | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#full","title":"full","text":"<p>[Source]</p> <pre><code>fun val full()\n: (Bool val | SemanticTokensFullOptions val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#returns_2","title":"Returns","text":"<ul> <li>(Bool val | SemanticTokensFullOptions val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#get_json_props","title":"get_json_props","text":"<p>[Source]</p> <pre><code>fun val get_json_props()\n: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#returns_3","title":"Returns","text":"<ul> <li>Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#returns_4","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#workdoneprogress","title":"workDoneProgress","text":"<pre><code>fun val workDoneProgress()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensOptions/#returns_5","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/","title":"SemanticTokensRegistrationOptions","text":"<p>[Source] <pre><code>interface val SemanticTokensRegistrationOptions is\n  SemanticTokensOptions val,\n  TextDocumentRegistrationOptions val,\n  StaticRegistrationOptions val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#implements","title":"Implements","text":"<ul> <li>SemanticTokensOptions val</li> <li>TextDocumentRegistrationOptions val</li> <li>StaticRegistrationOptions val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#returns","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#legend","title":"legend","text":"<p>[Source]</p> <pre><code>fun val legend()\n: SemanticTokensLegend val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#returns_1","title":"Returns","text":"<ul> <li>SemanticTokensLegend val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#range","title":"range","text":"<p>[Source]</p> <pre><code>fun val range()\n: (Bool val | Object box | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#returns_2","title":"Returns","text":"<ul> <li>(Bool val | Object box | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#full","title":"full","text":"<p>[Source]</p> <pre><code>fun val full()\n: (Bool val | SemanticTokensFullOptions val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#returns_3","title":"Returns","text":"<ul> <li>(Bool val | SemanticTokensFullOptions val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#get_json_props","title":"get_json_props","text":"<p>[Source]</p> <pre><code>fun val get_json_props()\n: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#returns_4","title":"Returns","text":"<ul> <li>Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#workdoneprogress","title":"workDoneProgress","text":"<pre><code>fun val workDoneProgress()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#returns_5","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#documentselector","title":"documentSelector","text":"<pre><code>fun val documentSelector()\n: (Seq[DocumentFilter val] ref | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#returns_6","title":"Returns","text":"<ul> <li>(Seq[DocumentFilter val] ref | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun val id()\n: (String val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-SemanticTokensRegistrationOptions/#returns_7","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/","title":"ServerCapabilities","text":"<p>[Source] <pre><code>interface val ServerCapabilities is\n  ResultData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#implements","title":"Implements","text":"<ul> <li>ResultData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#positionencoding","title":"positionEncoding","text":"<p>[Source]</p> <pre><code>fun val positionEncoding()\n: (PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val | \n    None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#returns","title":"Returns","text":"<ul> <li>(PositionEncodingUtf8 val | PositionEncodingUtf16 val | PositionEncodingUtf32 val |      None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#textdocumentsync","title":"textDocumentSync","text":"<p>[Source]</p> <pre><code>fun val textDocumentSync()\n: (TextDocumentSyncOptions val | TextDocumentSyncNone val | TextDocumentSyncFull val | \n    TextDocumentSyncIncremental val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#returns_1","title":"Returns","text":"<ul> <li>(TextDocumentSyncOptions val | TextDocumentSyncNone val | TextDocumentSyncFull val |      TextDocumentSyncIncremental val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#notebookdocumentsync","title":"notebookDocumentSync","text":"<p>[Source]</p> <pre><code>fun val notebookDocumentSync()\n: (NotebookDocumentSyncOptions val | NotebookDocumentSyncRegistrationOptions val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#returns_2","title":"Returns","text":"<ul> <li>(NotebookDocumentSyncOptions val | NotebookDocumentSyncRegistrationOptions val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#definitionprovider","title":"definitionProvider","text":"<p>[Source]</p> <pre><code>fun val definitionProvider()\n: (Bool val | DefinitionOptions val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#returns_3","title":"Returns","text":"<ul> <li>(Bool val | DefinitionOptions val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#semantictokensprovider","title":"semanticTokensProvider","text":"<p>[Source]</p> <pre><code>fun val semanticTokensProvider()\n: (SemanticTokensOptions val | SemanticTokensRegistrationOptions val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#returns_4","title":"Returns","text":"<ul> <li>(SemanticTokensOptions val | SemanticTokensRegistrationOptions val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-ServerCapabilities/#returns_5","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentRegistrationOptions/","title":"TextDocumentRegistrationOptions","text":"<p>[Source] <pre><code>interface val TextDocumentRegistrationOptions is\n  SendData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentRegistrationOptions/#implements","title":"Implements","text":"<ul> <li>SendData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentRegistrationOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentRegistrationOptions/#documentselector","title":"documentSelector","text":"<p>[Source]</p> <pre><code>fun val documentSelector()\n: (Seq[DocumentFilter val] ref | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentRegistrationOptions/#returns","title":"Returns","text":"<ul> <li>(Seq[DocumentFilter val] ref | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentRegistrationOptions/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentRegistrationOptions/#returns_1","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/","title":"TextDocumentSyncFull","text":"<p>[Source] <pre><code>primitive val TextDocumentSyncFull\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TextDocumentSyncFull val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#returns","title":"Returns","text":"<ul> <li>TextDocumentSyncFull val^</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TextDocumentSyncFull val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#parameters","title":"Parameters","text":"<ul> <li>that: TextDocumentSyncFull val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TextDocumentSyncFull val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#parameters_1","title":"Parameters","text":"<ul> <li>that: TextDocumentSyncFull val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncFull/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/","title":"TextDocumentSyncIncremental","text":"<p>[Source] <pre><code>primitive val TextDocumentSyncIncremental\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TextDocumentSyncIncremental val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#returns","title":"Returns","text":"<ul> <li>TextDocumentSyncIncremental val^</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TextDocumentSyncIncremental val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#parameters","title":"Parameters","text":"<ul> <li>that: TextDocumentSyncIncremental val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TextDocumentSyncIncremental val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#parameters_1","title":"Parameters","text":"<ul> <li>that: TextDocumentSyncIncremental val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncIncremental/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKind/","title":"TextDocumentSyncKind","text":"<p>[Source] <pre><code>type TextDocumentSyncKind is\n  (TextDocumentSyncNone val | TextDocumentSyncFull val | TextDocumentSyncIncremental val)\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKind/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(TextDocumentSyncNone val | TextDocumentSyncFull val | TextDocumentSyncIncremental val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/","title":"TextDocumentSyncKindJson","text":"<p>[Source] <pre><code>primitive val TextDocumentSyncKindJson\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TextDocumentSyncKindJson val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#returns","title":"Returns","text":"<ul> <li>TextDocumentSyncKindJson val^</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  tdsk: (TextDocumentSyncNone val | TextDocumentSyncFull val | TextDocumentSyncIncremental val | \n    None val))\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#parameters","title":"Parameters","text":"<ul> <li>tdsk: (TextDocumentSyncNone val | TextDocumentSyncFull val | TextDocumentSyncIncremental val |      None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#returns_1","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TextDocumentSyncKindJson val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#parameters_1","title":"Parameters","text":"<ul> <li>that: TextDocumentSyncKindJson val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TextDocumentSyncKindJson val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#parameters_2","title":"Parameters","text":"<ul> <li>that: TextDocumentSyncKindJson val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncKindJson/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/","title":"TextDocumentSyncNone","text":"<p>[Source] <pre><code>primitive val TextDocumentSyncNone\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#constructors","title":"Constructors","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TextDocumentSyncNone val^\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#returns","title":"Returns","text":"<ul> <li>TextDocumentSyncNone val^</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TextDocumentSyncNone val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#parameters","title":"Parameters","text":"<ul> <li>that: TextDocumentSyncNone val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TextDocumentSyncNone val)\n: Bool val\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#parameters_1","title":"Parameters","text":"<ul> <li>that: TextDocumentSyncNone val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncNone/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/","title":"TextDocumentSyncOptions","text":"<p>[Source] <pre><code>interface val TextDocumentSyncOptions is\n  SendData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/#implements","title":"Implements","text":"<ul> <li>SendData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/#openclose","title":"openClose","text":"<p>[Source]</p> <pre><code>fun val openClose()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/#change","title":"change","text":"<p>[Source]</p> <pre><code>fun val change()\n: (TextDocumentSyncNone val | TextDocumentSyncFull val | TextDocumentSyncIncremental val | \n    None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/#returns_1","title":"Returns","text":"<ul> <li>(TextDocumentSyncNone val | TextDocumentSyncFull val | TextDocumentSyncIncremental val |      None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-TextDocumentSyncOptions/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/","title":"WorkDoneProgressOptions","text":"<p>[Source] <pre><code>interface val WorkDoneProgressOptions is\n  ResultData val\n</code></pre></p>"},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/#implements","title":"Implements","text":"<ul> <li>ResultData val</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/#workdoneprogress","title":"workDoneProgress","text":"<p>[Source]</p> <pre><code>fun val workDoneProgress()\n: (Bool val | None val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/#returns","title":"Returns","text":"<ul> <li>(Bool val | None val)</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/#get_json_props","title":"get_json_props","text":"<p>[Source]</p> <pre><code>fun val get_json_props()\n: Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/#returns_1","title":"Returns","text":"<ul> <li>Array[(String val , (Object box | Sequence box | String box | I128 val | F64 val | Bool val | Null val))] ref</li> </ul>"},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/#get_json","title":"get_json","text":"<p>[Source]</p> <pre><code>fun val get_json()\n: (Object box | Sequence box | String box | \n    I128 val | F64 val | Bool val | \n    Null val)\n</code></pre>"},{"location":"eohippus-server-rpc-data-server_capabilities-WorkDoneProgressOptions/#returns_2","title":"Returns","text":"<ul> <li>(Object box | Sequence box | String box |      I128 val | F64 val | Bool val |      Null val)</li> </ul>"},{"location":"eohippus-types--index/","title":"Package","text":"<p>No package doc string provided for eohippus/types.</p>"},{"location":"eohippus-types--index/#public-types","title":"Public Types","text":"<ul> <li>trait AstPackage</li> <li>trait AstType</li> <li>class BuiltinAstPackage</li> </ul>"},{"location":"eohippus-types-AstPackage/","title":"AstPackage","text":"<p>[Source] <pre><code>trait ref AstPackage\n</code></pre></p>"},{"location":"eohippus-types-AstPackage/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-types-AstPackage/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-types-AstPackage/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-types-AstPackage/#locator","title":"locator","text":"<p>[Source]</p> <pre><code>fun box locator()\n: String val\n</code></pre>"},{"location":"eohippus-types-AstPackage/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-types-AstPackage/#all_types","title":"all_types","text":"<p>[Source]</p> <pre><code>fun box all_types()\n: (Cons[AstType val] val | Nil[AstType val] val)\n</code></pre>"},{"location":"eohippus-types-AstPackage/#returns_2","title":"Returns","text":"<ul> <li>(Cons[AstType val] val | Nil[AstType val] val)</li> </ul>"},{"location":"eohippus-types-AstType/","title":"AstType","text":"<p>[Source] <pre><code>trait val AstType is\n  Stringable box\n</code></pre></p>"},{"location":"eohippus-types-AstType/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> </ul>"},{"location":"eohippus-types-AstType/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-types-AstType/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun val name()\n: String val\n</code></pre>"},{"location":"eohippus-types-AstType/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-types-AstType/#full_name","title":"full_name","text":"<p>[Source]</p> <pre><code>fun val full_name()\n: String val\n</code></pre>"},{"location":"eohippus-types-AstType/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-types-AstType/#node","title":"node","text":"<p>[Source]</p> <pre><code>fun val node()\n: Node val\n</code></pre>"},{"location":"eohippus-types-AstType/#returns_2","title":"Returns","text":"<ul> <li>Node val</li> </ul>"},{"location":"eohippus-types-AstType/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"eohippus-types-AstType/#returns_3","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"eohippus-types-BuiltinAstPackage/","title":"BuiltinAstPackage","text":"<p>[Source] <pre><code>class val BuiltinAstPackage is\n  AstPackage ref\n</code></pre></p>"},{"location":"eohippus-types-BuiltinAstPackage/#implements","title":"Implements","text":"<ul> <li>AstPackage ref</li> </ul>"},{"location":"eohippus-types-BuiltinAstPackage/#constructors","title":"Constructors","text":""},{"location":"eohippus-types-BuiltinAstPackage/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BuiltinAstPackage val^\n</code></pre>"},{"location":"eohippus-types-BuiltinAstPackage/#returns","title":"Returns","text":"<ul> <li>BuiltinAstPackage val^</li> </ul>"},{"location":"eohippus-types-BuiltinAstPackage/#public-functions","title":"Public Functions","text":""},{"location":"eohippus-types-BuiltinAstPackage/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"eohippus-types-BuiltinAstPackage/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-types-BuiltinAstPackage/#locator","title":"locator","text":"<p>[Source]</p> <pre><code>fun box locator()\n: String val\n</code></pre>"},{"location":"eohippus-types-BuiltinAstPackage/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"eohippus-types-BuiltinAstPackage/#all_types","title":"all_types","text":"<p>[Source]</p> <pre><code>fun box all_types()\n: (Cons[AstType val] val | Nil[AstType val] val)\n</code></pre>"},{"location":"eohippus-types-BuiltinAstPackage/#returns_3","title":"Returns","text":"<ul> <li>(Cons[AstType val] val | Nil[AstType val] val)</li> </ul>"},{"location":"eohippus-types-BuiltinAstPackage/#bool_type","title":"bool_type","text":"<p>[Source]</p> <pre><code>fun box bool_type()\n: AstType val\n</code></pre>"},{"location":"eohippus-types-BuiltinAstPackage/#returns_4","title":"Returns","text":"<ul> <li>AstType val</li> </ul>"},{"location":"eohippus-types-BuiltinAstPackage/#string_type","title":"string_type","text":"<p>[Source]</p> <pre><code>fun box string_type()\n: AstType val\n</code></pre>"},{"location":"eohippus-types-BuiltinAstPackage/#returns_5","title":"Returns","text":"<ul> <li>AstType val</li> </ul>"},{"location":"eohippus-types-BuiltinAstPackage/#source_loc_type","title":"source_loc_type","text":"<p>[Source]</p> <pre><code>fun box source_loc_type()\n: AstType val\n</code></pre>"},{"location":"eohippus-types-BuiltinAstPackage/#returns_6","title":"Returns","text":"<ul> <li>AstType val</li> </ul>"},{"location":"files--index/","title":"Files package","text":"<p>The Files package provides classes for working with files and directories.</p> <p>Files are identified by <code>FilePath</code> objects, which represent both the path to the file and the capabilites for accessing the file at that path. <code>FilePath</code> objects can be used with the <code>CreateFile</code> and <code>OpenFile</code> primitives and the <code>File</code> class to get a reference to a file that can be used to write to and/or read from the file. It can also be used with the <code>Directory</code> object to get a reference to a directory object that can be used for directory operations.</p> <p>The <code>FileLines</code> class allows a file to be accessed one line at a time.</p> <p>The <code>FileStream</code> actor provides the ability to asynchronously write to a file.</p> <p>The <code>Path</code> primitive can be used to do path-related operations on strings and characters.</p>"},{"location":"files--index/#example-program","title":"Example program","text":"<p>This program opens the files that are given as command line arguments and prints their contents.</p> <pre><code>use \"files\"\n\nactor Main\n  new create(env: Env) =&gt;\n    for file_name in env.args.slice(1).values() do\n      let path = FilePath(FileAuth(env.root), file_name)\n      match OpenFile(path)\n      | let file: File =&gt;\n        while file.errno() is FileOK do\n          env.out.write(file.read(1024))\n        end\n      else\n        env.err.print(\"Error opening file '\" + file_name + \"'\")\n      end\n    end\n</code></pre>"},{"location":"files--index/#public-types","title":"Public Types","text":"<ul> <li>primitive CreateFile</li> <li>class Directory</li> <li>class File</li> <li>primitive FileAuth</li> <li>primitive FileBadFileNumber</li> <li>type FileCaps</li> <li>primitive FileChmod</li> <li>primitive FileChown</li> <li>primitive FileCreate</li> <li>primitive FileEOF</li> <li>type FileErrNo</li> <li>primitive FileError</li> <li>primitive FileExec</li> <li>primitive FileExists</li> <li>class FileInfo</li> <li>class FileLines</li> <li>primitive FileLink</li> <li>primitive FileLookup</li> <li>primitive FileMkdir</li> <li>class FileMode</li> <li>primitive FileOK</li> <li>class FilePath</li> <li>primitive FilePermissionDenied</li> <li>primitive FileRead</li> <li>primitive FileRemove</li> <li>primitive FileRename</li> <li>primitive FileSeek</li> <li>primitive FileStat</li> <li>actor FileStream</li> <li>primitive FileSync</li> <li>primitive FileTime</li> <li>primitive FileTruncate</li> <li>primitive FileWrite</li> <li>primitive OpenFile</li> <li>primitive Path</li> <li>interface WalkHandler</li> </ul>"},{"location":"files-CreateFile/","title":"CreateFile","text":"<p>[Source]</p> <p>Open a File for read/write, creating if it doesn't exist, preserving the contents if it does exist.</p> <pre><code>primitive val CreateFile\n</code></pre>"},{"location":"files-CreateFile/#constructors","title":"Constructors","text":""},{"location":"files-CreateFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CreateFile val^\n</code></pre>"},{"location":"files-CreateFile/#returns","title":"Returns","text":"<ul> <li>CreateFile val^</li> </ul>"},{"location":"files-CreateFile/#public-functions","title":"Public Functions","text":""},{"location":"files-CreateFile/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)\n</code></pre>"},{"location":"files-CreateFile/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-CreateFile/#returns_1","title":"Returns","text":"<ul> <li>(File ref | FileOK val | FileError val |      FileEOF val | FileBadFileNumber val | FileExists val |      FilePermissionDenied val)</li> </ul>"},{"location":"files-CreateFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: CreateFile val)\n: Bool val\n</code></pre>"},{"location":"files-CreateFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: CreateFile val</li> </ul>"},{"location":"files-CreateFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-CreateFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: CreateFile val)\n: Bool val\n</code></pre>"},{"location":"files-CreateFile/#parameters_2","title":"Parameters","text":"<ul> <li>that: CreateFile val</li> </ul>"},{"location":"files-CreateFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/","title":"Directory","text":"<p>[Source]</p> <p>Operations on a directory.</p> <p>The directory-relative functions (open, etc) use the *at interface on FreeBSD and Linux. This isn't available on OS X prior to 10.10, so it is not used. On FreeBSD, this allows the directory-relative functions to take advantage of Capsicum.</p> <pre><code>class ref Directory\n</code></pre>"},{"location":"files-Directory/#constructors","title":"Constructors","text":""},{"location":"files-Directory/#create","title":"create","text":"<p>[Source]</p> <p>This will raise an error if the path doesn't exist or it is not a directory, or if FileRead or FileStat permission isn't available.</p> <pre><code>new ref create(\n  from: FilePath val)\n: Directory ref^ ?\n</code></pre>"},{"location":"files-Directory/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-Directory/#returns","title":"Returns","text":"<ul> <li>Directory ref^ ?</li> </ul>"},{"location":"files-Directory/#public-fields","title":"Public fields","text":""},{"location":"files-Directory/#let-path-filepath-val","title":"let path: FilePath val","text":"<p>[Source]</p> <p>This is the filesystem path locating this directory on the file system and an object capability granting access to operate on this directory.</p>"},{"location":"files-Directory/#public-functions","title":"Public Functions","text":""},{"location":"files-Directory/#entries","title":"entries","text":"<p>[Source]</p> <p>The entries will include everything in the directory, but it is not recursive. The path for the entry will be relative to the directory, so it will contain no directory separators. The entries will not include \".\" or \"..\".</p> <pre><code>fun box entries()\n: Array[String val] iso^ ?\n</code></pre>"},{"location":"files-Directory/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] iso^ ?</li> </ul>"},{"location":"files-Directory/#open","title":"open","text":"<p>[Source]</p> <p>Open a directory relative to this one. Raises an error if the path is not within this directory hierarchy.</p> <pre><code>fun box open(\n  target: String val)\n: Directory iso^ ?\n</code></pre>"},{"location":"files-Directory/#parameters_1","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_2","title":"Returns","text":"<ul> <li>Directory iso^ ?</li> </ul>"},{"location":"files-Directory/#mkdir","title":"mkdir","text":"<p>[Source]</p> <p>Creates a directory relative to this one. Returns false if the path is not within this directory hierarchy or if FileMkdir permission is missing.</p> <pre><code>fun box mkdir(\n  target: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_2","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#create_file","title":"create_file","text":"<p>[Source]</p> <p>Open for read/write, creating if it doesn't exist, preserving the contents if it does exist.</p> <pre><code>fun box create_file(\n  target: String val)\n: File iso^ ?\n</code></pre>"},{"location":"files-Directory/#parameters_3","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_4","title":"Returns","text":"<ul> <li>File iso^ ?</li> </ul>"},{"location":"files-Directory/#open_file","title":"open_file","text":"<p>[Source]</p> <p>Open for read only, failing if it doesn't exist.</p> <pre><code>fun box open_file(\n  target: String val)\n: File iso^ ?\n</code></pre>"},{"location":"files-Directory/#parameters_4","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_5","title":"Returns","text":"<ul> <li>File iso^ ?</li> </ul>"},{"location":"files-Directory/#info","title":"info","text":"<p>[Source]</p> <p>Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission.</p> <pre><code>fun box info()\n: FileInfo val ?\n</code></pre>"},{"location":"files-Directory/#returns_6","title":"Returns","text":"<ul> <li>FileInfo val ?</li> </ul>"},{"location":"files-Directory/#chmod","title":"chmod","text":"<p>[Source]</p> <p>Set the FileMode for this directory.</p> <pre><code>fun box chmod(\n  mode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_5","title":"Parameters","text":"<ul> <li>mode: FileMode box</li> </ul>"},{"location":"files-Directory/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#chown","title":"chown","text":"<p>[Source]</p> <p>Set the owner and group for this directory. Does nothing on Windows.</p> <pre><code>fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_6","title":"Parameters","text":"<ul> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-Directory/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#touch","title":"touch","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to now.</p> <pre><code>fun box touch()\n: Bool val\n</code></pre>"},{"location":"files-Directory/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#set_time","title":"set_time","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to the given values.</p> <pre><code>fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_7","title":"Parameters","text":"<ul> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-Directory/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#infoat","title":"infoat","text":"<p>[Source]</p> <p>Return a FileInfo for some path relative to this directory.</p> <pre><code>fun box infoat(\n  target: String val)\n: FileInfo val ?\n</code></pre>"},{"location":"files-Directory/#parameters_8","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_11","title":"Returns","text":"<ul> <li>FileInfo val ?</li> </ul>"},{"location":"files-Directory/#chmodat","title":"chmodat","text":"<p>[Source]</p> <p>Set the FileMode for some path relative to this directory.</p> <pre><code>fun box chmodat(\n  target: String val,\n  mode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_9","title":"Parameters","text":"<ul> <li>target: String val</li> <li>mode: FileMode box</li> </ul>"},{"location":"files-Directory/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#chownat","title":"chownat","text":"<p>[Source]</p> <p>Set the FileMode for some path relative to this directory.</p> <pre><code>fun box chownat(\n  target: String val,\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_10","title":"Parameters","text":"<ul> <li>target: String val</li> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-Directory/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#touchat","title":"touchat","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to now.</p> <pre><code>fun box touchat(\n  target: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_11","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#set_time_at","title":"set_time_at","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to the given values.</p> <pre><code>fun box set_time_at(\n  target: String val,\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_12","title":"Parameters","text":"<ul> <li>target: String val</li> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-Directory/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#symlink","title":"symlink","text":"<p>[Source]</p> <p>Link the source path to the link_name, where the link_name is relative to this directory.</p> <pre><code>fun box symlink(\n  source: FilePath val,\n  link_name: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_13","title":"Parameters","text":"<ul> <li>source: FilePath val</li> <li>link_name: String val</li> </ul>"},{"location":"files-Directory/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed.</p> <pre><code>fun box remove(\n  target: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_14","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#rename","title":"rename","text":"<p>[Source]</p> <p>Rename source (which is relative to this directory) to target (which is relative to the <code>to</code> directory).</p> <pre><code>fun box rename(\n  source: String val,\n  to: Directory box,\n  target: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_15","title":"Parameters","text":"<ul> <li>source: String val</li> <li>to: Directory box</li> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Close the directory.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"files-Directory/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/","title":"File","text":"<p>[Source]</p> <p>Operations on a file.</p> <pre><code>class ref File\n</code></pre>"},{"location":"files-File/#constructors","title":"Constructors","text":""},{"location":"files-File/#create","title":"create","text":"<p>[Source]</p> <p>Attempt to open for read/write, creating if it doesn't exist, preserving the contents if it does exist. Set errno according to result.</p> <pre><code>new ref create(\n  from: FilePath val)\n: File ref^\n</code></pre>"},{"location":"files-File/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-File/#returns","title":"Returns","text":"<ul> <li>File ref^</li> </ul>"},{"location":"files-File/#open","title":"open","text":"<p>[Source]</p> <p>Open for read only. Set _errno according to result.</p> <pre><code>new ref open(\n  from: FilePath val)\n: File ref^\n</code></pre>"},{"location":"files-File/#parameters_1","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-File/#returns_1","title":"Returns","text":"<ul> <li>File ref^</li> </ul>"},{"location":"files-File/#public-fields","title":"Public fields","text":""},{"location":"files-File/#let-path-filepath-val","title":"let path: FilePath val","text":"<p>[Source]</p> <p>This is the filesystem path locating this file on the file system and an object capability granting access to operate on this file.</p>"},{"location":"files-File/#let-writeable-bool-val","title":"let writeable: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the underlying file descriptor has been opened as writeable.</p>"},{"location":"files-File/#public-functions","title":"Public Functions","text":""},{"location":"files-File/#errno","title":"errno","text":"<p>[Source]</p> <p>Returns the last error code set for this File</p> <pre><code>fun box errno()\n: (FileOK val | FileError val | FileEOF val | \n    FileBadFileNumber val | FileExists val | FilePermissionDenied val)\n</code></pre>"},{"location":"files-File/#returns_2","title":"Returns","text":"<ul> <li>(FileOK val | FileError val | FileEOF val |      FileBadFileNumber val | FileExists val | FilePermissionDenied val)</li> </ul>"},{"location":"files-File/#clear_errno","title":"clear_errno","text":"<p>[Source]</p> <p>Clears the last error code set for this File. Clears the error indicator for the stream.</p> <pre><code>fun ref clear_errno()\n: None val\n</code></pre>"},{"location":"files-File/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#valid","title":"valid","text":"<p>[Source]</p> <p>Returns true if the file is currently open.</p> <pre><code>fun box valid()\n: Bool val\n</code></pre>"},{"location":"files-File/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#read","title":"read","text":"<p>[Source]</p> <p>Returns up to len bytes.</p> <pre><code>fun ref read(\n  len: USize val)\n: Array[U8 val] iso^\n</code></pre>"},{"location":"files-File/#parameters_2","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"files-File/#returns_5","title":"Returns","text":"<ul> <li>Array[U8 val] iso^</li> </ul>"},{"location":"files-File/#read_string","title":"read_string","text":"<p>[Source]</p> <p>Returns up to len bytes. The resulting string may have internal null characters.</p> <pre><code>fun ref read_string(\n  len: USize val)\n: String iso^\n</code></pre>"},{"location":"files-File/#parameters_3","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"files-File/#returns_6","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"files-File/#print","title":"print","text":"<p>[Source]</p> <p>Same as write, buts adds a newline.</p> <pre><code>fun ref print(\n  data: (String box | Array[U8 val] box))\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_4","title":"Parameters","text":"<ul> <li>data: (String box | Array[U8 val] box)</li> </ul>"},{"location":"files-File/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>fun ref printv(\n  data: ByteSeqIter box)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_5","title":"Parameters","text":"<ul> <li>data: ByteSeqIter box</li> </ul>"},{"location":"files-File/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#write","title":"write","text":"<p>[Source]</p> <p>Returns false if the file wasn't opened with write permission. Returns false and closes the file if not all the bytes were written.</p> <pre><code>fun ref write(\n  data: (String box | Array[U8 val] box))\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_6","title":"Parameters","text":"<ul> <li>data: (String box | Array[U8 val] box)</li> </ul>"},{"location":"files-File/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>fun ref writev(\n  data: ByteSeqIter box)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_7","title":"Parameters","text":"<ul> <li>data: ByteSeqIter box</li> </ul>"},{"location":"files-File/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#queue","title":"queue","text":"<p>[Source]</p> <p>Queue data to be written NOTE: Queue'd data will always be written before normal print/write requested data</p> <pre><code>fun ref queue(\n  data: (String box | Array[U8 val] box))\n: None val\n</code></pre>"},{"location":"files-File/#parameters_8","title":"Parameters","text":"<ul> <li>data: (String box | Array[U8 val] box)</li> </ul>"},{"location":"files-File/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#queuev","title":"queuev","text":"<p>[Source]</p> <p>Queue an iterable collection of ByteSeqs to be written NOTE: Queue'd data will always be written before normal print/write requested data</p> <pre><code>fun ref queuev(\n  data: ByteSeqIter box)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_9","title":"Parameters","text":"<ul> <li>data: ByteSeqIter box</li> </ul>"},{"location":"files-File/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush any queued data</p> <pre><code>fun ref flush()\n: Bool val\n</code></pre>"},{"location":"files-File/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#position","title":"position","text":"<p>[Source]</p> <p>Return the current cursor position in the file.</p> <pre><code>fun ref position()\n: USize val\n</code></pre>"},{"location":"files-File/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"files-File/#size","title":"size","text":"<p>[Source]</p> <p>Return the total length of the file.</p> <pre><code>fun ref size()\n: USize val\n</code></pre>"},{"location":"files-File/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"files-File/#seek_start","title":"seek_start","text":"<p>[Source]</p> <p>Set the cursor position relative to the start of the file.</p> <pre><code>fun ref seek_start(\n  offset: USize val)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_10","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"files-File/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#seek_end","title":"seek_end","text":"<p>[Source]</p> <p>Set the cursor position relative to the end of the file.</p> <pre><code>fun ref seek_end(\n  offset: USize val)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_11","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"files-File/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#seek","title":"seek","text":"<p>[Source]</p> <p>Move the cursor position.</p> <pre><code>fun ref seek(\n  offset: ISize val)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_12","title":"Parameters","text":"<ul> <li>offset: ISize val</li> </ul>"},{"location":"files-File/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#sync","title":"sync","text":"<p>[Source]</p> <p>Sync the file contents to physical storage.</p> <pre><code>fun ref sync()\n: None val\n</code></pre>"},{"location":"files-File/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#datasync","title":"datasync","text":"<p>[Source]</p> <p>Sync the file contents to physical storage.</p> <pre><code>fun ref datasync()\n: None val\n</code></pre>"},{"location":"files-File/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#set_length","title":"set_length","text":"<p>[Source]</p> <p>Change the file size. If it is made larger, the new contents are undefined.</p> <pre><code>fun ref set_length(\n  len: USize val)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_13","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"files-File/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#info","title":"info","text":"<p>[Source]</p> <p>Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission.</p> <pre><code>fun box info()\n: FileInfo val ?\n</code></pre>"},{"location":"files-File/#returns_22","title":"Returns","text":"<ul> <li>FileInfo val ?</li> </ul>"},{"location":"files-File/#chmod","title":"chmod","text":"<p>[Source]</p> <p>Set the FileMode for this directory.</p> <pre><code>fun box chmod(\n  mode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_14","title":"Parameters","text":"<ul> <li>mode: FileMode box</li> </ul>"},{"location":"files-File/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#chown","title":"chown","text":"<p>[Source]</p> <p>Set the owner and group for this directory. Does nothing on Windows.</p> <pre><code>fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_15","title":"Parameters","text":"<ul> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-File/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#touch","title":"touch","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to now.</p> <pre><code>fun box touch()\n: Bool val\n</code></pre>"},{"location":"files-File/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#set_time","title":"set_time","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to the given values.</p> <pre><code>fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_16","title":"Parameters","text":"<ul> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-File/#returns_26","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#lines","title":"lines","text":"<p>[Source]</p> <p>Returns an iterator for reading lines from the file.</p> <pre><code>fun ref lines()\n: FileLines ref\n</code></pre>"},{"location":"files-File/#returns_27","title":"Returns","text":"<ul> <li>FileLines ref</li> </ul>"},{"location":"files-File/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Close the file. Future operations will do nothing.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"files-File/#returns_28","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileAuth/","title":"FileAuth","text":"<p>[Source] <pre><code>primitive val FileAuth\n</code></pre></p>"},{"location":"files-FileAuth/#constructors","title":"Constructors","text":""},{"location":"files-FileAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: AmbientAuth val)\n: FileAuth val^\n</code></pre>"},{"location":"files-FileAuth/#parameters","title":"Parameters","text":"<ul> <li>from: AmbientAuth val</li> </ul>"},{"location":"files-FileAuth/#returns","title":"Returns","text":"<ul> <li>FileAuth val^</li> </ul>"},{"location":"files-FileAuth/#public-functions","title":"Public Functions","text":""},{"location":"files-FileAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileAuth val)\n: Bool val\n</code></pre>"},{"location":"files-FileAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileAuth val</li> </ul>"},{"location":"files-FileAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileAuth val)\n: Bool val\n</code></pre>"},{"location":"files-FileAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: FileAuth val</li> </ul>"},{"location":"files-FileAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileBadFileNumber/","title":"FileBadFileNumber","text":"<p>[Source] <pre><code>primitive val FileBadFileNumber\n</code></pre></p>"},{"location":"files-FileBadFileNumber/#constructors","title":"Constructors","text":""},{"location":"files-FileBadFileNumber/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileBadFileNumber val^\n</code></pre>"},{"location":"files-FileBadFileNumber/#returns","title":"Returns","text":"<ul> <li>FileBadFileNumber val^</li> </ul>"},{"location":"files-FileBadFileNumber/#public-functions","title":"Public Functions","text":""},{"location":"files-FileBadFileNumber/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileBadFileNumber val)\n: Bool val\n</code></pre>"},{"location":"files-FileBadFileNumber/#parameters","title":"Parameters","text":"<ul> <li>that: FileBadFileNumber val</li> </ul>"},{"location":"files-FileBadFileNumber/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileBadFileNumber/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileBadFileNumber val)\n: Bool val\n</code></pre>"},{"location":"files-FileBadFileNumber/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileBadFileNumber val</li> </ul>"},{"location":"files-FileBadFileNumber/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileCaps/","title":"FileCaps","text":"<p>[Source] <pre><code>type FileCaps is\n  Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref\n</code></pre></p>"},{"location":"files-FileCaps/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref</li> </ul>"},{"location":"files-FileChmod/","title":"FileChmod","text":"<p>[Source] <pre><code>primitive val FileChmod\n</code></pre></p>"},{"location":"files-FileChmod/#constructors","title":"Constructors","text":""},{"location":"files-FileChmod/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileChmod val^\n</code></pre>"},{"location":"files-FileChmod/#returns","title":"Returns","text":"<ul> <li>FileChmod val^</li> </ul>"},{"location":"files-FileChmod/#public-functions","title":"Public Functions","text":""},{"location":"files-FileChmod/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileChmod/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileChmod/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileChmod val)\n: Bool val\n</code></pre>"},{"location":"files-FileChmod/#parameters","title":"Parameters","text":"<ul> <li>that: FileChmod val</li> </ul>"},{"location":"files-FileChmod/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileChmod/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileChmod val)\n: Bool val\n</code></pre>"},{"location":"files-FileChmod/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileChmod val</li> </ul>"},{"location":"files-FileChmod/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileChown/","title":"FileChown","text":"<p>[Source] <pre><code>primitive val FileChown\n</code></pre></p>"},{"location":"files-FileChown/#constructors","title":"Constructors","text":""},{"location":"files-FileChown/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileChown val^\n</code></pre>"},{"location":"files-FileChown/#returns","title":"Returns","text":"<ul> <li>FileChown val^</li> </ul>"},{"location":"files-FileChown/#public-functions","title":"Public Functions","text":""},{"location":"files-FileChown/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileChown/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileChown/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileChown val)\n: Bool val\n</code></pre>"},{"location":"files-FileChown/#parameters","title":"Parameters","text":"<ul> <li>that: FileChown val</li> </ul>"},{"location":"files-FileChown/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileChown/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileChown val)\n: Bool val\n</code></pre>"},{"location":"files-FileChown/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileChown val</li> </ul>"},{"location":"files-FileChown/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileCreate/","title":"FileCreate","text":"<p>[Source] <pre><code>primitive val FileCreate\n</code></pre></p>"},{"location":"files-FileCreate/#constructors","title":"Constructors","text":""},{"location":"files-FileCreate/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileCreate val^\n</code></pre>"},{"location":"files-FileCreate/#returns","title":"Returns","text":"<ul> <li>FileCreate val^</li> </ul>"},{"location":"files-FileCreate/#public-functions","title":"Public Functions","text":""},{"location":"files-FileCreate/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileCreate/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileCreate/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileCreate val)\n: Bool val\n</code></pre>"},{"location":"files-FileCreate/#parameters","title":"Parameters","text":"<ul> <li>that: FileCreate val</li> </ul>"},{"location":"files-FileCreate/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileCreate/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileCreate val)\n: Bool val\n</code></pre>"},{"location":"files-FileCreate/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileCreate val</li> </ul>"},{"location":"files-FileCreate/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileEOF/","title":"FileEOF","text":"<p>[Source] <pre><code>primitive val FileEOF\n</code></pre></p>"},{"location":"files-FileEOF/#constructors","title":"Constructors","text":""},{"location":"files-FileEOF/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileEOF val^\n</code></pre>"},{"location":"files-FileEOF/#returns","title":"Returns","text":"<ul> <li>FileEOF val^</li> </ul>"},{"location":"files-FileEOF/#public-functions","title":"Public Functions","text":""},{"location":"files-FileEOF/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileEOF val)\n: Bool val\n</code></pre>"},{"location":"files-FileEOF/#parameters","title":"Parameters","text":"<ul> <li>that: FileEOF val</li> </ul>"},{"location":"files-FileEOF/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileEOF/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileEOF val)\n: Bool val\n</code></pre>"},{"location":"files-FileEOF/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileEOF val</li> </ul>"},{"location":"files-FileEOF/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileErrNo/","title":"FileErrNo","text":"<p>[Source] <pre><code>type FileErrNo is\n  (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)\n</code></pre></p>"},{"location":"files-FileErrNo/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)</li> </ul>"},{"location":"files-FileError/","title":"FileError","text":"<p>[Source] <pre><code>primitive val FileError\n</code></pre></p>"},{"location":"files-FileError/#constructors","title":"Constructors","text":""},{"location":"files-FileError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileError val^\n</code></pre>"},{"location":"files-FileError/#returns","title":"Returns","text":"<ul> <li>FileError val^</li> </ul>"},{"location":"files-FileError/#public-functions","title":"Public Functions","text":""},{"location":"files-FileError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileError val)\n: Bool val\n</code></pre>"},{"location":"files-FileError/#parameters","title":"Parameters","text":"<ul> <li>that: FileError val</li> </ul>"},{"location":"files-FileError/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileError val)\n: Bool val\n</code></pre>"},{"location":"files-FileError/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileError val</li> </ul>"},{"location":"files-FileError/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileExec/","title":"FileExec","text":"<p>[Source] <pre><code>primitive val FileExec\n</code></pre></p>"},{"location":"files-FileExec/#constructors","title":"Constructors","text":""},{"location":"files-FileExec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileExec val^\n</code></pre>"},{"location":"files-FileExec/#returns","title":"Returns","text":"<ul> <li>FileExec val^</li> </ul>"},{"location":"files-FileExec/#public-functions","title":"Public Functions","text":""},{"location":"files-FileExec/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileExec/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileExec/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileExec val)\n: Bool val\n</code></pre>"},{"location":"files-FileExec/#parameters","title":"Parameters","text":"<ul> <li>that: FileExec val</li> </ul>"},{"location":"files-FileExec/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileExec/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileExec val)\n: Bool val\n</code></pre>"},{"location":"files-FileExec/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileExec val</li> </ul>"},{"location":"files-FileExec/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileExists/","title":"FileExists","text":"<p>[Source] <pre><code>primitive val FileExists\n</code></pre></p>"},{"location":"files-FileExists/#constructors","title":"Constructors","text":""},{"location":"files-FileExists/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileExists val^\n</code></pre>"},{"location":"files-FileExists/#returns","title":"Returns","text":"<ul> <li>FileExists val^</li> </ul>"},{"location":"files-FileExists/#public-functions","title":"Public Functions","text":""},{"location":"files-FileExists/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileExists val)\n: Bool val\n</code></pre>"},{"location":"files-FileExists/#parameters","title":"Parameters","text":"<ul> <li>that: FileExists val</li> </ul>"},{"location":"files-FileExists/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileExists/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileExists val)\n: Bool val\n</code></pre>"},{"location":"files-FileExists/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileExists val</li> </ul>"},{"location":"files-FileExists/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileInfo/","title":"FileInfo","text":"<p>[Source]</p> <p>This contains file system metadata for a path.</p> <p>A symlink will report information about itself, other than the size which will be the size of the target. A broken symlink will report as much as it can and will set the broken flag.</p> <pre><code>class val FileInfo\n</code></pre>"},{"location":"files-FileInfo/#constructors","title":"Constructors","text":""},{"location":"files-FileInfo/#create","title":"create","text":"<p>[Source]</p> <p>This will raise an error if the FileStat capability isn't available or the path doesn't exist.</p> <pre><code>new val create(\n  from: FilePath val)\n: FileInfo val^ ?\n</code></pre>"},{"location":"files-FileInfo/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-FileInfo/#returns","title":"Returns","text":"<ul> <li>FileInfo val^ ?</li> </ul>"},{"location":"files-FileInfo/#public-fields","title":"Public fields","text":""},{"location":"files-FileInfo/#let-filepath-filepath-val","title":"let filepath: FilePath val","text":"<p>[Source]</p>"},{"location":"files-FileInfo/#let-mode-filemode-val","title":"let mode: FileMode val","text":"<p>[Source]</p> <p>UNIX-style file mode.</p>"},{"location":"files-FileInfo/#let-hard_links-u32-val","title":"let hard_links: U32 val","text":"<p>[Source]</p> <p>Number of hardlinks to this <code>filepath</code>.</p>"},{"location":"files-FileInfo/#let-device-u64-val","title":"let device: U64 val","text":"<p>[Source]</p> <p>OS id of the device containing this <code>filepath</code>. Device IDs consist of a major and minor device id, denoting the type of device and the instance of this type on the system.</p>"},{"location":"files-FileInfo/#let-inode-u64-val","title":"let inode: U64 val","text":"<p>[Source]</p> <p>UNIX specific INODE number of <code>filepath</code>. Is 0 on Windows.</p>"},{"location":"files-FileInfo/#let-uid-u32-val","title":"let uid: U32 val","text":"<p>[Source]</p> <p>UNIX-style user ID of the owner of <code>filepath</code>.</p>"},{"location":"files-FileInfo/#let-gid-u32-val","title":"let gid: U32 val","text":"<p>[Source]</p> <p>UNIX-style user ID of the owning group of <code>filepath</code>.</p>"},{"location":"files-FileInfo/#let-size-usize-val","title":"let size: USize val","text":"<p>[Source]</p> <p>Total size of <code>filepath</code> in bytes.</p> <p>In case of a symlink this is the size of the target, not the symlink itself.</p>"},{"location":"files-FileInfo/#let-access_time-i64-val-i64-val","title":"let access_time: (I64 val , I64 val)","text":"<p>[Source]</p> <p>Time of last access as a tuple of seconds and nanoseconds since the epoch:</p> <pre><code>(let a_secs: I64, let a_nanos: I64) = file_info.access_time\n</code></pre>"},{"location":"files-FileInfo/#let-modified_time-i64-val-i64-val","title":"let modified_time: (I64 val , I64 val)","text":"<p>[Source]</p> <p>Time of last modification as tuple of seconds and nanoseconds since the epoch:</p> <pre><code>(let m_secs: I64, let m_nanos: I64) = file_info.modified_time\n</code></pre>"},{"location":"files-FileInfo/#let-change_time-i64-val-i64-val","title":"let change_time: (I64 val , I64 val)","text":"<p>[Source]</p> <p>Time of the last change either the attributes (number of links, owner, group, file mode, ...) or the content of <code>filepath</code> as a tuple of seconds and nanoseconds since the epoch:</p> <pre><code>(let c_secs: I64, let c_nanos: I64) = file_info.change_time\n</code></pre> <p>On Windows this will be the file creation time.</p>"},{"location":"files-FileInfo/#let-file-bool-val","title":"let file: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to an a regular file.</p>"},{"location":"files-FileInfo/#let-directory-bool-val","title":"let directory: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to a directory.</p>"},{"location":"files-FileInfo/#let-pipe-bool-val","title":"let pipe: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to a named pipe.</p>"},{"location":"files-FileInfo/#let-symlink-bool-val","title":"let symlink: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to a symbolic link.</p>"},{"location":"files-FileInfo/#let-broken-bool-val","title":"let broken: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to a broken symlink.</p>"},{"location":"files-FileLines/","title":"FileLines","text":"<p>[Source]</p> <p>Iterate over the lines in a file.</p> <p>Returns lines without trailing line breaks. Advances the file cursor to the end of each line returned from <code>next</code>.</p> <p>This class buffers the file contents to accumulate full lines. If the file does not contain linebreaks, the whole file content is read and buffered, which might exceed memory resources. Take care.</p> <pre><code>class ref FileLines is\n  Iterator[String iso^] ref\n</code></pre>"},{"location":"files-FileLines/#implements","title":"Implements","text":"<ul> <li>Iterator[String iso^] ref</li> </ul>"},{"location":"files-FileLines/#constructors","title":"Constructors","text":""},{"location":"files-FileLines/#create","title":"create","text":"<p>[Source]</p> <p>Create a FileLines instance on a given file.</p> <p>This instance returns lines from the position of the given <code>file</code> at the time this constructor is called. Later manipulation of the file position is not accounted for. As a result iterating with this class will always return the full file content without gaps or repeated lines.</p> <p><code>min_read_size</code> determines the minimum amount of bytes to read from the file in one go. This class keeps track of the line lengths in the current file and uses the length of the last line as amount of bytes to read next, but it will never read less than <code>min_read_size</code>.</p> <pre><code>new ref create(\n  file: File ref,\n  min_read_size: USize val = 256)\n: FileLines ref^\n</code></pre>"},{"location":"files-FileLines/#parameters","title":"Parameters","text":"<ul> <li>file: File ref</li> <li>min_read_size: USize val = 256</li> </ul>"},{"location":"files-FileLines/#returns","title":"Returns","text":"<ul> <li>FileLines ref^</li> </ul>"},{"location":"files-FileLines/#public-functions","title":"Public Functions","text":""},{"location":"files-FileLines/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun ref has_next()\n: Bool val\n</code></pre>"},{"location":"files-FileLines/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLines/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next line in the file.</p> <pre><code>fun ref next()\n: String iso^ ?\n</code></pre>"},{"location":"files-FileLines/#returns_2","title":"Returns","text":"<ul> <li>String iso^ ?</li> </ul>"},{"location":"files-FileLink/","title":"FileLink","text":"<p>[Source] <pre><code>primitive val FileLink\n</code></pre></p>"},{"location":"files-FileLink/#constructors","title":"Constructors","text":""},{"location":"files-FileLink/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileLink val^\n</code></pre>"},{"location":"files-FileLink/#returns","title":"Returns","text":"<ul> <li>FileLink val^</li> </ul>"},{"location":"files-FileLink/#public-functions","title":"Public Functions","text":""},{"location":"files-FileLink/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileLink/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileLink/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileLink val)\n: Bool val\n</code></pre>"},{"location":"files-FileLink/#parameters","title":"Parameters","text":"<ul> <li>that: FileLink val</li> </ul>"},{"location":"files-FileLink/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLink/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileLink val)\n: Bool val\n</code></pre>"},{"location":"files-FileLink/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileLink val</li> </ul>"},{"location":"files-FileLink/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLookup/","title":"FileLookup","text":"<p>[Source] <pre><code>primitive val FileLookup\n</code></pre></p>"},{"location":"files-FileLookup/#constructors","title":"Constructors","text":""},{"location":"files-FileLookup/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileLookup val^\n</code></pre>"},{"location":"files-FileLookup/#returns","title":"Returns","text":"<ul> <li>FileLookup val^</li> </ul>"},{"location":"files-FileLookup/#public-functions","title":"Public Functions","text":""},{"location":"files-FileLookup/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileLookup/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileLookup/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileLookup val)\n: Bool val\n</code></pre>"},{"location":"files-FileLookup/#parameters","title":"Parameters","text":"<ul> <li>that: FileLookup val</li> </ul>"},{"location":"files-FileLookup/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLookup/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileLookup val)\n: Bool val\n</code></pre>"},{"location":"files-FileLookup/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileLookup val</li> </ul>"},{"location":"files-FileLookup/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileMkdir/","title":"FileMkdir","text":"<p>[Source] <pre><code>primitive val FileMkdir\n</code></pre></p>"},{"location":"files-FileMkdir/#constructors","title":"Constructors","text":""},{"location":"files-FileMkdir/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileMkdir val^\n</code></pre>"},{"location":"files-FileMkdir/#returns","title":"Returns","text":"<ul> <li>FileMkdir val^</li> </ul>"},{"location":"files-FileMkdir/#public-functions","title":"Public Functions","text":""},{"location":"files-FileMkdir/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileMkdir/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileMkdir/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileMkdir val)\n: Bool val\n</code></pre>"},{"location":"files-FileMkdir/#parameters","title":"Parameters","text":"<ul> <li>that: FileMkdir val</li> </ul>"},{"location":"files-FileMkdir/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileMkdir/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileMkdir val)\n: Bool val\n</code></pre>"},{"location":"files-FileMkdir/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileMkdir val</li> </ul>"},{"location":"files-FileMkdir/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileMode/","title":"FileMode","text":"<p>[Source]</p> <p>This stores a UNIX-style mode broken out into a Bool for each bit. For other operating systems, the mapping will be approximate. For example, on Windows, if the file is readable all the read Bools will be set, and if the file is writeable, all the write Bools will be set.</p> <p>The default mode is read/write for the owner, read-only for everyone else.</p> <pre><code>class ref FileMode\n</code></pre>"},{"location":"files-FileMode/#constructors","title":"Constructors","text":""},{"location":"files-FileMode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: FileMode iso^\n</code></pre>"},{"location":"files-FileMode/#returns","title":"Returns","text":"<ul> <li>FileMode iso^</li> </ul>"},{"location":"files-FileMode/#public-fields","title":"Public fields","text":""},{"location":"files-FileMode/#var-setuid-bool-val","title":"var setuid: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the SETUID bit is set.</p>"},{"location":"files-FileMode/#var-setgid-bool-val","title":"var setgid: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the SETGID bit is set.</p>"},{"location":"files-FileMode/#var-sticky-bool-val","title":"var sticky: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the sticky bit is set.</p>"},{"location":"files-FileMode/#var-owner_read-bool-val","title":"var owner_read: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the owning user can read the file.</p>"},{"location":"files-FileMode/#var-owner_write-bool-val","title":"var owner_write: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the owning user can write to the file.</p>"},{"location":"files-FileMode/#var-owner_exec-bool-val","title":"var owner_exec: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the owning user can execute the file.</p>"},{"location":"files-FileMode/#var-group_read-bool-val","title":"var group_read: Bool val","text":"<p>[Source]</p> <p><code>true</code> if members of the owning group can read the file.</p>"},{"location":"files-FileMode/#var-group_write-bool-val","title":"var group_write: Bool val","text":"<p>[Source]</p> <p><code>true</code> if members of the owning group can write to the file.</p>"},{"location":"files-FileMode/#var-group_exec-bool-val","title":"var group_exec: Bool val","text":"<p>[Source]</p> <p><code>true</code> if members of the owning group can execute the file.</p>"},{"location":"files-FileMode/#var-any_read-bool-val","title":"var any_read: Bool val","text":"<p>[Source]</p> <p><code>true</code> if every user can read the file.</p>"},{"location":"files-FileMode/#var-any_write-bool-val","title":"var any_write: Bool val","text":"<p>[Source]</p> <p><code>true</code> if every user can write to the file.</p>"},{"location":"files-FileMode/#var-any_exec-bool-val","title":"var any_exec: Bool val","text":"<p>[Source]</p> <p>`true if every user can execute the file.</p>"},{"location":"files-FileMode/#public-functions","title":"Public Functions","text":""},{"location":"files-FileMode/#exec","title":"exec","text":"<p>[Source]</p> <p>Set the executable flag for everyone.</p> <pre><code>fun ref exec()\n: None val\n</code></pre>"},{"location":"files-FileMode/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileMode/#shared","title":"shared","text":"<p>[Source]</p> <p>Set the write flag for everyone to the same as owner_write.</p> <pre><code>fun ref shared()\n: None val\n</code></pre>"},{"location":"files-FileMode/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileMode/#group","title":"group","text":"<p>[Source]</p> <p>Clear all of the any-user flags.</p> <pre><code>fun ref group()\n: None val\n</code></pre>"},{"location":"files-FileMode/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileMode/#private","title":"private","text":"<p>[Source]</p> <p>Clear all of the group and any-user flags.</p> <pre><code>fun ref private()\n: None val\n</code></pre>"},{"location":"files-FileMode/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileMode/#u32","title":"u32","text":"<p>[Source]</p> <p>Get the OS specific integer for a file mode. On Windows, if any read flag is set, the path is made readable, and if any write flag is set, the path is made writeable.</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"files-FileMode/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileOK/","title":"FileOK","text":"<p>[Source] <pre><code>primitive val FileOK\n</code></pre></p>"},{"location":"files-FileOK/#constructors","title":"Constructors","text":""},{"location":"files-FileOK/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileOK val^\n</code></pre>"},{"location":"files-FileOK/#returns","title":"Returns","text":"<ul> <li>FileOK val^</li> </ul>"},{"location":"files-FileOK/#public-functions","title":"Public Functions","text":""},{"location":"files-FileOK/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileOK val)\n: Bool val\n</code></pre>"},{"location":"files-FileOK/#parameters","title":"Parameters","text":"<ul> <li>that: FileOK val</li> </ul>"},{"location":"files-FileOK/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileOK/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileOK val)\n: Bool val\n</code></pre>"},{"location":"files-FileOK/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileOK val</li> </ul>"},{"location":"files-FileOK/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/","title":"FilePath","text":"<p>[Source]</p> <p>A FilePath represents a capability to access a path. The path will be represented as an absolute path and a set of capabilities for operations on that path.</p> <pre><code>class val FilePath\n</code></pre>"},{"location":"files-FilePath/#constructors","title":"Constructors","text":""},{"location":"files-FilePath/#create","title":"create","text":"<p>[Source]</p> <p>Create a new path to any location.</p> <p>Unless absolute, path' will be relative to the program's working directory.</p> <p>Capabilities are exactly as given.</p> <pre><code>new val create(\n  base: FileAuth val,\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover)\n: FilePath val^\n</code></pre>"},{"location":"files-FilePath/#parameters","title":"Parameters","text":"<ul> <li>base: FileAuth val</li> <li>path': String val</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover</li> </ul>"},{"location":"files-FilePath/#returns","title":"Returns","text":"<ul> <li>FilePath val^</li> </ul>"},{"location":"files-FilePath/#from","title":"from","text":"<p>[Source]</p> <p>Create a new path from an existing <code>FilePath</code>.</p> <p>path' is relative to the existing <code>FilePath</code>, and the existing <code>FilePath</code> must be a prefix of the resulting path.</p> <p>The resulting <code>FilePath</code> will have capabilities that are the intersection of the supplied capabilities and the capabilities of the existing <code>FilePath</code>.</p> <pre><code>new val from(\n  base: FilePath val,\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover)\n: FilePath val^ ?\n</code></pre>"},{"location":"files-FilePath/#parameters_1","title":"Parameters","text":"<ul> <li>base: FilePath val</li> <li>path': String val</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover</li> </ul>"},{"location":"files-FilePath/#returns_1","title":"Returns","text":"<ul> <li>FilePath val^ ?</li> </ul>"},{"location":"files-FilePath/#mkdtemp","title":"mkdtemp","text":"<p>[Source]</p> <p>Create a temporary directory and returns a path to it. The directory's name will begin with <code>prefix</code>.</p> <p>If <code>FileAuth</code> is provided, the resulting <code>FilePath</code> will be relative to the program's working directory. Otherwise, it will be relative to the existing <code>FilePath</code>, and the existing <code>FilePath</code> must be a prefix of the resulting path.</p> <p>The resulting <code>FilePath</code> will have capabilities that are the intersection of the supplied capabilities and the capabilities on the base.</p> <pre><code>new val mkdtemp(\n  base: (FileAuth val | FilePath val),\n  prefix: String val = \"\",\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover)\n: FilePath val^ ?\n</code></pre>"},{"location":"files-FilePath/#parameters_2","title":"Parameters","text":"<ul> <li>base: (FileAuth val | FilePath val)</li> <li>prefix: String val = \"\"</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover</li> </ul>"},{"location":"files-FilePath/#returns_2","title":"Returns","text":"<ul> <li>FilePath val^ ?</li> </ul>"},{"location":"files-FilePath/#public-fields","title":"Public fields","text":""},{"location":"files-FilePath/#let-path-string-val","title":"let path: String val","text":"<p>[Source]</p> <p>Absolute filesystem path.</p>"},{"location":"files-FilePath/#let-caps-flagsfilecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-fileexec-val-u32-val-ref","title":"let caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref","text":"<p>[Source]</p> <p>Set of capabilities for operations on <code>path</code>.</p>"},{"location":"files-FilePath/#public-functions","title":"Public Functions","text":""},{"location":"files-FilePath/#join","title":"join","text":"<p>[Source]</p> <p>Return a new path relative to this one.</p> <pre><code>fun val join(\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover)\n: FilePath val ?\n</code></pre>"},{"location":"files-FilePath/#parameters_3","title":"Parameters","text":"<ul> <li>path': String val</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover</li> </ul>"},{"location":"files-FilePath/#returns_3","title":"Returns","text":"<ul> <li>FilePath val ?</li> </ul>"},{"location":"files-FilePath/#walk","title":"walk","text":"<p>[Source]</p> <p>Walks a directory structure starting at this.</p> <p><code>handler(dir_path, dir_entries)</code> will be called for each directory starting with this one. The handler can control which subdirectories are expanded by removing them from the <code>dir_entries</code> list.</p> <pre><code>fun val walk(\n  handler: WalkHandler ref,\n  follow_links: Bool val = false)\n: None val\n</code></pre>"},{"location":"files-FilePath/#parameters_4","title":"Parameters","text":"<ul> <li>handler: WalkHandler ref</li> <li>follow_links: Bool val = false</li> </ul>"},{"location":"files-FilePath/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FilePath/#canonical","title":"canonical","text":"<p>[Source]</p> <p>Return the equivalent canonical absolute path. Raise an error if there isn't one.</p> <pre><code>fun val canonical()\n: FilePath val ?\n</code></pre>"},{"location":"files-FilePath/#returns_5","title":"Returns","text":"<ul> <li>FilePath val ?</li> </ul>"},{"location":"files-FilePath/#exists","title":"exists","text":"<p>[Source]</p> <p>Returns true if the path exists. Returns false for a broken symlink.</p> <pre><code>fun val exists()\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#mkdir","title":"mkdir","text":"<p>[Source]</p> <p>Creates the directory. Will recursively create each element. Returns true if the directory exists when we're done, false if it does not. If we do not have the FileStat permission, this will return false even if the directory does exist.</p> <pre><code>fun val mkdir(\n  must_create: Bool val = false)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_5","title":"Parameters","text":"<ul> <li>must_create: Bool val = false</li> </ul>"},{"location":"files-FilePath/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed.</p> <pre><code>fun val remove()\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#rename","title":"rename","text":"<p>[Source]</p> <p>Rename a file or directory.</p> <pre><code>fun box rename(\n  new_path: FilePath val)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_6","title":"Parameters","text":"<ul> <li>new_path: FilePath val</li> </ul>"},{"location":"files-FilePath/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#symlink","title":"symlink","text":"<p>[Source]</p> <p>Create a symlink to a file or directory.</p> <p>Note that on Windows a program must be running with elevated priviledges to be able to create symlinks.</p> <pre><code>fun val symlink(\n  link_name: FilePath val)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_7","title":"Parameters","text":"<ul> <li>link_name: FilePath val</li> </ul>"},{"location":"files-FilePath/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#chmod","title":"chmod","text":"<p>[Source]</p> <p>Set the FileMode for a path.</p> <pre><code>fun box chmod(\n  mode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_8","title":"Parameters","text":"<ul> <li>mode: FileMode box</li> </ul>"},{"location":"files-FilePath/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#chown","title":"chown","text":"<p>[Source]</p> <p>Set the owner and group for a path. Does nothing on Windows.</p> <pre><code>fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_9","title":"Parameters","text":"<ul> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-FilePath/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#touch","title":"touch","text":"<p>[Source]</p> <p>Set the last access and modification times of a path to now.</p> <pre><code>fun box touch()\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#set_time","title":"set_time","text":"<p>[Source]</p> <p>Set the last access and modification times of a path to the given values.</p> <pre><code>fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_10","title":"Parameters","text":"<ul> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-FilePath/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePermissionDenied/","title":"FilePermissionDenied","text":"<p>[Source] <pre><code>primitive val FilePermissionDenied\n</code></pre></p>"},{"location":"files-FilePermissionDenied/#constructors","title":"Constructors","text":""},{"location":"files-FilePermissionDenied/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FilePermissionDenied val^\n</code></pre>"},{"location":"files-FilePermissionDenied/#returns","title":"Returns","text":"<ul> <li>FilePermissionDenied val^</li> </ul>"},{"location":"files-FilePermissionDenied/#public-functions","title":"Public Functions","text":""},{"location":"files-FilePermissionDenied/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FilePermissionDenied val)\n: Bool val\n</code></pre>"},{"location":"files-FilePermissionDenied/#parameters","title":"Parameters","text":"<ul> <li>that: FilePermissionDenied val</li> </ul>"},{"location":"files-FilePermissionDenied/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePermissionDenied/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FilePermissionDenied val)\n: Bool val\n</code></pre>"},{"location":"files-FilePermissionDenied/#parameters_1","title":"Parameters","text":"<ul> <li>that: FilePermissionDenied val</li> </ul>"},{"location":"files-FilePermissionDenied/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRead/","title":"FileRead","text":"<p>[Source] <pre><code>primitive val FileRead\n</code></pre></p>"},{"location":"files-FileRead/#constructors","title":"Constructors","text":""},{"location":"files-FileRead/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileRead val^\n</code></pre>"},{"location":"files-FileRead/#returns","title":"Returns","text":"<ul> <li>FileRead val^</li> </ul>"},{"location":"files-FileRead/#public-functions","title":"Public Functions","text":""},{"location":"files-FileRead/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileRead/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileRead/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileRead val)\n: Bool val\n</code></pre>"},{"location":"files-FileRead/#parameters","title":"Parameters","text":"<ul> <li>that: FileRead val</li> </ul>"},{"location":"files-FileRead/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRead/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileRead val)\n: Bool val\n</code></pre>"},{"location":"files-FileRead/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileRead val</li> </ul>"},{"location":"files-FileRead/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRemove/","title":"FileRemove","text":"<p>[Source] <pre><code>primitive val FileRemove\n</code></pre></p>"},{"location":"files-FileRemove/#constructors","title":"Constructors","text":""},{"location":"files-FileRemove/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileRemove val^\n</code></pre>"},{"location":"files-FileRemove/#returns","title":"Returns","text":"<ul> <li>FileRemove val^</li> </ul>"},{"location":"files-FileRemove/#public-functions","title":"Public Functions","text":""},{"location":"files-FileRemove/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileRemove/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileRemove/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileRemove val)\n: Bool val\n</code></pre>"},{"location":"files-FileRemove/#parameters","title":"Parameters","text":"<ul> <li>that: FileRemove val</li> </ul>"},{"location":"files-FileRemove/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRemove/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileRemove val)\n: Bool val\n</code></pre>"},{"location":"files-FileRemove/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileRemove val</li> </ul>"},{"location":"files-FileRemove/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRename/","title":"FileRename","text":"<p>[Source] <pre><code>primitive val FileRename\n</code></pre></p>"},{"location":"files-FileRename/#constructors","title":"Constructors","text":""},{"location":"files-FileRename/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileRename val^\n</code></pre>"},{"location":"files-FileRename/#returns","title":"Returns","text":"<ul> <li>FileRename val^</li> </ul>"},{"location":"files-FileRename/#public-functions","title":"Public Functions","text":""},{"location":"files-FileRename/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileRename/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileRename/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileRename val)\n: Bool val\n</code></pre>"},{"location":"files-FileRename/#parameters","title":"Parameters","text":"<ul> <li>that: FileRename val</li> </ul>"},{"location":"files-FileRename/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRename/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileRename val)\n: Bool val\n</code></pre>"},{"location":"files-FileRename/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileRename val</li> </ul>"},{"location":"files-FileRename/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileSeek/","title":"FileSeek","text":"<p>[Source] <pre><code>primitive val FileSeek\n</code></pre></p>"},{"location":"files-FileSeek/#constructors","title":"Constructors","text":""},{"location":"files-FileSeek/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileSeek val^\n</code></pre>"},{"location":"files-FileSeek/#returns","title":"Returns","text":"<ul> <li>FileSeek val^</li> </ul>"},{"location":"files-FileSeek/#public-functions","title":"Public Functions","text":""},{"location":"files-FileSeek/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileSeek/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileSeek/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileSeek val)\n: Bool val\n</code></pre>"},{"location":"files-FileSeek/#parameters","title":"Parameters","text":"<ul> <li>that: FileSeek val</li> </ul>"},{"location":"files-FileSeek/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileSeek/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileSeek val)\n: Bool val\n</code></pre>"},{"location":"files-FileSeek/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileSeek val</li> </ul>"},{"location":"files-FileSeek/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileStat/","title":"FileStat","text":"<p>[Source] <pre><code>primitive val FileStat\n</code></pre></p>"},{"location":"files-FileStat/#constructors","title":"Constructors","text":""},{"location":"files-FileStat/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileStat val^\n</code></pre>"},{"location":"files-FileStat/#returns","title":"Returns","text":"<ul> <li>FileStat val^</li> </ul>"},{"location":"files-FileStat/#public-functions","title":"Public Functions","text":""},{"location":"files-FileStat/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileStat/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileStat/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileStat val)\n: Bool val\n</code></pre>"},{"location":"files-FileStat/#parameters","title":"Parameters","text":"<ul> <li>that: FileStat val</li> </ul>"},{"location":"files-FileStat/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileStat/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileStat val)\n: Bool val\n</code></pre>"},{"location":"files-FileStat/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileStat val</li> </ul>"},{"location":"files-FileStat/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileStream/","title":"FileStream","text":"<p>[Source]</p> <p>Asynchronous access to a File object. Wraps file operations print, write, printv and writev. The File will be disposed through File._final.</p> <pre><code>actor tag FileStream is\n  OutStream tag\n</code></pre>"},{"location":"files-FileStream/#implements","title":"Implements","text":"<ul> <li>OutStream tag</li> </ul>"},{"location":"files-FileStream/#constructors","title":"Constructors","text":""},{"location":"files-FileStream/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  file: File iso)\n: FileStream tag^\n</code></pre>"},{"location":"files-FileStream/#parameters","title":"Parameters","text":"<ul> <li>file: File iso</li> </ul>"},{"location":"files-FileStream/#returns","title":"Returns","text":"<ul> <li>FileStream tag^</li> </ul>"},{"location":"files-FileStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"files-FileStream/#print","title":"print","text":"<p>[Source]</p> <p>Print some bytes and insert a newline afterwards.</p> <pre><code>be print(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"files-FileStream/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"files-FileStream/#write","title":"write","text":"<p>[Source]</p> <p>Print some bytes without inserting a newline afterwards.</p> <pre><code>be write(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"files-FileStream/#parameters_2","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"files-FileStream/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>be printv(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"files-FileStream/#parameters_3","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"files-FileStream/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>be writev(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"files-FileStream/#parameters_4","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"files-FileStream/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush pending data to write.</p> <pre><code>be flush()\n</code></pre>"},{"location":"files-FileSync/","title":"FileSync","text":"<p>[Source] <pre><code>primitive val FileSync\n</code></pre></p>"},{"location":"files-FileSync/#constructors","title":"Constructors","text":""},{"location":"files-FileSync/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileSync val^\n</code></pre>"},{"location":"files-FileSync/#returns","title":"Returns","text":"<ul> <li>FileSync val^</li> </ul>"},{"location":"files-FileSync/#public-functions","title":"Public Functions","text":""},{"location":"files-FileSync/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileSync/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileSync/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileSync val)\n: Bool val\n</code></pre>"},{"location":"files-FileSync/#parameters","title":"Parameters","text":"<ul> <li>that: FileSync val</li> </ul>"},{"location":"files-FileSync/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileSync/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileSync val)\n: Bool val\n</code></pre>"},{"location":"files-FileSync/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileSync val</li> </ul>"},{"location":"files-FileSync/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileTime/","title":"FileTime","text":"<p>[Source] <pre><code>primitive val FileTime\n</code></pre></p>"},{"location":"files-FileTime/#constructors","title":"Constructors","text":""},{"location":"files-FileTime/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileTime val^\n</code></pre>"},{"location":"files-FileTime/#returns","title":"Returns","text":"<ul> <li>FileTime val^</li> </ul>"},{"location":"files-FileTime/#public-functions","title":"Public Functions","text":""},{"location":"files-FileTime/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileTime/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileTime/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileTime val)\n: Bool val\n</code></pre>"},{"location":"files-FileTime/#parameters","title":"Parameters","text":"<ul> <li>that: FileTime val</li> </ul>"},{"location":"files-FileTime/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileTime/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileTime val)\n: Bool val\n</code></pre>"},{"location":"files-FileTime/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileTime val</li> </ul>"},{"location":"files-FileTime/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileTruncate/","title":"FileTruncate","text":"<p>[Source] <pre><code>primitive val FileTruncate\n</code></pre></p>"},{"location":"files-FileTruncate/#constructors","title":"Constructors","text":""},{"location":"files-FileTruncate/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileTruncate val^\n</code></pre>"},{"location":"files-FileTruncate/#returns","title":"Returns","text":"<ul> <li>FileTruncate val^</li> </ul>"},{"location":"files-FileTruncate/#public-functions","title":"Public Functions","text":""},{"location":"files-FileTruncate/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileTruncate/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileTruncate/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileTruncate val)\n: Bool val\n</code></pre>"},{"location":"files-FileTruncate/#parameters","title":"Parameters","text":"<ul> <li>that: FileTruncate val</li> </ul>"},{"location":"files-FileTruncate/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileTruncate/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileTruncate val)\n: Bool val\n</code></pre>"},{"location":"files-FileTruncate/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileTruncate val</li> </ul>"},{"location":"files-FileTruncate/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileWrite/","title":"FileWrite","text":"<p>[Source] <pre><code>primitive val FileWrite\n</code></pre></p>"},{"location":"files-FileWrite/#constructors","title":"Constructors","text":""},{"location":"files-FileWrite/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileWrite val^\n</code></pre>"},{"location":"files-FileWrite/#returns","title":"Returns","text":"<ul> <li>FileWrite val^</li> </ul>"},{"location":"files-FileWrite/#public-functions","title":"Public Functions","text":""},{"location":"files-FileWrite/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileWrite/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileWrite/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FileWrite val)\n: Bool val\n</code></pre>"},{"location":"files-FileWrite/#parameters","title":"Parameters","text":"<ul> <li>that: FileWrite val</li> </ul>"},{"location":"files-FileWrite/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileWrite/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FileWrite val)\n: Bool val\n</code></pre>"},{"location":"files-FileWrite/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileWrite val</li> </ul>"},{"location":"files-FileWrite/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-OpenFile/","title":"OpenFile","text":"<p>[Source]</p> <p>Open a File for read only.</p> <pre><code>primitive val OpenFile\n</code></pre>"},{"location":"files-OpenFile/#constructors","title":"Constructors","text":""},{"location":"files-OpenFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: OpenFile val^\n</code></pre>"},{"location":"files-OpenFile/#returns","title":"Returns","text":"<ul> <li>OpenFile val^</li> </ul>"},{"location":"files-OpenFile/#public-functions","title":"Public Functions","text":""},{"location":"files-OpenFile/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)\n</code></pre>"},{"location":"files-OpenFile/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-OpenFile/#returns_1","title":"Returns","text":"<ul> <li>(File ref | FileOK val | FileError val |      FileEOF val | FileBadFileNumber val | FileExists val |      FilePermissionDenied val)</li> </ul>"},{"location":"files-OpenFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: OpenFile val)\n: Bool val\n</code></pre>"},{"location":"files-OpenFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: OpenFile val</li> </ul>"},{"location":"files-OpenFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-OpenFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: OpenFile val)\n: Bool val\n</code></pre>"},{"location":"files-OpenFile/#parameters_2","title":"Parameters","text":"<ul> <li>that: OpenFile val</li> </ul>"},{"location":"files-OpenFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/","title":"Path","text":"<p>[Source]</p> <p>Operations on paths that do not require a capability. The operations can be used to manipulate path names, but give no access to the resulting paths.</p> <pre><code>primitive val Path\n</code></pre>"},{"location":"files-Path/#constructors","title":"Constructors","text":""},{"location":"files-Path/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Path val^\n</code></pre>"},{"location":"files-Path/#returns","title":"Returns","text":"<ul> <li>Path val^</li> </ul>"},{"location":"files-Path/#public-functions","title":"Public Functions","text":""},{"location":"files-Path/#is_sep","title":"is_sep","text":"<p>[Source]</p> <p>Determine if a byte is a path separator.</p> <pre><code>fun box is_sep(\n  c: U8 val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters","title":"Parameters","text":"<ul> <li>c: U8 val</li> </ul>"},{"location":"files-Path/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#sep","title":"sep","text":"<p>[Source]</p> <p>Return the path separator as a string.</p> <pre><code>fun tag sep()\n: String val\n</code></pre>"},{"location":"files-Path/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#is_abs","title":"is_abs","text":"<p>[Source]</p> <p>Return true if the path is an absolute path.</p> <pre><code>fun box is_abs(\n  path: String val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_1","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#join","title":"join","text":"<p>[Source]</p> <p>Join two paths together. If the next_path is absolute, simply return it. The returned path will be cleaned.</p> <pre><code>fun box join(\n  path: String val,\n  next_path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_2","title":"Parameters","text":"<ul> <li>path: String val</li> <li>next_path: String val</li> </ul>"},{"location":"files-Path/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#clean","title":"clean","text":"<p>[Source]</p> <p>Replace multiple separators with a single separator. Convert / to the OS separator. Remove instances of . from the path. Remove instances of .. and the preceding path element from the path. The result will have no trailing slash unless it is a root directory. If the result would be empty, \".\" will be returned instead.</p> <pre><code>fun box clean(\n  path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_3","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#normcase","title":"normcase","text":"<p>[Source]</p> <p>Normalizes the case of path for the runtime platform.</p> <pre><code>fun box normcase(\n  path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_4","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#cwd","title":"cwd","text":"<p>[Source]</p> <p>Returns the program's working directory. Setting the working directory is not supported, as it is not concurrency-safe.</p> <pre><code>fun box cwd()\n: String val\n</code></pre>"},{"location":"files-Path/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#abs","title":"abs","text":"<p>[Source]</p> <p>Returns a cleaned, absolute path.</p> <pre><code>fun box abs(\n  path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_5","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#rel","title":"rel","text":"<p>[Source]</p> <p>Returns a path such that Path.join(to, Path.rel(to, target)) == target. Raises an error if this isn't possible.</p> <pre><code>fun box rel(\n  to: String val,\n  target: String val)\n: String val ?\n</code></pre>"},{"location":"files-Path/#parameters_6","title":"Parameters","text":"<ul> <li>to: String val</li> <li>target: String val</li> </ul>"},{"location":"files-Path/#returns_9","title":"Returns","text":"<ul> <li>String val ?</li> </ul>"},{"location":"files-Path/#split","title":"split","text":"<p>[Source]</p> <p>Splits the path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. The path in head will be cleaned before it is returned. In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dir() and base().</p> <pre><code>fun box split(\n  path: String val,\n  separator: String val = call)\n: (String val , String val)\n</code></pre>"},{"location":"files-Path/#parameters_7","title":"Parameters","text":"<ul> <li>path: String val</li> <li>separator: String val = call</li> </ul>"},{"location":"files-Path/#returns_10","title":"Returns","text":"<ul> <li>(String val , String val)</li> </ul>"},{"location":"files-Path/#base","title":"base","text":"<p>[Source]</p> <p>Return the path after the last separator, or the whole path if there is no separator. If <code>with_ext</code> is <code>false</code>, the extension as defined by the <code>ext()</code> method will be omitted from the result.</p> <pre><code>fun box base(\n  path: String val,\n  with_ext: Bool val = true)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_8","title":"Parameters","text":"<ul> <li>path: String val</li> <li>with_ext: Bool val = true</li> </ul>"},{"location":"files-Path/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#dir","title":"dir","text":"<p>[Source]</p> <p>Return a cleaned path before the last separator, or the whole path if there is no separator.</p> <pre><code>fun box dir(\n  path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_9","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#ext","title":"ext","text":"<p>[Source]</p> <p>Return the file extension, i.e. the part after the last dot as long as that dot is after all separators. Return an empty string for no extension.</p> <pre><code>fun box ext(\n  path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_10","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#volume","title":"volume","text":"<p>[Source]</p> <p>On Windows, this returns the drive letter or UNC base at the beginning of the path, if there is one. Otherwise, this returns an empty string.</p> <pre><code>fun box volume(\n  path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_11","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#from_slash","title":"from_slash","text":"<p>[Source]</p> <p>Changes each / in the path to the OS specific separator.</p> <pre><code>fun box from_slash(\n  path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_12","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_15","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#to_slash","title":"to_slash","text":"<p>[Source]</p> <p>Changes each OS specific separator in the path to /.</p> <pre><code>fun box to_slash(\n  path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_13","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_16","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#canonical","title":"canonical","text":"<p>[Source]</p> <p>Return the equivalent canonical absolute path. Raise an error if there isn't one.</p> <pre><code>fun box canonical(\n  path: String val)\n: String val ?\n</code></pre>"},{"location":"files-Path/#parameters_14","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_17","title":"Returns","text":"<ul> <li>String val ?</li> </ul>"},{"location":"files-Path/#is_list_sep","title":"is_list_sep","text":"<p>[Source]</p> <p>Determine if a byte is a path list separator.</p> <pre><code>fun box is_list_sep(\n  c: U8 val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_15","title":"Parameters","text":"<ul> <li>c: U8 val</li> </ul>"},{"location":"files-Path/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#list_sep","title":"list_sep","text":"<p>[Source]</p> <p>Return the path list separator as a string.</p> <pre><code>fun box list_sep()\n: String val\n</code></pre>"},{"location":"files-Path/#returns_19","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#split_list","title":"split_list","text":"<p>[Source]</p> <p>Separate a list of paths into an array of cleaned paths.</p> <pre><code>fun box split_list(\n  path: String val)\n: Array[String val] iso^\n</code></pre>"},{"location":"files-Path/#parameters_16","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_20","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"files-Path/#random","title":"random","text":"<p>[Source]</p> <p>Returns a pseudo-random base, suitable as a temporary file name or directory name, but not guaranteed to not already exist.</p> <pre><code>fun box random(\n  len: USize val = 6)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_17","title":"Parameters","text":"<ul> <li>len: USize val = 6</li> </ul>"},{"location":"files-Path/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Path val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_18","title":"Parameters","text":"<ul> <li>that: Path val</li> </ul>"},{"location":"files-Path/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Path val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_19","title":"Parameters","text":"<ul> <li>that: Path val</li> </ul>"},{"location":"files-Path/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-WalkHandler/","title":"WalkHandler","text":"<p>[Source]</p> <p>A handler for <code>FilePath.walk</code>.</p> <pre><code>interface ref WalkHandler\n</code></pre>"},{"location":"files-WalkHandler/#public-functions","title":"Public Functions","text":""},{"location":"files-WalkHandler/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\n  dir_path: FilePath val,\n  dir_entries: Array[String val] ref)\n: None val\n</code></pre>"},{"location":"files-WalkHandler/#parameters","title":"Parameters","text":"<ul> <li>dir_path: FilePath val</li> <li>dir_entries: Array[String val] ref</li> </ul>"},{"location":"files-WalkHandler/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"format--index/","title":"Format package","text":"<p>The Format package provides support for formatting strings. It can be used to set things like width, padding and alignment, as well as controlling the way numbers are displayed (decimal, octal, hexadecimal).</p>"},{"location":"format--index/#example-program","title":"Example program","text":"<pre><code>use \"format\"\n\nactor Main\n  fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String =&gt;\n    Format(desc where width = 10)\n      + \":\"\n      + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt)\n\n  new create(env: Env) =&gt;\n    try\n      (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?)\n      env.out.print(disp(\"x\", x))\n      env.out.print(disp(\"y\", y))\n      env.out.print(disp(\"hex(x)\", x, FormatHex))\n      env.out.print(disp(\"hex(y)\", y, FormatHex))\n      env.out.print(disp(\"x * y\", x * y))\n    else\n      let exe = try env.args(0)? else \"fmt_example\" end\n      env.err.print(\"Usage: \" + exe + \" NUMBER1 NUMBER2\")\n    end\n</code></pre>"},{"location":"format--index/#public-types","title":"Public Types","text":"<ul> <li>type Align</li> <li>primitive AlignCenter</li> <li>primitive AlignLeft</li> <li>primitive AlignRight</li> <li>primitive Format</li> <li>primitive FormatBinary</li> <li>primitive FormatBinaryBare</li> <li>primitive FormatDefault</li> <li>primitive FormatExp</li> <li>primitive FormatExpLarge</li> <li>primitive FormatFix</li> <li>primitive FormatFixLarge</li> <li>type FormatFloat</li> <li>primitive FormatGeneral</li> <li>primitive FormatGeneralLarge</li> <li>primitive FormatHex</li> <li>primitive FormatHexBare</li> <li>primitive FormatHexSmall</li> <li>primitive FormatHexSmallBare</li> <li>type FormatInt</li> <li>primitive FormatOctal</li> <li>primitive FormatOctalBare</li> <li>trait FormatSpec</li> <li>primitive FormatUTF32</li> <li>primitive PrefixDefault</li> <li>type PrefixNumber</li> <li>primitive PrefixSign</li> <li>primitive PrefixSpace</li> <li>trait PrefixSpec</li> </ul>"},{"location":"format-Align/","title":"Align","text":"<p>[Source] <pre><code>type Align is\n  (AlignLeft val | AlignRight val | AlignCenter val)\n</code></pre></p>"},{"location":"format-Align/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(AlignLeft val | AlignRight val | AlignCenter val)</li> </ul>"},{"location":"format-AlignCenter/","title":"AlignCenter","text":"<p>[Source] <pre><code>primitive val AlignCenter\n</code></pre></p>"},{"location":"format-AlignCenter/#constructors","title":"Constructors","text":""},{"location":"format-AlignCenter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AlignCenter val^\n</code></pre>"},{"location":"format-AlignCenter/#returns","title":"Returns","text":"<ul> <li>AlignCenter val^</li> </ul>"},{"location":"format-AlignCenter/#public-functions","title":"Public Functions","text":""},{"location":"format-AlignCenter/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AlignCenter val)\n: Bool val\n</code></pre>"},{"location":"format-AlignCenter/#parameters","title":"Parameters","text":"<ul> <li>that: AlignCenter val</li> </ul>"},{"location":"format-AlignCenter/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignCenter/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AlignCenter val)\n: Bool val\n</code></pre>"},{"location":"format-AlignCenter/#parameters_1","title":"Parameters","text":"<ul> <li>that: AlignCenter val</li> </ul>"},{"location":"format-AlignCenter/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignLeft/","title":"AlignLeft","text":"<p>[Source] <pre><code>primitive val AlignLeft\n</code></pre></p>"},{"location":"format-AlignLeft/#constructors","title":"Constructors","text":""},{"location":"format-AlignLeft/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AlignLeft val^\n</code></pre>"},{"location":"format-AlignLeft/#returns","title":"Returns","text":"<ul> <li>AlignLeft val^</li> </ul>"},{"location":"format-AlignLeft/#public-functions","title":"Public Functions","text":""},{"location":"format-AlignLeft/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AlignLeft val)\n: Bool val\n</code></pre>"},{"location":"format-AlignLeft/#parameters","title":"Parameters","text":"<ul> <li>that: AlignLeft val</li> </ul>"},{"location":"format-AlignLeft/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignLeft/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AlignLeft val)\n: Bool val\n</code></pre>"},{"location":"format-AlignLeft/#parameters_1","title":"Parameters","text":"<ul> <li>that: AlignLeft val</li> </ul>"},{"location":"format-AlignLeft/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignRight/","title":"AlignRight","text":"<p>[Source] <pre><code>primitive val AlignRight\n</code></pre></p>"},{"location":"format-AlignRight/#constructors","title":"Constructors","text":""},{"location":"format-AlignRight/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AlignRight val^\n</code></pre>"},{"location":"format-AlignRight/#returns","title":"Returns","text":"<ul> <li>AlignRight val^</li> </ul>"},{"location":"format-AlignRight/#public-functions","title":"Public Functions","text":""},{"location":"format-AlignRight/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: AlignRight val)\n: Bool val\n</code></pre>"},{"location":"format-AlignRight/#parameters","title":"Parameters","text":"<ul> <li>that: AlignRight val</li> </ul>"},{"location":"format-AlignRight/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignRight/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: AlignRight val)\n: Bool val\n</code></pre>"},{"location":"format-AlignRight/#parameters_1","title":"Parameters","text":"<ul> <li>that: AlignRight val</li> </ul>"},{"location":"format-AlignRight/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-Format/","title":"Format","text":"<p>[Source]</p> <p>Provides functions for generating formatted strings.</p> <ul> <li>fmt. Format to use.</li> <li>prefix. Prefix to use.</li> <li>prec. Precision to use. The exact meaning of this depends on the type, but is generally the number of characters used for all, or part, of the string. A value of -1 indicates that the default for the type should be used.</li> <li>width. The minimum number of characters that will be in the produced string. If necessary the string will be padded with the fill character to make it long enough.</li> <li>align. Specify whether fill characters should be added at the beginning or end of the generated string, or both.</li> <li>fill. The character to pad a string with if is is shorter than width.</li> </ul> <pre><code>primitive val Format\n</code></pre>"},{"location":"format-Format/#constructors","title":"Constructors","text":""},{"location":"format-Format/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Format val^\n</code></pre>"},{"location":"format-Format/#returns","title":"Returns","text":"<ul> <li>Format val^</li> </ul>"},{"location":"format-Format/#public-functions","title":"Public Functions","text":""},{"location":"format-Format/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  str: String val,\n  fmt: FormatDefault val = reference,\n  prefix: PrefixDefault val = reference,\n  prec: USize val = call,\n  width: USize val = 0,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = reference,\n  fill: U32 val = 32)\n: String iso^\n</code></pre>"},{"location":"format-Format/#parameters","title":"Parameters","text":"<ul> <li>str: String val</li> <li>fmt: FormatDefault val = reference</li> <li>prefix: PrefixDefault val = reference</li> <li>prec: USize val = call</li> <li>width: USize val = 0</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val) = reference</li> <li>fill: U32 val = 32</li> </ul>"},{"location":"format-Format/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-Format/#inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera","title":"int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A])]","text":"<p>[Source]</p> <pre><code>fun box int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) &amp; Integer[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val) = reference,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference,\n  prec: USize val = call,\n  width: USize val = 0,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = reference,\n  fill: U32 val = 32)\n: String iso^\n</code></pre>"},{"location":"format-Format/#parameters_1","title":"Parameters","text":"<ul> <li>x: A</li> <li>fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val |      FormatBinaryBare val | FormatOctal val | FormatOctalBare val |      FormatHex val | FormatHexBare val | FormatHexSmall val |      FormatHexSmallBare val) = reference</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference</li> <li>prec: USize val = call</li> <li>width: USize val = 0</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val) = reference</li> <li>fill: U32 val = 32</li> </ul>"},{"location":"format-Format/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-Format/#floata-f32-val-f64-val-floatingpointa","title":"float[A: ((F32 val | F64 val) &amp; FloatingPoint[A])]","text":"<p>[Source]</p> <pre><code>fun box float[A: ((F32 val | F64 val) &amp; FloatingPoint[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \n    FormatFix val | FormatFixLarge val | FormatGeneral val | \n    FormatGeneralLarge val) = reference,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference,\n  prec: USize val = 6,\n  width: USize val = 0,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = reference,\n  fill: U32 val = 32)\n: String iso^\n</code></pre>"},{"location":"format-Format/#parameters_2","title":"Parameters","text":"<ul> <li>x: A</li> <li>fmt: (FormatDefault val | FormatExp val | FormatExpLarge val |      FormatFix val | FormatFixLarge val | FormatGeneral val |      FormatGeneralLarge val) = reference</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference</li> <li>prec: USize val = 6</li> <li>width: USize val = 0</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val) = reference</li> <li>fill: U32 val = 32</li> </ul>"},{"location":"format-Format/#returns_3","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-Format/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Format val)\n: Bool val\n</code></pre>"},{"location":"format-Format/#parameters_3","title":"Parameters","text":"<ul> <li>that: Format val</li> </ul>"},{"location":"format-Format/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-Format/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Format val)\n: Bool val\n</code></pre>"},{"location":"format-Format/#parameters_4","title":"Parameters","text":"<ul> <li>that: Format val</li> </ul>"},{"location":"format-Format/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatBinary/","title":"FormatBinary","text":"<p>[Source] <pre><code>primitive val FormatBinary is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatBinary/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatBinary/#constructors","title":"Constructors","text":""},{"location":"format-FormatBinary/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatBinary val^\n</code></pre>"},{"location":"format-FormatBinary/#returns","title":"Returns","text":"<ul> <li>FormatBinary val^</li> </ul>"},{"location":"format-FormatBinary/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatBinary/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatBinary val)\n: Bool val\n</code></pre>"},{"location":"format-FormatBinary/#parameters","title":"Parameters","text":"<ul> <li>that: FormatBinary val</li> </ul>"},{"location":"format-FormatBinary/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatBinary/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatBinary val)\n: Bool val\n</code></pre>"},{"location":"format-FormatBinary/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatBinary val</li> </ul>"},{"location":"format-FormatBinary/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatBinaryBare/","title":"FormatBinaryBare","text":"<p>[Source] <pre><code>primitive val FormatBinaryBare is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatBinaryBare/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatBinaryBare/#constructors","title":"Constructors","text":""},{"location":"format-FormatBinaryBare/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatBinaryBare val^\n</code></pre>"},{"location":"format-FormatBinaryBare/#returns","title":"Returns","text":"<ul> <li>FormatBinaryBare val^</li> </ul>"},{"location":"format-FormatBinaryBare/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatBinaryBare/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatBinaryBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatBinaryBare/#parameters","title":"Parameters","text":"<ul> <li>that: FormatBinaryBare val</li> </ul>"},{"location":"format-FormatBinaryBare/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatBinaryBare/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatBinaryBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatBinaryBare/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatBinaryBare val</li> </ul>"},{"location":"format-FormatBinaryBare/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatDefault/","title":"FormatDefault","text":"<p>[Source] <pre><code>primitive val FormatDefault is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatDefault/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatDefault/#constructors","title":"Constructors","text":""},{"location":"format-FormatDefault/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatDefault val^\n</code></pre>"},{"location":"format-FormatDefault/#returns","title":"Returns","text":"<ul> <li>FormatDefault val^</li> </ul>"},{"location":"format-FormatDefault/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatDefault/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatDefault val)\n: Bool val\n</code></pre>"},{"location":"format-FormatDefault/#parameters","title":"Parameters","text":"<ul> <li>that: FormatDefault val</li> </ul>"},{"location":"format-FormatDefault/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatDefault/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatDefault val)\n: Bool val\n</code></pre>"},{"location":"format-FormatDefault/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatDefault val</li> </ul>"},{"location":"format-FormatDefault/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatExp/","title":"FormatExp","text":"<p>[Source] <pre><code>primitive val FormatExp is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatExp/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatExp/#constructors","title":"Constructors","text":""},{"location":"format-FormatExp/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatExp val^\n</code></pre>"},{"location":"format-FormatExp/#returns","title":"Returns","text":"<ul> <li>FormatExp val^</li> </ul>"},{"location":"format-FormatExp/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatExp/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatExp val)\n: Bool val\n</code></pre>"},{"location":"format-FormatExp/#parameters","title":"Parameters","text":"<ul> <li>that: FormatExp val</li> </ul>"},{"location":"format-FormatExp/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatExp/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatExp val)\n: Bool val\n</code></pre>"},{"location":"format-FormatExp/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatExp val</li> </ul>"},{"location":"format-FormatExp/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatExpLarge/","title":"FormatExpLarge","text":"<p>[Source] <pre><code>primitive val FormatExpLarge is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatExpLarge/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatExpLarge/#constructors","title":"Constructors","text":""},{"location":"format-FormatExpLarge/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatExpLarge val^\n</code></pre>"},{"location":"format-FormatExpLarge/#returns","title":"Returns","text":"<ul> <li>FormatExpLarge val^</li> </ul>"},{"location":"format-FormatExpLarge/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatExpLarge/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatExpLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatExpLarge/#parameters","title":"Parameters","text":"<ul> <li>that: FormatExpLarge val</li> </ul>"},{"location":"format-FormatExpLarge/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatExpLarge/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatExpLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatExpLarge/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatExpLarge val</li> </ul>"},{"location":"format-FormatExpLarge/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFix/","title":"FormatFix","text":"<p>[Source] <pre><code>primitive val FormatFix is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatFix/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatFix/#constructors","title":"Constructors","text":""},{"location":"format-FormatFix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatFix val^\n</code></pre>"},{"location":"format-FormatFix/#returns","title":"Returns","text":"<ul> <li>FormatFix val^</li> </ul>"},{"location":"format-FormatFix/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatFix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatFix val)\n: Bool val\n</code></pre>"},{"location":"format-FormatFix/#parameters","title":"Parameters","text":"<ul> <li>that: FormatFix val</li> </ul>"},{"location":"format-FormatFix/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatFix val)\n: Bool val\n</code></pre>"},{"location":"format-FormatFix/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatFix val</li> </ul>"},{"location":"format-FormatFix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFixLarge/","title":"FormatFixLarge","text":"<p>[Source] <pre><code>primitive val FormatFixLarge is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatFixLarge/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatFixLarge/#constructors","title":"Constructors","text":""},{"location":"format-FormatFixLarge/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatFixLarge val^\n</code></pre>"},{"location":"format-FormatFixLarge/#returns","title":"Returns","text":"<ul> <li>FormatFixLarge val^</li> </ul>"},{"location":"format-FormatFixLarge/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatFixLarge/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatFixLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatFixLarge/#parameters","title":"Parameters","text":"<ul> <li>that: FormatFixLarge val</li> </ul>"},{"location":"format-FormatFixLarge/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFixLarge/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatFixLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatFixLarge/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatFixLarge val</li> </ul>"},{"location":"format-FormatFixLarge/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFloat/","title":"FormatFloat","text":"<p>[Source] <pre><code>type FormatFloat is\n  (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)\n</code></pre></p>"},{"location":"format-FormatFloat/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)</li> </ul>"},{"location":"format-FormatGeneral/","title":"FormatGeneral","text":"<p>[Source] <pre><code>primitive val FormatGeneral is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatGeneral/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatGeneral/#constructors","title":"Constructors","text":""},{"location":"format-FormatGeneral/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatGeneral val^\n</code></pre>"},{"location":"format-FormatGeneral/#returns","title":"Returns","text":"<ul> <li>FormatGeneral val^</li> </ul>"},{"location":"format-FormatGeneral/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatGeneral/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatGeneral val)\n: Bool val\n</code></pre>"},{"location":"format-FormatGeneral/#parameters","title":"Parameters","text":"<ul> <li>that: FormatGeneral val</li> </ul>"},{"location":"format-FormatGeneral/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatGeneral/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatGeneral val)\n: Bool val\n</code></pre>"},{"location":"format-FormatGeneral/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatGeneral val</li> </ul>"},{"location":"format-FormatGeneral/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatGeneralLarge/","title":"FormatGeneralLarge","text":"<p>[Source] <pre><code>primitive val FormatGeneralLarge is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatGeneralLarge/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatGeneralLarge/#constructors","title":"Constructors","text":""},{"location":"format-FormatGeneralLarge/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatGeneralLarge val^\n</code></pre>"},{"location":"format-FormatGeneralLarge/#returns","title":"Returns","text":"<ul> <li>FormatGeneralLarge val^</li> </ul>"},{"location":"format-FormatGeneralLarge/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatGeneralLarge/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatGeneralLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatGeneralLarge/#parameters","title":"Parameters","text":"<ul> <li>that: FormatGeneralLarge val</li> </ul>"},{"location":"format-FormatGeneralLarge/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatGeneralLarge/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatGeneralLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatGeneralLarge/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatGeneralLarge val</li> </ul>"},{"location":"format-FormatGeneralLarge/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHex/","title":"FormatHex","text":"<p>[Source] <pre><code>primitive val FormatHex is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatHex/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatHex/#constructors","title":"Constructors","text":""},{"location":"format-FormatHex/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatHex val^\n</code></pre>"},{"location":"format-FormatHex/#returns","title":"Returns","text":"<ul> <li>FormatHex val^</li> </ul>"},{"location":"format-FormatHex/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatHex/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatHex val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHex/#parameters","title":"Parameters","text":"<ul> <li>that: FormatHex val</li> </ul>"},{"location":"format-FormatHex/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHex/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatHex val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHex/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatHex val</li> </ul>"},{"location":"format-FormatHex/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexBare/","title":"FormatHexBare","text":"<p>[Source] <pre><code>primitive val FormatHexBare is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatHexBare/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatHexBare/#constructors","title":"Constructors","text":""},{"location":"format-FormatHexBare/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatHexBare val^\n</code></pre>"},{"location":"format-FormatHexBare/#returns","title":"Returns","text":"<ul> <li>FormatHexBare val^</li> </ul>"},{"location":"format-FormatHexBare/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatHexBare/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatHexBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexBare/#parameters","title":"Parameters","text":"<ul> <li>that: FormatHexBare val</li> </ul>"},{"location":"format-FormatHexBare/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexBare/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatHexBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexBare/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatHexBare val</li> </ul>"},{"location":"format-FormatHexBare/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexSmall/","title":"FormatHexSmall","text":"<p>[Source] <pre><code>primitive val FormatHexSmall is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatHexSmall/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatHexSmall/#constructors","title":"Constructors","text":""},{"location":"format-FormatHexSmall/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatHexSmall val^\n</code></pre>"},{"location":"format-FormatHexSmall/#returns","title":"Returns","text":"<ul> <li>FormatHexSmall val^</li> </ul>"},{"location":"format-FormatHexSmall/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatHexSmall/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatHexSmall val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexSmall/#parameters","title":"Parameters","text":"<ul> <li>that: FormatHexSmall val</li> </ul>"},{"location":"format-FormatHexSmall/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexSmall/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatHexSmall val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexSmall/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatHexSmall val</li> </ul>"},{"location":"format-FormatHexSmall/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexSmallBare/","title":"FormatHexSmallBare","text":"<p>[Source] <pre><code>primitive val FormatHexSmallBare is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatHexSmallBare/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatHexSmallBare/#constructors","title":"Constructors","text":""},{"location":"format-FormatHexSmallBare/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatHexSmallBare val^\n</code></pre>"},{"location":"format-FormatHexSmallBare/#returns","title":"Returns","text":"<ul> <li>FormatHexSmallBare val^</li> </ul>"},{"location":"format-FormatHexSmallBare/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatHexSmallBare/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatHexSmallBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexSmallBare/#parameters","title":"Parameters","text":"<ul> <li>that: FormatHexSmallBare val</li> </ul>"},{"location":"format-FormatHexSmallBare/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexSmallBare/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatHexSmallBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexSmallBare/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatHexSmallBare val</li> </ul>"},{"location":"format-FormatHexSmallBare/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatInt/","title":"FormatInt","text":"<p>[Source] <pre><code>type FormatInt is\n  (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)\n</code></pre></p>"},{"location":"format-FormatInt/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)</li> </ul>"},{"location":"format-FormatOctal/","title":"FormatOctal","text":"<p>[Source] <pre><code>primitive val FormatOctal is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatOctal/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatOctal/#constructors","title":"Constructors","text":""},{"location":"format-FormatOctal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatOctal val^\n</code></pre>"},{"location":"format-FormatOctal/#returns","title":"Returns","text":"<ul> <li>FormatOctal val^</li> </ul>"},{"location":"format-FormatOctal/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatOctal/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatOctal val)\n: Bool val\n</code></pre>"},{"location":"format-FormatOctal/#parameters","title":"Parameters","text":"<ul> <li>that: FormatOctal val</li> </ul>"},{"location":"format-FormatOctal/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatOctal/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatOctal val)\n: Bool val\n</code></pre>"},{"location":"format-FormatOctal/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatOctal val</li> </ul>"},{"location":"format-FormatOctal/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatOctalBare/","title":"FormatOctalBare","text":"<p>[Source] <pre><code>primitive val FormatOctalBare is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatOctalBare/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatOctalBare/#constructors","title":"Constructors","text":""},{"location":"format-FormatOctalBare/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatOctalBare val^\n</code></pre>"},{"location":"format-FormatOctalBare/#returns","title":"Returns","text":"<ul> <li>FormatOctalBare val^</li> </ul>"},{"location":"format-FormatOctalBare/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatOctalBare/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatOctalBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatOctalBare/#parameters","title":"Parameters","text":"<ul> <li>that: FormatOctalBare val</li> </ul>"},{"location":"format-FormatOctalBare/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatOctalBare/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatOctalBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatOctalBare/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatOctalBare val</li> </ul>"},{"location":"format-FormatOctalBare/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatSpec/","title":"FormatSpec","text":"<p>[Source] <pre><code>trait val FormatSpec\n</code></pre></p>"},{"location":"format-FormatUTF32/","title":"FormatUTF32","text":"<p>[Source] <pre><code>primitive val FormatUTF32 is\n  FormatSpec val\n</code></pre></p>"},{"location":"format-FormatUTF32/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatUTF32/#constructors","title":"Constructors","text":""},{"location":"format-FormatUTF32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatUTF32 val^\n</code></pre>"},{"location":"format-FormatUTF32/#returns","title":"Returns","text":"<ul> <li>FormatUTF32 val^</li> </ul>"},{"location":"format-FormatUTF32/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatUTF32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: FormatUTF32 val)\n: Bool val\n</code></pre>"},{"location":"format-FormatUTF32/#parameters","title":"Parameters","text":"<ul> <li>that: FormatUTF32 val</li> </ul>"},{"location":"format-FormatUTF32/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatUTF32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: FormatUTF32 val)\n: Bool val\n</code></pre>"},{"location":"format-FormatUTF32/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatUTF32 val</li> </ul>"},{"location":"format-FormatUTF32/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixDefault/","title":"PrefixDefault","text":"<p>[Source] <pre><code>primitive val PrefixDefault is\n  PrefixSpec val\n</code></pre></p>"},{"location":"format-PrefixDefault/#implements","title":"Implements","text":"<ul> <li>PrefixSpec val</li> </ul>"},{"location":"format-PrefixDefault/#constructors","title":"Constructors","text":""},{"location":"format-PrefixDefault/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PrefixDefault val^\n</code></pre>"},{"location":"format-PrefixDefault/#returns","title":"Returns","text":"<ul> <li>PrefixDefault val^</li> </ul>"},{"location":"format-PrefixDefault/#public-functions","title":"Public Functions","text":""},{"location":"format-PrefixDefault/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: PrefixDefault val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixDefault/#parameters","title":"Parameters","text":"<ul> <li>that: PrefixDefault val</li> </ul>"},{"location":"format-PrefixDefault/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixDefault/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: PrefixDefault val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixDefault/#parameters_1","title":"Parameters","text":"<ul> <li>that: PrefixDefault val</li> </ul>"},{"location":"format-PrefixDefault/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixNumber/","title":"PrefixNumber","text":"<p>[Source] <pre><code>type PrefixNumber is\n  (PrefixDefault val | PrefixSpace val | PrefixSign val)\n</code></pre></p>"},{"location":"format-PrefixNumber/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(PrefixDefault val | PrefixSpace val | PrefixSign val)</li> </ul>"},{"location":"format-PrefixSign/","title":"PrefixSign","text":"<p>[Source] <pre><code>primitive val PrefixSign is\n  PrefixSpec val\n</code></pre></p>"},{"location":"format-PrefixSign/#implements","title":"Implements","text":"<ul> <li>PrefixSpec val</li> </ul>"},{"location":"format-PrefixSign/#constructors","title":"Constructors","text":""},{"location":"format-PrefixSign/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PrefixSign val^\n</code></pre>"},{"location":"format-PrefixSign/#returns","title":"Returns","text":"<ul> <li>PrefixSign val^</li> </ul>"},{"location":"format-PrefixSign/#public-functions","title":"Public Functions","text":""},{"location":"format-PrefixSign/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: PrefixSign val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixSign/#parameters","title":"Parameters","text":"<ul> <li>that: PrefixSign val</li> </ul>"},{"location":"format-PrefixSign/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixSign/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: PrefixSign val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixSign/#parameters_1","title":"Parameters","text":"<ul> <li>that: PrefixSign val</li> </ul>"},{"location":"format-PrefixSign/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixSpace/","title":"PrefixSpace","text":"<p>[Source] <pre><code>primitive val PrefixSpace is\n  PrefixSpec val\n</code></pre></p>"},{"location":"format-PrefixSpace/#implements","title":"Implements","text":"<ul> <li>PrefixSpec val</li> </ul>"},{"location":"format-PrefixSpace/#constructors","title":"Constructors","text":""},{"location":"format-PrefixSpace/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PrefixSpace val^\n</code></pre>"},{"location":"format-PrefixSpace/#returns","title":"Returns","text":"<ul> <li>PrefixSpace val^</li> </ul>"},{"location":"format-PrefixSpace/#public-functions","title":"Public Functions","text":""},{"location":"format-PrefixSpace/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: PrefixSpace val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixSpace/#parameters","title":"Parameters","text":"<ul> <li>that: PrefixSpace val</li> </ul>"},{"location":"format-PrefixSpace/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixSpace/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: PrefixSpace val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixSpace/#parameters_1","title":"Parameters","text":"<ul> <li>that: PrefixSpace val</li> </ul>"},{"location":"format-PrefixSpace/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixSpec/","title":"PrefixSpec","text":"<p>[Source] <pre><code>trait val PrefixSpec\n</code></pre></p>"},{"location":"itertools--index/","title":"Itertools Package","text":"<p>The itertools package provides the <code>Iter</code> class for doing useful things with iterators. It is Inspired by Python's itertools library, Rust's Iterator, and Elixir's Enum and Stream.</p>"},{"location":"itertools--index/#iter","title":"Iter","text":"<p>The Iter class wraps iterators so that additional methods may be applied to it. Some methods, such as fold and collect, run through the underlying iterator in order to return a result. Others, such as map and filter, are lazy. This means that they return another Iter so that the resulting values are computed one by one as needed. Lazy methods return Iter types.</p> <p>For example, the following code creates an Iter from the values of an array containing the numbers 1 through 5, increments each number by one, filters out any odd numbers, and prints the rest.</p> <pre><code>let xs = Iter[I64]([1; 2; 3; 4; 5].values())\n  .map[I64]({(x) =&gt; x + 1 })\n  .filter({(x) =&gt; (x % 2) == 0 })\n  .map[None]({(x) =&gt; env.out.print(x.string()) })\n</code></pre> <p>This will result in an iterator that prints the numbers 2, 4, and 6. However, due to the lazy nature of the map and filter, no iteration has actually occurred and nothing will be printed. One solution to this would be to loop over the resulting Iter as so:</p> <pre><code>for x in xs do\n  None\nend\n</code></pre> <p>This will trigger the iteration and print out the values 2, 4, and 6. This is where the <code>run</code> method comes in handy by doing the iteration without the need for a loop. So the final code would be as follows:</p> <pre><code>Iter[I64]([1; 2; 3; 4; 5].values())\n  .map[I64]({(x) =&gt; x + 1 })\n  .filter({(x) =&gt; (x % 2) == 0 })\n  .map[None]({(x) =&gt; env.out.print(x.string()) })\n  .run()\n</code></pre> <p>Output:</p> <pre><code>2\n4\n6\n</code></pre>"},{"location":"itertools--index/#public-types","title":"Public Types","text":"<ul> <li>class Iter</li> </ul>"},{"location":"itertools-Iter/","title":"Iter[A: A]","text":"<p>[Source]</p> <p>Wrapper class containing methods to modify iterators.</p> <pre><code>class ref Iter[A: A] is\n  Iterator[A] ref\n</code></pre>"},{"location":"itertools-Iter/#implements","title":"Implements","text":"<ul> <li>Iterator[A] ref</li> </ul>"},{"location":"itertools-Iter/#constructors","title":"Constructors","text":""},{"location":"itertools-Iter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  iter: Iterator[A] ref)\n: Iter[A] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters","title":"Parameters","text":"<ul> <li>iter: Iterator[A] ref</li> </ul>"},{"location":"itertools-Iter/#returns","title":"Returns","text":"<ul> <li>Iter[A] ref^</li> </ul>"},{"location":"itertools-Iter/#maybe","title":"maybe","text":"<p>[Source]</p> <pre><code>new ref maybe(\n  value: (A | None val))\n: Iter[A] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_1","title":"Parameters","text":"<ul> <li>value: (A | None val)</li> </ul>"},{"location":"itertools-Iter/#returns_1","title":"Returns","text":"<ul> <li>Iter[A] ref^</li> </ul>"},{"location":"itertools-Iter/#chain","title":"chain","text":"<p>[Source]</p> <p>Take an iterator of iterators and return an Iter containing the items of the first one, then the second one, and so on.</p>"},{"location":"itertools-Iter/#example","title":"Example","text":"<p><pre><code>let xs = [as I64: 1; 2].values()\nlet ys = [as I64: 3; 4].values()\n\nIter[I64].chain([xs; ys].values())\n</code></pre> <code>1 2 3 4</code></p> <pre><code>new ref chain(\n  outer_iterator: Iterator[Iterator[A] ref] ref)\n: Iter[A] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_2","title":"Parameters","text":"<ul> <li>outer_iterator: Iterator[Iterator[A] ref] ref</li> </ul>"},{"location":"itertools-Iter/#returns_2","title":"Returns","text":"<ul> <li>Iter[A] ref^</li> </ul>"},{"location":"itertools-Iter/#repeat_value","title":"repeat_value","text":"<p>[Source]</p> <p>Create an iterator that returns the given value forever.</p>"},{"location":"itertools-Iter/#example_1","title":"Example","text":"<p><pre><code>Iter[U32].repeat_value(7)\n</code></pre> <code>7 7 7 7 7 7 7 7 7 ...</code></p> <pre><code>new ref repeat_value(\n  value: A)\n: Iter[A] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_3","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"itertools-Iter/#returns_3","title":"Returns","text":"<ul> <li>Iter[A] ref^</li> </ul>"},{"location":"itertools-Iter/#public-functions","title":"Public Functions","text":""},{"location":"itertools-Iter/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun ref has_next()\n: Bool val\n</code></pre>"},{"location":"itertools-Iter/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"itertools-Iter/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: A ?\n</code></pre>"},{"location":"itertools-Iter/#returns_5","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"itertools-Iter/#next_or","title":"next_or","text":"<p>[Source]</p> <p>Return the next value, or the given default.</p>"},{"location":"itertools-Iter/#example_2","title":"Example","text":"<p><pre><code>let x: (U64 | None) = 42\nIter[U64].maybe(x).next_or(0)\n</code></pre> <code>42</code></p> <pre><code>fun ref next_or(\n  default: A)\n: A\n</code></pre>"},{"location":"itertools-Iter/#parameters_4","title":"Parameters","text":"<ul> <li>default: A</li> </ul>"},{"location":"itertools-Iter/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"itertools-Iter/#map_statefulb-b","title":"map_stateful[B: B]","text":"<p>[Source]</p> <p>Allows stateful transformation of each element from the iterator, similar to <code>map</code>.</p> <pre><code>fun ref map_stateful[B: B](\n  f: {ref(A!): B ?}[A, B] ref)\n: Iter[B] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_5","title":"Parameters","text":"<ul> <li>f: {ref(A!): B ?}[A, B] ref</li> </ul>"},{"location":"itertools-Iter/#returns_7","title":"Returns","text":"<ul> <li>Iter[B] ref^</li> </ul>"},{"location":"itertools-Iter/#filter_stateful","title":"filter_stateful","text":"<p>[Source]</p> <p>Allows filtering of elements based on a stateful adapter, similar to <code>filter</code>.</p> <pre><code>fun ref filter_stateful(\n  f: {ref(A!): Bool ?}[A] ref)\n: Iter[A!] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_6","title":"Parameters","text":"<ul> <li>f: {ref(A!): Bool ?}[A] ref</li> </ul>"},{"location":"itertools-Iter/#returns_8","title":"Returns","text":"<ul> <li>Iter[A!] ref^</li> </ul>"},{"location":"itertools-Iter/#filter_map_statefulb-b","title":"filter_map_stateful[B: B]","text":"<p>[Source]</p> <p>Allows stateful modification to the stream of elements from an iterator, similar to <code>filter_map</code>.</p> <pre><code>fun ref filter_map_stateful[B: B](\n  f: {ref(A!): (B^ | None) ?}[A, B] ref)\n: Iter[B] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_7","title":"Parameters","text":"<ul> <li>f: {ref(A!): (B^ | None) ?}[A, B] ref</li> </ul>"},{"location":"itertools-Iter/#returns_9","title":"Returns","text":"<ul> <li>Iter[B] ref^</li> </ul>"},{"location":"itertools-Iter/#all","title":"all","text":"<p>[Source]</p> <p>Return false if at least one value of the iterator fails to match the predicate <code>f</code>. This method short-circuits at the first value where the predicate returns false, otherwise true is returned.</p>"},{"location":"itertools-Iter/#examples","title":"Examples","text":"<p><pre><code>Iter[I64]([2; 4; 6].values())\n  .all({(x) =&gt; (x % 2) == 0 })\n</code></pre> <code>true</code></p> <p><pre><code>Iter[I64]([2; 3; 4].values())\n  .all({(x) =&gt; (x % 2) == 0 })\n</code></pre> <code>false</code></p> <pre><code>fun ref all(\n  f: {(A!): Bool ?}[A] box)\n: Bool val\n</code></pre>"},{"location":"itertools-Iter/#parameters_8","title":"Parameters","text":"<ul> <li>f: {(A!): Bool ?}[A] box</li> </ul>"},{"location":"itertools-Iter/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"itertools-Iter/#any","title":"any","text":"<p>[Source]</p> <p>Return true if at least one value of the iterator matches the predicate <code>f</code>. This method short-circuits at the first value where the predicate returns true, otherwise false is returned.</p>"},{"location":"itertools-Iter/#examples_1","title":"Examples","text":"<p><pre><code>Iter[I64]([2; 4; 6].values())\n  .any({(I64) =&gt; (x % 2) == 1 })\n</code></pre> <code>false</code></p> <p><pre><code>Iter[I64]([2; 3; 4].values())\n  .any({(I64) =&gt; (x % 2) == 1 })\n</code></pre> <code>true</code></p> <pre><code>fun ref any(\n  f: {(A!): Bool ?}[A] box)\n: Bool val\n</code></pre>"},{"location":"itertools-Iter/#parameters_9","title":"Parameters","text":"<ul> <li>f: {(A!): Bool ?}[A] box</li> </ul>"},{"location":"itertools-Iter/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"itertools-Iter/#collectoptional-b-seqa-ref","title":"collect[optional B: Seq[A!] ref]","text":"<p>[Source]</p> <p>Push each value from the iterator into the collection <code>coll</code>.</p>"},{"location":"itertools-Iter/#example_3","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .collect(Array[I64](3))\n</code></pre> <code>[1, 2, 3]</code></p> <pre><code>fun ref collect[optional B: Seq[A!] ref](\n  coll: B)\n: B^\n</code></pre>"},{"location":"itertools-Iter/#parameters_10","title":"Parameters","text":"<ul> <li>coll: B</li> </ul>"},{"location":"itertools-Iter/#returns_12","title":"Returns","text":"<ul> <li>B^</li> </ul>"},{"location":"itertools-Iter/#count","title":"count","text":"<p>[Source]</p> <p>Return the number of values in the iterator.</p>"},{"location":"itertools-Iter/#example_4","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .count()\n</code></pre> <code>3</code></p> <pre><code>fun ref count()\n: USize val\n</code></pre>"},{"location":"itertools-Iter/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"itertools-Iter/#cycle","title":"cycle","text":"<p>[Source]</p> <p>Repeatedly cycle through the values from the iterator.</p> <p>WARNING: The values returned by the original iterator are cached, so the input iterator should be finite.</p>"},{"location":"itertools-Iter/#example_5","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .cycle()\n</code></pre> <code>1 2 3 1 2 3 1 2 3 ...</code></p> <pre><code>fun ref cycle()\n: Iter[A!] ref^\n</code></pre>"},{"location":"itertools-Iter/#returns_14","title":"Returns","text":"<ul> <li>Iter[A!] ref^</li> </ul>"},{"location":"itertools-Iter/#dedupoptional-h-hashfunctiona-val","title":"dedup[optional H: HashFunction[A] val]","text":"<p>[Source]</p> <p>Return an iterator that removes duplicates from consecutive identical elements. Equality is determined by the HashFunction <code>H</code>.</p>"},{"location":"itertools-Iter/#example_6","title":"Example","text":"<p><pre><code>Iter[USize]([as USize: 1; 1; 2; 3; 3; 2; 2].values())\n  .dedup()\n</code></pre> <code>1 2 3 2</code></p> <pre><code>fun ref dedup[optional H: HashFunction[A] val]()\n: Iter[A!] ref^\n</code></pre>"},{"location":"itertools-Iter/#returns_15","title":"Returns","text":"<ul> <li>Iter[A!] ref^</li> </ul>"},{"location":"itertools-Iter/#enumoptional-b-realb-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val","title":"enum[optional B: (Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>An iterator which yields the current iteration count as well as the next value from the iterator.</p>"},{"location":"itertools-Iter/#example_7","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .enum()\n</code></pre> <code>(0, 1) (1, 2) (2, 3)</code></p> <pre><code>fun ref enum[optional B: (Real[B] val &amp; (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))]()\n: Iter[(B , A)] ref^\n</code></pre>"},{"location":"itertools-Iter/#returns_16","title":"Returns","text":"<ul> <li>Iter[(B , A)] ref^</li> </ul>"},{"location":"itertools-Iter/#filter","title":"filter","text":"<p>[Source]</p> <p>Return an iterator that only returns items that match the predicate <code>f</code>.</p>"},{"location":"itertools-Iter/#example_8","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .filter({(x) =&gt; (x % 2) == 0 })\n</code></pre> <code>2 4 6</code></p> <pre><code>fun ref filter(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A!] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_11","title":"Parameters","text":"<ul> <li>f: {(A!): Bool ?}[A] box</li> </ul>"},{"location":"itertools-Iter/#returns_17","title":"Returns","text":"<ul> <li>Iter[A!] ref^</li> </ul>"},{"location":"itertools-Iter/#find","title":"find","text":"<p>[Source]</p> <p>Return the nth value in the iterator that satisfies the predicate <code>f</code>.</p>"},{"location":"itertools-Iter/#examples_2","title":"Examples","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .find({(x) =&gt; (x % 2) == 0 })\n</code></pre> <code>2</code></p> <p><pre><code>Iter[I64]([1; 2; 3; 4].values())\n  .find({(x) =&gt; (x % 2) == 0 }, 2)\n</code></pre> <code>4</code></p> <pre><code>fun ref find(\n  f: {(A!): Bool ?}[A] box,\n  n: USize val = 1)\n: A! ?\n</code></pre>"},{"location":"itertools-Iter/#parameters_12","title":"Parameters","text":"<ul> <li>f: {(A!): Bool ?}[A] box</li> <li>n: USize val = 1</li> </ul>"},{"location":"itertools-Iter/#returns_18","title":"Returns","text":"<ul> <li>A! ?</li> </ul>"},{"location":"itertools-Iter/#filter_mapb-b","title":"filter_map[B: B]","text":"<p>[Source]</p> <p>Return an iterator which applies <code>f</code> to each element. If <code>None</code> is returned, then the iterator will try again by applying <code>f</code> to the next element. Otherwise, the value of type <code>B</code> is returned.</p>"},{"location":"itertools-Iter/#example_9","title":"Example","text":"<p><pre><code>Iter[I64]([as I64: 1; -2; 4; 7; -5])\n  .filter_map[USize](\n    {(i: I64): (USize | None) =&gt; if i &gt;= 0 then i.usize() end })\n</code></pre> <code>1 4 7</code> <pre><code>```pony\nfun ref filter_map[B: B](\n  f: {(A!): (B^ | None) ?}[A, B] box)\n: Iter[B] ref^\n</code></pre></p>"},{"location":"itertools-Iter/#parameters_13","title":"Parameters","text":"<ul> <li>f: {(A!): (B^ | None) ?}[A, B] box</li> </ul>"},{"location":"itertools-Iter/#returns_19","title":"Returns","text":"<ul> <li>Iter[B] ref^</li> </ul>"},{"location":"itertools-Iter/#flat_mapb-b","title":"flat_map[B: B]","text":"<p>[Source]</p> <p>Return an iterator over the values of the iterators produced from the application of the given function.</p>"},{"location":"itertools-Iter/#example_10","title":"Example","text":"<p><pre><code>Iter[String]([\"alpha\"; \"beta\"; \"gamma\"])\n  .flat_map[U8]({(s: String): Iterator[U8] =&gt; s.values() })\n</code></pre> <code>a l p h a b e t a g a m m a</code></p> <pre><code>fun ref flat_map[B: B](\n  f: {(A!): Iterator[B] ?}[A, B] box)\n: Iter[B] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_14","title":"Parameters","text":"<ul> <li>f: {(A!): Iterator[B] ?}[A, B] box</li> </ul>"},{"location":"itertools-Iter/#returns_20","title":"Returns","text":"<ul> <li>Iter[B] ref^</li> </ul>"},{"location":"itertools-Iter/#foldb-b","title":"fold[B: B]","text":"<p>[Source]</p> <p>Apply a function to every element, producing an accumulated value.</p>"},{"location":"itertools-Iter/#example_11","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .fold[I64](0, {(sum, x) =&gt; sum + x })\n</code></pre> <code>6</code></p> <pre><code>fun ref fold[B: B](\n  acc: B,\n  f: {(B, A!): B^}[A, B] box)\n: B^\n</code></pre>"},{"location":"itertools-Iter/#parameters_15","title":"Parameters","text":"<ul> <li>acc: B</li> <li>f: {(B, A!): B^}[A, B] box</li> </ul>"},{"location":"itertools-Iter/#returns_21","title":"Returns","text":"<ul> <li>B^</li> </ul>"},{"location":"itertools-Iter/#fold_partialb-b","title":"fold_partial[B: B]","text":"<p>[Source]</p> <p>A partial version of <code>fold</code>.</p> <pre><code>fun ref fold_partial[B: B](\n  acc: B,\n  f: {(B, A!): B^ ?}[A, B] box)\n: B^ ?\n</code></pre>"},{"location":"itertools-Iter/#parameters_16","title":"Parameters","text":"<ul> <li>acc: B</li> <li>f: {(B, A!): B^ ?}[A, B] box</li> </ul>"},{"location":"itertools-Iter/#returns_22","title":"Returns","text":"<ul> <li>B^ ?</li> </ul>"},{"location":"itertools-Iter/#interleave","title":"interleave","text":"<p>[Source]</p> <p>Return an iterator that alternates the values of the original iterator and the other until both run out.</p>"},{"location":"itertools-Iter/#example_12","title":"Example","text":"<p><pre><code>Iter[USize](Range(0, 4))\n  .interleave(Range(4, 6))\n</code></pre> <code>0 4 1 5 2 3</code></p> <pre><code>fun ref interleave(\n  other: Iterator[A] ref)\n: Iter[A!] ref\n</code></pre>"},{"location":"itertools-Iter/#parameters_17","title":"Parameters","text":"<ul> <li>other: Iterator[A] ref</li> </ul>"},{"location":"itertools-Iter/#returns_23","title":"Returns","text":"<ul> <li>Iter[A!] ref</li> </ul>"},{"location":"itertools-Iter/#interleave_shortest","title":"interleave_shortest","text":"<p>[Source]</p> <p>Return an iterator that alternates the values of the original iterator and the other until one of them runs out.</p>"},{"location":"itertools-Iter/#example_13","title":"Example","text":"<p><pre><code>Iter[USize](Range(0, 4))\n  .interleave_shortest(Range(4, 6))\n</code></pre> <code>0 4 1 5 2</code></p> <pre><code>fun ref interleave_shortest(\n  other: Iterator[A] ref)\n: Iter[A!] ref\n</code></pre>"},{"location":"itertools-Iter/#parameters_18","title":"Parameters","text":"<ul> <li>other: Iterator[A] ref</li> </ul>"},{"location":"itertools-Iter/#returns_24","title":"Returns","text":"<ul> <li>Iter[A!] ref</li> </ul>"},{"location":"itertools-Iter/#intersperse","title":"intersperse","text":"<p>[Source]</p> <p>Return an iterator that yields the value after every <code>n</code> elements of the original iterator.</p>"},{"location":"itertools-Iter/#example_14","title":"Example","text":"<p><pre><code>Iter[USize](Range(0, 3))\n  .intersperse(8)\n</code></pre> <code>0 8 1 8 2</code></p> <pre><code>fun ref intersperse(\n  value: A,\n  n: USize val = 1)\n: Iter[A!] ref\n</code></pre>"},{"location":"itertools-Iter/#parameters_19","title":"Parameters","text":"<ul> <li>value: A</li> <li>n: USize val = 1</li> </ul>"},{"location":"itertools-Iter/#returns_25","title":"Returns","text":"<ul> <li>Iter[A!] ref</li> </ul>"},{"location":"itertools-Iter/#last","title":"last","text":"<p>[Source]</p> <p>Return the last value of the iterator.</p>"},{"location":"itertools-Iter/#example_15","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .last()\n</code></pre> <code>3</code></p> <pre><code>fun ref last()\n: A ?\n</code></pre>"},{"location":"itertools-Iter/#returns_26","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"itertools-Iter/#mapb-b","title":"map[B: B]","text":"<p>[Source]</p> <p>Return an iterator where each item's value is the application of the given function to the value in the original iterator.</p>"},{"location":"itertools-Iter/#example_16","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .map[I64]({(x) =&gt; x * x })\n</code></pre> <code>1 4 9</code></p> <pre><code>fun ref map[B: B](\n  f: {(A!): B ?}[A, B] box)\n: Iter[B] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_20","title":"Parameters","text":"<ul> <li>f: {(A!): B ?}[A, B] box</li> </ul>"},{"location":"itertools-Iter/#returns_27","title":"Returns","text":"<ul> <li>Iter[B] ref^</li> </ul>"},{"location":"itertools-Iter/#nth","title":"nth","text":"<p>[Source]</p> <p>Return the nth value of the iterator.</p>"},{"location":"itertools-Iter/#example_17","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .nth(2)\n</code></pre> <code>2</code></p> <pre><code>fun ref nth(\n  n: USize val)\n: A ?\n</code></pre>"},{"location":"itertools-Iter/#parameters_21","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"itertools-Iter/#returns_28","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"itertools-Iter/#run","title":"run","text":"<p>[Source]</p> <p>Iterate through the values of the iterator without a for loop. The function <code>on_error</code> will be called if the iterator's <code>has_next</code> method returns true but its <code>next</code> method throws an error.</p>"},{"location":"itertools-Iter/#example_18","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3].values())\n  .map[None]({(x) =&gt; env.out.print(x.string()) })\n  .run()\n</code></pre> <pre><code>1\n2\n3\n</code></pre></p> <pre><code>fun ref run(\n  on_error: {ref()}[A] ref = lambda)\n: None val\n</code></pre>"},{"location":"itertools-Iter/#parameters_22","title":"Parameters","text":"<ul> <li>on_error: {ref()}[A] ref = lambda</li> </ul>"},{"location":"itertools-Iter/#returns_29","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"itertools-Iter/#skip","title":"skip","text":"<p>[Source]</p> <p>Skip the first n values of the iterator.</p>"},{"location":"itertools-Iter/#example_19","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .skip(3)\n</code></pre> <code>4 5 6</code></p> <p><pre><code>Iter[I64]([1; 2; 3].values())\n  .skip(3)\n  .has_next()\n</code></pre> <code>false</code></p> <pre><code>fun ref skip(\n  n: USize val)\n: Iter[A] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_23","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"itertools-Iter/#returns_30","title":"Returns","text":"<ul> <li>Iter[A] ref^</li> </ul>"},{"location":"itertools-Iter/#skip_while","title":"skip_while","text":"<p>[Source]</p> <p>Skip values of the iterator while the predicate <code>f</code> returns true.</p>"},{"location":"itertools-Iter/#example_20","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .skip_while({(x) =&gt; x &lt; 4 })\n</code></pre> <code>4 5 6</code></p> <pre><code>fun ref skip_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A!] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_24","title":"Parameters","text":"<ul> <li>f: {(A!): Bool ?}[A] box</li> </ul>"},{"location":"itertools-Iter/#returns_31","title":"Returns","text":"<ul> <li>Iter[A!] ref^</li> </ul>"},{"location":"itertools-Iter/#step_by","title":"step_by","text":"<p>[Source]</p> <p>Return an iterator that yields every <code>n</code>th element of the original iterator. n == 0 is treated like n == 1 rather than an error.</p>"},{"location":"itertools-Iter/#example_21","title":"Example","text":"<p><pre><code>Iter[USize](Range(0, 10))\n  .step_by(2)\n</code></pre> <code>1 3 5 7 9</code></p> <pre><code>fun ref step_by(\n  n: USize val = 1)\n: Iter[A!] ref\n</code></pre>"},{"location":"itertools-Iter/#parameters_25","title":"Parameters","text":"<ul> <li>n: USize val = 1</li> </ul>"},{"location":"itertools-Iter/#returns_32","title":"Returns","text":"<ul> <li>Iter[A!] ref</li> </ul>"},{"location":"itertools-Iter/#take","title":"take","text":"<p>[Source]</p> <p>Return an iterator for the first n elements.</p>"},{"location":"itertools-Iter/#example_22","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .take(3)\n</code></pre> <code>1 2 3</code></p> <pre><code>fun ref take(\n  n: USize val)\n: Iter[A] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_26","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"itertools-Iter/#returns_33","title":"Returns","text":"<ul> <li>Iter[A] ref^</li> </ul>"},{"location":"itertools-Iter/#take_while","title":"take_while","text":"<p>[Source]</p> <p>Return an iterator that returns values while the predicate <code>f</code> returns true. This iterator short-circuits the first time that <code>f</code> returns false or raises an error.</p>"},{"location":"itertools-Iter/#example_23","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .take_while({(x) =&gt; x &lt; 4 })\n</code></pre> <code>1 2 3</code></p> <pre><code>fun ref take_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A!] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_27","title":"Parameters","text":"<ul> <li>f: {(A!): Bool ?}[A] box</li> </ul>"},{"location":"itertools-Iter/#returns_34","title":"Returns","text":"<ul> <li>Iter[A!] ref^</li> </ul>"},{"location":"itertools-Iter/#uniqueoptional-h-hashfunctiona-val","title":"unique[optional H: HashFunction[A] val]","text":"<p>[Source]</p> <p>Return an iterator that filters out elements that have already been produced. Uniqueness is determined by the HashFunction <code>H</code>.</p>"},{"location":"itertools-Iter/#example_24","title":"Example","text":"<p><pre><code>Iter[USize]([as USize: 1; 2; 1; 1; 3; 4; 1].values())\n    .unique()\n</code></pre> <code>1 2 3 4</code></p> <pre><code>fun ref unique[optional H: HashFunction[A] val]()\n: Iter[A!] ref^\n</code></pre>"},{"location":"itertools-Iter/#returns_35","title":"Returns","text":"<ul> <li>Iter[A!] ref^</li> </ul>"},{"location":"itertools-Iter/#zipb-b","title":"zip[B: B]","text":"<p>[Source]</p> <p>Zip two iterators together so that each call to next() results in a tuple with the next value of the first iterator and the next value of the second iterator. The number of items returned is the minimum of the number of items returned by the two iterators.</p>"},{"location":"itertools-Iter/#example_25","title":"Example","text":"<p><pre><code>Iter[I64]([1; 2].values())\n  .zip[I64]([3; 4].values())\n</code></pre> <code>(1, 3) (2, 4)</code></p> <pre><code>fun ref zip[B: B](\n  i2: Iterator[B] ref)\n: Iter[(A , B)] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_28","title":"Parameters","text":"<ul> <li>i2: Iterator[B] ref</li> </ul>"},{"location":"itertools-Iter/#returns_36","title":"Returns","text":"<ul> <li>Iter[(A , B)] ref^</li> </ul>"},{"location":"itertools-Iter/#zip2b-b-c-c","title":"zip2[B: B, C: C]","text":"<p>[Source]</p> <p>Zip three iterators together so that each call to next() results in a tuple with the next value of the first iterator, the next value of the second iterator, and the value of the third iterator. The number of items returned is the minimum of the number of items returned by the three iterators.</p> <pre><code>fun ref zip2[B: B, C: C](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref)\n: Iter[(A , B , C)] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_29","title":"Parameters","text":"<ul> <li>i2: Iterator[B] ref</li> <li>i3: Iterator[C] ref</li> </ul>"},{"location":"itertools-Iter/#returns_37","title":"Returns","text":"<ul> <li>Iter[(A , B , C)] ref^</li> </ul>"},{"location":"itertools-Iter/#zip3b-b-c-c-d-d","title":"zip3[B: B, C: C, D: D]","text":"<p>[Source]</p> <p>Zip four iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators.</p> <pre><code>fun ref zip3[B: B, C: C, D: D](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref)\n: Iter[(A , B , C , D)] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_30","title":"Parameters","text":"<ul> <li>i2: Iterator[B] ref</li> <li>i3: Iterator[C] ref</li> <li>i4: Iterator[D] ref</li> </ul>"},{"location":"itertools-Iter/#returns_38","title":"Returns","text":"<ul> <li>Iter[(A , B , C , D)] ref^</li> </ul>"},{"location":"itertools-Iter/#zip4b-b-c-c-d-d-e-e","title":"zip4[B: B, C: C, D: D, E: E]","text":"<p>[Source]</p> <p>Zip five iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators.</p> <pre><code>fun ref zip4[B: B, C: C, D: D, E: E](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref,\n  i5: Iterator[E] ref)\n: Iter[(A , B , C , D , E)] ref^\n</code></pre>"},{"location":"itertools-Iter/#parameters_31","title":"Parameters","text":"<ul> <li>i2: Iterator[B] ref</li> <li>i3: Iterator[C] ref</li> <li>i4: Iterator[D] ref</li> <li>i5: Iterator[E] ref</li> </ul>"},{"location":"itertools-Iter/#returns_39","title":"Returns","text":"<ul> <li>Iter[(A , B , C , D , E)] ref^</li> </ul>"},{"location":"kiuatan--index/","title":"Kiuatan","text":"<p>Kiuatan (\"horse\" or \"pony\" in Chinook Jargon) is a library for building and running parsers in the Pony programming language.</p> <ul> <li>Kiuatan uses Parsing Expression Grammar semantics, which means:<ul> <li>Choices are ordered, i.e. the parser will always try to parse alternatives in the order they are declared.</li> <li>Sequences are greedy, i.e. the parser will not backtrack from the end of a sequence.</li> <li>You can use positive and negative lookahead that does not advance the match position to constrain greedy sequences.</li> <li>Parsers do not backtrack from successful choices.</li> </ul> </li> <li>Kiuatan parsers are \"packrat\" parsers; they memoize intermediate results, resulting in linear-time parsing.</li> <li>Parsers use Mederios et al's algorithm to handle unlimited left-recursion.</li> </ul>"},{"location":"kiuatan--index/#obtaining-kiuatan","title":"Obtaining Kiuatan","text":""},{"location":"kiuatan--index/#corral","title":"Corral","text":"<p>The easiest way to incorporate Kiuatan into your Pony project is to use Pony Corral.  Once you have it installed, <code>cd</code> to your project's directory and type:</p> <pre><code>corral add github chalcolith/kiuatan\n</code></pre> <p>This will add the library to your project.  You can then build your project with something like:</p> <pre><code>corral fetch\ncorral run -- ponyc .\n</code></pre>"},{"location":"kiuatan--index/#git","title":"Git","text":"<p>You can clone and build Kiuatan directly from GitHub (you must have Corral in your <code>PATH</code>):</p> <pre><code>git clone https://github.com/chalcolith/kiuatan.git\ncd kiuatan\nmake &amp;&amp; make test\n</code></pre> <p>To use Kiuatan in a project without Corral you will need to add <code>kiuatan/kiuatan</code> to your <code>PONYPATH</code> environment variable.</p>"},{"location":"kiuatan--index/#examples","title":"Examples","text":"<p>The Kiuatan repo contains a canonical calulator example of how to use Kiuatan: calc.</p>"},{"location":"kiuatan--index/#concepts","title":"Concepts","text":"<p>Kiuatan grammars can match over source sequences of any type that is</p> <pre><code>S: (Any #read &amp; Equatable[S])\n</code></pre> <p>The most common source type will be <code>U8</code> for parsing UTF-8 text (note that you will need to handle converting UTF-8 into normalized Unicode yourself if necessary).</p>"},{"location":"kiuatan--index/#named-rules","title":"Named Rules","text":"<p>A <code>NamedRule</code> encapsulates and names a grammatical rule that encodes a PEG rule.  To create a rule, you provide a name, a body, and an optional action.  For example, the following rule will match either <code>one two three</code> or <code>one deux three</code>.</p> <pre><code>let rule =\n  recover val\n    let ws = NamedRule[U8](\"WhiteSpace\", Star[U8](Single[U8](\" \\t\"), 1))\n    NamedRule[U8](\"OneTwoThree\",\n      Conj[U8](\n        [ Literal[U8](\"one\")\n          ws\n          Disj[U8]([ Literal[U8](\"two\"); Literal[U8](\"deux\") ])\n          ws\n          Literal[U8](\"three\")\n        ]))\n  end\n</code></pre> <p>You can build the body of a rule from the following combinator classes:</p> <ul> <li><code>Single</code>: matches a single source item.  The constructor takes a set of possibilities to match.  If you provide an empty list, this rule will match any single item.</li> <li><code>Literal</code>: matches a string of items.</li> <li><code>Conj</code>: matches a sequence of child rules.</li> <li><code>Disj</code>: matches one of a number of alternative child rules, in order.  If one of the alternatives matches, but an outer rule fails later, the parser will not backtrack to another alternative.</li> <li><code>Error</code>: will trigger an error with the given message.</li> <li><code>Look</code>: will attempt to match its child rule, but will not advance the match position.</li> <li><code>Neg</code>: will succeed if its child rule does not match, and will not advance the match position.</li> <li><code>Star</code>: will match a number of repetitions of its child rule.  You can specify a minimum or maximum number of times to match.</li> <li><code>Bind</code>: will bind the result of its child rule to an existing variable.  See the calc example for an example of how to use <code>Bind</code>.</li> <li><code>Condition</code>: will succeed only if its child matches and the given condition returns <code>true</code>.</li> </ul>"},{"location":"kiuatan--index/#recursion","title":"Recursion","text":"<p>In order to allow recursive rules, you can create a rule with no body and set its body later using the <code>set_body()</code> method:</p> <pre><code>// Add &lt;- Add Op Num | Num\n// Op &lt;- [+-]\n// Num &lt;- [0-9]+\nlet rule: NamedRule[U8] val =\n  recover val\n    let add = NamedRule[U8](\"Add\", None)\n    let num = NamedRule[U8](\"Num\", Star[U8](Single[U8](\"0123456789\"), 1))\n    let op = NamedRule[U8](\"Op\", Single[U8](\"+-\"))\n    let body = Disj[U8]([Conj[U8]([add; op; num]); num])\n    add.set_body(body)\n    add\n  end\n</code></pre> <p>Note that Kiuatan can handle both direct and indirect left-recursion.</p>"},{"location":"kiuatan--index/#source","title":"Source","text":"<p>A <code>Source</code> is a sequence of sequences of your source type.  Internally this is represented as a linked list of sequences, called \"segments\".  The idea behind this is that you can swap out individual segments of text that your <code>Parser</code> actor knows about, while maintaining the parse memo for the other segments.  This allows a text editor, for example, to handle localized changes without re-parsing the whole source file.</p>"},{"location":"kiuatan--index/#parser","title":"Parser","text":"<p>A <code>Parser</code> actor knows about the source you are parsing, and holds a memo of parsing results across parse attempts.</p> <p>In order to attempt to parse a particular sequence (or sequence of segments) of items, create a Parser actor, giving it an initial source, and then call its <code>parse</code> behaviour, passing a rule to use and a callback for when the parse either succeeds or fails:</p> <pre><code>  let segment = \"one two three\"\n  let parser = Parser[U8]([segment])\n  parser.parse(rule, {(result: Result[U8]) =&gt;\n    match result\n    | let success: Success[U8] =&gt;\n      Debug.out(\"succeeded!\")\n    | let failure: Failure[U8] =&gt;\n      Debug.out(\"failed\")\n    end\n  })\n</code></pre> <p>The generic parameters for the <code>Parser</code> actor type (and other types in Kiuatan) are as follows:</p> <ul> <li><code>S</code>: this is the \"source type\"; i.e. your <code>Source</code>s will be sequences of values of this type.</li> <li><code>D</code>: this is a \"data\" type. You can pass a value of this type to the <code>Parser.parse()</code> behaviour, and this value will be passed to your semantic <code>Action</code>s.</li> <li><code>V</code>: this is the \"result value\" type. For each successful parse result, zero or more result values (from child results) will be passed to your semantic <code>Action</code>, if present.  If a rule has no action, child result values will be combined and passed to the next highest action.</li> </ul>"},{"location":"kiuatan--index/#updating-source","title":"Updating Source","text":"<p>You can update a parser's source by calling its <code>remove_segment</code> and <code>insert_segment</code> behaviours.  The next time you initiate a parse, the parser's source will have been updated.</p>"},{"location":"kiuatan--index/#results","title":"Results","text":"<p>If a parse succeeds, the result will be of type <code>Success</code>, which represents the concrete parse tree.  You can get details about the location of the match and results from child rules.</p> <p>If a parse fails, the result will be of type <code>Failure</code>, which contains some information about the location in the source where the failure occurred, and possibly an error message.</p>"},{"location":"kiuatan--index/#actions-and-result-values","title":"Actions and Result Values","text":"<p>If you wish, you can build a more abstract parse tree using semantic <code>Action</code>s that you pass to rules.  These actions should return a \"result value\" of your desired type.  The result values from child rule successes are passed to the action.</p> <p>Actions also receive a <code>Bindings</code> map; you can access bound result values from child parses using this; you must return the map with the result of the action.</p>"},{"location":"kiuatan--index/#public-types","title":"Public Types","text":"<ul> <li>interface Action</li> <li>class Bind</li> <li>type Binding</li> <li>class Bindings</li> <li>class Cond</li> <li>class Conj</li> <li>class Disj</li> <li>class Error</li> <li>primitive ErrorMsg</li> <li>class Failure</li> <li>class Literal</li> <li>class Loc</li> <li>class Look</li> <li>class NamedRule</li> <li>class Neg</li> <li>interface ParseCallback</li> <li>actor Parser</li> <li>type Result</li> <li>trait RuleNode</li> <li>trait RuleNodeWithBody</li> <li>trait RuleNodeWithChildren</li> <li>type Segment</li> <li>class Single</li> <li>type Source</li> <li>class Star</li> <li>class Success</li> <li>class Variable</li> </ul>"},{"location":"kiuatan-Action/","title":"Action[S: S, D: Any #share, V: Any #share]","text":"<p>[Source]</p> <p>Used to assemble a custom result value.</p> <pre><code>interface val Action[S: S, D: Any #share, V: Any #share]\n</code></pre>"},{"location":"kiuatan-Action/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Action/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  data: D,\n  result: Success[S, D, V] val,\n  child_values: ReadSeq[V] val,\n  bindings: Bindings[S, D, V] val)\n: ((V | None val) , Bindings[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Action/#parameters","title":"Parameters","text":"<ul> <li>data: D</li> <li>result: Success[S, D, V] val</li> <li>child_values: ReadSeq[V] val</li> <li>bindings: Bindings[S, D, V] val</li> </ul>"},{"location":"kiuatan-Action/#returns","title":"Returns","text":"<ul> <li>((V | None val) , Bindings[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Bind/","title":"Bind[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source] <pre><code>class ref Bind[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre></p>"},{"location":"kiuatan-Bind/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Bind/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Bind/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  variable': Variable val,\n  body': RuleNode[S, D, V] box)\n: Bind[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Bind/#parameters","title":"Parameters","text":"<ul> <li>variable': Variable val</li> <li>body': RuleNode[S, D, V] box</li> </ul>"},{"location":"kiuatan-Bind/#returns","title":"Returns","text":"<ul> <li>Bind[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Bind/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-Bind/#let-variable-variable-val","title":"let variable: Variable val","text":"<p>[Source]</p>"},{"location":"kiuatan-Bind/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Bind/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Bind/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Bind/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Bind/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Bind/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Bind/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Bind/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Binding/","title":"Binding[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>type Binding[S: S, D: Any #share, V: Any #share] is\n  (Success[S, D, V] val , ReadSeq[V] val)\n</code></pre></p>"},{"location":"kiuatan-Binding/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Success[S, D, V] val , ReadSeq[V] val)</li> </ul>"},{"location":"kiuatan-Bindings/","title":"Bindings[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>class val Bindings[S: S, D: Any #share, V: Any #share]\n</code></pre></p>"},{"location":"kiuatan-Bindings/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Bindings/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Bindings[S, D, V] val^\n</code></pre>"},{"location":"kiuatan-Bindings/#returns","title":"Returns","text":"<ul> <li>Bindings[S, D, V] val^</li> </ul>"},{"location":"kiuatan-Bindings/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Bindings/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun val add(\n  variable: Variable val,\n  binding: (Success[S, D, V] val , ReadSeq[V] val))\n: Bindings[S, D, V] val\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters","title":"Parameters","text":"<ul> <li>variable: Variable val</li> <li>binding: (Success[S, D, V] val , ReadSeq[V] val)</li> </ul>"},{"location":"kiuatan-Bindings/#returns_1","title":"Returns","text":"<ul> <li>Bindings[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#result","title":"result","text":"<p>[Source]</p> <pre><code>fun val result(\n  variable: Variable val,\n  enclosing_success: Success[S, D, V] val)\n: Success[S, D, V] val ?\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters_1","title":"Parameters","text":"<ul> <li>variable: Variable val</li> <li>enclosing_success: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#returns_2","title":"Returns","text":"<ul> <li>Success[S, D, V] val ?</li> </ul>"},{"location":"kiuatan-Bindings/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun val values(\n  variable: Variable val,\n  enclosing_success: Success[S, D, V] val)\n: ReadSeq[V] val ?\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters_2","title":"Parameters","text":"<ul> <li>variable: Variable val</li> <li>enclosing_success: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#returns_3","title":"Returns","text":"<ul> <li>ReadSeq[V] val ?</li> </ul>"},{"location":"kiuatan-Bindings/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun val apply(\n  variable: Variable val,\n  enclosing_success: Success[S, D, V] val)\n: (Success[S, D, V] val , ReadSeq[V] val) ?\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters_3","title":"Parameters","text":"<ul> <li>variable: Variable val</li> <li>enclosing_success: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#returns_4","title":"Returns","text":"<ul> <li>(Success[S, D, V] val , ReadSeq[V] val) ?</li> </ul>"},{"location":"kiuatan-Bindings/#contains","title":"contains","text":"<p>[Source]</p> <pre><code>fun val contains(\n  variable: (Variable val | None val),\n  enclosing_success: Success[S, D, V] val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Bindings/#parameters_4","title":"Parameters","text":"<ul> <li>variable: (Variable val | None val)</li> <li>enclosing_success: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Bindings/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Cond/","title":"Cond[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source] <pre><code>class ref Cond[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre></p>"},{"location":"kiuatan-Cond/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Cond/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Cond/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  body': RuleNode[S, D, V] box,\n  cond': {(Success[S, D, V]): (Bool, (String | None))}[S, D, V] val)\n: Cond[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Cond/#parameters","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>cond': {(Success[S, D, V]): (Bool, (String | None))}[S, D, V] val</li> </ul>"},{"location":"kiuatan-Cond/#returns","title":"Returns","text":"<ul> <li>Cond[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Cond/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Cond/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Cond/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Cond/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Cond/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Cond/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Cond/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Cond/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Conj/","title":"Conj[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Matches a sequence of child rules.</p> <pre><code>class ref Conj[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithChildren[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Conj/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithChildren[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Conj/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Conj/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  children': ReadSeq[RuleNode[S, D, V] box] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: Conj[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Conj/#parameters","title":"Parameters","text":"<ul> <li>children': ReadSeq[RuleNode[S, D, V] box] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Conj/#returns","title":"Returns","text":"<ul> <li>Conj[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Conj/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Conj/#children","title":"children","text":"<p>[Source]</p> <pre><code>fun box children()\n: ReadSeq[this-&gt;RuleNode[S, D, V] box] box\n</code></pre>"},{"location":"kiuatan-Conj/#returns_1","title":"Returns","text":"<ul> <li>ReadSeq[this-&gt;RuleNode[S, D, V] box] box</li> </ul>"},{"location":"kiuatan-Conj/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Conj/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Conj/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Conj/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Conj/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Disj/","title":"Disj[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Matches one out of a list of possible alternatives.  Tries each alternative in order.  If one alternative fails, but an outer rule later fails, will not backtrack to another alternative.</p> <pre><code>class ref Disj[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithChildren[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Disj/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithChildren[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Disj/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Disj/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  children': ReadSeq[RuleNode[S, D, V] box] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: Disj[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Disj/#parameters","title":"Parameters","text":"<ul> <li>children': ReadSeq[RuleNode[S, D, V] box] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Disj/#returns","title":"Returns","text":"<ul> <li>Disj[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Disj/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Disj/#children","title":"children","text":"<p>[Source]</p> <pre><code>fun box children()\n: ReadSeq[this-&gt;RuleNode[S, D, V] box] box\n</code></pre>"},{"location":"kiuatan-Disj/#returns_1","title":"Returns","text":"<ul> <li>ReadSeq[this-&gt;RuleNode[S, D, V] box] box</li> </ul>"},{"location":"kiuatan-Disj/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Disj/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Disj/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Disj/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Disj/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Error/","title":"Error[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Will result in an error with the given message.</p> <pre><code>class ref Error[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Error/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Error/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Error/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  message': String val,\n  action': (Action[S, D, V] val | None val) = reference)\n: Error[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Error/#parameters","title":"Parameters","text":"<ul> <li>message': String val</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Error/#returns","title":"Returns","text":"<ul> <li>Error[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Error/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Error/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Error/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Error/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Error/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Error/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-ErrorMsg/","title":"ErrorMsg","text":"<p>[Source] <pre><code>primitive val ErrorMsg\n</code></pre></p>"},{"location":"kiuatan-ErrorMsg/#constructors","title":"Constructors","text":""},{"location":"kiuatan-ErrorMsg/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ErrorMsg val^\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns","title":"Returns","text":"<ul> <li>ErrorMsg val^</li> </ul>"},{"location":"kiuatan-ErrorMsg/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-ErrorMsg/#empty_source","title":"empty_source","text":"<p>[Source]</p> <pre><code>fun tag empty_source()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#literal_unexpected","title":"literal_unexpected","text":"<p>[Source]</p> <pre><code>fun tag literal_unexpected()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#literal_failed","title":"literal_failed","text":"<p>[Source]</p> <pre><code>fun tag literal_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#condition_failed","title":"condition_failed","text":"<p>[Source]</p> <pre><code>fun tag condition_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#conjunction_empty","title":"conjunction_empty","text":"<p>[Source]</p> <pre><code>fun tag conjunction_empty()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#conjunction_failed","title":"conjunction_failed","text":"<p>[Source]</p> <pre><code>fun tag conjunction_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#disjunction_empty","title":"disjunction_empty","text":"<p>[Source]</p> <pre><code>fun tag disjunction_empty()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#disjunction_failed","title":"disjunction_failed","text":"<p>[Source]</p> <pre><code>fun tag disjunction_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#disjunction_none","title":"disjunction_none","text":"<p>[Source]</p> <pre><code>fun tag disjunction_none()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#single_failed","title":"single_failed","text":"<p>[Source]</p> <pre><code>fun tag single_failed()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#star_too_long","title":"star_too_long","text":"<p>[Source]</p> <pre><code>fun tag star_too_long()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#star_too_short","title":"star_too_short","text":"<p>[Source]</p> <pre><code>fun tag star_too_short()\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#rule_expected","title":"rule_expected","text":"<p>[Source]</p> <pre><code>fun tag rule_expected(\n  name: String val,\n  loc: String val)\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#parameters","title":"Parameters","text":"<ul> <li>name: String val</li> <li>loc: String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#rule_empty","title":"rule_empty","text":"<p>[Source]</p> <pre><code>fun tag rule_empty(\n  name: String val)\n: String val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#parameters_1","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ErrorMsg val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#parameters_2","title":"Parameters","text":"<ul> <li>that: ErrorMsg val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ErrorMsg val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-ErrorMsg/#parameters_3","title":"Parameters","text":"<ul> <li>that: ErrorMsg val</li> </ul>"},{"location":"kiuatan-ErrorMsg/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Failure/","title":"Failure[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>The result of a failed match.</p> <pre><code>class val Failure[S: S, optional D: Any #share, optional V: Any #share]\n</code></pre>"},{"location":"kiuatan-Failure/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Failure/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  node': RuleNode[S, D, V] val,\n  start': Loc[S] val,\n  message': (String val | None val) = reference,\n  inner': (Failure[S, D, V] val | None val) = reference)\n: Failure[S, D, V] val^\n</code></pre>"},{"location":"kiuatan-Failure/#parameters","title":"Parameters","text":"<ul> <li>node': RuleNode[S, D, V] val</li> <li>start': Loc[S] val</li> <li>message': (String val | None val) = reference</li> <li>inner': (Failure[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Failure/#returns","title":"Returns","text":"<ul> <li>Failure[S, D, V] val^</li> </ul>"},{"location":"kiuatan-Failure/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-Failure/#let-node-rulenodes-d-v-val","title":"let node: RuleNode[S, D, V] val","text":"<p>[Source]</p>"},{"location":"kiuatan-Failure/#let-start-locs-val","title":"let start: Loc[S] val","text":"<p>[Source]</p>"},{"location":"kiuatan-Failure/#let-message-string-val-none-val","title":"let message: (String val | None val)","text":"<p>[Source]</p>"},{"location":"kiuatan-Failure/#let-inner-failures-d-v-val-none-val","title":"let inner: (Failure[S, D, V] val | None val)","text":"<p>[Source]</p>"},{"location":"kiuatan-Failure/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Failure/#get_message","title":"get_message","text":"<p>[Source]</p> <pre><code>fun box get_message()\n: String val\n</code></pre>"},{"location":"kiuatan-Failure/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"kiuatan-Failure/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"kiuatan-Failure/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"kiuatan-Literal/","title":"Literal[S: (Any #read &amp; Equatable[S]), optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Matches a string of items.</p> <pre><code>class ref Literal[S: (Any #read &amp; Equatable[S]), optional D: Any #share, optional V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Literal/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Literal/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Literal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  expected': ReadSeq[S] val,\n  action': (Action[S, D, V] val | None val) = reference)\n: Literal[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Literal/#parameters","title":"Parameters","text":"<ul> <li>expected': ReadSeq[S] val</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Literal/#returns","title":"Returns","text":"<ul> <li>Literal[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Literal/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Literal/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Literal/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Literal/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Literal/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Literal/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Loc/","title":"Loc[S: S]","text":"<p>[Source]</p> <p>Represents a location in a <code>Source</code> at which to parse, or at which a parse has matched.</p> <pre><code>class val Loc[S: S] is\n  Hashable ref,\n  Equatable[Loc[S] val] ref,\n  Comparable[Loc[S] val] ref,\n  Stringable box\n</code></pre>"},{"location":"kiuatan-Loc/#implements","title":"Implements","text":"<ul> <li>Hashable ref</li> <li>Equatable[Loc[S] val] ref</li> <li>Comparable[Loc[S] val] ref</li> <li>Stringable box</li> </ul>"},{"location":"kiuatan-Loc/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Loc/#create","title":"create","text":"<p>[Source]</p> <p>Create a new location in the given segment.</p> <pre><code>new val create(\n  segment': (Cons[ReadSeq[S] val] val | Nil[ReadSeq[S] val] val),\n  index': USize val = 0)\n: Loc[S] val^\n</code></pre>"},{"location":"kiuatan-Loc/#parameters","title":"Parameters","text":"<ul> <li>segment': (Cons[ReadSeq[S] val] val | Nil[ReadSeq[S] val] val)</li> <li>index': USize val = 0</li> </ul>"},{"location":"kiuatan-Loc/#returns","title":"Returns","text":"<ul> <li>Loc[S] val^</li> </ul>"},{"location":"kiuatan-Loc/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Loc/#segment","title":"segment","text":"<p>[Source]</p> <pre><code>fun box segment()\n: ReadSeq[S] val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_1","title":"Returns","text":"<ul> <li>ReadSeq[S] val</li> </ul>"},{"location":"kiuatan-Loc/#index","title":"index","text":"<p>[Source]</p> <pre><code>fun box index()\n: USize val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"kiuatan-Loc/#is_in","title":"is_in","text":"<p>[Source]</p> <pre><code>fun box is_in(\n  seg: ReadSeq[S] val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_1","title":"Parameters","text":"<ul> <li>seg: ReadSeq[S] val</li> </ul>"},{"location":"kiuatan-Loc/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#has_value","title":"has_value","text":"<p>[Source]</p> <p>Returns <code>true</code> if there is actually an item at the location, i.e. if the location points to a valid place in the segment.</p> <pre><code>fun box has_value()\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the item at the location.</p> <pre><code>fun box apply()\n: val-&gt;S ?\n</code></pre>"},{"location":"kiuatan-Loc/#returns_5","title":"Returns","text":"<ul> <li>val-&gt;S ?</li> </ul>"},{"location":"kiuatan-Loc/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next location in the source.  May not be valid.</p> <pre><code>fun box next()\n: Loc[S] val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_6","title":"Returns","text":"<ul> <li>Loc[S] val</li> </ul>"},{"location":"kiuatan-Loc/#add","title":"add","text":"<p>[Source]</p> <p>Returns a location <code>n</code> places further in the source.  May not be valid.</p> <pre><code>fun box add(\n  n: USize val)\n: Loc[S] val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_2","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"kiuatan-Loc/#returns_7","title":"Returns","text":"<ul> <li>Loc[S] val</li> </ul>"},{"location":"kiuatan-Loc/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun box values(\n  nxt: (Loc[S] val | None val) = reference)\n: Iterator[val-&gt;S] ref\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_3","title":"Parameters","text":"<ul> <li>nxt: (Loc[S] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Loc/#returns_8","title":"Returns","text":"<ul> <li>Iterator[val-&gt;S] ref</li> </ul>"},{"location":"kiuatan-Loc/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns <code>true</code> if the two locations point to the same spot in the same segment.</p> <pre><code>fun box eq(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_4","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#ne","title":"ne","text":"<p>[Source]</p> <p>Returns <code>true</code> if the two locations do not point to the same spot in the same segment.</p> <pre><code>fun box ne(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_5","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#gt","title":"gt","text":"<p>[Source]</p> <p>Returns <code>true</code> if <code>this</code> is further along in the source than <code>that</code>.  Should be used sparingly, as it has to count up from <code>this</code>, possibly to the end of the source.</p> <pre><code>fun box gt(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_6","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_7","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns <code>true</code> if <code>that</code> is further along in the source than <code>this</code>.  Should be used sparingly, as it has to count up from <code>that</code>, possibly to the end of the source.</p> <pre><code>fun box lt(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_8","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\n  that: Loc[S] box)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_9","title":"Parameters","text":"<ul> <li>that: Loc[S] box</li> </ul>"},{"location":"kiuatan-Loc/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Loc/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"kiuatan-Loc/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"kiuatan-Loc/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"kiuatan-Loc/#returns_16","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"kiuatan-Loc/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\n  that: Loc[S] val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"kiuatan-Loc/#parameters_10","title":"Parameters","text":"<ul> <li>that: Loc[S] val</li> </ul>"},{"location":"kiuatan-Loc/#returns_17","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"kiuatan-Look/","title":"Look[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Positive lookahead: will succeed if its child rule matches, but will not advance the match position.</p> <pre><code>class ref Look[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Look/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Look/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Look/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  body': RuleNode[S, D, V] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: Look[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Look/#parameters","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Look/#returns","title":"Returns","text":"<ul> <li>Look[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Look/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Look/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Look/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Look/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Look/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Look/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Look/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Look/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-NamedRule/","title":"NamedRule[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Represents a named grammar rule.  Memoization and left-recursion handling happens per named <code>Rule</code>.</p> <pre><code>class ref NamedRule[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-NamedRule/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-NamedRule/#constructors","title":"Constructors","text":""},{"location":"kiuatan-NamedRule/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  name': String val,\n  body': (RuleNode[S, D, V] box | None val) = reference,\n  action': (Action[S, D, V] val | None val) = reference,\n  memoize_failures': Bool val = true)\n: NamedRule[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-NamedRule/#parameters","title":"Parameters","text":"<ul> <li>name': String val</li> <li>body': (RuleNode[S, D, V] box | None val) = reference</li> <li>action': (Action[S, D, V] val | None val) = reference</li> <li>memoize_failures': Bool val = true</li> </ul>"},{"location":"kiuatan-NamedRule/#returns","title":"Returns","text":"<ul> <li>NamedRule[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-NamedRule/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-NamedRule/#let-name-string-val","title":"let name: String val","text":"<p>[Source]</p>"},{"location":"kiuatan-NamedRule/#let-memoize_failures-bool-val","title":"let memoize_failures: Bool val","text":"<p>[Source]</p>"},{"location":"kiuatan-NamedRule/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-NamedRule/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-NamedRule/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-NamedRule/#has_body","title":"has_body","text":"<p>[Source]</p> <pre><code>fun box has_body()\n: Bool val\n</code></pre>"},{"location":"kiuatan-NamedRule/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-NamedRule/#set_body","title":"set_body","text":"<p>[Source]</p> <pre><code>fun ref set_body(\n  body': RuleNode[S, D, V] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: None val\n</code></pre>"},{"location":"kiuatan-NamedRule/#parameters_1","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-NamedRule/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"kiuatan-NamedRule/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-NamedRule/#parameters_2","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-NamedRule/#returns_4","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-NamedRule/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-NamedRule/#returns_5","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Neg/","title":"Neg[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Negative lookahead: will succeed if its child rule does not match, and will not advance the match position.</p> <pre><code>class ref Neg[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Neg/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Neg/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Neg/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  body': RuleNode[S, D, V] box,\n  action': (Action[S, D, V] val | None val) = reference)\n: Neg[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Neg/#parameters","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Neg/#returns","title":"Returns","text":"<ul> <li>Neg[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Neg/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Neg/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Neg/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Neg/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Neg/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Neg/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Neg/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Neg/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-ParseCallback/","title":"ParseCallback[S: S, D: Any #share, V: Any #share]","text":"<p>[Source]</p> <p>Used to report the results of a parse attempt.</p> <pre><code>interface val ParseCallback[S: S, D: Any #share, V: Any #share]\n</code></pre>"},{"location":"kiuatan-ParseCallback/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-ParseCallback/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  result: (Success[S, D, V] val | Failure[S, D, V] val),\n  values: ReadSeq[V] val)\n: None val\n</code></pre>"},{"location":"kiuatan-ParseCallback/#parameters","title":"Parameters","text":"<ul> <li>result: (Success[S, D, V] val | Failure[S, D, V] val)</li> <li>values: ReadSeq[V] val</li> </ul>"},{"location":"kiuatan-ParseCallback/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"kiuatan-Parser/","title":"Parser[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Stores a source of inputs to a parse, and a memo of parse results from prior parses. Used to initiate a parse attempt.</p> <pre><code>actor tag Parser[S: S, optional D: Any #share, optional V: Any #share]\n</code></pre>"},{"location":"kiuatan-Parser/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Parser/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\n  source: ReadSeq[ReadSeq[S] val] val)\n: Parser[S, D, V] tag^\n</code></pre>"},{"location":"kiuatan-Parser/#parameters","title":"Parameters","text":"<ul> <li>source: ReadSeq[ReadSeq[S] val] val</li> </ul>"},{"location":"kiuatan-Parser/#returns","title":"Returns","text":"<ul> <li>Parser[S, D, V] tag^</li> </ul>"},{"location":"kiuatan-Parser/#public-behaviours","title":"Public Behaviours","text":""},{"location":"kiuatan-Parser/#insert_segment","title":"insert_segment","text":"<p>[Source]</p> <p>Insert a source segment at the given index.  The insertion will happen upon the next call to <code>parse()</code>.</p> <pre><code>be insert_segment(\n  index: USize val,\n  segment: ReadSeq[S] val)\n</code></pre>"},{"location":"kiuatan-Parser/#parameters_1","title":"Parameters","text":"<ul> <li>index: USize val</li> <li>segment: ReadSeq[S] val</li> </ul>"},{"location":"kiuatan-Parser/#remove_segment","title":"remove_segment","text":"<p>[Source]</p> <p>Removes the source segment at the given index.  The removal will happen upon the next call to <code>parse()</code>.</p> <pre><code>be remove_segment(\n  index: USize val)\n</code></pre>"},{"location":"kiuatan-Parser/#parameters_2","title":"Parameters","text":"<ul> <li>index: USize val</li> </ul>"},{"location":"kiuatan-Parser/#parse","title":"parse","text":"<p>[Source]</p> <p>Initiates a parse attempt with the given rule.</p> <pre><code>be parse(\n  rule: RuleNode[S, D, V] val,\n  data: D,\n  callback: ParseCallback[S, D, V] val,\n  start: (Loc[S] val | None val) = reference,\n  clear_memo: Bool val = false)\n</code></pre>"},{"location":"kiuatan-Parser/#parameters_3","title":"Parameters","text":"<ul> <li>rule: RuleNode[S, D, V] val</li> <li>data: D</li> <li>callback: ParseCallback[S, D, V] val</li> <li>start: (Loc[S] val | None val) = reference</li> <li>clear_memo: Bool val = false</li> </ul>"},{"location":"kiuatan-Parser/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Parser/#num_segments","title":"num_segments","text":"<p>[Source]</p> <p>Returns the number of segments currently in the source.</p> <pre><code>fun box num_segments()\n: USize val\n</code></pre>"},{"location":"kiuatan-Parser/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"kiuatan-Result/","title":"Result[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>The result of a parse attempt, either successful or failed.</p> <pre><code>type Result[S: S, optional D: Any #share, optional V: Any #share] is\n  (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Result/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-RuleNode/","title":"RuleNode[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>trait ref RuleNode[S: S, D: Any #share, V: Any #share]\n</code></pre></p>"},{"location":"kiuatan-RuleNode/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-RuleNode/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-RuleNode/#parameters","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-RuleNode/#returns","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-RuleNode/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-RuleNode/#returns_1","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/","title":"RuleNodeWithBody[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>trait ref RuleNodeWithBody[S: S, D: Any #share, V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre></p>"},{"location":"kiuatan-RuleNodeWithBody/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-RuleNodeWithBody/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithBody/#returns","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithBody/#parameters","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithBody/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithBody/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/","title":"RuleNodeWithChildren[S: S, D: Any #share, V: Any #share]","text":"<p>[Source] <pre><code>trait ref RuleNodeWithChildren[S: S, D: Any #share, V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre></p>"},{"location":"kiuatan-RuleNodeWithChildren/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-RuleNodeWithChildren/#children","title":"children","text":"<p>[Source]</p> <pre><code>fun box children()\n: ReadSeq[this-&gt;RuleNode[S, D, V] box] box\n</code></pre>"},{"location":"kiuatan-RuleNodeWithChildren/#returns","title":"Returns","text":"<ul> <li>ReadSeq[this-&gt;RuleNode[S, D, V] box] box</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithChildren/#parameters","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-RuleNodeWithChildren/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-RuleNodeWithChildren/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Segment/","title":"Segment[S: S]","text":"<p>[Source] <pre><code>type Segment[S: S] is\n  ReadSeq[S] val\n</code></pre></p>"},{"location":"kiuatan-Segment/#type-alias-for","title":"Type Alias For","text":"<ul> <li>ReadSeq[S] val</li> </ul>"},{"location":"kiuatan-Single/","title":"Single[S: (Any #read &amp; Equatable[S]), optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>Matches a single item.  If given a list of possibilities, will only succeed if it matches one of them.  Otherwise, it succeeds for any single item.</p> <pre><code>class ref Single[S: (Any #read &amp; Equatable[S]), optional D: Any #share, optional V: Any #share] is\n  RuleNode[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Single/#implements","title":"Implements","text":"<ul> <li>RuleNode[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Single/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Single/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  expected': ReadSeq[S] val = array,\n  action': (Action[S, D, V] val | None val) = reference)\n: Single[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Single/#parameters","title":"Parameters","text":"<ul> <li>expected': ReadSeq[S] val = array</li> <li>action': (Action[S, D, V] val | None val) = reference</li> </ul>"},{"location":"kiuatan-Single/#returns","title":"Returns","text":"<ul> <li>Single[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Single/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Single/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Single/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Single/#returns_1","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Single/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Single/#returns_2","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Source/","title":"Source[S: S]","text":"<p>[Source] <pre><code>type Source[S: S] is\n  (Cons[ReadSeq[S] val] val | Nil[ReadSeq[S] val] val)\n</code></pre></p>"},{"location":"kiuatan-Source/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Cons[ReadSeq[S] val] val | Nil[ReadSeq[S] val] val)</li> </ul>"},{"location":"kiuatan-Star/","title":"Star[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>A generalization of Kleene star: will match from <code>min</code> to <code>max</code> repetitions of its child rule.</p> <pre><code>class ref Star[S: S, optional D: Any #share, optional V: Any #share] is\n  RuleNodeWithBody[S, D, V] ref\n</code></pre>"},{"location":"kiuatan-Star/#implements","title":"Implements","text":"<ul> <li>RuleNodeWithBody[S, D, V] ref</li> </ul>"},{"location":"kiuatan-Star/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Star/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  body': RuleNode[S, D, V] box,\n  min': USize val = 0,\n  action': (Action[S, D, V] val | None val) = reference,\n  max': USize val = call)\n: Star[S, D, V] ref^\n</code></pre>"},{"location":"kiuatan-Star/#parameters","title":"Parameters","text":"<ul> <li>body': RuleNode[S, D, V] box</li> <li>min': USize val = 0</li> <li>action': (Action[S, D, V] val | None val) = reference</li> <li>max': USize val = call</li> </ul>"},{"location":"kiuatan-Star/#returns","title":"Returns","text":"<ul> <li>Star[S, D, V] ref^</li> </ul>"},{"location":"kiuatan-Star/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Star/#body","title":"body","text":"<p>[Source]</p> <pre><code>fun box body()\n: (this-&gt;RuleNode[S, D, V] box | None val)\n</code></pre>"},{"location":"kiuatan-Star/#returns_1","title":"Returns","text":"<ul> <li>(this-&gt;RuleNode[S, D, V] box | None val)</li> </ul>"},{"location":"kiuatan-Star/#parse","title":"parse","text":"<p>[Source]</p> <pre><code>fun val parse(\n  parser: _ParseNamedRule[S, D, V] ref,\n  depth: USize val,\n  loc: Loc[S] val)\n: (Success[S, D, V] val | Failure[S, D, V] val)\n</code></pre>"},{"location":"kiuatan-Star/#parameters_1","title":"Parameters","text":"<ul> <li>parser: _ParseNamedRule[S, D, V] ref</li> <li>depth: USize val</li> <li>loc: Loc[S] val</li> </ul>"},{"location":"kiuatan-Star/#returns_2","title":"Returns","text":"<ul> <li>(Success[S, D, V] val | Failure[S, D, V] val)</li> </ul>"},{"location":"kiuatan-Star/#action","title":"action","text":"<p>[Source]</p> <pre><code>fun box action()\n: (Action[S, D, V] val | None val)\n</code></pre>"},{"location":"kiuatan-Star/#returns_3","title":"Returns","text":"<ul> <li>(Action[S, D, V] val | None val)</li> </ul>"},{"location":"kiuatan-Success/","title":"Success[S: S, optional D: Any #share, optional V: Any #share]","text":"<p>[Source]</p> <p>The result of a successful parse.</p> <pre><code>class val Success[S: S, optional D: Any #share, optional V: Any #share]\n</code></pre>"},{"location":"kiuatan-Success/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Success/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  node': RuleNode[S, D, V] val,\n  start': Loc[S] val,\n  next': Loc[S] val,\n  children': ReadSeq[Success[S, D, V] val] val = recover)\n: Success[S, D, V] val^\n</code></pre>"},{"location":"kiuatan-Success/#parameters","title":"Parameters","text":"<ul> <li>node': RuleNode[S, D, V] val</li> <li>start': Loc[S] val</li> <li>next': Loc[S] val</li> <li>children': ReadSeq[Success[S, D, V] val] val = recover</li> </ul>"},{"location":"kiuatan-Success/#returns","title":"Returns","text":"<ul> <li>Success[S, D, V] val^</li> </ul>"},{"location":"kiuatan-Success/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-Success/#let-node-rulenodes-d-v-val","title":"let node: RuleNode[S, D, V] val","text":"<p>[Source]</p> <p>The rule that matched successfully.</p>"},{"location":"kiuatan-Success/#let-start-locs-val","title":"let start: Loc[S] val","text":"<p>[Source]</p> <p>The location at which the rule matched.</p>"},{"location":"kiuatan-Success/#let-next-locs-val","title":"let next: Loc[S] val","text":"<p>[Source]</p> <p>The location one past the end of the match.</p>"},{"location":"kiuatan-Success/#let-children-readseqsuccesss-d-v-val-val","title":"let children: ReadSeq[Success[S, D, V] val] val","text":"<p>[Source]</p> <p>Results from child rules' matches.</p>"},{"location":"kiuatan-Success/#public-functions","title":"Public Functions","text":""},{"location":"kiuatan-Success/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Success[S, D, V] val)\n: Bool val\n</code></pre>"},{"location":"kiuatan-Success/#parameters_1","title":"Parameters","text":"<ul> <li>that: Success[S, D, V] val</li> </ul>"},{"location":"kiuatan-Success/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"kiuatan-Success/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"kiuatan-Success/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"kiuatan-Variable/","title":"Variable","text":"<p>[Source] <pre><code>class val Variable\n</code></pre></p>"},{"location":"kiuatan-Variable/#constructors","title":"Constructors","text":""},{"location":"kiuatan-Variable/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  name': String val)\n: Variable val^\n</code></pre>"},{"location":"kiuatan-Variable/#parameters","title":"Parameters","text":"<ul> <li>name': String val</li> </ul>"},{"location":"kiuatan-Variable/#returns","title":"Returns","text":"<ul> <li>Variable val^</li> </ul>"},{"location":"kiuatan-Variable/#public-fields","title":"Public fields","text":""},{"location":"kiuatan-Variable/#let-name-string-val","title":"let name: String val","text":"<p>[Source]</p>"},{"location":"logger--index/","title":"Logger package","text":"<p>Provides basic logging facilities. For most use cases, the <code>StringLogger</code> class will be used. On construction, it takes 2 parameters and a 3rd optional parameter:</p> <ul> <li>LogLevel below which no output will be logged</li> <li>OutStream to log to</li> <li>Optional LogFormatter</li> </ul> <p>If you need to log arbitrary objects, take a look at <code>ObjectLogger[A]</code> which can log arbitrary objects so long as you provide it a lambda to covert from A to String.</p>"},{"location":"logger--index/#api-philosophy","title":"API Philosophy","text":"<p>The API for using Logger is an attempt to abide by the Pony philosophy of first, be correct and secondly, aim for performance. One of the ways that logging can slow your system down is by having to evaluate expressions to be logged whether they will be logged or not (based on the level of logging). For example:</p> <p><code>logger.log(Warn, name + \": \" + reason)</code></p> <p>will construct a new String regardless of whether we will end up logging the message or not.</p> <p>The Logger API uses boolean short circuiting to avoid this.</p> <p><code>logger(Warn) and logger.log(name + \": \" + reason)</code></p> <p>will not evaluate the expression to be logged unless the log level Warn is at or above the overall log level for our logging. This is as close as we can get to zero cost for items that aren't going to end up being logged.</p>"},{"location":"logger--index/#example-programs","title":"Example programs","text":""},{"location":"logger--index/#string-logger","title":"String Logger","text":"<p>The following program will output 'my warn message' and 'my error message' to STDOUT in the standard default log format.</p> <pre><code>use \"logger\"\n\nactor Main\n  new create(env: Env) =&gt;\n    let logger = StringLogger(\n      Warn,\n      env.out)\n\n    logger(Fine) and logger.log(\"my fine message\")\n    logger(Info) and logger.log(\"my info message\")\n    logger(Warn) and logger.log(\"my warn message\")\n    logger(Error) and logger.log(\"my error message\")\n</code></pre>"},{"location":"logger--index/#loggera","title":"Logger[A]","text":"<p>The following program will output '42' to STDOUT in the standard default log format.</p> <pre><code>use \"logger\"\n\nactor Main\n  new create(env: Env) =&gt;\n    let logger = Logger[U64](Fine, env.out, {(a) =&gt; a.string() })\n\n    logger(Error) and logger.log(U64(42))\n</code></pre>"},{"location":"logger--index/#custom-formatting-your-logs","title":"Custom formatting your logs","text":"<p>The Logger package provides an interface for formatting logs. If you wish to override the standard formatting, you can create an object that implements:</p> <pre><code>interface val LogFormatter\n  fun apply(\n    msg: String,\n    file_name: String,\n    file_linenum: String,\n    file_linepos: String): String\n</code></pre> <p>This can either be a class or because the interface only has a single apply method, can also be a lambda.</p>"},{"location":"logger--index/#public-types","title":"Public Types","text":"<ul> <li>primitive DefaultLogFormatter</li> <li>primitive Error</li> <li>primitive Fine</li> <li>primitive Info</li> <li>interface LogFormatter</li> <li>type LogLevel</li> <li>class Logger</li> <li>primitive StringLogger</li> <li>primitive Warn</li> </ul>"},{"location":"logger-DefaultLogFormatter/","title":"DefaultLogFormatter","text":"<p>[Source] <pre><code>primitive val DefaultLogFormatter is\n  LogFormatter val\n</code></pre></p>"},{"location":"logger-DefaultLogFormatter/#implements","title":"Implements","text":"<ul> <li>LogFormatter val</li> </ul>"},{"location":"logger-DefaultLogFormatter/#constructors","title":"Constructors","text":""},{"location":"logger-DefaultLogFormatter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DefaultLogFormatter val^\n</code></pre>"},{"location":"logger-DefaultLogFormatter/#returns","title":"Returns","text":"<ul> <li>DefaultLogFormatter val^</li> </ul>"},{"location":"logger-DefaultLogFormatter/#public-functions","title":"Public Functions","text":""},{"location":"logger-DefaultLogFormatter/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  msg: String val,\n  loc: SourceLoc val)\n: String val\n</code></pre>"},{"location":"logger-DefaultLogFormatter/#parameters","title":"Parameters","text":"<ul> <li>msg: String val</li> <li>loc: SourceLoc val</li> </ul>"},{"location":"logger-DefaultLogFormatter/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"logger-DefaultLogFormatter/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DefaultLogFormatter val)\n: Bool val\n</code></pre>"},{"location":"logger-DefaultLogFormatter/#parameters_1","title":"Parameters","text":"<ul> <li>that: DefaultLogFormatter val</li> </ul>"},{"location":"logger-DefaultLogFormatter/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-DefaultLogFormatter/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DefaultLogFormatter val)\n: Bool val\n</code></pre>"},{"location":"logger-DefaultLogFormatter/#parameters_2","title":"Parameters","text":"<ul> <li>that: DefaultLogFormatter val</li> </ul>"},{"location":"logger-DefaultLogFormatter/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Error/","title":"Error","text":"<p>[Source] <pre><code>primitive val Error\n</code></pre></p>"},{"location":"logger-Error/#constructors","title":"Constructors","text":""},{"location":"logger-Error/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Error val^\n</code></pre>"},{"location":"logger-Error/#returns","title":"Returns","text":"<ul> <li>Error val^</li> </ul>"},{"location":"logger-Error/#public-functions","title":"Public Functions","text":""},{"location":"logger-Error/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U32 val\n</code></pre>"},{"location":"logger-Error/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"logger-Error/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Error val)\n: Bool val\n</code></pre>"},{"location":"logger-Error/#parameters","title":"Parameters","text":"<ul> <li>that: Error val</li> </ul>"},{"location":"logger-Error/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Error/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Error val)\n: Bool val\n</code></pre>"},{"location":"logger-Error/#parameters_1","title":"Parameters","text":"<ul> <li>that: Error val</li> </ul>"},{"location":"logger-Error/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Fine/","title":"Fine","text":"<p>[Source] <pre><code>primitive val Fine\n</code></pre></p>"},{"location":"logger-Fine/#constructors","title":"Constructors","text":""},{"location":"logger-Fine/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Fine val^\n</code></pre>"},{"location":"logger-Fine/#returns","title":"Returns","text":"<ul> <li>Fine val^</li> </ul>"},{"location":"logger-Fine/#public-functions","title":"Public Functions","text":""},{"location":"logger-Fine/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U32 val\n</code></pre>"},{"location":"logger-Fine/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"logger-Fine/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Fine val)\n: Bool val\n</code></pre>"},{"location":"logger-Fine/#parameters","title":"Parameters","text":"<ul> <li>that: Fine val</li> </ul>"},{"location":"logger-Fine/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Fine/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Fine val)\n: Bool val\n</code></pre>"},{"location":"logger-Fine/#parameters_1","title":"Parameters","text":"<ul> <li>that: Fine val</li> </ul>"},{"location":"logger-Fine/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Info/","title":"Info","text":"<p>[Source] <pre><code>primitive val Info\n</code></pre></p>"},{"location":"logger-Info/#constructors","title":"Constructors","text":""},{"location":"logger-Info/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Info val^\n</code></pre>"},{"location":"logger-Info/#returns","title":"Returns","text":"<ul> <li>Info val^</li> </ul>"},{"location":"logger-Info/#public-functions","title":"Public Functions","text":""},{"location":"logger-Info/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U32 val\n</code></pre>"},{"location":"logger-Info/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"logger-Info/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Info val)\n: Bool val\n</code></pre>"},{"location":"logger-Info/#parameters","title":"Parameters","text":"<ul> <li>that: Info val</li> </ul>"},{"location":"logger-Info/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Info/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Info val)\n: Bool val\n</code></pre>"},{"location":"logger-Info/#parameters_1","title":"Parameters","text":"<ul> <li>that: Info val</li> </ul>"},{"location":"logger-Info/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-LogFormatter/","title":"LogFormatter","text":"<p>[Source]</p> <p>Interface required to implement custom log formatting.</p> <ul> <li><code>msg</code> is the logged message</li> <li><code>loc</code> is the location log was called from</li> </ul> <p>See <code>DefaultLogFormatter</code> for an example of how to implement a LogFormatter.</p> <pre><code>interface val LogFormatter\n</code></pre>"},{"location":"logger-LogFormatter/#public-functions","title":"Public Functions","text":""},{"location":"logger-LogFormatter/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  msg: String val,\n  loc: SourceLoc val)\n: String val\n</code></pre>"},{"location":"logger-LogFormatter/#parameters","title":"Parameters","text":"<ul> <li>msg: String val</li> <li>loc: SourceLoc val</li> </ul>"},{"location":"logger-LogFormatter/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"logger-LogLevel/","title":"LogLevel","text":"<p>[Source] <pre><code>type LogLevel is\n  (Fine val | Info val | Warn val | Error val)\n</code></pre></p>"},{"location":"logger-LogLevel/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Fine val | Info val | Warn val | Error val)</li> </ul>"},{"location":"logger-Logger/","title":"Logger[A: A]","text":"<p>[Source] <pre><code>class val Logger[A: A]\n</code></pre></p>"},{"location":"logger-Logger/#constructors","title":"Constructors","text":""},{"location":"logger-Logger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  level: (Fine val | Info val | Warn val | \n    Error val),\n  out: OutStream tag,\n  f: {(A): String}[A] val,\n  formatter: LogFormatter val = reference)\n: Logger[A] val^\n</code></pre>"},{"location":"logger-Logger/#parameters","title":"Parameters","text":"<ul> <li>level: (Fine val | Info val | Warn val |      Error val)</li> <li>out: OutStream tag</li> <li>f: {(A): String}[A] val</li> <li>formatter: LogFormatter val = reference</li> </ul>"},{"location":"logger-Logger/#returns","title":"Returns","text":"<ul> <li>Logger[A] val^</li> </ul>"},{"location":"logger-Logger/#public-functions","title":"Public Functions","text":""},{"location":"logger-Logger/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  level: (Fine val | Info val | Warn val | \n    Error val))\n: Bool val\n</code></pre>"},{"location":"logger-Logger/#parameters_1","title":"Parameters","text":"<ul> <li>level: (Fine val | Info val | Warn val |      Error val)</li> </ul>"},{"location":"logger-Logger/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Logger/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log(\n  value: A,\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"logger-Logger/#parameters_2","title":"Parameters","text":"<ul> <li>value: A</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"logger-Logger/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-StringLogger/","title":"StringLogger","text":"<p>[Source] <pre><code>primitive val StringLogger\n</code></pre></p>"},{"location":"logger-StringLogger/#constructors","title":"Constructors","text":""},{"location":"logger-StringLogger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: StringLogger val^\n</code></pre>"},{"location":"logger-StringLogger/#returns","title":"Returns","text":"<ul> <li>StringLogger val^</li> </ul>"},{"location":"logger-StringLogger/#public-functions","title":"Public Functions","text":""},{"location":"logger-StringLogger/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  level: (Fine val | Info val | Warn val | \n    Error val),\n  out: OutStream tag,\n  formatter: LogFormatter val = reference)\n: Logger[String val] val\n</code></pre>"},{"location":"logger-StringLogger/#parameters","title":"Parameters","text":"<ul> <li>level: (Fine val | Info val | Warn val |      Error val)</li> <li>out: OutStream tag</li> <li>formatter: LogFormatter val = reference</li> </ul>"},{"location":"logger-StringLogger/#returns_1","title":"Returns","text":"<ul> <li>Logger[String val] val</li> </ul>"},{"location":"logger-StringLogger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: StringLogger val)\n: Bool val\n</code></pre>"},{"location":"logger-StringLogger/#parameters_1","title":"Parameters","text":"<ul> <li>that: StringLogger val</li> </ul>"},{"location":"logger-StringLogger/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-StringLogger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: StringLogger val)\n: Bool val\n</code></pre>"},{"location":"logger-StringLogger/#parameters_2","title":"Parameters","text":"<ul> <li>that: StringLogger val</li> </ul>"},{"location":"logger-StringLogger/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Warn/","title":"Warn","text":"<p>[Source] <pre><code>primitive val Warn\n</code></pre></p>"},{"location":"logger-Warn/#constructors","title":"Constructors","text":""},{"location":"logger-Warn/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Warn val^\n</code></pre>"},{"location":"logger-Warn/#returns","title":"Returns","text":"<ul> <li>Warn val^</li> </ul>"},{"location":"logger-Warn/#public-functions","title":"Public Functions","text":""},{"location":"logger-Warn/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U32 val\n</code></pre>"},{"location":"logger-Warn/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"logger-Warn/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Warn val)\n: Bool val\n</code></pre>"},{"location":"logger-Warn/#parameters","title":"Parameters","text":"<ul> <li>that: Warn val</li> </ul>"},{"location":"logger-Warn/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"logger-Warn/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Warn val)\n: Bool val\n</code></pre>"},{"location":"logger-Warn/#parameters_1","title":"Parameters","text":"<ul> <li>that: Warn val</li> </ul>"},{"location":"logger-Warn/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net--index/","title":"Net package","text":"<p>The Net package provides support for creating UDP and TCP clients and servers, reading and writing network data, and establishing UDP and TCP connections.</p>"},{"location":"net--index/#public-types","title":"Public Types","text":"<ul> <li>primitive DNS</li> <li>primitive DNSAuth</li> <li>class NetAddress</li> <li>primitive NetAuth</li> <li>class NoProxy</li> <li>primitive OSSockOpt</li> <li>interface Proxy</li> <li>primitive TCPAuth</li> <li>primitive TCPConnectAuth</li> <li>actor TCPConnection</li> <li>interface TCPConnectionNotify</li> <li>primitive TCPListenAuth</li> <li>interface TCPListenNotify</li> <li>actor TCPListener</li> <li>primitive UDPAuth</li> <li>interface UDPNotify</li> <li>actor UDPSocket</li> </ul>"},{"location":"net-DNS/","title":"DNS","text":"<p>[Source]</p> <p>Helper functions for resolving DNS queries.</p> <pre><code>primitive val DNS\n</code></pre>"},{"location":"net-DNS/#constructors","title":"Constructors","text":""},{"location":"net-DNS/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DNS val^\n</code></pre>"},{"location":"net-DNS/#returns","title":"Returns","text":"<ul> <li>DNS val^</li> </ul>"},{"location":"net-DNS/#public-functions","title":"Public Functions","text":""},{"location":"net-DNS/#apply","title":"apply","text":"<p>[Source]</p> <p>Gets all IPv4 and IPv6 addresses for a host and service.</p> <pre><code>fun box apply(\n  auth: DNSAuth val,\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_1","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Gets all IPv4 addresses for a host and service.</p> <pre><code>fun box ip4(\n  auth: DNSAuth val,\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_1","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_2","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Gets all IPv6 addresses for a host and service.</p> <pre><code>fun box ip6(\n  auth: DNSAuth val,\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_2","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_3","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#broadcast_ip4","title":"broadcast_ip4","text":"<p>[Source]</p> <p>Link-local IP4 broadcast address.</p> <pre><code>fun box broadcast_ip4(\n  auth: DNSAuth val,\n  service: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_3","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_4","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#broadcast_ip6","title":"broadcast_ip6","text":"<p>[Source]</p> <p>Link-local IP6 broadcast address.</p> <pre><code>fun box broadcast_ip6(\n  auth: DNSAuth val,\n  service: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_4","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_5","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#is_ip4","title":"is_ip4","text":"<p>[Source]</p> <p>Returns true if the host is a literal IPv4 address.</p> <pre><code>fun box is_ip4(\n  host: String val)\n: Bool val\n</code></pre>"},{"location":"net-DNS/#parameters_5","title":"Parameters","text":"<ul> <li>host: String val</li> </ul>"},{"location":"net-DNS/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNS/#is_ip6","title":"is_ip6","text":"<p>[Source]</p> <p>Returns true if the host is a literal IPv6 address.</p> <pre><code>fun box is_ip6(\n  host: String val)\n: Bool val\n</code></pre>"},{"location":"net-DNS/#parameters_6","title":"Parameters","text":"<ul> <li>host: String val</li> </ul>"},{"location":"net-DNS/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNS/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DNS val)\n: Bool val\n</code></pre>"},{"location":"net-DNS/#parameters_7","title":"Parameters","text":"<ul> <li>that: DNS val</li> </ul>"},{"location":"net-DNS/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNS/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DNS val)\n: Bool val\n</code></pre>"},{"location":"net-DNS/#parameters_8","title":"Parameters","text":"<ul> <li>that: DNS val</li> </ul>"},{"location":"net-DNS/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNSAuth/","title":"DNSAuth","text":"<p>[Source] <pre><code>primitive val DNSAuth\n</code></pre></p>"},{"location":"net-DNSAuth/#constructors","title":"Constructors","text":""},{"location":"net-DNSAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: (AmbientAuth val | NetAuth val))\n: DNSAuth val^\n</code></pre>"},{"location":"net-DNSAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val)</li> </ul>"},{"location":"net-DNSAuth/#returns","title":"Returns","text":"<ul> <li>DNSAuth val^</li> </ul>"},{"location":"net-DNSAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-DNSAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: DNSAuth val)\n: Bool val\n</code></pre>"},{"location":"net-DNSAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: DNSAuth val</li> </ul>"},{"location":"net-DNSAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNSAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: DNSAuth val)\n: Bool val\n</code></pre>"},{"location":"net-DNSAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: DNSAuth val</li> </ul>"},{"location":"net-DNSAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/","title":"NetAddress","text":"<p>[Source]</p> <p>Represents an IPv4 or IPv6 address. The family field indicates the address type. The addr field is either the IPv4 address or the IPv6 flow info. The addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The scope field is the IPv6 scope, or invalid for an IPv4 address.</p> <p>This class is modelled after the C data structure for holding socket addresses for both IPv4 and IPv6 <code>sockaddr_storage</code>.</p> <p>Use the <code>name</code> method to obtain address/hostname and port/service as Strings.</p> <pre><code>class val NetAddress is\n  Equatable[NetAddress val] ref\n</code></pre>"},{"location":"net-NetAddress/#implements","title":"Implements","text":"<ul> <li>Equatable[NetAddress val] ref</li> </ul>"},{"location":"net-NetAddress/#constructors","title":"Constructors","text":""},{"location":"net-NetAddress/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: NetAddress iso^\n</code></pre>"},{"location":"net-NetAddress/#returns","title":"Returns","text":"<ul> <li>NetAddress iso^</li> </ul>"},{"location":"net-NetAddress/#public-functions","title":"Public Functions","text":""},{"location":"net-NetAddress/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Returns true for an IPv4 address.</p> <pre><code>fun box ip4()\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Returns true for an IPv6 address.</p> <pre><code>fun box ip6()\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/#name","title":"name","text":"<p>[Source]</p> <p>Returns the host and service name.</p> <p>If <code>reversedns</code> is <code>DNSAuth</code>, a DNS lookup will be executed and the hostname for this address is returned as first element of the result tuple. If no hostname could be found, an error is raised. If <code>reversedns</code> is <code>None</code> the plain IP address is given and no DNS lookup is executed.</p> <p>If <code>servicename</code> is <code>false</code> the numeric port is returned as second element of the result tuple. If it is <code>true</code> the port is translated into its corresponding servicename (e.g. port 80 is returned as <code>\"http\"</code>).</p> <p>Internally this method uses the POSIX C function <code>getnameinfo</code>.</p> <pre><code>fun box name(\n  reversedns: (DNSAuth val | None val) = reference,\n  servicename: Bool val = false)\n: (String val , String val) ?\n</code></pre>"},{"location":"net-NetAddress/#parameters","title":"Parameters","text":"<ul> <li>reversedns: (DNSAuth val | None val) = reference</li> <li>servicename: Bool val = false</li> </ul>"},{"location":"net-NetAddress/#returns_3","title":"Returns","text":"<ul> <li>(String val , String val) ?</li> </ul>"},{"location":"net-NetAddress/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: NetAddress box)\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#parameters_1","title":"Parameters","text":"<ul> <li>that: NetAddress box</li> </ul>"},{"location":"net-NetAddress/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/#host_eq","title":"host_eq","text":"<p>[Source]</p> <pre><code>fun box host_eq(\n  that: NetAddress box)\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#parameters_2","title":"Parameters","text":"<ul> <li>that: NetAddress box</li> </ul>"},{"location":"net-NetAddress/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/#length","title":"length","text":"<p>[Source]</p> <p>For platforms (OSX/FreeBSD) with <code>length</code> field as part of its <code>struct sockaddr</code> definition, returns the <code>length</code>. Else (Linux/Windows) returns the size of <code>sockaddr_in</code> or <code>sockaddr_in6</code>.</p> <pre><code>fun box length()\n: U8 val\n</code></pre>"},{"location":"net-NetAddress/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"net-NetAddress/#family","title":"family","text":"<p>[Source]</p> <p>Returns the <code>family</code>.</p> <pre><code>fun box family()\n: U8 val\n</code></pre>"},{"location":"net-NetAddress/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"net-NetAddress/#port","title":"port","text":"<p>[Source]</p> <p>Returns port number in host byte order.</p> <pre><code>fun box port()\n: U16 val\n</code></pre>"},{"location":"net-NetAddress/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"net-NetAddress/#scope","title":"scope","text":"<p>[Source]</p> <p>Returns IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes.</p> <pre><code>fun box scope()\n: U32 val\n</code></pre>"},{"location":"net-NetAddress/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-NetAddress/#ipv4_addr","title":"ipv4_addr","text":"<p>[Source]</p> <p>Returns IPV4 address (<code>_addr</code> field in the class) if <code>ip4()</code> is <code>True</code>. If <code>ip4()</code> is <code>False</code> then the contents are invalid.</p> <pre><code>fun box ipv4_addr()\n: U32 val\n</code></pre>"},{"location":"net-NetAddress/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-NetAddress/#ipv6_addr","title":"ipv6_addr","text":"<p>[Source]</p> <p>Returns IPV6 address as the 4-tuple (say <code>a</code>). <code>a._1 = _addr1</code> // Bits 0-32 of the IPv6 address in host byte order. <code>a._2 = _addr2  // Bits 33-64 of the IPv6 address in host byte order.</code>a._3 = _addr3  // Bits 65-96 of the IPv6 address in host byte order. `a._4 = _addr4  // Bits 97-128 of the IPv6 address in host byte order.</p> <p>The contents of the 4-tuple returned are valid only if <code>ip6()</code> is <code>True</code>.</p> <pre><code>fun box ipv6_addr()\n: (U32 val , U32 val , U32 val , \n    U32 val)\n</code></pre>"},{"location":"net-NetAddress/#returns_11","title":"Returns","text":"<ul> <li>(U32 val , U32 val , U32 val ,      U32 val)</li> </ul>"},{"location":"net-NetAddress/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: NetAddress val)\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#parameters_3","title":"Parameters","text":"<ul> <li>that: NetAddress val</li> </ul>"},{"location":"net-NetAddress/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAuth/","title":"NetAuth","text":"<p>[Source] <pre><code>primitive val NetAuth\n</code></pre></p>"},{"location":"net-NetAuth/#constructors","title":"Constructors","text":""},{"location":"net-NetAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: AmbientAuth val)\n: NetAuth val^\n</code></pre>"},{"location":"net-NetAuth/#parameters","title":"Parameters","text":"<ul> <li>from: AmbientAuth val</li> </ul>"},{"location":"net-NetAuth/#returns","title":"Returns","text":"<ul> <li>NetAuth val^</li> </ul>"},{"location":"net-NetAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-NetAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: NetAuth val)\n: Bool val\n</code></pre>"},{"location":"net-NetAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: NetAuth val</li> </ul>"},{"location":"net-NetAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: NetAuth val)\n: Bool val\n</code></pre>"},{"location":"net-NetAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: NetAuth val</li> </ul>"},{"location":"net-NetAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NoProxy/","title":"NoProxy","text":"<p>[Source]</p> <p>Default implementation of a proxy that does not alter the supplied <code>TCPConnectionNotify</code>.</p> <pre><code>actor MyClient\n  new create(host: String, service: String, proxy: Proxy = NoProxy) =&gt;\n    let conn: TCPConnection = TCPConnection.create(\n      TCPConnectAuth(env.root),\n      proxy.apply(MyConnectionNotify.create()),\n      \"localhost\",\n      \"80\")\n</code></pre> <pre><code>class val NoProxy is\n  Proxy ref\n</code></pre>"},{"location":"net-NoProxy/#implements","title":"Implements","text":"<ul> <li>Proxy ref</li> </ul>"},{"location":"net-NoProxy/#constructors","title":"Constructors","text":""},{"location":"net-NoProxy/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: NoProxy iso^\n</code></pre>"},{"location":"net-NoProxy/#returns","title":"Returns","text":"<ul> <li>NoProxy iso^</li> </ul>"},{"location":"net-NoProxy/#public-functions","title":"Public Functions","text":""},{"location":"net-NoProxy/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  wrap: TCPConnectionNotify iso)\n: TCPConnectionNotify iso^\n</code></pre>"},{"location":"net-NoProxy/#parameters","title":"Parameters","text":"<ul> <li>wrap: TCPConnectionNotify iso</li> </ul>"},{"location":"net-NoProxy/#returns_1","title":"Returns","text":"<ul> <li>TCPConnectionNotify iso^</li> </ul>"},{"location":"net-OSSockOpt/","title":"OSSockOpt","text":"<p>[Source]</p> <p>Convenience functions to fetch the option level and option name constants (arguments #2 and #3) for the <code>getsockopt(2)</code> and <code>setsockopt(2)</code> operating system calls.</p> <p>The values of the option level and option name constants are typically C preprocessor macros, e.g., <code>#define SOMETHING 42</code>. These macro names are upper case and may contain multiple consecutive underscore characters (though this is rare, for example, <code>IP_NAT__XXX</code>).  The function names in this primitive are derived by the C macro name and then:</p> <ul> <li>converted to lower case</li> <li>any double underscore (<code>__</code>) is converted to a     single underscore (<code>_</code>).</li> </ul> <p>These constants are not stable between Pony releases. Values returned by this function may be held by long-lived variables by the calling process: values cannot change while the process runs. Programmers must not cache any of these values for purposes of sharing them for use by any other Pony program (for example, sharing via serialization &amp; deserialization or via direct shared memory).</p> <p>Many functions may return <code>-1</code>, which means that the constant's value could not be determined at the Pony runtime library compile time.  One cause may be that the option truly isn't available, for example, the option level constant <code>IPPROTO_3PC</code> is available on MacOS 10.x but not on Linux 4.4.  Another cause may be the Pony runtime library's compilation did not include the correct header file(s) for the target OS platform.</p> <p>A third cause of error is due to the regular expression-based approach used to harvest desirable constants.  It is not fool-proof. The regexp used is too broad and finds some macros that are not supposed to be used with <code>getsockopt(2)</code> and <code>setsockopt(2)</code>. Please consult your platform's documentation to verify the names of the option level and option name macros.</p> <p>The following code fragments are equivalent: set the socket receive buffer size for the file descriptor <code>fd</code> to <code>4455</code>.</p> <pre><code>/* In C */\nint option_value = 4455;\nsetsockopt(fd, SOL_SOCKET, SO_RCVBUF, &amp;option_value, 4);\n\n/* In Pony */\nvar option: I32 = 4455;\n@setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(),\n  addressof option, I32(4))\n</code></pre> <pre><code>primitive val OSSockOpt\n</code></pre>"},{"location":"net-OSSockOpt/#constructors","title":"Constructors","text":""},{"location":"net-OSSockOpt/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: OSSockOpt val^\n</code></pre>"},{"location":"net-OSSockOpt/#returns","title":"Returns","text":"<ul> <li>OSSockOpt val^</li> </ul>"},{"location":"net-OSSockOpt/#public-functions","title":"Public Functions","text":""},{"location":"net-OSSockOpt/#ipproto_3pc","title":"ipproto_3pc","text":"<p>[Source]</p> <pre><code>fun box ipproto_3pc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_adfs","title":"ipproto_adfs","text":"<p>[Source]</p> <pre><code>fun box ipproto_adfs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_2","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ah","title":"ipproto_ah","text":"<p>[Source]</p> <pre><code>fun box ipproto_ah()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_3","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ahip","title":"ipproto_ahip","text":"<p>[Source]</p> <pre><code>fun box ipproto_ahip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_4","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_apes","title":"ipproto_apes","text":"<p>[Source]</p> <pre><code>fun box ipproto_apes()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_5","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_argus","title":"ipproto_argus","text":"<p>[Source]</p> <pre><code>fun box ipproto_argus()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_6","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ax25","title":"ipproto_ax25","text":"<p>[Source]</p> <pre><code>fun box ipproto_ax25()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_7","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_beetph","title":"ipproto_beetph","text":"<p>[Source]</p> <pre><code>fun box ipproto_beetph()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_8","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_bha","title":"ipproto_bha","text":"<p>[Source]</p> <pre><code>fun box ipproto_bha()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_9","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_blt","title":"ipproto_blt","text":"<p>[Source]</p> <pre><code>fun box ipproto_blt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_10","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_brsatmon","title":"ipproto_brsatmon","text":"<p>[Source]</p> <pre><code>fun box ipproto_brsatmon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_11","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_carp","title":"ipproto_carp","text":"<p>[Source]</p> <pre><code>fun box ipproto_carp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_12","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_cftp","title":"ipproto_cftp","text":"<p>[Source]</p> <pre><code>fun box ipproto_cftp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_chaos","title":"ipproto_chaos","text":"<p>[Source]</p> <pre><code>fun box ipproto_chaos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_14","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_cmtp","title":"ipproto_cmtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_cmtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_15","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_comp","title":"ipproto_comp","text":"<p>[Source]</p> <pre><code>fun box ipproto_comp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_16","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_cphb","title":"ipproto_cphb","text":"<p>[Source]</p> <pre><code>fun box ipproto_cphb()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_17","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_cpnx","title":"ipproto_cpnx","text":"<p>[Source]</p> <pre><code>fun box ipproto_cpnx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_18","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_dccp","title":"ipproto_dccp","text":"<p>[Source]</p> <pre><code>fun box ipproto_dccp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_19","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ddp","title":"ipproto_ddp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ddp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_20","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_dgp","title":"ipproto_dgp","text":"<p>[Source]</p> <pre><code>fun box ipproto_dgp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_21","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_divert","title":"ipproto_divert","text":"<p>[Source]</p> <pre><code>fun box ipproto_divert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_22","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_done","title":"ipproto_done","text":"<p>[Source]</p> <pre><code>fun box ipproto_done()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_23","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_dstopts","title":"ipproto_dstopts","text":"<p>[Source]</p> <pre><code>fun box ipproto_dstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_24","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_egp","title":"ipproto_egp","text":"<p>[Source]</p> <pre><code>fun box ipproto_egp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_25","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_emcon","title":"ipproto_emcon","text":"<p>[Source]</p> <pre><code>fun box ipproto_emcon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_26","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_encap","title":"ipproto_encap","text":"<p>[Source]</p> <pre><code>fun box ipproto_encap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_27","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_eon","title":"ipproto_eon","text":"<p>[Source]</p> <pre><code>fun box ipproto_eon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_28","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_esp","title":"ipproto_esp","text":"<p>[Source]</p> <pre><code>fun box ipproto_esp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_29","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_etherip","title":"ipproto_etherip","text":"<p>[Source]</p> <pre><code>fun box ipproto_etherip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_30","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_fragment","title":"ipproto_fragment","text":"<p>[Source]</p> <pre><code>fun box ipproto_fragment()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_31","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ggp","title":"ipproto_ggp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ggp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_32","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_gmtp","title":"ipproto_gmtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_gmtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_33","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_gre","title":"ipproto_gre","text":"<p>[Source]</p> <pre><code>fun box ipproto_gre()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_34","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_hello","title":"ipproto_hello","text":"<p>[Source]</p> <pre><code>fun box ipproto_hello()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_35","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_hip","title":"ipproto_hip","text":"<p>[Source]</p> <pre><code>fun box ipproto_hip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_36","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_hmp","title":"ipproto_hmp","text":"<p>[Source]</p> <pre><code>fun box ipproto_hmp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_37","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_hopopts","title":"ipproto_hopopts","text":"<p>[Source]</p> <pre><code>fun box ipproto_hopopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_38","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_icmp","title":"ipproto_icmp","text":"<p>[Source]</p> <pre><code>fun box ipproto_icmp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_39","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_icmpv6","title":"ipproto_icmpv6","text":"<p>[Source]</p> <pre><code>fun box ipproto_icmpv6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_40","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_idp","title":"ipproto_idp","text":"<p>[Source]</p> <pre><code>fun box ipproto_idp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_41","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_idpr","title":"ipproto_idpr","text":"<p>[Source]</p> <pre><code>fun box ipproto_idpr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_42","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_idrp","title":"ipproto_idrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_idrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_43","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_igmp","title":"ipproto_igmp","text":"<p>[Source]</p> <pre><code>fun box ipproto_igmp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_44","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_igp","title":"ipproto_igp","text":"<p>[Source]</p> <pre><code>fun box ipproto_igp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_45","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_igrp","title":"ipproto_igrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_igrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_46","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_il","title":"ipproto_il","text":"<p>[Source]</p> <pre><code>fun box ipproto_il()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_47","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_inlsp","title":"ipproto_inlsp","text":"<p>[Source]</p> <pre><code>fun box ipproto_inlsp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_48","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_inp","title":"ipproto_inp","text":"<p>[Source]</p> <pre><code>fun box ipproto_inp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_49","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ip","title":"ipproto_ip","text":"<p>[Source]</p> <pre><code>fun box ipproto_ip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_50","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipcomp","title":"ipproto_ipcomp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipcomp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_51","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipcv","title":"ipproto_ipcv","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipcv()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_52","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipeip","title":"ipproto_ipeip","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipeip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_53","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipip","title":"ipproto_ipip","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_54","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ippc","title":"ipproto_ippc","text":"<p>[Source]</p> <pre><code>fun box ipproto_ippc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_55","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipv4","title":"ipproto_ipv4","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipv4()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_56","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipv6","title":"ipproto_ipv6","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipv6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_57","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_irtp","title":"ipproto_irtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_irtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_58","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_kryptolan","title":"ipproto_kryptolan","text":"<p>[Source]</p> <pre><code>fun box ipproto_kryptolan()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_59","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_larp","title":"ipproto_larp","text":"<p>[Source]</p> <pre><code>fun box ipproto_larp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_60","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_leaf1","title":"ipproto_leaf1","text":"<p>[Source]</p> <pre><code>fun box ipproto_leaf1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_61","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_leaf2","title":"ipproto_leaf2","text":"<p>[Source]</p> <pre><code>fun box ipproto_leaf2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_62","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_max","title":"ipproto_max","text":"<p>[Source]</p> <pre><code>fun box ipproto_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_63","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_maxid","title":"ipproto_maxid","text":"<p>[Source]</p> <pre><code>fun box ipproto_maxid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_64","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_meas","title":"ipproto_meas","text":"<p>[Source]</p> <pre><code>fun box ipproto_meas()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_65","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mh","title":"ipproto_mh","text":"<p>[Source]</p> <pre><code>fun box ipproto_mh()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_66","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mhrp","title":"ipproto_mhrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_mhrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_67","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_micp","title":"ipproto_micp","text":"<p>[Source]</p> <pre><code>fun box ipproto_micp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mobile","title":"ipproto_mobile","text":"<p>[Source]</p> <pre><code>fun box ipproto_mobile()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_69","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mpls","title":"ipproto_mpls","text":"<p>[Source]</p> <pre><code>fun box ipproto_mpls()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_70","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mtp","title":"ipproto_mtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_mtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mux","title":"ipproto_mux","text":"<p>[Source]</p> <pre><code>fun box ipproto_mux()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_72","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_nd","title":"ipproto_nd","text":"<p>[Source]</p> <pre><code>fun box ipproto_nd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_73","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_nhrp","title":"ipproto_nhrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_nhrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_74","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_none","title":"ipproto_none","text":"<p>[Source]</p> <pre><code>fun box ipproto_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_75","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_nsp","title":"ipproto_nsp","text":"<p>[Source]</p> <pre><code>fun box ipproto_nsp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_76","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_nvpii","title":"ipproto_nvpii","text":"<p>[Source]</p> <pre><code>fun box ipproto_nvpii()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_77","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_old_divert","title":"ipproto_old_divert","text":"<p>[Source]</p> <pre><code>fun box ipproto_old_divert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_78","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ospfigp","title":"ipproto_ospfigp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ospfigp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_79","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pfsync","title":"ipproto_pfsync","text":"<p>[Source]</p> <pre><code>fun box ipproto_pfsync()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_80","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pgm","title":"ipproto_pgm","text":"<p>[Source]</p> <pre><code>fun box ipproto_pgm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_81","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pigp","title":"ipproto_pigp","text":"<p>[Source]</p> <pre><code>fun box ipproto_pigp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_82","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pim","title":"ipproto_pim","text":"<p>[Source]</p> <pre><code>fun box ipproto_pim()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_83","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_prm","title":"ipproto_prm","text":"<p>[Source]</p> <pre><code>fun box ipproto_prm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pup","title":"ipproto_pup","text":"<p>[Source]</p> <pre><code>fun box ipproto_pup()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_85","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pvp","title":"ipproto_pvp","text":"<p>[Source]</p> <pre><code>fun box ipproto_pvp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_86","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_raw","title":"ipproto_raw","text":"<p>[Source]</p> <pre><code>fun box ipproto_raw()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_rccmon","title":"ipproto_rccmon","text":"<p>[Source]</p> <pre><code>fun box ipproto_rccmon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_88","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_rdp","title":"ipproto_rdp","text":"<p>[Source]</p> <pre><code>fun box ipproto_rdp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_89","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_reserved_253","title":"ipproto_reserved_253","text":"<p>[Source]</p> <pre><code>fun box ipproto_reserved_253()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_90","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_reserved_254","title":"ipproto_reserved_254","text":"<p>[Source]</p> <pre><code>fun box ipproto_reserved_254()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_91","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_routing","title":"ipproto_routing","text":"<p>[Source]</p> <pre><code>fun box ipproto_routing()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_92","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_rsvp","title":"ipproto_rsvp","text":"<p>[Source]</p> <pre><code>fun box ipproto_rsvp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_93","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_rvd","title":"ipproto_rvd","text":"<p>[Source]</p> <pre><code>fun box ipproto_rvd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_94","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_satexpak","title":"ipproto_satexpak","text":"<p>[Source]</p> <pre><code>fun box ipproto_satexpak()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_95","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_satmon","title":"ipproto_satmon","text":"<p>[Source]</p> <pre><code>fun box ipproto_satmon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_96","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_sccsp","title":"ipproto_sccsp","text":"<p>[Source]</p> <pre><code>fun box ipproto_sccsp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_97","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_sctp","title":"ipproto_sctp","text":"<p>[Source]</p> <pre><code>fun box ipproto_sctp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_98","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_sdrp","title":"ipproto_sdrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_sdrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_99","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_send","title":"ipproto_send","text":"<p>[Source]</p> <pre><code>fun box ipproto_send()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_100","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_sep","title":"ipproto_sep","text":"<p>[Source]</p> <pre><code>fun box ipproto_sep()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_101","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_shim6","title":"ipproto_shim6","text":"<p>[Source]</p> <pre><code>fun box ipproto_shim6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_102","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_skip","title":"ipproto_skip","text":"<p>[Source]</p> <pre><code>fun box ipproto_skip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_103","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_spacer","title":"ipproto_spacer","text":"<p>[Source]</p> <pre><code>fun box ipproto_spacer()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_104","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_srpc","title":"ipproto_srpc","text":"<p>[Source]</p> <pre><code>fun box ipproto_srpc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_105","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_st","title":"ipproto_st","text":"<p>[Source]</p> <pre><code>fun box ipproto_st()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_106","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_svmtp","title":"ipproto_svmtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_svmtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_107","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_swipe","title":"ipproto_swipe","text":"<p>[Source]</p> <pre><code>fun box ipproto_swipe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_108","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tcf","title":"ipproto_tcf","text":"<p>[Source]</p> <pre><code>fun box ipproto_tcf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_109","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tcp","title":"ipproto_tcp","text":"<p>[Source]</p> <pre><code>fun box ipproto_tcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_110","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tlsp","title":"ipproto_tlsp","text":"<p>[Source]</p> <pre><code>fun box ipproto_tlsp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_111","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tp","title":"ipproto_tp","text":"<p>[Source]</p> <pre><code>fun box ipproto_tp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_112","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tpxx","title":"ipproto_tpxx","text":"<p>[Source]</p> <pre><code>fun box ipproto_tpxx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_113","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_trunk1","title":"ipproto_trunk1","text":"<p>[Source]</p> <pre><code>fun box ipproto_trunk1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_114","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_trunk2","title":"ipproto_trunk2","text":"<p>[Source]</p> <pre><code>fun box ipproto_trunk2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_115","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ttp","title":"ipproto_ttp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ttp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_116","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_udp","title":"ipproto_udp","text":"<p>[Source]</p> <pre><code>fun box ipproto_udp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_117","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_udplite","title":"ipproto_udplite","text":"<p>[Source]</p> <pre><code>fun box ipproto_udplite()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_118","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_vines","title":"ipproto_vines","text":"<p>[Source]</p> <pre><code>fun box ipproto_vines()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_119","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_visa","title":"ipproto_visa","text":"<p>[Source]</p> <pre><code>fun box ipproto_visa()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_120","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_vmtp","title":"ipproto_vmtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_vmtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_121","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_wbexpak","title":"ipproto_wbexpak","text":"<p>[Source]</p> <pre><code>fun box ipproto_wbexpak()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_122","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_wbmon","title":"ipproto_wbmon","text":"<p>[Source]</p> <pre><code>fun box ipproto_wbmon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_123","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_wsn","title":"ipproto_wsn","text":"<p>[Source]</p> <pre><code>fun box ipproto_wsn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_124","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_xnet","title":"ipproto_xnet","text":"<p>[Source]</p> <pre><code>fun box ipproto_xnet()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_125","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_xtp","title":"ipproto_xtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_xtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_126","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_atalk","title":"sol_atalk","text":"<p>[Source]</p> <pre><code>fun box sol_atalk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_127","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_ax25","title":"sol_ax25","text":"<p>[Source]</p> <pre><code>fun box sol_ax25()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_128","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_hci_raw","title":"sol_hci_raw","text":"<p>[Source]</p> <pre><code>fun box sol_hci_raw()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_129","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_ipx","title":"sol_ipx","text":"<p>[Source]</p> <pre><code>fun box sol_ipx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_130","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_l2cap","title":"sol_l2cap","text":"<p>[Source]</p> <pre><code>fun box sol_l2cap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_131","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_local","title":"sol_local","text":"<p>[Source]</p> <pre><code>fun box sol_local()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_132","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_ndrvproto","title":"sol_ndrvproto","text":"<p>[Source]</p> <pre><code>fun box sol_ndrvproto()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_133","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_netrom","title":"sol_netrom","text":"<p>[Source]</p> <pre><code>fun box sol_netrom()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_134","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_rds","title":"sol_rds","text":"<p>[Source]</p> <pre><code>fun box sol_rds()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_135","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_rfcomm","title":"sol_rfcomm","text":"<p>[Source]</p> <pre><code>fun box sol_rfcomm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_136","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_rose","title":"sol_rose","text":"<p>[Source]</p> <pre><code>fun box sol_rose()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_137","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_sco","title":"sol_sco","text":"<p>[Source]</p> <pre><code>fun box sol_sco()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_138","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_socket","title":"sol_socket","text":"<p>[Source]</p> <pre><code>fun box sol_socket()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_139","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_tipc","title":"sol_tipc","text":"<p>[Source]</p> <pre><code>fun box sol_tipc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_140","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_udp","title":"sol_udp","text":"<p>[Source]</p> <pre><code>fun box sol_udp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_141","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#af_coip","title":"af_coip","text":"<p>[Source]</p> <pre><code>fun box af_coip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_142","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#af_inet","title":"af_inet","text":"<p>[Source]</p> <pre><code>fun box af_inet()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_143","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#af_inet6","title":"af_inet6","text":"<p>[Source]</p> <pre><code>fun box af_inet6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_144","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#bluetooth_proto_sco","title":"bluetooth_proto_sco","text":"<p>[Source]</p> <pre><code>fun box bluetooth_proto_sco()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_145","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_nr_pkt_types","title":"dccp_nr_pkt_types","text":"<p>[Source]</p> <pre><code>fun box dccp_nr_pkt_types()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_146","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_service_list_max_len","title":"dccp_service_list_max_len","text":"<p>[Source]</p> <pre><code>fun box dccp_service_list_max_len()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_147","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_single_opt_maxlen","title":"dccp_single_opt_maxlen","text":"<p>[Source]</p> <pre><code>fun box dccp_single_opt_maxlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_148","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_available_ccids","title":"dccp_sockopt_available_ccids","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_available_ccids()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_149","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid","title":"dccp_sockopt_ccid","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_ccid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_150","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid_rx_info","title":"dccp_sockopt_ccid_rx_info","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_ccid_rx_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_151","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid_tx_info","title":"dccp_sockopt_ccid_tx_info","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_ccid_tx_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_152","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_change_l","title":"dccp_sockopt_change_l","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_change_l()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_153","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_change_r","title":"dccp_sockopt_change_r","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_change_r()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_154","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_get_cur_mps","title":"dccp_sockopt_get_cur_mps","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_get_cur_mps()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_155","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_packet_size","title":"dccp_sockopt_packet_size","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_packet_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_156","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_qpolicy_id","title":"dccp_sockopt_qpolicy_id","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_qpolicy_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_157","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_qpolicy_txqlen","title":"dccp_sockopt_qpolicy_txqlen","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_qpolicy_txqlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_158","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_recv_cscov","title":"dccp_sockopt_recv_cscov","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_recv_cscov()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_159","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_rx_ccid","title":"dccp_sockopt_rx_ccid","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_rx_ccid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_160","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_send_cscov","title":"dccp_sockopt_send_cscov","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_send_cscov()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_161","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_server_timewait","title":"dccp_sockopt_server_timewait","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_server_timewait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_162","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_service","title":"dccp_sockopt_service","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_service()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_163","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_tx_ccid","title":"dccp_sockopt_tx_ccid","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_tx_ccid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_164","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_acceptmode","title":"dso_acceptmode","text":"<p>[Source]</p> <pre><code>fun box dso_acceptmode()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_165","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_conaccept","title":"dso_conaccept","text":"<p>[Source]</p> <pre><code>fun box dso_conaccept()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_166","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_conaccess","title":"dso_conaccess","text":"<p>[Source]</p> <pre><code>fun box dso_conaccess()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_167","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_condata","title":"dso_condata","text":"<p>[Source]</p> <pre><code>fun box dso_condata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_168","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_conreject","title":"dso_conreject","text":"<p>[Source]</p> <pre><code>fun box dso_conreject()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_169","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_cork","title":"dso_cork","text":"<p>[Source]</p> <pre><code>fun box dso_cork()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_170","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_disdata","title":"dso_disdata","text":"<p>[Source]</p> <pre><code>fun box dso_disdata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_171","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_info","title":"dso_info","text":"<p>[Source]</p> <pre><code>fun box dso_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_172","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_linkinfo","title":"dso_linkinfo","text":"<p>[Source]</p> <pre><code>fun box dso_linkinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_173","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_max","title":"dso_max","text":"<p>[Source]</p> <pre><code>fun box dso_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_174","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_maxwindow","title":"dso_maxwindow","text":"<p>[Source]</p> <pre><code>fun box dso_maxwindow()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_175","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_nodelay","title":"dso_nodelay","text":"<p>[Source]</p> <pre><code>fun box dso_nodelay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_176","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_seqpacket","title":"dso_seqpacket","text":"<p>[Source]</p> <pre><code>fun box dso_seqpacket()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_177","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_services","title":"dso_services","text":"<p>[Source]</p> <pre><code>fun box dso_services()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_178","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_stream","title":"dso_stream","text":"<p>[Source]</p> <pre><code>fun box dso_stream()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_179","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_address","title":"icmp_address","text":"<p>[Source]</p> <pre><code>fun box icmp_address()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_180","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_addressreply","title":"icmp_addressreply","text":"<p>[Source]</p> <pre><code>fun box icmp_addressreply()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_181","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_dest_unreach","title":"icmp_dest_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_dest_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_182","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_echo","title":"icmp_echo","text":"<p>[Source]</p> <pre><code>fun box icmp_echo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_183","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_echoreply","title":"icmp_echoreply","text":"<p>[Source]</p> <pre><code>fun box icmp_echoreply()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_184","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_exc_fragtime","title":"icmp_exc_fragtime","text":"<p>[Source]</p> <pre><code>fun box icmp_exc_fragtime()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_185","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_exc_ttl","title":"icmp_exc_ttl","text":"<p>[Source]</p> <pre><code>fun box icmp_exc_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_186","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_filter","title":"icmp_filter","text":"<p>[Source]</p> <pre><code>fun box icmp_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_187","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_frag_needed","title":"icmp_frag_needed","text":"<p>[Source]</p> <pre><code>fun box icmp_frag_needed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_188","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_ano","title":"icmp_host_ano","text":"<p>[Source]</p> <pre><code>fun box icmp_host_ano()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_189","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_isolated","title":"icmp_host_isolated","text":"<p>[Source]</p> <pre><code>fun box icmp_host_isolated()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_190","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_unknown","title":"icmp_host_unknown","text":"<p>[Source]</p> <pre><code>fun box icmp_host_unknown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_191","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_unreach","title":"icmp_host_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_host_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_192","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_unr_tos","title":"icmp_host_unr_tos","text":"<p>[Source]</p> <pre><code>fun box icmp_host_unr_tos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_193","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_info_reply","title":"icmp_info_reply","text":"<p>[Source]</p> <pre><code>fun box icmp_info_reply()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_194","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_info_request","title":"icmp_info_request","text":"<p>[Source]</p> <pre><code>fun box icmp_info_request()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_195","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_net_ano","title":"icmp_net_ano","text":"<p>[Source]</p> <pre><code>fun box icmp_net_ano()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_196","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_net_unknown","title":"icmp_net_unknown","text":"<p>[Source]</p> <pre><code>fun box icmp_net_unknown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_197","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_net_unreach","title":"icmp_net_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_net_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_198","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_net_unr_tos","title":"icmp_net_unr_tos","text":"<p>[Source]</p> <pre><code>fun box icmp_net_unr_tos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_199","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_parameterprob","title":"icmp_parameterprob","text":"<p>[Source]</p> <pre><code>fun box icmp_parameterprob()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_200","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_pkt_filtered","title":"icmp_pkt_filtered","text":"<p>[Source]</p> <pre><code>fun box icmp_pkt_filtered()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_201","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_port_unreach","title":"icmp_port_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_port_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_202","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_prec_cutoff","title":"icmp_prec_cutoff","text":"<p>[Source]</p> <pre><code>fun box icmp_prec_cutoff()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_203","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_prec_violation","title":"icmp_prec_violation","text":"<p>[Source]</p> <pre><code>fun box icmp_prec_violation()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_204","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_prot_unreach","title":"icmp_prot_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_prot_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_205","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redirect","title":"icmp_redirect","text":"<p>[Source]</p> <pre><code>fun box icmp_redirect()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_206","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redir_host","title":"icmp_redir_host","text":"<p>[Source]</p> <pre><code>fun box icmp_redir_host()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_207","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redir_hosttos","title":"icmp_redir_hosttos","text":"<p>[Source]</p> <pre><code>fun box icmp_redir_hosttos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_208","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redir_net","title":"icmp_redir_net","text":"<p>[Source]</p> <pre><code>fun box icmp_redir_net()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_209","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redir_nettos","title":"icmp_redir_nettos","text":"<p>[Source]</p> <pre><code>fun box icmp_redir_nettos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_210","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_source_quench","title":"icmp_source_quench","text":"<p>[Source]</p> <pre><code>fun box icmp_source_quench()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_211","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_sr_failed","title":"icmp_sr_failed","text":"<p>[Source]</p> <pre><code>fun box icmp_sr_failed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_212","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_timestamp","title":"icmp_timestamp","text":"<p>[Source]</p> <pre><code>fun box icmp_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_213","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_timestampreply","title":"icmp_timestampreply","text":"<p>[Source]</p> <pre><code>fun box icmp_timestampreply()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_214","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_time_exceeded","title":"icmp_time_exceeded","text":"<p>[Source]</p> <pre><code>fun box icmp_time_exceeded()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_215","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_acceptsourceroute","title":"ipctl_acceptsourceroute","text":"<p>[Source]</p> <pre><code>fun box ipctl_acceptsourceroute()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_216","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_defmtu","title":"ipctl_defmtu","text":"<p>[Source]</p> <pre><code>fun box ipctl_defmtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_217","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_defttl","title":"ipctl_defttl","text":"<p>[Source]</p> <pre><code>fun box ipctl_defttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_218","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_directedbroadcast","title":"ipctl_directedbroadcast","text":"<p>[Source]</p> <pre><code>fun box ipctl_directedbroadcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_219","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_fastforwarding","title":"ipctl_fastforwarding","text":"<p>[Source]</p> <pre><code>fun box ipctl_fastforwarding()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_220","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_forwarding","title":"ipctl_forwarding","text":"<p>[Source]</p> <pre><code>fun box ipctl_forwarding()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_221","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_gif_ttl","title":"ipctl_gif_ttl","text":"<p>[Source]</p> <pre><code>fun box ipctl_gif_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_222","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_intrdqdrops","title":"ipctl_intrdqdrops","text":"<p>[Source]</p> <pre><code>fun box ipctl_intrdqdrops()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_223","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_intrdqmaxlen","title":"ipctl_intrdqmaxlen","text":"<p>[Source]</p> <pre><code>fun box ipctl_intrdqmaxlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_224","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_intrqdrops","title":"ipctl_intrqdrops","text":"<p>[Source]</p> <pre><code>fun box ipctl_intrqdrops()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_225","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_intrqmaxlen","title":"ipctl_intrqmaxlen","text":"<p>[Source]</p> <pre><code>fun box ipctl_intrqmaxlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_226","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_keepfaith","title":"ipctl_keepfaith","text":"<p>[Source]</p> <pre><code>fun box ipctl_keepfaith()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_227","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_maxid","title":"ipctl_maxid","text":"<p>[Source]</p> <pre><code>fun box ipctl_maxid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_228","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_rtexpire","title":"ipctl_rtexpire","text":"<p>[Source]</p> <pre><code>fun box ipctl_rtexpire()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_229","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_rtmaxcache","title":"ipctl_rtmaxcache","text":"<p>[Source]</p> <pre><code>fun box ipctl_rtmaxcache()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_230","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_rtminexpire","title":"ipctl_rtminexpire","text":"<p>[Source]</p> <pre><code>fun box ipctl_rtminexpire()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_231","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_sendredirects","title":"ipctl_sendredirects","text":"<p>[Source]</p> <pre><code>fun box ipctl_sendredirects()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_232","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_sourceroute","title":"ipctl_sourceroute","text":"<p>[Source]</p> <pre><code>fun box ipctl_sourceroute()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_233","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_stats","title":"ipctl_stats","text":"<p>[Source]</p> <pre><code>fun box ipctl_stats()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_234","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_ephemeralfirst","title":"ipport_ephemeralfirst","text":"<p>[Source]</p> <pre><code>fun box ipport_ephemeralfirst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_235","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_ephemerallast","title":"ipport_ephemerallast","text":"<p>[Source]</p> <pre><code>fun box ipport_ephemerallast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_236","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_hifirstauto","title":"ipport_hifirstauto","text":"<p>[Source]</p> <pre><code>fun box ipport_hifirstauto()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_237","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_hilastauto","title":"ipport_hilastauto","text":"<p>[Source]</p> <pre><code>fun box ipport_hilastauto()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_238","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_max","title":"ipport_max","text":"<p>[Source]</p> <pre><code>fun box ipport_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_239","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_reserved","title":"ipport_reserved","text":"<p>[Source]</p> <pre><code>fun box ipport_reserved()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_240","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_reservedstart","title":"ipport_reservedstart","text":"<p>[Source]</p> <pre><code>fun box ipport_reservedstart()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_241","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_userreserved","title":"ipport_userreserved","text":"<p>[Source]</p> <pre><code>fun box ipport_userreserved()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_242","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292dstopts","title":"ipv6_2292dstopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292dstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_243","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292hoplimit","title":"ipv6_2292hoplimit","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292hoplimit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_244","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292hopopts","title":"ipv6_2292hopopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292hopopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_245","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292pktinfo","title":"ipv6_2292pktinfo","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292pktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_246","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292pktoptions","title":"ipv6_2292pktoptions","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292pktoptions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_247","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292rthdr","title":"ipv6_2292rthdr","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292rthdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_248","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_addrform","title":"ipv6_addrform","text":"<p>[Source]</p> <pre><code>fun box ipv6_addrform()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_249","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_addr_preferences","title":"ipv6_addr_preferences","text":"<p>[Source]</p> <pre><code>fun box ipv6_addr_preferences()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_250","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_add_membership","title":"ipv6_add_membership","text":"<p>[Source]</p> <pre><code>fun box ipv6_add_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_251","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_authhdr","title":"ipv6_authhdr","text":"<p>[Source]</p> <pre><code>fun box ipv6_authhdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_252","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_autoflowlabel","title":"ipv6_autoflowlabel","text":"<p>[Source]</p> <pre><code>fun box ipv6_autoflowlabel()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_253","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_checksum","title":"ipv6_checksum","text":"<p>[Source]</p> <pre><code>fun box ipv6_checksum()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_254","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_dontfrag","title":"ipv6_dontfrag","text":"<p>[Source]</p> <pre><code>fun box ipv6_dontfrag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_255","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_drop_membership","title":"ipv6_drop_membership","text":"<p>[Source]</p> <pre><code>fun box ipv6_drop_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_256","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_dstopts","title":"ipv6_dstopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_dstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_257","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowinfo","title":"ipv6_flowinfo","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_258","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowinfo_flowlabel","title":"ipv6_flowinfo_flowlabel","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowinfo_flowlabel()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_259","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowinfo_priority","title":"ipv6_flowinfo_priority","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowinfo_priority()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_260","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowinfo_send","title":"ipv6_flowinfo_send","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowinfo_send()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_261","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowlabel_mgr","title":"ipv6_flowlabel_mgr","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowlabel_mgr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_262","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_a_get","title":"ipv6_fl_a_get","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_a_get()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_263","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_a_put","title":"ipv6_fl_a_put","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_a_put()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_264","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_a_renew","title":"ipv6_fl_a_renew","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_a_renew()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_265","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_f_create","title":"ipv6_fl_f_create","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_f_create()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_266","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_f_excl","title":"ipv6_fl_f_excl","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_f_excl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_267","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_f_reflect","title":"ipv6_fl_f_reflect","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_f_reflect()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_268","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_f_remote","title":"ipv6_fl_f_remote","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_f_remote()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_269","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_any","title":"ipv6_fl_s_any","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_any()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_270","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_excl","title":"ipv6_fl_s_excl","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_excl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_271","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_none","title":"ipv6_fl_s_none","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_272","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_process","title":"ipv6_fl_s_process","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_process()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_273","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_user","title":"ipv6_fl_s_user","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_user()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_274","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_hoplimit","title":"ipv6_hoplimit","text":"<p>[Source]</p> <pre><code>fun box ipv6_hoplimit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_275","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_hopopts","title":"ipv6_hopopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_hopopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_276","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_ipsec_policy","title":"ipv6_ipsec_policy","text":"<p>[Source]</p> <pre><code>fun box ipv6_ipsec_policy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_277","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_join_anycast","title":"ipv6_join_anycast","text":"<p>[Source]</p> <pre><code>fun box ipv6_join_anycast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_278","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_leave_anycast","title":"ipv6_leave_anycast","text":"<p>[Source]</p> <pre><code>fun box ipv6_leave_anycast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_279","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_minhopcount","title":"ipv6_minhopcount","text":"<p>[Source]</p> <pre><code>fun box ipv6_minhopcount()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_280","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_mtu","title":"ipv6_mtu","text":"<p>[Source]</p> <pre><code>fun box ipv6_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_281","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_mtu_discover","title":"ipv6_mtu_discover","text":"<p>[Source]</p> <pre><code>fun box ipv6_mtu_discover()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_282","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_multicast_hops","title":"ipv6_multicast_hops","text":"<p>[Source]</p> <pre><code>fun box ipv6_multicast_hops()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_283","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_multicast_if","title":"ipv6_multicast_if","text":"<p>[Source]</p> <pre><code>fun box ipv6_multicast_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_284","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_multicast_loop","title":"ipv6_multicast_loop","text":"<p>[Source]</p> <pre><code>fun box ipv6_multicast_loop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_285","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_nexthop","title":"ipv6_nexthop","text":"<p>[Source]</p> <pre><code>fun box ipv6_nexthop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_286","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_origdstaddr","title":"ipv6_origdstaddr","text":"<p>[Source]</p> <pre><code>fun box ipv6_origdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_287","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pathmtu","title":"ipv6_pathmtu","text":"<p>[Source]</p> <pre><code>fun box ipv6_pathmtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_288","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pktinfo","title":"ipv6_pktinfo","text":"<p>[Source]</p> <pre><code>fun box ipv6_pktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_289","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_do","title":"ipv6_pmtudisc_do","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_do()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_290","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_dont","title":"ipv6_pmtudisc_dont","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_dont()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_291","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_interface","title":"ipv6_pmtudisc_interface","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_interface()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_292","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_omit","title":"ipv6_pmtudisc_omit","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_omit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_293","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_probe","title":"ipv6_pmtudisc_probe","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_probe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_294","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_want","title":"ipv6_pmtudisc_want","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_want()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_295","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_cga","title":"ipv6_prefer_src_cga","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_cga()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_296","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_coa","title":"ipv6_prefer_src_coa","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_coa()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_297","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_home","title":"ipv6_prefer_src_home","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_home()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_298","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_noncga","title":"ipv6_prefer_src_noncga","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_noncga()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_299","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_public","title":"ipv6_prefer_src_public","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_public()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_300","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_pubtmp_default","title":"ipv6_prefer_src_pubtmp_default","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_pubtmp_default()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_301","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_tmp","title":"ipv6_prefer_src_tmp","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_tmp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_302","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_10","title":"ipv6_priority_10","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_10()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_303","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_11","title":"ipv6_priority_11","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_11()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_304","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_12","title":"ipv6_priority_12","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_12()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_305","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_13","title":"ipv6_priority_13","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_13()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_306","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_14","title":"ipv6_priority_14","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_14()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_307","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_15","title":"ipv6_priority_15","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_15()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_308","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_8","title":"ipv6_priority_8","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_8()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_309","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_9","title":"ipv6_priority_9","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_9()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_310","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_bulk","title":"ipv6_priority_bulk","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_bulk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_311","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_control","title":"ipv6_priority_control","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_control()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_312","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_filler","title":"ipv6_priority_filler","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_filler()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_313","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_interactive","title":"ipv6_priority_interactive","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_interactive()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_314","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_reserved1","title":"ipv6_priority_reserved1","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_reserved1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_315","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_reserved2","title":"ipv6_priority_reserved2","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_reserved2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_316","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_unattended","title":"ipv6_priority_unattended","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_unattended()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_317","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_uncharacterized","title":"ipv6_priority_uncharacterized","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_uncharacterized()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_318","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvdstopts","title":"ipv6_recvdstopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvdstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_319","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recverr","title":"ipv6_recverr","text":"<p>[Source]</p> <pre><code>fun box ipv6_recverr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_320","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvhoplimit","title":"ipv6_recvhoplimit","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvhoplimit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_321","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvhopopts","title":"ipv6_recvhopopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvhopopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_322","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvorigdstaddr","title":"ipv6_recvorigdstaddr","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvorigdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_323","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvpathmtu","title":"ipv6_recvpathmtu","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvpathmtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_324","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvpktinfo","title":"ipv6_recvpktinfo","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvpktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_325","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvrthdr","title":"ipv6_recvrthdr","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvrthdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_326","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvtclass","title":"ipv6_recvtclass","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvtclass()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_327","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_router_alert","title":"ipv6_router_alert","text":"<p>[Source]</p> <pre><code>fun box ipv6_router_alert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_328","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_rthdr","title":"ipv6_rthdr","text":"<p>[Source]</p> <pre><code>fun box ipv6_rthdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_329","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_rthdrdstopts","title":"ipv6_rthdrdstopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_rthdrdstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_330","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tclass","title":"ipv6_tclass","text":"<p>[Source]</p> <pre><code>fun box ipv6_tclass()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_331","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_hao","title":"ipv6_tlv_hao","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_hao()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_332","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_jumbo","title":"ipv6_tlv_jumbo","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_jumbo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_333","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_pad1","title":"ipv6_tlv_pad1","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_pad1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_334","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_padn","title":"ipv6_tlv_padn","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_padn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_335","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_routeralert","title":"ipv6_tlv_routeralert","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_routeralert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_336","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_transparent","title":"ipv6_transparent","text":"<p>[Source]</p> <pre><code>fun box ipv6_transparent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_337","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_unicast_hops","title":"ipv6_unicast_hops","text":"<p>[Source]</p> <pre><code>fun box ipv6_unicast_hops()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_338","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_unicast_if","title":"ipv6_unicast_if","text":"<p>[Source]</p> <pre><code>fun box ipv6_unicast_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_339","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_use_min_mtu","title":"ipv6_use_min_mtu","text":"<p>[Source]</p> <pre><code>fun box ipv6_use_min_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_340","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_v6only","title":"ipv6_v6only","text":"<p>[Source]</p> <pre><code>fun box ipv6_v6only()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_341","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_xfrm_policy","title":"ipv6_xfrm_policy","text":"<p>[Source]</p> <pre><code>fun box ipv6_xfrm_policy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_342","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_address","title":"ipx_address","text":"<p>[Source]</p> <pre><code>fun box ipx_address()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_343","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_address_notify","title":"ipx_address_notify","text":"<p>[Source]</p> <pre><code>fun box ipx_address_notify()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_344","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_crtitf","title":"ipx_crtitf","text":"<p>[Source]</p> <pre><code>fun box ipx_crtitf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_345","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_dltitf","title":"ipx_dltitf","text":"<p>[Source]</p> <pre><code>fun box ipx_dltitf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_346","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_dstype","title":"ipx_dstype","text":"<p>[Source]</p> <pre><code>fun box ipx_dstype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_347","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_extended_address","title":"ipx_extended_address","text":"<p>[Source]</p> <pre><code>fun box ipx_extended_address()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_348","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_filterptype","title":"ipx_filterptype","text":"<p>[Source]</p> <pre><code>fun box ipx_filterptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_349","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_8022","title":"ipx_frame_8022","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_8022()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_350","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_8023","title":"ipx_frame_8023","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_8023()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_351","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_etherii","title":"ipx_frame_etherii","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_etherii()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_352","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_none","title":"ipx_frame_none","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_353","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_snap","title":"ipx_frame_snap","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_snap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_354","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_tr_8022","title":"ipx_frame_tr_8022","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_tr_8022()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_355","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_getnetinfo","title":"ipx_getnetinfo","text":"<p>[Source]</p> <pre><code>fun box ipx_getnetinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_356","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_getnetinfo_norip","title":"ipx_getnetinfo_norip","text":"<p>[Source]</p> <pre><code>fun box ipx_getnetinfo_norip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_357","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_immediatespxack","title":"ipx_immediatespxack","text":"<p>[Source]</p> <pre><code>fun box ipx_immediatespxack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_358","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_internal","title":"ipx_internal","text":"<p>[Source]</p> <pre><code>fun box ipx_internal()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_359","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_maxsize","title":"ipx_maxsize","text":"<p>[Source]</p> <pre><code>fun box ipx_maxsize()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_360","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_max_adapter_num","title":"ipx_max_adapter_num","text":"<p>[Source]</p> <pre><code>fun box ipx_max_adapter_num()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_361","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_mtu","title":"ipx_mtu","text":"<p>[Source]</p> <pre><code>fun box ipx_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_362","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_node_len","title":"ipx_node_len","text":"<p>[Source]</p> <pre><code>fun box ipx_node_len()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_363","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_primary","title":"ipx_primary","text":"<p>[Source]</p> <pre><code>fun box ipx_primary()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_364","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_ptype","title":"ipx_ptype","text":"<p>[Source]</p> <pre><code>fun box ipx_ptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_365","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_receive_broadcast","title":"ipx_receive_broadcast","text":"<p>[Source]</p> <pre><code>fun box ipx_receive_broadcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_366","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_recvhdr","title":"ipx_recvhdr","text":"<p>[Source]</p> <pre><code>fun box ipx_recvhdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_367","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_reripnetnumber","title":"ipx_reripnetnumber","text":"<p>[Source]</p> <pre><code>fun box ipx_reripnetnumber()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_368","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_route_no_router","title":"ipx_route_no_router","text":"<p>[Source]</p> <pre><code>fun box ipx_route_no_router()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_369","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_rt_8022","title":"ipx_rt_8022","text":"<p>[Source]</p> <pre><code>fun box ipx_rt_8022()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_370","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_rt_bluebook","title":"ipx_rt_bluebook","text":"<p>[Source]</p> <pre><code>fun box ipx_rt_bluebook()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_371","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_rt_routed","title":"ipx_rt_routed","text":"<p>[Source]</p> <pre><code>fun box ipx_rt_routed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_372","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_rt_snap","title":"ipx_rt_snap","text":"<p>[Source]</p> <pre><code>fun box ipx_rt_snap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_373","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_special_none","title":"ipx_special_none","text":"<p>[Source]</p> <pre><code>fun box ipx_special_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_374","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_spxgetconnectionstatus","title":"ipx_spxgetconnectionstatus","text":"<p>[Source]</p> <pre><code>fun box ipx_spxgetconnectionstatus()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_375","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_stopfilterptype","title":"ipx_stopfilterptype","text":"<p>[Source]</p> <pre><code>fun box ipx_stopfilterptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_376","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_type","title":"ipx_type","text":"<p>[Source]</p> <pre><code>fun box ipx_type()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_377","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_add_membership","title":"ip_add_membership","text":"<p>[Source]</p> <pre><code>fun box ip_add_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_378","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_add_source_membership","title":"ip_add_source_membership","text":"<p>[Source]</p> <pre><code>fun box ip_add_source_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_379","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_bindany","title":"ip_bindany","text":"<p>[Source]</p> <pre><code>fun box ip_bindany()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_380","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_bindmulti","title":"ip_bindmulti","text":"<p>[Source]</p> <pre><code>fun box ip_bindmulti()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_381","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_bind_address_no_port","title":"ip_bind_address_no_port","text":"<p>[Source]</p> <pre><code>fun box ip_bind_address_no_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_382","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_block_source","title":"ip_block_source","text":"<p>[Source]</p> <pre><code>fun box ip_block_source()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_383","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_bound_if","title":"ip_bound_if","text":"<p>[Source]</p> <pre><code>fun box ip_bound_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_384","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_checksum","title":"ip_checksum","text":"<p>[Source]</p> <pre><code>fun box ip_checksum()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_385","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_default_multicast_loop","title":"ip_default_multicast_loop","text":"<p>[Source]</p> <pre><code>fun box ip_default_multicast_loop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_386","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_default_multicast_ttl","title":"ip_default_multicast_ttl","text":"<p>[Source]</p> <pre><code>fun box ip_default_multicast_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_387","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dontfrag","title":"ip_dontfrag","text":"<p>[Source]</p> <pre><code>fun box ip_dontfrag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_388","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_drop_membership","title":"ip_drop_membership","text":"<p>[Source]</p> <pre><code>fun box ip_drop_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_389","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_drop_source_membership","title":"ip_drop_source_membership","text":"<p>[Source]</p> <pre><code>fun box ip_drop_source_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_390","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet3","title":"ip_dummynet3","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet3()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_391","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet_configure","title":"ip_dummynet_configure","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet_configure()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_392","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet_del","title":"ip_dummynet_del","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_393","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet_flush","title":"ip_dummynet_flush","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_394","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet_get","title":"ip_dummynet_get","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet_get()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_395","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_faith","title":"ip_faith","text":"<p>[Source]</p> <pre><code>fun box ip_faith()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_396","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_flowid","title":"ip_flowid","text":"<p>[Source]</p> <pre><code>fun box ip_flowid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_397","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_flowtype","title":"ip_flowtype","text":"<p>[Source]</p> <pre><code>fun box ip_flowtype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_398","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_freebind","title":"ip_freebind","text":"<p>[Source]</p> <pre><code>fun box ip_freebind()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_399","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw3","title":"ip_fw3","text":"<p>[Source]</p> <pre><code>fun box ip_fw3()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_400","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_add","title":"ip_fw_add","text":"<p>[Source]</p> <pre><code>fun box ip_fw_add()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_401","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_del","title":"ip_fw_del","text":"<p>[Source]</p> <pre><code>fun box ip_fw_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_402","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_flush","title":"ip_fw_flush","text":"<p>[Source]</p> <pre><code>fun box ip_fw_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_403","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_get","title":"ip_fw_get","text":"<p>[Source]</p> <pre><code>fun box ip_fw_get()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_404","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_nat_cfg","title":"ip_fw_nat_cfg","text":"<p>[Source]</p> <pre><code>fun box ip_fw_nat_cfg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_405","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_nat_del","title":"ip_fw_nat_del","text":"<p>[Source]</p> <pre><code>fun box ip_fw_nat_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_406","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_nat_get_config","title":"ip_fw_nat_get_config","text":"<p>[Source]</p> <pre><code>fun box ip_fw_nat_get_config()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_407","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_nat_get_log","title":"ip_fw_nat_get_log","text":"<p>[Source]</p> <pre><code>fun box ip_fw_nat_get_log()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_408","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_resetlog","title":"ip_fw_resetlog","text":"<p>[Source]</p> <pre><code>fun box ip_fw_resetlog()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_409","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_add","title":"ip_fw_table_add","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_add()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_410","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_del","title":"ip_fw_table_del","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_411","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_flush","title":"ip_fw_table_flush","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_412","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_getsize","title":"ip_fw_table_getsize","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_getsize()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_413","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_list","title":"ip_fw_table_list","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_list()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_414","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_zero","title":"ip_fw_zero","text":"<p>[Source]</p> <pre><code>fun box ip_fw_zero()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_415","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_hdrincl","title":"ip_hdrincl","text":"<p>[Source]</p> <pre><code>fun box ip_hdrincl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_416","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_ipsec_policy","title":"ip_ipsec_policy","text":"<p>[Source]</p> <pre><code>fun box ip_ipsec_policy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_417","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_group_src_filter","title":"ip_max_group_src_filter","text":"<p>[Source]</p> <pre><code>fun box ip_max_group_src_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_418","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_memberships","title":"ip_max_memberships","text":"<p>[Source]</p> <pre><code>fun box ip_max_memberships()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_419","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_sock_mute_filter","title":"ip_max_sock_mute_filter","text":"<p>[Source]</p> <pre><code>fun box ip_max_sock_mute_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_420","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_sock_src_filter","title":"ip_max_sock_src_filter","text":"<p>[Source]</p> <pre><code>fun box ip_max_sock_src_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_421","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_source_filter","title":"ip_max_source_filter","text":"<p>[Source]</p> <pre><code>fun box ip_max_source_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_422","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_minttl","title":"ip_minttl","text":"<p>[Source]</p> <pre><code>fun box ip_minttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_423","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_min_memberships","title":"ip_min_memberships","text":"<p>[Source]</p> <pre><code>fun box ip_min_memberships()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_424","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_msfilter","title":"ip_msfilter","text":"<p>[Source]</p> <pre><code>fun box ip_msfilter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_425","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_mtu","title":"ip_mtu","text":"<p>[Source]</p> <pre><code>fun box ip_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_426","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_mtu_discover","title":"ip_mtu_discover","text":"<p>[Source]</p> <pre><code>fun box ip_mtu_discover()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_427","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_all","title":"ip_multicast_all","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_all()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_428","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_if","title":"ip_multicast_if","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_429","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_ifindex","title":"ip_multicast_ifindex","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_ifindex()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_430","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_loop","title":"ip_multicast_loop","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_loop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_431","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_ttl","title":"ip_multicast_ttl","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_432","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_vif","title":"ip_multicast_vif","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_vif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_433","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_nat_xxx","title":"ip_nat_xxx","text":"<p>[Source]</p> <pre><code>fun box ip_nat_xxx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_434","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_nodefrag","title":"ip_nodefrag","text":"<p>[Source]</p> <pre><code>fun box ip_nodefrag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_435","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_add","title":"ip_old_fw_add","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_add()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_436","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_del","title":"ip_old_fw_del","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_437","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_flush","title":"ip_old_fw_flush","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_438","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_get","title":"ip_old_fw_get","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_get()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_439","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_resetlog","title":"ip_old_fw_resetlog","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_resetlog()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_440","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_zero","title":"ip_old_fw_zero","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_zero()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_441","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_onesbcast","title":"ip_onesbcast","text":"<p>[Source]</p> <pre><code>fun box ip_onesbcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_442","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_options","title":"ip_options","text":"<p>[Source]</p> <pre><code>fun box ip_options()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_443","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_origdstaddr","title":"ip_origdstaddr","text":"<p>[Source]</p> <pre><code>fun box ip_origdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_444","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_passsec","title":"ip_passsec","text":"<p>[Source]</p> <pre><code>fun box ip_passsec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_445","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pktinfo","title":"ip_pktinfo","text":"<p>[Source]</p> <pre><code>fun box ip_pktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_446","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pktoptions","title":"ip_pktoptions","text":"<p>[Source]</p> <pre><code>fun box ip_pktoptions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_447","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_do","title":"ip_pmtudisc_do","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_do()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_448","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_dont","title":"ip_pmtudisc_dont","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_dont()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_449","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_interface","title":"ip_pmtudisc_interface","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_interface()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_450","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_omit","title":"ip_pmtudisc_omit","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_omit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_451","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_probe","title":"ip_pmtudisc_probe","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_probe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_452","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_want","title":"ip_pmtudisc_want","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_want()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_453","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_portrange","title":"ip_portrange","text":"<p>[Source]</p> <pre><code>fun box ip_portrange()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_454","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_portrange_default","title":"ip_portrange_default","text":"<p>[Source]</p> <pre><code>fun box ip_portrange_default()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_455","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_portrange_high","title":"ip_portrange_high","text":"<p>[Source]</p> <pre><code>fun box ip_portrange_high()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_456","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_portrange_low","title":"ip_portrange_low","text":"<p>[Source]</p> <pre><code>fun box ip_portrange_low()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_457","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvdstaddr","title":"ip_recvdstaddr","text":"<p>[Source]</p> <pre><code>fun box ip_recvdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_458","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recverr","title":"ip_recverr","text":"<p>[Source]</p> <pre><code>fun box ip_recverr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_459","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvflowid","title":"ip_recvflowid","text":"<p>[Source]</p> <pre><code>fun box ip_recvflowid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_460","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvif","title":"ip_recvif","text":"<p>[Source]</p> <pre><code>fun box ip_recvif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_461","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvopts","title":"ip_recvopts","text":"<p>[Source]</p> <pre><code>fun box ip_recvopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_462","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvorigdstaddr","title":"ip_recvorigdstaddr","text":"<p>[Source]</p> <pre><code>fun box ip_recvorigdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_463","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvpktinfo","title":"ip_recvpktinfo","text":"<p>[Source]</p> <pre><code>fun box ip_recvpktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_464","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvretopts","title":"ip_recvretopts","text":"<p>[Source]</p> <pre><code>fun box ip_recvretopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_465","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvrssbucketid","title":"ip_recvrssbucketid","text":"<p>[Source]</p> <pre><code>fun box ip_recvrssbucketid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_466","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvtos","title":"ip_recvtos","text":"<p>[Source]</p> <pre><code>fun box ip_recvtos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_467","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvttl","title":"ip_recvttl","text":"<p>[Source]</p> <pre><code>fun box ip_recvttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_468","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_retopts","title":"ip_retopts","text":"<p>[Source]</p> <pre><code>fun box ip_retopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_469","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_router_alert","title":"ip_router_alert","text":"<p>[Source]</p> <pre><code>fun box ip_router_alert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_470","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rssbucketid","title":"ip_rssbucketid","text":"<p>[Source]</p> <pre><code>fun box ip_rssbucketid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_471","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rss_listen_bucket","title":"ip_rss_listen_bucket","text":"<p>[Source]</p> <pre><code>fun box ip_rss_listen_bucket()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_472","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rsvp_off","title":"ip_rsvp_off","text":"<p>[Source]</p> <pre><code>fun box ip_rsvp_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_473","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rsvp_on","title":"ip_rsvp_on","text":"<p>[Source]</p> <pre><code>fun box ip_rsvp_on()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_474","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rsvp_vif_off","title":"ip_rsvp_vif_off","text":"<p>[Source]</p> <pre><code>fun box ip_rsvp_vif_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_475","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rsvp_vif_on","title":"ip_rsvp_vif_on","text":"<p>[Source]</p> <pre><code>fun box ip_rsvp_vif_on()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_476","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_sendsrcaddr","title":"ip_sendsrcaddr","text":"<p>[Source]</p> <pre><code>fun box ip_sendsrcaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_477","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_striphdr","title":"ip_striphdr","text":"<p>[Source]</p> <pre><code>fun box ip_striphdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_478","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_tos","title":"ip_tos","text":"<p>[Source]</p> <pre><code>fun box ip_tos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_479","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_traffic_mgt_background","title":"ip_traffic_mgt_background","text":"<p>[Source]</p> <pre><code>fun box ip_traffic_mgt_background()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_480","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_transparent","title":"ip_transparent","text":"<p>[Source]</p> <pre><code>fun box ip_transparent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_481","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_ttl","title":"ip_ttl","text":"<p>[Source]</p> <pre><code>fun box ip_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_482","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_unblock_source","title":"ip_unblock_source","text":"<p>[Source]</p> <pre><code>fun box ip_unblock_source()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_483","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_unicast_if","title":"ip_unicast_if","text":"<p>[Source]</p> <pre><code>fun box ip_unicast_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_484","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_xfrm_policy","title":"ip_xfrm_policy","text":"<p>[Source]</p> <pre><code>fun box ip_xfrm_policy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_485","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_connwait","title":"local_connwait","text":"<p>[Source]</p> <pre><code>fun box local_connwait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_486","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_creds","title":"local_creds","text":"<p>[Source]</p> <pre><code>fun box local_creds()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_487","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peercred","title":"local_peercred","text":"<p>[Source]</p> <pre><code>fun box local_peercred()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_488","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peerepid","title":"local_peerepid","text":"<p>[Source]</p> <pre><code>fun box local_peerepid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_489","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peereuuid","title":"local_peereuuid","text":"<p>[Source]</p> <pre><code>fun box local_peereuuid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_490","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peerpid","title":"local_peerpid","text":"<p>[Source]</p> <pre><code>fun box local_peerpid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_491","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peeruuid","title":"local_peeruuid","text":"<p>[Source]</p> <pre><code>fun box local_peeruuid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_492","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_vendor","title":"local_vendor","text":"<p>[Source]</p> <pre><code>fun box local_vendor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_493","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#max_tcpoptlen","title":"max_tcpoptlen","text":"<p>[Source]</p> <pre><code>fun box max_tcpoptlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_494","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_block_source","title":"mcast_block_source","text":"<p>[Source]</p> <pre><code>fun box mcast_block_source()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_495","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_exclude","title":"mcast_exclude","text":"<p>[Source]</p> <pre><code>fun box mcast_exclude()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_496","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_include","title":"mcast_include","text":"<p>[Source]</p> <pre><code>fun box mcast_include()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_497","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_join_group","title":"mcast_join_group","text":"<p>[Source]</p> <pre><code>fun box mcast_join_group()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_498","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_join_source_group","title":"mcast_join_source_group","text":"<p>[Source]</p> <pre><code>fun box mcast_join_source_group()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_499","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_leave_group","title":"mcast_leave_group","text":"<p>[Source]</p> <pre><code>fun box mcast_leave_group()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_500","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_leave_source_group","title":"mcast_leave_source_group","text":"<p>[Source]</p> <pre><code>fun box mcast_leave_source_group()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_501","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_msfilter","title":"mcast_msfilter","text":"<p>[Source]</p> <pre><code>fun box mcast_msfilter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_502","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_unblock_source","title":"mcast_unblock_source","text":"<p>[Source]</p> <pre><code>fun box mcast_unblock_source()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_503","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_undefined","title":"mcast_undefined","text":"<p>[Source]</p> <pre><code>fun box mcast_undefined()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_504","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_add_bw_upcall","title":"mrt_add_bw_upcall","text":"<p>[Source]</p> <pre><code>fun box mrt_add_bw_upcall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_505","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_add_mfc","title":"mrt_add_mfc","text":"<p>[Source]</p> <pre><code>fun box mrt_add_mfc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_506","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_add_vif","title":"mrt_add_vif","text":"<p>[Source]</p> <pre><code>fun box mrt_add_vif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_507","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_api_config","title":"mrt_api_config","text":"<p>[Source]</p> <pre><code>fun box mrt_api_config()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_508","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_api_flags_all","title":"mrt_api_flags_all","text":"<p>[Source]</p> <pre><code>fun box mrt_api_flags_all()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_509","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_api_support","title":"mrt_api_support","text":"<p>[Source]</p> <pre><code>fun box mrt_api_support()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_510","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_assert","title":"mrt_assert","text":"<p>[Source]</p> <pre><code>fun box mrt_assert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_511","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_del_bw_upcall","title":"mrt_del_bw_upcall","text":"<p>[Source]</p> <pre><code>fun box mrt_del_bw_upcall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_512","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_del_mfc","title":"mrt_del_mfc","text":"<p>[Source]</p> <pre><code>fun box mrt_del_mfc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_513","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_del_vif","title":"mrt_del_vif","text":"<p>[Source]</p> <pre><code>fun box mrt_del_vif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_514","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_done","title":"mrt_done","text":"<p>[Source]</p> <pre><code>fun box mrt_done()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_515","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_init","title":"mrt_init","text":"<p>[Source]</p> <pre><code>fun box mrt_init()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_516","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_bw_upcall","title":"mrt_mfc_bw_upcall","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_bw_upcall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_517","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_flags_all","title":"mrt_mfc_flags_all","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_flags_all()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_518","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_flags_border_vif","title":"mrt_mfc_flags_border_vif","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_flags_border_vif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_519","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_flags_disable_wrongvif","title":"mrt_mfc_flags_disable_wrongvif","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_flags_disable_wrongvif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_520","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_rp","title":"mrt_mfc_rp","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_rp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_521","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_pim","title":"mrt_pim","text":"<p>[Source]</p> <pre><code>fun box mrt_pim()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_522","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_version","title":"mrt_version","text":"<p>[Source]</p> <pre><code>fun box mrt_version()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_523","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#msg_notification","title":"msg_notification","text":"<p>[Source]</p> <pre><code>fun box msg_notification()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_524","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#msg_socallbck","title":"msg_socallbck","text":"<p>[Source]</p> <pre><code>fun box msg_socallbck()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_525","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrvproto_ndrv","title":"ndrvproto_ndrv","text":"<p>[Source]</p> <pre><code>fun box ndrvproto_ndrv()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_526","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_addmulticast","title":"ndrv_addmulticast","text":"<p>[Source]</p> <pre><code>fun box ndrv_addmulticast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_527","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_deldmxspec","title":"ndrv_deldmxspec","text":"<p>[Source]</p> <pre><code>fun box ndrv_deldmxspec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_528","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_delmulticast","title":"ndrv_delmulticast","text":"<p>[Source]</p> <pre><code>fun box ndrv_delmulticast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_529","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_demuxtype_ethertype","title":"ndrv_demuxtype_ethertype","text":"<p>[Source]</p> <pre><code>fun box ndrv_demuxtype_ethertype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_530","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_demuxtype_sap","title":"ndrv_demuxtype_sap","text":"<p>[Source]</p> <pre><code>fun box ndrv_demuxtype_sap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_531","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_demuxtype_snap","title":"ndrv_demuxtype_snap","text":"<p>[Source]</p> <pre><code>fun box ndrv_demuxtype_snap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_532","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_dmux_max_descr","title":"ndrv_dmux_max_descr","text":"<p>[Source]</p> <pre><code>fun box ndrv_dmux_max_descr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_533","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_protocol_desc_vers","title":"ndrv_protocol_desc_vers","text":"<p>[Source]</p> <pre><code>fun box ndrv_protocol_desc_vers()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_534","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_setdmxspec","title":"ndrv_setdmxspec","text":"<p>[Source]</p> <pre><code>fun box ndrv_setdmxspec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_535","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_add_membership","title":"netlink_add_membership","text":"<p>[Source]</p> <pre><code>fun box netlink_add_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_536","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_audit","title":"netlink_audit","text":"<p>[Source]</p> <pre><code>fun box netlink_audit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_537","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_broadcast_error","title":"netlink_broadcast_error","text":"<p>[Source]</p> <pre><code>fun box netlink_broadcast_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_538","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_cap_ack","title":"netlink_cap_ack","text":"<p>[Source]</p> <pre><code>fun box netlink_cap_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_539","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_connector","title":"netlink_connector","text":"<p>[Source]</p> <pre><code>fun box netlink_connector()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_540","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_crypto","title":"netlink_crypto","text":"<p>[Source]</p> <pre><code>fun box netlink_crypto()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_541","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_dnrtmsg","title":"netlink_dnrtmsg","text":"<p>[Source]</p> <pre><code>fun box netlink_dnrtmsg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_542","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_drop_membership","title":"netlink_drop_membership","text":"<p>[Source]</p> <pre><code>fun box netlink_drop_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_543","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_ecryptfs","title":"netlink_ecryptfs","text":"<p>[Source]</p> <pre><code>fun box netlink_ecryptfs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_544","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_fib_lookup","title":"netlink_fib_lookup","text":"<p>[Source]</p> <pre><code>fun box netlink_fib_lookup()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_545","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_firewall","title":"netlink_firewall","text":"<p>[Source]</p> <pre><code>fun box netlink_firewall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_546","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_generic","title":"netlink_generic","text":"<p>[Source]</p> <pre><code>fun box netlink_generic()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_547","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_inet_diag","title":"netlink_inet_diag","text":"<p>[Source]</p> <pre><code>fun box netlink_inet_diag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_548","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_ip6_fw","title":"netlink_ip6_fw","text":"<p>[Source]</p> <pre><code>fun box netlink_ip6_fw()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_549","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_iscsi","title":"netlink_iscsi","text":"<p>[Source]</p> <pre><code>fun box netlink_iscsi()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_550","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_kobject_uevent","title":"netlink_kobject_uevent","text":"<p>[Source]</p> <pre><code>fun box netlink_kobject_uevent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_551","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_listen_all_nsid","title":"netlink_listen_all_nsid","text":"<p>[Source]</p> <pre><code>fun box netlink_listen_all_nsid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_552","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_list_memberships","title":"netlink_list_memberships","text":"<p>[Source]</p> <pre><code>fun box netlink_list_memberships()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_553","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_netfilter","title":"netlink_netfilter","text":"<p>[Source]</p> <pre><code>fun box netlink_netfilter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_554","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_nflog","title":"netlink_nflog","text":"<p>[Source]</p> <pre><code>fun box netlink_nflog()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_555","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_no_enobufs","title":"netlink_no_enobufs","text":"<p>[Source]</p> <pre><code>fun box netlink_no_enobufs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_556","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_pktinfo","title":"netlink_pktinfo","text":"<p>[Source]</p> <pre><code>fun box netlink_pktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_557","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_rdma","title":"netlink_rdma","text":"<p>[Source]</p> <pre><code>fun box netlink_rdma()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_558","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_route","title":"netlink_route","text":"<p>[Source]</p> <pre><code>fun box netlink_route()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_559","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_rx_ring","title":"netlink_rx_ring","text":"<p>[Source]</p> <pre><code>fun box netlink_rx_ring()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_560","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_scsitransport","title":"netlink_scsitransport","text":"<p>[Source]</p> <pre><code>fun box netlink_scsitransport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_561","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_selinux","title":"netlink_selinux","text":"<p>[Source]</p> <pre><code>fun box netlink_selinux()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_562","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_sock_diag","title":"netlink_sock_diag","text":"<p>[Source]</p> <pre><code>fun box netlink_sock_diag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_563","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_tx_ring","title":"netlink_tx_ring","text":"<p>[Source]</p> <pre><code>fun box netlink_tx_ring()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_564","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_unused","title":"netlink_unused","text":"<p>[Source]</p> <pre><code>fun box netlink_unused()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_565","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_usersock","title":"netlink_usersock","text":"<p>[Source]</p> <pre><code>fun box netlink_usersock()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_566","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_xfrm","title":"netlink_xfrm","text":"<p>[Source]</p> <pre><code>fun box netlink_xfrm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_567","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_idle","title":"netrom_idle","text":"<p>[Source]</p> <pre><code>fun box netrom_idle()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_568","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_kill","title":"netrom_kill","text":"<p>[Source]</p> <pre><code>fun box netrom_kill()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_569","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_n2","title":"netrom_n2","text":"<p>[Source]</p> <pre><code>fun box netrom_n2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_570","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_neigh","title":"netrom_neigh","text":"<p>[Source]</p> <pre><code>fun box netrom_neigh()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_571","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_node","title":"netrom_node","text":"<p>[Source]</p> <pre><code>fun box netrom_node()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_572","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_paclen","title":"netrom_paclen","text":"<p>[Source]</p> <pre><code>fun box netrom_paclen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_573","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_t1","title":"netrom_t1","text":"<p>[Source]</p> <pre><code>fun box netrom_t1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_574","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_t2","title":"netrom_t2","text":"<p>[Source]</p> <pre><code>fun box netrom_t2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_575","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_t4","title":"netrom_t4","text":"<p>[Source]</p> <pre><code>fun box netrom_t4()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_576","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#nrdv_multicast_addrs_per_sock","title":"nrdv_multicast_addrs_per_sock","text":"<p>[Source]</p> <pre><code>fun box nrdv_multicast_addrs_per_sock()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_577","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#pvd_config","title":"pvd_config","text":"<p>[Source]</p> <pre><code>fun box pvd_config()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_578","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cancel_sent_to","title":"rds_cancel_sent_to","text":"<p>[Source]</p> <pre><code>fun box rds_cancel_sent_to()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_579","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_atomic_cswp","title":"rds_cmsg_atomic_cswp","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_atomic_cswp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_580","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_atomic_fadd","title":"rds_cmsg_atomic_fadd","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_atomic_fadd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_581","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_cong_update","title":"rds_cmsg_cong_update","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_cong_update()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_582","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_masked_atomic_cswp","title":"rds_cmsg_masked_atomic_cswp","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_masked_atomic_cswp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_583","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_masked_atomic_fadd","title":"rds_cmsg_masked_atomic_fadd","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_masked_atomic_fadd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_584","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_args","title":"rds_cmsg_rdma_args","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_rdma_args()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_585","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_dest","title":"rds_cmsg_rdma_dest","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_rdma_dest()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_586","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_map","title":"rds_cmsg_rdma_map","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_rdma_map()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_587","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_status","title":"rds_cmsg_rdma_status","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_rdma_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_588","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cong_monitor","title":"rds_cong_monitor","text":"<p>[Source]</p> <pre><code>fun box rds_cong_monitor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_589","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cong_monitor_size","title":"rds_cong_monitor_size","text":"<p>[Source]</p> <pre><code>fun box rds_cong_monitor_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_590","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_free_mr","title":"rds_free_mr","text":"<p>[Source]</p> <pre><code>fun box rds_free_mr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_591","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_get_mr","title":"rds_get_mr","text":"<p>[Source]</p> <pre><code>fun box rds_get_mr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_592","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_get_mr_for_dest","title":"rds_get_mr_for_dest","text":"<p>[Source]</p> <pre><code>fun box rds_get_mr_for_dest()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_593","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_ib_abi_version","title":"rds_ib_abi_version","text":"<p>[Source]</p> <pre><code>fun box rds_ib_abi_version()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_594","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_ib_gid_len","title":"rds_ib_gid_len","text":"<p>[Source]</p> <pre><code>fun box rds_ib_gid_len()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_595","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connections","title":"rds_info_connections","text":"<p>[Source]</p> <pre><code>fun box rds_info_connections()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_596","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connection_flag_connected","title":"rds_info_connection_flag_connected","text":"<p>[Source]</p> <pre><code>fun box rds_info_connection_flag_connected()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_597","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connection_flag_connecting","title":"rds_info_connection_flag_connecting","text":"<p>[Source]</p> <pre><code>fun box rds_info_connection_flag_connecting()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_598","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connection_flag_sending","title":"rds_info_connection_flag_sending","text":"<p>[Source]</p> <pre><code>fun box rds_info_connection_flag_sending()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_599","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connection_stats","title":"rds_info_connection_stats","text":"<p>[Source]</p> <pre><code>fun box rds_info_connection_stats()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_600","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_counters","title":"rds_info_counters","text":"<p>[Source]</p> <pre><code>fun box rds_info_counters()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_601","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_first","title":"rds_info_first","text":"<p>[Source]</p> <pre><code>fun box rds_info_first()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_602","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_ib_connections","title":"rds_info_ib_connections","text":"<p>[Source]</p> <pre><code>fun box rds_info_ib_connections()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_603","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_iwarp_connections","title":"rds_info_iwarp_connections","text":"<p>[Source]</p> <pre><code>fun box rds_info_iwarp_connections()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_604","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_last","title":"rds_info_last","text":"<p>[Source]</p> <pre><code>fun box rds_info_last()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_605","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_message_flag_ack","title":"rds_info_message_flag_ack","text":"<p>[Source]</p> <pre><code>fun box rds_info_message_flag_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_606","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_message_flag_fast_ack","title":"rds_info_message_flag_fast_ack","text":"<p>[Source]</p> <pre><code>fun box rds_info_message_flag_fast_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_607","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_recv_messages","title":"rds_info_recv_messages","text":"<p>[Source]</p> <pre><code>fun box rds_info_recv_messages()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_608","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_retrans_messages","title":"rds_info_retrans_messages","text":"<p>[Source]</p> <pre><code>fun box rds_info_retrans_messages()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_609","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_send_messages","title":"rds_info_send_messages","text":"<p>[Source]</p> <pre><code>fun box rds_info_send_messages()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_610","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_sockets","title":"rds_info_sockets","text":"<p>[Source]</p> <pre><code>fun box rds_info_sockets()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_611","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_tcp_sockets","title":"rds_info_tcp_sockets","text":"<p>[Source]</p> <pre><code>fun box rds_info_tcp_sockets()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_612","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_canceled","title":"rds_rdma_canceled","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_canceled()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_613","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_dontwait","title":"rds_rdma_dontwait","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_dontwait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_614","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_dropped","title":"rds_rdma_dropped","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_dropped()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_615","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_fence","title":"rds_rdma_fence","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_fence()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_616","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_invalidate","title":"rds_rdma_invalidate","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_invalidate()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_617","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_notify_me","title":"rds_rdma_notify_me","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_notify_me()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_618","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_other_error","title":"rds_rdma_other_error","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_other_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_619","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_readwrite","title":"rds_rdma_readwrite","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_readwrite()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_620","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_remote_error","title":"rds_rdma_remote_error","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_remote_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_621","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_silent","title":"rds_rdma_silent","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_silent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_622","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_success","title":"rds_rdma_success","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_success()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_623","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_use_once","title":"rds_rdma_use_once","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_use_once()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_624","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_recverr","title":"rds_recverr","text":"<p>[Source]</p> <pre><code>fun box rds_recverr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_625","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_count","title":"rds_trans_count","text":"<p>[Source]</p> <pre><code>fun box rds_trans_count()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_626","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_ib","title":"rds_trans_ib","text":"<p>[Source]</p> <pre><code>fun box rds_trans_ib()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_627","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_iwarp","title":"rds_trans_iwarp","text":"<p>[Source]</p> <pre><code>fun box rds_trans_iwarp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_628","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_none","title":"rds_trans_none","text":"<p>[Source]</p> <pre><code>fun box rds_trans_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_629","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_tcp","title":"rds_trans_tcp","text":"<p>[Source]</p> <pre><code>fun box rds_trans_tcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_630","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_access_barred","title":"rose_access_barred","text":"<p>[Source]</p> <pre><code>fun box rose_access_barred()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_631","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_defer","title":"rose_defer","text":"<p>[Source]</p> <pre><code>fun box rose_defer()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_632","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_dte_originated","title":"rose_dte_originated","text":"<p>[Source]</p> <pre><code>fun box rose_dte_originated()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_633","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_holdback","title":"rose_holdback","text":"<p>[Source]</p> <pre><code>fun box rose_holdback()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_634","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_idle","title":"rose_idle","text":"<p>[Source]</p> <pre><code>fun box rose_idle()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_635","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_invalid_facility","title":"rose_invalid_facility","text":"<p>[Source]</p> <pre><code>fun box rose_invalid_facility()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_636","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_local_procedure","title":"rose_local_procedure","text":"<p>[Source]</p> <pre><code>fun box rose_local_procedure()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_637","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_max_digis","title":"rose_max_digis","text":"<p>[Source]</p> <pre><code>fun box rose_max_digis()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_638","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_mtu","title":"rose_mtu","text":"<p>[Source]</p> <pre><code>fun box rose_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_639","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_network_congestion","title":"rose_network_congestion","text":"<p>[Source]</p> <pre><code>fun box rose_network_congestion()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_640","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_not_obtainable","title":"rose_not_obtainable","text":"<p>[Source]</p> <pre><code>fun box rose_not_obtainable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_641","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_number_busy","title":"rose_number_busy","text":"<p>[Source]</p> <pre><code>fun box rose_number_busy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_642","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_out_of_order","title":"rose_out_of_order","text":"<p>[Source]</p> <pre><code>fun box rose_out_of_order()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_643","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_qbitincl","title":"rose_qbitincl","text":"<p>[Source]</p> <pre><code>fun box rose_qbitincl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_644","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_remote_procedure","title":"rose_remote_procedure","text":"<p>[Source]</p> <pre><code>fun box rose_remote_procedure()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_645","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_ship_absent","title":"rose_ship_absent","text":"<p>[Source]</p> <pre><code>fun box rose_ship_absent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_646","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_t1","title":"rose_t1","text":"<p>[Source]</p> <pre><code>fun box rose_t1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_647","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_t2","title":"rose_t2","text":"<p>[Source]</p> <pre><code>fun box rose_t2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_648","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_t3","title":"rose_t3","text":"<p>[Source]</p> <pre><code>fun box rose_t3()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_649","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_hci_raw_direction","title":"scm_hci_raw_direction","text":"<p>[Source]</p> <pre><code>fun box scm_hci_raw_direction()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_650","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_timestamp","title":"scm_timestamp","text":"<p>[Source]</p> <pre><code>fun box scm_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_651","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_timestamping","title":"scm_timestamping","text":"<p>[Source]</p> <pre><code>fun box scm_timestamping()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_652","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_timestampns","title":"scm_timestampns","text":"<p>[Source]</p> <pre><code>fun box scm_timestampns()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_653","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_wifi_status","title":"scm_wifi_status","text":"<p>[Source]</p> <pre><code>fun box scm_wifi_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_654","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_abort_association","title":"sctp_abort_association","text":"<p>[Source]</p> <pre><code>fun box sctp_abort_association()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_655","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_adaptation_layer","title":"sctp_adaptation_layer","text":"<p>[Source]</p> <pre><code>fun box sctp_adaptation_layer()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_656","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_adaption_layer","title":"sctp_adaption_layer","text":"<p>[Source]</p> <pre><code>fun box sctp_adaption_layer()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_657","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_add_streams","title":"sctp_add_streams","text":"<p>[Source]</p> <pre><code>fun box sctp_add_streams()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_658","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_add_vrf_id","title":"sctp_add_vrf_id","text":"<p>[Source]</p> <pre><code>fun box sctp_add_vrf_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_659","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_asconf","title":"sctp_asconf","text":"<p>[Source]</p> <pre><code>fun box sctp_asconf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_660","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_asconf_ack","title":"sctp_asconf_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_asconf_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_661","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_asconf_supported","title":"sctp_asconf_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_asconf_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_662","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_associnfo","title":"sctp_associnfo","text":"<p>[Source]</p> <pre><code>fun box sctp_associnfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_663","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_authentication","title":"sctp_authentication","text":"<p>[Source]</p> <pre><code>fun box sctp_authentication()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_664","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_active_key","title":"sctp_auth_active_key","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_active_key()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_665","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_chunk","title":"sctp_auth_chunk","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_chunk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_666","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_deactivate_key","title":"sctp_auth_deactivate_key","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_deactivate_key()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_667","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_delete_key","title":"sctp_auth_delete_key","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_delete_key()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_668","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_key","title":"sctp_auth_key","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_key()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_669","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_supported","title":"sctp_auth_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_670","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_autoclose","title":"sctp_autoclose","text":"<p>[Source]</p> <pre><code>fun box sctp_autoclose()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_671","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auto_asconf","title":"sctp_auto_asconf","text":"<p>[Source]</p> <pre><code>fun box sctp_auto_asconf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_672","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_badcrc","title":"sctp_badcrc","text":"<p>[Source]</p> <pre><code>fun box sctp_badcrc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_673","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_bindx_add_addr","title":"sctp_bindx_add_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_bindx_add_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_674","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_bindx_rem_addr","title":"sctp_bindx_rem_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_bindx_rem_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_675","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_blk_logging_enable","title":"sctp_blk_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_blk_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_676","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_bound","title":"sctp_bound","text":"<p>[Source]</p> <pre><code>fun box sctp_bound()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_677","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_cookie_in_shutdown","title":"sctp_cause_cookie_in_shutdown","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_cookie_in_shutdown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_678","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_deleting_last_addr","title":"sctp_cause_deleting_last_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_deleting_last_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_679","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_deleting_src_addr","title":"sctp_cause_deleting_src_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_deleting_src_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_680","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_illegal_asconf_ack","title":"sctp_cause_illegal_asconf_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_illegal_asconf_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_681","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_invalid_param","title":"sctp_cause_invalid_param","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_invalid_param()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_682","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_invalid_stream","title":"sctp_cause_invalid_stream","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_invalid_stream()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_683","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_missing_param","title":"sctp_cause_missing_param","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_missing_param()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_684","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_nat_colliding_state","title":"sctp_cause_nat_colliding_state","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_nat_colliding_state()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_685","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_nat_missing_state","title":"sctp_cause_nat_missing_state","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_nat_missing_state()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_686","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_no_error","title":"sctp_cause_no_error","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_no_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_687","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_no_user_data","title":"sctp_cause_no_user_data","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_no_user_data()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_688","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_out_of_resc","title":"sctp_cause_out_of_resc","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_out_of_resc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_689","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_protocol_violation","title":"sctp_cause_protocol_violation","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_protocol_violation()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_690","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_request_refused","title":"sctp_cause_request_refused","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_request_refused()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_691","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_resource_shortage","title":"sctp_cause_resource_shortage","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_resource_shortage()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_692","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_restart_w_newaddr","title":"sctp_cause_restart_w_newaddr","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_restart_w_newaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_693","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_stale_cookie","title":"sctp_cause_stale_cookie","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_stale_cookie()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_694","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_unrecog_chunk","title":"sctp_cause_unrecog_chunk","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_unrecog_chunk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_695","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_unrecog_param","title":"sctp_cause_unrecog_param","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_unrecog_param()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_696","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_unresolvable_addr","title":"sctp_cause_unresolvable_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_unresolvable_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_697","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_unsupported_hmacid","title":"sctp_cause_unsupported_hmacid","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_unsupported_hmacid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_698","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_user_initiated_abt","title":"sctp_cause_user_initiated_abt","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_user_initiated_abt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_699","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_hstcp","title":"sctp_cc_hstcp","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_hstcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_700","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_htcp","title":"sctp_cc_htcp","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_htcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_701","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_option","title":"sctp_cc_option","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_option()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_702","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_opt_rtcc_setmode","title":"sctp_cc_opt_rtcc_setmode","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_opt_rtcc_setmode()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_703","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_opt_steady_step","title":"sctp_cc_opt_steady_step","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_opt_steady_step()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_704","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_opt_use_dccc_ecn","title":"sctp_cc_opt_use_dccc_ecn","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_opt_use_dccc_ecn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_705","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_rfc2581","title":"sctp_cc_rfc2581","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_rfc2581()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_706","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_rtcc","title":"sctp_cc_rtcc","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_rtcc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_707","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_closed","title":"sctp_closed","text":"<p>[Source]</p> <pre><code>fun box sctp_closed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_708","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_clr_stat_log","title":"sctp_clr_stat_log","text":"<p>[Source]</p> <pre><code>fun box sctp_clr_stat_log()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_709","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_base","title":"sctp_cmt_base","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_base()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_710","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_max","title":"sctp_cmt_max","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_711","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_mptcp","title":"sctp_cmt_mptcp","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_mptcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_712","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_off","title":"sctp_cmt_off","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_713","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_on_off","title":"sctp_cmt_on_off","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_on_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_714","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_rpv1","title":"sctp_cmt_rpv1","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_rpv1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_715","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_rpv2","title":"sctp_cmt_rpv2","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_rpv2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_716","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_use_dac","title":"sctp_cmt_use_dac","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_use_dac()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_717","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_connect_x","title":"sctp_connect_x","text":"<p>[Source]</p> <pre><code>fun box sctp_connect_x()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_718","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_connect_x_complete","title":"sctp_connect_x_complete","text":"<p>[Source]</p> <pre><code>fun box sctp_connect_x_complete()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_719","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_connect_x_delayed","title":"sctp_connect_x_delayed","text":"<p>[Source]</p> <pre><code>fun box sctp_connect_x_delayed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_720","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_context","title":"sctp_context","text":"<p>[Source]</p> <pre><code>fun box sctp_context()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_721","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cookie_ack","title":"sctp_cookie_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_cookie_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_722","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cookie_echo","title":"sctp_cookie_echo","text":"<p>[Source]</p> <pre><code>fun box sctp_cookie_echo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_723","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cookie_echoed","title":"sctp_cookie_echoed","text":"<p>[Source]</p> <pre><code>fun box sctp_cookie_echoed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_724","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cookie_wait","title":"sctp_cookie_wait","text":"<p>[Source]</p> <pre><code>fun box sctp_cookie_wait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_725","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cwnd_logging_enable","title":"sctp_cwnd_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_cwnd_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_726","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cwnd_monitor_enable","title":"sctp_cwnd_monitor_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_cwnd_monitor_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_727","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cwr_in_same_window","title":"sctp_cwr_in_same_window","text":"<p>[Source]</p> <pre><code>fun box sctp_cwr_in_same_window()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_728","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cwr_reduce_override","title":"sctp_cwr_reduce_override","text":"<p>[Source]</p> <pre><code>fun box sctp_cwr_reduce_override()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_729","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data","title":"sctp_data","text":"<p>[Source]</p> <pre><code>fun box sctp_data()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_730","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_first_frag","title":"sctp_data_first_frag","text":"<p>[Source]</p> <pre><code>fun box sctp_data_first_frag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_731","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_frag_mask","title":"sctp_data_frag_mask","text":"<p>[Source]</p> <pre><code>fun box sctp_data_frag_mask()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_732","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_last_frag","title":"sctp_data_last_frag","text":"<p>[Source]</p> <pre><code>fun box sctp_data_last_frag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_733","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_middle_frag","title":"sctp_data_middle_frag","text":"<p>[Source]</p> <pre><code>fun box sctp_data_middle_frag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_734","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_not_frag","title":"sctp_data_not_frag","text":"<p>[Source]</p> <pre><code>fun box sctp_data_not_frag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_735","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_sack_immediately","title":"sctp_data_sack_immediately","text":"<p>[Source]</p> <pre><code>fun box sctp_data_sack_immediately()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_736","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_unordered","title":"sctp_data_unordered","text":"<p>[Source]</p> <pre><code>fun box sctp_data_unordered()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_737","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_default_prinfo","title":"sctp_default_prinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_default_prinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_738","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_default_send_param","title":"sctp_default_send_param","text":"<p>[Source]</p> <pre><code>fun box sctp_default_send_param()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_739","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_default_sndinfo","title":"sctp_default_sndinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_default_sndinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_740","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_delayed_sack","title":"sctp_delayed_sack","text":"<p>[Source]</p> <pre><code>fun box sctp_delayed_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_741","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_del_vrf_id","title":"sctp_del_vrf_id","text":"<p>[Source]</p> <pre><code>fun box sctp_del_vrf_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_742","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_disable_fragments","title":"sctp_disable_fragments","text":"<p>[Source]</p> <pre><code>fun box sctp_disable_fragments()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_743","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ecn_cwr","title":"sctp_ecn_cwr","text":"<p>[Source]</p> <pre><code>fun box sctp_ecn_cwr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_744","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ecn_echo","title":"sctp_ecn_echo","text":"<p>[Source]</p> <pre><code>fun box sctp_ecn_echo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_745","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ecn_supported","title":"sctp_ecn_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_ecn_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_746","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_change_assoc_req","title":"sctp_enable_change_assoc_req","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_change_assoc_req()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_747","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_reset_assoc_req","title":"sctp_enable_reset_assoc_req","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_reset_assoc_req()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_748","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_reset_stream_req","title":"sctp_enable_reset_stream_req","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_reset_stream_req()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_749","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_stream_reset","title":"sctp_enable_stream_reset","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_stream_reset()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_750","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_value_mask","title":"sctp_enable_value_mask","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_value_mask()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_751","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_established","title":"sctp_established","text":"<p>[Source]</p> <pre><code>fun box sctp_established()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_752","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_event","title":"sctp_event","text":"<p>[Source]</p> <pre><code>fun box sctp_event()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_753","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_events","title":"sctp_events","text":"<p>[Source]</p> <pre><code>fun box sctp_events()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_754","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_explicit_eor","title":"sctp_explicit_eor","text":"<p>[Source]</p> <pre><code>fun box sctp_explicit_eor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_755","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_flight_logging_enable","title":"sctp_flight_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_flight_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_756","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_forward_cum_tsn","title":"sctp_forward_cum_tsn","text":"<p>[Source]</p> <pre><code>fun box sctp_forward_cum_tsn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_757","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_fragment_interleave","title":"sctp_fragment_interleave","text":"<p>[Source]</p> <pre><code>fun box sctp_fragment_interleave()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_758","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_frag_level_0","title":"sctp_frag_level_0","text":"<p>[Source]</p> <pre><code>fun box sctp_frag_level_0()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_759","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_frag_level_1","title":"sctp_frag_level_1","text":"<p>[Source]</p> <pre><code>fun box sctp_frag_level_1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_760","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_frag_level_2","title":"sctp_frag_level_2","text":"<p>[Source]</p> <pre><code>fun box sctp_frag_level_2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_761","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_from_middle_box","title":"sctp_from_middle_box","text":"<p>[Source]</p> <pre><code>fun box sctp_from_middle_box()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_762","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_fr_logging_enable","title":"sctp_fr_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_fr_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_763","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_addr_len","title":"sctp_get_addr_len","text":"<p>[Source]</p> <pre><code>fun box sctp_get_addr_len()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_764","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_asoc_vrf","title":"sctp_get_asoc_vrf","text":"<p>[Source]</p> <pre><code>fun box sctp_get_asoc_vrf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_765","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_assoc_id_list","title":"sctp_get_assoc_id_list","text":"<p>[Source]</p> <pre><code>fun box sctp_get_assoc_id_list()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_766","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_assoc_number","title":"sctp_get_assoc_number","text":"<p>[Source]</p> <pre><code>fun box sctp_get_assoc_number()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_767","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_local_addresses","title":"sctp_get_local_addresses","text":"<p>[Source]</p> <pre><code>fun box sctp_get_local_addresses()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_768","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_local_addr_size","title":"sctp_get_local_addr_size","text":"<p>[Source]</p> <pre><code>fun box sctp_get_local_addr_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_769","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_nonce_values","title":"sctp_get_nonce_values","text":"<p>[Source]</p> <pre><code>fun box sctp_get_nonce_values()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_770","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_packet_log","title":"sctp_get_packet_log","text":"<p>[Source]</p> <pre><code>fun box sctp_get_packet_log()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_771","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_peer_addresses","title":"sctp_get_peer_addresses","text":"<p>[Source]</p> <pre><code>fun box sctp_get_peer_addresses()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_772","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_peer_addr_info","title":"sctp_get_peer_addr_info","text":"<p>[Source]</p> <pre><code>fun box sctp_get_peer_addr_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_773","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_remote_addr_size","title":"sctp_get_remote_addr_size","text":"<p>[Source]</p> <pre><code>fun box sctp_get_remote_addr_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_774","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_sndbuf_use","title":"sctp_get_sndbuf_use","text":"<p>[Source]</p> <pre><code>fun box sctp_get_sndbuf_use()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_775","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_stat_log","title":"sctp_get_stat_log","text":"<p>[Source]</p> <pre><code>fun box sctp_get_stat_log()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_776","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_vrf_ids","title":"sctp_get_vrf_ids","text":"<p>[Source]</p> <pre><code>fun box sctp_get_vrf_ids()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_777","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_had_no_tcb","title":"sctp_had_no_tcb","text":"<p>[Source]</p> <pre><code>fun box sctp_had_no_tcb()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_778","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_heartbeat_ack","title":"sctp_heartbeat_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_heartbeat_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_779","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_heartbeat_request","title":"sctp_heartbeat_request","text":"<p>[Source]</p> <pre><code>fun box sctp_heartbeat_request()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_780","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_hmac_ident","title":"sctp_hmac_ident","text":"<p>[Source]</p> <pre><code>fun box sctp_hmac_ident()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_781","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_idata","title":"sctp_idata","text":"<p>[Source]</p> <pre><code>fun box sctp_idata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_782","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_iforward_cum_tsn","title":"sctp_iforward_cum_tsn","text":"<p>[Source]</p> <pre><code>fun box sctp_iforward_cum_tsn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_783","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_initiation","title":"sctp_initiation","text":"<p>[Source]</p> <pre><code>fun box sctp_initiation()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_784","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_initiation_ack","title":"sctp_initiation_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_initiation_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_785","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_initmsg","title":"sctp_initmsg","text":"<p>[Source]</p> <pre><code>fun box sctp_initmsg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_786","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_interleaving_supported","title":"sctp_interleaving_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_interleaving_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_787","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_i_want_mapped_v4_addr","title":"sctp_i_want_mapped_v4_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_i_want_mapped_v4_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_788","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_last_packet_tracing","title":"sctp_last_packet_tracing","text":"<p>[Source]</p> <pre><code>fun box sctp_last_packet_tracing()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_789","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_listen","title":"sctp_listen","text":"<p>[Source]</p> <pre><code>fun box sctp_listen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_790","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_local_auth_chunks","title":"sctp_local_auth_chunks","text":"<p>[Source]</p> <pre><code>fun box sctp_local_auth_chunks()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_791","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_lock_logging_enable","title":"sctp_lock_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_lock_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_792","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_at_send_2_outq","title":"sctp_log_at_send_2_outq","text":"<p>[Source]</p> <pre><code>fun box sctp_log_at_send_2_outq()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_793","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_at_send_2_sctp","title":"sctp_log_at_send_2_sctp","text":"<p>[Source]</p> <pre><code>fun box sctp_log_at_send_2_sctp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_794","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_maxburst_enable","title":"sctp_log_maxburst_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_log_maxburst_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_795","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_rwnd_enable","title":"sctp_log_rwnd_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_log_rwnd_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_796","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_sack_arrivals_enable","title":"sctp_log_sack_arrivals_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_log_sack_arrivals_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_797","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_try_advance","title":"sctp_log_try_advance","text":"<p>[Source]</p> <pre><code>fun box sctp_log_try_advance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_798","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ltrace_chunk_enable","title":"sctp_ltrace_chunk_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_ltrace_chunk_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_799","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ltrace_error_enable","title":"sctp_ltrace_error_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_ltrace_error_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_800","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_map_logging_enable","title":"sctp_map_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_map_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_801","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_maxburst","title":"sctp_maxburst","text":"<p>[Source]</p> <pre><code>fun box sctp_maxburst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_802","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_maxseg","title":"sctp_maxseg","text":"<p>[Source]</p> <pre><code>fun box sctp_maxseg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_803","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_burst","title":"sctp_max_burst","text":"<p>[Source]</p> <pre><code>fun box sctp_max_burst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_804","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_cookie_life","title":"sctp_max_cookie_life","text":"<p>[Source]</p> <pre><code>fun box sctp_max_cookie_life()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_805","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_cwnd","title":"sctp_max_cwnd","text":"<p>[Source]</p> <pre><code>fun box sctp_max_cwnd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_806","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_hb_interval","title":"sctp_max_hb_interval","text":"<p>[Source]</p> <pre><code>fun box sctp_max_hb_interval()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_807","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_sack_delay","title":"sctp_max_sack_delay","text":"<p>[Source]</p> <pre><code>fun box sctp_max_sack_delay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_808","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mbcnt_logging_enable","title":"sctp_mbcnt_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_mbcnt_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_809","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mbuf_logging_enable","title":"sctp_mbuf_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_mbuf_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_810","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mobility_base","title":"sctp_mobility_base","text":"<p>[Source]</p> <pre><code>fun box sctp_mobility_base()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_811","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mobility_fasthandoff","title":"sctp_mobility_fasthandoff","text":"<p>[Source]</p> <pre><code>fun box sctp_mobility_fasthandoff()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_812","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mobility_prim_deleted","title":"sctp_mobility_prim_deleted","text":"<p>[Source]</p> <pre><code>fun box sctp_mobility_prim_deleted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_813","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_nagle_logging_enable","title":"sctp_nagle_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_nagle_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_814","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_nodelay","title":"sctp_nodelay","text":"<p>[Source]</p> <pre><code>fun box sctp_nodelay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_815","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_nrsack_supported","title":"sctp_nrsack_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_nrsack_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_816","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_nr_selective_ack","title":"sctp_nr_selective_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_nr_selective_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_817","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_operation_error","title":"sctp_operation_error","text":"<p>[Source]</p> <pre><code>fun box sctp_operation_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_818","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_packed","title":"sctp_packed","text":"<p>[Source]</p> <pre><code>fun box sctp_packed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_819","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_packet_dropped","title":"sctp_packet_dropped","text":"<p>[Source]</p> <pre><code>fun box sctp_packet_dropped()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_820","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_packet_log_size","title":"sctp_packet_log_size","text":"<p>[Source]</p> <pre><code>fun box sctp_packet_log_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_821","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_packet_truncated","title":"sctp_packet_truncated","text":"<p>[Source]</p> <pre><code>fun box sctp_packet_truncated()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_822","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pad_chunk","title":"sctp_pad_chunk","text":"<p>[Source]</p> <pre><code>fun box sctp_pad_chunk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_823","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_partial_delivery_point","title":"sctp_partial_delivery_point","text":"<p>[Source]</p> <pre><code>fun box sctp_partial_delivery_point()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_824","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_copy_flags","title":"sctp_pcb_copy_flags","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_copy_flags()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_825","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_accepting","title":"sctp_pcb_flags_accepting","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_accepting()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_826","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_adaptationevnt","title":"sctp_pcb_flags_adaptationevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_adaptationevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_827","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_assoc_resetevnt","title":"sctp_pcb_flags_assoc_resetevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_assoc_resetevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_828","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_authevnt","title":"sctp_pcb_flags_authevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_authevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_829","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_autoclose","title":"sctp_pcb_flags_autoclose","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_autoclose()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_830","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_auto_asconf","title":"sctp_pcb_flags_auto_asconf","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_auto_asconf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_831","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_blocking_io","title":"sctp_pcb_flags_blocking_io","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_blocking_io()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_832","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_boundall","title":"sctp_pcb_flags_boundall","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_boundall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_833","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_bound_v6","title":"sctp_pcb_flags_bound_v6","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_bound_v6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_834","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_close_ip","title":"sctp_pcb_flags_close_ip","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_close_ip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_835","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_connected","title":"sctp_pcb_flags_connected","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_connected()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_836","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_donot_heartbeat","title":"sctp_pcb_flags_donot_heartbeat","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_donot_heartbeat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_837","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_dont_wake","title":"sctp_pcb_flags_dont_wake","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_dont_wake()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_838","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_do_asconf","title":"sctp_pcb_flags_do_asconf","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_do_asconf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_839","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_do_not_pmtud","title":"sctp_pcb_flags_do_not_pmtud","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_do_not_pmtud()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_840","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_dryevnt","title":"sctp_pcb_flags_dryevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_dryevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_841","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_explicit_eor","title":"sctp_pcb_flags_explicit_eor","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_explicit_eor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_842","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_ext_rcvinfo","title":"sctp_pcb_flags_ext_rcvinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_ext_rcvinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_843","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_frag_interleave","title":"sctp_pcb_flags_frag_interleave","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_frag_interleave()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_844","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_interleave_strms","title":"sctp_pcb_flags_interleave_strms","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_interleave_strms()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_845","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_in_tcppool","title":"sctp_pcb_flags_in_tcppool","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_in_tcppool()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_846","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_multiple_asconfs","title":"sctp_pcb_flags_multiple_asconfs","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_multiple_asconfs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_847","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_needs_mapped_v4","title":"sctp_pcb_flags_needs_mapped_v4","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_needs_mapped_v4()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_848","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_nodelay","title":"sctp_pcb_flags_nodelay","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_nodelay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_849","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_no_fragment","title":"sctp_pcb_flags_no_fragment","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_no_fragment()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_850","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_pdapievnt","title":"sctp_pcb_flags_pdapievnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_pdapievnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_851","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_portreuse","title":"sctp_pcb_flags_portreuse","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_portreuse()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_852","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvassocevnt","title":"sctp_pcb_flags_recvassocevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvassocevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_853","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvdataioevnt","title":"sctp_pcb_flags_recvdataioevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvdataioevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_854","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvnsendfailevnt","title":"sctp_pcb_flags_recvnsendfailevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvnsendfailevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_855","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvnxtinfo","title":"sctp_pcb_flags_recvnxtinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvnxtinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_856","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvpaddrevnt","title":"sctp_pcb_flags_recvpaddrevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvpaddrevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_857","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvpeererr","title":"sctp_pcb_flags_recvpeererr","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvpeererr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_858","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvrcvinfo","title":"sctp_pcb_flags_recvrcvinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvrcvinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_859","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvsendfailevnt","title":"sctp_pcb_flags_recvsendfailevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvsendfailevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_860","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvshutdownevnt","title":"sctp_pcb_flags_recvshutdownevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvshutdownevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_861","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_allgone","title":"sctp_pcb_flags_socket_allgone","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_socket_allgone()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_862","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_cant_read","title":"sctp_pcb_flags_socket_cant_read","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_socket_cant_read()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_863","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_gone","title":"sctp_pcb_flags_socket_gone","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_socket_gone()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_864","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_stream_changeevnt","title":"sctp_pcb_flags_stream_changeevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_stream_changeevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_865","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_stream_resetevnt","title":"sctp_pcb_flags_stream_resetevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_stream_resetevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_866","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_tcptype","title":"sctp_pcb_flags_tcptype","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_tcptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_867","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_udptype","title":"sctp_pcb_flags_udptype","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_udptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_868","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_unbound","title":"sctp_pcb_flags_unbound","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_unbound()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_869","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_wakeinput","title":"sctp_pcb_flags_wakeinput","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_wakeinput()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_870","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_wakeoutput","title":"sctp_pcb_flags_wakeoutput","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_wakeoutput()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_871","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_was_aborted","title":"sctp_pcb_flags_was_aborted","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_was_aborted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_872","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_was_connected","title":"sctp_pcb_flags_was_connected","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_was_connected()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_873","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_zero_copy_active","title":"sctp_pcb_flags_zero_copy_active","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_zero_copy_active()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_874","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_status","title":"sctp_pcb_status","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_875","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_peeloff","title":"sctp_peeloff","text":"<p>[Source]</p> <pre><code>fun box sctp_peeloff()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_876","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_peer_addr_params","title":"sctp_peer_addr_params","text":"<p>[Source]</p> <pre><code>fun box sctp_peer_addr_params()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_877","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_peer_addr_thlds","title":"sctp_peer_addr_thlds","text":"<p>[Source]</p> <pre><code>fun box sctp_peer_addr_thlds()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_878","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_peer_auth_chunks","title":"sctp_peer_auth_chunks","text":"<p>[Source]</p> <pre><code>fun box sctp_peer_auth_chunks()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_879","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pktdrop_supported","title":"sctp_pktdrop_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_pktdrop_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_880","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pluggable_cc","title":"sctp_pluggable_cc","text":"<p>[Source]</p> <pre><code>fun box sctp_pluggable_cc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_881","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pluggable_ss","title":"sctp_pluggable_ss","text":"<p>[Source]</p> <pre><code>fun box sctp_pluggable_ss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_882","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_primary_addr","title":"sctp_primary_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_primary_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_883","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pr_assoc_status","title":"sctp_pr_assoc_status","text":"<p>[Source]</p> <pre><code>fun box sctp_pr_assoc_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_884","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pr_stream_status","title":"sctp_pr_stream_status","text":"<p>[Source]</p> <pre><code>fun box sctp_pr_stream_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_885","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pr_supported","title":"sctp_pr_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_pr_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_886","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_reconfig_supported","title":"sctp_reconfig_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_reconfig_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_887","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_recvnxtinfo","title":"sctp_recvnxtinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_recvnxtinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_888","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_recvrcvinfo","title":"sctp_recvrcvinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_recvrcvinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_889","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_recv_rwnd_logging_enable","title":"sctp_recv_rwnd_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_recv_rwnd_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_890","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_remote_udp_encaps_port","title":"sctp_remote_udp_encaps_port","text":"<p>[Source]</p> <pre><code>fun box sctp_remote_udp_encaps_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_891","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_reset_assoc","title":"sctp_reset_assoc","text":"<p>[Source]</p> <pre><code>fun box sctp_reset_assoc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_892","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_reset_streams","title":"sctp_reset_streams","text":"<p>[Source]</p> <pre><code>fun box sctp_reset_streams()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_893","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_reuse_port","title":"sctp_reuse_port","text":"<p>[Source]</p> <pre><code>fun box sctp_reuse_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_894","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_rtoinfo","title":"sctp_rtoinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_rtoinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_895","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_rttvar_logging_enable","title":"sctp_rttvar_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_rttvar_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_896","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sack_cmt_dac","title":"sctp_sack_cmt_dac","text":"<p>[Source]</p> <pre><code>fun box sctp_sack_cmt_dac()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_897","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sack_logging_enable","title":"sctp_sack_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_sack_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_898","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sack_nonce_sum","title":"sctp_sack_nonce_sum","text":"<p>[Source]</p> <pre><code>fun box sctp_sack_nonce_sum()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_899","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sack_rwnd_logging_enable","title":"sctp_sack_rwnd_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_sack_rwnd_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_900","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sat_network_burst_incr","title":"sctp_sat_network_burst_incr","text":"<p>[Source]</p> <pre><code>fun box sctp_sat_network_burst_incr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_901","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sat_network_min","title":"sctp_sat_network_min","text":"<p>[Source]</p> <pre><code>fun box sctp_sat_network_min()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_902","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sb_logging_enable","title":"sctp_sb_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_sb_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_903","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_selective_ack","title":"sctp_selective_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_selective_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_904","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_set_debug_level","title":"sctp_set_debug_level","text":"<p>[Source]</p> <pre><code>fun box sctp_set_debug_level()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_905","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_set_dynamic_primary","title":"sctp_set_dynamic_primary","text":"<p>[Source]</p> <pre><code>fun box sctp_set_dynamic_primary()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_906","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_set_initial_dbg_seq","title":"sctp_set_initial_dbg_seq","text":"<p>[Source]</p> <pre><code>fun box sctp_set_initial_dbg_seq()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_907","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_set_peer_primary_addr","title":"sctp_set_peer_primary_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_set_peer_primary_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_908","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown","title":"sctp_shutdown","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_909","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_ack","title":"sctp_shutdown_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_910","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_ack_sent","title":"sctp_shutdown_ack_sent","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_ack_sent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_911","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_complete","title":"sctp_shutdown_complete","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_complete()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_912","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_pending","title":"sctp_shutdown_pending","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_pending()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_913","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_received","title":"sctp_shutdown_received","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_received()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_914","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_sent","title":"sctp_shutdown_sent","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_sent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_915","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_smallest_pmtu","title":"sctp_smallest_pmtu","text":"<p>[Source]</p> <pre><code>fun box sctp_smallest_pmtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_916","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_default","title":"sctp_ss_default","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_default()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_917","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_fair_bandwith","title":"sctp_ss_fair_bandwith","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_fair_bandwith()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_918","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_first_come","title":"sctp_ss_first_come","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_first_come()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_919","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_priority","title":"sctp_ss_priority","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_priority()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_920","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_round_robin","title":"sctp_ss_round_robin","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_round_robin()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_921","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_round_robin_packet","title":"sctp_ss_round_robin_packet","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_round_robin_packet()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_922","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_value","title":"sctp_ss_value","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_value()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_923","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_status","title":"sctp_status","text":"<p>[Source]</p> <pre><code>fun box sctp_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_924","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_stream_reset","title":"sctp_stream_reset","text":"<p>[Source]</p> <pre><code>fun box sctp_stream_reset()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_925","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_stream_reset_incoming","title":"sctp_stream_reset_incoming","text":"<p>[Source]</p> <pre><code>fun box sctp_stream_reset_incoming()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_926","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_stream_reset_outgoing","title":"sctp_stream_reset_outgoing","text":"<p>[Source]</p> <pre><code>fun box sctp_stream_reset_outgoing()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_927","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_str_logging_enable","title":"sctp_str_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_str_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_928","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_threshold_logging","title":"sctp_threshold_logging","text":"<p>[Source]</p> <pre><code>fun box sctp_threshold_logging()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_929","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_timeouts","title":"sctp_timeouts","text":"<p>[Source]</p> <pre><code>fun box sctp_timeouts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_930","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_use_ext_rcvinfo","title":"sctp_use_ext_rcvinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_use_ext_rcvinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_931","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_vrf_id","title":"sctp_vrf_id","text":"<p>[Source]</p> <pre><code>fun box sctp_vrf_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_932","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_wake_logging_enable","title":"sctp_wake_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_wake_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_933","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_cloexec","title":"sock_cloexec","text":"<p>[Source]</p> <pre><code>fun box sock_cloexec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_934","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_dgram","title":"sock_dgram","text":"<p>[Source]</p> <pre><code>fun box sock_dgram()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_935","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_maxaddrlen","title":"sock_maxaddrlen","text":"<p>[Source]</p> <pre><code>fun box sock_maxaddrlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_936","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_nonblock","title":"sock_nonblock","text":"<p>[Source]</p> <pre><code>fun box sock_nonblock()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_937","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_raw","title":"sock_raw","text":"<p>[Source]</p> <pre><code>fun box sock_raw()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_938","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_rdm","title":"sock_rdm","text":"<p>[Source]</p> <pre><code>fun box sock_rdm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_939","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_seqpacket","title":"sock_seqpacket","text":"<p>[Source]</p> <pre><code>fun box sock_seqpacket()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_940","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_stream","title":"sock_stream","text":"<p>[Source]</p> <pre><code>fun box sock_stream()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_941","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#somaxconn","title":"somaxconn","text":"<p>[Source]</p> <pre><code>fun box somaxconn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_942","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sonpx_setoptshut","title":"sonpx_setoptshut","text":"<p>[Source]</p> <pre><code>fun box sonpx_setoptshut()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_943","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_acceptconn","title":"so_acceptconn","text":"<p>[Source]</p> <pre><code>fun box so_acceptconn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_944","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_acceptfilter","title":"so_acceptfilter","text":"<p>[Source]</p> <pre><code>fun box so_acceptfilter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_945","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_atmpvc","title":"so_atmpvc","text":"<p>[Source]</p> <pre><code>fun box so_atmpvc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_946","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_atmqos","title":"so_atmqos","text":"<p>[Source]</p> <pre><code>fun box so_atmqos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_947","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_atmsap","title":"so_atmsap","text":"<p>[Source]</p> <pre><code>fun box so_atmsap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_948","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_attach_bpf","title":"so_attach_bpf","text":"<p>[Source]</p> <pre><code>fun box so_attach_bpf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_949","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_attach_filter","title":"so_attach_filter","text":"<p>[Source]</p> <pre><code>fun box so_attach_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_950","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bindtodevice","title":"so_bindtodevice","text":"<p>[Source]</p> <pre><code>fun box so_bindtodevice()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_951","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bintime","title":"so_bintime","text":"<p>[Source]</p> <pre><code>fun box so_bintime()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_952","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bpf_extensions","title":"so_bpf_extensions","text":"<p>[Source]</p> <pre><code>fun box so_bpf_extensions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_953","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_broadcast","title":"so_broadcast","text":"<p>[Source]</p> <pre><code>fun box so_broadcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_954","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bsdcompat","title":"so_bsdcompat","text":"<p>[Source]</p> <pre><code>fun box so_bsdcompat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_955","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bsp_state","title":"so_bsp_state","text":"<p>[Source]</p> <pre><code>fun box so_bsp_state()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_956","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_busy_poll","title":"so_busy_poll","text":"<p>[Source]</p> <pre><code>fun box so_busy_poll()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_957","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_conaccess","title":"so_conaccess","text":"<p>[Source]</p> <pre><code>fun box so_conaccess()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_958","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_condata","title":"so_condata","text":"<p>[Source]</p> <pre><code>fun box so_condata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_959","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_conditional_accept","title":"so_conditional_accept","text":"<p>[Source]</p> <pre><code>fun box so_conditional_accept()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_960","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_connect_time","title":"so_connect_time","text":"<p>[Source]</p> <pre><code>fun box so_connect_time()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_961","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_debug","title":"so_debug","text":"<p>[Source]</p> <pre><code>fun box so_debug()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_962","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_detach_bpf","title":"so_detach_bpf","text":"<p>[Source]</p> <pre><code>fun box so_detach_bpf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_963","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_detach_filter","title":"so_detach_filter","text":"<p>[Source]</p> <pre><code>fun box so_detach_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_964","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_domain","title":"so_domain","text":"<p>[Source]</p> <pre><code>fun box so_domain()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_965","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_dontlinger","title":"so_dontlinger","text":"<p>[Source]</p> <pre><code>fun box so_dontlinger()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_966","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_dontroute","title":"so_dontroute","text":"<p>[Source]</p> <pre><code>fun box so_dontroute()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_967","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_donttrunc","title":"so_donttrunc","text":"<p>[Source]</p> <pre><code>fun box so_donttrunc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_968","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_error","title":"so_error","text":"<p>[Source]</p> <pre><code>fun box so_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_969","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_exclusiveaddruse","title":"so_exclusiveaddruse","text":"<p>[Source]</p> <pre><code>fun box so_exclusiveaddruse()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_970","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_get_filter","title":"so_get_filter","text":"<p>[Source]</p> <pre><code>fun box so_get_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_971","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_group_id","title":"so_group_id","text":"<p>[Source]</p> <pre><code>fun box so_group_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_972","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_group_priority","title":"so_group_priority","text":"<p>[Source]</p> <pre><code>fun box so_group_priority()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_973","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_hci_raw_direction","title":"so_hci_raw_direction","text":"<p>[Source]</p> <pre><code>fun box so_hci_raw_direction()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_974","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_hci_raw_filter","title":"so_hci_raw_filter","text":"<p>[Source]</p> <pre><code>fun box so_hci_raw_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_975","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_incoming_cpu","title":"so_incoming_cpu","text":"<p>[Source]</p> <pre><code>fun box so_incoming_cpu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_976","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_keepalive","title":"so_keepalive","text":"<p>[Source]</p> <pre><code>fun box so_keepalive()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_977","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_encrypted","title":"so_l2cap_encrypted","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_encrypted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_978","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_flush","title":"so_l2cap_flush","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_979","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_iflow","title":"so_l2cap_iflow","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_iflow()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_980","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_imtu","title":"so_l2cap_imtu","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_imtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_981","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_oflow","title":"so_l2cap_oflow","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_oflow()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_982","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_omtu","title":"so_l2cap_omtu","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_omtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_983","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_label","title":"so_label","text":"<p>[Source]</p> <pre><code>fun box so_label()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_984","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_linger","title":"so_linger","text":"<p>[Source]</p> <pre><code>fun box so_linger()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_985","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_linger_sec","title":"so_linger_sec","text":"<p>[Source]</p> <pre><code>fun box so_linger_sec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_986","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_linkinfo","title":"so_linkinfo","text":"<p>[Source]</p> <pre><code>fun box so_linkinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_987","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_listenincqlen","title":"so_listenincqlen","text":"<p>[Source]</p> <pre><code>fun box so_listenincqlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_988","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_listenqlen","title":"so_listenqlen","text":"<p>[Source]</p> <pre><code>fun box so_listenqlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_989","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_listenqlimit","title":"so_listenqlimit","text":"<p>[Source]</p> <pre><code>fun box so_listenqlimit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_990","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_lock_filter","title":"so_lock_filter","text":"<p>[Source]</p> <pre><code>fun box so_lock_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_991","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_mark","title":"so_mark","text":"<p>[Source]</p> <pre><code>fun box so_mark()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_992","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_max_msg_size","title":"so_max_msg_size","text":"<p>[Source]</p> <pre><code>fun box so_max_msg_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_993","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_max_pacing_rate","title":"so_max_pacing_rate","text":"<p>[Source]</p> <pre><code>fun box so_max_pacing_rate()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_994","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_multipoint","title":"so_multipoint","text":"<p>[Source]</p> <pre><code>fun box so_multipoint()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_995","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_netsvc_marking_level","title":"so_netsvc_marking_level","text":"<p>[Source]</p> <pre><code>fun box so_netsvc_marking_level()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_996","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_net_service_type","title":"so_net_service_type","text":"<p>[Source]</p> <pre><code>fun box so_net_service_type()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_997","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nke","title":"so_nke","text":"<p>[Source]</p> <pre><code>fun box so_nke()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_998","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_noaddrerr","title":"so_noaddrerr","text":"<p>[Source]</p> <pre><code>fun box so_noaddrerr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_999","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nofcs","title":"so_nofcs","text":"<p>[Source]</p> <pre><code>fun box so_nofcs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1000","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nosigpipe","title":"so_nosigpipe","text":"<p>[Source]</p> <pre><code>fun box so_nosigpipe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1001","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_notifyconflict","title":"so_notifyconflict","text":"<p>[Source]</p> <pre><code>fun box so_notifyconflict()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1002","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_no_check","title":"so_no_check","text":"<p>[Source]</p> <pre><code>fun box so_no_check()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1003","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_no_ddp","title":"so_no_ddp","text":"<p>[Source]</p> <pre><code>fun box so_no_ddp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1004","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_no_offload","title":"so_no_offload","text":"<p>[Source]</p> <pre><code>fun box so_no_offload()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1005","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_np_extensions","title":"so_np_extensions","text":"<p>[Source]</p> <pre><code>fun box so_np_extensions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1006","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nread","title":"so_nread","text":"<p>[Source]</p> <pre><code>fun box so_nread()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1007","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_numrcvpkt","title":"so_numrcvpkt","text":"<p>[Source]</p> <pre><code>fun box so_numrcvpkt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1008","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nwrite","title":"so_nwrite","text":"<p>[Source]</p> <pre><code>fun box so_nwrite()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1009","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_oobinline","title":"so_oobinline","text":"<p>[Source]</p> <pre><code>fun box so_oobinline()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1010","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_original_dst","title":"so_original_dst","text":"<p>[Source]</p> <pre><code>fun box so_original_dst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1011","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_passcred","title":"so_passcred","text":"<p>[Source]</p> <pre><code>fun box so_passcred()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1012","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_passsec","title":"so_passsec","text":"<p>[Source]</p> <pre><code>fun box so_passsec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1013","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peek_off","title":"so_peek_off","text":"<p>[Source]</p> <pre><code>fun box so_peek_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1014","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peercred","title":"so_peercred","text":"<p>[Source]</p> <pre><code>fun box so_peercred()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1015","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peerlabel","title":"so_peerlabel","text":"<p>[Source]</p> <pre><code>fun box so_peerlabel()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1016","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peername","title":"so_peername","text":"<p>[Source]</p> <pre><code>fun box so_peername()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1017","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peersec","title":"so_peersec","text":"<p>[Source]</p> <pre><code>fun box so_peersec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1018","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_port_scalability","title":"so_port_scalability","text":"<p>[Source]</p> <pre><code>fun box so_port_scalability()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1019","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_priority","title":"so_priority","text":"<p>[Source]</p> <pre><code>fun box so_priority()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1020","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_protocol","title":"so_protocol","text":"<p>[Source]</p> <pre><code>fun box so_protocol()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1021","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_protocol_info","title":"so_protocol_info","text":"<p>[Source]</p> <pre><code>fun box so_protocol_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1022","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_prototype","title":"so_prototype","text":"<p>[Source]</p> <pre><code>fun box so_prototype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1023","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_proxyusr","title":"so_proxyusr","text":"<p>[Source]</p> <pre><code>fun box so_proxyusr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1024","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_randomport","title":"so_randomport","text":"<p>[Source]</p> <pre><code>fun box so_randomport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1025","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvbuf","title":"so_rcvbuf","text":"<p>[Source]</p> <pre><code>fun box so_rcvbuf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1026","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvbufforce","title":"so_rcvbufforce","text":"<p>[Source]</p> <pre><code>fun box so_rcvbufforce()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1027","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvlowat","title":"so_rcvlowat","text":"<p>[Source]</p> <pre><code>fun box so_rcvlowat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1028","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvtimeo","title":"so_rcvtimeo","text":"<p>[Source]</p> <pre><code>fun box so_rcvtimeo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1029","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rds_transport","title":"so_rds_transport","text":"<p>[Source]</p> <pre><code>fun box so_rds_transport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1030","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_reuseaddr","title":"so_reuseaddr","text":"<p>[Source]</p> <pre><code>fun box so_reuseaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1031","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_reuseport","title":"so_reuseport","text":"<p>[Source]</p> <pre><code>fun box so_reuseport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1032","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_reuseshareuid","title":"so_reuseshareuid","text":"<p>[Source]</p> <pre><code>fun box so_reuseshareuid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1033","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rfcomm_fc_info","title":"so_rfcomm_fc_info","text":"<p>[Source]</p> <pre><code>fun box so_rfcomm_fc_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1034","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rfcomm_mtu","title":"so_rfcomm_mtu","text":"<p>[Source]</p> <pre><code>fun box so_rfcomm_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1035","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rxq_ovfl","title":"so_rxq_ovfl","text":"<p>[Source]</p> <pre><code>fun box so_rxq_ovfl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1036","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sco_conninfo","title":"so_sco_conninfo","text":"<p>[Source]</p> <pre><code>fun box so_sco_conninfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1037","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sco_mtu","title":"so_sco_mtu","text":"<p>[Source]</p> <pre><code>fun box so_sco_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1038","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_security_authentication","title":"so_security_authentication","text":"<p>[Source]</p> <pre><code>fun box so_security_authentication()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1039","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_security_encryption_network","title":"so_security_encryption_network","text":"<p>[Source]</p> <pre><code>fun box so_security_encryption_network()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1040","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_security_encryption_transport","title":"so_security_encryption_transport","text":"<p>[Source]</p> <pre><code>fun box so_security_encryption_transport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1041","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_select_err_queue","title":"so_select_err_queue","text":"<p>[Source]</p> <pre><code>fun box so_select_err_queue()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1042","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_setclp","title":"so_setclp","text":"<p>[Source]</p> <pre><code>fun box so_setclp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1043","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_setfib","title":"so_setfib","text":"<p>[Source]</p> <pre><code>fun box so_setfib()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1044","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndbuf","title":"so_sndbuf","text":"<p>[Source]</p> <pre><code>fun box so_sndbuf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1045","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndbufforce","title":"so_sndbufforce","text":"<p>[Source]</p> <pre><code>fun box so_sndbufforce()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1046","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndlowat","title":"so_sndlowat","text":"<p>[Source]</p> <pre><code>fun box so_sndlowat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1047","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndtimeo","title":"so_sndtimeo","text":"<p>[Source]</p> <pre><code>fun box so_sndtimeo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1048","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_timestamp","title":"so_timestamp","text":"<p>[Source]</p> <pre><code>fun box so_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1049","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_timestamping","title":"so_timestamping","text":"<p>[Source]</p> <pre><code>fun box so_timestamping()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1050","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_timestampns","title":"so_timestampns","text":"<p>[Source]</p> <pre><code>fun box so_timestampns()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1051","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_timestamp_monotonic","title":"so_timestamp_monotonic","text":"<p>[Source]</p> <pre><code>fun box so_timestamp_monotonic()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1052","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_type","title":"so_type","text":"<p>[Source]</p> <pre><code>fun box so_type()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1053","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_upcallclosewait","title":"so_upcallclosewait","text":"<p>[Source]</p> <pre><code>fun box so_upcallclosewait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1054","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_update_accept_context","title":"so_update_accept_context","text":"<p>[Source]</p> <pre><code>fun box so_update_accept_context()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1055","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_useloopback","title":"so_useloopback","text":"<p>[Source]</p> <pre><code>fun box so_useloopback()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1056","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_user_cookie","title":"so_user_cookie","text":"<p>[Source]</p> <pre><code>fun box so_user_cookie()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1057","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vendor","title":"so_vendor","text":"<p>[Source]</p> <pre><code>fun box so_vendor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1058","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_max_size","title":"so_vm_sockets_buffer_max_size","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_buffer_max_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1059","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_min_size","title":"so_vm_sockets_buffer_min_size","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_buffer_min_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1060","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_size","title":"so_vm_sockets_buffer_size","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_buffer_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1061","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_connect_timeout","title":"so_vm_sockets_connect_timeout","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_connect_timeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1062","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_nonblock_txrx","title":"so_vm_sockets_nonblock_txrx","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_nonblock_txrx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1063","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_peer_host_vm_id","title":"so_vm_sockets_peer_host_vm_id","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_peer_host_vm_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1064","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_trusted","title":"so_vm_sockets_trusted","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_trusted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1065","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_wantmore","title":"so_wantmore","text":"<p>[Source]</p> <pre><code>fun box so_wantmore()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1066","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_wantoobflag","title":"so_wantoobflag","text":"<p>[Source]</p> <pre><code>fun box so_wantoobflag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1067","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_wifi_status","title":"so_wifi_status","text":"<p>[Source]</p> <pre><code>fun box so_wifi_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1068","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp6_mss","title":"tcp6_mss","text":"<p>[Source]</p> <pre><code>fun box tcp6_mss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1069","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_flag_lossrecovery","title":"tcpci_flag_lossrecovery","text":"<p>[Source]</p> <pre><code>fun box tcpci_flag_lossrecovery()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1070","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_flag_reordering_detected","title":"tcpci_flag_reordering_detected","text":"<p>[Source]</p> <pre><code>fun box tcpci_flag_reordering_detected()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1071","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_opt_ecn","title":"tcpci_opt_ecn","text":"<p>[Source]</p> <pre><code>fun box tcpci_opt_ecn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1072","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_opt_sack","title":"tcpci_opt_sack","text":"<p>[Source]</p> <pre><code>fun box tcpci_opt_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1073","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_opt_timestamps","title":"tcpci_opt_timestamps","text":"<p>[Source]</p> <pre><code>fun box tcpci_opt_timestamps()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1074","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_opt_wscale","title":"tcpci_opt_wscale","text":"<p>[Source]</p> <pre><code>fun box tcpci_opt_wscale()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1075","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_cwr","title":"tcpf_ca_cwr","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_cwr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1076","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_disorder","title":"tcpf_ca_disorder","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_disorder()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1077","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_loss","title":"tcpf_ca_loss","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_loss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1078","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_open","title":"tcpf_ca_open","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_open()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1079","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_recovery","title":"tcpf_ca_recovery","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_recovery()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1080","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_ecn","title":"tcpi_opt_ecn","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_ecn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1081","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_ecn_seen","title":"tcpi_opt_ecn_seen","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_ecn_seen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1082","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_sack","title":"tcpi_opt_sack","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1083","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_syn_data","title":"tcpi_opt_syn_data","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_syn_data()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1084","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_timestamps","title":"tcpi_opt_timestamps","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_timestamps()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1085","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_toe","title":"tcpi_opt_toe","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_toe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1086","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_wscale","title":"tcpi_opt_wscale","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_wscale()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1087","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_cc","title":"tcpolen_cc","text":"<p>[Source]</p> <pre><code>fun box tcpolen_cc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1088","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_cc_appa","title":"tcpolen_cc_appa","text":"<p>[Source]</p> <pre><code>fun box tcpolen_cc_appa()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1089","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_eol","title":"tcpolen_eol","text":"<p>[Source]</p> <pre><code>fun box tcpolen_eol()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1090","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_fastopen_req","title":"tcpolen_fastopen_req","text":"<p>[Source]</p> <pre><code>fun box tcpolen_fastopen_req()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1091","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_fast_open_empty","title":"tcpolen_fast_open_empty","text":"<p>[Source]</p> <pre><code>fun box tcpolen_fast_open_empty()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1092","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_fast_open_max","title":"tcpolen_fast_open_max","text":"<p>[Source]</p> <pre><code>fun box tcpolen_fast_open_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1093","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_fast_open_min","title":"tcpolen_fast_open_min","text":"<p>[Source]</p> <pre><code>fun box tcpolen_fast_open_min()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1094","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_maxseg","title":"tcpolen_maxseg","text":"<p>[Source]</p> <pre><code>fun box tcpolen_maxseg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1095","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_nop","title":"tcpolen_nop","text":"<p>[Source]</p> <pre><code>fun box tcpolen_nop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1096","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_pad","title":"tcpolen_pad","text":"<p>[Source]</p> <pre><code>fun box tcpolen_pad()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1097","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_sack","title":"tcpolen_sack","text":"<p>[Source]</p> <pre><code>fun box tcpolen_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1098","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_sackhdr","title":"tcpolen_sackhdr","text":"<p>[Source]</p> <pre><code>fun box tcpolen_sackhdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1099","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_sack_permitted","title":"tcpolen_sack_permitted","text":"<p>[Source]</p> <pre><code>fun box tcpolen_sack_permitted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1100","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_signature","title":"tcpolen_signature","text":"<p>[Source]</p> <pre><code>fun box tcpolen_signature()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1101","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_timestamp","title":"tcpolen_timestamp","text":"<p>[Source]</p> <pre><code>fun box tcpolen_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1102","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_tstamp_appa","title":"tcpolen_tstamp_appa","text":"<p>[Source]</p> <pre><code>fun box tcpolen_tstamp_appa()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1103","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_window","title":"tcpolen_window","text":"<p>[Source]</p> <pre><code>fun box tcpolen_window()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1104","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_cc","title":"tcpopt_cc","text":"<p>[Source]</p> <pre><code>fun box tcpopt_cc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1105","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_ccecho","title":"tcpopt_ccecho","text":"<p>[Source]</p> <pre><code>fun box tcpopt_ccecho()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1106","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_ccnew","title":"tcpopt_ccnew","text":"<p>[Source]</p> <pre><code>fun box tcpopt_ccnew()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1107","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_eol","title":"tcpopt_eol","text":"<p>[Source]</p> <pre><code>fun box tcpopt_eol()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1108","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_fastopen","title":"tcpopt_fastopen","text":"<p>[Source]</p> <pre><code>fun box tcpopt_fastopen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1109","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_fast_open","title":"tcpopt_fast_open","text":"<p>[Source]</p> <pre><code>fun box tcpopt_fast_open()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1110","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_maxseg","title":"tcpopt_maxseg","text":"<p>[Source]</p> <pre><code>fun box tcpopt_maxseg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1111","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_multipath","title":"tcpopt_multipath","text":"<p>[Source]</p> <pre><code>fun box tcpopt_multipath()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1112","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_nop","title":"tcpopt_nop","text":"<p>[Source]</p> <pre><code>fun box tcpopt_nop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1113","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_pad","title":"tcpopt_pad","text":"<p>[Source]</p> <pre><code>fun box tcpopt_pad()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1114","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_sack","title":"tcpopt_sack","text":"<p>[Source]</p> <pre><code>fun box tcpopt_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1115","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_sack_hdr","title":"tcpopt_sack_hdr","text":"<p>[Source]</p> <pre><code>fun box tcpopt_sack_hdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1116","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_sack_permitted","title":"tcpopt_sack_permitted","text":"<p>[Source]</p> <pre><code>fun box tcpopt_sack_permitted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1117","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_sack_permit_hdr","title":"tcpopt_sack_permit_hdr","text":"<p>[Source]</p> <pre><code>fun box tcpopt_sack_permit_hdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1118","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_signature","title":"tcpopt_signature","text":"<p>[Source]</p> <pre><code>fun box tcpopt_signature()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1119","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_timestamp","title":"tcpopt_timestamp","text":"<p>[Source]</p> <pre><code>fun box tcpopt_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1120","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_tstamp_hdr","title":"tcpopt_tstamp_hdr","text":"<p>[Source]</p> <pre><code>fun box tcpopt_tstamp_hdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1121","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_window","title":"tcpopt_window","text":"<p>[Source]</p> <pre><code>fun box tcpopt_window()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1122","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_ca_name_max","title":"tcp_ca_name_max","text":"<p>[Source]</p> <pre><code>fun box tcp_ca_name_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1123","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_ccalgoopt","title":"tcp_ccalgoopt","text":"<p>[Source]</p> <pre><code>fun box tcp_ccalgoopt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1124","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cc_info","title":"tcp_cc_info","text":"<p>[Source]</p> <pre><code>fun box tcp_cc_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1125","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_congestion","title":"tcp_congestion","text":"<p>[Source]</p> <pre><code>fun box tcp_congestion()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1126","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_connectiontimeout","title":"tcp_connectiontimeout","text":"<p>[Source]</p> <pre><code>fun box tcp_connectiontimeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1127","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_connection_info","title":"tcp_connection_info","text":"<p>[Source]</p> <pre><code>fun box tcp_connection_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1128","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_in_always","title":"tcp_cookie_in_always","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_in_always()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1129","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_max","title":"tcp_cookie_max","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1130","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_min","title":"tcp_cookie_min","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_min()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1131","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_out_never","title":"tcp_cookie_out_never","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_out_never()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1132","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_pair_size","title":"tcp_cookie_pair_size","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_pair_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1133","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_transactions","title":"tcp_cookie_transactions","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_transactions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1134","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cork","title":"tcp_cork","text":"<p>[Source]</p> <pre><code>fun box tcp_cork()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1135","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_defer_accept","title":"tcp_defer_accept","text":"<p>[Source]</p> <pre><code>fun box tcp_defer_accept()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1136","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_enable_ecn","title":"tcp_enable_ecn","text":"<p>[Source]</p> <pre><code>fun box tcp_enable_ecn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1137","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_fastopen","title":"tcp_fastopen","text":"<p>[Source]</p> <pre><code>fun box tcp_fastopen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1138","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_function_blk","title":"tcp_function_blk","text":"<p>[Source]</p> <pre><code>fun box tcp_function_blk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1139","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_function_name_len_max","title":"tcp_function_name_len_max","text":"<p>[Source]</p> <pre><code>fun box tcp_function_name_len_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1140","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_info","title":"tcp_info","text":"<p>[Source]</p> <pre><code>fun box tcp_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1141","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepalive","title":"tcp_keepalive","text":"<p>[Source]</p> <pre><code>fun box tcp_keepalive()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1142","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepcnt","title":"tcp_keepcnt","text":"<p>[Source]</p> <pre><code>fun box tcp_keepcnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1143","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepidle","title":"tcp_keepidle","text":"<p>[Source]</p> <pre><code>fun box tcp_keepidle()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1144","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepinit","title":"tcp_keepinit","text":"<p>[Source]</p> <pre><code>fun box tcp_keepinit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1145","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepintvl","title":"tcp_keepintvl","text":"<p>[Source]</p> <pre><code>fun box tcp_keepintvl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1146","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_linger2","title":"tcp_linger2","text":"<p>[Source]</p> <pre><code>fun box tcp_linger2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1147","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxburst","title":"tcp_maxburst","text":"<p>[Source]</p> <pre><code>fun box tcp_maxburst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1148","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxhlen","title":"tcp_maxhlen","text":"<p>[Source]</p> <pre><code>fun box tcp_maxhlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1149","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxolen","title":"tcp_maxolen","text":"<p>[Source]</p> <pre><code>fun box tcp_maxolen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1150","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxseg","title":"tcp_maxseg","text":"<p>[Source]</p> <pre><code>fun box tcp_maxseg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1151","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxwin","title":"tcp_maxwin","text":"<p>[Source]</p> <pre><code>fun box tcp_maxwin()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1152","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_max_sack","title":"tcp_max_sack","text":"<p>[Source]</p> <pre><code>fun box tcp_max_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1153","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_max_winshift","title":"tcp_max_winshift","text":"<p>[Source]</p> <pre><code>fun box tcp_max_winshift()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1154","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_md5sig","title":"tcp_md5sig","text":"<p>[Source]</p> <pre><code>fun box tcp_md5sig()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1155","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_md5sig_maxkeylen","title":"tcp_md5sig_maxkeylen","text":"<p>[Source]</p> <pre><code>fun box tcp_md5sig_maxkeylen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1156","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_minmss","title":"tcp_minmss","text":"<p>[Source]</p> <pre><code>fun box tcp_minmss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1157","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_mss","title":"tcp_mss","text":"<p>[Source]</p> <pre><code>fun box tcp_mss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1158","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_mss_default","title":"tcp_mss_default","text":"<p>[Source]</p> <pre><code>fun box tcp_mss_default()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1159","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_mss_desired","title":"tcp_mss_desired","text":"<p>[Source]</p> <pre><code>fun box tcp_mss_desired()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1160","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_nodelay","title":"tcp_nodelay","text":"<p>[Source]</p> <pre><code>fun box tcp_nodelay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1161","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_noopt","title":"tcp_noopt","text":"<p>[Source]</p> <pre><code>fun box tcp_noopt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1162","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_nopush","title":"tcp_nopush","text":"<p>[Source]</p> <pre><code>fun box tcp_nopush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1163","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_notsent_lowat","title":"tcp_notsent_lowat","text":"<p>[Source]</p> <pre><code>fun box tcp_notsent_lowat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1164","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_pcap_in","title":"tcp_pcap_in","text":"<p>[Source]</p> <pre><code>fun box tcp_pcap_in()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1165","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_pcap_out","title":"tcp_pcap_out","text":"<p>[Source]</p> <pre><code>fun box tcp_pcap_out()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1166","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_queue_seq","title":"tcp_queue_seq","text":"<p>[Source]</p> <pre><code>fun box tcp_queue_seq()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1167","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_quickack","title":"tcp_quickack","text":"<p>[Source]</p> <pre><code>fun box tcp_quickack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1168","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_repair","title":"tcp_repair","text":"<p>[Source]</p> <pre><code>fun box tcp_repair()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1169","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_repair_options","title":"tcp_repair_options","text":"<p>[Source]</p> <pre><code>fun box tcp_repair_options()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1170","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_repair_queue","title":"tcp_repair_queue","text":"<p>[Source]</p> <pre><code>fun box tcp_repair_queue()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1171","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_rxt_conndroptime","title":"tcp_rxt_conndroptime","text":"<p>[Source]</p> <pre><code>fun box tcp_rxt_conndroptime()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1172","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_rxt_findrop","title":"tcp_rxt_findrop","text":"<p>[Source]</p> <pre><code>fun box tcp_rxt_findrop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1173","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_saved_syn","title":"tcp_saved_syn","text":"<p>[Source]</p> <pre><code>fun box tcp_saved_syn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1174","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_save_syn","title":"tcp_save_syn","text":"<p>[Source]</p> <pre><code>fun box tcp_save_syn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1175","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_sendmoreacks","title":"tcp_sendmoreacks","text":"<p>[Source]</p> <pre><code>fun box tcp_sendmoreacks()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1176","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_syncnt","title":"tcp_syncnt","text":"<p>[Source]</p> <pre><code>fun box tcp_syncnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1177","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_s_data_in","title":"tcp_s_data_in","text":"<p>[Source]</p> <pre><code>fun box tcp_s_data_in()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1178","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_s_data_out","title":"tcp_s_data_out","text":"<p>[Source]</p> <pre><code>fun box tcp_s_data_out()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1179","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_thin_dupack","title":"tcp_thin_dupack","text":"<p>[Source]</p> <pre><code>fun box tcp_thin_dupack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1180","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_thin_linear_timeouts","title":"tcp_thin_linear_timeouts","text":"<p>[Source]</p> <pre><code>fun box tcp_thin_linear_timeouts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1181","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_timestamp","title":"tcp_timestamp","text":"<p>[Source]</p> <pre><code>fun box tcp_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1182","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_user_timeout","title":"tcp_user_timeout","text":"<p>[Source]</p> <pre><code>fun box tcp_user_timeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1183","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_vendor","title":"tcp_vendor","text":"<p>[Source]</p> <pre><code>fun box tcp_vendor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1184","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_window_clamp","title":"tcp_window_clamp","text":"<p>[Source]</p> <pre><code>fun box tcp_window_clamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1185","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_addr_id","title":"tipc_addr_id","text":"<p>[Source]</p> <pre><code>fun box tipc_addr_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1186","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_addr_mcast","title":"tipc_addr_mcast","text":"<p>[Source]</p> <pre><code>fun box tipc_addr_mcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1187","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_addr_name","title":"tipc_addr_name","text":"<p>[Source]</p> <pre><code>fun box tipc_addr_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1188","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_addr_nameseq","title":"tipc_addr_nameseq","text":"<p>[Source]</p> <pre><code>fun box tipc_addr_nameseq()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1189","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_cfg_srv","title":"tipc_cfg_srv","text":"<p>[Source]</p> <pre><code>fun box tipc_cfg_srv()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1190","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_cluster_scope","title":"tipc_cluster_scope","text":"<p>[Source]</p> <pre><code>fun box tipc_cluster_scope()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1191","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_conn_shutdown","title":"tipc_conn_shutdown","text":"<p>[Source]</p> <pre><code>fun box tipc_conn_shutdown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1192","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_conn_timeout","title":"tipc_conn_timeout","text":"<p>[Source]</p> <pre><code>fun box tipc_conn_timeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1193","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_critical_importance","title":"tipc_critical_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_critical_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1194","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_destname","title":"tipc_destname","text":"<p>[Source]</p> <pre><code>fun box tipc_destname()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1195","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_dest_droppable","title":"tipc_dest_droppable","text":"<p>[Source]</p> <pre><code>fun box tipc_dest_droppable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1196","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_errinfo","title":"tipc_errinfo","text":"<p>[Source]</p> <pre><code>fun box tipc_errinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1197","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_err_no_name","title":"tipc_err_no_name","text":"<p>[Source]</p> <pre><code>fun box tipc_err_no_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1198","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_err_no_node","title":"tipc_err_no_node","text":"<p>[Source]</p> <pre><code>fun box tipc_err_no_node()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1199","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_err_no_port","title":"tipc_err_no_port","text":"<p>[Source]</p> <pre><code>fun box tipc_err_no_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1200","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_err_overload","title":"tipc_err_overload","text":"<p>[Source]</p> <pre><code>fun box tipc_err_overload()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1201","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_high_importance","title":"tipc_high_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_high_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1202","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_importance","title":"tipc_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1203","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_link_state","title":"tipc_link_state","text":"<p>[Source]</p> <pre><code>fun box tipc_link_state()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1204","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_low_importance","title":"tipc_low_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_low_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1205","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_bearer_name","title":"tipc_max_bearer_name","text":"<p>[Source]</p> <pre><code>fun box tipc_max_bearer_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1206","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_if_name","title":"tipc_max_if_name","text":"<p>[Source]</p> <pre><code>fun box tipc_max_if_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1207","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_link_name","title":"tipc_max_link_name","text":"<p>[Source]</p> <pre><code>fun box tipc_max_link_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1208","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_media_name","title":"tipc_max_media_name","text":"<p>[Source]</p> <pre><code>fun box tipc_max_media_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1209","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_user_msg_size","title":"tipc_max_user_msg_size","text":"<p>[Source]</p> <pre><code>fun box tipc_max_user_msg_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1210","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_medium_importance","title":"tipc_medium_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_medium_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1211","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_node_recvq_depth","title":"tipc_node_recvq_depth","text":"<p>[Source]</p> <pre><code>fun box tipc_node_recvq_depth()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1212","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_node_scope","title":"tipc_node_scope","text":"<p>[Source]</p> <pre><code>fun box tipc_node_scope()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1213","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_ok","title":"tipc_ok","text":"<p>[Source]</p> <pre><code>fun box tipc_ok()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1214","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_published","title":"tipc_published","text":"<p>[Source]</p> <pre><code>fun box tipc_published()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1215","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_reserved_types","title":"tipc_reserved_types","text":"<p>[Source]</p> <pre><code>fun box tipc_reserved_types()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1216","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_retdata","title":"tipc_retdata","text":"<p>[Source]</p> <pre><code>fun box tipc_retdata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1217","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_sock_recvq_depth","title":"tipc_sock_recvq_depth","text":"<p>[Source]</p> <pre><code>fun box tipc_sock_recvq_depth()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1218","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_src_droppable","title":"tipc_src_droppable","text":"<p>[Source]</p> <pre><code>fun box tipc_src_droppable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1219","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_subscr_timeout","title":"tipc_subscr_timeout","text":"<p>[Source]</p> <pre><code>fun box tipc_subscr_timeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1220","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_sub_cancel","title":"tipc_sub_cancel","text":"<p>[Source]</p> <pre><code>fun box tipc_sub_cancel()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1221","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_sub_ports","title":"tipc_sub_ports","text":"<p>[Source]</p> <pre><code>fun box tipc_sub_ports()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1222","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_sub_service","title":"tipc_sub_service","text":"<p>[Source]</p> <pre><code>fun box tipc_sub_service()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1223","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_top_srv","title":"tipc_top_srv","text":"<p>[Source]</p> <pre><code>fun box tipc_top_srv()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1224","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_wait_forever","title":"tipc_wait_forever","text":"<p>[Source]</p> <pre><code>fun box tipc_wait_forever()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1225","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_withdrawn","title":"tipc_withdrawn","text":"<p>[Source]</p> <pre><code>fun box tipc_withdrawn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1226","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_zone_scope","title":"tipc_zone_scope","text":"<p>[Source]</p> <pre><code>fun box tipc_zone_scope()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1227","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ttcp_client_snd_wnd","title":"ttcp_client_snd_wnd","text":"<p>[Source]</p> <pre><code>fun box ttcp_client_snd_wnd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1228","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_cork","title":"udp_cork","text":"<p>[Source]</p> <pre><code>fun box udp_cork()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1229","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap","title":"udp_encap","text":"<p>[Source]</p> <pre><code>fun box udp_encap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1230","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_espinudp","title":"udp_encap_espinudp","text":"<p>[Source]</p> <pre><code>fun box udp_encap_espinudp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1231","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_espinudp_maxfraglen","title":"udp_encap_espinudp_maxfraglen","text":"<p>[Source]</p> <pre><code>fun box udp_encap_espinudp_maxfraglen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1232","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_espinudp_non_ike","title":"udp_encap_espinudp_non_ike","text":"<p>[Source]</p> <pre><code>fun box udp_encap_espinudp_non_ike()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1233","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_espinudp_port","title":"udp_encap_espinudp_port","text":"<p>[Source]</p> <pre><code>fun box udp_encap_espinudp_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1234","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_l2tpinudp","title":"udp_encap_l2tpinudp","text":"<p>[Source]</p> <pre><code>fun box udp_encap_l2tpinudp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1235","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_nocksum","title":"udp_nocksum","text":"<p>[Source]</p> <pre><code>fun box udp_nocksum()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1236","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_no_check6_rx","title":"udp_no_check6_rx","text":"<p>[Source]</p> <pre><code>fun box udp_no_check6_rx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1237","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_no_check6_tx","title":"udp_no_check6_tx","text":"<p>[Source]</p> <pre><code>fun box udp_no_check6_tx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1238","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_vendor","title":"udp_vendor","text":"<p>[Source]</p> <pre><code>fun box udp_vendor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1239","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvtimeo_old","title":"so_rcvtimeo_old","text":"<p>[Source]</p> <pre><code>fun box so_rcvtimeo_old()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1240","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvtimeo_new","title":"so_rcvtimeo_new","text":"<p>[Source]</p> <pre><code>fun box so_rcvtimeo_new()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1241","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndtimeo_old","title":"so_sndtimeo_old","text":"<p>[Source]</p> <pre><code>fun box so_sndtimeo_old()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1242","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndtimeo_new","title":"so_sndtimeo_new","text":"<p>[Source]</p> <pre><code>fun box so_sndtimeo_new()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1243","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: OSSockOpt val)\n: Bool val\n</code></pre>"},{"location":"net-OSSockOpt/#parameters","title":"Parameters","text":"<ul> <li>that: OSSockOpt val</li> </ul>"},{"location":"net-OSSockOpt/#returns_1244","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-OSSockOpt/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: OSSockOpt val)\n: Bool val\n</code></pre>"},{"location":"net-OSSockOpt/#parameters_1","title":"Parameters","text":"<ul> <li>that: OSSockOpt val</li> </ul>"},{"location":"net-OSSockOpt/#returns_1245","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-Proxy/","title":"Proxy","text":"<p>[Source] <pre><code>interface ref Proxy\n</code></pre></p>"},{"location":"net-Proxy/#public-functions","title":"Public Functions","text":""},{"location":"net-Proxy/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  wrap: TCPConnectionNotify iso)\n: TCPConnectionNotify iso^\n</code></pre>"},{"location":"net-Proxy/#parameters","title":"Parameters","text":"<ul> <li>wrap: TCPConnectionNotify iso</li> </ul>"},{"location":"net-Proxy/#returns","title":"Returns","text":"<ul> <li>TCPConnectionNotify iso^</li> </ul>"},{"location":"net-TCPAuth/","title":"TCPAuth","text":"<p>[Source] <pre><code>primitive val TCPAuth\n</code></pre></p>"},{"location":"net-TCPAuth/#constructors","title":"Constructors","text":""},{"location":"net-TCPAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: (AmbientAuth val | NetAuth val))\n: TCPAuth val^\n</code></pre>"},{"location":"net-TCPAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val)</li> </ul>"},{"location":"net-TCPAuth/#returns","title":"Returns","text":"<ul> <li>TCPAuth val^</li> </ul>"},{"location":"net-TCPAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TCPAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: TCPAuth val</li> </ul>"},{"location":"net-TCPAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TCPAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: TCPAuth val</li> </ul>"},{"location":"net-TCPAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnectAuth/","title":"TCPConnectAuth","text":"<p>[Source] <pre><code>primitive val TCPConnectAuth\n</code></pre></p>"},{"location":"net-TCPConnectAuth/#constructors","title":"Constructors","text":""},{"location":"net-TCPConnectAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPConnectAuth val^\n</code></pre>"},{"location":"net-TCPConnectAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val | TCPAuth val)</li> </ul>"},{"location":"net-TCPConnectAuth/#returns","title":"Returns","text":"<ul> <li>TCPConnectAuth val^</li> </ul>"},{"location":"net-TCPConnectAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPConnectAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TCPConnectAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPConnectAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: TCPConnectAuth val</li> </ul>"},{"location":"net-TCPConnectAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnectAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TCPConnectAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPConnectAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: TCPConnectAuth val</li> </ul>"},{"location":"net-TCPConnectAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnection/","title":"TCPConnection","text":"<p>[Source]</p> <p>A TCP connection. When connecting, the Happy Eyeballs algorithm is used.</p> <p>The following code creates a client that connects to port 8989 of the local host, writes \"hello world\", and listens for a response, which it then prints.</p> <pre><code>use \"net\"\n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  let _out: OutStream\n\n  new create(out: OutStream) =&gt;\n    _out = out\n\n  fun ref connected(conn: TCPConnection ref) =&gt;\n    conn.write(\"hello world\")\n\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =&gt;\n    _out.print(\"GOT:\" + String.from_array(consume data))\n    conn.close()\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) =&gt;\n    None\n\nactor Main\n  new create(env: Env) =&gt;\n    TCPConnection(TCPConnectAuth(env.root),\n      recover MyTCPConnectionNotify(env.out) end, \"\", \"8989\")\n</code></pre> <p>Note: when writing to the connection data will be silently discarded if the connection has not yet been established.</p>"},{"location":"net-TCPConnection/#backpressure-support","title":"Backpressure support","text":""},{"location":"net-TCPConnection/#write","title":"Write","text":"<p>The TCP protocol has built-in backpressure support. This is generally experienced as the outgoing write buffer becoming full and being unable to write all requested data to the socket. In <code>TCPConnection</code>, this is hidden from the programmer. When this occurs, <code>TCPConnection</code> will buffer the extra data until such time as it is able to be sent. Left unchecked, this could result in uncontrolled queuing. To address this, <code>TCPConnectionNotify</code> implements two methods <code>throttled</code> and <code>unthrottled</code> that are called when backpressure is applied and released.</p> <p>Upon receiving a <code>throttled</code> notification, your application has two choices on how to handle it. One is to inform the Pony runtime that it can no longer make progress and that runtime backpressure should be applied to any actors sending this one messages. For example, you might construct your application like:</p> <pre><code>// Here we have a TCPConnectionNotify that upon construction\n// is given a ApplyReleaseBackpressureAuth token. This allows the notifier\n// to inform the Pony runtime when to apply and release backpressure\n// as the connection experiences it.\n// Note the calls to\n//\n// Backpressure.apply(_auth)\n// Backpressure.release(_auth)\n//\n// that apply and release backpressure as needed\n\nuse \"backpressure\"\nuse \"collections\"\nuse \"net\"\n\nclass SlowDown is TCPConnectionNotify\n  let _auth: ApplyReleaseBackpressureAuth\n  let _out: OutStream\n\n  new iso create(auth: ApplyReleaseBackpressureAuth, out: OutStream) =&gt;\n    _auth = auth\n    _out = out\n\n  fun ref throttled(connection: TCPConnection ref) =&gt;\n    _out.print(\"Experiencing backpressure!\")\n    Backpressure.apply(_auth)\n\n  fun ref unthrottled(connection: TCPConnection ref) =&gt;\n    _out.print(\"Releasing backpressure!\")\n    Backpressure.release(_auth)\n\n  fun ref closed(connection: TCPConnection ref) =&gt;\n    // if backpressure has been applied, make sure we release\n    // when shutting down\n    _out.print(\"Releasing backpressure if applied!\")\n    Backpressure.release(_auth)\n\n  fun ref connect_failed(conn: TCPConnection ref) =&gt;\n    None\n\nactor Main\n  new create(env: Env) =&gt;\n    let c_auth = TCPConnectAuth(env.root)\n    let bp_auth = ApplyReleaseBackpressureAuth(env.root)\n    let socket = TCPConnection(c_auth,\n      recover SlowDown(bp_auth, env.out) end, \"\", \"7669\")\n</code></pre> <p>Or if you want, you could handle backpressure by shedding load, that is, dropping the extra data rather than carrying out the send. This might look like:</p> <pre><code>use \"net\"\n\nclass ThrowItAway is TCPConnectionNotify\n  var _throttled: Bool = false\n\n  fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq =&gt;\n    if not _throttled then\n      data\n    else\n      \"\"\n    end\n\n  fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter =&gt;\n    if not _throttled then\n      data\n    else\n      recover Array[String] end\n    end\n\n  fun ref throttled(connection: TCPConnection ref) =&gt;\n    _throttled = true\n\n  fun ref unthrottled(connection: TCPConnection ref) =&gt;\n    _throttled = false\n\n  fun ref connect_failed(conn: TCPConnection ref) =&gt;\n    None\n\nactor Main\n  new create(env: Env) =&gt;\n    TCPConnection(TCPConnectAuth(env.root),\n      recover ThrowItAway end, \"\", \"7669\")\n</code></pre> <p>In general, unless you have a very specific use case, we strongly advise that you don't implement a load shedding scheme where you drop data.</p>"},{"location":"net-TCPConnection/#read","title":"Read","text":"<p>If your application is unable to keep up with data being sent to it over a <code>TCPConnection</code> you can use the builtin read backpressure support to pause reading the socket which will in turn start to exert backpressure on the corresponding writer on the other end of that socket.</p> <p>The <code>mute</code> behavior allow any other actors in your application to request the cessation of additional reads until such time as <code>unmute</code> is called. Please note that this cessation is not guaranteed to happen immediately as it is the result of an asynchronous behavior call and as such will have to wait for existing messages in the <code>TCPConnection</code>'s mailbox to be handled.</p> <p>On non-windows platforms, your <code>TCPConnection</code> will not notice if the other end of the connection closes until you unmute it. Unix type systems like FreeBSD, Linux and OSX learn about a closed connection upon read. On these platforms, you must call <code>unmute</code> on a muted connection to have it close. Without calling <code>unmute</code> the <code>TCPConnection</code> actor will never exit.</p>"},{"location":"net-TCPConnection/#proxy-support","title":"Proxy support","text":"<p>Using the <code>proxy_via</code> callback in a <code>TCPConnectionNotify</code> it is possible to implement proxies. The function takes the intended destination host and service as parameters and returns a 2-tuple of the proxy host and service.</p> <p>The proxy <code>TCPConnectionNotify</code> should decorate another implementation of <code>TCPConnectionNotify</code> passing relevent data through.</p>"},{"location":"net-TCPConnection/#example-proxy-implementation","title":"Example proxy implementation","text":"<pre><code>actor Main\n  new create(env: Env) =&gt;\n    MyClient.create(\n      \"example.com\", // we actually want to connect to this host\n      \"80\",\n      ExampleProxy.create(\"proxy.example.com\", \"80\")) // we connect via this proxy\n\nactor MyClient\n  new create(host: String, service: String, proxy: Proxy = NoProxy) =&gt;\n    let conn: TCPConnection = TCPConnection.create(\n      TCPConnectAuth(env.root),\n      proxy.apply(MyConnectionNotify.create()),\n      host,\n      service)\n\nclass ExampleProxy is Proxy\n  let _proxy_host: String\n  let _proxy_service: String\n\n  new create(proxy_host: String, proxy_service: String) =&gt;\n    _proxy_host = proxy_host\n    _proxy_service = proxy_service\n\n  fun apply(wrap: TCPConnectionNotify iso): TCPConnectionNotify iso^ =&gt;\n    ExampleProxyNotify.create(consume wrap, _proxy_service, _proxy_service)\n\nclass iso ExampleProxyNotify is TCPConnectionNotify\n  // Fictional proxy implementation that has no error\n  // conditions, and always forwards the connection.\n  let _proxy_host: String\n  let _proxy_service: String\n  var _destination_host: (None | String) = None\n  var _destination_service: (None | String) = None\n  let _wrapped: TCPConnectionNotify iso\n\n  new iso create(wrap: TCPConnectionNotify iso, proxy_host: String, proxy_service: String) =&gt;\n    _wrapped = wrap\n    _proxy_host = proxy_host\n    _proxy_service = proxy_service\n\n  fun ref proxy_via(host: String, service: String): (String, String) =&gt;\n    // Stash the original host &amp; service; return the host &amp; service\n    // for the proxy; indicating that the initial TCP connection should\n    // be made to the proxy\n    _destination_host = host\n    _destination_service = service\n    (_proxy_host, _proxy_service)\n\n  fun ref connected(conn: TCPConnection ref) =&gt;\n    // conn is the connection to the *proxy* server. We need to ask the\n    // proxy server to forward this connection to our intended final\n    // destination.\n    conn.write((_destination_host + \"\\n\").array())\n    conn.write((_destination_service + \"\\n\").array())\n    wrapped.connected(conn)\n\n  fun ref received(conn, data, times) =&gt; _wrapped.received(conn, data, times)\n  fun ref connect_failed(conn: TCPConnection ref) =&gt; None\n</code></pre> <pre><code>actor tag TCPConnection is\n  AsioEventNotify tag\n</code></pre>"},{"location":"net-TCPConnection/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"net-TCPConnection/#constructors","title":"Constructors","text":""},{"location":"net-TCPConnection/#create","title":"create","text":"<p>[Source]</p> <p>Connect via IPv4 or IPv6. If <code>from</code> is a non-empty string, the connection will be made from the specified interface.</p> <pre><code>new tag create(\n  auth: TCPConnectAuth val,\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = \"\",\n  read_buffer_size: USize val = 16384,\n  yield_after_reading: USize val = 16384,\n  yield_after_writing: USize val = 16384)\n: TCPConnection tag^\n</code></pre>"},{"location":"net-TCPConnection/#parameters","title":"Parameters","text":"<ul> <li>auth: TCPConnectAuth val</li> <li>notify: TCPConnectionNotify iso</li> <li>host: String val</li> <li>service: String val</li> <li>from: String val = \"\"</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPConnection/#returns","title":"Returns","text":"<ul> <li>TCPConnection tag^</li> </ul>"},{"location":"net-TCPConnection/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Connect via IPv4.</p> <pre><code>new tag ip4(\n  auth: TCPConnectAuth val,\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = \"\",\n  read_buffer_size: USize val = 16384,\n  yield_after_reading: USize val = 16384,\n  yield_after_writing: USize val = 16384)\n: TCPConnection tag^\n</code></pre>"},{"location":"net-TCPConnection/#parameters_1","title":"Parameters","text":"<ul> <li>auth: TCPConnectAuth val</li> <li>notify: TCPConnectionNotify iso</li> <li>host: String val</li> <li>service: String val</li> <li>from: String val = \"\"</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPConnection/#returns_1","title":"Returns","text":"<ul> <li>TCPConnection tag^</li> </ul>"},{"location":"net-TCPConnection/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Connect via IPv6.</p> <pre><code>new tag ip6(\n  auth: TCPConnectAuth val,\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = \"\",\n  read_buffer_size: USize val = 16384,\n  yield_after_reading: USize val = 16384,\n  yield_after_writing: USize val = 16384)\n: TCPConnection tag^\n</code></pre>"},{"location":"net-TCPConnection/#parameters_2","title":"Parameters","text":"<ul> <li>auth: TCPConnectAuth val</li> <li>notify: TCPConnectionNotify iso</li> <li>host: String val</li> <li>service: String val</li> <li>from: String val = \"\"</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPConnection/#returns_2","title":"Returns","text":"<ul> <li>TCPConnection tag^</li> </ul>"},{"location":"net-TCPConnection/#public-behaviours","title":"Public Behaviours","text":""},{"location":"net-TCPConnection/#write_1","title":"write","text":"<p>[Source]</p> <p>Write a single sequence of bytes. Data will be silently discarded if the connection has not yet been established though.</p> <pre><code>be write(\n  data: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"net-TCPConnection/#parameters_3","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"net-TCPConnection/#writev","title":"writev","text":"<p>[Source]</p> <p>Write a sequence of sequences of bytes. Data will be silently discarded if the connection has not yet been established though.</p> <pre><code>be writev(\n  data: ByteSeqIter val)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_4","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"net-TCPConnection/#mute","title":"mute","text":"<p>[Source]</p> <p>Temporarily suspend reading off this TCPConnection until such time as <code>unmute</code> is called.</p> <pre><code>be mute()\n</code></pre>"},{"location":"net-TCPConnection/#unmute","title":"unmute","text":"<p>[Source]</p> <p>Start reading off this TCPConnection again after having been muted.</p> <pre><code>be unmute()\n</code></pre>"},{"location":"net-TCPConnection/#set_notify","title":"set_notify","text":"<p>[Source]</p> <p>Change the notifier.</p> <pre><code>be set_notify(\n  notify: TCPConnectionNotify iso)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_5","title":"Parameters","text":"<ul> <li>notify: TCPConnectionNotify iso</li> </ul>"},{"location":"net-TCPConnection/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Close the connection gracefully once all writes are sent.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"net-TCPConnection/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPConnection/#local_address","title":"local_address","text":"<p>[Source]</p> <p>Return the local IP address. If this TCPConnection is closed then the address returned is invalid.</p> <pre><code>fun box local_address()\n: NetAddress val\n</code></pre>"},{"location":"net-TCPConnection/#returns_3","title":"Returns","text":"<ul> <li>NetAddress val</li> </ul>"},{"location":"net-TCPConnection/#remote_address","title":"remote_address","text":"<p>[Source]</p> <p>Return the remote IP address. If this TCPConnection is closed then the address returned is invalid.</p> <pre><code>fun box remote_address()\n: NetAddress val\n</code></pre>"},{"location":"net-TCPConnection/#returns_4","title":"Returns","text":"<ul> <li>NetAddress val</li> </ul>"},{"location":"net-TCPConnection/#expect","title":"expect","text":"<p>[Source]</p> <p>A <code>received</code> call on the notifier must contain exactly <code>qty</code> bytes. If <code>qty</code> is zero, the call can contain any amount of data. This has no effect if called in the <code>sent</code> notifier callback.</p> <p>Errors if <code>qty</code> exceeds the max buffer size as indicated by the <code>read_buffer_size</code> supplied when the connection was created.</p> <pre><code>fun ref expect(\n  qty: USize val = 0)\n: None val ?\n</code></pre>"},{"location":"net-TCPConnection/#parameters_6","title":"Parameters","text":"<ul> <li>qty: USize val = 0</li> </ul>"},{"location":"net-TCPConnection/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"net-TCPConnection/#set_nodelay","title":"set_nodelay","text":"<p>[Source]</p> <p>Turn Nagle on/off. Defaults to on. This can only be set on a connected socket.</p> <pre><code>fun ref set_nodelay(\n  state: Bool val)\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_7","title":"Parameters","text":"<ul> <li>state: Bool val</li> </ul>"},{"location":"net-TCPConnection/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#set_keepalive","title":"set_keepalive","text":"<p>[Source]</p> <p>Sets the TCP keepalive timeout to approximately <code>secs</code> seconds. Exact timing is OS dependent. If <code>secs</code> is zero, TCP keepalive is disabled. TCP keepalive is disabled by default. This can only be set on a connected socket.</p> <pre><code>fun ref set_keepalive(\n  secs: U32 val)\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_8","title":"Parameters","text":"<ul> <li>secs: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#write_final","title":"write_final","text":"<p>[Source]</p> <p>Write as much as possible to the socket. Set <code>_writeable</code> to <code>false</code> if not everything was written. On an error, close the connection. This is for data that has already been transformed by the notifier. Data will be silently discarded if the connection has not yet been established though.</p> <pre><code>fun ref write_final(\n  data: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_9","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"net-TCPConnection/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#close","title":"close","text":"<p>[Source]</p> <p>Attempt to perform a graceful shutdown. Don't accept new writes. If the connection isn't muted then we won't finish closing until we get a zero length read. If the connection is muted, perform a hard close and shut down immediately.</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#hard_close","title":"hard_close","text":"<p>[Source]</p> <p>When an error happens, do a non-graceful close.</p> <pre><code>fun ref hard_close()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#getsockopt","title":"getsockopt","text":"<p>[Source]</p> <p>General wrapper for TCP sockets to the <code>getsockopt(2)</code> system call.</p> <p>The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. An <code>Array[U8]</code> of data returned by the system call's <code>void *</code>    4th argument.  Its size is specified by the kernel via the    system call's <code>sockopt_len_t *</code> 5th argument.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <p>Usage example:</p> <pre><code>// connected() is a callback function for class TCPConnectionNotify\nfun ref connected(conn: TCPConnection ref) =&gt;\n  match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n    | (0, let gbytes: Array[U8] iso) =&gt;\n      try\n        let br = Reader.create().&gt;append(consume gbytes)\n        ifdef littleendian then\n          let buffer_size = br.u32_le()?\n        else\n          let buffer_size = br.u32_be()?\n        end\n      end\n    | (let errno: U32, _) =&gt;\n      // System call failed\n  end\n</code></pre> <pre><code>fun ref getsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option_max_size: USize val = 4)\n: (U32 val , Array[U8 val] iso^)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_10","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option_max_size: USize val = 4</li> </ul>"},{"location":"net-TCPConnection/#returns_11","title":"Returns","text":"<ul> <li>(U32 val , Array[U8 val] iso^)</li> </ul>"},{"location":"net-TCPConnection/#getsockopt_u32","title":"getsockopt_u32","text":"<p>[Source]</p> <p>Wrapper for TCP sockets to the <code>getsockopt(2)</code> system call where the kernel's returned option value is a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. The <code>*option_value</code> returned by the kernel converted to a Pony <code>U32</code>.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <pre><code>fun ref getsockopt_u32(\n  level: I32 val,\n  option_name: I32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_11","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_12","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#setsockopt","title":"setsockopt","text":"<p>[Source]</p> <p>General wrapper for TCP sockets to the <code>setsockopt(2)</code> system call.</p> <p>The caller is responsible for the correct size and byte contents of the <code>option</code> array for the requested <code>level</code> and <code>option_name</code>, including using the appropriate machine endian byte order.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <p>Usage example:</p> <pre><code>// connected() is a callback function for class TCPConnectionNotify\nfun ref connected(conn: TCPConnection ref) =&gt;\n  let sb = Writer\n\n  sb.u32_le(7744)             // Our desired socket buffer size\n  let sbytes = Array[U8]\n  for bs in sb.done().values() do\n    sbytes.append(bs)\n  end\n  match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n    | 0 =&gt;\n      // System call was successful\n    | let errno: U32 =&gt;\n      // System call failed\n  end\n</code></pre> <pre><code>fun ref setsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option: Array[U8 val] ref)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_12","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: Array[U8 val] ref</li> </ul>"},{"location":"net-TCPConnection/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#setsockopt_u32","title":"setsockopt_u32","text":"<p>[Source]</p> <p>General wrapper for TCP sockets to the <code>setsockopt(2)</code> system call where the kernel expects an option value of a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <pre><code>fun ref setsockopt_u32(\n  level: I32 val,\n  option_name: I32 val,\n  option: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_13","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_14","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#get_so_error","title":"get_so_error","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)</code></p> <pre><code>fun ref get_so_error()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#returns_15","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#get_so_rcvbuf","title":"get_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun ref get_so_rcvbuf()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#returns_16","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#get_so_sndbuf","title":"get_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun ref get_so_sndbuf()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#returns_17","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#get_tcp_nodelay","title":"get_tcp_nodelay","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)</code></p> <pre><code>fun ref get_tcp_nodelay()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#returns_18","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#set_so_rcvbuf","title":"set_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun ref set_so_rcvbuf(\n  bufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_14","title":"Parameters","text":"<ul> <li>bufsize: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_19","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#set_so_sndbuf","title":"set_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun ref set_so_sndbuf(\n  bufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_15","title":"Parameters","text":"<ul> <li>bufsize: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_20","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#set_tcp_nodelay","title":"set_tcp_nodelay","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)</code></p> <pre><code>fun ref set_tcp_nodelay(\n  state: Bool val)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_16","title":"Parameters","text":"<ul> <li>state: Bool val</li> </ul>"},{"location":"net-TCPConnection/#returns_21","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnectionNotify/","title":"TCPConnectionNotify","text":"<p>[Source]</p> <p>Notifications for TCP connections.</p> <p>For an example of using this class please see the documentation for the <code>TCPConnection</code> and <code>TCPListener</code> actors.</p> <pre><code>interface ref TCPConnectionNotify\n</code></pre>"},{"location":"net-TCPConnectionNotify/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPConnectionNotify/#accepted","title":"accepted","text":"<p>[Source]</p> <p>Called when a TCPConnection is accepted by a TCPListener.</p> <pre><code>fun ref accepted(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#proxy_via","title":"proxy_via","text":"<p>[Source]</p> <p>Called before before attempting to connect to the destination server In order to connect via proxy, return the host &amp; service for the proxy server.</p> <p>An implementation of this function might look like: <pre><code>let _proxy_host = \"some-proxy.example.com\"\nlet _proxy_service = \"80\"\nvar _destination_host: ( None | String )\nvar _destination_service: ( None | String )\n\nfun ref proxy_via(host: String, service: String): (String, String) =&gt;\n  _destination_host = host\n  _destination_service = service\n  ( _proxy_host, _proxy_service )\n</code></pre></p> <pre><code>fun ref proxy_via(\n  host: String val,\n  service: String val)\n: (String val , String val)\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_1","title":"Parameters","text":"<ul> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_1","title":"Returns","text":"<ul> <li>(String val , String val)</li> </ul>"},{"location":"net-TCPConnectionNotify/#connecting","title":"connecting","text":"<p>[Source]</p> <p>Called if name resolution succeeded for a TCPConnection and we are now waiting for a connection to the server to succeed. The count is the number of connections we're trying. The notifier will be informed each time the count changes, until a connection is made or connect_failed() is called.</p> <pre><code>fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_2","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>count: U32 val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#connected","title":"connected","text":"<p>[Source]</p> <p>Called when we have successfully connected to the server.</p> <pre><code>fun ref connected(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_3","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#connect_failed","title":"connect_failed","text":"<p>[Source]</p> <p>Called when we have failed to connect to all possible addresses for the server. At this point, the connection will never be established.</p> <p>It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this:</p> <pre><code>fun ref connect_failed(conn: TCPConnection ref) =&gt;\n  None\n</code></pre> <pre><code>fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_4","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#auth_failed","title":"auth_failed","text":"<p>[Source]</p> <p>A raw TCPConnection has no authentication mechanism. However, when protocols are wrapped in other protocols, this can be used to report an authentication failure in a lower level protocol (e.g. SSL).</p> <pre><code>fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_5","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#sent","title":"sent","text":"<p>[Source]</p> <p>Called when data is sent on the connection. This gives the notifier an opportunity to modify sent data before it is written. To swallow data, return an empty string.</p> <pre><code>fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_6","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_6","title":"Returns","text":"<ul> <li>(String val | Array[U8 val] val)</li> </ul>"},{"location":"net-TCPConnectionNotify/#sentv","title":"sentv","text":"<p>[Source]</p> <p>Called when multiple chunks of data are sent to the connection in a single call. This gives the notifier an opportunity to modify the sent data chunks before they are written. To swallow the send, return an empty Array[String].</p> <pre><code>fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_7","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: ByteSeqIter val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_7","title":"Returns","text":"<ul> <li>ByteSeqIter val</li> </ul>"},{"location":"net-TCPConnectionNotify/#received","title":"received","text":"<p>[Source]</p> <p>Called when new data is received on the connection. Return true if you want to continue receiving messages without yielding until you read max_size on the TCPConnection. Return false to cause the TCPConnection to yield now.</p> <p>Includes the number of times during the current behavior, that received has been called. This allows the notifier to end reads on a regular basis.</p> <pre><code>fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_8","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: Array[U8 val] iso</li> <li>times: USize val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnectionNotify/#expect","title":"expect","text":"<p>[Source]</p> <p>Called when the connection has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing (e.g. SSL).</p> <pre><code>fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_9","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>qty: USize val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"net-TCPConnectionNotify/#closed","title":"closed","text":"<p>[Source]</p> <p>Called when the connection is closed.</p> <pre><code>fun ref closed(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_10","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#throttled","title":"throttled","text":"<p>[Source]</p> <p>Called when the connection starts experiencing TCP backpressure. You should respond to this by pausing additional calls to <code>write</code> and <code>writev</code> until you are informed that pressure has been released. Failure to respond to the <code>throttled</code> notification will result in outgoing data queuing in the connection and increasing memory usage.</p> <pre><code>fun ref throttled(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_11","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#unthrottled","title":"unthrottled","text":"<p>[Source]</p> <p>Called when the connection stops experiencing TCP backpressure. Upon receiving this notification, you should feel free to start making calls to <code>write</code> and <code>writev</code> again.</p> <pre><code>fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_12","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListenAuth/","title":"TCPListenAuth","text":"<p>[Source] <pre><code>primitive val TCPListenAuth\n</code></pre></p>"},{"location":"net-TCPListenAuth/#constructors","title":"Constructors","text":""},{"location":"net-TCPListenAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPListenAuth val^\n</code></pre>"},{"location":"net-TCPListenAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val | TCPAuth val)</li> </ul>"},{"location":"net-TCPListenAuth/#returns","title":"Returns","text":"<ul> <li>TCPListenAuth val^</li> </ul>"},{"location":"net-TCPListenAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPListenAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: TCPListenAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPListenAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: TCPListenAuth val</li> </ul>"},{"location":"net-TCPListenAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPListenAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: TCPListenAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPListenAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: TCPListenAuth val</li> </ul>"},{"location":"net-TCPListenAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPListenNotify/","title":"TCPListenNotify","text":"<p>[Source]</p> <p>Notifications for TCP listeners.</p> <p>For an example of using this class, please see the documentation for the <code>TCPListener</code> actor.</p> <pre><code>interface ref TCPListenNotify\n</code></pre>"},{"location":"net-TCPListenNotify/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPListenNotify/#listening","title":"listening","text":"<p>[Source]</p> <p>Called when the listener has been bound to an address.</p> <pre><code>fun ref listening(\n  listen: TCPListener ref)\n: None val\n</code></pre>"},{"location":"net-TCPListenNotify/#parameters","title":"Parameters","text":"<ul> <li>listen: TCPListener ref</li> </ul>"},{"location":"net-TCPListenNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListenNotify/#not_listening","title":"not_listening","text":"<p>[Source]</p> <p>Called if it wasn't possible to bind the listener to an address.</p> <p>It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this:</p> <pre><code>fun ref not_listening(listen: TCPListener ref) =&gt;\n  None\n</code></pre> <pre><code>fun ref not_listening(\n  listen: TCPListener ref)\n: None val\n</code></pre>"},{"location":"net-TCPListenNotify/#parameters_1","title":"Parameters","text":"<ul> <li>listen: TCPListener ref</li> </ul>"},{"location":"net-TCPListenNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListenNotify/#closed","title":"closed","text":"<p>[Source]</p> <p>Called when the listener is closed.</p> <pre><code>fun ref closed(\n  listen: TCPListener ref)\n: None val\n</code></pre>"},{"location":"net-TCPListenNotify/#parameters_2","title":"Parameters","text":"<ul> <li>listen: TCPListener ref</li> </ul>"},{"location":"net-TCPListenNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListenNotify/#connected","title":"connected","text":"<p>[Source]</p> <p>Create a new TCPConnectionNotify to attach to a new TCPConnection for a newly established connection to the server.</p> <pre><code>fun ref connected(\n  listen: TCPListener ref)\n: TCPConnectionNotify iso^ ?\n</code></pre>"},{"location":"net-TCPListenNotify/#parameters_3","title":"Parameters","text":"<ul> <li>listen: TCPListener ref</li> </ul>"},{"location":"net-TCPListenNotify/#returns_3","title":"Returns","text":"<ul> <li>TCPConnectionNotify iso^ ?</li> </ul>"},{"location":"net-TCPListener/","title":"TCPListener","text":"<p>[Source]</p> <p>Listens for new network connections.</p> <p>The following program creates an echo server that listens for connections on port 8989 and echoes back any data it receives.</p> <pre><code>use \"net\"\n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =&gt;\n    conn.write(String.from_array(consume data))\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) =&gt;\n    None\n\nclass MyTCPListenNotify is TCPListenNotify\n  fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ =&gt;\n    MyTCPConnectionNotify\n\n  fun ref not_listening(listen: TCPListener ref) =&gt;\n    None\n\nactor Main\n  new create(env: Env) =&gt;\n    TCPListener(TCPListenAuth(env.root),\n      recover MyTCPListenNotify end, \"\", \"8989\")\n</code></pre> <pre><code>actor tag TCPListener is\n  AsioEventNotify tag\n</code></pre>"},{"location":"net-TCPListener/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"net-TCPListener/#constructors","title":"Constructors","text":""},{"location":"net-TCPListener/#create","title":"create","text":"<p>[Source]</p> <p>Listens for both IPv4 and IPv6 connections.</p> <pre><code>new tag create(\n  auth: TCPListenAuth val,\n  notify: TCPListenNotify iso,\n  host: String val = \"\",\n  service: String val = \"0\",\n  limit: USize val = 0,\n  read_buffer_size: USize val = 16384,\n  yield_after_reading: USize val = 16384,\n  yield_after_writing: USize val = 16384)\n: TCPListener tag^\n</code></pre>"},{"location":"net-TCPListener/#parameters","title":"Parameters","text":"<ul> <li>auth: TCPListenAuth val</li> <li>notify: TCPListenNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>limit: USize val = 0</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPListener/#returns","title":"Returns","text":"<ul> <li>TCPListener tag^</li> </ul>"},{"location":"net-TCPListener/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Listens for IPv4 connections.</p> <pre><code>new tag ip4(\n  auth: TCPListenAuth val,\n  notify: TCPListenNotify iso,\n  host: String val = \"\",\n  service: String val = \"0\",\n  limit: USize val = 0,\n  read_buffer_size: USize val = 16384,\n  yield_after_reading: USize val = 16384,\n  yield_after_writing: USize val = 16384)\n: TCPListener tag^\n</code></pre>"},{"location":"net-TCPListener/#parameters_1","title":"Parameters","text":"<ul> <li>auth: TCPListenAuth val</li> <li>notify: TCPListenNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>limit: USize val = 0</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPListener/#returns_1","title":"Returns","text":"<ul> <li>TCPListener tag^</li> </ul>"},{"location":"net-TCPListener/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Listens for IPv6 connections.</p> <pre><code>new tag ip6(\n  auth: TCPListenAuth val,\n  notify: TCPListenNotify iso,\n  host: String val = \"\",\n  service: String val = \"0\",\n  limit: USize val = 0,\n  read_buffer_size: USize val = 16384,\n  yield_after_reading: USize val = 16384,\n  yield_after_writing: USize val = 16384)\n: TCPListener tag^\n</code></pre>"},{"location":"net-TCPListener/#parameters_2","title":"Parameters","text":"<ul> <li>auth: TCPListenAuth val</li> <li>notify: TCPListenNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>limit: USize val = 0</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPListener/#returns_2","title":"Returns","text":"<ul> <li>TCPListener tag^</li> </ul>"},{"location":"net-TCPListener/#public-behaviours","title":"Public Behaviours","text":""},{"location":"net-TCPListener/#set_notify","title":"set_notify","text":"<p>[Source]</p> <p>Change the notifier.</p> <pre><code>be set_notify(\n  notify: TCPListenNotify iso)\n</code></pre>"},{"location":"net-TCPListener/#parameters_3","title":"Parameters","text":"<ul> <li>notify: TCPListenNotify iso</li> </ul>"},{"location":"net-TCPListener/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Stop listening.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"net-TCPListener/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPListener/#local_address","title":"local_address","text":"<p>[Source]</p> <p>Return the bound IP address.</p> <pre><code>fun box local_address()\n: NetAddress val\n</code></pre>"},{"location":"net-TCPListener/#returns_3","title":"Returns","text":"<ul> <li>NetAddress val</li> </ul>"},{"location":"net-TCPListener/#close","title":"close","text":"<p>[Source]</p> <p>Dispose of resources.</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"net-TCPListener/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPAuth/","title":"UDPAuth","text":"<p>[Source] <pre><code>primitive val UDPAuth\n</code></pre></p>"},{"location":"net-UDPAuth/#constructors","title":"Constructors","text":""},{"location":"net-UDPAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\n  from: (AmbientAuth val | NetAuth val))\n: UDPAuth val^\n</code></pre>"},{"location":"net-UDPAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val)</li> </ul>"},{"location":"net-UDPAuth/#returns","title":"Returns","text":"<ul> <li>UDPAuth val^</li> </ul>"},{"location":"net-UDPAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-UDPAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: UDPAuth val)\n: Bool val\n</code></pre>"},{"location":"net-UDPAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: UDPAuth val</li> </ul>"},{"location":"net-UDPAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-UDPAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: UDPAuth val)\n: Bool val\n</code></pre>"},{"location":"net-UDPAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: UDPAuth val</li> </ul>"},{"location":"net-UDPAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-UDPNotify/","title":"UDPNotify","text":"<p>[Source]</p> <p>Notifications for UDP connections.</p> <p>For an example of using this class please see the documentatoin for the <code>UDPSocket</code> actor.</p> <pre><code>interface ref UDPNotify\n</code></pre>"},{"location":"net-UDPNotify/#public-functions","title":"Public Functions","text":""},{"location":"net-UDPNotify/#listening","title":"listening","text":"<p>[Source]</p> <p>Called when the socket has been bound to an address.</p> <pre><code>fun ref listening(\n  sock: UDPSocket ref)\n: None val\n</code></pre>"},{"location":"net-UDPNotify/#parameters","title":"Parameters","text":"<ul> <li>sock: UDPSocket ref</li> </ul>"},{"location":"net-UDPNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPNotify/#not_listening","title":"not_listening","text":"<p>[Source]</p> <p>Called if it wasn't possible to bind the socket to an address.</p> <p>It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this:</p> <pre><code>fun ref not_listening(sock: UDPSocket ref) =&gt;\n  None\n</code></pre> <pre><code>fun ref not_listening(\n  sock: UDPSocket ref)\n: None val\n</code></pre>"},{"location":"net-UDPNotify/#parameters_1","title":"Parameters","text":"<ul> <li>sock: UDPSocket ref</li> </ul>"},{"location":"net-UDPNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPNotify/#received","title":"received","text":"<p>[Source]</p> <p>Called when new data is received on the socket.</p> <pre><code>fun ref received(\n  sock: UDPSocket ref,\n  data: Array[U8 val] iso,\n  from: NetAddress val)\n: None val\n</code></pre>"},{"location":"net-UDPNotify/#parameters_2","title":"Parameters","text":"<ul> <li>sock: UDPSocket ref</li> <li>data: Array[U8 val] iso</li> <li>from: NetAddress val</li> </ul>"},{"location":"net-UDPNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPNotify/#closed","title":"closed","text":"<p>[Source]</p> <p>Called when the socket is closed.</p> <pre><code>fun ref closed(\n  sock: UDPSocket ref)\n: None val\n</code></pre>"},{"location":"net-UDPNotify/#parameters_3","title":"Parameters","text":"<ul> <li>sock: UDPSocket ref</li> </ul>"},{"location":"net-UDPNotify/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPSocket/","title":"UDPSocket","text":"<p>[Source]</p> <p>Creates a UDP socket that can be used for sending and receiving UDP messages.</p> <p>The following examples create:</p> <ul> <li>an echo server that listens for connections and returns whatever message it   receives</li> <li>a client that connects to the server, sends a message, and prints the   message it receives in response</li> </ul> <p>The server is implemented like this:</p> <pre><code>use \"net\"\n\nclass MyUDPNotify is UDPNotify\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =&gt;\n    sock.write(consume data, from)\n\n  fun ref not_listening(sock: UDPSocket ref) =&gt;\n    None\n\nactor Main\n  new create(env: Env) =&gt;\n    UDPSocket(UDPAuth(env.root),\n      MyUDPNotify, \"\", \"8989\")\n</code></pre> <p>The client is implemented like this:</p> <pre><code>use \"net\"\n\nclass MyUDPNotify is UDPNotify\n  let _out: OutStream\n  let _destination: NetAddress\n\n  new create(\n    out: OutStream,\n    destination: NetAddress)\n  =&gt;\n    _out = out\n    _destination = destination\n\n  fun ref listening(sock: UDPSocket ref) =&gt;\n    sock.write(\"hello world\", _destination)\n\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =&gt;\n    _out.print(\"GOT:\" + String.from_array(consume data))\n    sock.dispose()\n\n  fun ref not_listening(sock: UDPSocket ref) =&gt;\n    None\n\nactor Main\n  new create(env: Env) =&gt;\n    try\n      let destination =\n        DNS.ip4(DNSAuth(env.root), \"localhost\", \"8989\")(0)?\n      UDPSocket(UDPAuth(env.root),\n        recover MyUDPNotify(env.out, consume destination) end)\n    end\n</code></pre> <pre><code>actor tag UDPSocket is\n  AsioEventNotify tag\n</code></pre>"},{"location":"net-UDPSocket/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"net-UDPSocket/#constructors","title":"Constructors","text":""},{"location":"net-UDPSocket/#create","title":"create","text":"<p>[Source]</p> <p>Listens for both IPv4 and IPv6 datagrams.</p> <pre><code>new tag create(\n  auth: UDPAuth val,\n  notify: UDPNotify iso,\n  host: String val = \"\",\n  service: String val = \"0\",\n  size: USize val = 1024)\n: UDPSocket tag^\n</code></pre>"},{"location":"net-UDPSocket/#parameters","title":"Parameters","text":"<ul> <li>auth: UDPAuth val</li> <li>notify: UDPNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>size: USize val = 1024</li> </ul>"},{"location":"net-UDPSocket/#returns","title":"Returns","text":"<ul> <li>UDPSocket tag^</li> </ul>"},{"location":"net-UDPSocket/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Listens for IPv4 datagrams.</p> <pre><code>new tag ip4(\n  auth: UDPAuth val,\n  notify: UDPNotify iso,\n  host: String val = \"\",\n  service: String val = \"0\",\n  size: USize val = 1024)\n: UDPSocket tag^\n</code></pre>"},{"location":"net-UDPSocket/#parameters_1","title":"Parameters","text":"<ul> <li>auth: UDPAuth val</li> <li>notify: UDPNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>size: USize val = 1024</li> </ul>"},{"location":"net-UDPSocket/#returns_1","title":"Returns","text":"<ul> <li>UDPSocket tag^</li> </ul>"},{"location":"net-UDPSocket/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Listens for IPv6 datagrams.</p> <pre><code>new tag ip6(\n  auth: UDPAuth val,\n  notify: UDPNotify iso,\n  host: String val = \"\",\n  service: String val = \"0\",\n  size: USize val = 1024)\n: UDPSocket tag^\n</code></pre>"},{"location":"net-UDPSocket/#parameters_2","title":"Parameters","text":"<ul> <li>auth: UDPAuth val</li> <li>notify: UDPNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>size: USize val = 1024</li> </ul>"},{"location":"net-UDPSocket/#returns_2","title":"Returns","text":"<ul> <li>UDPSocket tag^</li> </ul>"},{"location":"net-UDPSocket/#public-behaviours","title":"Public Behaviours","text":""},{"location":"net-UDPSocket/#write","title":"write","text":"<p>[Source]</p> <p>Write a single sequence of bytes.</p> <pre><code>be write(\n  data: (String val | Array[U8 val] val),\n  to: NetAddress val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_3","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> <li>to: NetAddress val</li> </ul>"},{"location":"net-UDPSocket/#writev","title":"writev","text":"<p>[Source]</p> <p>Write a sequence of sequences of bytes.</p> <pre><code>be writev(\n  data: ByteSeqIter val,\n  to: NetAddress val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_4","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> <li>to: NetAddress val</li> </ul>"},{"location":"net-UDPSocket/#set_notify","title":"set_notify","text":"<p>[Source]</p> <p>Change the notifier.</p> <pre><code>be set_notify(\n  notify: UDPNotify iso)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_5","title":"Parameters","text":"<ul> <li>notify: UDPNotify iso</li> </ul>"},{"location":"net-UDPSocket/#set_broadcast","title":"set_broadcast","text":"<p>[Source]</p> <p>Enable or disable broadcasting from this socket.</p> <pre><code>be set_broadcast(\n  state: Bool val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_6","title":"Parameters","text":"<ul> <li>state: Bool val</li> </ul>"},{"location":"net-UDPSocket/#set_multicast_interface","title":"set_multicast_interface","text":"<p>[Source]</p> <p>By default, the OS will choose which address is used to send packets bound for multicast addresses. This can be used to force a specific interface. To revert to allowing the OS to choose, call with an empty string.</p> <pre><code>be set_multicast_interface(\n  from: String val = \"\")\n</code></pre>"},{"location":"net-UDPSocket/#parameters_7","title":"Parameters","text":"<ul> <li>from: String val = \"\"</li> </ul>"},{"location":"net-UDPSocket/#set_multicast_loopback","title":"set_multicast_loopback","text":"<p>[Source]</p> <p>By default, packets sent to a multicast address will be received by the sending system if it has subscribed to that address. Disabling loopback prevents this.</p> <pre><code>be set_multicast_loopback(\n  loopback: Bool val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_8","title":"Parameters","text":"<ul> <li>loopback: Bool val</li> </ul>"},{"location":"net-UDPSocket/#set_multicast_ttl","title":"set_multicast_ttl","text":"<p>[Source]</p> <p>Set the TTL for multicast sends. Defaults to 1.</p> <pre><code>be set_multicast_ttl(\n  ttl: U8 val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_9","title":"Parameters","text":"<ul> <li>ttl: U8 val</li> </ul>"},{"location":"net-UDPSocket/#multicast_join","title":"multicast_join","text":"<p>[Source]</p> <p>Add a multicast group. This can be limited to packets arriving on a specific interface.</p> <pre><code>be multicast_join(\n  group: String val,\n  to: String val = \"\")\n</code></pre>"},{"location":"net-UDPSocket/#parameters_10","title":"Parameters","text":"<ul> <li>group: String val</li> <li>to: String val = \"\"</li> </ul>"},{"location":"net-UDPSocket/#multicast_leave","title":"multicast_leave","text":"<p>[Source]</p> <p>Drop a multicast group. This can be limited to packets arriving on a specific interface. No attempt is made to check that this socket has previously added this group.</p> <pre><code>be multicast_leave(\n  group: String val,\n  to: String val = \"\")\n</code></pre>"},{"location":"net-UDPSocket/#parameters_11","title":"Parameters","text":"<ul> <li>group: String val</li> <li>to: String val = \"\"</li> </ul>"},{"location":"net-UDPSocket/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Stop listening.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"net-UDPSocket/#public-functions","title":"Public Functions","text":""},{"location":"net-UDPSocket/#local_address","title":"local_address","text":"<p>[Source]</p> <p>Return the bound IP address.</p> <pre><code>fun box local_address()\n: NetAddress val\n</code></pre>"},{"location":"net-UDPSocket/#returns_3","title":"Returns","text":"<ul> <li>NetAddress val</li> </ul>"},{"location":"net-UDPSocket/#getsockopt","title":"getsockopt","text":"<p>[Source]</p> <p>General wrapper for UDP sockets to the <code>getsockopt(2)</code> system call.</p> <p>The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. An <code>Array[U8]</code> of data returned by the system call's <code>void *</code>    4th argument.  Its size is specified by the kernel via the    system call's <code>sockopt_len_t *</code> 5th argument.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <p>Usage example:</p> <pre><code>// listening() is a callback function for class UDPNotify\nfun ref listening(sock: UDPSocket ref) =&gt;\n  match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n    | (0, let gbytes: Array[U8] iso) =&gt;\n      try\n        let br = Reader.create().&gt;append(consume gbytes)\n        ifdef littleendian then\n          let buffer_size = br.u32_le()?\n        else\n          let buffer_size = br.u32_be()?\n        end\n      end\n    | (let errno: U32, _) =&gt;\n      // System call failed\n  end\n</code></pre> <pre><code>fun ref getsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option_max_size: USize val = 4)\n: (U32 val , Array[U8 val] iso^)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_12","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option_max_size: USize val = 4</li> </ul>"},{"location":"net-UDPSocket/#returns_4","title":"Returns","text":"<ul> <li>(U32 val , Array[U8 val] iso^)</li> </ul>"},{"location":"net-UDPSocket/#getsockopt_u32","title":"getsockopt_u32","text":"<p>[Source]</p> <p>Wrapper for UDP sockets to the <code>getsockopt(2)</code> system call where the kernel's returned option value is a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. The <code>*option_value</code> returned by the kernel converted to a Pony <code>U32</code>.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <pre><code>fun ref getsockopt_u32(\n  level: I32 val,\n  option_name: I32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_13","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_5","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-UDPSocket/#setsockopt","title":"setsockopt","text":"<p>[Source]</p> <p>General wrapper for UDP sockets to the <code>setsockopt(2)</code> system call.</p> <p>The caller is responsible for the correct size and byte contents of the <code>option</code> array for the requested <code>level</code> and <code>option_name</code>, including using the appropriate CPU endian byte order.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <p>Usage example:</p> <pre><code>// listening() is a callback function for class UDPNotify\nfun ref listening(sock: UDPSocket ref) =&gt;\n  let sb = Writer\n\n  sb.u32_le(7744)             // Our desired socket buffer size\n  let sbytes = Array[U8]\n  for bs in sb.done().values() do\n    sbytes.append(bs)\n  end\n  match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n    | 0 =&gt;\n      // System call was successful\n    | let errno: U32 =&gt;\n      // System call failed\n  end\n</code></pre> <pre><code>fun ref setsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option: Array[U8 val] ref)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_14","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: Array[U8 val] ref</li> </ul>"},{"location":"net-UDPSocket/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#setsockopt_u32","title":"setsockopt_u32","text":"<p>[Source]</p> <p>Wrapper for UDP sockets to the <code>setsockopt(2)</code> system call where the kernel expects an option value of a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <pre><code>fun ref setsockopt_u32(\n  level: I32 val,\n  option_name: I32 val,\n  option: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_15","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: U32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#get_so_error","title":"get_so_error","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)</code></p> <pre><code>fun ref get_so_error()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#returns_8","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-UDPSocket/#get_so_rcvbuf","title":"get_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun ref get_so_rcvbuf()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#returns_9","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-UDPSocket/#get_so_sndbuf","title":"get_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun ref get_so_sndbuf()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#returns_10","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-UDPSocket/#set_ip_multicast_loop","title":"set_ip_multicast_loop","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...)</code></p> <pre><code>fun ref set_ip_multicast_loop(\n  loopback: Bool val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_16","title":"Parameters","text":"<ul> <li>loopback: Bool val</li> </ul>"},{"location":"net-UDPSocket/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#set_ip_multicast_ttl","title":"set_ip_multicast_ttl","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...)</code></p> <pre><code>fun ref set_ip_multicast_ttl(\n  ttl: U8 val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_17","title":"Parameters","text":"<ul> <li>ttl: U8 val</li> </ul>"},{"location":"net-UDPSocket/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#set_so_broadcast","title":"set_so_broadcast","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...)</code></p> <pre><code>fun ref set_so_broadcast(\n  state: Bool val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_18","title":"Parameters","text":"<ul> <li>state: Bool val</li> </ul>"},{"location":"net-UDPSocket/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#set_so_rcvbuf","title":"set_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun ref set_so_rcvbuf(\n  bufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_19","title":"Parameters","text":"<ul> <li>bufsize: U32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_14","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#set_so_sndbuf","title":"set_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun ref set_so_sndbuf(\n  bufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_20","title":"Parameters","text":"<ul> <li>bufsize: U32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_15","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"pony_test--index/","title":"PonyTest package","text":"<p>The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests.</p> <p>To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are:</p> <ul> <li>builtin</li> <li>time</li> <li>collections</li> </ul> <p>Each unit test is a class, with a single test function. By default all tests run concurrently.</p> <p>Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail.</p> <p>When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function.</p>"},{"location":"pony_test--index/#example-program","title":"Example program","text":"<p>To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package.</p> <p>The following is a complete program with 2 trivial tests.</p> <pre><code>use \"pony_test\"\n\nactor Main is TestList\n  new create(env: Env) =&gt;\n    PonyTest(env, this)\n\n  new make() =&gt;\n    None\n\n  fun tag tests(test: PonyTest) =&gt;\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String =&gt; \"addition\"\n\n  fun apply(h: TestHelper) =&gt;\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String =&gt; \"subtraction\"\n\n  fun apply(h: TestHelper) =&gt;\n    h.assert_eq[U32](2, 4 - 2)\n</code></pre> <p>The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it.</p> <p>Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks.</p>"},{"location":"pony_test--index/#test-names","title":"Test names","text":"<p>Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code.</p> <p>Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests.</p> <p>You can skip any tests whose names start with a given string by using the <code>--exclude=[prefix]</code> command line option.</p> <p>You can run only tests whose names start with a given string by using the <code>--only=[prefix]</code> command line option.</p>"},{"location":"pony_test--index/#aggregation","title":"Aggregation","text":"<p>Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together.</p> <p>This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages <code>foo</code> and <code>bar</code>.</p> <pre><code>use \"pony_test\"\nuse bar = \"bar\"\nuse foo = \"foo\"\n\nactor Main is TestList\n  new create(env: Env) =&gt;\n    PonyTest(env, this)\n\n  new make() =&gt;\n    None\n\n  fun tag tests(test: PonyTest) =&gt;\n    bar.Main.make().tests(test)\n    foo.Main.make().tests(test)\n</code></pre> <p>Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists.</p>"},{"location":"pony_test--index/#long-tests","title":"Long tests","text":"<p>Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors.</p> <p>Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper.</p> <p>The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called.</p> <p>Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported.</p> <p>On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so.</p> <p>Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful.</p> <p>Timeouts should not be used as the standard method of detecting if a test has failed.</p>"},{"location":"pony_test--index/#exclusion-groups","title":"Exclusion groups","text":"<p>By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group.</p> <p>No tests that are in the same exclusion group will be run concurrently.</p> <p>Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests.</p> <p>The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use.</p>"},{"location":"pony_test--index/#labels","title":"Labels","text":"<p>Test can have label. Labels are used to filter which tests are run, by setting command line argument <code>--label=[some custom label]</code>. It can be used to separate unit tests from integration tests.</p> <p>By default label is empty. You can set it up by overriding <code>label(): String</code> method in unit test.</p> <pre><code>use \"pony_test\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String =&gt; \"_I8AddTest\"\n  fun label(): String =&gt; \"simple\"\n  fun apply(h: TestHelper) =&gt;\n    h.assert_eq[I8](1, 1)\n</code></pre>"},{"location":"pony_test--index/#setting-up-and-tearing-down-a-test-environment","title":"Setting up and tearing down a test environment","text":""},{"location":"pony_test--index/#set-up","title":"Set Up","text":"<p>Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up().</p> <p>set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env.</p>"},{"location":"pony_test--index/#tear-down","title":"Tear Down","text":"<p>Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test.</p> <p>The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns.</p> <p>When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test.</p> <p>The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down.</p>"},{"location":"pony_test--index/#example","title":"Example","text":"<p>The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself:</p> <pre><code>use \"pony_test\"\nuse \"files\"\n\nclass iso TempDirTest\n  var tmp_dir: (FilePath | None) = None\n\n  fun name(): String =&gt; \"temp-dir\"\n\n  fun ref set_up(h: TestHelper)? =&gt;\n    tmp_dir = FilePath.mkdtemp(FileAuth(h.env.root), \"temp-dir\")?\n\n  fun ref tear_down(h: TestHelper) =&gt;\n    try\n      (tmp_dir as FilePath).remove()\n    end\n\n  fun apply(h: TestHelper)? =&gt;\n    let dir = tmp_dir as FilePath\n    // do something inside the temporary directory\n</code></pre>"},{"location":"pony_test--index/#public-types","title":"Public Types","text":"<ul> <li>interface ITest</li> <li>actor PonyTest</li> <li>class TestHelper</li> <li>trait TestList</li> <li>trait UnitTest</li> </ul>"},{"location":"pony_test-ITest/","title":"ITest","text":"<p>[Source] <pre><code>interface ref ITest\n</code></pre></p>"},{"location":"pony_test-ITest/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-ITest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: None val ?\n</code></pre>"},{"location":"pony_test-ITest/#returns","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-PonyTest/","title":"PonyTest","text":"<p>[Source]</p> <p>Main test framework actor that organises tests, collates information and prints results.</p> <pre><code>actor tag PonyTest\n</code></pre>"},{"location":"pony_test-PonyTest/#constructors","title":"Constructors","text":""},{"location":"pony_test-PonyTest/#create","title":"create","text":"<p>[Source]</p> <p>Create a PonyTest object and use it to run the tests from the given TestList</p> <pre><code>new tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>list: TestList tag</li> </ul>"},{"location":"pony_test-PonyTest/#returns","title":"Returns","text":"<ul> <li>PonyTest tag^</li> </ul>"},{"location":"pony_test-PonyTest/#public-behaviours","title":"Public Behaviours","text":""},{"location":"pony_test-PonyTest/#apply","title":"apply","text":"<p>[Source]</p> <p>Run the given test, subject to our filters and options.</p> <pre><code>be apply(\n  test: UnitTest iso)\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters_1","title":"Parameters","text":"<ul> <li>test: UnitTest iso</li> </ul>"},{"location":"pony_test-TestHelper/","title":"TestHelper","text":"<p>[Source]</p> <p>Per unit test class that provides control, logging and assertion functions.</p> <p>Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction.</p> <p>The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails.</p> <p>All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed.</p> <pre><code>class val TestHelper\n</code></pre>"},{"location":"pony_test-TestHelper/#public-fields","title":"Public fields","text":""},{"location":"pony_test-TestHelper/#let-env-env-val","title":"let env: Env val","text":"<p>[Source]</p> <p>The process environment.</p> <p>This is useful for getting the root authority in order to access the filesystem (See files) or the network (See net) in your tests.</p>"},{"location":"pony_test-TestHelper/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-TestHelper/#log","title":"log","text":"<p>[Source]</p> <p>Log the given message.</p> <p>The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported.</p> <p>Logs are printed one test at a time to avoid interleaving log lines from concurrent tests.</p> <pre><code>fun box log(\n  msg: String val,\n  verbose: Bool val = false)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters","title":"Parameters","text":"<ul> <li>msg: String val</li> <li>verbose: Bool val = false</li> </ul>"},{"location":"pony_test-TestHelper/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#fail","title":"fail","text":"<p>[Source]</p> <p>Flag the test as having failed.</p> <pre><code>fun box fail(\n  msg: String val = \"Test failed\")\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_1","title":"Parameters","text":"<ul> <li>msg: String val = \"Test failed\"</li> </ul>"},{"location":"pony_test-TestHelper/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_true","title":"assert_true","text":"<p>[Source]</p> <p>Assert that the given expression is true.</p> <pre><code>fun box assert_true(\n  actual: Bool val,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_2","title":"Parameters","text":"<ul> <li>actual: Bool val</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_false","title":"assert_false","text":"<p>[Source]</p> <p>Assert that the given expression is false.</p> <pre><code>fun box assert_false(\n  actual: Bool val,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_3","title":"Parameters","text":"<ul> <li>actual: Bool val</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_error","title":"assert_error","text":"<p>[Source]</p> <p>Assert that the given test function throws an error when run.</p> <pre><code>fun box assert_error(\n  test: ITest box,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_4","title":"Parameters","text":"<ul> <li>test: ITest box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_no_error","title":"assert_no_error","text":"<p>[Source]</p> <p>Assert that the gived test function does not throw an error when run.</p> <pre><code>fun box assert_no_error(\n  test: ITest box,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_5","title":"Parameters","text":"<ul> <li>test: ITest box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_isa-a","title":"assert_is[A: A]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions resolve to the same instance</p> <pre><code>fun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_6","title":"Parameters","text":"<ul> <li>expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_eqa-equatablea-read-stringable-read","title":"assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions are equal.</p> <pre><code>fun box assert_eq[A: (Equatable[A] #read &amp; Stringable #read)](\n  expect: A,\n  actual: A,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_7","title":"Parameters","text":"<ul> <li>expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_isnta-a","title":"assert_isnt[A: A]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions resolve to different instances.</p> <pre><code>fun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_8","title":"Parameters","text":"<ul> <li>not_expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_nea-equatablea-read-stringable-read","title":"assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions are not equal.</p> <pre><code>fun box assert_ne[A: (Equatable[A] #read &amp; Stringable #read)](\n  not_expect: A,\n  actual: A,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_9","title":"Parameters","text":"<ul> <li>not_expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_array_eqa-equatablea-read-stringable-read","title":"assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the contents of the 2 given ReadSeqs are equal.</p> <p>The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two <code>Array[U8]</code>, you should call this method as follows:</p> <pre><code>fun apply(h: TestHelper) =&gt;\n  let a: Array[U8] = [1; 2; 3]\n  let b: Array[U8] = [1; 2; 3]\n  h.assert_array_eq[U8](a, b)\n</code></pre> <pre><code>fun box assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_10","title":"Parameters","text":"<ul> <li>expect: ReadSeq[A] box</li> <li>actual: ReadSeq[A] box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_array_eq_unordereda-equatablea-read-stringable-read","title":"assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the contents of the 2 given ReadSeqs are equal ignoring order.</p> <p>The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two <code>Array[U8]</code>, you should call this method as follows:</p> <pre><code>fun apply(h: TestHelper) =&gt;\n  let a: Array[U8] = [1; 2; 3]\n  let b: Array[U8] = [1; 3; 2]\n  h.assert_array_eq_unordered[U8](a, b)\n</code></pre> <pre><code>fun box assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = \"\",\n  loc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_11","title":"Parameters","text":"<ul> <li>expect: ReadSeq[A] box</li> <li>actual: ReadSeq[A] box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#long_test","title":"long_test","text":"<p>[Source]</p> <p>Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds.</p> <pre><code>fun box long_test(\n  timeout: U64 val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_12","title":"Parameters","text":"<ul> <li>timeout: U64 val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#complete","title":"complete","text":"<p>[Source]</p> <p>MUST be called by each long test to indicate the test has finished, unless a timeout occurs. If you are using expect_action() then complete(true) will be called once the last expected action has been completed via complete_action().</p> <p>The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter.</p> <p>Once this is called tear_down() may be called at any time.</p> <pre><code>fun box complete(\n  success: Bool val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_13","title":"Parameters","text":"<ul> <li>success: Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#expect_action","title":"expect_action","text":"<p>[Source]</p> <p>Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test.</p> <p>This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method.</p> <p>The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test.</p> <pre><code>fun box expect_action(\n  name: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_14","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#complete_action","title":"complete_action","text":"<p>[Source]</p> <p>MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails.</p> <p>Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished.</p> <p>Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed.</p> <pre><code>fun box complete_action(\n  name: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_15","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#fail_action","title":"fail_action","text":"<p>[Source]</p> <p>Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions.</p> <p>The name of the failed action will be included in the failure output.</p> <p>Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test.</p> <pre><code>fun box fail_action(\n  name: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_16","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#dispose_when_done","title":"dispose_when_done","text":"<p>[Source]</p> <p>Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails.</p> <p>If the test is already tearing down, the actor will be disposed immediately.</p> <pre><code>fun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_17","title":"Parameters","text":"<ul> <li>disposable: DisposableActor tag</li> </ul>"},{"location":"pony_test-TestHelper/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestList/","title":"TestList","text":"<p>[Source]</p> <p>Source of unit tests for a PonyTest object. See package doc string for further information and example use.</p> <pre><code>trait ref TestList\n</code></pre>"},{"location":"pony_test-TestList/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-TestList/#tests","title":"tests","text":"<p>[Source]</p> <p>Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: <pre><code>fun tests(test: PonyTest) =&gt;\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)\n</code></pre></p> <pre><code>fun tag tests(\n  test: PonyTest tag)\n: None val\n</code></pre>"},{"location":"pony_test-TestList/#parameters","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"pony_test-TestList/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/","title":"UnitTest","text":"<p>[Source]</p> <p>Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options.</p> <pre><code>trait ref UnitTest\n</code></pre>"},{"location":"pony_test-UnitTest/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-UnitTest/#name","title":"name","text":"<p>[Source]</p> <p>Report the test name, which is used when printing test results and on the command line to select tests to run.</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-UnitTest/#exclusion_group","title":"exclusion_group","text":"<p>[Source]</p> <p>Report the test exclusion group, returning an empty string for none. The default body returns an empty string.</p> <pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-UnitTest/#apply","title":"apply","text":"<p>[Source]</p> <p>Run the test. Raising an error is interpreted as a test failure.</p> <pre><code>fun ref apply(\n  h: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_2","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-UnitTest/#timed_out","title":"timed_out","text":"<p>[Source]</p> <p>Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing.</p> <pre><code>fun ref timed_out(\n  h: TestHelper val)\n: None val\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/#set_up","title":"set_up","text":"<p>[Source]</p> <p>Set up the testing environment before a test method is called. Default is to do nothing.</p> <pre><code>fun ref set_up(\n  h: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_4","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-UnitTest/#tear_down","title":"tear_down","text":"<p>[Source]</p> <p>Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing.</p> <pre><code>fun ref tear_down(\n  h: TestHelper val)\n: None val\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/#label","title":"label","text":"<p>[Source]</p> <p>Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels.</p> <pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"promises--index/","title":"Promises Package","text":"<p>A <code>Promise</code> represents a value that will be available at a later time. <code>Promise</code>s can either be fulfilled with a value or rejected. Any number of function handlers can be added to the <code>Promise</code>, to be called when the <code>Promise</code> is fulfilled or rejected. These handlers themselves are also wrapped in <code>Promise</code>s so that they can be chained together in order for the fulfilled value of one <code>Promise</code> to be used to compute a value which will be used to fulfill the next <code>Promise</code> in the chain, or so that if the <code>Promise</code> is rejected then the subsequent reject functions will also be called. The input and output types of a fulfill handler do not have to be the same, so a chain of fulfill handlers can transform the original value into something new.</p> <p>Fulfill and reject handlers can either be specified as classes that implment the <code>Fulfill</code> and <code>Reject</code> interfaces, or as functions with the same signatures as the <code>apply</code> methods in <code>Fulfill</code> and <code>Reject</code>.</p> <p>In the following code, the fulfillment of the <code>Promise</code> causes the execution of several fulfillment functions. The output is:</p> <pre><code>fulfilled + foo\nfulfilled + bar\nfulfilled + baz\n</code></pre> <pre><code>use \"promises\"\n\nclass PrintFulfill is Fulfill[String, String]\n  let _env: Env\n  let _msg: String\n  new create(env: Env, msg: String) =&gt;\n    _env = env\n    _msg = msg\n  fun apply(s: String): String =&gt;\n    _env.out.print(\" + \".join([s; _msg].values()))\n    s\n\nactor Main\n  new create(env: Env) =&gt;\n     let promise = Promise[String]\n     promise.next[String](recover PrintFulfill(env, \"foo\") end)\n     promise.next[String](recover PrintFulfill(env, \"bar\") end)\n     promise.next[String](recover PrintFulfill(env, \"baz\") end)\n     promise(\"fulfilled\")\n</code></pre> <p>In the following code, the fulfill functions are chained together so that the fulfilled value of the first one is used to generate a value which fulfills the second one, which in turn is used to compute a value which fulfills the third one, which in turn is used to compute a value which fulfills the fourth one. The output is the average length of the words passed on the command line or <code>0</code> if there are no command line arguments.</p> <pre><code>use \"promises\"\n\nprimitive Computation\n  fun tag string_to_strings(s: String): Array[String] val =&gt;\n    recover s.split() end\n  fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val =&gt;\n    recover\n      let len = Array[USize]\n      for s in sa.values() do\n        len.push(s.size())\n      end\n      len\n    end\n  fun tag sizes_to_avg(sza: Array[USize] val): USize =&gt;\n    var acc = USize(0)\n    for sz in sza.values() do\n      acc = acc + sz\n    end\n    acc / sza.size()\n  fun tag output(env: Env, sz: USize): None =&gt;\n    env.out.print(sz.string())\n\nactor Main\n  new create(env: Env) =&gt;\n     let promise = Promise[String]\n     promise.next[Array[String] val](recover Computation~string_to_strings() end)\n            .next[Array[USize] val](recover Computation~strings_to_sizes() end)\n            .next[USize](recover Computation~sizes_to_avg() end)\n            .next[None](recover Computation~output(env) end)\n     promise(\" \".join(env.args.slice(1).values()))\n</code></pre>"},{"location":"promises--index/#public-types","title":"Public Types","text":"<ul> <li>interface Fulfill</li> <li>class FulfillIdentity</li> <li>actor Promise</li> <li>primitive Promises</li> <li>interface Reject</li> <li>class RejectAlways</li> </ul>"},{"location":"promises-Fulfill/","title":"Fulfill[A: Any #share, B: Any #share]","text":"<p>[Source]</p> <p>A function from A to B that is called when a promise is fulfilled.</p> <pre><code>interface iso Fulfill[A: Any #share, B: Any #share]\n</code></pre>"},{"location":"promises-Fulfill/#public-functions","title":"Public Functions","text":""},{"location":"promises-Fulfill/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\n  value: A)\n: B ?\n</code></pre>"},{"location":"promises-Fulfill/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-Fulfill/#returns","title":"Returns","text":"<ul> <li>B ?</li> </ul>"},{"location":"promises-FulfillIdentity/","title":"FulfillIdentity[A: Any #share]","text":"<p>[Source]</p> <p>An identity function for fulfilling promises.</p> <pre><code>class iso FulfillIdentity[A: Any #share]\n</code></pre>"},{"location":"promises-FulfillIdentity/#constructors","title":"Constructors","text":""},{"location":"promises-FulfillIdentity/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: FulfillIdentity[A] iso^\n</code></pre>"},{"location":"promises-FulfillIdentity/#returns","title":"Returns","text":"<ul> <li>FulfillIdentity[A] iso^</li> </ul>"},{"location":"promises-FulfillIdentity/#public-functions","title":"Public Functions","text":""},{"location":"promises-FulfillIdentity/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\n  value: A)\n: A\n</code></pre>"},{"location":"promises-FulfillIdentity/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-FulfillIdentity/#returns_1","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"promises-Promise/","title":"Promise[A: Any #share]","text":"<p>[Source]</p> <p>A promise to eventually produce a result of type A. This promise can either be fulfilled or rejected.</p> <p>Any number of promises can be chained after this one.</p> <pre><code>actor tag Promise[A: Any #share]\n</code></pre>"},{"location":"promises-Promise/#constructors","title":"Constructors","text":""},{"location":"promises-Promise/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create()\n: Promise[A] tag^\n</code></pre>"},{"location":"promises-Promise/#returns","title":"Returns","text":"<ul> <li>Promise[A] tag^</li> </ul>"},{"location":"promises-Promise/#public-behaviours","title":"Public Behaviours","text":""},{"location":"promises-Promise/#apply","title":"apply","text":"<p>[Source]</p> <p>Fulfill the promise.</p> <pre><code>be apply(\n  value: A)\n</code></pre>"},{"location":"promises-Promise/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-Promise/#reject","title":"reject","text":"<p>[Source]</p> <p>Reject the promise.</p> <pre><code>be reject()\n</code></pre>"},{"location":"promises-Promise/#public-functions","title":"Public Functions","text":""},{"location":"promises-Promise/#nextb-any-share","title":"next[B: Any #share]","text":"<p>[Source]</p> <p>Chain a promise after this one.</p> <p>When this promise is fulfilled, the result of type A is passed to the fulfill function, generating in an intermediate result of type B. This is then used to fulfill the next promise in the chain.</p> <p>If there is no fulfill function, or if the fulfill function raises an error, then the next promise in the chain will be rejected.</p> <p>If this promise is rejected, this step's reject function is called with no input, generating an intermediate result of type B which is used to fulfill the next promise in the chain.</p> <p>If there is no reject function, of if the reject function raises an error, then the next promise in the chain will be rejected.</p> <pre><code>fun tag next[B: Any #share](\n  fulfill: Fulfill[A, B] iso,\n  rejected: Reject[B] iso = qualify)\n: Promise[B] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_1","title":"Parameters","text":"<ul> <li>fulfill: Fulfill[A, B] iso</li> <li>rejected: Reject[B] iso = qualify</li> </ul>"},{"location":"promises-Promise/#returns_1","title":"Returns","text":"<ul> <li>Promise[B] tag</li> </ul>"},{"location":"promises-Promise/#flatten_nextb-any-share","title":"flatten_next[B: Any #share]","text":"<p>[Source]</p> <p>Chain a promise after this one and unwrap the promise returned from this one.</p> <p><code>flatten_next</code> is a companion to <code>next</code>. It operates in an identical fashion except for the type of the fulfilled promise. Whereas <code>next</code> takes a function that returns a type <code>B</code>, <code>flatten_next</code> takes a function that returns <code>Promise[B]</code>.</p> <p>Why is <code>flatten_next</code> valuable given that next could take a <code>B</code> that is of a type like <code>Promise[String]</code>? Let's start with some code to demonstrate the problem that arises when returning <code>Promise[Promise[B]]</code> from <code>next</code>.</p> <p>Let's say we have a library for accessing the GitHub REST API:</p> <pre><code>class GitHub\n  new create(personal_access_token: String)\n\n  fun get_repo(repo: String): Promise[Repository]\n\nclass Repository\n  fun get_issue(number: I64): Promise[Issue]\n\nclass Issue\n  fun title(): String\n</code></pre> <p>And we want to use this promise based API to look up the title of an issue. Without <code>flatten_next</code>, we could attempt to do the following using <code>next</code>:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    let repo: Promise[Repository] =\n      GitHub(\"my token\").get_repo(\"ponylang/ponyc\")\n\n    //\n    // do something with the repo once the promise is fulfilled\n    // in our case, get the issue\n    //\n\n    let issue = Promise[Promise[Issue]] =\n      repo.next[Promise[Issue]](FetchIssue~apply(1))\n\n    // once we get the issue, print the title\n    issue.next[None](PrintIssueTitle~apply(env.out))\n\nprimitive FetchIssue\n  fun apply(number: I64, repo: Repository): Promise[Issue] =&gt;\n    repo.get_issue(number)\n\nprimitive PrintIssueTitle\n  fun apply(out: OutStream, issue: Promise[Issue]) =&gt;\n    // O NO! We can't print the title\n    // We don't have an issue, we have a promise for an issue\n</code></pre> <p>Take a look at what happens in the example, when we get to <code>PrintIssueTitle</code>, we can't print anything because we \"don't have anything\". In order to print the issue title, we need an <code>Issue</code> not a <code>Promise[Issue]</code>.</p> <p>We could solve this by doing something like this:</p> <pre><code>primitive PrintIssueTitle\n  fun apply(out: OutStream, issue: Promise[Issue]) =&gt;\n    issue.next[None](ActuallyPrintIssueTitle~apply(out))\n\nprimitive ActuallyPrintIssueTitle\n  fun apply(out: OutStream, issue: Issue) =&gt;\n    out.print(issue.title())\n</code></pre> <p>That will work, however, it is kind of awful. When looking at:</p> <pre><code>    let repo: Promise[Repoository] =\n      GitHub(\"my token\").get_repo(\"ponylang/ponyc\")\n    let issue = Promise[Promise[Issue]] =\n      repo.next[Promise[Issue]](FetchIssue~apply(1))\n    issue.next[None](PrintIssueTitle~apply(env.out))\n</code></pre> <p>it can be hard to follow what is going on. We can only tell what is happening because we gave <code>PrintIssueTitle</code> a very misleading name; it doesn't print an issue title.</p> <p><code>flatten_next</code> addresses the problem of \"we want the <code>Issue</code>, not the intermediate <code>Promise</code>\". <code>flatten_next</code> takes an intermediate promise and unwraps it into the fulfilled type. You get to write your promise chain without having to worry about intermediate promises.</p> <p>Updated to use <code>flatten_next</code>, our API example becomes:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    let repo: Promise[Repository] =\n      GitHub(\"my token\").get_repo(\"ponylang/ponyc\")\n\n    let issue = Promise[Issue] =\n      repo.flatten_next[Issue](FetchIssue~apply(1))\n\n    issue.next[None](PrintIssueTitle~apply(env.out))\n\nprimitive FetchIssue\n  fun apply(number: I64, repo: Repository): Promise[Issue] =&gt;\n    repo.get_issue(number)\n\nprimitive PrintIssueTitle\n  fun apply(out: OutStream, issue: Issue) =&gt;\n    out.print(issue.title())\n</code></pre> <p>Our promise <code>Issue</code>, is no longer a <code>Promise[Promise[Issue]]</code>. By using <code>flatten_next</code>, we have a much more manageable <code>Promise[Issue]</code> instead.</p> <p>Other than unwrapping promises for you, <code>flatten_next</code> otherwise acts the same as <code>next</code> so all the same rules apply to fulfillment and rejection.</p> <pre><code>fun tag flatten_next[B: Any #share](\n  fulfill: Fulfill[A, Promise[B] tag] iso,\n  rejected: Reject[Promise[B] tag] iso = qualify)\n: Promise[B] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_2","title":"Parameters","text":"<ul> <li>fulfill: Fulfill[A, Promise[B] tag] iso</li> <li>rejected: Reject[Promise[B] tag] iso = qualify</li> </ul>"},{"location":"promises-Promise/#returns_2","title":"Returns","text":"<ul> <li>Promise[B] tag</li> </ul>"},{"location":"promises-Promise/#addoptional-b-any-share","title":"add[optional B: Any #share]","text":"<p>[Source]</p> <p>Add two promises into one promise that returns the result of both when they are fulfilled. If either of the promises is rejected then the new promise is also rejected.</p> <pre><code>fun tag add[optional B: Any #share](\n  p: Promise[B] tag)\n: Promise[(A , B)] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_3","title":"Parameters","text":"<ul> <li>p: Promise[B] tag</li> </ul>"},{"location":"promises-Promise/#returns_3","title":"Returns","text":"<ul> <li>Promise[(A , B)] tag</li> </ul>"},{"location":"promises-Promise/#join","title":"join","text":"<p>[Source]</p> <p>Create a promise that is fulfilled when the receiver and all promises in the given iterator are fulfilled. If the receiver or any promise in the sequence is rejected then the new promise is also rejected.</p> <p>Join <code>p1</code> and <code>p2</code> with an existing promise, <code>p3</code>. <pre><code>use \"promises\"\n\nactor Main\n  new create(env: Env) =&gt;\n\n    let p1 = Promise[String val]\n    let p2 = Promise[String val]\n    let p3 = Promise[String val]\n\n    p3.join([p1; p2].values())\n      .next[None]({(a: Array[String val] val) =&gt;\n        for s in a.values() do\n          env.out.print(s)\n        end\n      })\n\n    p2(\"second\")\n    p3(\"third\")\n    p1(\"first\")\n</code></pre></p> <pre><code>fun tag join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_4","title":"Parameters","text":"<ul> <li>ps: Iterator[Promise[A] tag] ref</li> </ul>"},{"location":"promises-Promise/#returns_4","title":"Returns","text":"<ul> <li>Promise[Array[A] val] tag</li> </ul>"},{"location":"promises-Promise/#select","title":"select","text":"<p>[Source]</p> <p>Return a promise that is fulfilled when either promise is fulfilled, resulting in a tuple of its value and the other promise.</p> <pre><code>fun tag select(\n  p: Promise[A] tag)\n: Promise[(A , Promise[A] tag)] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_5","title":"Parameters","text":"<ul> <li>p: Promise[A] tag</li> </ul>"},{"location":"promises-Promise/#returns_5","title":"Returns","text":"<ul> <li>Promise[(A , Promise[A] tag)] tag</li> </ul>"},{"location":"promises-Promise/#timeout","title":"timeout","text":"<p>[Source]</p> <p>Reject the promise after the given expiration in nanoseconds.</p> <pre><code>fun tag timeout(\n  expiration: U64 val)\n: None val\n</code></pre>"},{"location":"promises-Promise/#parameters_6","title":"Parameters","text":"<ul> <li>expiration: U64 val</li> </ul>"},{"location":"promises-Promise/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"promises-Promises/","title":"Promises[A: Any #share]","text":"<p>[Source] <pre><code>primitive val Promises[A: Any #share]\n</code></pre></p>"},{"location":"promises-Promises/#constructors","title":"Constructors","text":""},{"location":"promises-Promises/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Promises[A] val^\n</code></pre>"},{"location":"promises-Promises/#returns","title":"Returns","text":"<ul> <li>Promises[A] val^</li> </ul>"},{"location":"promises-Promises/#public-functions","title":"Public Functions","text":""},{"location":"promises-Promises/#join","title":"join","text":"<p>[Source]</p> <p>Create a promise that is fulfilled when all promises in the given sequence are fulfilled. If any promise in the sequence is rejected then the new promise is also rejected. The order that values appear in the final array is based on when each promise is fulfilled and not the order that they are given.</p> <p>Join three existing promises to make a fourth. <pre><code>use \"promises\"\n\nactor Main\n  new create(env: Env) =&gt;\n\n    let p1 = Promise[String val]\n    let p2 = Promise[String val]\n    let p3 = Promise[String val]\n\n    Promises[String val].join([p1; p2; p3].values())\n      .next[None]({(a: Array[String val] val) =&gt;\n        for s in a.values() do\n          env.out.print(s)\n        end\n      })\n\n    p2(\"second\")\n    p3(\"third\")\n    p1(\"first\")\n</code></pre></p> <pre><code>fun box join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag\n</code></pre>"},{"location":"promises-Promises/#parameters","title":"Parameters","text":"<ul> <li>ps: Iterator[Promise[A] tag] ref</li> </ul>"},{"location":"promises-Promises/#returns_1","title":"Returns","text":"<ul> <li>Promise[Array[A] val] tag</li> </ul>"},{"location":"promises-Promises/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Promises[A] val)\n: Bool val\n</code></pre>"},{"location":"promises-Promises/#parameters_1","title":"Parameters","text":"<ul> <li>that: Promises[A] val</li> </ul>"},{"location":"promises-Promises/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-Promises/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Promises[A] val)\n: Bool val\n</code></pre>"},{"location":"promises-Promises/#parameters_2","title":"Parameters","text":"<ul> <li>that: Promises[A] val</li> </ul>"},{"location":"promises-Promises/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-Reject/","title":"Reject[A: Any #share]","text":"<p>[Source]</p> <p>A function on A that is called when a promise is rejected.</p> <pre><code>interface iso Reject[A: Any #share]\n</code></pre>"},{"location":"promises-Reject/#public-functions","title":"Public Functions","text":""},{"location":"promises-Reject/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply()\n: A ?\n</code></pre>"},{"location":"promises-Reject/#returns","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"promises-RejectAlways/","title":"RejectAlways[A: Any #share]","text":"<p>[Source]</p> <p>A reject that always raises an error.</p> <pre><code>class iso RejectAlways[A: Any #share]\n</code></pre>"},{"location":"promises-RejectAlways/#constructors","title":"Constructors","text":""},{"location":"promises-RejectAlways/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: RejectAlways[A] iso^\n</code></pre>"},{"location":"promises-RejectAlways/#returns","title":"Returns","text":"<ul> <li>RejectAlways[A] iso^</li> </ul>"},{"location":"promises-RejectAlways/#public-functions","title":"Public Functions","text":""},{"location":"promises-RejectAlways/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply()\n: A ?\n</code></pre>"},{"location":"promises-RejectAlways/#returns_1","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"random--index/","title":"Random package","text":"<p>The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator.</p> <p>If your application does not require a specific generator, use Rand.</p> <p>Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with <code>Time.now</code>.</p> <pre><code>let rand = Rand\nlet n = rand.next()\n</code></pre>"},{"location":"random--index/#public-types","title":"Public Types","text":"<ul> <li>class Dice</li> <li>class MT</li> <li>type Rand</li> <li>trait Random</li> <li>class SplitMix64</li> <li>class XorOshiro128Plus</li> <li>class XorOshiro128StarStar</li> <li>class XorShift128Plus</li> </ul>"},{"location":"random-Dice/","title":"Dice","text":"<p>[Source]</p> <p>A simple dice roller.</p> <pre><code>class ref Dice\n</code></pre>"},{"location":"random-Dice/#constructors","title":"Constructors","text":""},{"location":"random-Dice/#create","title":"create","text":"<p>[Source]</p> <p>Initialise with a random number generator.</p> <pre><code>new ref create(\n  from: Random ref)\n: Dice ref^\n</code></pre>"},{"location":"random-Dice/#parameters","title":"Parameters","text":"<ul> <li>from: Random ref</li> </ul>"},{"location":"random-Dice/#returns","title":"Returns","text":"<ul> <li>Dice ref^</li> </ul>"},{"location":"random-Dice/#public-fields","title":"Public fields","text":""},{"location":"random-Dice/#var-r-random-ref","title":"var r: Random ref","text":"<p>[Source]</p>"},{"location":"random-Dice/#public-functions","title":"Public Functions","text":""},{"location":"random-Dice/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the sum of <code>count</code> rolls of a die with the given number of <code>sides</code>. The die is numbered from 1 to <code>sides</code>. For example, count = 2 and sides = 6 will return a value between 2 and 12.</p> <pre><code>fun ref apply(\n  count: U64 val,\n  sides: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-Dice/#parameters_1","title":"Parameters","text":"<ul> <li>count: U64 val</li> <li>sides: U64 val</li> </ul>"},{"location":"random-Dice/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/","title":"MT","text":"<p>[Source]</p> <p>A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand.</p> <pre><code>class ref MT is\n  Random ref\n</code></pre>"},{"location":"random-MT/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-MT/#constructors","title":"Constructors","text":""},{"location":"random-MT/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: MT ref^\n</code></pre>"},{"location":"random-MT/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-MT/#returns","title":"Returns","text":"<ul> <li>MT ref^</li> </ul>"},{"location":"random-MT/#public-functions","title":"Public Functions","text":""},{"location":"random-MT/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-MT/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#has_next","title":"has_next","text":"<pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-MT/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-MT/#u8","title":"u8","text":"<pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-MT/#returns_3","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-MT/#u16","title":"u16","text":"<pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-MT/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-MT/#u32","title":"u32","text":"<pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-MT/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-MT/#u64","title":"u64","text":"<pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-MT/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#u128","title":"u128","text":"<pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-MT/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-MT/#ulong","title":"ulong","text":"<pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-MT/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-MT/#usize","title":"usize","text":"<pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-MT/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-MT/#i8","title":"i8","text":"<pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-MT/#returns_10","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-MT/#i16","title":"i16","text":"<pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-MT/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-MT/#i32","title":"i32","text":"<pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-MT/#returns_12","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-MT/#i64","title":"i64","text":"<pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-MT/#returns_13","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-MT/#i128","title":"i128","text":"<pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-MT/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-MT/#ilong","title":"ilong","text":"<pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-MT/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-MT/#isize","title":"isize","text":"<pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-MT/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-MT/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_1","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_17","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#real","title":"real","text":"<pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-MT/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-MT/#shufflea-a","title":"shuffle[A: A]","text":"<pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-MT/#parameters_4","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-MT/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-Rand/","title":"Rand","text":"<p>[Source] <pre><code>type Rand is\n  XorOshiro128Plus ref\n</code></pre></p>"},{"location":"random-Rand/#type-alias-for","title":"Type Alias For","text":"<ul> <li>XorOshiro128Plus ref</li> </ul>"},{"location":"random-Random/","title":"Random","text":"<p>[Source]</p> <p>The <code>Random</code> trait should be implemented by all random number generators. The only method you need to implement is <code>fun ref next(): U64</code>. Once that method has been implemented, the <code>Random</code> trait provides default implementations of conversions to other number types.</p> <pre><code>trait ref Random\n</code></pre>"},{"location":"random-Random/#constructors","title":"Constructors","text":""},{"location":"random-Random/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: Random ref^\n</code></pre>"},{"location":"random-Random/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-Random/#returns","title":"Returns","text":"<ul> <li>Random ref^</li> </ul>"},{"location":"random-Random/#public-functions","title":"Public Functions","text":""},{"location":"random-Random/#has_next","title":"has_next","text":"<p>[Source]</p> <p>If used as an iterator, this always has another value.</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-Random/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-Random/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-Random/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-Random/#u8","title":"u8","text":"<p>[Source]</p> <p>A random integer in [0, 2^8)</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-Random/#returns_3","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-Random/#u16","title":"u16","text":"<p>[Source]</p> <p>A random integer in [0, 2^16)</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-Random/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-Random/#u32","title":"u32","text":"<p>[Source]</p> <p>A random integer in [0, 2^32)</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-Random/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-Random/#u64","title":"u64","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-Random/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-Random/#u128","title":"u128","text":"<p>[Source]</p> <p>A random integer in [0, 2^128)</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-Random/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-Random/#ulong","title":"ulong","text":"<p>[Source]</p> <p>A random integer in [0, ULong.max_value()]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-Random/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-Random/#usize","title":"usize","text":"<p>[Source]</p> <p>A random integer in [0, USize.max_value()]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-Random/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-Random/#i8","title":"i8","text":"<p>[Source]</p> <p>A random integer in [-2^7, 2^7)</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-Random/#returns_10","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-Random/#i16","title":"i16","text":"<p>[Source]</p> <p>A random integer in [-2^15, 2^15)</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-Random/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-Random/#i32","title":"i32","text":"<p>[Source]</p> <p>A random integer in [-2^31, 2^31)</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-Random/#returns_12","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-Random/#i64","title":"i64","text":"<p>[Source]</p> <p>A random integer in [-2^63, 2^63)</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-Random/#returns_13","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-Random/#i128","title":"i128","text":"<p>[Source]</p> <p>A random integer in [-2^127, 2^127)</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-Random/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-Random/#ilong","title":"ilong","text":"<p>[Source]</p> <p>A random integer in [ILong.min_value(), ILong.max_value()]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-Random/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-Random/#isize","title":"isize","text":"<p>[Source]</p> <p>A random integer in [ISize.min_value(), ISize.max_value()]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-Random/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-Random/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_1","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_17","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <p>Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication.</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <p>Not biased with small values of <code>n</code> like <code>int</code>.</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#real","title":"real","text":"<p>[Source]</p> <p>A random number in [0, 1)</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-Random/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-Random/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <p>Shuffle the elements of the array into a random order, mutating the array.</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-Random/#parameters_4","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-Random/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-SplitMix64/","title":"SplitMix64","text":"<p>[Source]</p> <p>Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at:</p> <p>http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf</p> <p>Using XorOshiro128StarStar or XorOshiro128Plus should be prefered unless using only 64 bit of state is a requirement.</p> <pre><code>class ref SplitMix64 is\n  Random ref\n</code></pre>"},{"location":"random-SplitMix64/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-SplitMix64/#constructors","title":"Constructors","text":""},{"location":"random-SplitMix64/#from_u64","title":"from_u64","text":"<p>[Source]</p> <pre><code>new ref from_u64(\n  x: U64 val = 5489)\n: SplitMix64 ref^\n</code></pre>"},{"location":"random-SplitMix64/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-SplitMix64/#returns","title":"Returns","text":"<ul> <li>SplitMix64 ref^</li> </ul>"},{"location":"random-SplitMix64/#create","title":"create","text":"<p>[Source]</p> <p>Only x is used, y is discarded.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: SplitMix64 ref^\n</code></pre>"},{"location":"random-SplitMix64/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-SplitMix64/#returns_1","title":"Returns","text":"<ul> <li>SplitMix64 ref^</li> </ul>"},{"location":"random-SplitMix64/#public-functions","title":"Public Functions","text":""},{"location":"random-SplitMix64/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-SplitMix64/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-SplitMix64/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-SplitMix64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-SplitMix64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-SplitMix64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-SplitMix64/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-SplitMix64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-SplitMix64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-SplitMix64/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-SplitMix64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-SplitMix64/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-SplitMix64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-SplitMix64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-SplitMix64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-SplitMix64/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-SplitMix64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-SplitMix64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-SplitMix64/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-SplitMix64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-SplitMix64/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-SplitMix64/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-SplitMix64/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-SplitMix64/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-SplitMix64/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorOshiro128Plus/","title":"XorOshiro128Plus","text":"<p>[Source]</p> <p>This is an implementation of xoroshiro128+, as detailed at:</p> <p>http://xoroshiro.di.unimi.it</p> <p>This is currently the default Rand implementation.</p> <pre><code>class ref XorOshiro128Plus is\n  Random ref\n</code></pre>"},{"location":"random-XorOshiro128Plus/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorOshiro128Plus/#constructors","title":"Constructors","text":""},{"location":"random-XorOshiro128Plus/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\n  x: U64 val = 5489)\n: XorOshiro128Plus ref^\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns","title":"Returns","text":"<ul> <li>XorOshiro128Plus ref^</li> </ul>"},{"location":"random-XorOshiro128Plus/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: XorOshiro128Plus ref^\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_1","title":"Returns","text":"<ul> <li>XorOshiro128Plus ref^</li> </ul>"},{"location":"random-XorOshiro128Plus/#public-functions","title":"Public Functions","text":""},{"location":"random-XorOshiro128Plus/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorOshiro128Plus/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorOshiro128Plus/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorOshiro128Plus/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorOshiro128StarStar/","title":"XorOshiro128StarStar","text":"<p>[Source]</p> <p>This is an implementation of xoroshiro128**, as detailed at:</p> <p>http://xoshiro.di.unimi.it/</p> <p>This Rand implementation is slightly slower than XorOshiro128Plus but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests).</p> <pre><code>class ref XorOshiro128StarStar is\n  Random ref\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorOshiro128StarStar/#constructors","title":"Constructors","text":""},{"location":"random-XorOshiro128StarStar/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\n  x: U64 val = 5489)\n: XorOshiro128StarStar ref^\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns","title":"Returns","text":"<ul> <li>XorOshiro128StarStar ref^</li> </ul>"},{"location":"random-XorOshiro128StarStar/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: XorOshiro128StarStar ref^\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_1","title":"Returns","text":"<ul> <li>XorOshiro128StarStar ref^</li> </ul>"},{"location":"random-XorOshiro128StarStar/#public-functions","title":"Public Functions","text":""},{"location":"random-XorOshiro128StarStar/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorShift128Plus/","title":"XorShift128Plus","text":"<p>[Source]</p> <p>This is an implementation of xorshift+, as detailed at:</p> <p>http://xoroshiro.di.unimi.it</p> <p>This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand.</p> <pre><code>class ref XorShift128Plus is\n  Random ref\n</code></pre>"},{"location":"random-XorShift128Plus/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorShift128Plus/#constructors","title":"Constructors","text":""},{"location":"random-XorShift128Plus/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\n  x: U64 val = 5489)\n: XorShift128Plus ref^\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorShift128Plus/#returns","title":"Returns","text":"<ul> <li>XorShift128Plus ref^</li> </ul>"},{"location":"random-XorShift128Plus/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\n  x: U64 val = 5489,\n  y: U64 val = 0)\n: XorShift128Plus ref^\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorShift128Plus/#returns_1","title":"Returns","text":"<ul> <li>XorShift128Plus ref^</li> </ul>"},{"location":"random-XorShift128Plus/#public-functions","title":"Public Functions","text":""},{"location":"random-XorShift128Plus/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorShift128Plus/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorShift128Plus/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorShift128Plus/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorShift128Plus/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorShift128Plus/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorShift128Plus/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorShift128Plus/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorShift128Plus/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorShift128Plus/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorShift128Plus/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorShift128Plus/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorShift128Plus/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorShift128Plus/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorShift128Plus/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorShift128Plus/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorShift128Plus/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) &amp; Real[N] val)](\n  n: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorShift128Plus/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorShift128Plus/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"signals--index/","title":"Signals package","text":"<p>The Signals package provides support for handling Unix style signals. For each signal that you want to handle, you need to create a <code>SignalHandler</code> and a corresponding <code>SignalNotify</code> object. Each SignalHandler runs as it own actor and upon receiving the signal will call its corresponding <code>SignalNotify</code>'s apply method.</p>"},{"location":"signals--index/#example-program","title":"Example program","text":"<p>The following program will listen for the TERM signal and output a message to standard out if it is received.</p> <pre><code>use \"signals\"\n\nactor Main\n  new create(env: Env) =&gt;\n    // Create a TERM handler\n    let signal = SignalHandler(TermHandler(env), Sig.term())\n    // Raise TERM signal\n    signal.raise()\n\nclass TermHandler is SignalNotify\n  let _env: Env\n\n  new iso create(env: Env) =&gt;\n    _env = env\n\n  fun ref apply(count: U32): Bool =&gt;\n    _env.out.print(\"TERM signal received\")\n    true\n</code></pre>"},{"location":"signals--index/#signal-portability","title":"Signal portability","text":"<p>The <code>Sig</code> primitive provides support for portable signal handling across Linux, FreeBSD and OSX. Signals are not supported on Windows and attempting to use them will cause a compilation error.</p>"},{"location":"signals--index/#shutting-down-handlers","title":"Shutting down handlers","text":"<p>Unlike a <code>TCPConnection</code> and other forms of input receiving, creating a <code>SignalHandler</code> will not keep your program running. As such, you are not required to call <code>dispose</code> on your signal handlers in order to shutdown your program.</p>"},{"location":"signals--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Sig</li> <li>actor SignalHandler</li> <li>interface SignalNotify</li> <li>primitive SignalRaise</li> </ul>"},{"location":"signals-Sig/","title":"Sig","text":"<p>[Source]</p> <p>Define the portable signal numbers. Other signals can be used, but they are not guaranteed to be portable.</p> <pre><code>primitive val Sig\n</code></pre>"},{"location":"signals-Sig/#constructors","title":"Constructors","text":""},{"location":"signals-Sig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Sig val^\n</code></pre>"},{"location":"signals-Sig/#returns","title":"Returns","text":"<ul> <li>Sig val^</li> </ul>"},{"location":"signals-Sig/#public-functions","title":"Public Functions","text":""},{"location":"signals-Sig/#hup","title":"hup","text":"<p>[Source]</p> <pre><code>fun box hup()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#int","title":"int","text":"<p>[Source]</p> <pre><code>fun box int()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_2","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#quit","title":"quit","text":"<p>[Source]</p> <pre><code>fun box quit()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_3","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#ill","title":"ill","text":"<p>[Source]</p> <pre><code>fun box ill()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#trap","title":"trap","text":"<p>[Source]</p> <pre><code>fun box trap()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#abrt","title":"abrt","text":"<p>[Source]</p> <pre><code>fun box abrt()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#emt","title":"emt","text":"<p>[Source]</p> <pre><code>fun box emt()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#fpe","title":"fpe","text":"<p>[Source]</p> <pre><code>fun box fpe()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#kill","title":"kill","text":"<p>[Source]</p> <pre><code>fun box kill()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#bus","title":"bus","text":"<p>[Source]</p> <pre><code>fun box bus()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#segv","title":"segv","text":"<p>[Source]</p> <pre><code>fun box segv()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#sys","title":"sys","text":"<p>[Source]</p> <pre><code>fun box sys()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#pipe","title":"pipe","text":"<p>[Source]</p> <pre><code>fun box pipe()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#alrm","title":"alrm","text":"<p>[Source]</p> <pre><code>fun box alrm()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_14","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#term","title":"term","text":"<p>[Source]</p> <pre><code>fun box term()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_15","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#urg","title":"urg","text":"<p>[Source]</p> <pre><code>fun box urg()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_16","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#stkflt","title":"stkflt","text":"<p>[Source]</p> <pre><code>fun box stkflt()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_17","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#stop","title":"stop","text":"<p>[Source]</p> <pre><code>fun box stop()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_18","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#tstp","title":"tstp","text":"<p>[Source]</p> <pre><code>fun box tstp()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_19","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#cont","title":"cont","text":"<p>[Source]</p> <pre><code>fun box cont()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_20","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#chld","title":"chld","text":"<p>[Source]</p> <pre><code>fun box chld()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_21","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#ttin","title":"ttin","text":"<p>[Source]</p> <pre><code>fun box ttin()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_22","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#ttou","title":"ttou","text":"<p>[Source]</p> <pre><code>fun box ttou()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_23","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#io","title":"io","text":"<p>[Source]</p> <pre><code>fun box io()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_24","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#xcpu","title":"xcpu","text":"<p>[Source]</p> <pre><code>fun box xcpu()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_25","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#xfsz","title":"xfsz","text":"<p>[Source]</p> <pre><code>fun box xfsz()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_26","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#vtalrm","title":"vtalrm","text":"<p>[Source]</p> <pre><code>fun box vtalrm()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_27","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#prof","title":"prof","text":"<p>[Source]</p> <pre><code>fun box prof()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_28","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#winch","title":"winch","text":"<p>[Source]</p> <pre><code>fun box winch()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_29","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#info","title":"info","text":"<p>[Source]</p> <pre><code>fun box info()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_30","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#pwr","title":"pwr","text":"<p>[Source]</p> <pre><code>fun box pwr()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_31","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#usr1","title":"usr1","text":"<p>[Source]</p> <pre><code>fun box usr1()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_32","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#usr2","title":"usr2","text":"<p>[Source]</p> <pre><code>fun box usr2()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_33","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#rt","title":"rt","text":"<p>[Source]</p> <pre><code>fun box rt(\n  n: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"signals-Sig/#parameters","title":"Parameters","text":"<ul> <li>n: U32 val</li> </ul>"},{"location":"signals-Sig/#returns_34","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"signals-Sig/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Sig val)\n: Bool val\n</code></pre>"},{"location":"signals-Sig/#parameters_1","title":"Parameters","text":"<ul> <li>that: Sig val</li> </ul>"},{"location":"signals-Sig/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"signals-Sig/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Sig val)\n: Bool val\n</code></pre>"},{"location":"signals-Sig/#parameters_2","title":"Parameters","text":"<ul> <li>that: Sig val</li> </ul>"},{"location":"signals-Sig/#returns_36","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"signals-SignalHandler/","title":"SignalHandler","text":"<p>[Source]</p> <p>Listen for a specific signal. If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it.</p> <pre><code>actor tag SignalHandler is\n  AsioEventNotify tag\n</code></pre>"},{"location":"signals-SignalHandler/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"signals-SignalHandler/#constructors","title":"Constructors","text":""},{"location":"signals-SignalHandler/#create","title":"create","text":"<p>[Source]</p> <p>Create a signal handler.</p> <pre><code>new tag create(\n  notify: SignalNotify iso,\n  sig: U32 val,\n  wait: Bool val = false)\n: SignalHandler tag^\n</code></pre>"},{"location":"signals-SignalHandler/#parameters","title":"Parameters","text":"<ul> <li>notify: SignalNotify iso</li> <li>sig: U32 val</li> <li>wait: Bool val = false</li> </ul>"},{"location":"signals-SignalHandler/#returns","title":"Returns","text":"<ul> <li>SignalHandler tag^</li> </ul>"},{"location":"signals-SignalHandler/#public-behaviours","title":"Public Behaviours","text":""},{"location":"signals-SignalHandler/#raise","title":"raise","text":"<p>[Source]</p> <p>Raise the signal.</p> <pre><code>be raise()\n</code></pre>"},{"location":"signals-SignalHandler/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Dispose of the signal handler.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"signals-SignalNotify/","title":"SignalNotify","text":"<p>[Source]</p> <p>Notifications for a signal.</p> <pre><code>interface ref SignalNotify\n</code></pre>"},{"location":"signals-SignalNotify/#public-functions","title":"Public Functions","text":""},{"location":"signals-SignalNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Called with the the number of times the signal has fired since this was last called. Return false to stop listening for the signal.</p> <pre><code>fun ref apply(\n  count: U32 val)\n: Bool val\n</code></pre>"},{"location":"signals-SignalNotify/#parameters","title":"Parameters","text":"<ul> <li>count: U32 val</li> </ul>"},{"location":"signals-SignalNotify/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"signals-SignalNotify/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Called if the signal is disposed. This is also called if the notifier returns false.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"signals-SignalNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"signals-SignalRaise/","title":"SignalRaise","text":"<p>[Source]</p> <p>Raise a signal.</p> <pre><code>primitive val SignalRaise\n</code></pre>"},{"location":"signals-SignalRaise/#constructors","title":"Constructors","text":""},{"location":"signals-SignalRaise/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SignalRaise val^\n</code></pre>"},{"location":"signals-SignalRaise/#returns","title":"Returns","text":"<ul> <li>SignalRaise val^</li> </ul>"},{"location":"signals-SignalRaise/#public-functions","title":"Public Functions","text":""},{"location":"signals-SignalRaise/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  sig: U32 val)\n: None val\n</code></pre>"},{"location":"signals-SignalRaise/#parameters","title":"Parameters","text":"<ul> <li>sig: U32 val</li> </ul>"},{"location":"signals-SignalRaise/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"signals-SignalRaise/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: SignalRaise val)\n: Bool val\n</code></pre>"},{"location":"signals-SignalRaise/#parameters_1","title":"Parameters","text":"<ul> <li>that: SignalRaise val</li> </ul>"},{"location":"signals-SignalRaise/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"signals-SignalRaise/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: SignalRaise val)\n: Bool val\n</code></pre>"},{"location":"signals-SignalRaise/#parameters_2","title":"Parameters","text":"<ul> <li>that: SignalRaise val</li> </ul>"},{"location":"signals-SignalRaise/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"strings--index/","title":"Strings package","text":"<p>The Strings package provides utilities for working with sequences of strings.</p>"},{"location":"strings--index/#public-types","title":"Public Types","text":"<ul> <li>primitive CommonPrefix</li> </ul>"},{"location":"strings-CommonPrefix/","title":"CommonPrefix","text":"<p>[Source]</p> <p>Creates a string that is the common prefix of the supplied strings, possibly empty.</p> <pre><code>primitive val CommonPrefix\n</code></pre>"},{"location":"strings-CommonPrefix/#constructors","title":"Constructors","text":""},{"location":"strings-CommonPrefix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CommonPrefix val^\n</code></pre>"},{"location":"strings-CommonPrefix/#returns","title":"Returns","text":"<ul> <li>CommonPrefix val^</li> </ul>"},{"location":"strings-CommonPrefix/#public-functions","title":"Public Functions","text":""},{"location":"strings-CommonPrefix/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\n  data: ReadSeq[Stringable box] box)\n: String iso^\n</code></pre>"},{"location":"strings-CommonPrefix/#parameters","title":"Parameters","text":"<ul> <li>data: ReadSeq[Stringable box] box</li> </ul>"},{"location":"strings-CommonPrefix/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"strings-CommonPrefix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: CommonPrefix val)\n: Bool val\n</code></pre>"},{"location":"strings-CommonPrefix/#parameters_1","title":"Parameters","text":"<ul> <li>that: CommonPrefix val</li> </ul>"},{"location":"strings-CommonPrefix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"strings-CommonPrefix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: CommonPrefix val)\n: Bool val\n</code></pre>"},{"location":"strings-CommonPrefix/#parameters_2","title":"Parameters","text":"<ul> <li>that: CommonPrefix val</li> </ul>"},{"location":"strings-CommonPrefix/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term--index/","title":"Term package","text":"<p>The Term package provides support for building text-based user interfaces in ANSI terminals.</p>"},{"location":"term--index/#public-types","title":"Public Types","text":"<ul> <li>primitive ANSI</li> <li>interface ANSINotify</li> <li>actor ANSITerm</li> <li>primitive EraseLeft</li> <li>primitive EraseLine</li> <li>primitive EraseRight</li> <li>class Readline</li> <li>interface ReadlineNotify</li> </ul>"},{"location":"term-ANSI/","title":"ANSI","text":"<p>[Source]</p> <p>These strings can be embedded in text when writing to a StdStream to create a text-based UI.</p> <pre><code>primitive val ANSI\n</code></pre>"},{"location":"term-ANSI/#constructors","title":"Constructors","text":""},{"location":"term-ANSI/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ANSI val^\n</code></pre>"},{"location":"term-ANSI/#returns","title":"Returns","text":"<ul> <li>ANSI val^</li> </ul>"},{"location":"term-ANSI/#public-functions","title":"Public Functions","text":""},{"location":"term-ANSI/#up","title":"up","text":"<p>[Source]</p> <p>Move the cursor up n lines. 0 is the same as 1.</p> <pre><code>fun box up(\n  n: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters","title":"Parameters","text":"<ul> <li>n: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#down","title":"down","text":"<p>[Source]</p> <p>Move the cursor down n lines. 0 is the same as 1.</p> <pre><code>fun box down(\n  n: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_1","title":"Parameters","text":"<ul> <li>n: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#right","title":"right","text":"<p>[Source]</p> <p>Move the cursor right n columns. 0 is the same as 1.</p> <pre><code>fun box right(\n  n: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_2","title":"Parameters","text":"<ul> <li>n: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#left","title":"left","text":"<p>[Source]</p> <p>Move the cursor left n columns. 0 is the same as 1.</p> <pre><code>fun box left(\n  n: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_3","title":"Parameters","text":"<ul> <li>n: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#cursor","title":"cursor","text":"<p>[Source]</p> <p>Move the cursor to line y, column x. 0 is the same as 1. This indexes from the top left corner of the screen.</p> <pre><code>fun box cursor(\n  x: U32 val = 0,\n  y: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_4","title":"Parameters","text":"<ul> <li>x: U32 val = 0</li> <li>y: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#clear","title":"clear","text":"<p>[Source]</p> <p>Clear the screen and move the cursor to the top left corner.</p> <pre><code>fun box clear()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#erase","title":"erase","text":"<p>[Source]</p> <p>Erases content. The direction to erase is dictated by the <code>direction</code> parameter. Use <code>EraseLeft</code> to erase everything from the cursor to the beginning of the line. Use <code>EraseLine</code> to erase the entire line. Use <code>EraseRight</code> to erase everything from the cursor to the end of the line. The default direction is <code>EraseRight</code>.</p> <pre><code>fun box erase(\n  direction: (EraseLeft val | EraseLine val | EraseRight val) = reference)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_5","title":"Parameters","text":"<ul> <li>direction: (EraseLeft val | EraseLine val | EraseRight val) = reference</li> </ul>"},{"location":"term-ANSI/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#reset","title":"reset","text":"<p>[Source]</p> <p>Resets all colours and text styles to the default.</p> <pre><code>fun box reset()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bold","title":"bold","text":"<p>[Source]</p> <p>Bold text. Does nothing on Windows.</p> <pre><code>fun box bold(\n  state: Bool val = true)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_6","title":"Parameters","text":"<ul> <li>state: Bool val = true</li> </ul>"},{"location":"term-ANSI/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#underline","title":"underline","text":"<p>[Source]</p> <p>Underlined text. Does nothing on Windows.</p> <pre><code>fun box underline(\n  state: Bool val = true)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_7","title":"Parameters","text":"<ul> <li>state: Bool val = true</li> </ul>"},{"location":"term-ANSI/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#blink","title":"blink","text":"<p>[Source]</p> <p>Blinking text. Does nothing on Windows.</p> <pre><code>fun box blink(\n  state: Bool val = true)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_8","title":"Parameters","text":"<ul> <li>state: Bool val = true</li> </ul>"},{"location":"term-ANSI/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Swap foreground and background colour.</p> <pre><code>fun box reverse(\n  state: Bool val = true)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_9","title":"Parameters","text":"<ul> <li>state: Bool val = true</li> </ul>"},{"location":"term-ANSI/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#black","title":"black","text":"<p>[Source]</p> <p>Black text.</p> <pre><code>fun box black()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#red","title":"red","text":"<p>[Source]</p> <p>Red text.</p> <pre><code>fun box red()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#green","title":"green","text":"<p>[Source]</p> <p>Green text.</p> <pre><code>fun box green()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_15","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#yellow","title":"yellow","text":"<p>[Source]</p> <p>Yellow text.</p> <pre><code>fun box yellow()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_16","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#blue","title":"blue","text":"<p>[Source]</p> <p>Blue text.</p> <pre><code>fun box blue()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_17","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#magenta","title":"magenta","text":"<p>[Source]</p> <p>Magenta text.</p> <pre><code>fun box magenta()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_18","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#cyan","title":"cyan","text":"<p>[Source]</p> <p>Cyan text.</p> <pre><code>fun box cyan()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_19","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#grey","title":"grey","text":"<p>[Source]</p> <p>Grey text.</p> <pre><code>fun box grey()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_20","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#white","title":"white","text":"<p>[Source]</p> <p>White text.</p> <pre><code>fun box white()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_red","title":"bright_red","text":"<p>[Source]</p> <p>Bright red text.</p> <pre><code>fun box bright_red()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_22","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_green","title":"bright_green","text":"<p>[Source]</p> <p>Bright green text.</p> <pre><code>fun box bright_green()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_23","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_yellow","title":"bright_yellow","text":"<p>[Source]</p> <p>Bright yellow text.</p> <pre><code>fun box bright_yellow()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_24","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_blue","title":"bright_blue","text":"<p>[Source]</p> <p>Bright blue text.</p> <pre><code>fun box bright_blue()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_25","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_magenta","title":"bright_magenta","text":"<p>[Source]</p> <p>Bright magenta text.</p> <pre><code>fun box bright_magenta()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_26","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_cyan","title":"bright_cyan","text":"<p>[Source]</p> <p>Bright cyan text.</p> <pre><code>fun box bright_cyan()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_27","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_grey","title":"bright_grey","text":"<p>[Source]</p> <p>Bright grey text.</p> <pre><code>fun box bright_grey()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_28","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#black_bg","title":"black_bg","text":"<p>[Source]</p> <p>Black background.</p> <pre><code>fun box black_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_29","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#red_bg","title":"red_bg","text":"<p>[Source]</p> <p>Red background.</p> <pre><code>fun box red_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_30","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#green_bg","title":"green_bg","text":"<p>[Source]</p> <p>Green background.</p> <pre><code>fun box green_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_31","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#yellow_bg","title":"yellow_bg","text":"<p>[Source]</p> <p>Yellow background.</p> <pre><code>fun box yellow_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_32","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#blue_bg","title":"blue_bg","text":"<p>[Source]</p> <p>Blue background.</p> <pre><code>fun box blue_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_33","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#magenta_bg","title":"magenta_bg","text":"<p>[Source]</p> <p>Magenta background.</p> <pre><code>fun box magenta_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_34","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#cyan_bg","title":"cyan_bg","text":"<p>[Source]</p> <p>Cyan background.</p> <pre><code>fun box cyan_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_35","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#grey_bg","title":"grey_bg","text":"<p>[Source]</p> <p>Grey background.</p> <pre><code>fun box grey_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_36","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#white_bg","title":"white_bg","text":"<p>[Source]</p> <p>White background.</p> <pre><code>fun box white_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_37","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_red_bg","title":"bright_red_bg","text":"<p>[Source]</p> <p>Bright red background.</p> <pre><code>fun box bright_red_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_38","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_green_bg","title":"bright_green_bg","text":"<p>[Source]</p> <p>Bright green background.</p> <pre><code>fun box bright_green_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_39","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_yellow_bg","title":"bright_yellow_bg","text":"<p>[Source]</p> <p>Bright yellow background.</p> <pre><code>fun box bright_yellow_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_40","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_blue_bg","title":"bright_blue_bg","text":"<p>[Source]</p> <p>Bright blue background.</p> <pre><code>fun box bright_blue_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_41","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_magenta_bg","title":"bright_magenta_bg","text":"<p>[Source]</p> <p>Bright magenta background.</p> <pre><code>fun box bright_magenta_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_42","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_cyan_bg","title":"bright_cyan_bg","text":"<p>[Source]</p> <p>Bright cyan background.</p> <pre><code>fun box bright_cyan_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_43","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_grey_bg","title":"bright_grey_bg","text":"<p>[Source]</p> <p>Bright grey background.</p> <pre><code>fun box bright_grey_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_44","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: ANSI val)\n: Bool val\n</code></pre>"},{"location":"term-ANSI/#parameters_10","title":"Parameters","text":"<ul> <li>that: ANSI val</li> </ul>"},{"location":"term-ANSI/#returns_45","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-ANSI/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: ANSI val)\n: Bool val\n</code></pre>"},{"location":"term-ANSI/#parameters_11","title":"Parameters","text":"<ul> <li>that: ANSI val</li> </ul>"},{"location":"term-ANSI/#returns_46","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-ANSINotify/","title":"ANSINotify","text":"<p>[Source]</p> <p>Receive input from an ANSITerm.</p> <pre><code>interface ref ANSINotify\n</code></pre>"},{"location":"term-ANSINotify/#public-functions","title":"Public Functions","text":""},{"location":"term-ANSINotify/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>input: U8 val</li> </ul>"},{"location":"term-ANSINotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#up","title":"up","text":"<p>[Source]</p> <pre><code>fun ref up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_1","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#down","title":"down","text":"<p>[Source]</p> <pre><code>fun ref down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_2","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#left","title":"left","text":"<p>[Source]</p> <pre><code>fun ref left(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_3","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#right","title":"right","text":"<p>[Source]</p> <pre><code>fun ref right(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_4","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#delete","title":"delete","text":"<p>[Source]</p> <pre><code>fun ref delete(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_5","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#insert","title":"insert","text":"<p>[Source]</p> <pre><code>fun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_6","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#home","title":"home","text":"<p>[Source]</p> <pre><code>fun ref home(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_7","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#end_key","title":"end_key","text":"<p>[Source]</p> <pre><code>fun ref end_key(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_8","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#page_up","title":"page_up","text":"<p>[Source]</p> <pre><code>fun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_9","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#page_down","title":"page_down","text":"<p>[Source]</p> <pre><code>fun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_10","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#fn_key","title":"fn_key","text":"<p>[Source]</p> <pre><code>fun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_11","title":"Parameters","text":"<ul> <li>i: U8 val</li> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#prompt","title":"prompt","text":"<p>[Source]</p> <pre><code>fun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_12","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>value: String val</li> </ul>"},{"location":"term-ANSINotify/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_13","title":"Parameters","text":"<ul> <li>rows: U16 val</li> <li>cols: U16 val</li> </ul>"},{"location":"term-ANSINotify/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#closed","title":"closed","text":"<p>[Source]</p> <pre><code>fun ref closed()\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/","title":"ANSITerm","text":"<p>[Source]</p> <p>Handles ANSI escape codes from stdin.</p> <pre><code>actor tag ANSITerm\n</code></pre>"},{"location":"term-ANSITerm/#constructors","title":"Constructors","text":""},{"location":"term-ANSITerm/#create","title":"create","text":"<p>[Source]</p> <p>Create a new ANSI term.</p> <pre><code>new tag create(\n  notify: ANSINotify iso,\n  source: DisposableActor tag,\n  timers: Timers tag = reference)\n: ANSITerm tag^\n</code></pre>"},{"location":"term-ANSITerm/#parameters","title":"Parameters","text":"<ul> <li>notify: ANSINotify iso</li> <li>source: DisposableActor tag</li> <li>timers: Timers tag = reference</li> </ul>"},{"location":"term-ANSITerm/#returns","title":"Returns","text":"<ul> <li>ANSITerm tag^</li> </ul>"},{"location":"term-ANSITerm/#public-behaviours","title":"Public Behaviours","text":""},{"location":"term-ANSITerm/#apply","title":"apply","text":"<p>[Source]</p> <p>Receives input from stdin.</p> <pre><code>be apply(\n  data: Array[U8 val] iso)\n</code></pre>"},{"location":"term-ANSITerm/#parameters_1","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"term-ANSITerm/#prompt","title":"prompt","text":"<p>[Source]</p> <p>Pass a prompt along to the notifier.</p> <pre><code>be prompt(\n  value: String val)\n</code></pre>"},{"location":"term-ANSITerm/#parameters_2","title":"Parameters","text":"<ul> <li>value: String val</li> </ul>"},{"location":"term-ANSITerm/#size","title":"size","text":"<p>[Source]</p> <pre><code>be size()\n</code></pre>"},{"location":"term-ANSITerm/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Stop accepting input, inform the notifier we have closed, and dispose of our source.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"term-EraseLeft/","title":"EraseLeft","text":"<p>[Source] <pre><code>primitive val EraseLeft\n</code></pre></p>"},{"location":"term-EraseLeft/#constructors","title":"Constructors","text":""},{"location":"term-EraseLeft/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EraseLeft val^\n</code></pre>"},{"location":"term-EraseLeft/#returns","title":"Returns","text":"<ul> <li>EraseLeft val^</li> </ul>"},{"location":"term-EraseLeft/#public-functions","title":"Public Functions","text":""},{"location":"term-EraseLeft/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: EraseLeft val)\n: Bool val\n</code></pre>"},{"location":"term-EraseLeft/#parameters","title":"Parameters","text":"<ul> <li>that: EraseLeft val</li> </ul>"},{"location":"term-EraseLeft/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseLeft/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: EraseLeft val)\n: Bool val\n</code></pre>"},{"location":"term-EraseLeft/#parameters_1","title":"Parameters","text":"<ul> <li>that: EraseLeft val</li> </ul>"},{"location":"term-EraseLeft/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseLine/","title":"EraseLine","text":"<p>[Source] <pre><code>primitive val EraseLine\n</code></pre></p>"},{"location":"term-EraseLine/#constructors","title":"Constructors","text":""},{"location":"term-EraseLine/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EraseLine val^\n</code></pre>"},{"location":"term-EraseLine/#returns","title":"Returns","text":"<ul> <li>EraseLine val^</li> </ul>"},{"location":"term-EraseLine/#public-functions","title":"Public Functions","text":""},{"location":"term-EraseLine/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: EraseLine val)\n: Bool val\n</code></pre>"},{"location":"term-EraseLine/#parameters","title":"Parameters","text":"<ul> <li>that: EraseLine val</li> </ul>"},{"location":"term-EraseLine/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseLine/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: EraseLine val)\n: Bool val\n</code></pre>"},{"location":"term-EraseLine/#parameters_1","title":"Parameters","text":"<ul> <li>that: EraseLine val</li> </ul>"},{"location":"term-EraseLine/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseRight/","title":"EraseRight","text":"<p>[Source] <pre><code>primitive val EraseRight\n</code></pre></p>"},{"location":"term-EraseRight/#constructors","title":"Constructors","text":""},{"location":"term-EraseRight/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EraseRight val^\n</code></pre>"},{"location":"term-EraseRight/#returns","title":"Returns","text":"<ul> <li>EraseRight val^</li> </ul>"},{"location":"term-EraseRight/#public-functions","title":"Public Functions","text":""},{"location":"term-EraseRight/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: EraseRight val)\n: Bool val\n</code></pre>"},{"location":"term-EraseRight/#parameters","title":"Parameters","text":"<ul> <li>that: EraseRight val</li> </ul>"},{"location":"term-EraseRight/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseRight/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: EraseRight val)\n: Bool val\n</code></pre>"},{"location":"term-EraseRight/#parameters_1","title":"Parameters","text":"<ul> <li>that: EraseRight val</li> </ul>"},{"location":"term-EraseRight/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-Readline/","title":"Readline","text":"<p>[Source]</p> <p>Line editing, history, and tab completion.</p> <pre><code>class ref Readline is\n  ANSINotify ref\n</code></pre>"},{"location":"term-Readline/#implements","title":"Implements","text":"<ul> <li>ANSINotify ref</li> </ul>"},{"location":"term-Readline/#constructors","title":"Constructors","text":""},{"location":"term-Readline/#create","title":"create","text":"<p>[Source]</p> <p>Create a readline handler to be passed to stdin. It begins blocked. Set an initial prompt on the ANSITerm to begin processing.</p> <pre><code>new iso create(\n  notify: ReadlineNotify iso,\n  out: OutStream tag,\n  path: (FilePath val | None val) = reference,\n  maxlen: USize val = 0)\n: Readline iso^\n</code></pre>"},{"location":"term-Readline/#parameters","title":"Parameters","text":"<ul> <li>notify: ReadlineNotify iso</li> <li>out: OutStream tag</li> <li>path: (FilePath val | None val) = reference</li> <li>maxlen: USize val = 0</li> </ul>"},{"location":"term-Readline/#returns","title":"Returns","text":"<ul> <li>Readline iso^</li> </ul>"},{"location":"term-Readline/#public-functions","title":"Public Functions","text":""},{"location":"term-Readline/#apply","title":"apply","text":"<p>[Source]</p> <p>Receives input.</p> <pre><code>fun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_1","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>input: U8 val</li> </ul>"},{"location":"term-Readline/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#prompt","title":"prompt","text":"<p>[Source]</p> <p>Set a new prompt, unblock, and handle the pending queue.</p> <pre><code>fun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_2","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>value: String val</li> </ul>"},{"location":"term-Readline/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#closed","title":"closed","text":"<p>[Source]</p> <p>No more input is available.</p> <pre><code>fun ref closed()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#up","title":"up","text":"<p>[Source]</p> <p>Previous line.</p> <pre><code>fun ref up(\n  ctrl: Bool val = false,\n  alt: Bool val = false,\n  shift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_3","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#down","title":"down","text":"<p>[Source]</p> <p>Next line.</p> <pre><code>fun ref down(\n  ctrl: Bool val = false,\n  alt: Bool val = false,\n  shift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_4","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#left","title":"left","text":"<p>[Source]</p> <p>Move left.</p> <pre><code>fun ref left(\n  ctrl: Bool val = false,\n  alt: Bool val = false,\n  shift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_5","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#right","title":"right","text":"<p>[Source]</p> <p>Move right.</p> <pre><code>fun ref right(\n  ctrl: Bool val = false,\n  alt: Bool val = false,\n  shift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_6","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#home","title":"home","text":"<p>[Source]</p> <p>Beginning of the line.</p> <pre><code>fun ref home(\n  ctrl: Bool val = false,\n  alt: Bool val = false,\n  shift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_7","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#end_key","title":"end_key","text":"<p>[Source]</p> <p>End of the line.</p> <pre><code>fun ref end_key(\n  ctrl: Bool val = false,\n  alt: Bool val = false,\n  shift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_8","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#delete","title":"delete","text":"<p>[Source]</p> <p>Forward delete.</p> <pre><code>fun ref delete(\n  ctrl: Bool val = false,\n  alt: Bool val = false,\n  shift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_9","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#insert","title":"insert","text":"<p>[Source]</p> <pre><code>fun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_10","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-Readline/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#page_up","title":"page_up","text":"<p>[Source]</p> <pre><code>fun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_11","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-Readline/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#page_down","title":"page_down","text":"<p>[Source]</p> <pre><code>fun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_12","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-Readline/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#fn_key","title":"fn_key","text":"<p>[Source]</p> <pre><code>fun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_13","title":"Parameters","text":"<ul> <li>i: U8 val</li> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-Readline/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_14","title":"Parameters","text":"<ul> <li>rows: U16 val</li> <li>cols: U16 val</li> </ul>"},{"location":"term-Readline/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ReadlineNotify/","title":"ReadlineNotify","text":"<p>[Source]</p> <p>Notifier for readline.</p> <pre><code>interface ref ReadlineNotify\n</code></pre>"},{"location":"term-ReadlineNotify/#public-functions","title":"Public Functions","text":""},{"location":"term-ReadlineNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Receives finished lines. The next prompt is set by fulfilling the promise. If the promise is rejected, readline will stop handling input.</p> <pre><code>fun ref apply(\n  line: String val,\n  prompt: Promise[String val] tag)\n: None val\n</code></pre>"},{"location":"term-ReadlineNotify/#parameters","title":"Parameters","text":"<ul> <li>line: String val</li> <li>prompt: Promise[String val] tag</li> </ul>"},{"location":"term-ReadlineNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ReadlineNotify/#tab","title":"tab","text":"<p>[Source]</p> <p>Return tab completion possibilities.</p> <pre><code>fun ref tab(\n  line: String val)\n: Seq[String val] box\n</code></pre>"},{"location":"term-ReadlineNotify/#parameters_1","title":"Parameters","text":"<ul> <li>line: String val</li> </ul>"},{"location":"term-ReadlineNotify/#returns_1","title":"Returns","text":"<ul> <li>Seq[String val] box</li> </ul>"},{"location":"time--index/","title":"Time Package","text":"<p>The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks.</p>"},{"location":"time--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Nanos</li> <li>class PosixDate</li> <li>primitive Time</li> <li>class Timer</li> <li>interface TimerNotify</li> <li>actor Timers</li> </ul>"},{"location":"time-Nanos/","title":"Nanos","text":"<p>[Source]</p> <p>Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package.</p> <pre><code>primitive val Nanos\n</code></pre>"},{"location":"time-Nanos/#constructors","title":"Constructors","text":""},{"location":"time-Nanos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Nanos val^\n</code></pre>"},{"location":"time-Nanos/#returns","title":"Returns","text":"<ul> <li>Nanos val^</li> </ul>"},{"location":"time-Nanos/#public-functions","title":"Public Functions","text":""},{"location":"time-Nanos/#from_seconds","title":"from_seconds","text":"<p>[Source]</p> <pre><code>fun box from_seconds(\n  t: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_millis","title":"from_millis","text":"<p>[Source]</p> <pre><code>fun box from_millis(\n  t: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_1","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_micros","title":"from_micros","text":"<p>[Source]</p> <pre><code>fun box from_micros(\n  t: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_2","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_seconds_f","title":"from_seconds_f","text":"<p>[Source]</p> <pre><code>fun box from_seconds_f(\n  t: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_3","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_millis_f","title":"from_millis_f","text":"<p>[Source]</p> <pre><code>fun box from_millis_f(\n  t: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_4","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_micros_f","title":"from_micros_f","text":"<p>[Source]</p> <pre><code>fun box from_micros_f(\n  t: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_5","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_wall_clock","title":"from_wall_clock","text":"<p>[Source]</p> <pre><code>fun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_6","title":"Parameters","text":"<ul> <li>wall: (I64 val , I64 val)</li> </ul>"},{"location":"time-Nanos/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Nanos val)\n: Bool val\n</code></pre>"},{"location":"time-Nanos/#parameters_7","title":"Parameters","text":"<ul> <li>that: Nanos val</li> </ul>"},{"location":"time-Nanos/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Nanos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Nanos val)\n: Bool val\n</code></pre>"},{"location":"time-Nanos/#parameters_8","title":"Parameters","text":"<ul> <li>that: Nanos val</li> </ul>"},{"location":"time-Nanos/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-PosixDate/","title":"PosixDate","text":"<p>[Source]</p> <p>Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1.</p> <pre><code>class ref PosixDate\n</code></pre>"},{"location":"time-PosixDate/#constructors","title":"Constructors","text":""},{"location":"time-PosixDate/#create","title":"create","text":"<p>[Source]</p> <p>Create a date from a POSIX time. Negative arguments will be changed to zero.</p> <pre><code>new ref create(\n  seconds: I64 val = 0,\n  nanoseconds: I64 val = 0)\n: PosixDate ref^\n</code></pre>"},{"location":"time-PosixDate/#parameters","title":"Parameters","text":"<ul> <li>seconds: I64 val = 0</li> <li>nanoseconds: I64 val = 0</li> </ul>"},{"location":"time-PosixDate/#returns","title":"Returns","text":"<ul> <li>PosixDate ref^</li> </ul>"},{"location":"time-PosixDate/#public-fields","title":"Public fields","text":""},{"location":"time-PosixDate/#var-nsec-i32-val","title":"var nsec: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-sec-i32-val","title":"var sec: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-min-i32-val","title":"var min: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-hour-i32-val","title":"var hour: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_month-i32-val","title":"var day_of_month: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-month-i32-val","title":"var month: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-year-i32-val","title":"var year: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_week-i32-val","title":"var day_of_week: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_year-i32-val","title":"var day_of_year: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#public-functions","title":"Public Functions","text":""},{"location":"time-PosixDate/#time","title":"time","text":"<p>[Source]</p> <p>Return a POSIX time. Treats the date as UTC.</p> <pre><code>fun box time()\n: I64 val\n</code></pre>"},{"location":"time-PosixDate/#returns_1","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"time-PosixDate/#normal","title":"normal","text":"<p>[Source]</p> <p>Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date.</p> <pre><code>fun ref normal()\n: None val\n</code></pre>"},{"location":"time-PosixDate/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-PosixDate/#format","title":"format","text":"<p>[Source]</p> <p>Format the time as for strftime.</p> <p>Will return an empty string if the format string is \"%p\" or \"%P\".</p> <pre><code>fun box format(\n  fmt: String val)\n: String val ?\n</code></pre>"},{"location":"time-PosixDate/#parameters_1","title":"Parameters","text":"<ul> <li>fmt: String val</li> </ul>"},{"location":"time-PosixDate/#returns_3","title":"Returns","text":"<ul> <li>String val ?</li> </ul>"},{"location":"time-Time/","title":"Time","text":"<p>[Source]</p> <p>A collection of ways to fetch the current time.</p> <pre><code>primitive val Time\n</code></pre>"},{"location":"time-Time/#constructors","title":"Constructors","text":""},{"location":"time-Time/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Time val^\n</code></pre>"},{"location":"time-Time/#returns","title":"Returns","text":"<ul> <li>Time val^</li> </ul>"},{"location":"time-Time/#public-functions","title":"Public Functions","text":""},{"location":"time-Time/#now","title":"now","text":"<p>[Source]</p> <p>The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds)</p> <pre><code>fun box now()\n: (I64 val , I64 val)\n</code></pre>"},{"location":"time-Time/#returns_1","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"time-Time/#seconds","title":"seconds","text":"<p>[Source]</p> <p>The wall-clock adjusted system time.</p> <pre><code>fun box seconds()\n: I64 val\n</code></pre>"},{"location":"time-Time/#returns_2","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"time-Time/#millis","title":"millis","text":"<p>[Source]</p> <p>Monotonic unadjusted milliseconds.</p> <pre><code>fun box millis()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#micros","title":"micros","text":"<p>[Source]</p> <p>Monotonic unadjusted microseconds.</p> <pre><code>fun box micros()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#nanos","title":"nanos","text":"<p>[Source]</p> <p>Monotonic unadjusted nanoseconds.</p> <pre><code>fun box nanos()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#cycles","title":"cycles","text":"<p>[Source]</p> <p>Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution.</p> <pre><code>fun box cycles()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#perf_begin","title":"perf_begin","text":"<p>[Source]</p> <p>Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier.</p> <pre><code>fun box perf_begin()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#perf_end","title":"perf_end","text":"<p>[Source]</p> <p>Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later.</p> <pre><code>fun box perf_end()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\n  that: Time val)\n: Bool val\n</code></pre>"},{"location":"time-Time/#parameters","title":"Parameters","text":"<ul> <li>that: Time val</li> </ul>"},{"location":"time-Time/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Time/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\n  that: Time val)\n: Bool val\n</code></pre>"},{"location":"time-Time/#parameters_1","title":"Parameters","text":"<ul> <li>that: Time val</li> </ul>"},{"location":"time-Time/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Timer/","title":"Timer","text":"<p>[Source]</p> <p>The <code>Timer</code> class represents a timer that fires after an expiration time, and then fires at an interval. When a <code>Timer</code> fires, it calls the <code>apply</code> method of the <code>TimerNotify</code> object that was passed to it when it was created.</p> <p>The following example waits 5 seconds and then fires every 2 seconds, and when it fires the <code>TimerNotify</code> object prints how many times it has been called:</p> <pre><code>use \"time\"\n\nactor Main\n  new create(env: Env) =&gt;\n    let timers = Timers\n    let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n    timers(consume timer)\n\nclass Notify is TimerNotify\n  let _env: Env\n  var _counter: U32 = 0\n\n  new iso create(env: Env) =&gt;\n    _env = env\n\n  fun ref apply(timer: Timer, count: U64): Bool =&gt;\n    _env.out.print(_counter.string())\n    _counter = _counter + 1\n    true\n</code></pre> <pre><code>class ref Timer\n</code></pre>"},{"location":"time-Timer/#constructors","title":"Constructors","text":""},{"location":"time-Timer/#create","title":"create","text":"<p>[Source]</p> <p>Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds.</p> <pre><code>new iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = 0)\n: Timer iso^\n</code></pre>"},{"location":"time-Timer/#parameters","title":"Parameters","text":"<ul> <li>notify: TimerNotify iso</li> <li>expiration: U64 val</li> <li>interval: U64 val = 0</li> </ul>"},{"location":"time-Timer/#returns","title":"Returns","text":"<ul> <li>Timer iso^</li> </ul>"},{"location":"time-Timer/#abs","title":"abs","text":"<p>[Source]</p> <p>Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time.</p> <pre><code>new ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = 0)\n: Timer ref^\n</code></pre>"},{"location":"time-Timer/#parameters_1","title":"Parameters","text":"<ul> <li>notify: TimerNotify ref</li> <li>expiration: (I64 val , I64 val)</li> <li>interval: U64 val = 0</li> </ul>"},{"location":"time-Timer/#returns_1","title":"Returns","text":"<ul> <li>Timer ref^</li> </ul>"},{"location":"time-TimerNotify/","title":"TimerNotify","text":"<p>[Source]</p> <p>Notifications for timer.</p> <pre><code>interface ref TimerNotify\n</code></pre>"},{"location":"time-TimerNotify/#public-functions","title":"Public Functions","text":""},{"location":"time-TimerNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Called with the the number of times the timer has fired since this was last called. Usually, the value of <code>count</code> will be 1. If it is not 1, it means that the timer isn't firing on schedule.</p> <p>For example, if your timer is set to fire every 10 milliseconds, and <code>count</code> is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load.</p> <p>Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval).</p> <pre><code>fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n</code></pre>"},{"location":"time-TimerNotify/#parameters","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"time-TimerNotify/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-TimerNotify/#cancel","title":"cancel","text":"<p>[Source]</p> <p>Called if the timer is cancelled. This is also called if the notifier returns false from its <code>apply</code> method.</p> <pre><code>fun ref cancel(\n  timer: Timer ref)\n: None val\n</code></pre>"},{"location":"time-TimerNotify/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"time-TimerNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-Timers/","title":"Timers","text":"<p>[Source]</p> <p>A hierarchical set of timing wheels.</p> <pre><code>actor tag Timers is\n  AsioEventNotify tag\n</code></pre>"},{"location":"time-Timers/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"time-Timers/#constructors","title":"Constructors","text":""},{"location":"time-Timers/#create","title":"create","text":"<p>[Source]</p> <p>Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution.</p> <pre><code>new tag create(\n  slop: USize val = 20)\n: Timers tag^\n</code></pre>"},{"location":"time-Timers/#parameters","title":"Parameters","text":"<ul> <li>slop: USize val = 20</li> </ul>"},{"location":"time-Timers/#returns","title":"Returns","text":"<ul> <li>Timers tag^</li> </ul>"},{"location":"time-Timers/#public-behaviours","title":"Public Behaviours","text":""},{"location":"time-Timers/#apply","title":"apply","text":"<p>[Source]</p> <p>Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer.</p> <pre><code>be apply(\n  timer: Timer iso)\n</code></pre>"},{"location":"time-Timers/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer iso</li> </ul>"},{"location":"time-Timers/#cancel","title":"cancel","text":"<p>[Source]</p> <p>Cancels a timer.</p> <pre><code>be cancel(\n  timer: Timer tag)\n</code></pre>"},{"location":"time-Timers/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer tag</li> </ul>"},{"location":"time-Timers/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Dispose of this set of timing wheels.</p> <pre><code>be dispose()\n</code></pre>"}]}